var KZ = (n, e) => () => (e || n((e = { exports: {} }).exports, e), e.exports);
var aUe = KZ((UUe, zS) => {
  function qZ() {
    Symbol.metadata ?? (Symbol.metadata = Symbol.for("Symbol.metadata"));
  }
  const Pc = {
    get(n, e) {
      var t;
      return (t = e[Symbol.metadata]) == null ? void 0 : t[n];
    },
    define(n, e, ...t) {
      var s;
      let i = (s = Object.getOwnPropertyDescriptor(e, Symbol.metadata)) == null ? void 0 : s.value;
      i == null && Object.defineProperty(e, Symbol.metadata, { value: i = /* @__PURE__ */ Object.create(null), enumerable: !0, configurable: !0, writable: !0 });
      const r = t.length;
      switch (r) {
        case 0:
          throw new Error("At least one key must be provided");
        case 1:
          i[t[0]] = n;
          return;
        case 2:
          i[t[0]] = i[t[1]] = n;
          return;
        default: {
          for (let o = 0; o < r; ++o)
            i[t[o]] = n;
          return;
        }
      }
    },
    has(n, e) {
      const t = e[Symbol.metadata];
      return t == null ? !1 : n in t;
    },
    delete(n, e) {
      const t = e[Symbol.metadata];
      t != null && Reflect.deleteProperty(t, n);
    }
  }, kw = Object.freeze, O6 = Object.assign, XZ = String, tl = Pc.get, Yv = Pc.define, Oi = (n) => n instanceof Promise, oi = (n) => n instanceof Array, kp = (n) => n instanceof Set, ku = (n) => n instanceof Map, k6 = (n) => n instanceof Object;
  function US(n) {
    return typeof n == "object" && n !== null || typeof n == "function";
  }
  const jt = (n) => typeof n == "function", yt = (n) => typeof n == "string", ZZ = (n) => typeof n == "number", sn = () => /* @__PURE__ */ Object.create(null), ea = Object.is, qn = (n, ...e) => new Error(`AUR${XZ(n).padStart(4, "0")}: ${JZ(n, ...e)}`), QZ = {
    1: "No registration for interface: '{{0}}'",
    2: `'{{0}}' was registered with "none" resolver, are you injecting the right key?`,
    3: "Cyclic dependency found: {{0}}",
    4: "Resolver for {{0}} returned a null factory",
    5: "Invalid resolver strategy specified: {{0}}. Did you assign an invalid strategy value?",
    6: "Unable to autoregister dependency: {{0}}",
    7: 'Resource key "{{0}}" already registered',
    8: "Unable to resolve key: {{0}}",
    9: "Attempted to jitRegister something that is not a constructor: '{{0}}'. Did you forget to register this resource?",
    10: 'Attempted to jitRegister an intrinsic type: "{{0}}". Did you forget to add @inject(Key)',
    11: "Invalid resolver, null/undefined returned from the static register method.",
    12: "Attempted to jitRegister an interface: {{0}}",
    13: "Cannot call resolve '{{0}}' before calling prepare or after calling dispose.",
    14: "Key cannot be null or undefined. Are you trying to inject/register something that doesn't exist with DI?A common cause is circular dependency with bundler, did you accidentally introduce circular dependency into your module graph?",
    15: "'{{0}}' is a native function and cannot be safely constructed by DI. If this is intentional, please use a callback or cachedCallback resolver.",
    16: 'There is not a currently active container to resolve "{{0}}". Are you trying to "new Class(...)" that has a resolve(...) call?',
    17: "Failed to instantiate '{{0}}' via @newInstanceOf/@newInstanceForScope, there's no registration and no default implementation, or the default implementation does not result in factory for constructing the instances.",
    18: "Invalid channel name or instance: '{{0}}'.",
    19: "Invalid channel name or type: {{0}}.",
    20: "No defined value found when calling firstDefined()",
    21: "Invalid module transform input: {{0}}. Expected Promise or Object.",
    22: "The @inject decorator on the target ('{{0}}') type '{{1}}' is not supported.",
    23: "Resource key '{{0}}' has already been registered."
  }, JZ = (n, ...e) => {
    let t = QZ[n];
    for (let i = 0; i < e.length; ++i)
      t = t.replace(`{{${i}}}`, String(e[i]));
    return t;
  }, gp = (...n) => globalThis.console.error(...n), Kv = /* @__PURE__ */ (() => {
    const n = {};
    let e = !1, t = 0, i = 0, r = 0;
    return (s) => {
      switch (typeof s) {
        case "number":
          return s >= 0 && (s | 0) === s;
        case "string":
          if (e = n[s], e !== void 0)
            return e;
          if (t = s.length, t === 0)
            return n[s] = !1;
          for (i = 0, r = 0; r < t; ++r)
            if (i = s.charCodeAt(r), r === 0 && i === 48 && t > 1 || i < 48 || i > 57)
              return n[s] = !1;
          return n[s] = !0;
        default:
          return !1;
      }
    };
  })(), D6 = /* @__PURE__ */ function() {
    const n = O6(sn(), {
      0: !0,
      1: !0,
      2: !0,
      3: !0,
      4: !0,
      5: !0,
      6: !0,
      7: !0,
      8: !0,
      9: !0
    }), e = (t) => t === "" ? 0 : t !== t.toUpperCase() ? 3 : t !== t.toLowerCase() ? 2 : n[t] === !0 ? 1 : 0;
    return (t, i) => {
      const r = t.length;
      if (r === 0)
        return t;
      let s = !1, o = "", a, l = "", c = 0, u = t.charAt(0), h = e(u), d = 0;
      for (; d < r; ++d)
        a = c, l = u, c = h, u = t.charAt(d + 1), h = e(u), c === 0 ? o.length > 0 && (s = !0) : (!s && o.length > 0 && c === 2 && (s = a === 3 || h === 3), o += i(l, s), s = !1);
      return o;
    };
  }(), Di = /* @__PURE__ */ function() {
    const n = sn(), e = (t, i) => i ? t.toUpperCase() : t.toLowerCase();
    return (t) => {
      let i = n[t];
      return i === void 0 && (i = n[t] = D6(t, e)), i;
    };
  }(), N6 = /* @__PURE__ */ function() {
    const n = sn();
    return (e) => {
      let t = n[e];
      return t === void 0 && (t = Di(e), t.length > 0 && (t = t[0].toUpperCase() + t.slice(1)), n[e] = t), t;
    };
  }(), L6 = /* @__PURE__ */ function() {
    const n = sn(), e = (t, i) => i ? `-${t.toLowerCase()}` : t.toLowerCase();
    return (t) => {
      let i = n[t];
      return i === void 0 && (i = n[t] = D6(t, e)), i;
    };
  }(), ME = (n) => {
    const e = n.length, t = Array(e);
    let i = 0;
    for (; i < e; ++i)
      t[i] = n[i];
    return t;
  }, kf = (n, e) => {
    const t = e.name;
    e.addInitializer(function() {
      Reflect.defineProperty(this, t, {
        value: n.bind(this),
        writable: !0,
        configurable: !0,
        enumerable: !1
      });
    });
  }, hi = (...n) => {
    const e = [];
    let t = 0;
    const i = n.length;
    let r = 0, s, o = 0;
    for (; o < i; ++o)
      if (s = n[o], s !== void 0) {
        r = s.length;
        let a = 0;
        for (; a < r; ++a)
          e[t++] = s[a];
      }
    return e;
  }, mu = (...n) => {
    const e = n.length;
    let t, i = 0;
    for (; e > i; ++i)
      if (t = n[i], t !== void 0)
        return t;
    throw qn(
      20
      /* ErrorNames.first_defined_no_value */
    );
  }, eQ = /* @__PURE__ */ function() {
    const n = Function.prototype, e = Object.getPrototypeOf, t = /* @__PURE__ */ new WeakMap();
    let i = n, r = 0, s;
    return function(o) {
      if (s = t.get(o), s === void 0)
        for (t.set(o, s = [i = o]), r = 0; (i = e(i)) !== n; )
          s[++r] = i;
      return s;
    };
  }();
  function vA(...n) {
    return O6(sn(), ...n);
  }
  const qH = /* @__PURE__ */ (() => {
    const n = /* @__PURE__ */ new WeakMap();
    let e = !1, t = "", i = 0;
    return (r) => (e = n.get(r), e == null && (i = (t = r.toString()).length, e = i > 28 && t.indexOf("[native code] }") === i - 15, n.set(r, e)), e);
  })(), It = (n, e) => Oi(n) ? n.then(e) : e(n), Pi = (...n) => {
    let e, t, i, r = 0, s = n.length;
    for (; r < s; ++r)
      e = n[r], Oi(e = n[r]) && (t === void 0 ? t = e : i === void 0 ? i = [t, e] : i.push(e));
    return i === void 0 ? t : Promise.all(i);
  }, tQ = (n, e) => new ro(n, 0, e), qv = (n, e) => new ro(n, 1, e), H6 = (n, e) => new ro(n, 2, e), nQ = (n, e) => new ro(n, 3, e), iQ = (n, e) => new ro(n, 3, $6(e)), GS = (n, e) => new ro(e, 5, n), rQ = (n, ...e) => new yQ(n, e), XH = /* @__PURE__ */ new WeakMap(), $6 = (n) => (e, t, i) => {
    let r = XH.get(e);
    if (r === void 0 && XH.set(e, r = /* @__PURE__ */ new WeakMap()), r.has(i))
      return r.get(i);
    const s = n(e, t, i);
    return r.set(i, s), s;
  }, Vd = {
    /**
     * allows you to pass an instance.
     * Every time you request this {@linkcode Key} you will get this instance back.
     * ```
     * Registration.instance(Foo, new Foo()));
     * ```
     *
     * @param key - key to register the instance with
     * @param value - the instance associated with the key
     */
    instance: tQ,
    /**
     * Creates an instance from the class.
     * Every time you request this {@linkcode Key} you will get the same one back.
     * ```
     * Registration.singleton(Foo, Foo);
     * ```
     *
     * @param key - key to register the singleton class with
     * @param value - the singleton class to instantiate when a container resolves the associated key
     */
    singleton: qv,
    /**
     * Creates an instance from a class.
     * Every time you request this {@linkcode Key} you will get a new instance.
     * ```
     * Registration.instance(Foo, Foo);
     * ```
     *
     * @param key - key to register the transient class with
     * @param value - the class to instantiate when a container resolves the associated key
     */
    transient: H6,
    /**
     * Creates an instance from the method passed.
     * Every time you request this {@linkcode Key} you will get a new instance.
     * ```
     * Registration.callback(Foo, () => new Foo());
     * Registration.callback(Bar, (c: IContainer) => new Bar(c.get(Foo)));
     * ```
     *
     * @param key - key to register the callback with
     * @param callback - the callback to invoke when a container resolves the associated key
     */
    callback: nQ,
    /**
     * Creates an instance from the method passed.
     * On the first request for the {@linkcode Key} your callback is called and returns an instance.
     * subsequent requests for the {@linkcode Key}, the initial instance returned will be returned.
     * If you pass the same {@linkcode Registration} to another container the same cached value will be used.
     * Should all references to the resolver returned be removed, the cache will expire.
     * ```
     * Registration.cachedCallback(Foo, () => new Foo());
     * Registration.cachedCallback(Bar, (c: IContainer) => new Bar(c.get(Foo)));
     * ```
     *
     * @param key - key to register the cached callback with
     * @param callback - the cache callback to invoke when a container resolves the associated key
     */
    cachedCallback: iQ,
    /**
     * creates an alternate {@linkcode Key} to retrieve an instance by.
     * Returns the same scope as the original {@linkcode Key}.
     * ```
     * Register.singleton(Foo, Foo)
     * Register.aliasTo(Foo, MyFoos);
     *
     * container.getAll(MyFoos) // contains an instance of Foo
     * ```
     *
     * @param originalKey - the real key to resolve the get call from a container
     * @param aliasKey - the key that a container allows to resolve the real key associated
     */
    aliasTo: GS,
    /**
     * @internal
     * @param key - the key to register a defer registration
     * @param params - the parameters that should be passed to the resolution of the key
     */
    defer: rQ
  }, Dw = function(n) {
    return function(t) {
      t.register(qv(this, this), GS(this, n));
    };
  }, Id = "au:annotation", Du = (n, e) => e === void 0 ? `${Id}:${n}` : `${Id}:${n}:${e}`, sQ = (n, e) => {
    const t = tl(Id, n);
    t === void 0 ? Yv([e], n, Id) : t.push(e);
  }, oQ = /* @__PURE__ */ kw({
    name: "au:annotation",
    appendTo: sQ,
    set(n, e, t) {
      Yv(t, n, Du(e));
    },
    get: (n, e) => tl(Du(e), n),
    getKeys(n) {
      let e = tl(Id, n);
      return e === void 0 && Yv(e = [], n, Id), e;
    },
    isKey: (n) => n.startsWith(Id),
    keyFor: Du
  }), Ya = "au:resource", gf = (n, e, t) => `${Ya}:${n}`, F6 = {
    annotation: oQ
  }, B6 = Object.prototype.hasOwnProperty;
  function Ps(n, e, t, i) {
    let r = tl(Du(n), t);
    return r === void 0 ? (r = e[n], r === void 0 ? (r = t[n], r === void 0 || !B6.call(t, n) ? i() : r) : r) : r;
  }
  function Co(n, e, t) {
    let i = tl(Du(n), e);
    return i === void 0 ? (i = e[n], i === void 0 || !B6.call(e, n) ? t() : i) : i;
  }
  function So(n, e, t) {
    const i = e[n];
    return i === void 0 ? t() : i;
  }
  const hl = Symbol.for("au:registrable"), aQ = {
    none(n) {
      throw qn(2, n);
    },
    singleton: (n) => new ro(n, 1, n),
    transient: (n) => new ro(n, 2, n)
  };
  class Xa {
    constructor(e, t) {
      this.inheritParentResources = e, this.defaultResolver = t;
    }
    static from(e) {
      return e === void 0 || e === Xa.DEFAULT ? Xa.DEFAULT : new Xa(e.inheritParentResources ?? !1, e.defaultResolver ?? aQ.singleton);
    }
  }
  Xa.DEFAULT = Xa.from({});
  const lQ = (n) => new qb(null, Xa.from(n)), cQ = new Set("Array ArrayBuffer Boolean DataView Date Error EvalError Float32Array Float64Array Function Int8Array Int16Array Int32Array Map Number Object Promise RangeError ReferenceError RegExp Set SharedArrayBuffer String SyntaxError TypeError Uint8Array Uint8ClampedArray Uint16Array Uint32Array URIError WeakMap WeakSet".split(" "));
  let uQ = 0, Mn = null;
  class qb {
    get depth() {
      return this._parent === null ? 0 : this._parent.depth + 1;
    }
    get parent() {
      return this._parent;
    }
    constructor(e, t) {
      if (this.id = ++uQ, this._registerDepth = 0, this._disposableResolvers = /* @__PURE__ */ new Map(), this._parent = e, this.config = t, this._resolvers = /* @__PURE__ */ new Map(), this.res = {}, e === null)
        this.root = this, this._factories = /* @__PURE__ */ new Map();
      else if (this.root = e.root, this._factories = e._factories, t.inheritParentResources)
        for (const i in e.res)
          this.registerResolver(i, e.res[i]);
      this._resolvers.set(Dp, dQ);
    }
    register(...e) {
      var u, h, d, f;
      if (++this._registerDepth === 100)
        throw qn(6, ...e);
      let t, i, r, s, o, a = 0, l = e.length, c;
      for (; a < l; ++a)
        if (t = e[a], !!US(t))
          if (kb(t))
            t.register(this);
          else if ((c = tl(Ya, t)) != null)
            c.register(this);
          else if (gQ(t)) {
            const g = (u = t[Symbol.metadata]) == null ? void 0 : u[hl];
            if (kb(g))
              g.register(this);
            else if (yt((h = t.$au) == null ? void 0 : h.type)) {
              const p = t.$au, m = (t.aliases ?? pt).concat(p.aliases ?? pt);
              let v = `${Ya}:${p.type}:${p.name}`;
              if (this.has(v, !1)) {
                (d = globalThis.console) == null || d.warn(qn(7, v));
                continue;
              }
              for (GS(t, v).register(this), this.has(t, !1) || qv(t, t).register(this), s = 0, o = m.length; s < o; ++s) {
                if (v = `${Ya}:${p.type}:${m[s]}`, this.has(v, !1)) {
                  (f = globalThis.console) == null || f.warn(qn(7, v));
                  continue;
                }
                GS(t, v).register(this);
              }
            } else
              qv(t, t).register(this);
          } else
            for (i = Object.keys(t), s = 0, o = i.length; s < o; ++s)
              r = t[i[s]], US(r) && (kb(r) ? r.register(this) : this.register(r));
      return --this._registerDepth, this;
    }
    registerResolver(e, t, i = !1) {
      dm(e);
      const r = this._resolvers, s = r.get(e);
      if (s == null) {
        if (r.set(e, t), AE(e)) {
          if (this.res[e] !== void 0)
            throw qn(7, e);
          this.res[e] = t;
        }
      } else s instanceof ro && s._strategy === 4 ? s._state.push(t) : r.set(e, new ro(e, 4, [s, t]));
      return i && this._disposableResolvers.set(e, t), t;
    }
    deregister(e) {
      dm(e);
      const t = this._resolvers.get(e);
      t != null && (this._resolvers.delete(e), AE(e) && delete this.res[e], this._disposableResolvers.has(e) && (t.dispose(), this._disposableResolvers.delete(e)));
    }
    // public deregisterResolverFor<K extends Key>(key: K, searchAncestors: boolean): void {
    //   validateKey(key);
    //   // eslint-disable-next-line @typescript-eslint/no-this-alias
    //   let current: Container | null = this;
    //   let resolver: IResolver | undefined;
    //   while (current != null) {
    //     resolver = current._resolvers.get(key);
    //     if (resolver != null) {
    //       current._resolvers.delete(key);
    //       break;
    //     }
    //     if (current.parent == null) { return; }
    //     current = searchAncestors ? current.parent : null;
    //   }
    //   if (resolver == null) { return; }
    //   if (resolver instanceof Resolver && resolver.strategy === ResolverStrategy.array) {
    //     throw createError('Cannot deregister a resolver with array strategy');
    //   }
    //   if (this._disposableResolvers.has(resolver as IDisposableResolver<K>)) {
    //     (resolver as IDisposableResolver<K>).dispose();
    //   }
    //   if (isResourceKey(key)) {
    //     // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
    //     delete this.res[key];
    //   }
    // }
    registerTransformer(e, t) {
      const i = this.getResolver(e);
      if (i == null)
        return !1;
      if (i.getFactory) {
        const r = i.getFactory(this);
        return r == null ? !1 : (r.registerTransformer(t), !0);
      }
      return !1;
    }
    getResolver(e, t = !0) {
      if (dm(e), e.resolve !== void 0)
        return e;
      const i = Mn;
      let r = Mn = this, s, o;
      try {
        for (; r != null; )
          if (s = r._resolvers.get(e), s == null) {
            if (r._parent == null)
              return o = JH(e) ? this : r, t ? this._jitRegister(e, o) : null;
            r = r._parent;
          } else
            return s;
      } finally {
        Mn = i;
      }
      return null;
    }
    has(e, t = !1) {
      var i;
      return this._resolvers.has(e) || AE(e) && e in this.res || ((t && ((i = this._parent) == null ? void 0 : i.has(e, !0))) ?? !1);
    }
    get(e) {
      if (dm(e), e.$isResolver)
        return e.resolve(this, this);
      const t = Mn;
      let i = Mn = this, r, s;
      try {
        for (; i != null; )
          if (r = i._resolvers.get(e), r == null) {
            if (i._parent == null)
              return s = JH(e) ? this : i, r = this._jitRegister(e, s), r.resolve(i, this);
            i = i._parent;
          } else
            return r.resolve(i, this);
      } finally {
        Mn = t;
      }
      throw qn(8, e);
    }
    getAll(e, t = !1) {
      dm(e);
      const i = Mn, r = Mn = this;
      let s = r, o, a = pt;
      try {
        if (t) {
          for (; s != null; )
            o = s._resolvers.get(e), o != null && (a = a.concat(QH(o, s, r))), s = s._parent;
          return a;
        }
        for (; s != null; )
          if (o = s._resolvers.get(e), o == null) {
            if (s = s._parent, s == null)
              return pt;
          } else
            return QH(o, s, r);
      } finally {
        Mn = i;
      }
      return pt;
    }
    invoke(e, t) {
      if (qH(e))
        throw qn(15, e);
      const i = Mn;
      Mn = this;
      {
        let r, s;
        try {
          r = Dg(e).map((o) => this.get(s = o));
        } catch (o) {
          throw gp(`[DEV:aurelia] Error during construction of ${e.name ? e.name : `(Anonymous) ${String(e)}`}, caused by dependency: ${String(s)}`), Mn = i, o;
        }
        try {
          return t === void 0 ? new e(...r) : new e(...r, ...t);
        } catch (o) {
          throw gp(`[DEV:aurelia] Error during construction of ${e.name ? e.name : `(Anonymous) ${String(e)}`}`), o;
        } finally {
          Mn = i;
        }
      }
      try {
        return t === void 0 ? new e(...Dg(e).map(Xv, this)) : new e(...Dg(e).map(Xv, this), ...t);
      } finally {
        Mn = i;
      }
    }
    hasFactory(e) {
      return this._factories.has(e);
    }
    getFactory(e) {
      let t = this._factories.get(e);
      if (t === void 0) {
        if (qH(e))
          throw qn(15, e);
        this._factories.set(e, t = new hQ(e, Dg(e)));
      }
      return t;
    }
    registerFactory(e, t) {
      this._factories.set(e, t);
    }
    createChild(e) {
      return e === void 0 && this.config.inheritParentResources ? this.config === Xa.DEFAULT ? new qb(this, this.config) : new qb(this, Xa.from({
        ...this.config,
        inheritParentResources: !1
      })) : new qb(this, Xa.from(e ?? this.config));
    }
    disposeResolvers() {
      var s;
      const e = this._resolvers, t = this._disposableResolvers;
      let i, r;
      for ([r, i] of t.entries())
        (s = i.dispose) == null || s.call(i), e.delete(r);
      t.clear();
    }
    useResources(e) {
      const t = e.res;
      for (const i in t)
        this.registerResolver(i, t[i]);
    }
    find(e, t) {
      var o, a;
      const i = yt(t) ? `${Ya}:${e}:${t}` : e;
      let r = this, s = r.res[i];
      return s == null && (r = r.root, s = r.res[i]), s == null ? null : ((a = (o = s.getFactory) == null ? void 0 : o.call(s, r)) == null ? void 0 : a.Type) ?? null;
    }
    dispose() {
      this._disposableResolvers.size > 0 && this.disposeResolvers(), this._resolvers.clear(), this.root === this && (this._factories.clear(), this.res = {});
    }
    /** @internal */
    _jitRegister(e, t) {
      const i = kb(e);
      if (!jt(e) && !i)
        throw qn(9, e);
      if (cQ.has(e.name))
        throw qn(10, e);
      if (i) {
        const s = e.register(t, e);
        if (!(s instanceof Object) || s.resolve == null) {
          const o = t._resolvers.get(e);
          if (o != null)
            return o;
          throw qn(11, e);
        }
        return s;
      }
      if (e.$isInterface)
        throw qn(12, e.friendlyName);
      const r = this.config.defaultResolver(e, t);
      return t._resolvers.set(e, r), r;
    }
  }
  class hQ {
    constructor(e, t) {
      this.Type = e, this.dependencies = t, this.transformers = null;
    }
    construct(e, t) {
      const i = Mn;
      Mn = e;
      let r;
      {
        let s, o;
        try {
          s = this.dependencies.map((a) => e.get(o = a));
        } catch (a) {
          throw gp(`[DEV:aurelia] Error during construction of ${this.Type.name ? this.Type.name : `(Anonymous) ${String(this.Type)}`}, caused by dependency: ${String(o)}`), Mn = i, a;
        }
        try {
          return t === void 0 ? r = new this.Type(...s) : r = new this.Type(...s, ...t), this.transformers == null ? r : this.transformers.reduce(ZH, r);
        } catch (a) {
          throw gp(`[DEV:aurelia] Error during construction of ${this.Type.name ? this.Type.name : `(Anonymous) ${String(this.Type)}`}`), a;
        } finally {
          Mn = i;
        }
      }
      try {
        return t === void 0 ? r = new this.Type(...this.dependencies.map(Xv, e)) : r = new this.Type(...this.dependencies.map(Xv, e), ...t), this.transformers == null ? r : this.transformers.reduce(ZH, r);
      } finally {
        Mn = i;
      }
    }
    registerTransformer(e) {
      (this.transformers ?? (this.transformers = [])).push(e);
    }
  }
  function ZH(n, e) {
    return e(n);
  }
  function dm(n) {
    if (n == null)
      throw qn(
        14
        /* ErrorNames.null_undefined_key */
      );
  }
  function Xv(n) {
    return this.get(n);
  }
  function ge(...n) {
    if (Mn == null)
      throw qn(16, ...n);
    if (n.length === 1)
      try {
        return Mn.get(n[0]);
      } catch (e) {
        throw gp(`[DEV:aurelia] resolve() call error for: ${String(n[0])}`), e;
      }
    else {
      let e;
      try {
        return n.map((t) => Mn.get(e = t));
      } catch (t) {
        throw gp(`[DEV:aurelia] resolve() call error for: ${String(e)}`), t;
      }
    }
    return n.length === 1 ? Mn.get(n[0]) : n.map(Xv, Mn);
  }
  const QH = (n, e, t) => {
    if (n instanceof ro && n._strategy === 4) {
      const i = n._state, r = i.length, s = Array(r);
      let o = 0;
      for (; o < r; ++o)
        s[o] = i[o].resolve(e, t);
      return s;
    }
    return [n.resolve(e, t)];
  }, dQ = {
    $isResolver: !0,
    resolve(n, e) {
      return e;
    }
  }, kb = (n) => jt(n == null ? void 0 : n.register), fQ = (n) => kb(n) && typeof n.registerInRequestor == "boolean", JH = (n) => fQ(n) && n.registerInRequestor, gQ = (n) => n.prototype !== void 0, AE = (n) => yt(n) && n.indexOf(":") > 0;
  class pQ {
    constructor(e, t) {
      this._container = e, this._key = t;
    }
    instance(e) {
      return this._registerResolver(0, e);
    }
    singleton(e) {
      return this._registerResolver(1, e);
    }
    transient(e) {
      return this._registerResolver(2, e);
    }
    callback(e) {
      return this._registerResolver(3, e);
    }
    cachedCallback(e) {
      return this._registerResolver(3, $6(e));
    }
    aliasTo(e) {
      return this._registerResolver(5, e);
    }
    /** @internal */
    _registerResolver(e, t) {
      const { _container: i, _key: r } = this;
      return this._container = this._key = void 0, i.registerResolver(r, new ro(r, e, t));
    }
  }
  const fm = (n) => {
    const e = n.slice(), t = Object.keys(n), i = t.length;
    let r;
    for (let s = 0; s < i; ++s)
      r = t[s], Kv(r) || (e[r] = n[r]);
    return e;
  }, tS = Du("di:paramtypes"), mQ = (n) => tl(tS, n), V6 = (n) => tl("design:paramtypes", n), e$ = (n) => {
    var e;
    return (e = n.metadata)[tS] ?? (e[tS] = []);
  }, Dg = (n) => {
    const e = Du("di:dependencies");
    let t = tl(e, n);
    if (t === void 0) {
      const i = n.inject;
      if (i === void 0) {
        const r = V6(n), s = mQ(n);
        if (r === void 0)
          if (s === void 0) {
            const o = Object.getPrototypeOf(n);
            jt(o) && o !== Function.prototype ? t = fm(Dg(o)) : t = [];
          } else
            t = fm(s);
        else if (s === void 0)
          t = fm(r);
        else {
          t = fm(r);
          let o = s.length, a, l = 0;
          for (; l < o; ++l)
            a = s[l], a !== void 0 && (t[l] = a);
          const c = Object.keys(s);
          let u;
          for (l = 0, o = c.length, l = 0; l < o; ++l)
            u = c[l], Kv(u) || (t[u] = s[u]);
        }
      } else
        t = fm(i);
      Yv(t, n, e);
    }
    return t;
  }, Ic = (n, e) => {
    const t = jt(n) ? n : e, i = (yt(n) ? n : void 0) ?? "(anonymous)", r = {
      // Old code kept with the hope that the argument decorator proposal will be standardized by TC39 (https://github.com/tc39/proposal-class-method-parameter-decorators)
      // function(_target: Injectable | AbstractInjectable, _property: string | symbol | undefined, _index: number | undefined): void {
      //    if (target == null || new.target !== undefined) {
      //     throw createMappedError(ErrorNames.no_registration_for_interface, friendlyName);
      //    }
      //    const annotationParamtypes = getOrCreateAnnotationParamTypes(target as Injectable);
      //    annotationParamtypes[index!] = Interface;
      // },
      $isInterface: !0,
      friendlyName: i,
      toString: () => `InterfaceSymbol<${i}>`,
      register: t != null ? (s, o) => t(new pQ(s, o ?? r)) : void 0
    };
    return r;
  }, uO = (...n) => (e, t) => {
    switch (t.kind) {
      case "class": {
        const i = e$(t);
        let r, s = 0;
        for (; s < n.length; ++s)
          r = n[s], r !== void 0 && (i[s] = r);
        break;
      }
      case "field": {
        const i = e$(t), r = n[0];
        r !== void 0 && (i[t.name] = r);
        break;
      }
      default:
        throw qn(22, String(t.name), t.kind);
    }
  }, pf = (qZ(), {
    createContainer: lQ,
    getDesignParamtypes: V6,
    // getAnnotationParamtypes,
    // getOrCreateAnnotationParamTypes,
    getDependencies: Dg,
    /**
     * creates a decorator that also matches an interface and can be used as a {@linkcode Key}.
     * ```ts
     * const ILogger = DI.createInterface<Logger>('Logger');
     * container.register(Registration.singleton(ILogger, getSomeLogger()));
     * const log = container.get(ILogger);
     * log.info('hello world');
     * class Foo {
     *   constructor( @ILogger log: ILogger ) {
     *     log.info('hello world');
     *   }
     * }
     * ```
     * you can also build default registrations into your interface.
     * ```ts
     * export const ILogger = DI.createInterface<Logger>('Logger', builder => builder.cachedCallback(LoggerDefault));
     * const log = container.get(ILogger);
     * log.info('hello world');
     * class Foo {
     *   constructor( @ILogger log: ILogger ) {
     *     log.info('hello world');
     *   }
     * }
     * ```
     * but these default registrations won't work the same with other decorators that take keys, for example
     * ```ts
     * export const MyStr = DI.createInterface<string>('MyStr', builder => builder.instance('somestring'));
     * class Foo {
     *   constructor( @optional(MyStr) public readonly str: string ) {
     *   }
     * }
     * container.get(Foo).str; // returns undefined
     * ```
     * to fix this add this line somewhere before you do a `get`
     * ```ts
     * container.register(MyStr);
     * container.get(Foo).str; // returns 'somestring'
     * ```
     *
     * - @param configureOrName - supply a string to improve error messaging
     */
    createInterface: Ic,
    inject: uO,
    /**
     * Registers the `target` class as a transient dependency; each time the dependency is resolved
     * a new instance will be created.
     *
     * @param target - The class / constructor function to register as transient.
     * @returns The same class, with a static `register` method that takes a container and returns the appropriate resolver.
     *
     * @example ```ts
     * // On an existing class
     * class Foo { }
     * DI.transient(Foo);
     *
     * // Inline declaration
     * const Foo = DI.transient(class { });
     * // Foo is now strongly typed with register
     * Foo.register(container);
     * ```
     */
    transient(n) {
      return n.register = function(e) {
        return H6(n, n).register(e, n);
      }, n.registerInRequestor = !1, n;
    },
    /**
     * Registers the `target` class as a singleton dependency; the class will only be created once. Each
     * consecutive time the dependency is resolved, the same instance will be returned.
     *
     * @param target - The class / constructor function to register as a singleton.
     * @returns The same class, with a static `register` method that takes a container and returns the appropriate resolver.
     * @example ```ts
     * // On an existing class
     * class Foo { }
     * DI.singleton(Foo);
     *
     * // Inline declaration
     * const Foo = DI.singleton(class { });
     * // Foo is now strongly typed with register
     * Foo.register(container);
     * ```
     */
    singleton(n, e = wQ) {
      return n.register = function(t) {
        return qv(n, n).register(t, n);
      }, n.registerInRequestor = e.scoped, n;
    }
  }), Dp = /* @__PURE__ */ Ic("IContainer"), bQ = Dp;
  function t$(n, e) {
    return pf.transient(n);
  }
  function vQ(n, e) {
    return n == null ? t$ : t$(n);
  }
  const wQ = { scoped: !1 };
  class ro {
    get $isResolver() {
      return !0;
    }
    constructor(e, t, i) {
      this._resolving = !1, this._cachedFactory = null, this._key = e, this._strategy = t, this._state = i;
    }
    register(e, t) {
      return e.registerResolver(t || this._key, this);
    }
    resolve(e, t) {
      switch (this._strategy) {
        case 0:
          return this._state;
        case 1: {
          if (this._resolving)
            throw qn(3, this._state.name);
          return this._resolving = !0, this._state = (this._cachedFactory = e.getFactory(this._state)).construct(t), this._strategy = 0, this._resolving = !1, this._state;
        }
        case 2: {
          const i = e.getFactory(this._state);
          if (i === null)
            throw qn(4, this._key);
          return i.construct(t);
        }
        case 3:
          return this._state(e, t, this);
        case 4:
          return this._state[0].resolve(e, t);
        case 5:
          return t.get(this._state);
        default:
          throw qn(5, this._strategy);
      }
    }
    getFactory(e) {
      var t, i;
      switch (this._strategy) {
        case 1:
        case 2:
          return e.getFactory(this._state);
        case 5:
          return ((i = (t = e.getResolver(this._state)) == null ? void 0 : t.getFactory) == null ? void 0 : i.call(t, e)) ?? null;
        case 0:
          return this._cachedFactory;
        default:
          return null;
      }
    }
  }
  class ar {
    get friendlyName() {
      return this._name;
    }
    constructor(e, t = null, i = null) {
      this._name = e, this._instance = t, this._Type = i;
    }
    prepare(e) {
      this._instance = e;
    }
    get $isResolver() {
      return !0;
    }
    resolve() {
      if (this._instance == null)
        throw qn(13, this._name);
      return this._instance;
    }
    getFactory(e) {
      return this._Type == null ? null : e.getFactory(this._Type);
    }
    dispose() {
      this._instance = null;
    }
  }
  class yQ {
    constructor(e, t) {
      this.key = e, this.params = t;
    }
    register(e) {
      e.has(this.key, !0) ? e.get(this.key).register(e, ...this.params) : e.register(...this.params.filter((t) => typeof t == "object"));
    }
  }
  const pt = kw([]), W6 = kw({});
  function Za() {
  }
  const Np = /* @__PURE__ */ Ic("IPlatform");
  function Nw(n) {
    return function(e) {
      function t(i, r) {
        uO(t)(i, r);
      }
      return t.$isResolver = !0, t.resolve = function(i, r) {
        return n(e, i, r);
      }, t;
    };
  }
  const hO = (n, e = !1) => {
    function t(i, r) {
      uO(t)(i, r);
    }
    return t.$isResolver = !0, t.resolve = (i, r) => r.getAll(n, e), t;
  }, j6 = /* @__PURE__ */ Nw((n, e, t) => {
    if (t.has(n, !0))
      return t.get(n);
  }), CQ = /* @__PURE__ */ Nw((n, e, t) => t.has(n, !1) ? t.get(n) : void 0), pp = /* @__PURE__ */ Nw((n, e, t) => t.has(n, !1) ? t.get(n) : t.root.get(n)), SQ = /* @__PURE__ */ Nw((n, e, t) => t.has(n, !1) ? t.get(n) : t.root.has(n, !1) ? t.root.get(n) : void 0), _Q = /* @__PURE__ */ Nw((n, e, t) => (
    // prevent duplicate retrieval
    t === t.root ? t.getAll(n, !1) : t.has(n, !1) ? t.getAll(n, !1).concat(t.root.getAll(n, !1)) : t.root.getAll(n, !1)
  ));
  function Df(n, e, t, i, r, s) {
    function o(v) {
      if (v !== void 0 && typeof v != "function") throw new TypeError("Function expected");
      return v;
    }
    for (var a = i.kind, l = a === "getter" ? "get" : a === "setter" ? "set" : "value", c = n ? i.static ? n : n.prototype : null, u = c ? Object.getOwnPropertyDescriptor(c, i.name) : {}, h, d = !1, f = t.length - 1; f >= 0; f--) {
      var g = {};
      for (var p in i) g[p] = p === "access" ? {} : i[p];
      for (var p in i.access) g.access[p] = i.access[p];
      g.addInitializer = function(v) {
        if (d) throw new TypeError("Cannot add initializers after decoration has completed");
        s.push(o(v || null));
      };
      var m = (0, t[f])(a === "accessor" ? { get: u.get, set: u.set } : u[l], g);
      if (a === "accessor") {
        if (m === void 0) continue;
        if (m === null || typeof m != "object") throw new TypeError("Object expected");
        (h = o(m.get)) && (u.get = h), (h = o(m.set)) && (u.set = h), (h = o(m.init)) && r.unshift(h);
      } else (h = o(m)) && (a === "field" ? r.unshift(h) : u[l] = h);
    }
    c && Object.defineProperty(c, i.name, u), d = !0;
  }
  function RQ(n, e, t) {
    for (var i = arguments.length > 2, r = 0; r < e.length; r++)
      t = i ? e[r].call(n, t) : e[r].call(n);
    return i ? t : void 0;
  }
  const Xb = 0, Zb = 1, Qb = 2, Qg = 3, Jb = 4, ev = 5, EQ = 6, xQ = kw({
    /**
     * The most detailed information about internal app state.
     *
     * Disabled by default and should never be enabled in a production environment.
     */
    trace: Xb,
    /**
     * Information that is useful for debugging during development and has no long-term value.
     */
    debug: Zb,
    /**
     * Information about the general flow of the application that has long-term value.
     */
    info: Qb,
    /**
     * Unexpected circumstances that require attention but do not otherwise cause the current flow of execution to stop.
     */
    warn: Qg,
    /**
     * Unexpected circumstances that cause the flow of execution in the current activity to stop but do not cause an app-wide failure.
     */
    error: Jb,
    /**
     * Unexpected circumstances that cause an app-wide failure or otherwise require immediate attention.
     */
    fatal: ev,
    /**
     * No messages should be written.
     */
    none: EQ
  }), z6 = /* @__PURE__ */ Ic("ILogConfig", (n) => n.instance(new IQ("no-colors", Qg))), TQ = /* @__PURE__ */ Ic("ISink"), MQ = /* @__PURE__ */ Ic("ILogEventFactory", (n) => n.singleton(kQ)), Wd = /* @__PURE__ */ Ic("ILogger", (n) => n.singleton(DQ)), AQ = /* @__PURE__ */ Ic("ILogScope"), PQ = /* @__PURE__ */ kw({
    key: Du("logger-sink-handles"),
    define(n, e) {
      Yv(e.handles, n, this.key);
    },
    getHandles(n) {
      return tl(this.key, n.constructor);
    }
  }), Kl = vA({
    red(n) {
      return `\x1B[31m${n}\x1B[39m`;
    },
    green(n) {
      return `\x1B[32m${n}\x1B[39m`;
    },
    yellow(n) {
      return `\x1B[33m${n}\x1B[39m`;
    },
    blue(n) {
      return `\x1B[34m${n}\x1B[39m`;
    },
    magenta(n) {
      return `\x1B[35m${n}\x1B[39m`;
    },
    cyan(n) {
      return `\x1B[36m${n}\x1B[39m`;
    },
    white(n) {
      return `\x1B[37m${n}\x1B[39m`;
    },
    grey(n) {
      return `\x1B[90m${n}\x1B[39m`;
    }
  });
  class IQ {
    constructor(e, t) {
      this.colorOptions = e, this.level = t;
    }
  }
  const PE = function() {
    const n = {
      "no-colors": vA({
        TRC: "TRC",
        DBG: "DBG",
        INF: "INF",
        WRN: "WRN",
        ERR: "ERR",
        FTL: "FTL",
        QQQ: "???"
      }),
      colors: vA({
        TRC: Kl.grey("TRC"),
        DBG: Kl.grey("DBG"),
        INF: Kl.white("INF"),
        WRN: Kl.yellow("WRN"),
        ERR: Kl.red("ERR"),
        FTL: Kl.red("FTL"),
        QQQ: Kl.grey("???")
      })
    };
    return (e, t) => e <= Xb ? n[t].TRC : e <= Zb ? n[t].DBG : e <= Qb ? n[t].INF : e <= Qg ? n[t].WRN : e <= Jb ? n[t].ERR : e <= ev ? n[t].FTL : n[t].QQQ;
  }(), n$ = (n, e) => e === "no-colors" ? n.join(".") : n.map(Kl.cyan).join("."), IE = (n, e) => e === "no-colors" ? new Date(n).toISOString() : Kl.grey(new Date(n).toISOString());
  class OQ {
    constructor(e, t, i, r, s, o) {
      this.severity = e, this.message = t, this.optionalParams = i, this.scope = r, this.colorOptions = s, this.timestamp = o;
    }
    toString() {
      const { severity: e, message: t, scope: i, colorOptions: r, timestamp: s } = this;
      return i.length === 0 ? `${IE(s, r)} [${PE(e, r)}] ${t}` : `${IE(s, r)} [${PE(e, r)} ${n$(i, r)}] ${t}`;
    }
    getFormattedLogInfo(e = !1) {
      const { severity: t, message: i, scope: r, colorOptions: s, timestamp: o, optionalParams: a } = this;
      let l = null, c = "";
      e && i instanceof Error ? l = i : c = i;
      const u = r.length === 0 ? "" : ` ${n$(r, s)}`;
      let h = `${IE(o, s)} [${PE(t, s)}${u}] ${c}`;
      if (a === void 0 || a.length === 0)
        return l === null ? [h] : [h, l];
      let d = 0;
      for (; h.includes("%s"); )
        h = h.replace("%s", String(a[d++]));
      return l !== null ? [h, l, ...a.slice(d)] : [h, ...a.slice(d)];
    }
  }
  class kQ {
    constructor() {
      this.config = ge(z6);
    }
    createLogEvent(e, t, i, r) {
      return new OQ(t, i, r, e.scope, this.config.colorOptions, Date.now());
    }
  }
  let DQ = (() => {
    var n;
    let e = [], t, i, r, s, o, a;
    return n = class {
      /* eslint-disable default-param-last */
      constructor(c = ge(z6), u = ge(MQ), h = ge(hO(TQ)), d = ge(j6(AQ)) ?? [], f = null) {
        this.scope = (RQ(this, e), d), this._scopedLoggers = sn();
        let g, p, m, v, y, w;
        if (this.config = c, this._factory = u, this.sinks = h, f === null) {
          this.root = this, this.parent = this, g = this._traceSinks = [], p = this._debugSinks = [], m = this._infoSinks = [], v = this._warnSinks = [], y = this._errorSinks = [], w = this._fatalSinks = [];
          for (const R of h) {
            const E = PQ.getHandles(R);
            ((E == null ? void 0 : E.includes(Xb)) ?? !0) && g.push(R), ((E == null ? void 0 : E.includes(Zb)) ?? !0) && p.push(R), ((E == null ? void 0 : E.includes(Qb)) ?? !0) && m.push(R), ((E == null ? void 0 : E.includes(Qg)) ?? !0) && v.push(R), ((E == null ? void 0 : E.includes(Jb)) ?? !0) && y.push(R), ((E == null ? void 0 : E.includes(ev)) ?? !0) && w.push(R);
          }
        } else
          this.root = f.root, this.parent = f, g = this._traceSinks = f._traceSinks, p = this._debugSinks = f._debugSinks, m = this._infoSinks = f._infoSinks, v = this._warnSinks = f._warnSinks, y = this._errorSinks = f._errorSinks, w = this._fatalSinks = f._fatalSinks;
      }
      trace(c, ...u) {
        this.config.level <= Xb && this._emit(this._traceSinks, Xb, c, u);
      }
      debug(c, ...u) {
        this.config.level <= Zb && this._emit(this._debugSinks, Zb, c, u);
      }
      info(c, ...u) {
        this.config.level <= Qb && this._emit(this._infoSinks, Qb, c, u);
      }
      warn(c, ...u) {
        this.config.level <= Qg && this._emit(this._warnSinks, Qg, c, u);
      }
      error(c, ...u) {
        this.config.level <= Jb && this._emit(this._errorSinks, Jb, c, u);
      }
      fatal(c, ...u) {
        this.config.level <= ev && this._emit(this._fatalSinks, ev, c, u);
      }
      /**
       * Create a new logger with an additional permanent prefix added to the logging outputs.
       * When chained, multiple scopes are separated by a dot.
       *
       * This is preliminary API and subject to change before alpha release.
       *
       * @example
       *
       * ```ts
       * export class MyComponent {
       *   constructor(@ILogger private logger: ILogger) {
       *     this.logger.debug('before scoping');
       *     // console output: '[DBG] before scoping'
       *     this.logger = logger.scopeTo('MyComponent');
       *     this.logger.debug('after scoping');
       *     // console output: '[DBG MyComponent] after scoping'
       *   }
       *
       *   public doStuff(): void {
       *     const logger = this.logger.scopeTo('doStuff()');
       *     logger.debug('doing stuff');
       *     // console output: '[DBG MyComponent.doStuff()] doing stuff'
       *   }
       * }
       * ```
       */
      scopeTo(c) {
        const u = this._scopedLoggers;
        let h = u[c];
        return h === void 0 && (h = u[c] = new n(this.config, this._factory, null, this.scope.concat(c), this)), h;
      }
      /** @internal */
      _emit(c, u, h, d) {
        const f = jt(h) ? h() : h, g = this._factory.createLogEvent(this, u, f, d);
        for (let p = 0, m = c.length; p < m; ++p)
          c[p].handleEvent(g);
      }
    }, (() => {
      const l = typeof Symbol == "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
      t = [kf], i = [kf], r = [kf], s = [kf], o = [kf], a = [kf], Df(n, null, t, { kind: "method", name: "trace", static: !1, private: !1, access: { has: (c) => "trace" in c, get: (c) => c.trace }, metadata: l }, null, e), Df(n, null, i, { kind: "method", name: "debug", static: !1, private: !1, access: { has: (c) => "debug" in c, get: (c) => c.debug }, metadata: l }, null, e), Df(n, null, r, { kind: "method", name: "info", static: !1, private: !1, access: { has: (c) => "info" in c, get: (c) => c.info }, metadata: l }, null, e), Df(n, null, s, { kind: "method", name: "warn", static: !1, private: !1, access: { has: (c) => "warn" in c, get: (c) => c.warn }, metadata: l }, null, e), Df(n, null, o, { kind: "method", name: "error", static: !1, private: !1, access: { has: (c) => "error" in c, get: (c) => c.error }, metadata: l }, null, e), Df(n, null, a, { kind: "method", name: "fatal", static: !1, private: !1, access: { has: (c) => "fatal" in c, get: (c) => c.fatal }, metadata: l }, null, e), l && Object.defineProperty(n, Symbol.metadata, { enumerable: !0, configurable: !0, writable: !0, value: l });
    })(), n;
  })();
  class NQ {
    constructor(e, t) {
      this.type = e, this.cb = t;
    }
    handle(e) {
      e instanceof this.type && this.cb.call(null, e);
    }
  }
  const dO = /* @__PURE__ */ Ic("IEventAggregator", (n) => n.singleton(LQ));
  class LQ {
    constructor() {
      this.eventLookup = {}, this.messageHandlers = [];
    }
    publish(e, t) {
      if (!e)
        throw qn(18, e);
      if (yt(e)) {
        let i = this.eventLookup[e];
        if (i !== void 0) {
          i = i.slice();
          let r = i.length;
          for (; r-- > 0; )
            i[r](t, e);
        }
      } else {
        const i = this.messageHandlers.slice();
        let r = i.length;
        for (; r-- > 0; )
          i[r].handle(e);
      }
    }
    subscribe(e, t) {
      if (!e)
        throw qn(19, e);
      let i, r;
      return yt(e) ? (this.eventLookup[e] === void 0 && (this.eventLookup[e] = []), i = t, r = this.eventLookup[e]) : (i = new NQ(e, t), r = this.messageHandlers), r.push(i), {
        dispose() {
          const s = r.indexOf(i);
          s !== -1 && r.splice(s, 1);
        }
      };
    }
    subscribeOnce(e, t) {
      const i = this.subscribe(e, (r, s) => {
        i.dispose(), t(r, s);
      });
      return i;
    }
  }
  const U6 = "AccessThis", HQ = "AccessBoundary", fO = "AccessGlobal", gO = "AccessScope", $Q = "ArrayLiteral", FQ = "ObjectLiteral", BQ = "PrimitiveLiteral", VQ = "Template", WQ = "Unary", jQ = "CallScope", zQ = "CallMember", UQ = "CallFunction", GQ = "CallGlobal", NR = "AccessMember", G6 = "AccessKeyed", YQ = "TaggedTemplate", KQ = "Binary", qQ = "Conditional", XQ = "Assign", ZQ = "ArrowFunction", QQ = "ValueConverter", JQ = "BindingBehavior", Y6 = "ArrayBindingPattern", K6 = "ObjectBindingPattern", q6 = "BindingIdentifier", eJ = "ForOfStatement", tJ = "Interpolation", X6 = "ArrayDestructuring", nJ = "ObjectDestructuring", iJ = "DestructuringAssignmentLeaf", rJ = "Custom";
  class Z6 {
    constructor(e) {
      this.value = e, this.$kind = rJ;
    }
    evaluate(...e) {
      return this.value;
    }
    assign(...e) {
      return e;
    }
    bind(...e) {
    }
    unbind(...e) {
    }
    accept(e) {
    }
  }
  class sJ {
    constructor(e, t, i) {
      this.expression = e, this.name = t, this.args = i, this.$kind = JQ, this.key = `_bb_${t}`;
    }
  }
  class oJ {
    constructor(e, t, i) {
      this.expression = e, this.name = t, this.args = i, this.$kind = QQ;
    }
  }
  class aJ {
    constructor(e, t, i = "=") {
      this.target = e, this.value = t, this.op = i, this.$kind = XQ;
    }
  }
  class lJ {
    constructor(e, t, i) {
      this.condition = e, this.yes = t, this.no = i, this.$kind = qQ;
    }
  }
  class cJ {
    constructor(e) {
      this.name = e, this.$kind = fO;
    }
  }
  class tv {
    constructor(e = 0) {
      this.ancestor = e, this.$kind = U6;
    }
  }
  class uJ {
    constructor() {
      this.$kind = HQ;
    }
  }
  class nv {
    constructor(e, t = 0) {
      this.name = e, this.ancestor = t, this.$kind = gO;
    }
  }
  const Q6 = (n) => n.$kind === fO || (n.$kind === NR || n.$kind === G6) && n.accessGlobal;
  class wA {
    constructor(e, t, i = !1) {
      this.object = e, this.name = t, this.optional = i, this.$kind = NR, this.accessGlobal = Q6(e);
    }
  }
  class J6 {
    constructor(e, t, i = !1) {
      this.object = e, this.key = t, this.optional = i, this.$kind = G6, this.accessGlobal = Q6(e);
    }
  }
  class e5 {
    constructor(e, t, i = 0, r = !1) {
      this.name = e, this.args = t, this.ancestor = i, this.optional = r, this.$kind = jQ;
    }
  }
  class YS {
    constructor(e, t, i, r = !1, s = !1) {
      this.object = e, this.name = t, this.args = i, this.optionalMember = r, this.optionalCall = s, this.$kind = zQ;
    }
  }
  class nS {
    constructor(e, t, i = !1) {
      this.func = e, this.args = t, this.optional = i, this.$kind = UQ;
    }
  }
  class hJ {
    constructor(e, t) {
      this.name = e, this.args = t, this.$kind = GQ;
    }
  }
  class dJ {
    constructor(e, t, i) {
      this.operation = e, this.left = t, this.right = i, this.$kind = KQ;
    }
  }
  class i$ {
    constructor(e, t, i = 0) {
      this.operation = e, this.expression = t, this.pos = i, this.$kind = WQ;
    }
  }
  class $i {
    constructor(e) {
      this.value = e, this.$kind = BQ;
    }
  }
  $i.$undefined = new $i(void 0);
  $i.$null = new $i(null);
  $i.$true = new $i(!0);
  $i.$false = new $i(!1);
  $i.$empty = new $i("");
  class yA {
    constructor(e) {
      this.elements = e, this.$kind = $Q;
    }
  }
  yA.$empty = new yA(pt);
  class CA {
    constructor(e, t) {
      this.keys = e, this.values = t, this.$kind = FQ;
    }
  }
  CA.$empty = new CA(pt, pt);
  class KS {
    constructor(e, t = pt) {
      this.cooked = e, this.expressions = t, this.$kind = VQ;
    }
  }
  KS.$empty = new KS([""]);
  class t5 {
    constructor(e, t, i, r = pt) {
      this.cooked = e, this.func = i, this.expressions = r, this.$kind = YQ, e.raw = t;
    }
  }
  class fJ {
    // We'll either have elements, or keys+values, but never all 3
    constructor(e) {
      this.elements = e, this.$kind = Y6;
    }
  }
  class gJ {
    // We'll either have elements, or keys+values, but never all 3
    constructor(e, t) {
      this.keys = e, this.values = t, this.$kind = K6;
    }
  }
  class qS {
    constructor(e) {
      this.name = e, this.$kind = q6;
    }
  }
  class pJ {
    constructor(e, t, i) {
      this.declaration = e, this.iterable = t, this.semiIdx = i, this.$kind = eJ;
    }
  }
  class mJ {
    constructor(e, t = pt) {
      this.parts = e, this.expressions = t, this.$kind = tJ, this.isMulti = t.length > 1, this.firstExpression = t[0];
    }
  }
  class bJ {
    constructor(e, t, i, r) {
      this.$kind = e, this.list = t, this.source = i, this.initializer = r;
    }
  }
  class n5 {
    constructor(e, t, i) {
      this.target = e, this.source = t, this.initializer = i, this.$kind = iJ;
    }
  }
  class SA {
    constructor(e, t, i = !1) {
      this.args = e, this.body = t, this.rest = i, this.$kind = ZQ;
    }
  }
  const _A = String, iS = () => /* @__PURE__ */ Object.create(null), gn = (n, ...e) => new Error(`AUR${_A(n).padStart(4, "0")}: ${wJ(n, ...e)}`), vJ = {
    99: "Method {{0}} not implemented",
    101: 'Ast eval error: binding behavior "{{0}}" could not be found. Did you forget to register it as a dependency?',
    102: 'Ast eval error: binding behavior "{{0}}" already applied.',
    103: 'Ast eval error: value converter "{{0}}" could not be found. Did you forget to register it as a dependency?',
    105: "Ast eval error: unable to find $host context. Did you forget [au-slot] attribute?",
    106: 'Ast eval error: invalid assignment. "$host" is a reserved keyword.',
    107: "Ast eval error: expression is not a function.",
    109: 'Ast eval error: unknown unary operator: "{{0}}"',
    108: 'Ast eval error: unknown binary operator: "{{0}}"',
    110: "Ast eval error: left-hand side of tagged template expression is not a function.",
    111: 'Ast eval error: expected "{{0}}" to be a function',
    112: "Ast eval error: cannot use non-object value for destructuring assignment.",
    151: 'Expression error: invalid start: "{{0}}"',
    152: 'Expression error: spread operator is not supported: "{{0}}"',
    153: 'Expression error: expected identifier: "{{0}}"',
    154: 'Expression error: invalid member expression: "{{0}}"',
    155: 'Expression error: unexpected end of expression: "{{0}}"',
    156: 'Expression error: unconsumed token: "{{0}}" at position {{1}} of "{{2}}"',
    157: "Expression error: invalid empty expression. Empty expression is only valid in event bindings (trigger, delegate, capture etc...)",
    158: 'Expression error: left hand side of expression is not assignable: "{{0}}"',
    159: 'Expression error: expected identifier to come after value converter operator: "{{0}}"',
    160: "Expression error: expected identifier to come after binding behavior operator: {{0}}",
    161: 'Expression error: unexpected keyword "of": "{{0}}"',
    162: 'Expression error: unexpected keyword "import": "{{0}}"',
    163: 'Expression error: invalid BindingIdentifier at left hand side of "of": "{{0}}" | kind: {{1}}',
    164: 'Expression error: invalid or unsupported property definition in object literal: "{{0}}"',
    165: 'Expression error: unterminated quote in string literal: "{{0}}"',
    166: 'Expression error: unterminated template string: "{{0}}"',
    167: 'Expression error: missing expected token "{{0}}" in "{{1}}"',
    168: 'Expression error: unexpected character: "{{0}}"',
    170: 'Expression error: unexpected "{{0}}" at position "{{1}}" for destructuring assignment in "{{2}}"',
    171: 'Expression error: unexpected {{0}} at position "{{1}}" for optional chain in "{{2}}"',
    172: 'Expression error: invalid tagged template on optional chain in "{{1}}"',
    173: 'Expression error: invalid arrow parameter list in "{{0}}"',
    174: 'Expression error: arrow function with default parameters is not supported: "{{0}}"',
    175: 'Expression error: arrow function with destructuring parameters is not supported: "{{0}}"',
    176: 'Expression error: rest parameter must be last formal parameter in arrow function: "{{0}}"',
    178: 'Expression error: arrow function with function body is not supported: "{{0}}"',
    179: `Expression error: unexpected token '.' at position "{{1}}" in "{{0}}"`
  }, wJ = (n, ...e) => {
    var i;
    let t = vJ[n];
    for (let r = 0; r < e.length; ++r) {
      const s = new RegExp(`{{${r}(:.*)?}}`, "g");
      let o = s.exec(t);
      for (; o != null; ) {
        const a = (i = o[1]) == null ? void 0 : i.slice(1);
        let l = e[r];
        if (l != null)
          switch (a) {
            case "toString":
              l = Object.prototype.toString.call(l);
              break;
            case "join(!=)":
              l = l.join("!=");
              break;
            case "element":
              l = l === "*" ? "all elements" : `<${l} />`;
              break;
            default:
              a != null && a.startsWith(".") ? l = _A(l[a.slice(1)]) : l = _A(l);
          }
        t = t.slice(0, o.index) + l + t.slice(s.lastIndex), o = s.exec(t);
      }
    }
    return t;
  }, Lp = /* @__PURE__ */ pf.createInterface("IExpressionParser");
  class i5 {
    constructor() {
      this._expressionLookup = iS(), this._forOfLookup = iS(), this._interpolationLookup = iS();
    }
    parse(e, t) {
      let i;
      switch (t) {
        case o5:
          return new Z6(e);
        case XS:
          return i = this._interpolationLookup[e], i === void 0 && (i = this._interpolationLookup[e] = this.$parse(e, t)), i;
        case oc:
          return i = this._forOfLookup[e], i === void 0 && (i = this._forOfLookup[e] = this.$parse(e, t)), i;
        default: {
          if (e.length === 0) {
            if (t === RJ || t === r$)
              return $i.$empty;
            throw BJ();
          }
          return i = this._expressionLookup[e], i === void 0 && (i = this._expressionLookup[e] = this.$parse(e, t)), i;
        }
      }
    }
    /** @internal */
    $parse(e, t) {
      return Nt = e, vt = 0, nl = e.length, ms = 0, jd = 0, Te = 6291456, vn = "", hn = zd(0), Wt = !0, Ot = !1, Db = !0, mO = -1, Zn(61, t === void 0 ? r$ : t);
    }
  }
  i5.register = Dw(Lp);
  function pO(n) {
    switch (n) {
      case 98:
        return 8;
      case 116:
        return 9;
      case 110:
        return 10;
      case 118:
        return 11;
      case 102:
        return 12;
      case 114:
        return 13;
      case 34:
        return 34;
      case 39:
        return 39;
      case 92:
        return 92;
      default:
        return n;
    }
  }
  const yJ = $i.$false, CJ = $i.$true, SJ = $i.$null, r5 = $i.$undefined, iv = new tv(0), OE = new tv(1), _J = new uJ(), vc = "None", XS = "Interpolation", oc = "IsIterator", s5 = "IsChainable", RJ = "IsFunction", r$ = "IsProperty", o5 = "IsCustom";
  let Nt = "", vt = 0, nl = 0, ms = 0, jd = 0, Te = 6291456, vn = "", hn, Wt = !0, Ot = !1, Db = !0, mO = -1;
  const Zv = String.fromCharCode, zd = (n) => Nt.charCodeAt(n), wc = () => Nt.slice(jd, vt), EJ = "Infinity NaN isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent Array BigInt Boolean Date Map Number Object RegExp Set String JSON Math Intl".split(" ");
  function Zn(n, e) {
    if (e === o5)
      return new Z6(Nt);
    if (vt === 0) {
      if (e === XS)
        return kJ();
      if (Ge(), Te & 4194304)
        throw HJ();
    }
    Wt = 513 > n, Ot = !1, Db = 514 > n;
    let t = !1, i, r = 0;
    if (Te & 131072) {
      const s = Rg[
        Te & 63
        /* Token.Type */
      ];
      Ge(), i = new i$(s, Zn(514, e)), Wt = !1;
    } else {
      e: switch (Te) {
        case 12295:
          r = ms, Wt = !1, Db = !1;
          do
            switch (Ge(), ++r, Te) {
              case 65546:
                if (Ge(), !(Te & 12288))
                  throw Bl();
                break;
              case 11:
              case 12:
                throw Bl();
              case 2162701:
                if (Ot = !0, Ge(), !(Te & 12288)) {
                  i = r === 0 ? iv : r === 1 ? OE : new tv(r), t = !0;
                  break e;
                }
                break;
              default:
                if (Te & 2097152) {
                  i = r === 0 ? iv : r === 1 ? OE : new tv(r);
                  break e;
                }
                throw $J();
            }
          while (Te === 12295);
        case 4096: {
          const s = vn;
          if (e === oc)
            i = new qS(s);
          else if (Db && EJ.includes(s))
            i = new cJ(s);
          else {
            if (Db && s === "import")
              throw UJ();
            i = new nv(s, r);
          }
          if (Wt = !Ot, Ge(), Fa(
            51
            /* Token.Arrow */
          )) {
            if (Te === 524297)
              throw h5();
            const o = Ot, a = ms;
            ++ms;
            const l = Zn(62, vc);
            Ot = o, ms = a, Wt = !1, i = new SA([new qS(s)], l);
          }
          break;
        }
        case 11:
          throw XJ();
        case 12:
          throw RA();
        case 12292:
          switch (Wt = !1, Ge(), ms) {
            case 0:
              i = iv;
              break;
            case 1:
              i = OE;
              break;
            default:
              i = new tv(ms);
              break;
          }
          break;
        case 12293:
          Wt = !1, Ge(), i = _J;
          break;
        case 2688008:
          i = MJ(e);
          break;
        case 2688019:
          i = Nt.search(/\s+of\s+/) > vt ? xJ() : AJ(e);
          break;
        case 524297:
          i = OJ(e);
          break;
        case 2163760:
          i = new KS([vn]), Wt = !1, Ge();
          break;
        case 2163761:
          i = kE(e, i, !1);
          break;
        case 16384:
        case 32768:
          i = new $i(vn), Wt = !1, Ge();
          break;
        case 8194:
        case 8195:
        case 8193:
        case 8192:
          i = Rg[
            Te & 63
            /* Token.Type */
          ], Wt = !1, Ge();
          break;
        default:
          throw vt >= nl ? FJ() : DE();
      }
      if (e === oc)
        return IJ(i);
      switch (Te) {
        case 2228280:
        case 2228281:
          i = new i$(Rg[
            Te & 63
            /* Token.Type */
          ], i, 1), Ge(), Wt = !1;
          break;
      }
      if (514 < n)
        return i;
      if (Te === 11 || Te === 12)
        throw Bl();
      if (i.$kind === U6)
        switch (Te) {
          case 2162701:
            if (Ot = !0, Wt = !1, Ge(), !(Te & 13312))
              throw bO();
            if (Te & 12288)
              i = new nv(vn, i.ancestor), Ge();
            else if (Te === 2688008)
              i = new nS(i, zo(), !0);
            else if (Te === 2688019)
              i = rS(i, !0);
            else
              throw sS();
            break;
          case 65546:
            if (Wt = !Ot, Ge(), !(Te & 12288))
              throw Bl();
            i = new nv(vn, i.ancestor), Ge();
            break;
          case 11:
          case 12:
            throw Bl();
          case 2688008:
            i = new nS(i, zo(), t);
            break;
          case 2688019:
            i = rS(i, t);
            break;
          case 2163760:
            i = s$(i);
            break;
          case 2163761:
            i = kE(e, i, !0);
            break;
        }
      for (; (Te & 65536) > 0; )
        switch (Te) {
          case 2162701:
            i = TJ(i);
            break;
          case 65546:
            if (Ge(), !(Te & 12288))
              throw Bl();
            i = a5(i, !1);
            break;
          case 11:
          case 12:
            throw Bl();
          case 2688008:
            i.$kind === gO ? i = new e5(i.name, zo(), i.ancestor, !1) : i.$kind === NR ? i = new YS(i.object, i.name, zo(), i.optional, !1) : i.$kind === fO ? i = new hJ(i.name, zo()) : i = new nS(i, zo(), !1);
            break;
          case 2688019:
            i = rS(i, !1);
            break;
          case 2163760:
            if (Ot)
              throw sS();
            i = s$(i);
            break;
          case 2163761:
            if (Ot)
              throw sS();
            i = kE(e, i, !0);
            break;
        }
    }
    if (Te === 11 || Te === 12)
      throw Bl();
    if (513 < n)
      return i;
    for (; (Te & 262144) > 0; ) {
      const s = Te;
      if ((s & 960) <= n)
        break;
      Ge(), i = new dJ(Rg[
        s & 63
        /* Token.Type */
      ], i, Zn(s & 960, e)), Wt = !1;
    }
    if (63 < n)
      return i;
    if (Fa(
      6291479
      /* Token.Question */
    )) {
      const s = Zn(62, e);
      Xo(
        6291477
        /* Token.Colon */
      ), i = new lJ(i, s, Zn(62, e)), Wt = !1;
    }
    if (62 < n)
      return i;
    switch (Te) {
      case 4194350:
      case 4194356:
      case 4194357:
      case 4194358:
      case 4194359: {
        if (!Wt)
          throw VJ();
        const s = Rg[
          Te & 63
          /* Token.Type */
        ];
        Ge(), i = new aJ(i, Zn(62, e), s);
        break;
      }
    }
    if (61 < n)
      return i;
    for (; Fa(
      6291481
      /* Token.Bar */
    ); ) {
      if (Te === 6291456)
        throw WJ();
      const s = vn;
      Ge();
      const o = new Array();
      for (; Fa(
        6291477
        /* Token.Colon */
      ); )
        o.push(Zn(62, e));
      i = new oJ(i, s, o);
    }
    for (; Fa(
      6291480
      /* Token.Ampersand */
    ); ) {
      if (Te === 6291456)
        throw jJ();
      const s = vn;
      Ge();
      const o = new Array();
      for (; Fa(
        6291477
        /* Token.Colon */
      ); )
        o.push(Zn(62, e));
      i = new sJ(i, s, o);
    }
    if (Te !== 6291456) {
      if (e === XS && Te === 7340046)
        return i;
      if (e === s5 && Te === 6291478) {
        if (vt === nl)
          throw DE();
        return mO = vt - 1, i;
      }
      throw wc() === "of" ? zJ() : DE();
    }
    return i;
  }
  function xJ() {
    const n = [], e = new bJ(X6, n, void 0, void 0);
    let t = "", i = !0, r = 0;
    for (; i; )
      switch (Ge(), Te) {
        case 7340052:
          i = !1, s();
          break;
        case 6291472:
          s();
          break;
        case 4096:
          t = wc();
          break;
        default:
          throw KJ();
      }
    return Xo(
      7340052
      /* Token.CloseBracket */
    ), e;
    function s() {
      t !== "" ? (n.push(new n5(new wA(iv, t), new J6(iv, new $i(r++)), void 0)), t = "") : r++;
    }
  }
  function zo() {
    const n = Ot;
    Ge();
    const e = [];
    for (; Te !== 7340047 && (e.push(Zn(62, vc)), !!Fa(
      6291472
      /* Token.Comma */
    )); )
      ;
    return Xo(
      7340047
      /* Token.CloseParen */
    ), Wt = !1, Ot = n, e;
  }
  function rS(n, e) {
    const t = Ot;
    return Ge(), n = new J6(n, Zn(62, vc), e), Xo(
      7340052
      /* Token.CloseBracket */
    ), Wt = !t, Ot = t, n;
  }
  function TJ(n) {
    if (Ot = !0, Wt = !1, Ge(), !(Te & 13312))
      throw bO();
    if (Te & 12288)
      return a5(n, !0);
    if (Te === 2688008)
      return n.$kind === gO ? new e5(n.name, zo(), n.ancestor, !0) : n.$kind === NR ? new YS(n.object, n.name, zo(), n.optional, !0) : new nS(n, zo(), !0);
    if (Te === 2688019)
      return rS(n, !0);
    throw sS();
  }
  function a5(n, e) {
    const t = vn;
    switch (Te) {
      case 2162701: {
        Ot = !0, Wt = !1;
        const i = vt, r = jd, s = Te, o = hn, a = vn, l = Wt, c = Ot;
        if (Ge(), !(Te & 13312))
          throw bO();
        return Te === 2688008 ? new YS(n, t, zo(), e, !0) : (vt = i, jd = r, Te = s, hn = o, vn = a, Wt = l, Ot = c, new wA(n, t, e));
      }
      case 2688008:
        return Wt = !1, new YS(n, t, zo(), e, !1);
      default:
        return Wt = !Ot, Ge(), new wA(n, t, e);
    }
  }
  function MJ(n) {
    Ge();
    const e = vt, t = jd, i = Te, r = hn, s = vn, o = Ot, a = [];
    let l = 1, c = !1;
    e: for (; ; ) {
      if (Te === 12) {
        if (Ge(), Te !== 4096)
          throw Bl();
        if (a.push(new qS(vn)), Ge(), Te === 6291472)
          throw qJ();
        if (Te !== 7340047 || (Ge(), Te !== 51))
          throw RA();
        Ge();
        const d = Ot, f = ms;
        ++ms;
        const g = Zn(62, vc);
        return Ot = d, ms = f, Wt = !1, new SA(a, g, !0);
      }
      switch (Te) {
        case 4096:
          a.push(new qS(vn)), Ge();
          break;
        case 7340047:
          Ge();
          break e;
        case 524297:
        case 2688019:
          Ge(), l = 4;
          break;
        case 6291472:
          l = 2, c = !0;
          break e;
        case 2688008:
          l = 2;
          break e;
        default:
          Ge(), l = 2;
          break;
      }
      switch (Te) {
        case 6291472:
          if (Ge(), c = !0, l === 1)
            break;
          break e;
        case 7340047:
          Ge();
          break e;
        case 4194350:
          l === 1 && (l = 3);
          break e;
        case 51:
          if (c)
            throw Ay();
          Ge(), l = 2;
          break e;
        default:
          l === 1 && (l = 2);
          break e;
      }
    }
    if (Te === 51) {
      if (l === 1) {
        if (Ge(), Te === 524297)
          throw h5();
        const d = Ot, f = ms;
        ++ms;
        const g = Zn(62, vc);
        return Ot = d, ms = f, Wt = !1, new SA(a, g);
      }
      throw Ay();
    } else if (l === 1 && a.length === 0)
      throw u5(
        51
        /* Token.Arrow */
      );
    if (c)
      switch (l) {
        case 2:
          throw Ay();
        case 3:
          throw l$();
        case 4:
          throw c$();
      }
    vt = e, jd = t, Te = i, hn = r, vn = s, Ot = o;
    const u = Ot, h = Zn(62, n);
    if (Ot = u, Xo(
      7340047
      /* Token.CloseParen */
    ), Te === 51)
      switch (l) {
        case 2:
          throw Ay();
        case 3:
          throw l$();
        case 4:
          throw c$();
      }
    return h;
  }
  function AJ(n) {
    const e = Ot;
    Ge();
    const t = new Array();
    for (; Te !== 7340052; )
      if (Fa(
        6291472
        /* Token.Comma */
      )) {
        if (t.push(r5), Te === 7340052)
          break;
      } else if (t.push(Zn(62, n === oc ? vc : n)), Fa(
        6291472
        /* Token.Comma */
      )) {
        if (Te === 7340052)
          break;
      } else
        break;
    return Ot = e, Xo(
      7340052
      /* Token.CloseBracket */
    ), n === oc ? new fJ(t) : (Wt = !1, new yA(t));
  }
  const PJ = [Y6, K6, q6, X6, nJ];
  function IJ(n) {
    if (!PJ.includes(n.$kind) || Te !== 4204594)
      throw a$(n.$kind);
    Ge();
    const e = n, t = Zn(61, s5);
    return new pJ(e, t, mO);
  }
  function OJ(n) {
    const e = Ot, t = new Array(), i = new Array();
    for (Ge(); Te !== 7340046; ) {
      if (t.push(vn), Te & 49152)
        Ge(), Xo(
          6291477
          /* Token.Colon */
        ), i.push(Zn(62, n === oc ? vc : n));
      else if (Te & 12288) {
        const r = hn, s = Te, o = vt;
        Ge(), Fa(
          6291477
          /* Token.Colon */
        ) ? i.push(Zn(62, n === oc ? vc : n)) : (hn = r, Te = s, vt = o, i.push(Zn(515, n === oc ? vc : n)));
      } else
        throw GJ();
      Te !== 7340046 && Xo(
        6291472
        /* Token.Comma */
      );
    }
    return Ot = e, Xo(
      7340046
      /* Token.CloseBrace */
    ), n === oc ? new gJ(t, i) : (Wt = !1, new CA(t, i));
  }
  function kJ() {
    const n = [], e = [], t = nl;
    let i = "";
    for (; vt < t; ) {
      switch (hn) {
        case 36:
          if (zd(vt + 1) === 123) {
            n.push(i), i = "", vt += 2, hn = zd(vt), Ge();
            const r = Zn(61, XS);
            e.push(r);
            continue;
          } else
            i += "$";
          break;
        case 92:
          i += Zv(pO(Xe()));
          break;
        default:
          i += Zv(hn);
      }
      Xe();
    }
    return e.length ? (n.push(i), new mJ(n, e)) : null;
  }
  function kE(n, e, t) {
    const i = Ot, r = [vn];
    Xo(
      2163761
      /* Token.TemplateContinuation */
    );
    const s = [Zn(62, n)];
    for (; (Te = LJ()) !== 2163760; )
      r.push(vn), Xo(
        2163761
        /* Token.TemplateContinuation */
      ), s.push(Zn(62, n));
    return r.push(vn), Wt = !1, Ot = i, t ? (Ge(), new t5(r, r, e, s)) : (Ge(), new KS(r, s));
  }
  function s$(n) {
    Wt = !1;
    const e = [vn];
    return Ge(), new t5(e, e, n);
  }
  function Ge() {
    for (; vt < nl; )
      if (jd = vt, (Te = QJ[hn]()) != null)
        return;
    Te = 6291456;
  }
  function Xe() {
    return hn = zd(++vt);
  }
  function DJ() {
    for (; JJ[Xe()]; )
      ;
    const n = ZJ[vn = wc()];
    return n === void 0 ? 4096 : n;
  }
  function o$(n) {
    let e = hn;
    if (n === !1) {
      do
        e = Xe();
      while (e <= 57 && e >= 48);
      if (e !== 46)
        return vn = parseInt(wc(), 10), 32768;
      if (e = Xe(), vt >= nl)
        return vn = parseInt(wc().slice(0, -1), 10), 32768;
    }
    if (e <= 57 && e >= 48)
      do
        e = Xe();
      while (e <= 57 && e >= 48);
    else
      hn = zd(--vt);
    return vn = parseFloat(wc()), 32768;
  }
  function NJ() {
    const n = hn;
    Xe();
    let e = 0;
    const t = new Array();
    let i = vt;
    for (; hn !== n; )
      if (hn === 92)
        t.push(Nt.slice(i, vt)), Xe(), e = pO(hn), Xe(), t.push(Zv(e)), i = vt;
      else {
        if (vt >= nl)
          throw YJ();
        Xe();
      }
    const r = Nt.slice(i, vt);
    return Xe(), t.push(r), vn = t.join(""), 16384;
  }
  function l5() {
    let n = !0, e = "";
    for (; Xe() !== 96; )
      if (hn === 36)
        if (vt + 1 < nl && zd(vt + 1) === 123) {
          vt++, n = !1;
          break;
        } else
          e += "$";
      else if (hn === 92)
        e += Zv(pO(Xe()));
      else {
        if (vt >= nl)
          throw c5();
        e += Zv(hn);
      }
    return Xe(), vn = e, n ? 2163760 : 2163761;
  }
  const LJ = () => {
    if (vt >= nl)
      throw c5();
    return vt--, l5();
  }, Fa = (n) => Te === n ? (Ge(), !0) : !1, Xo = (n) => {
    if (Te === n)
      Ge();
    else
      throw u5(n);
  }, HJ = () => gn(151, Nt), RA = () => gn(152, Nt), Bl = () => gn(153, Nt), $J = () => gn(154, Nt), FJ = () => gn(155, Nt), DE = () => gn(156, wc(), vt, Nt), BJ = () => gn(
    157
    /* ErrorNames.parse_invalid_empty */
  ), VJ = () => gn(158, Nt), WJ = () => gn(159, Nt), jJ = () => gn(160, Nt), zJ = () => gn(161, Nt), UJ = () => gn(162, Nt), a$ = (n) => gn(163, Nt, n), GJ = () => gn(164, Nt), YJ = () => gn(165, Nt), c5 = () => gn(166, Nt), u5 = (n) => gn(167, Rg[
    n & 63
    /* Token.Type */
  ], Nt), KJ = () => gn(170, wc(), vt, Nt), bO = () => gn(171, wc(), vt - 1, Nt), sS = () => gn(172, Nt), Ay = () => gn(173, Nt), l$ = () => gn(174, Nt), c$ = () => gn(175, Nt), qJ = () => gn(176, Nt), h5 = () => gn(178, Nt), XJ = () => gn(179, vt - 1, Nt), Rg = [
    yJ,
    CJ,
    SJ,
    r5,
    "this",
    "$this",
    null,
    "$parent",
    "(",
    "{",
    ".",
    "..",
    "...",
    "?.",
    "}",
    ")",
    ",",
    "[",
    "]",
    ":",
    ";",
    "?",
    "'",
    '"',
    "&",
    "|",
    "??",
    "||",
    "&&",
    "==",
    "!=",
    "===",
    "!==",
    "<",
    ">",
    "<=",
    ">=",
    "in",
    "instanceof",
    "+",
    "-",
    "typeof",
    "void",
    "*",
    "%",
    "/",
    "=",
    "!",
    2163760,
    2163761,
    "of",
    "=>",
    "+=",
    "-=",
    "*=",
    "/=",
    "++",
    "--"
  ], ZJ = /* @__PURE__ */ Object.assign(iS(), {
    true: 8193,
    null: 8194,
    false: 8192,
    undefined: 8195,
    this: 12293,
    $this: 12292,
    $parent: 12295,
    in: 6562213,
    instanceof: 6562214,
    typeof: 139305,
    void: 139306,
    of: 4204594
  }), { CharScanners: QJ, IdParts: JJ } = /* @__PURE__ */ (() => {
    const n = () => {
      throw gn(168, Nt);
    };
    n.notMapped = !0;
    const e = {
      /* [$0-9A-Za_a-z] */
      AsciiIdPart: [36, 0, 48, 58, 65, 91, 95, 0, 97, 123],
      IdStart: (
        /* IdentifierStart */
        [36, 0, 65, 91, 95, 0, 97, 123, 170, 0, 186, 0, 192, 215, 216, 247, 248, 697, 736, 741, 7424, 7462, 7468, 7517, 7522, 7526, 7531, 7544, 7545, 7615, 7680, 7936, 8305, 0, 8319, 0, 8336, 8349, 8490, 8492, 8498, 0, 8526, 0, 8544, 8585, 11360, 11392, 42786, 42888, 42891, 42927, 42928, 42936, 42999, 43008, 43824, 43867, 43868, 43877, 64256, 64263, 65313, 65339, 65345, 65371]
      ),
      Digit: (
        /* DecimalNumber */
        [48, 58]
      ),
      Skip: (
        /* Skippable */
        [0, 33, 127, 161]
      )
    }, t = (o, a, l, c) => {
      const u = l.length;
      for (let h = 0; h < u; h += 2) {
        const d = l[h];
        let f = l[h + 1];
        f = f > 0 ? f : d + 1, o && o.fill(c, d, f);
      }
    }, i = /* @__PURE__ */ ((o) => (t(o, null, e.IdStart, 1), t(o, null, e.Digit, 1), o))(new Uint8Array(65535)), r = (o) => () => (Xe(), o), s = new Array(65535);
    return s.fill(n, 0, 65535), t(s, null, e.Skip, () => (Xe(), null)), t(s, null, e.IdStart, DJ), t(s, null, e.Digit, () => o$(!1)), s[
      34
      /* Char.DoubleQuote */
    ] = s[
      39
      /* Char.SingleQuote */
    ] = () => NJ(), s[
      96
      /* Char.Backtick */
    ] = () => l5(), s[
      33
      /* Char.Exclamation */
    ] = () => Xe() !== 61 ? 131119 : Xe() !== 61 ? 6553950 : (Xe(), 6553952), s[
      61
      /* Char.Equals */
    ] = () => Xe() === 62 ? (Xe(), 51) : hn !== 61 ? 4194350 : Xe() !== 61 ? 6553949 : (Xe(), 6553951), s[
      38
      /* Char.Ampersand */
    ] = () => Xe() !== 38 ? 6291480 : (Xe(), 6553884), s[
      124
      /* Char.Bar */
    ] = () => Xe() !== 124 ? 6291481 : (Xe(), 6553819), s[
      63
      /* Char.Question */
    ] = () => {
      if (Xe() === 46) {
        const o = zd(vt + 1);
        return o <= 48 || o >= 57 ? (Xe(), 2162701) : 6291479;
      }
      return hn !== 63 ? 6291479 : (Xe(), 6553754);
    }, s[
      46
      /* Char.Dot */
    ] = () => Xe() <= 57 && hn >= 48 ? o$(!0) : hn === 46 ? Xe() !== 46 ? 11 : (Xe(), 12) : 65546, s[
      60
      /* Char.LessThan */
    ] = () => Xe() !== 61 ? 6554017 : (Xe(), 6554019), s[
      62
      /* Char.GreaterThan */
    ] = () => Xe() !== 61 ? 6554018 : (Xe(), 6554020), s[
      37
      /* Char.Percent */
    ] = r(
      6554156
      /* Token.Percent */
    ), s[
      40
      /* Char.OpenParen */
    ] = r(
      2688008
      /* Token.OpenParen */
    ), s[
      41
      /* Char.CloseParen */
    ] = r(
      7340047
      /* Token.CloseParen */
    ), s[
      42
      /* Char.Asterisk */
    ] = () => Xe() !== 61 ? 6554155 : (Xe(), 4194358), s[
      43
      /* Char.Plus */
    ] = () => Xe() === 43 ? (Xe(), 2228280) : hn !== 61 ? 2490855 : (Xe(), 4194356), s[
      44
      /* Char.Comma */
    ] = r(
      6291472
      /* Token.Comma */
    ), s[
      45
      /* Char.Minus */
    ] = () => Xe() === 45 ? (Xe(), 2228281) : hn !== 61 ? 2490856 : (Xe(), 4194357), s[
      47
      /* Char.Slash */
    ] = () => Xe() !== 61 ? 6554157 : (Xe(), 4194359), s[
      58
      /* Char.Colon */
    ] = r(
      6291477
      /* Token.Colon */
    ), s[
      59
      /* Char.Semicolon */
    ] = r(
      6291478
      /* Token.Semicolon */
    ), s[
      91
      /* Char.OpenBracket */
    ] = r(
      2688019
      /* Token.OpenBracket */
    ), s[
      93
      /* Char.CloseBracket */
    ] = r(
      7340052
      /* Token.CloseBracket */
    ), s[
      123
      /* Char.OpenBrace */
    ] = r(
      524297
      /* Token.OpenBrace */
    ), s[
      125
      /* Char.CloseBrace */
    ] = r(
      7340046
      /* Token.CloseBrace */
    ), { CharScanners: s, IdParts: i };
  })(), dl = pf.createInterface, Hp = Object.freeze, { aliasTo: u$, singleton: vO } = Vd, _o = "Interpolation", d5 = "IsFunction", fl = "IsProperty", Eg = "custom-element", Lw = /* @__PURE__ */ Hp({
    /**
     * Unspecified mode, bindings may act differently with this mode
     */
    default: 0,
    oneTime: 1,
    toView: 2,
    fromView: 4,
    twoWay: 6
  }), LR = /* @__PURE__ */ dl("ITemplateCompiler"), f5 = /* @__PURE__ */ dl("IAttrMapper"), Yn = (n, ...e) => new Error(`AUR${String(n).padStart(4, "0")}: ${tee(n, ...e)}`), eee = {
    88: "AttributeParser is already initialized; cannot add patterns after initialization.",
    89: 'Attribute pattern "{{0}}" has already been registered.',
    99: "Method {{0}} not implemented",
    157: "Binding command {{0}} has already been registered.",
    701: 'Template compilation error in element "{{0:name}}": the root <template> cannot be a local element template.',
    702: 'Template compilation error: attribute "{{0}}" is invalid on element surrogate.',
    703: 'Template compilation error: template controller "{{0}}" is invalid on element surrogate.',
    704: 'Template compilation error: Invalid command "{{0:.command}}" for <let>. Only to-view/bind supported.',
    706: 'Template compilation error: detected projection with [au-slot="{{0}}"] attempted on a non custom element {{1}}.',
    707: "Template compilation error: creating binding to non-bindable property {{0}} on {{1}}.",
    708: 'Template compilation error: the custom element "{{0}}" does not have any content other than local template(s).',
    709: 'Template compilation error: local element template needs to be defined directly under root of element "{{0}}".',
    710: 'Template compilation error: bindable properties of local element "{{0}}" template needs to be defined directly under <template>.',
    711: `Template compilation error: the attribute 'property' is missing in {{0:outerHTML}} in local element "{{1}}"`,
    712: "Template compilation error: Bindable property and attribute needs to be unique; found property: {{0}}, attribute: {{1}}",
    713: 'Template compilation error: unknown binding command: "{{0}}".{{0:bindingCommandHelp}}',
    714: 'Template compilation error: primary already exists on element/attribute "{{0}}"',
    715: 'Template compilation error: the value of "as-custom-element" attribute cannot be empty for local element in element "{{0}}"',
    716: 'Template compilation error: duplicate definition of the local template named "{{0}} in element {{1}}"',
    717: 'Template compilation error: detected a usage of "<slot>" element without specifying shadow DOM options in element: {{0}}',
    718: 'Spreading template controller "{{0}}" is not supported.',
    719: "Attribute {{0}} has been already registered for {{1:element}}",
    720: 'Spreading syntax "...xxx" is reserved. Encountered "...{{0}}"',
    721: 'Usage of $bindables is only allowed on custom element. Encountered: <{{0}} {{1}}="{{2}}">',
    722: "Invalid platform object provided to the compilation, no DOM API found.",
    9998: "Spread binding does not support spreading custom attributes/template controllers. Did you build the spread instruction manually?"
  }, tee = (n, ...e) => {
    var i;
    let t = eee[n];
    for (let r = 0; r < e.length; ++r) {
      const s = new RegExp(`{{${r}(:.*)?}}`, "g");
      let o = s.exec(t);
      for (; o != null; ) {
        const a = (i = o[1]) == null ? void 0 : i.slice(1);
        let l = e[r];
        if (l != null)
          switch (a) {
            case "nodeName":
              l = l.nodeName.toLowerCase();
              break;
            case "name":
              l = l.name;
              break;
            case "typeof":
              l = typeof l;
              break;
            case "ctor":
              l = l.constructor.name;
              break;
            case "controller":
              l = l.controller.name;
              break;
            case "target@property":
              l = `${l.target}@${l.targetProperty}`;
              break;
            case "toString":
              l = Object.prototype.toString.call(l);
              break;
            case "join(!=)":
              l = l.join("!=");
              break;
            case "bindingCommandHelp":
              l = nee(l);
              break;
            case "element":
              l = l === "*" ? "all elements" : `<${l} />`;
              break;
            default:
              a != null && a.startsWith(".") ? l = String(l[a.slice(1)]) : l = String(l);
          }
        t = t.slice(0, o.index) + l + t.slice(s.lastIndex), o = s.exec(t);
      }
    }
    return t;
  };
  function nee(n) {
    switch (n) {
      case "delegate":
        return `
The ".delegate" binding command has been removed in v2. Binding command ".trigger" should be used instead. If you are migrating v1 application, install compat package to add back the ".delegate" binding command for ease of migration.`;
      case "call":
        return `
The ".call" binding command has been removed in v2. If you want to pass a callback that preserves the context of the function call, you can use lambda instead. Refer to lambda expression doc for more details.`;
      default:
        return "";
    }
  }
  var g5, p5, m5, b5, v5;
  class wO {
    constructor(e, t, i, r) {
      if (this.chars = e, this.repeat = t, this.isSymbol = i, this.isInverted = r, r)
        switch (e.length) {
          case 0:
            this.has = this._hasOfNoneInverse;
            break;
          case 1:
            this.has = this._hasOfSingleInverse;
            break;
          default:
            this.has = this._hasOfMultipleInverse;
        }
      else
        switch (e.length) {
          case 0:
            this.has = this._hasOfNone;
            break;
          case 1:
            this.has = this._hasOfSingle;
            break;
          default:
            this.has = this._hasOfMultiple;
        }
    }
    equals(e) {
      return this.chars === e.chars && this.repeat === e.repeat && this.isSymbol === e.isSymbol && this.isInverted === e.isInverted;
    }
    /** @internal */
    _hasOfMultiple(e) {
      return this.chars.includes(e);
    }
    /** @internal */
    _hasOfSingle(e) {
      return this.chars === e;
    }
    /** @internal */
    _hasOfNone(e) {
      return !1;
    }
    /** @internal */
    _hasOfMultipleInverse(e) {
      return !this.chars.includes(e);
    }
    /** @internal */
    _hasOfSingleInverse(e) {
      return this.chars !== e;
    }
    /** @internal */
    _hasOfNoneInverse(e) {
      return !0;
    }
  }
  class iee {
    constructor() {
      this.parts = pt, this._pattern = "", this._currentRecord = {}, this._partsRecord = {};
    }
    get pattern() {
      const e = this._pattern;
      return e === "" ? null : e;
    }
    set pattern(e) {
      e == null ? (this._pattern = "", this.parts = pt) : (this._pattern = e, this.parts = this._partsRecord[e]);
    }
    append(e, t) {
      const i = this._currentRecord;
      i[e] === void 0 ? i[e] = t : i[e] += t;
    }
    next(e) {
      const t = this._currentRecord;
      let i;
      t[e] !== void 0 && (i = this._partsRecord, i[e] === void 0 ? i[e] = [t[e]] : i[e].push(t[e]), t[e] = void 0);
    }
  }
  class yO {
    get _pattern() {
      return this._isEndpoint ? this._patterns[0] : null;
    }
    constructor(e, ...t) {
      this.charSpec = e, this._nextStates = [], this._types = null, this._isEndpoint = !1, this._patterns = t;
    }
    findChild(e) {
      const t = this._nextStates, i = t.length;
      let r = null, s = 0;
      for (; s < i; ++s)
        if (r = t[s], e.equals(r.charSpec))
          return r;
      return null;
    }
    append(e, t) {
      const i = this._patterns;
      i.includes(t) || i.push(t);
      let r = this.findChild(e);
      return r == null && (r = new yO(e, t), this._nextStates.push(r), e.repeat && r._nextStates.push(r)), r;
    }
    findMatches(e, t) {
      const i = [], r = this._nextStates, s = r.length;
      let o = 0, a = null, l = 0, c = 0;
      for (; l < s; ++l)
        if (a = r[l], a.charSpec.has(e))
          if (i.push(a), o = a._patterns.length, c = 0, a.charSpec.isSymbol)
            for (; c < o; ++c)
              t.next(a._patterns[c]);
          else
            for (; c < o; ++c)
              t.append(a._patterns[c], e);
      return i;
    }
  }
  class h$ {
    constructor(e) {
      this.text = e;
      const t = this._len = e.length, i = this._specs = [];
      let r = 0;
      for (; t > r; ++r)
        i.push(new wO(e[r], !1, !1, !1));
    }
    eachChar(e) {
      const t = this._len, i = this._specs;
      let r = 0;
      for (; t > r; ++r)
        e(i[r]);
    }
  }
  class ree {
    constructor(e) {
      this.text = "PART", this._spec = new wO(e, !0, !1, !0);
    }
    eachChar(e) {
      e(this._spec);
    }
  }
  class see {
    constructor(e) {
      this.text = e, this._spec = new wO(e, !1, !0, !1);
    }
    eachChar(e) {
      e(this._spec);
    }
  }
  class oee {
    constructor() {
      this.statics = 0, this.dynamics = 0, this.symbols = 0;
    }
  }
  const aee = /* @__PURE__ */ dl("ISyntaxInterpreter", (n) => n.singleton(lee));
  class lee {
    constructor() {
      this._rootState = new yO(null), this._initialStates = [this._rootState];
    }
    // todo: this only works if this method is ever called only once
    add(e) {
      e = e.slice(0).sort((d, f) => d.pattern > f.pattern ? 1 : -1);
      const t = e.length;
      let i, r, s, o, a, l, c, u = 0, h;
      for (; t > u; ) {
        for (i = this._rootState, r = e[u], s = r.pattern, o = new oee(), a = this._parse(r, o), l = a.length, c = (d) => i = i.append(d, s), h = 0; l > h; ++h)
          a[h].eachChar(c);
        i._types = o, i._isEndpoint = !0, ++u;
      }
    }
    interpret(e) {
      const t = new iee(), i = e.length;
      let r = this._initialStates, s = 0, o;
      for (; s < i && (r = this._getNextStates(r, e.charAt(s), t), r.length !== 0); ++s)
        ;
      return r = r.filter(cee), r.length > 0 && (r.sort(uee), o = r[0], o.charSpec.isSymbol || t.next(o._pattern), t.pattern = o._pattern), t;
    }
    /** @internal */
    _getNextStates(e, t, i) {
      const r = [];
      let s = null;
      const o = e.length;
      let a = 0;
      for (; a < o; ++a)
        s = e[a], r.push(...s.findMatches(t, i));
      return r;
    }
    /** @internal */
    _parse(e, t) {
      const i = [], r = e.pattern, s = r.length, o = e.symbols;
      let a = 0, l = 0, c = "";
      for (; a < s; )
        c = r.charAt(a), o.length === 0 || !o.includes(c) ? a === l && c === "P" && r.slice(a, a + 4) === "PART" ? (l = a = a + 4, i.push(new ree(o)), ++t.dynamics) : ++a : a !== l ? (i.push(new h$(r.slice(l, a))), ++t.statics, l = a) : (i.push(new see(r.slice(l, a + 1))), ++t.symbols, l = ++a);
      return l !== a && (i.push(new h$(r.slice(l, a))), ++t.statics), i;
    }
  }
  function cee(n) {
    return n._isEndpoint;
  }
  function uee(n, e) {
    const t = n._types, i = e._types;
    return t.statics !== i.statics ? i.statics - t.statics : t.dynamics !== i.dynamics ? i.dynamics - t.dynamics : t.symbols !== i.symbols ? i.symbols - t.symbols : 0;
  }
  class Ss {
    constructor(e, t, i, r, s = null) {
      this.rawName = e, this.rawValue = t, this.target = i, this.command = r, this.parts = s;
    }
  }
  const hee = /* @__PURE__ */ dl("IAttributePattern"), CO = /* @__PURE__ */ dl("IAttributeParser", (n) => n.singleton(dee));
  class dee {
    constructor() {
      this._cache = {}, this._patterns = {}, this._initialized = !1, this._allDefinitions = [], this._interpreter = ge(aee), this._container = ge(Dp);
    }
    registerPattern(e, t) {
      if (this._initialized)
        throw Yn(
          88
          /* ErrorNames.attribute_pattern_already_initialized */
        );
      const i = this._patterns;
      for (const { pattern: r } of e) {
        if (i[r] != null)
          throw Yn(89, r);
        i[r] = { patternType: t };
      }
      this._allDefinitions.push(...e);
    }
    /** @internal */
    _initialize() {
      this._interpreter.add(this._allDefinitions);
      const e = this._container;
      for (const [, t] of Object.entries(this._patterns))
        t.pattern = e.get(t.patternType);
    }
    parse(e, t) {
      this._initialized || (this._initialize(), this._initialized = !0);
      let i = this._cache[e];
      i == null && (i = this._cache[e] = this._interpreter.interpret(e));
      const r = i.pattern;
      return r == null ? new Ss(e, t, e, null, null) : this._patterns[r].pattern[r](e, t, i.parts);
    }
  }
  const Ju = /* @__PURE__ */ Hp({
    name: gf("attribute-pattern"),
    create(n, e) {
      return {
        register(t) {
          t.get(CO).registerPattern(n, e), vO(hee, e).register(t);
        }
      };
    }
  });
  class EA {
    "PART.PART"(e, t, i) {
      return new Ss(e, t, i[0], i[1]);
    }
    "PART.PART.PART"(e, t, i) {
      return new Ss(e, t, `${i[0]}.${i[1]}`, i[2]);
    }
  }
  g5 = Symbol.metadata;
  EA[g5] = {
    [hl]: /* @__PURE__ */ Ju.create([
      { pattern: "PART.PART", symbols: "." },
      { pattern: "PART.PART.PART", symbols: "." }
    ], EA)
  };
  class xA {
    ref(e, t, i) {
      return new Ss(e, t, "element", "ref");
    }
    "PART.ref"(e, t, i) {
      let r = i[0];
      return r === "view-model" && (r = "component", console.warn(`[aurelia] Detected view-model.ref usage: "${e}=${t}". This is deprecated and component.ref should be used instead`)), new Ss(e, t, r, "ref");
    }
  }
  p5 = Symbol.metadata;
  xA[p5] = {
    [hl]: /* @__PURE__ */ Ju.create([
      { pattern: "ref", symbols: "" },
      { pattern: "PART.ref", symbols: "." }
    ], xA)
  };
  class TA {
    "PART.trigger:PART"(e, t, i) {
      return new Ss(e, t, i[0], "trigger", i);
    }
    "PART.capture:PART"(e, t, i) {
      return new Ss(e, t, i[0], "capture", i);
    }
  }
  m5 = Symbol.metadata;
  TA[m5] = {
    [hl]: /* @__PURE__ */ Ju.create([
      { pattern: "PART.trigger:PART", symbols: ".:" },
      { pattern: "PART.capture:PART", symbols: ".:" }
    ], TA)
  };
  class d$ {
    ":PART"(e, t, i) {
      return new Ss(e, t, i[0], "bind");
    }
  }
  b5 = Symbol.metadata;
  d$[b5] = {
    [hl]: /* @__PURE__ */ Ju.create([{ pattern: ":PART", symbols: ":" }], d$)
  };
  class f$ {
    "@PART"(e, t, i) {
      return new Ss(e, t, i[0], "trigger");
    }
    "@PART:PART"(e, t, i) {
      return new Ss(e, t, i[0], "trigger", [i[0], "trigger", ...i.slice(1)]);
    }
  }
  v5 = Symbol.metadata;
  f$[v5] = {
    [hl]: /* @__PURE__ */ Ju.create([
      { pattern: "@PART", symbols: "@" },
      { pattern: "@PART:PART", symbols: "@:" }
    ], f$)
  };
  const MA = Pc.get, g$ = Pc.define, w5 = "ra", y5 = "rb", C5 = "rc", S5 = "rd", _5 = "re", R5 = "rf", SO = "rg", E5 = "ri", x5 = "rj", T5 = "rk", M5 = "rl", A5 = "ha", P5 = "hb", I5 = "hc", fee = "hd", O5 = "he", k5 = "hf", D5 = "hg", N5 = "hs", L5 = "hp", H5 = "svb", gi = /* @__PURE__ */ Hp({
    hydrateElement: w5,
    hydrateAttribute: y5,
    hydrateTemplateController: C5,
    hydrateLetElement: S5,
    setProperty: _5,
    interpolation: R5,
    propertyBinding: SO,
    letBinding: E5,
    refBinding: x5,
    iteratorBinding: T5,
    multiAttr: M5,
    textBinding: A5,
    listenerBinding: P5,
    attributeBinding: I5,
    stylePropertyBinding: fee,
    setAttribute: O5,
    setClassAttribute: k5,
    setStyleAttribute: D5,
    spreadTransferedBinding: N5,
    spreadElementProp: L5,
    spreadValueBinding: H5
  }), $p = /* @__PURE__ */ dl("Instruction");
  class Rl {
    constructor(e, t) {
      this.from = e, this.to = t, this.type = R5;
    }
  }
  class Hw {
    constructor(e, t, i) {
      this.from = e, this.to = t, this.mode = i, this.type = SO;
    }
  }
  class gee {
    constructor(e, t, i) {
      this.forOf = e, this.to = t, this.props = i, this.type = T5;
    }
  }
  class pee {
    constructor(e, t) {
      this.from = e, this.to = t, this.type = x5;
    }
  }
  class Nf {
    constructor(e, t) {
      this.value = e, this.to = t, this.type = _5;
    }
  }
  class mee {
    constructor(e, t, i) {
      this.value = e, this.to = t, this.command = i, this.type = M5;
    }
  }
  class bee {
    constructor(e, t, i, r, s, o) {
      this.res = e, this.props = t, this.projections = i, this.containerless = r, this.captures = s, this.data = o, this.type = w5;
    }
  }
  class NE {
    constructor(e, t, i) {
      this.res = e, this.alias = t, this.props = i, this.type = y5;
    }
  }
  class vee {
    constructor(e, t, i, r) {
      this.def = e, this.res = t, this.alias = i, this.props = r, this.type = C5;
    }
  }
  class wee {
    constructor(e, t) {
      this.instructions = e, this.toBindingContext = t, this.type = S5;
    }
  }
  class p$ {
    constructor(e, t) {
      this.from = e, this.to = t, this.type = E5;
    }
  }
  class yee {
    constructor(e) {
      this.from = e, this.type = A5;
    }
  }
  class $5 {
    constructor(e, t, i, r) {
      this.from = e, this.to = t, this.capture = i, this.modifier = r, this.type = P5;
    }
  }
  class m$ {
    constructor(e, t) {
      this.value = e, this.to = t, this.type = O5;
    }
  }
  class b$ {
    constructor(e) {
      this.value = e, this.type = k5;
    }
  }
  class v$ {
    constructor(e) {
      this.value = e, this.type = D5;
    }
  }
  class _O {
    constructor(e, t, i) {
      this.attr = e, this.from = t, this.to = i, this.type = I5;
    }
  }
  class w$ {
    constructor() {
      this.type = N5;
    }
  }
  class y$ {
    constructor(e) {
      this.instruction = e, this.type = L5;
    }
  }
  class AA {
    constructor(e, t) {
      this.target = e, this.from = t, this.type = H5;
    }
  }
  class ZS {
    constructor(e, t, i, r) {
      this.Type = e, this.name = t, this.aliases = i, this.key = r;
    }
    static create(e, t) {
      let i, r;
      return yt(e) ? (i = e, r = { name: i }) : (i = e.name, r = e), new ZS(t, mu(PA(t, "name"), i), hi(PA(t, "aliases"), r.aliases, t.aliases), Jg(i));
    }
    register(e, t) {
      const i = this.Type, r = typeof t == "string" ? Jg(t) : this.key, s = this.aliases;
      e.has(r, !1) ? console.warn(`[DEV:aurelia] ${Yn(157, this.name)}`) : e.register(e.has(i, !1) ? null : vO(i, i), u$(i, r), ...s.map((o) => u$(i, Jg(o))));
    }
  }
  const hr = "binding-command", oS = /* @__PURE__ */ gf(hr), Jg = (n) => `${oS}:${n}`, PA = (n, e) => MA(F6.annotation.keyFor(e), n), Cee = /* @__PURE__ */ (() => {
    const n = "__au_static_resource__", e = (t, i, r) => {
      var o;
      let s = MA(n, t);
      return s == null && ((o = t.$au) == null ? void 0 : o.type) === i && (s = r(t.$au, t), g$(s, t, n)), s;
    };
    return Hp({
      name: oS,
      keyFrom: Jg,
      // isType<T>(value: T): value is (T extends Constructable ? BindingCommandType<T> : never) {
      //   return isFunction(value) && hasOwnMetadata(cmdBaseName, value);
      // },
      define(t, i) {
        const r = ZS.create(t, i), s = r.Type;
        return g$(r, s, oS, Ya), s;
      },
      getAnnotation: PA,
      find(t, i) {
        const r = t.find(hr, i);
        return r == null ? null : MA(oS, r) ?? e(r, hr, ZS.create) ?? null;
      },
      get(t, i) {
        try {
          return t.get(pp(Jg(i)));
        } catch (r) {
          throw console.log(`


[DEV:aurelia] Cannot retrieve binding command with name




`, i), r;
        }
        return t.get(pp(Jg(i)));
      }
    });
  })();
  class F5 {
    get ignoreAttr() {
      return !1;
    }
    build(e, t, i) {
      let s = e.attr.target, o = e.attr.rawValue;
      return o = o === "" ? Di(s) : o, e.bindable == null ? s = i.map(e.node, s) ?? Di(s) : s = e.bindable.name, new Hw(
        t.parse(o, fl),
        s,
        1
        /* InternalBindingMode.oneTime */
      );
    }
  }
  F5.$au = {
    type: hr,
    name: "one-time"
  };
  class B5 {
    get ignoreAttr() {
      return !1;
    }
    build(e, t, i) {
      let s = e.attr.target, o = e.attr.rawValue;
      return o = o === "" ? Di(s) : o, e.bindable == null ? s = i.map(e.node, s) ?? Di(s) : s = e.bindable.name, new Hw(
        t.parse(o, fl),
        s,
        2
        /* InternalBindingMode.toView */
      );
    }
  }
  B5.$au = {
    type: hr,
    name: "to-view"
  };
  class V5 {
    get ignoreAttr() {
      return !1;
    }
    build(e, t, i) {
      const r = e.attr;
      let s = r.target, o = r.rawValue;
      return o = o === "" ? Di(s) : o, e.bindable == null ? s = i.map(e.node, s) ?? Di(s) : s = e.bindable.name, new Hw(
        t.parse(o, fl),
        s,
        4
        /* InternalBindingMode.fromView */
      );
    }
  }
  V5.$au = {
    type: hr,
    name: "from-view"
  };
  class W5 {
    get ignoreAttr() {
      return !1;
    }
    build(e, t, i) {
      const r = e.attr;
      let s = r.target, o = r.rawValue;
      return o = o === "" ? Di(s) : o, e.bindable == null ? s = i.map(e.node, s) ?? Di(s) : s = e.bindable.name, new Hw(
        t.parse(o, fl),
        s,
        6
        /* InternalBindingMode.twoWay */
      );
    }
  }
  W5.$au = {
    type: hr,
    name: "two-way"
  };
  class j5 {
    get ignoreAttr() {
      return !1;
    }
    build(e, t, i) {
      const r = e.attr, s = e.bindable;
      let o = r.rawValue, a = r.target, l, c;
      return o = o === "" ? Di(a) : o, s == null ? (c = i.isTwoWay(e.node, a) ? 6 : 2, a = i.map(e.node, a) ?? Di(a)) : (l = e.def.defaultBindingMode ?? 0, c = s.mode === 0 || s.mode == null ? l == null || l === 0 ? 2 : l : s.mode, a = s.name), new Hw(t.parse(o, fl), a, yt(c) ? Lw[c] ?? 0 : c);
    }
  }
  j5.$au = {
    type: hr,
    name: "bind"
  };
  class z5 {
    constructor() {
      this._attrParser = ge(CO);
    }
    get ignoreAttr() {
      return !1;
    }
    build(e, t) {
      const i = e.bindable === null ? Di(e.attr.target) : e.bindable.name, r = t.parse(e.attr.rawValue, "IsIterator");
      let s = pt;
      if (r.semiIdx > -1) {
        const o = e.attr.rawValue.slice(r.semiIdx + 1), a = o.indexOf(":");
        if (a > -1) {
          const l = o.slice(0, a).trim(), c = o.slice(a + 1).trim(), u = this._attrParser.parse(l, c);
          s = [new mee(c, u.target, u.command)];
        }
      }
      return new gee(r, i, s);
    }
  }
  z5.$au = {
    type: hr,
    name: "for"
  };
  class U5 {
    get ignoreAttr() {
      return !0;
    }
    build(e, t) {
      var i;
      return new $5(t.parse(e.attr.rawValue, d5), e.attr.target, !1, ((i = e.attr.parts) == null ? void 0 : i[2]) ?? null);
    }
  }
  U5.$au = {
    type: hr,
    name: "trigger"
  };
  class G5 {
    get ignoreAttr() {
      return !0;
    }
    build(e, t) {
      var i;
      return new $5(t.parse(e.attr.rawValue, d5), e.attr.target, !0, ((i = e.attr.parts) == null ? void 0 : i[2]) ?? null);
    }
  }
  G5.$au = {
    type: hr,
    name: "capture"
  };
  class Y5 {
    get ignoreAttr() {
      return !0;
    }
    build(e, t) {
      const i = e.attr, r = i.target;
      let s = i.rawValue;
      return s = s === "" ? Di(r) : s, new _O(r, t.parse(s, fl), r);
    }
  }
  Y5.$au = {
    type: hr,
    name: "attr"
  };
  class K5 {
    get ignoreAttr() {
      return !0;
    }
    build(e, t) {
      return new _O("style", t.parse(e.attr.rawValue, fl), e.attr.target);
    }
  }
  K5.$au = {
    type: hr,
    name: "style"
  };
  class q5 {
    get ignoreAttr() {
      return !0;
    }
    build(e, t) {
      return new _O("class", t.parse(e.attr.rawValue, fl), e.attr.target);
    }
  }
  q5.$au = {
    type: hr,
    name: "class"
  };
  class X5 {
    get ignoreAttr() {
      return !0;
    }
    build(e, t) {
      return new pee(t.parse(e.attr.rawValue, fl), e.attr.target);
    }
  }
  X5.$au = {
    type: hr,
    name: "ref"
  };
  class Z5 {
    get ignoreAttr() {
      return !1;
    }
    build(e) {
      return new AA(e.attr.target, e.attr.rawValue);
    }
  }
  Z5.$au = {
    type: hr,
    name: "spread"
  };
  const See = /* @__PURE__ */ dl("ITemplateElementFactory", (n) => n.singleton(_ee)), C$ = {};
  class _ee {
    constructor() {
      this.p = ge(Np), this._template = this.t();
    }
    t() {
      return this.p.document.createElement("template");
    }
    createTemplate(e) {
      var i;
      if (yt(e)) {
        let r = C$[e];
        if (r === void 0) {
          const s = this._template;
          s.innerHTML = e;
          const o = s.content.firstElementChild;
          t(o) ? (this._template = this.t(), r = s) : (s.content.removeChild(o), r = o), C$[e] = r;
        }
        return r.cloneNode(!0);
      }
      if (e.nodeName !== "TEMPLATE") {
        const r = this.t();
        return r.content.appendChild(e), r;
      }
      return (i = e.parentNode) == null || i.removeChild(e), e.cloneNode(!0);
      function t(r) {
        if (r == null || r.nodeName !== "TEMPLATE" || r.nextElementSibling != null)
          return !0;
        const o = r.previousSibling;
        if (o != null)
          switch (o.nodeType) {
            case 3:
              return o.textContent.trim().length > 0;
          }
        const a = r.nextSibling;
        if (a != null)
          switch (a.nodeType) {
            case 3:
              return a.textContent.trim().length > 0;
          }
        return !1;
      }
    }
  }
  const LE = "au-start", HE = "au-end", $E = (n, e, t) => n.insertBefore(e, t), S$ = (n, e, t) => {
    if (n === null)
      return;
    const i = t.length;
    let r = 0;
    for (; i > r; )
      n.insertBefore(t[r], e), ++r;
  }, fh = (n, e) => n.content.appendChild(e), _$ = (n, e) => {
    const t = e.length;
    let i = 0;
    for (; t > i; )
      n.content.appendChild(e[i]), ++i;
  }, R$ = (n) => n.nodeType === 1, E$ = (n) => n.nodeType === 3, gm = "au-slot", x$ = "default", pm = /* @__PURE__ */ ((n) => () => `anonymous-${++n}`)(0);
  class Q5 {
    constructor() {
      this.debug = !1, this.resolveResources = !0;
    }
    compile(e, t) {
      var h, d;
      if (e.template == null || e.needsCompile === !1)
        return e;
      const i = new QS(e, t, null, null, void 0), r = yt(e.template) || !e.enhance ? i._templateFactory.createTemplate(e.template) : e.template, s = r.nodeName === FE && r.content != null, o = s ? r.content : r, a = Aee.findAll(t), l = a.length;
      let c = 0;
      if (l > 0)
        for (; l > c; )
          (d = (h = a[c]).compiling) == null || d.call(h, r), ++c;
      if (r.hasAttribute(IA))
        throw Yn(701, e);
      return this._compileLocalElement(o, i), this._compileNode(o, i), {
        ...e,
        name: e.name || pm(),
        dependencies: (e.dependencies ?? pt).concat(i.deps ?? pt),
        instructions: i.rows,
        surrogates: s ? this._compileSurrogate(r, i) : pt,
        template: r,
        hasSlots: i.hasSlot,
        needsCompile: !1
      };
    }
    compileSpread(e, t, i, r, s) {
      const o = new QS(e, i, null, null, void 0), a = [], l = s ?? o._findElement(r.nodeName.toLowerCase()), c = l !== null, u = o._exprParser, h = t.length;
      let d = 0, f, g = null, p, m, v, y, w, R = null, E, C, T, P;
      for (; h > d; ++d) {
        if (f = t[d], T = f.target, P = f.rawValue, T === "...$attrs") {
          a.push(new w$());
          continue;
        }
        if (R = o._getCommand(f), R !== null && R.ignoreAttr) {
          Oe.node = r, Oe.attr = f, Oe.bindable = null, Oe.def = null, a.push(R.build(Oe, o._exprParser, o._attrMapper));
          continue;
        }
        if (c && (v = o._getBindables(l), y = v.attrs[T], y !== void 0)) {
          R == null ? (E = u.parse(P, _o), a.push(new y$(E == null ? new Nf(P, y.name) : new Rl(E, y.name)))) : (Oe.node = r, Oe.attr = f, Oe.bindable = y, Oe.def = l, a.push(new y$(R.build(Oe, o._exprParser, o._attrMapper))));
          continue;
        }
        if (g = o._findAttr(T), g !== null) {
          if (g.isTemplateController)
            throw Yn(9998, T);
          v = o._getBindables(g), C = g.noMultiBindings === !1 && R === null && BE(P), C ? m = this._compileMultiBindings(r, P, g, o) : (w = v.primary, R === null ? (E = u.parse(P, _o), m = [
            E === null ? new Nf(P, w.name) : new Rl(E, w.name)
          ]) : (Oe.node = r, Oe.attr = f, Oe.bindable = w, Oe.def = g, m = [R.build(Oe, o._exprParser, o._attrMapper)])), (p ?? (p = [])).push(new NE(
            // todo: def/ def.Type or def.name should be configurable
            //       example: AOT/runtime can use def.Type, but there are situation
            //       where instructions need to be serialized, def.name should be used
            this.resolveResources ? g : g.name,
            g.aliases != null && g.aliases.includes(T) ? T : void 0,
            m
          ));
          continue;
        }
        if (R == null)
          if (E = u.parse(P, _o), E != null)
            a.push(new Rl(
              E,
              // if not a bindable, then ensure plain attribute are mapped correctly:
              // e.g: colspan -> colSpan
              //      innerhtml -> innerHTML
              //      minlength -> minLength etc...
              o._attrMapper.map(r, T) ?? Di(T)
            ));
          else
            switch (T) {
              case "class":
                a.push(new b$(P));
                break;
              case "style":
                a.push(new v$(P));
                break;
              default:
                a.push(new m$(P, T));
            }
        else
          Oe.node = r, Oe.attr = f, Oe.bindable = null, Oe.def = null, a.push(R.build(Oe, o._exprParser, o._attrMapper));
      }
      return Py(), p != null ? p.concat(a) : a;
    }
    /** @internal */
    _compileSurrogate(e, t) {
      const i = [], r = e.attributes, s = t._exprParser;
      let o = r.length, a = 0, l, c, u, h, d = null, f, g, p, m, v = null, y, w, R, E;
      for (; o > a; ++a) {
        if (l = r[a], c = l.name, u = l.value, h = t._attrParser.parse(c, u), R = h.target, E = h.rawValue, Eee[R])
          throw Yn(702, c);
        if (v = t._getCommand(h), v !== null && v.ignoreAttr) {
          Oe.node = e, Oe.attr = h, Oe.bindable = null, Oe.def = null, i.push(v.build(Oe, t._exprParser, t._attrMapper));
          continue;
        }
        if (d = t._findAttr(R), d !== null) {
          if (d.isTemplateController)
            throw Yn(703, R);
          p = t._getBindables(d), w = d.noMultiBindings === !1 && v === null && BE(E), w ? g = this._compileMultiBindings(e, E, d, t) : (m = p.primary, v === null ? (y = s.parse(E, _o), g = y === null ? E === "" ? [] : [new Nf(E, m.name)] : [new Rl(y, m.name)]) : (Oe.node = e, Oe.attr = h, Oe.bindable = m, Oe.def = d, g = [v.build(Oe, t._exprParser, t._attrMapper)])), e.removeAttribute(c), --a, --o, (f ?? (f = [])).push(new NE(
            // todo: def/ def.Type or def.name should be configurable
            //       example: AOT/runtime can use def.Type, but there are situation
            //       where instructions need to be serialized, def.name should be used
            this.resolveResources ? d : d.name,
            d.aliases != null && d.aliases.includes(R) ? R : void 0,
            g
          ));
          continue;
        }
        if (v === null)
          if (y = s.parse(E, _o), y != null)
            e.removeAttribute(c), --a, --o, i.push(new Rl(
              y,
              // if not a bindable, then ensure plain attribute are mapped correctly:
              // e.g: colspan -> colSpan
              //      innerhtml -> innerHTML
              //      minlength -> minLength etc...
              t._attrMapper.map(e, R) ?? Di(R)
            ));
          else
            switch (c) {
              case "class":
                i.push(new b$(E));
                break;
              case "style":
                i.push(new v$(E));
                break;
              default:
                i.push(new m$(E, c));
            }
        else
          Oe.node = e, Oe.attr = h, Oe.bindable = null, Oe.def = null, i.push(v.build(Oe, t._exprParser, t._attrMapper));
      }
      return Py(), f != null ? f.concat(i) : i;
    }
    // overall flow:
    // each of the method will be responsible for compiling its corresponding node type
    // and it should return the next node to be compiled
    /** @internal */
    _compileNode(e, t) {
      switch (e.nodeType) {
        case 1:
          switch (e.nodeName) {
            case "LET":
              return this._compileLet(e, t);
            default:
              return this._compileElement(e, t);
          }
        case 3:
          return this._compileText(e, t);
        case 11: {
          let i = e.firstChild;
          for (; i !== null; )
            i = this._compileNode(i, t);
          break;
        }
      }
      return e.nextSibling;
    }
    /** @internal */
    _compileLet(e, t) {
      const i = e.attributes, r = i.length, s = [], o = t._exprParser;
      let a = !1, l = 0, c, u, h, d, f, g, p, m;
      for (; r > l; ++l) {
        if (c = i[l], h = c.name, d = c.value, h === "to-binding-context") {
          a = !0;
          continue;
        }
        if (u = t._attrParser.parse(h, d), g = u.target, p = u.rawValue, f = t._getCommand(u), f !== null) {
          if (u.command === "bind")
            s.push(new p$(o.parse(p, fl), Di(g)));
          else
            throw Yn(704, u);
          continue;
        }
        m = o.parse(p, _o), m === null && console.warn(`[DEV:aurelia] Property "${g}" is declared with literal string ${p}. Did you mean ${g}.bind="${p}"?`), s.push(new p$(m === null ? new $i(p) : m, Di(g)));
      }
      return t.rows.push([new wee(s, a)]), this._markAsTarget(e, t).nextSibling;
    }
    /** @internal */
    // eslint-disable-next-line
    _compileElement(e, t) {
      var Y, K, ce, le, _e, be, Z, ee;
      const i = e.nextSibling, r = (e.getAttribute("as-element") ?? e.nodeName).toLowerCase(), s = t._findElement(r), o = s !== null, a = o && s.shadowOptions != null, l = s == null ? void 0 : s.capture, c = l != null && typeof l != "boolean", u = l ? [] : pt, h = t._exprParser, d = this.debug ? Za : () => {
        e.removeAttribute(y), --m, --p;
      };
      let f = e.attributes, g, p = f.length, m = 0, v, y, w, R, E, C, T = null, P = !1, x, A, D, B, F, W, N, O = null, V, G, U, se, b = !0, S = !1, _ = !1, I = !1, H, M = 0;
      if (r === "slot") {
        if (t.root.def.shadowOptions == null)
          throw Yn(717, t.root.def.name);
        t.root.hasSlot = !0;
      }
      for (o && (H = {}, b = (Y = s.processContent) == null ? void 0 : Y.call(s.Type, e, t.p, H), f = e.attributes, p = f.length); p > m; ++m) {
        switch (v = f[m], y = v.name, w = v.value, y) {
          case "as-element":
          case "containerless":
            d(), S = S || y === "containerless";
            continue;
        }
        if (R = t._attrParser.parse(y, w), O = t._getCommand(R), U = R.target, se = R.rawValue, l && (!c || c && l(U))) {
          if (O != null && O.ignoreAttr) {
            d(), u.push(R);
            continue;
          }
          if (_ = U !== gm && U !== "slot" && ((M = U.indexOf("...")) === -1 || M === 0 && U === "...$attrs"), _ && (V = t._getBindables(s), V.attrs[U] == null && !((K = t._findAttr(U)) != null && K.isTemplateController))) {
            d(), u.push(R);
            continue;
          }
        }
        if (U === "...$attrs") {
          (E ?? (E = [])).push(new w$()), d();
          continue;
        }
        if (O != null && O.ignoreAttr) {
          Oe.node = e, Oe.attr = R, Oe.bindable = null, Oe.def = null, (E ?? (E = [])).push(O.build(Oe, t._exprParser, t._attrMapper)), d();
          continue;
        }
        if (U.indexOf("...") === 0) {
          if (o && (U = U.slice(3)) !== "$element") {
            (C ?? (C = [])).push(new AA("$bindables", U === "$bindables" ? se : U)), d();
            continue;
          }
          throw (U === "$bindable" || U === "bindables") && console.warn(`[DEV:aurelia] Detected usage of ${U} on <${e.nodeName}>, did you mean "$bindables"?`), Yn(720, U);
        }
        if (o) {
          if (V = t._getBindables(s), x = V.attrs[U], x !== void 0) {
            O === null ? (W = h.parse(se, _o), (C ?? (C = [])).push(W == null ? new Nf(se, x.name) : new Rl(W, x.name))) : (Oe.node = e, Oe.attr = R, Oe.bindable = x, Oe.def = s, (C ?? (C = [])).push(O.build(Oe, t._exprParser, t._attrMapper))), d(), T = t._findAttr(U), T !== null && console.warn(`[DEV:aurelia] Binding with bindable "${U}" on custom element "${s.name}" is ambiguous.There is a custom attribute with the same name.`);
            continue;
          }
          if (U === "$bindables") {
            if (O != null) {
              Oe.node = e, Oe.attr = R, Oe.bindable = null, Oe.def = s;
              {
                const ae = O.build(Oe, t._exprParser, t._attrMapper);
                ae instanceof AA || console.warn(`[DEV:aurelia] Binding with "$bindables" on custom element "${s.name}" with command ${R.command}  did not result in a spread binding instruction. This likely won't work as expected.`), (C ?? (C = [])).push(ae);
              }
            } else
              console.warn(`[DEV:aurelia] Usage of "$bindables" on custom element "<${s.name}>" is ignored.`);
            d();
            continue;
          }
        }
        if (U === "$bindables")
          throw Yn(721, e.nodeName, U, se);
        if (T = t._findAttr(U), T !== null) {
          V = t._getBindables(T), P = T.noMultiBindings === !1 && O === null && BE(se), P ? D = this._compileMultiBindings(e, se, T, t) : (G = V.primary, O === null ? (W = h.parse(se, _o), D = W === null ? se === "" ? [] : [new Nf(se, G.name)] : [new Rl(W, G.name)]) : (Oe.node = e, Oe.attr = R, Oe.bindable = G, Oe.def = T, D = [O.build(Oe, t._exprParser, t._attrMapper)])), d(), T.isTemplateController ? (B ?? (B = [])).push(new vee(
            Ree,
            // todo: def/ def.Type or def.name should be configurable
            //       example: AOT/runtime can use def.Type, but there are situation
            //       where instructions need to be serialized, def.name should be used
            this.resolveResources ? T : T.name,
            void 0,
            D
          )) : (A ?? (A = [])).push(new NE(
            // todo: def/ def.Type or def.name should be configurable
            //       example: AOT/runtime can use def.Type, but there are situation
            //       where instructions need to be serialized, def.name should be used
            this.resolveResources ? T : T.name,
            T.aliases != null && T.aliases.includes(U) ? U : void 0,
            D
          ));
          continue;
        }
        if (O === null) {
          W = h.parse(se, _o), W != null && (d(), (E ?? (E = [])).push(new Rl(
            W,
            // if not a bindable, then ensure plain attribute are mapped correctly:
            // e.g: colspan -> colSpan
            //      innerhtml -> innerHTML
            //      minlength -> minLength etc...
            t._attrMapper.map(e, U) ?? Di(U)
          )));
          continue;
        }
        Oe.node = e, Oe.attr = R, Oe.bindable = null, Oe.def = null, (E ?? (E = [])).push(O.build(Oe, t._exprParser, t._attrMapper)), d();
      }
      Py(), this._shouldReorderAttrs(e, E) && E != null && E.length > 1 && this._reorder(e, E), o && (N = new bee(
        // todo: def/ def.Type or def.name should be configurable
        //       example: AOT/runtime can use def.Type, but there are situation
        //       where instructions need to be serialized, def.name should be used
        this.resolveResources ? s : s.name,
        C ?? pt,
        null,
        S,
        u,
        H
      )), (E != null || N != null || A != null) && (g = pt.concat(N ?? pt, A ?? pt, E ?? pt), I = !0);
      let $;
      if (B != null) {
        p = B.length - 1, m = p, F = B[m];
        let ae;
        T$(e) ? (ae = t.t(), _$(ae, [
          // context.h(MARKER_NODE_NAME),
          t._marker(),
          t._comment(LE),
          t._comment(HE)
        ])) : (this._replaceByMarker(e, t), e.nodeName === "TEMPLATE" ? ae = e : (ae = t.t(), fh(ae, e)));
        const Ne = ae, fe = t._createChild(g == null ? [] : [g]);
        let ye, k, L = !1, j, te, q, re, J, X, ne = 0, ie = 0, oe = e.firstChild, we = !1;
        if (b !== !1)
          for (; oe !== null; ) {
            if (k = R$(oe) ? oe.getAttribute(gm) : null, L = k !== null || o && !a, ye = oe.nextSibling, L) {
              if (!o)
                throw Yn(706, k, r);
              (ce = oe.removeAttribute) == null || ce.call(oe, gm), we = E$(oe) && oe.textContent.trim() === "", we || ((le = te ?? (te = {}))[_e = k || x$] ?? (le[_e] = [])).push(oe), e.removeChild(oe);
            }
            oe = ye;
          }
        if (te != null) {
          j = {};
          for (k in te) {
            for (ae = t.t(), q = te[k], ne = 0, ie = q.length; ie > ne; ++ne)
              re = q[ne], re.nodeName === "TEMPLATE" ? re.attributes.length > 0 ? fh(ae, re) : fh(ae, re.content) : fh(ae, re);
            X = t._createChild(), this._compileNode(ae.content, X), j[k] = {
              name: pm(),
              type: Eg,
              template: ae,
              instructions: X.rows,
              needsCompile: !1
            };
          }
          N.projections = j;
        }
        if (I && (o && (S || s.containerless) ? this._replaceByMarker(e, t) : this._markAsTarget(e, t)), $ = !o || !s.containerless && !S && b !== !1, $)
          if (e.nodeName === FE)
            this._compileNode(e.content, fe);
          else
            for (oe = e.firstChild; oe !== null; )
              oe = this._compileNode(oe, fe);
        for (F.def = {
          name: pm(),
          type: Eg,
          template: Ne,
          instructions: fe.rows,
          needsCompile: !1
        }; m-- > 0; )
          F = B[m], ae = t.t(), J = t._marker(), _$(ae, [
            J,
            t._comment(LE),
            t._comment(HE)
          ]), F.def = {
            name: pm(),
            type: Eg,
            template: ae,
            needsCompile: !1,
            instructions: [[B[m + 1]]]
          };
        t.rows.push([F]);
      } else {
        g != null && t.rows.push(g);
        let ae = e.firstChild, Ne, fe, ye = !1, k = null, L, j, te, q, re, J = !1, X = 0, ne = 0;
        if (b !== !1)
          for (; ae !== null; ) {
            if (fe = R$(ae) ? ae.getAttribute(gm) : null, ye = fe !== null || o && !a, Ne = ae.nextSibling, ye) {
              if (!o)
                throw Yn(706, fe, r);
              (be = ae.removeAttribute) == null || be.call(ae, gm), J = E$(ae) && ae.textContent.trim() === "", J || ((Z = L ?? (L = {}))[ee = fe || x$] ?? (Z[ee] = [])).push(ae), e.removeChild(ae);
            }
            ae = Ne;
          }
        if (L != null) {
          k = {};
          for (fe in L) {
            for (q = t.t(), j = L[fe], X = 0, ne = j.length; ne > X; ++X)
              te = j[X], te.nodeName === FE ? te.attributes.length > 0 ? fh(q, te) : fh(q, te.content) : fh(q, te);
            re = t._createChild(), this._compileNode(q.content, re), k[fe] = {
              name: pm(),
              type: Eg,
              template: q,
              instructions: re.rows,
              needsCompile: !1
            };
          }
          N.projections = k;
        }
        if (I && (o && (S || s.containerless) ? this._replaceByMarker(e, t) : this._markAsTarget(e, t)), $ = !o || !s.containerless && !S && b !== !1, $ && e.childNodes.length > 0)
          for (ae = e.firstChild; ae !== null; )
            ae = this._compileNode(ae, t);
      }
      return i;
    }
    /** @internal */
    _compileText(e, t) {
      const i = e.parentNode, r = t._exprParser.parse(e.textContent, _o), s = e.nextSibling;
      let o, a, l, c, u;
      if (r !== null) {
        for ({ parts: o, expressions: a } = r, (u = o[0]) && $E(i, t._text(u), e), l = 0, c = a.length; c > l; ++l)
          S$(i, e, [
            // context.h(MARKER_NODE_NAME),
            t._marker(),
            // empty text node will not be cloned when doing fragment.cloneNode()
            // so give it an empty space instead
            t._text(" ")
          ]), (u = o[l + 1]) && $E(i, t._text(u), e), t.rows.push([new yee(a[l])]);
        i.removeChild(e);
      }
      return s;
    }
    /** @internal */
    _compileMultiBindings(e, t, i, r) {
      const s = r._getBindables(i), o = t.length, a = [];
      let l, c, u = 0, h = 0, d, f, g, p;
      for (let m = 0; m < o; ++m)
        if (h = t.charCodeAt(m), h === 92)
          ++m;
        else if (h === 58) {
          for (l = t.slice(u, m); t.charCodeAt(++m) <= 32; )
            ;
          for (u = m; m < o; ++m)
            if (h = t.charCodeAt(m), h === 92)
              ++m;
            else if (h === 59) {
              c = t.slice(u, m);
              break;
            }
          if (c === void 0 && (c = t.slice(u)), f = r._attrParser.parse(l, c), g = r._getCommand(f), p = s.attrs[f.target], p == null)
            throw Yn(707, f.target, i.name);
          for (g === null ? (d = r._exprParser.parse(c, _o), a.push(d === null ? new Nf(c, p.name) : new Rl(d, p.name))) : (Oe.node = e, Oe.attr = f, Oe.bindable = p, Oe.def = i, a.push(g.build(Oe, r._exprParser, r._attrMapper))); m < o && t.charCodeAt(++m) <= 32; )
            ;
          u = m, l = void 0, c = void 0;
        }
      return Py(), a;
    }
    /** @internal */
    _compileLocalElement(e, t) {
      const i = t.root.def.name, r = e, s = ME(r.querySelectorAll("template[as-custom-element]")), o = s.length;
      if (o === 0)
        return;
      if (o === r.childElementCount)
        throw Yn(708, i);
      const a = /* @__PURE__ */ new Set(), l = [];
      for (const u of s) {
        if (u.parentNode !== r)
          throw Yn(709, i);
        const h = Mee(i, u, a), d = u.content, f = ME(d.querySelectorAll("bindable")), g = /* @__PURE__ */ new Set(), p = /* @__PURE__ */ new Set(), m = f.reduce((y, w) => {
          if (w.parentNode !== d)
            throw Yn(710, h);
          const R = w.getAttribute(
            "name"
            /* LocalTemplateBindableAttributes.name */
          );
          if (R === null)
            throw Yn(711, w, h);
          const E = w.getAttribute(
            "attribute"
            /* LocalTemplateBindableAttributes.attribute */
          );
          if (E !== null && p.has(E) || g.has(R))
            throw Yn(712, g, E);
          E !== null && p.add(E), g.add(R);
          const C = ME(w.attributes).filter((T) => !M$.includes(T.name));
          return C.length > 0 && console.warn(`[DEV:aurelia] The attribute(s) ${C.map((T) => T.name).join(", ")} will be ignored for ${w.outerHTML}. Only ${M$.join(", ")} are processed.`), w.remove(), y[R] = {
            name: R,
            attribute: E ?? void 0,
            mode: w.getAttribute(
              "mode"
              /* LocalTemplateBindableAttributes.mode */
            ) ?? "default"
          }, y;
        }, {});
        class v {
        }
        v.$au = {
          type: Eg,
          name: h,
          template: u,
          bindables: m
        }, Reflect.defineProperty(v, "name", { value: N6(h) }), l.push(v), r.removeChild(u);
      }
      const c = (t.root.def.dependencies ?? []).concat(t.root.def.Type == null ? pt : [t.root.def.Type]);
      for (const u of l)
        u.dependencies = c.concat(l.filter((h) => h !== u)), t._addLocalDep(u);
    }
    /** @internal */
    _shouldReorderAttrs(e, t) {
      const i = e.nodeName;
      return i === "INPUT" && xee[e.type] === 1 || i === "SELECT" && (e.hasAttribute("multiple") || (t == null ? void 0 : t.some((r) => r.type === SO && r.to === "multiple")));
    }
    /** @internal */
    _reorder(e, t) {
      switch (e.nodeName) {
        case "INPUT": {
          const i = t;
          let r, s, o = 0, a;
          for (let l = 0; l < i.length && o < 3; l++)
            switch (a = i[l], a.to) {
              case "model":
              case "value":
              case "matcher":
                r = l, o++;
                break;
              case "checked":
                s = l, o++;
                break;
            }
          s !== void 0 && r !== void 0 && s < r && ([i[r], i[s]] = [i[s], i[r]]);
          break;
        }
        case "SELECT": {
          const i = t;
          let r = 0, s = 0, o = 0, a;
          for (let l = 0; l < i.length && o < 2; ++l) {
            switch (a = i[l], a.to) {
              case "multiple":
                s = l, o++;
                break;
              case "value":
                r = l, o++;
                break;
            }
            o === 2 && r < s && ([i[s], i[r]] = [i[r], i[s]]);
          }
        }
      }
    }
    /**
     * Mark an element as target with a special css class
     * and return it
     *
     * @internal
     */
    _markAsTarget(e, t) {
      return $E(e.parentNode, t._comment("au*"), e), e;
    }
    /**
     * Replace an element with a marker, and return the marker
     *
     * @internal
     */
    _replaceByMarker(e, t) {
      if (T$(e))
        return e;
      const i = e.parentNode, r = t._marker();
      return S$(i, e, [
        r,
        t._comment(LE),
        t._comment(HE)
      ]), i.removeChild(e), r;
    }
  }
  Q5.register = Dw(LR);
  const FE = "TEMPLATE", T$ = (n) => n.nodeValue === "au*";
  class QS {
    constructor(e, t, i, r, s) {
      var a;
      this.hasSlot = !1, this.deps = null;
      const o = i !== null;
      if (this.c = t, this.root = r === null ? this : r, this.def = e, this.parent = i, this._resourceResolver = o ? i._resourceResolver : t.get(J5), this._commandResolver = o ? i._commandResolver : t.get(Tee), this._templateFactory = o ? i._templateFactory : t.get(See), this._attrParser = o ? i._attrParser : t.get(CO), this._exprParser = o ? i._exprParser : t.get(Lp), this._attrMapper = o ? i._attrMapper : t.get(f5), this._logger = o ? i._logger : t.get(Wd), typeof ((a = (this.p = o ? i.p : t.get(Np)).document) == null ? void 0 : a.nodeType) != "number")
        throw Yn(
          722
          /* ErrorNames.compiler_no_dom_api */
        );
      this.localEls = o ? i.localEls : /* @__PURE__ */ new Set(), this.rows = s ?? [];
    }
    _addLocalDep(e) {
      var t;
      return ((t = this.root).deps ?? (t.deps = [])).push(e), this.root.c.register(e), this;
    }
    _text(e) {
      return this.p.document.createTextNode(e);
    }
    _comment(e) {
      return this.p.document.createComment(e);
    }
    _marker() {
      return this._comment("au*");
    }
    h(e) {
      const t = this.p.document.createElement(e);
      return e === "template" && this.p.document.adoptNode(t.content), t;
    }
    t() {
      return this.h("template");
    }
    /**
     * Find the custom element definition of a given name
     */
    _findElement(e) {
      return this._resourceResolver.el(this.c, e);
    }
    /**
     * Find the custom attribute definition of a given name
     */
    _findAttr(e) {
      return this._resourceResolver.attr(this.c, e);
    }
    _getBindables(e) {
      return this._resourceResolver.bindables(e);
    }
    /**
     * Create a new child compilation context
     */
    _createChild(e) {
      return new QS(this.def, this.c, this, this.root, e);
    }
    /**
     * Retrieve a binding command resource instance.
     *
     * @param name - The parsed `AttrSyntax`
     *
     * @returns An instance of the command if it exists, or `null` if it does not exist.
     */
    _getCommand(e) {
      const t = e.command;
      return t === null ? null : this._commandResolver.get(this.c, t);
    }
  }
  const BE = (n) => {
    const e = n.length;
    let t = 0, i = 0;
    for (; e > i; ) {
      if (t = n.charCodeAt(i), t === 92)
        ++i;
      else {
        if (t === 58)
          return !0;
        if (t === 36 && n.charCodeAt(i + 1) === 123)
          return !1;
      }
      ++i;
    }
    return !1;
  }, Py = () => {
    Oe.node = Oe.attr = Oe.bindable = Oe.def = null;
  }, Ree = { name: "unnamed", type: Eg }, Oe = {
    node: null,
    attr: null,
    bindable: null,
    def: null
  }, Eee = {
    id: !0,
    name: !0,
    "au-slot": !0,
    "as-element": !0
  }, xee = {
    checkbox: 1,
    radio: 1
    // todo: range is also sensitive to order, for min/max
  }, J5 = /* @__PURE__ */ dl("IResourceResolver"), Tee = /* @__PURE__ */ dl("IBindingCommandResolver", (n) => {
    class e {
      constructor() {
        this._cache = /* @__PURE__ */ new WeakMap();
      }
      get(i, r) {
        let s = this._cache.get(i);
        return s || this._cache.set(i, s = {}), r in s ? s[r] : s[r] = Cee.get(i, r);
      }
    }
    return n.singleton(e);
  }), M$ = Hp([
    "name",
    "attribute",
    "mode"
    /* LocalTemplateBindableAttributes.mode */
  ]), IA = "as-custom-element", Mee = (n, e, t) => {
    const i = e.getAttribute(IA);
    if (i === null || i === "")
      throw Yn(715, n);
    if (t.has(i))
      throw Yn(716, i, n);
    return t.add(i), e.removeAttribute(IA), i;
  }, A$ = /* @__PURE__ */ dl("ITemplateCompilerHooks"), Aee = Hp({
    name: /* @__PURE__ */ gf("compiler-hooks"),
    define(n) {
      return {
        register(e) {
          vO(A$, n).register(e);
        }
      };
    },
    findAll(n) {
      return n.get(_Q(A$));
    }
  }), Pee = Object.prototype.hasOwnProperty, Zo = Reflect.defineProperty;
  function il(n, e, t) {
    return Zo(n, e, {
      enumerable: !1,
      configurable: !0,
      writable: !0,
      value: t
    }), t;
  }
  function tc(n, e, t) {
    e in n || il(n, e, t);
  }
  const ez = Object.assign, RO = Object.freeze, Ud = String, HR = pf.createInterface, Iee = Pc.get, Oee = Pc.define, Je = (n, ...e) => new Error(`AUR${Ud(n).padStart(4, "0")}: ${Dee(n, ...e)}`), kee = {
    99: "Method {{0}} not implemented",
    101: 'Ast eval error: binding behavior "{{0}}" could not be found. Did you forget to register it as a dependency?',
    102: 'Ast eval error: binding behavior "{{0}}" already applied.',
    103: 'Ast eval error: value converter "{{0}}" could not be found. Did you forget to register it as a dependency?',
    105: "Ast eval error: unable to find $host context. Did you forget [au-slot] attribute?",
    106: 'Ast eval error: invalid assignment. "$host" is a reserved keyword.',
    107: "Ast eval error: expression is not a function.",
    109: 'Ast eval error: unknown unary operator: "{{0}}"',
    108: 'Ast eval error: unknown binary operator: "{{0}}"',
    110: "Ast eval error: left-hand side of tagged template expression is not a function.",
    111: 'Ast eval error: expected "{{0}}" to be a function',
    112: "Ast eval error: cannot use non-object value for destructuring assignment.",
    113: "Ast eval error: infinite loop detected. Increment operators should only be used in event handlers.",
    114: 'Ast eval error: cannot access property "{{0}}" of {{1}}.',
    115: 'Ast eval error: cannot access key "{{0}}" of {{1}}.',
    116: 'Ast eval error: cannot assign value to property "{{0}}" of null/undefined.',
    151: 'Expression error: invalid start: "{{0}}"',
    152: 'Expression error: spread operator is not supported: "{{0}}"',
    153: 'Expression error: expected identifier: "{{0}}"',
    154: 'Expression error: invalid member expression: "{{0}}"',
    155: 'Expression error: unexpected end of expression: "{{0}}"',
    156: 'Expression error: unconsumed token: "{{0}}" at position {{1}} of "{{2}}"',
    157: "Expression error: invalid empty expression. Empty expression is only valid in event bindings (trigger, delegate, capture etc...)",
    158: 'Expression error: left hand side of expression is not assignable: "{{0}}"',
    159: 'Expression error: expected identifier to come after value converter operator: "{{0}}"',
    160: "Expression error: expected identifier to come after binding behavior operator: {{0}}",
    161: 'Expression error: unexpected keyword "of": "{{0}}"',
    162: 'Expression error: unexpected keyword "import": "{{0}}"',
    163: 'Expression error: invalid BindingIdentifier at left hand side of "of": "{{0}}" | kind: {{1}}',
    164: 'Expression error: invalid or unsupported property definition in object literal: "{{0}}"',
    165: 'Expression error: unterminated quote in string literal: "{{0}}"',
    166: 'Expression error: unterminated template string: "{{0}}"',
    167: 'Expression error: missing expected token "{{0}}" in "{{1}}"',
    168: 'Expression error: unexpected character: "{{0}}"',
    170: 'Expression error: unexpected "{{0}}" at position "{{1}}" for destructuring assignment in "{{2}}"',
    171: 'Expression error: unexpected {{0}} at position "{{1}}" for optional chain in "{{2}}"',
    172: 'Expression error: invalid tagged template on optional chain in "{{1}}"',
    173: 'Expression error: invalid arrow parameter list in "{{0}}"',
    174: 'Expression error: arrow function with default parameters is not supported: "{{0}}"',
    175: 'Expression error: arrow function with destructuring parameters is not supported: "{{0}}"',
    176: 'Expression error: rest parameter must be last formal parameter in arrow function: "{{0}}"',
    178: 'Expression error: arrow function with function body is not supported: "{{0}}"',
    179: `Expression error: unexpected token '.' at position "{{1}}" in "{{0}}"`,
    199: "Trying to observe property {{0}} on null/undefined",
    203: "Trying to retrieve a property or build a scope from a null/undefined scope",
    204: "Trying to create a scope with null/undefined binding context",
    206: "Trying to switch to a null/undefined connectable",
    207: "Trying to enter an active connectable",
    208: "Trying to pop a null/undefined connectable",
    209: "Trying to exit an inactive connectable",
    210: "Unrecognised collection type {{0:toString}}.",
    217: "There is no registration for IDirtyChecker interface. If you want to use your own dirty checker, make sure you register it.",
    218: "Dirty checked is not permitted in this application. Property key {{0}} is being dirty checked.",
    219: "Trying to set value for property {{0}} in dirty checker",
    220: 'Map/Set "size" is a readonly property',
    221: 'Trying to assign value to readonly property "{{0}}" through computed observer.',
    224: "Invalid @observable decorator usage, cannot determine property name",
    225: "Trying to stop an effect that has already been stopped",
    226: "Maximum number of recursive effect run reached. Consider handle effect dependencies differently."
  }, Dee = (n, ...e) => {
    var i;
    let t = kee[n];
    for (let r = 0; r < e.length; ++r) {
      const s = new RegExp(`{{${r}(:.*)?}}`, "g");
      let o = s.exec(t);
      for (; o != null; ) {
        const a = (i = o[1]) == null ? void 0 : i.slice(1);
        let l = e[r];
        if (l != null)
          switch (a) {
            case "typeof":
              l = typeof l;
              break;
            case "toString":
              l = Object.prototype.toString.call(l);
              break;
            case "join(!=)":
              l = l.join("!=");
              break;
            case "element":
              l = l === "*" ? "all elements" : `<${l} />`;
              break;
            default:
              a != null && a.startsWith(".") ? l = Ud(l[a.slice(1)]) : l = Ud(l);
          }
        t = t.slice(0, o.index) + l + t.slice(s.lastIndex), o = s.exec(t);
      }
    }
    return t;
  };
  class fi {
    constructor(e, t, i, r) {
      this.parent = e, this.bindingContext = t, this.overrideContext = i, this.isBoundary = r;
    }
    static getContext(e, t, i) {
      if (e == null)
        throw Je(
          203
          /* ErrorNames.null_scope */
        );
      let r = e.overrideContext, s = e;
      if (i > 0) {
        for (; i > 0; )
          if (i--, s = s.parent, s == null)
            return;
        return r = s.overrideContext, t in r ? r : s.bindingContext;
      }
      for (; s != null && !s.isBoundary && !(t in s.overrideContext) && !(t in s.bindingContext); )
        s = s.parent;
      return s == null ? e.bindingContext : (r = s.overrideContext, t in r ? r : s.bindingContext);
    }
    static create(e, t, i) {
      if (e == null)
        throw Je(
          204
          /* ErrorNames.create_scope_with_null_context */
        );
      return new fi(null, e, t ?? new I$(), i ?? !1);
    }
    static fromParent(e, t, i = new I$()) {
      if (e == null)
        throw Je(
          203
          /* ErrorNames.null_scope */
        );
      return new fi(e, t, i, !1);
    }
  }
  class P$ {
    constructor(e, t) {
      e !== void 0 && (this[e] = t);
    }
  }
  class I$ {
  }
  const { astAssign: Qv, astEvaluate: kn, astBind: eh, astUnbind: th } = /* @__PURE__ */ (() => {
    const n = "AccessThis", e = "AccessBoundary", t = "AccessGlobal", i = "AccessScope", r = "ArrayLiteral", s = "ObjectLiteral", o = "PrimitiveLiteral", a = "Template", l = "Unary", c = "CallScope", u = "CallMember", h = "CallFunction", d = "CallGlobal", f = "AccessMember", g = "AccessKeyed", p = "TaggedTemplate", m = "Binary", v = "Conditional", y = "Assign", w = "ArrowFunction", R = "ValueConverter", E = "BindingBehavior", C = "ArrayBindingPattern", T = "ObjectBindingPattern", P = "BindingIdentifier", x = "ForOfStatement", A = "Interpolation", D = "ArrayDestructuring", B = "ObjectDestructuring", F = "DestructuringAssignmentLeaf", W = "Custom", N = fi.getContext;
    function O(b, S, _, I) {
      var H;
      switch (b.$kind) {
        case n: {
          let M = S.overrideContext, $ = S, Y = b.ancestor;
          for (; Y-- && M; )
            $ = $.parent, M = ($ == null ? void 0 : $.overrideContext) ?? null;
          return Y < 1 && $ ? $.bindingContext : void 0;
        }
        case e: {
          let M = S;
          for (; M != null && !M.isBoundary; )
            M = M.parent;
          return M ? M.bindingContext : void 0;
        }
        case i: {
          const M = N(S, b.name, b.ancestor);
          I !== null && I.observe(M, b.name);
          const $ = M[b.name];
          if ($ == null) {
            if (b.name === "$host")
              throw Je(
                105
                /* ErrorNames.ast_$host_not_found */
              );
            return $;
          }
          return _ != null && _.boundFn && jt($) ? $.bind(M) : $;
        }
        case t:
          return globalThis[b.name];
        case d: {
          const M = globalThis[b.name];
          if (jt(M))
            return M(...b.args.map(($) => O($, S, _, I)));
          if (!(_ != null && _.strict) && M == null)
            return;
          throw Je(
            107
            /* ErrorNames.ast_not_a_function */
          );
        }
        case r:
          return b.elements.map((M) => O(M, S, _, I));
        case s: {
          const M = {};
          for (let $ = 0; $ < b.keys.length; ++$)
            M[b.keys[$]] = O(b.values[$], S, _, I);
          return M;
        }
        case o:
          return b.value;
        case a: {
          let M = b.cooked[0];
          for (let $ = 0; $ < b.expressions.length; ++$)
            M += Ud(O(b.expressions[$], S, _, I)), M += b.cooked[$ + 1];
          return M;
        }
        case l: {
          const M = O(b.expression, S, _, I);
          switch (b.operation) {
            case "void":
              return;
            case "typeof":
              return typeof M;
            case "!":
              return !M;
            case "-":
              return -M;
            case "+":
              return +M;
            case "--":
              if (I != null)
                throw Je(
                  113
                  /* ErrorNames.ast_increment_infinite_loop */
                );
              return V(b.expression, S, _, M - 1) + b.pos;
            case "++":
              if (I != null)
                throw Je(
                  113
                  /* ErrorNames.ast_increment_infinite_loop */
                );
              return V(b.expression, S, _, M + 1) - b.pos;
            default:
              throw Je(109, b.operation);
          }
        }
        case c: {
          const M = N(S, b.name, b.ancestor);
          if (M == null) {
            if (_ != null && _.strict)
              throw Je(114, b.name, M);
            return;
          }
          const $ = M[b.name];
          if (jt($))
            return $.apply(M, b.args.map((Y) => O(Y, S, _, I)));
          if ($ == null) {
            if (_ != null && _.strict && !b.optional)
              throw Je(111, b.name);
            return;
          }
          throw Je(111, b.name);
        }
        case u: {
          const M = O(b.object, S, _, I);
          if (M == null && _ != null && _.strict && !b.optionalMember)
            throw Je(114, b.name, M);
          const $ = M == null ? void 0 : M[b.name];
          if ($ == null) {
            if (!b.optionalCall && (_ != null && _.strict))
              throw Je(111, b.name);
            return;
          }
          if (!jt($))
            throw Je(111, b.name);
          const Y = $.apply(M, b.args.map((K) => O(K, S, _, I)));
          return oi(M) && se.includes(b.name) && (I == null || I.observeCollection(M)), Y;
        }
        case h: {
          const M = O(b.func, S, _, I);
          if (jt(M))
            return M(...b.args.map(($) => O($, S, _, I)));
          if (M == null) {
            if (!b.optional && (_ != null && _.strict))
              throw Je(
                107
                /* ErrorNames.ast_not_a_function */
              );
            return;
          }
          throw Je(
            107
            /* ErrorNames.ast_not_a_function */
          );
        }
        case w:
          return (...$) => {
            const Y = b.args, K = b.rest, ce = Y.length - 1, le = Y.reduce((be, Z, ee) => (K && ee === ce ? be[Z.name] = $.slice(ee) : be[Z.name] = $[ee], be), {}), _e = fi.fromParent(S, le);
            return O(b.body, _e, _, I);
          };
        case f: {
          const M = O(b.object, S, _, I);
          if (M == null) {
            if (!b.optional && (_ != null && _.strict))
              throw Je(114, b.name, M);
            return;
          }
          I !== null && !b.accessGlobal && I.observe(M, b.name);
          const $ = M[b.name];
          return _ != null && _.boundFn && jt($) ? $.bind(M) : $;
        }
        case g: {
          const M = O(b.object, S, _, I), $ = O(b.key, S, _, I);
          if (M == null) {
            if (!b.optional && (_ != null && _.strict))
              throw Je(115, $, M);
            return;
          }
          return I !== null && !b.accessGlobal && I.observe(M, $), M[$];
        }
        case p: {
          const M = b.expressions.map((Y) => O(Y, S, _, I)), $ = O(b.func, S, _, I);
          if (!jt($))
            throw Je(
              110
              /* ErrorNames.ast_tagged_not_a_function */
            );
          return $(b.cooked, ...M);
        }
        case m: {
          const M = b.left, $ = b.right;
          switch (b.operation) {
            case "&&":
              return O(M, S, _, I) && O($, S, _, I);
            case "||":
              return O(M, S, _, I) || O($, S, _, I);
            case "??":
              return O(M, S, _, I) ?? O($, S, _, I);
            case "==":
              return O(M, S, _, I) == O($, S, _, I);
            case "===":
              return O(M, S, _, I) === O($, S, _, I);
            case "!=":
              return O(M, S, _, I) != O($, S, _, I);
            case "!==":
              return O(M, S, _, I) !== O($, S, _, I);
            case "instanceof": {
              const Y = O($, S, _, I);
              return jt(Y) ? O(M, S, _, I) instanceof Y : !1;
            }
            case "in": {
              const Y = O($, S, _, I);
              return US(Y) ? O(M, S, _, I) in Y : !1;
            }
            case "+":
              return O(M, S, _, I) + O($, S, _, I);
            case "-":
              return O(M, S, _, I) - O($, S, _, I);
            case "*":
              return O(M, S, _, I) * O($, S, _, I);
            case "/":
              return O(M, S, _, I) / O($, S, _, I);
            case "%":
              return O(M, S, _, I) % O($, S, _, I);
            case "<":
              return O(M, S, _, I) < O($, S, _, I);
            case ">":
              return O(M, S, _, I) > O($, S, _, I);
            case "<=":
              return O(M, S, _, I) <= O($, S, _, I);
            case ">=":
              return O(M, S, _, I) >= O($, S, _, I);
            default:
              throw Je(108, b.operation);
          }
        }
        case v:
          return O(b.condition, S, _, I) ? O(b.yes, S, _, I) : O(b.no, S, _, I);
        case y: {
          let M = O(b.value, S, _, I);
          if (b.op !== "=") {
            if (I != null)
              throw Je(
                113
                /* ErrorNames.ast_increment_infinite_loop */
              );
            const $ = O(b.target, S, _, I);
            switch (b.op) {
              case "/=":
                M = $ / M;
                break;
              case "*=":
                M = $ * M;
                break;
              case "+=":
                M = $ + M;
                break;
              case "-=":
                M = $ - M;
                break;
              default:
                throw Je(108, b.op);
            }
          }
          return V(b.target, S, _, M);
        }
        case R:
          return (H = _ == null ? void 0 : _.useConverter) == null ? void 0 : H.call(_, b.name, "toView", O(b.expression, S, _, I), b.args.map((M) => O(M, S, _, I)));
        case E:
          return O(b.expression, S, _, I);
        case P:
          return b.name;
        case x:
          return O(b.iterable, S, _, I);
        case A:
          if (b.isMulti) {
            let M = b.parts[0], $ = 0;
            for (; $ < b.expressions.length; ++$)
              M += Ud(O(b.expressions[$], S, _, I)), M += b.parts[$ + 1];
            return M;
          } else
            return `${b.parts[0]}${O(b.firstExpression, S, _, I)}${b.parts[1]}`;
        case F:
          return O(b.target, S, _, I);
        case D:
          return b.list.map((M) => O(M, S, _, I));
        case C:
        case T:
        case B:
        default:
          return;
        case W:
          return b.evaluate(S, _, I);
      }
    }
    function V(b, S, _, I) {
      var H;
      switch (b.$kind) {
        case i: {
          if (b.name === "$host")
            throw Je(
              106
              /* ErrorNames.ast_no_assign_$host */
            );
          const M = N(S, b.name, b.ancestor);
          return M[b.name] = I;
        }
        case f: {
          const M = O(b.object, S, _, null);
          if (M == null) {
            if (_ != null && _.strict)
              throw Je(116, b.name);
            V(b.object, S, _, { [b.name]: I });
          } else US(M) && (b.name === "length" && oi(M) && !isNaN(I) ? M.splice(I) : M[b.name] = I);
          return I;
        }
        case g: {
          const M = O(b.object, S, _, null), $ = O(b.key, S, _, null);
          if (M == null) {
            if (_ != null && _.strict)
              throw Je(116, $);
            return V(b.object, S, _, { [$]: I }), I;
          }
          if (oi(M)) {
            if ($ === "length" && !isNaN(I))
              return M.splice(I), I;
            if (Kv($))
              return M.splice($, 1, I), I;
          }
          return M[$] = I;
        }
        case y:
          return V(b.value, S, _, I), V(b.target, S, _, I);
        case R:
          return I = (H = _ == null ? void 0 : _.useConverter) == null ? void 0 : H.call(_, b.name, "fromView", I, b.args.map((M) => O(M, S, _, null))), V(b.expression, S, _, I);
        case E:
          return V(b.expression, S, _, I);
        case D:
        case B: {
          const M = b.list, $ = M.length;
          let Y, K;
          for (Y = 0; Y < $; Y++)
            switch (K = M[Y], K.$kind) {
              case F:
                V(K, S, _, I);
                break;
              case D:
              case B: {
                if (typeof I != "object" || I === null)
                  throw Je(
                    112
                    /* ErrorNames.ast_destruct_null */
                  );
                let ce = O(K.source, fi.create(I), _, null);
                ce === void 0 && K.initializer && (ce = O(K.initializer, S, _, null)), V(K, S, _, ce);
                break;
              }
            }
          break;
        }
        case F: {
          if (b instanceof n5) {
            if (I == null)
              return;
            if (typeof I != "object")
              throw Je(
                112
                /* ErrorNames.ast_destruct_null */
              );
            let M = O(b.source, fi.create(I), _, null);
            M === void 0 && b.initializer && (M = O(b.initializer, S, _, null)), V(b.target, S, _, M);
          } else {
            if (I == null)
              return;
            if (typeof I != "object")
              throw Je(
                112
                /* ErrorNames.ast_destruct_null */
              );
            const M = b.indexOrProperties;
            let $;
            if (Kv(M)) {
              if (!Array.isArray(I))
                throw Je(
                  112
                  /* ErrorNames.ast_destruct_null */
                );
              $ = I.slice(M);
            } else
              $ = Object.entries(I).reduce((Y, [K, ce]) => (M.includes(K) || (Y[K] = ce), Y), {});
            V(b.target, S, _, $);
          }
          break;
        }
        case W:
          return b.assign(S, _, I);
        default:
          return;
      }
    }
    function G(b, S, _) {
      var I, H, M;
      switch (b.$kind) {
        case E: {
          (I = _.bindBehavior) == null || I.call(_, b.name, S, b.args.map(($) => O($, S, _, null))), G(b.expression, S, _);
          break;
        }
        case R: {
          (H = _.bindConverter) == null || H.call(_, b.name), G(b.expression, S, _);
          break;
        }
        case x: {
          G(b.iterable, S, _);
          break;
        }
        case W:
          (M = b.bind) == null || M.call(b, S, _);
      }
    }
    function U(b, S, _) {
      var I, H, M;
      switch (b.$kind) {
        case E: {
          (I = _.unbindBehavior) == null || I.call(_, b.name, S), U(b.expression, S, _);
          break;
        }
        case R: {
          (H = _.unbindConverter) == null || H.call(_, b.name), U(b.expression, S, _);
          break;
        }
        case x: {
          U(b.iterable, S, _);
          break;
        }
        case W:
          (M = b.unbind) == null || M.call(b, S, _);
      }
    }
    const se = "at map filter includes indexOf lastIndexOf findIndex find flat flatMap join reduce reduceRight slice every some sort".split(" ");
    return {
      astEvaluate: O,
      astAssign: V,
      astBind: G,
      astUnbind: U
    };
  })(), Nee = (n) => {
    const e = n.prototype;
    ["bindBehavior", "unbindBehavior", "bindConverter", "unbindConverter", "useConverter"].forEach((t) => {
      il(e, t, () => {
        throw Je(99, t);
      });
    });
  }, tz = /* @__PURE__ */ pf.createInterface("ICoercionConfiguration"), $R = 0, Oc = 1, Lee = 2, Hee = 4, EO = /* @__PURE__ */ RO({
    None: $R,
    Observer: Oc,
    Node: Lee,
    // misc characteristic of accessors/observers when update
    //
    // by default, everything is synchronous
    // except changes that are supposed to cause reflow/heavy computation
    // an observer can use this flag to signal binding that don't carelessly tell it to update
    // queue it instead
    // todo: https://gist.github.com/paulirish/5d52fb081b3570c81e3a
    // todo: https://csstriggers.com/
    Layout: Hee
  });
  function Gd(n = 0) {
    const e = Array(n);
    let t = 0;
    for (; t < n; )
      e[t] = t++;
    return e.deletedIndices = [], e.deletedItems = [], e.isIndexMap = !0, e;
  }
  let $ee = !1;
  const so = /* @__PURE__ */ (() => {
    function n(a, l) {
      return a == null ? s : s(a);
    }
    function e() {
      return il(this, "subs", new o());
    }
    function t(a) {
      return this.subs.add(a);
    }
    function i(a) {
      return this.subs.remove(a);
    }
    const r = /* @__PURE__ */ new WeakSet();
    function s(a, l) {
      if (!r.has(a)) {
        r.add(a);
        const c = a.prototype;
        Zo(c, "subs", { get: e }), tc(c, "subscribe", t), tc(c, "unsubscribe", i);
      }
      return a;
    }
    class o {
      constructor() {
        this.count = 0, this._subs = [], this._requestDirtySubs = [], this._hasDirtySubs = !1;
      }
      add(l) {
        return this._subs.includes(l) ? !1 : (this._subs[this._subs.length] = l, "handleDirty" in l && (this._requestDirtySubs[this._requestDirtySubs.length] = l, this._hasDirtySubs = !0), ++this.count, !0);
      }
      remove(l) {
        let c = this._subs.indexOf(l);
        return c !== -1 ? (this._subs.splice(c, 1), c = this._requestDirtySubs.indexOf(l), c !== -1 && (this._requestDirtySubs.splice(c, 1), this._hasDirtySubs = this._requestDirtySubs.length > 0), --this.count, !0) : !1;
      }
      notify(l, c) {
        for (const u of this._subs.slice(0))
          u.handleChange(l, c);
      }
      notifyCollection(l, c) {
        const u = this._subs.slice(0), h = u.length;
        let d = 0;
        for (; d < h; ++d)
          u[d].handleCollectionChange(l, c);
      }
      notifyDirty() {
        if (this._hasDirtySubs)
          for (const l of this._requestDirtySubs.slice(0))
            l.handleDirty();
      }
    }
    return n;
  })();
  class nz {
    constructor(e) {
      this.owner = e, this.type = Oc, this._value = (this._obj = e.collection).length;
    }
    getValue() {
      return this._obj.length;
    }
    setValue(e) {
      e !== this._value && (Number.isNaN(e) ? console.warn(`Invalid value "${e}" for array length`) : (this._obj.splice(e), this._value = this._obj.length));
    }
    handleDirty() {
      this._value !== this._obj.length && this.subs.notifyDirty();
    }
    handleCollectionChange(e, t) {
      const i = this._value, r = this._obj.length;
      (this._value = r) !== i && (this.subs.notifyDirty(), this.subs.notify(this._value, i));
    }
  }
  iz(nz);
  class xO {
    constructor(e) {
      this.owner = e, this.type = Oc, this._value = (this._obj = e.collection).size;
    }
    getValue() {
      return this._obj.size;
    }
    setValue() {
      throw Je(
        220
        /* ErrorNames.assign_readonly_size */
      );
    }
    handleDirty() {
      this._value !== this._obj.size && this.subs.notifyDirty();
    }
    handleCollectionChange(e, t) {
      const i = this._value, r = this._obj.size;
      (this._value = r) !== i && this.subs.notify(this._value, i);
    }
  }
  iz(xO);
  function iz(n) {
    const e = n.prototype;
    return tc(e, "subscribe", Fee), tc(e, "unsubscribe", Bee), so(n, null);
  }
  function Fee(n) {
    this.subs.add(n) && this.subs.count === 1 && this.owner.subscribe(this);
  }
  function Bee(n) {
    this.subs.remove(n) && this.subs.count === 0 && this.owner.subscribe(this);
  }
  const rv = /* @__PURE__ */ (() => {
    const n = Symbol.for("__au_arr_obs__"), e = Array[n] ?? il(Array, n, /* @__PURE__ */ new WeakMap());
    function t(p, m) {
      return p === m ? 0 : (p = p === null ? "null" : p.toString(), m = m === null ? "null" : m.toString(), p < m ? -1 : 1);
    }
    function i(p, m) {
      return p === void 0 ? m === void 0 ? 0 : 1 : m === void 0 ? -1 : 0;
    }
    function r(p, m, v, y, w) {
      let R, E, C, T, P, x, A;
      for (x = v + 1; x < y; x++) {
        for (R = p[x], E = m[x], A = x - 1; A >= v && (C = p[A], T = m[A], P = w(C, R), P > 0); A--)
          p[A + 1] = C, m[A + 1] = T;
        p[A + 1] = R, m[A + 1] = E;
      }
    }
    function s(p, m, v, y, w) {
      let R = 0, E = 0, C, T, P, x, A, D, B, F, W, N, O, V, G, U, se, b, S, _, I;
      for (; ; ) {
        if (y - v <= 10) {
          r(p, m, v, y, w);
          return;
        }
        R = v + (y - v >> 1), C = p[v], x = m[v], T = p[y - 1], A = m[y - 1], P = p[R], D = m[R], B = w(C, T), B > 0 && (N = C, O = x, C = T, x = A, T = N, A = O), F = w(C, P), F >= 0 ? (N = C, O = x, C = P, x = D, P = T, D = A, T = N, A = O) : (W = w(T, P), W > 0 && (N = T, O = A, T = P, A = D, P = N, D = O)), p[v] = C, m[v] = x, p[y - 1] = P, m[y - 1] = D, V = T, G = A, U = v + 1, se = y - 1, p[R] = p[U], m[R] = m[U], p[U] = V, m[U] = G;
        e: for (E = U + 1; E < se; E++)
          if (b = p[E], S = m[E], _ = w(b, V), _ < 0)
            p[E] = p[U], m[E] = m[U], p[U] = b, m[U] = S, U++;
          else if (_ > 0) {
            do {
              if (se--, se == E)
                break e;
              I = p[se], _ = w(I, V);
            } while (_ > 0);
            p[E] = p[se], m[E] = m[se], p[se] = b, m[se] = S, _ < 0 && (b = p[E], S = m[E], p[E] = p[U], m[E] = m[U], p[U] = b, m[U] = S, U++);
          }
        y - se < U - v ? (s(p, m, se, y, w), y = U) : (s(p, m, v, U, w), v = se);
      }
    }
    const o = Array.prototype, a = ["push", "unshift", "pop", "shift", "splice", "reverse", "sort"];
    let l;
    function c() {
      const p = o.push, m = o.unshift, v = o.pop, y = o.shift, w = o.splice, R = o.reverse, E = o.sort;
      l = {
        // https://tc39.github.io/ecma262/#sec-array.prototype.push
        push: function(...C) {
          const T = e.get(this);
          if (T === void 0)
            return p.apply(this, C);
          const P = this.length, x = C.length;
          if (x === 0)
            return P;
          this.length = T.indexMap.length = P + x;
          let A = P;
          for (; A < this.length; )
            this[A] = C[A - P], T.indexMap[A] = -2, A++;
          return T.notify(), this.length;
        },
        // https://tc39.github.io/ecma262/#sec-array.prototype.unshift
        unshift: function(...C) {
          const T = e.get(this);
          if (T === void 0)
            return m.apply(this, C);
          const P = C.length, x = new Array(P);
          let A = 0;
          for (; A < P; )
            x[A++] = -2;
          m.apply(T.indexMap, x);
          const D = m.apply(this, C);
          return T.notify(), D;
        },
        // https://tc39.github.io/ecma262/#sec-array.prototype.pop
        pop: function() {
          const C = e.get(this);
          if (C === void 0)
            return v.call(this);
          const T = C.indexMap, P = v.call(this), x = T.length - 1;
          return T[x] > -1 && (T.deletedIndices.push(T[x]), T.deletedItems.push(P)), v.call(T), C.notify(), P;
        },
        // https://tc39.github.io/ecma262/#sec-array.prototype.shift
        shift: function() {
          const C = e.get(this);
          if (C === void 0)
            return y.call(this);
          const T = C.indexMap, P = y.call(this);
          return T[0] > -1 && (T.deletedIndices.push(T[0]), T.deletedItems.push(P)), y.call(T), C.notify(), P;
        },
        // https://tc39.github.io/ecma262/#sec-array.prototype.splice
        splice: function(...C) {
          const T = C[0], P = C[1], x = e.get(this);
          if (x === void 0)
            return w.apply(this, C);
          const A = this.length, D = T | 0, B = D < 0 ? Math.max(A + D, 0) : Math.min(D, A), F = x.indexMap, W = C.length, N = W === 0 ? 0 : W === 1 ? A - B : P;
          let O = B;
          if (N > 0) {
            const G = O + N;
            for (; O < G; )
              F[O] > -1 && (F.deletedIndices.push(F[O]), F.deletedItems.push(this[O])), O++;
          }
          if (O = 0, W > 2) {
            const G = W - 2, U = new Array(G);
            for (; O < G; )
              U[O++] = -2;
            w.call(F, T, P, ...U);
          } else
            w.apply(F, C);
          const V = w.apply(this, C);
          return (N > 0 || O > 0) && x.notify(), V;
        },
        // https://tc39.github.io/ecma262/#sec-array.prototype.reverse
        reverse: function() {
          const C = e.get(this);
          if (C === void 0)
            return R.call(this), this;
          const T = this.length, P = T / 2 | 0;
          let x = 0;
          for (; x !== P; ) {
            const A = T - x - 1, D = this[x], B = C.indexMap[x], F = this[A], W = C.indexMap[A];
            this[x] = F, C.indexMap[x] = W, this[A] = D, C.indexMap[A] = B, x++;
          }
          return C.notify(), this;
        },
        // https://tc39.github.io/ecma262/#sec-array.prototype.sort
        // https://github.com/v8/v8/blob/master/src/js/array.js
        sort: function(C) {
          const T = e.get(this);
          if (T === void 0)
            return E.call(this, C), this;
          let P = this.length;
          if (P < 2)
            return this;
          s(this, T.indexMap, 0, P, i);
          let x = 0;
          for (; x < P && this[x] !== void 0; )
            x++;
          (C === void 0 || !jt(C)) && (C = t), s(this, T.indexMap, 0, x, C);
          let A = !1;
          for (x = 0, P = T.indexMap.length; P > x; ++x)
            if (T.indexMap[x] !== x) {
              A = !0;
              break;
            }
          return (A || $ee) && T.notify(), this;
        }
      };
      for (const C of a)
        Zo(l[C], "observing", { value: !0, writable: !1, configurable: !1, enumerable: !1 });
    }
    let u = !1;
    const h = "__au_arr_on__";
    function d() {
      if (l === void 0 && c(), !(Iee(h, Array) ?? !1)) {
        Oee(!0, Array, h);
        for (const p of a)
          o[p].observing !== !0 && il(o, p, l[p]);
      }
    }
    class f {
      constructor(m) {
        this.type = Oc, u || (u = !0, d()), this.indexObservers = {}, this.collection = m, this.indexMap = Gd(m.length), this.lenObs = void 0, e.set(m, this);
      }
      notify() {
        const m = this.subs;
        m.notifyDirty();
        const v = this.indexMap, y = this.collection, w = y.length;
        this.indexMap = Gd(w), m.notifyCollection(y, v);
      }
      getLengthObserver() {
        return this.lenObs ?? (this.lenObs = new nz(this));
      }
      getIndexObserver(m) {
        var v;
        return (v = this.indexObservers)[m] ?? (v[m] = new g(this, m));
      }
    }
    so(f, null);
    class g {
      constructor(m, v) {
        this.owner = m, this.index = v, this.doNotCache = !0, this.value = this.getValue();
      }
      getValue() {
        return this.owner.collection[this.index];
      }
      setValue(m) {
        if (m === this.getValue())
          return;
        const v = this.owner, y = this.index, w = v.indexMap;
        w[y] > -1 && w.deletedIndices.push(w[y]), w[y] = -2, v.collection[y] = m, v.notify();
      }
      handleDirty() {
        this.value !== this.getValue() && this.subs.notifyDirty();
      }
      /**
       * From interface `ICollectionSubscriber`
       */
      handleCollectionChange(m, v) {
        const y = this.index;
        if (v[y] === y)
          return;
        const R = this.value, E = this.value = this.getValue();
        R !== E && this.subs.notify(E, R);
      }
      subscribe(m) {
        this.subs.add(m) && this.subs.count === 1 && this.owner.subscribe(this);
      }
      unsubscribe(m) {
        this.subs.remove(m) && this.subs.count === 0 && this.owner.unsubscribe(this);
      }
    }
    return so(g, null), function(m) {
      let v = e.get(m);
      return v === void 0 && (e.set(m, v = new f(m)), d()), v;
    };
  })(), JS = /* @__PURE__ */ (() => {
    const n = Symbol.for("__au_set_obs__"), e = Set[n] ?? il(Set, n, /* @__PURE__ */ new WeakMap()), { add: t, clear: i, delete: r } = Set.prototype, s = ["add", "clear", "delete"], o = {
      // https://tc39.github.io/ecma262/#sec-set.prototype.add
      add: function(c) {
        const u = e.get(this);
        if (u === void 0)
          return t.call(this, c), this;
        const h = this.size;
        return t.call(this, c), this.size === h ? this : (u.indexMap[h] = -2, u.notify(), this);
      },
      // https://tc39.github.io/ecma262/#sec-set.prototype.clear
      clear: function() {
        const c = e.get(this);
        if (c === void 0)
          return i.call(this);
        if (this.size > 0) {
          const h = c.indexMap;
          let d = 0;
          for (const f of this.keys())
            h[d] > -1 && (h.deletedIndices.push(h[d]), h.deletedItems.push(f)), d++;
          i.call(this), h.length = 0, c.notify();
        }
      },
      // https://tc39.github.io/ecma262/#sec-set.prototype.delete
      delete: function(c) {
        const u = e.get(this);
        if (u === void 0)
          return r.call(this, c);
        if (this.size === 0)
          return !1;
        let d = 0;
        const f = u.indexMap;
        for (const g of this.keys()) {
          if (g === c) {
            f[d] > -1 && (f.deletedIndices.push(f[d]), f.deletedItems.push(g)), f.splice(d, 1);
            const p = r.call(this, c);
            return p === !0 && u.notify(), p;
          }
          d++;
        }
        return !1;
      }
    };
    function a(c) {
      for (const u of s)
        il(c, u, o[u]);
    }
    class l {
      constructor(u) {
        this.type = Oc, this.collection = u, this.indexMap = Gd(u.size), this.lenObs = void 0;
      }
      notify() {
        const u = this.subs;
        u.notifyDirty();
        const h = this.indexMap, d = this.collection, f = d.size;
        this.indexMap = Gd(f), u.notifyCollection(d, h);
      }
      getLengthObserver() {
        return this.lenObs ?? (this.lenObs = new xO(this));
      }
    }
    return so(l, null), function(u) {
      let h = e.get(u);
      return h === void 0 && (e.set(u, h = new l(u)), a(u)), h;
    };
  })(), e_ = /* @__PURE__ */ (() => {
    const n = Symbol.for("__au_map_obs__"), e = Map[n] ?? il(Map, n, /* @__PURE__ */ new WeakMap()), { set: t, clear: i, delete: r } = Map.prototype, s = ["set", "clear", "delete"], o = {
      // https://tc39.github.io/ecma262/#sec-map.prototype.map
      set: function(c, u) {
        const h = e.get(this);
        if (h === void 0)
          return t.call(this, c, u), this;
        const d = this.get(c), f = this.size;
        if (t.call(this, c, u), this.size === f) {
          let p = 0;
          for (const m of this.entries()) {
            if (m[0] === c)
              return m[1] !== d && (h.indexMap.deletedIndices.push(h.indexMap[p]), h.indexMap.deletedItems.push(m), h.indexMap[p] = -2, h.notify()), this;
            p++;
          }
          return this;
        }
        return h.indexMap[f] = -2, h.notify(), this;
      },
      // https://tc39.github.io/ecma262/#sec-map.prototype.clear
      clear: function() {
        const c = e.get(this);
        if (c === void 0)
          return i.call(this);
        if (this.size > 0) {
          const h = c.indexMap;
          let d = 0;
          for (const f of this.keys())
            h[d] > -1 && (h.deletedIndices.push(h[d]), h.deletedItems.push(f)), d++;
          i.call(this), h.length = 0, c.notify();
        }
      },
      // https://tc39.github.io/ecma262/#sec-map.prototype.delete
      delete: function(c) {
        const u = e.get(this);
        if (u === void 0)
          return r.call(this, c);
        if (this.size === 0)
          return !1;
        let d = 0;
        const f = u.indexMap;
        for (const g of this.keys()) {
          if (g === c) {
            f[d] > -1 && (f.deletedIndices.push(f[d]), f.deletedItems.push(g)), f.splice(d, 1);
            const p = r.call(this, c);
            return p === !0 && u.notify(), p;
          }
          ++d;
        }
        return !1;
      }
    };
    function a(c) {
      for (const u of s)
        il(c, u, o[u]);
    }
    class l {
      constructor(u) {
        this.type = Oc, this.collection = u, this.indexMap = Gd(u.size), this.lenObs = void 0;
      }
      notify() {
        const u = this.subs;
        u.notifyDirty();
        const h = this.indexMap, d = this.collection, f = d.size;
        this.indexMap = Gd(f), u.notifyCollection(d, h);
      }
      getLengthObserver() {
        return this.lenObs ?? (this.lenObs = new xO(this));
      }
    }
    return so(l, null), function(u) {
      let h = e.get(u);
      return h === void 0 && (e.set(u, h = new l(u)), a(u)), h;
    };
  })(), O$ = /* @__PURE__ */ (() => {
    class n {
      constructor(u) {
        this.version = 0, this.count = 0, this.o = /* @__PURE__ */ new Map(), this.b = u;
      }
      /**
       * Add, and subscribe to a given observer
       */
      add(u) {
        this.o.has(u) || (u.subscribe(this.b), ++this.count), this.o.set(u, this.version);
      }
      /**
       * Unsubscribe the observers that are not up to date with the record version
       */
      clear() {
        this.o.forEach(t, this), this.count = this.o.size;
      }
      clearAll() {
        this.o.forEach(e, this), this.o.clear(), this.count = 0;
      }
    }
    function e(c, u) {
      u.unsubscribe(this.b);
    }
    function t(c, u) {
      this.version !== c && (u.unsubscribe(this.b), this.o.delete(u));
    }
    function i() {
      return il(this, "obs", new n(this));
    }
    function r(c, u) {
      this.obs.add(this.oL.getObserver(c, u));
    }
    function s(c) {
      let u;
      if (oi(c))
        u = rv(c);
      else if (kp(c))
        u = JS(c);
      else if (ku(c))
        u = e_(c);
      else
        throw Je(210, c);
      this.obs.add(u);
    }
    function o(c) {
      this.obs.add(c);
    }
    function a() {
      throw Je(99, "handleChange");
    }
    function l() {
      throw Je(99, "handleCollectionChange");
    }
    return function(u, h) {
      const d = u.prototype;
      return tc(d, "observe", r), tc(d, "observeCollection", s), tc(d, "subscribeTo", o), Zo(d, "obs", { get: i }), tc(d, "handleChange", a), tc(d, "handleCollectionChange", l), u;
    };
  })();
  function oa(n, e) {
    return n == null ? O$ : O$(n, e);
  }
  let _t = null;
  const Ng = [];
  let _c = !1;
  function Vee() {
    _c = !1;
  }
  function Wee() {
    _c = !0;
  }
  function FR() {
    return _t;
  }
  function TO(n) {
    if (n == null)
      throw Je(
        206
        /* ErrorNames.switch_on_null_connectable */
      );
    if (_t == null) {
      _t = n, Ng[0] = _t, _c = !0;
      return;
    }
    if (_t === n)
      throw Je(
        207
        /* ErrorNames.switch_active_connectable */
      );
    Ng.push(n), _t = n, _c = !0;
  }
  function MO(n) {
    if (n == null)
      throw Je(
        208
        /* ErrorNames.switch_off_null_connectable */
      );
    if (_t !== n)
      throw Je(
        209
        /* ErrorNames.switch_off_inactive_connectable */
      );
    Ng.pop(), _t = Ng.length > 0 ? Ng[Ng.length - 1] : null, _c = _t != null;
  }
  const jee = /* @__PURE__ */ RO({
    get current() {
      return _t;
    },
    get connecting() {
      return _c;
    },
    enter: TO,
    exit: MO,
    pause: Vee,
    resume: Wee
  }), mp = Reflect.get, zee = Object.prototype.toString, OA = /* @__PURE__ */ new WeakMap(), Uee = "__au_nw__", Gee = "__au_nw";
  function rz(n) {
    switch (zee.call(n)) {
      case "[object Object]":
        return n.constructor[Uee] !== !0;
      case "[object Array]":
      case "[object Map]":
      case "[object Set]":
        return !0;
      default:
        return !1;
    }
  }
  const Fp = "__raw__";
  function Ct(n) {
    return rz(n) ? BR(n) : n;
  }
  function BR(n) {
    return OA.get(n) ?? Yee(n);
  }
  function Ht(n) {
    return n[Fp] ?? n;
  }
  function Ir(n) {
    return rz(n) && n[Fp] || n;
  }
  function AO(n, e) {
    return e === "constructor" || e === "__proto__" || e === "$observers" || e === Symbol.toPrimitive || e === Symbol.toStringTag || n.constructor[`${Gee}_${Ud(e)}__`] === !0;
  }
  function Yee(n) {
    const e = oi(n) ? qee : ku(n) || kp(n) ? vte : Kee, t = new Proxy(n, e);
    return OA.set(n, t), OA.set(t, t), t;
  }
  const Kee = {
    get(n, e, t) {
      if (e === Fp)
        return n;
      const i = FR();
      return !_c || AO(n, e) || i == null ? mp(n, e, t) : (i.observe(n, e), Ct(mp(n, e, t)));
    }
  }, qee = {
    get(n, e, t) {
      if (e === Fp)
        return n;
      if (!_c || AO(n, e) || _t == null)
        return mp(n, e, t);
      switch (e) {
        case "length":
          return _t.observe(n, "length"), n.length;
        case "map":
          return Xee;
        case "includes":
          return Jee;
        case "indexOf":
          return ete;
        case "lastIndexOf":
          return tte;
        case "every":
          return Zee;
        case "filter":
          return Qee;
        case "find":
          return ite;
        case "findIndex":
          return nte;
        case "flat":
          return rte;
        case "flatMap":
          return ste;
        case "join":
          return ote;
        case "push":
          return lte;
        case "pop":
          return ate;
        case "reduce":
          return mte;
        case "reduceRight":
          return bte;
        case "reverse":
          return dte;
        case "shift":
          return cte;
        case "unshift":
          return ute;
        case "slice":
          return pte;
        case "splice":
          return hte;
        case "some":
          return fte;
        case "sort":
          return gte;
        case "keys":
          return sz;
        case "values":
        case Symbol.iterator:
          return kA;
        case "entries":
          return DA;
      }
      return _t.observe(n, e), Ct(mp(n, e, t));
    },
    // for (let i in array) ...
    ownKeys(n) {
      var e;
      return (e = FR()) == null || e.observe(n, "length"), Reflect.ownKeys(n);
    }
  };
  function Xee(n, e) {
    const t = Ht(this), i = t.map((r, s) => (
      // do we wrap `thisArg`?
      Ir(n.call(e, Ct(r), s, this))
    ));
    return jn(_t, t), Ct(i);
  }
  function Zee(n, e) {
    const t = Ht(this), i = t.every((r, s) => n.call(e, Ct(r), s, this));
    return jn(_t, t), i;
  }
  function Qee(n, e) {
    const t = Ht(this), i = t.filter((r, s) => (
      // do we wrap `thisArg`?
      Ir(n.call(e, Ct(r), s, this))
    ));
    return jn(_t, t), Ct(i);
  }
  function Jee(n) {
    const e = Ht(this), t = e.includes(Ir(n));
    return jn(_t, e), t;
  }
  function ete(n) {
    const e = Ht(this), t = e.indexOf(Ir(n));
    return jn(_t, e), t;
  }
  function tte(n) {
    const e = Ht(this), t = e.lastIndexOf(Ir(n));
    return jn(_t, e), t;
  }
  function nte(n, e) {
    const t = Ht(this), i = t.findIndex((r, s) => Ir(n.call(e, Ct(r), s, this)));
    return jn(_t, t), i;
  }
  function ite(n, e) {
    const t = Ht(this), i = t.find((r, s) => n(Ct(r), s, this), e);
    return jn(_t, t), Ct(i);
  }
  function rte() {
    const n = Ht(this);
    return jn(_t, n), Ct(n.flat());
  }
  function ste(n, e) {
    const t = Ht(this);
    return jn(_t, t), BR(t.flatMap((i, r) => Ct(n.call(e, Ct(i), r, this))));
  }
  function ote(n) {
    const e = Ht(this);
    return jn(_t, e), e.join(n);
  }
  function ate() {
    return Ct(Ht(this).pop());
  }
  function lte(...n) {
    return Ht(this).push(...n);
  }
  function cte() {
    return Ct(Ht(this).shift());
  }
  function ute(...n) {
    return Ht(this).unshift(...n);
  }
  function hte(...n) {
    return Ct(Ht(this).splice(...n));
  }
  function dte(...n) {
    const e = Ht(this), t = e.reverse();
    return jn(_t, e), Ct(t);
  }
  function fte(n, e) {
    const t = Ht(this), i = t.some((r, s) => Ir(n.call(e, Ct(r), s, this)));
    return jn(_t, t), i;
  }
  function gte(n) {
    const e = Ht(this), t = e.sort(n);
    return jn(_t, e), Ct(t);
  }
  function pte(n, e) {
    const t = Ht(this);
    return jn(_t, t), BR(t.slice(n, e));
  }
  function mte(n, e) {
    const t = Ht(this), i = t.reduce((r, s, o) => n(r, Ct(s), o, this), e);
    return jn(_t, t), Ct(i);
  }
  function bte(n, e) {
    const t = Ht(this), i = t.reduceRight((r, s, o) => n(r, Ct(s), o, this), e);
    return jn(_t, t), Ct(i);
  }
  const vte = {
    get(n, e, t) {
      if (e === Fp)
        return n;
      const i = FR();
      if (!_c || AO(n, e) || i == null)
        return mp(n, e, t);
      switch (e) {
        case "size":
          return i.observe(n, "size"), n.size;
        case "clear":
          return Rte;
        case "delete":
          return Ete;
        case "forEach":
          return wte;
        case "add":
          if (kp(n))
            return _te;
          break;
        case "get":
          if (ku(n))
            return Cte;
          break;
        case "set":
          if (ku(n))
            return Ste;
          break;
        case "has":
          return yte;
        case "keys":
          return sz;
        case "values":
          return kA;
        case "entries":
          return DA;
        case Symbol.iterator:
          return ku(n) ? DA : kA;
      }
      return Ct(mp(n, e, t));
    }
  };
  function wte(n, e) {
    const t = Ht(this);
    return jn(_t, t), t.forEach((i, r) => {
      n.call(
        /* should wrap or not?? */
        e,
        Ct(i),
        Ct(r),
        this
      );
    });
  }
  function yte(n) {
    const e = Ht(this);
    return jn(_t, e), e.has(Ir(n));
  }
  function Cte(n) {
    const e = Ht(this);
    return jn(_t, e), Ct(e.get(Ir(n)));
  }
  function Ste(n, e) {
    return Ct(Ht(this).set(Ir(n), Ir(e)));
  }
  function _te(n) {
    return Ct(Ht(this).add(Ir(n)));
  }
  function Rte() {
    return Ct(Ht(this).clear());
  }
  function Ete(n) {
    return Ct(Ht(this).delete(Ir(n)));
  }
  function sz() {
    const n = Ht(this);
    jn(_t, n);
    const e = n.keys();
    return {
      next() {
        const t = e.next(), i = t.value, r = t.done;
        return r ? { value: void 0, done: r } : { value: Ct(i), done: r };
      },
      [Symbol.iterator]() {
        return this;
      }
    };
  }
  function kA() {
    const n = Ht(this);
    jn(_t, n);
    const e = n.values();
    return {
      next() {
        const t = e.next(), i = t.value, r = t.done;
        return r ? { value: void 0, done: r } : { value: Ct(i), done: r };
      },
      [Symbol.iterator]() {
        return this;
      }
    };
  }
  function DA() {
    const n = Ht(this);
    jn(_t, n);
    const e = n.entries();
    return {
      next() {
        const t = e.next(), i = t.value, r = t.done;
        return r ? { value: void 0, done: r } : { value: [Ct(i[0]), Ct(i[1])], done: r };
      },
      [Symbol.iterator]() {
        return this;
      }
    };
  }
  const jn = (n, e) => n == null ? void 0 : n.observeCollection(e), xte = /* @__PURE__ */ RO({
    getProxy: BR,
    getRaw: Ht,
    wrap: Ct,
    unwrap: Ir,
    rawKey: Fp
  });
  class t_ {
    constructor(e, t, i, r, s) {
      this.type = Oc, this._value = void 0, this._isRunning = !1, this._isDirty = !1, this._callback = void 0, this._coercer = void 0, this._coercionConfig = void 0, this._obj = e, this._wrapped = s ? Ct(e) : e, this.$get = t, this.$set = i, this.oL = r;
    }
    init(e) {
      this._value = e, this._isDirty = !1;
    }
    getValue() {
      return this.subs.count === 0 ? this.$get.call(this._obj, this._obj, this) : (this._isDirty && (this.compute(), this._isDirty = !1), this._value);
    }
    // deepscan-disable-next-line
    setValue(e) {
      if (jt(this.$set))
        this._coercer !== void 0 && (e = this._coercer.call(null, e, this._coercionConfig)), ea(e, this._value) || (this._isRunning = !0, this.$set.call(this._obj, e), this._isRunning = !1, this.run());
      else
        throw Je(
          221
          /* ErrorNames.assign_readonly_readonly_property_from_computed */
        );
    }
    useCoercer(e, t) {
      return this._coercer = e, this._coercionConfig = t, !0;
    }
    useCallback(e) {
      return this._callback = e, !0;
    }
    handleDirty() {
      this._isDirty || (this._isDirty = !0, this.subs.notifyDirty());
    }
    handleChange() {
      this._isDirty = !0, this.subs.count > 0 && this.run();
    }
    handleCollectionChange() {
      this._isDirty = !0, this.subs.count > 0 && this.run();
    }
    subscribe(e) {
      this.subs.add(e) && this.subs.count === 1 && (this.compute(), this._isDirty = !1);
    }
    unsubscribe(e) {
      this.subs.remove(e) && this.subs.count === 0 && (this._isDirty = !0, this.obs.clearAll());
    }
    run() {
      var i;
      if (this._isRunning)
        return;
      const e = this._value, t = this.compute();
      this._isDirty = !1, ea(t, e) || ((i = this._callback) == null || i.call(this, t, e), this.subs.notify(this._value, e));
    }
    compute() {
      this._isRunning = !0, this.obs.version++;
      try {
        return TO(this), this._value = Ir(this.$get.call(this._wrapped, this._wrapped, this));
      } finally {
        this.obs.clear(), this._isRunning = !1, MO(this);
      }
    }
  }
  oa(t_, null), so(t_, null);
  const PO = /* @__PURE__ */ HR(
    "IDirtyChecker",
    (n) => n.callback(() => {
      throw Je(
        217
        /* ErrorNames.dirty_check_no_handler */
      );
    })
  ), Tte = {
    /**
     * Default: `6`
     *
     * Adjust the global dirty check frequency.
     * Measures in "timeouts per check", such that (given a default of 250 timeouts per second in modern browsers):
     * - A value of 1 will result in 250 dirty checks per second (or 1 dirty check per second for an inactive tab)
     * - A value of 25 will result in 10 dirty checks per second (or 1 dirty check per 25 seconds for an inactive tab)
     */
    timeoutsPerCheck: 25,
    /**
     * Default: `false`
     *
     * Disable dirty-checking entirely. Properties that cannot be observed without dirty checking
     * or an adapter, will simply not be observed.
     */
    disabled: !1,
    /**
     * Default: `false`
     *
     * Throw an error if a property is being dirty-checked.
     */
    throw: !1,
    /**
     * Resets all dirty checking settings to the framework's defaults.
     */
    resetToDefault() {
      this.timeoutsPerCheck = 6, this.disabled = !1, this.throw = !1;
    }
  };
  class Mte {
    static register(e) {
      e.register(Vd.singleton(this, this), Vd.aliasTo(this, PO));
    }
    constructor() {
      this.tracked = [], this._task = null, this._elapsedFrames = 0, this.p = ge(Np), this.check = () => {
        if (++this._elapsedFrames < Tte.timeoutsPerCheck)
          return;
        this._elapsedFrames = 0;
        const e = this.tracked, t = e.length;
        let i, r = 0;
        for (; r < t; ++r)
          i = e[r], i.isDirty() && i.flush();
      }, so(k$, null);
    }
    createProperty(e, t) {
      return new k$(this, e, t);
    }
    addProperty(e) {
      this.tracked.push(e), this.tracked.length === 1 && (this._task = this.p.taskQueue.queueTask(this.check, { persistent: !0 }));
    }
    removeProperty(e) {
      this.tracked.splice(this.tracked.indexOf(e), 1), this.tracked.length === 0 && (this._task.cancel(), this._task = null);
    }
  }
  class k$ {
    constructor(e, t, i) {
      this.obj = t, this.key = i, this.type = $R, this._oldValue = void 0, this._dirtyChecker = e;
    }
    getValue() {
      return this.obj[this.key];
    }
    setValue(e) {
      throw Je(219, this.key);
    }
    isDirty() {
      return this._oldValue !== this.obj[this.key];
    }
    flush() {
      const e = this._oldValue, t = this.getValue();
      this._oldValue = t, this.subs.notify(t, e);
    }
    subscribe(e) {
      this.subs.add(e) && this.subs.count === 1 && (this._oldValue = this.obj[this.key], this._dirtyChecker.addProperty(this));
    }
    unsubscribe(e) {
      this.subs.remove(e) && this.subs.count === 0 && this._dirtyChecker.removeProperty(this);
    }
  }
  class Ate {
    get doNotCache() {
      return !0;
    }
    constructor(e, t) {
      this.type = $R, this._obj = e, this._key = t;
    }
    getValue() {
      return this._obj[this._key];
    }
    setValue() {
    }
    subscribe() {
    }
    unsubscribe() {
    }
  }
  class oz {
    constructor() {
      this.type = $R;
    }
    getValue(e, t) {
      return e[t];
    }
    setValue(e, t, i) {
      t[i] = e;
    }
  }
  class IO {
    constructor(e, t) {
      this.type = Oc, this._value = void 0, this._observing = !1, this._callback = void 0, this._coercer = void 0, this._coercionConfig = void 0, this._obj = e, this._key = t;
    }
    getValue() {
      return this._value;
    }
    setValue(e) {
      var t, i;
      if (this._coercer !== void 0 && (e = this._coercer.call(void 0, e, this._coercionConfig)), this._observing) {
        if (ea(e, this._value))
          return;
        Iy = this._value, this._value = e, this.subs.notifyDirty(), this.subs.notify(e, Iy), ea(e, this._value) && ((t = this._callback) == null || t.call(this, e, Iy));
      } else
        this._value = this._obj[this._key] = e, (i = this._callback) == null || i.call(this, e, Iy);
    }
    useCallback(e) {
      return this._callback = e, this.start(), !0;
    }
    useCoercer(e, t) {
      return this._coercer = e, this._coercionConfig = t, this.start(), !0;
    }
    subscribe(e) {
      this._observing === !1 && this.start(), this.subs.add(e);
    }
    start() {
      return this._observing === !1 && (this._observing = !0, this._value = this._obj[this._key], Zo(this._obj, this._key, {
        enumerable: !0,
        configurable: !0,
        get: ez(() => this.getValue(), { getObserver: () => this }),
        set: (e) => {
          this.setValue(e);
        }
      })), this;
    }
    stop() {
      return this._observing && (Zo(this._obj, this._key, {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: this._value
      }), this._observing = !1), this;
    }
  }
  so(IO, null);
  let Iy;
  const NA = new oz(), Bp = /* @__PURE__ */ HR("IObserverLocator", (n) => n.singleton(Ote)), OO = /* @__PURE__ */ HR("INodeObserverLocator", (n) => n.cachedCallback((e) => (e.getAll(Wd).forEach((t) => {
    t.error("Using default INodeObserverLocator implementation. Will not be able to observe nodes (HTML etc...).");
  }), new Pte())));
  class Pte {
    handles() {
      return !1;
    }
    getObserver() {
      return NA;
    }
    getAccessor() {
      return NA;
    }
  }
  const Ite = /* @__PURE__ */ HR("IComputedObserverLocator", (n) => n.singleton(class {
    getObserver(t, i, r, s) {
      const o = new t_(t, r.get, r.set, s, !0);
      return Zo(t, i, {
        enumerable: r.enumerable,
        configurable: !0,
        get: ez(() => o.getValue(), { getObserver: () => o }),
        set: (a) => {
          o.setValue(a);
        }
      }), o;
    }
  }));
  class Ote {
    constructor() {
      this._adapters = [], this._dirtyChecker = ge(PO), this._nodeObserverLocator = ge(OO), this._computedObserverLocator = ge(Ite);
    }
    addAdapter(e) {
      this._adapters.push(e);
    }
    getObserver(e, t) {
      if (e == null)
        throw Je(199, t);
      if (!k6(e))
        return new Ate(e, jt(t) ? "" : t);
      if (jt(t))
        return new t_(e, t, void 0, this, !0);
      const i = az(e);
      let r = i[t];
      return r === void 0 && (r = this.createObserver(e, t), r.doNotCache || (i[t] = r)), r;
    }
    getAccessor(e, t) {
      var r;
      const i = (r = e.$observers) == null ? void 0 : r[t];
      return i !== void 0 ? i : this._nodeObserverLocator.handles(e, t, this) ? this._nodeObserverLocator.getAccessor(e, t, this) : NA;
    }
    getArrayObserver(e) {
      return rv(e);
    }
    getMapObserver(e) {
      return e_(e);
    }
    getSetObserver(e) {
      return JS(e);
    }
    createObserver(e, t) {
      var r, s;
      if (this._nodeObserverLocator.handles(e, t, this))
        return this._nodeObserverLocator.getObserver(e, t, this);
      switch (t) {
        case "length":
          if (oi(e))
            return rv(e).getLengthObserver();
          break;
        case "size":
          if (ku(e))
            return e_(e).getLengthObserver();
          if (kp(e))
            return JS(e).getLengthObserver();
          break;
        default:
          if (oi(e) && Kv(t))
            return rv(e).getIndexObserver(Number(t));
          break;
      }
      let i = N$(e, t);
      if (i === void 0) {
        let o = D$(e);
        for (; o !== null && (i = N$(o, t), i === void 0); )
          o = D$(o);
      }
      if (i !== void 0 && !Pee.call(i, "value")) {
        let o = this._getAdapterObserver(e, t, i);
        return o == null && (o = (s = (r = i.get) == null ? void 0 : r.getObserver) == null ? void 0 : s.call(r, e)), o ?? (i.configurable ? this._computedObserverLocator.getObserver(e, t, i, this) : this._dirtyChecker.createProperty(e, t));
      }
      return new IO(e, t);
    }
    // /** @internal */
    // private _createComputedObserver(obj: object, key: PropertyKey, pd: PropertyDescriptor, useProxy?: boolean) {
    //   const observer = new ComputedObserver(obj, pd.get!, pd.set, this, !!useProxy);
    //   def(obj, key, {
    //     enumerable: pd.enumerable,
    //     configurable: true,
    //     get: objectAssign(((/* Computed Observer */) => observer.getValue()) as ObservableGetter, { getObserver: () => observer }),
    //     set: (/* Computed Observer */v) => {
    //       observer.setValue(v);
    //     },
    //   });
    //   return observer;
    // }
    /** @internal */
    _getAdapterObserver(e, t, i) {
      if (this._adapters.length > 0)
        for (const r of this._adapters) {
          const s = r.getObserver(e, t, i, this);
          if (s != null)
            return s;
        }
      return null;
    }
  }
  const kO = (n) => {
    let e;
    return oi(n) ? e = rv(n) : ku(n) ? e = e_(n) : kp(n) && (e = JS(n)), e;
  }, D$ = Object.getPrototypeOf, N$ = Object.getOwnPropertyDescriptor, az = (n) => {
    let e = n.$observers;
    return e === void 0 && Zo(n, "$observers", {
      enumerable: !1,
      value: e = sn()
    }), e;
  };
  class kte {
    constructor(e, t) {
      this.oL = e, this.fn = t, this.maxRunCount = 10, this.queued = !1, this.running = !1, this.runCount = 0, this.stopped = !1, this._cleanupTask = void 0, this.run = () => {
        var i;
        if (this.stopped)
          throw Je(
            225
            /* ErrorNames.stopping_a_stopped_effect */
          );
        if (!this.running) {
          ++this.runCount, this.running = !0, this.queued = !1, ++this.obs.version;
          try {
            (i = this._cleanupTask) == null || i.call(void 0), TO(this), this._cleanupTask = this.fn(this);
          } finally {
            this.obs.clear(), this.running = !1, MO(this);
          }
          if (this.queued) {
            if (this.runCount > this.maxRunCount)
              throw this.runCount = 0, Je(
                226
                /* ErrorNames.effect_maximum_recursion_reached */
              );
            this.run();
          } else
            this.runCount = 0;
        }
      }, this.stop = () => {
        var i;
        (i = this._cleanupTask) == null || i.call(void 0), this._cleanupTask = void 0, this.stopped = !0, this.obs.clearAll();
      };
    }
    handleChange() {
      this.queued = !0, this.run();
    }
    handleCollectionChange() {
      this.queued = !0, this.run();
    }
  }
  oa(kte, null);
  class L$ {
    constructor(e, t, i, r) {
      this.oL = t, this._value = void 0, this.boundFn = !1, this._scope = e, this.ast = i, this._callback = r;
    }
    handleChange() {
      this.run();
    }
    handleCollectionChange() {
      this.run();
    }
    run() {
      this.obs.version++;
      const e = this._value, t = kn(this.ast, this._scope, this, this);
      this.obs.clear(), ea(t, e) || (this._value = t, this._callback.call(void 0, t, e));
    }
    stop() {
      this.obs.clearAll(), this._value = void 0;
    }
  }
  oa(L$, null), Nee(L$);
  const Dte = /* @__PURE__ */ (() => {
    function n(s) {
      return s.$observers === void 0 && Zo(s, "$observers", { value: {} }), s.$observers;
    }
    const e = {};
    function t(s, o) {
      r.mixed || (r.mixed = !0, so(r, null));
      let a = !1, l;
      if (typeof s == "object" ? l = s : s != null ? (l = { name: s }, a = !0) : l = W6, arguments.length === 0)
        return function(h, d) {
          if (d.kind !== "field")
            throw Je(
              224
              /* ErrorNames.invalid_observable_decorator_usage */
            );
          return c(d);
        };
      if ((o == null ? void 0 : o.kind) === "field")
        return c(o);
      if (a)
        return function(h, d) {
          u(h, l.name, () => e, !0);
        };
      return function(h, d) {
        switch (d.kind) {
          case "field":
            return c(d);
          case "class":
            return u(h, l.name, () => e, !0);
          default:
            throw Je(
              224
              /* ErrorNames.invalid_observable_decorator_usage */
            );
        }
      };
      function c(h) {
        let d;
        return h.addInitializer(function() {
          u(this, h.name, () => d, !1);
        }), function(f) {
          return d = f;
        };
      }
      function u(h, d, f, g) {
        const p = l.callback || `${Ud(d)}Changed`, m = l.set, v = function() {
          var R;
          const w = i(this, d, p, f, m);
          return (R = FR()) == null || R.subscribeTo(w), w.getValue();
        };
        v.getObserver = function(w) {
          return i(w, d, p, f, m);
        };
        const y = {
          enumerable: !0,
          configurable: !0,
          get: v,
          set(w) {
            i(this, d, p, f, m).setValue(w);
          }
        };
        Zo(g ? h.prototype : h, d, y);
      }
    }
    function i(s, o, a, l, c) {
      const u = n(s);
      let h = u[o];
      if (h == null) {
        const d = l();
        h = new r(s, a, c, d === e ? void 0 : d), u[o] = h;
      }
      return h;
    }
    class r {
      constructor(o, a, l, c) {
        this.type = Oc, this._value = void 0, this._oldValue = void 0, this._obj = o, this._setter = l, this._hasSetter = jt(l);
        const u = o[a];
        this.cb = jt(u) ? u : void 0, this._value = c;
      }
      getValue() {
        return this._value;
      }
      setValue(o) {
        var a;
        this._hasSetter && (o = this._setter(o)), ea(o, this._value) || (this._oldValue = this._value, this._value = o, this.subs.notifyDirty(), this.subs.notify(this._value, this._oldValue), ea(o, this._value) && ((a = this.cb) == null || a.call(this._obj, this._value, this._oldValue)));
      }
    }
    return r.mixed = !1, t;
  })(), mm = "pending", aS = "running", VE = "completed", Oy = "canceled", WE = /* @__PURE__ */ new Map(), H$ = (n) => () => {
    throw Yd(`AUR1005: The PLATFORM did not receive a valid reference to the global function '${n}'.`);
  };
  class DO {
    constructor(e, t = {}) {
      var i, r;
      this.macroTaskRequested = !1, this.macroTaskHandle = -1, this.globalThis = e, "decodeURI decodeURIComponent encodeURI encodeURIComponent Date Reflect console".split(" ").forEach((s) => {
        this[s] = s in t ? t[s] : e[s];
      }), "clearInterval clearTimeout queueMicrotask setInterval setTimeout".split(" ").forEach((s) => {
        var o;
        this[s] = s in t ? t[s] : ((o = e[s]) == null ? void 0 : o.bind(e)) ?? H$(s);
      }), this.performanceNow = "performanceNow" in t ? t.performanceNow : ((r = (i = e.performance) == null ? void 0 : i.now) == null ? void 0 : r.bind(e.performance)) ?? H$("performance.now"), this.flushMacroTask = this.flushMacroTask.bind(this), this.taskQueue = new NO(this, this.requestMacroTask.bind(this), this.cancelMacroTask.bind(this));
    }
    static getOrCreate(e, t = {}) {
      let i = WE.get(e);
      return i === void 0 && WE.set(e, i = new DO(e, t)), i;
    }
    static set(e, t) {
      WE.set(e, t);
    }
    requestMacroTask() {
      this.macroTaskRequested = !0, this.macroTaskHandle === -1 && (this.macroTaskHandle = this.setTimeout(this.flushMacroTask, 0));
    }
    cancelMacroTask() {
      this.macroTaskRequested = !1, this.macroTaskHandle > -1 && (this.clearTimeout(this.macroTaskHandle), this.macroTaskHandle = -1);
    }
    flushMacroTask() {
      this.macroTaskHandle = -1, this.macroTaskRequested === !0 && (this.macroTaskRequested = !1, this.taskQueue.flush());
    }
  }
  class NO {
    get isEmpty() {
      return this._pendingAsyncCount === 0 && this._processing.length === 0 && this._pending.length === 0 && this._delayed.length === 0;
    }
    /**
     * Persistent tasks will re-queue themselves indefinitely until they are explicitly canceled,
     * so we consider them 'infinite work' whereas non-persistent (one-off) tasks are 'finite work'.
     *
     * This `hasNoMoreFiniteWork` getters returns true if either all remaining tasks are persistent, or if there are no more tasks.
     *
     * If that is the case, we can resolve the promise that was created when `yield()` is called.
     *
     * @internal
     */
    get _hasNoMoreFiniteWork() {
      return this._pendingAsyncCount === 0 && this._processing.every(jE) && this._pending.every(jE) && this._delayed.every(jE);
    }
    constructor(e, t, i) {
      this.platform = e, this.$request = t, this.$cancel = i, this._suspenderTask = void 0, this._pendingAsyncCount = 0, this._processing = [], this._pending = [], this._delayed = [], this._flushRequested = !1, this._yieldPromise = void 0, this._lastRequest = 0, this._lastFlush = 0, this._requestFlush = () => {
        this._tracer.enabled && this._tracer.enter(this, "requestFlush"), this._flushRequested || (this._flushRequested = !0, this._lastRequest = this._now(), this.$request()), this._tracer.enabled && this._tracer.leave(this, "requestFlush");
      }, this._now = e.performanceNow, this._tracer = new Hte(e.console);
    }
    flush(e = this._now()) {
      if (this._tracer.enabled && this._tracer.enter(this, "flush"), this._flushRequested = !1, this._lastFlush = e, this._suspenderTask === void 0) {
        let t;
        if (this._pending.length > 0 && (this._processing.push(...this._pending), this._pending.length = 0), this._delayed.length > 0)
          for (let r = 0; r < this._delayed.length; ++r)
            t = this._delayed[r], t.queueTime <= e && (this._processing.push(t), this._delayed.splice(r--, 1));
        let i;
        for (; this._processing.length > 0; )
          if ((i = this._processing.shift()).run(), i.status === aS)
            if (i.suspend === !0) {
              this._suspenderTask = i, this._requestFlush(), this._tracer.enabled && this._tracer.leave(this, "flush early async");
              return;
            } else
              ++this._pendingAsyncCount;
        if (this._pending.length > 0 && (this._processing.push(...this._pending), this._pending.length = 0), this._delayed.length > 0)
          for (let r = 0; r < this._delayed.length; ++r)
            t = this._delayed[r], t.queueTime <= e && (this._processing.push(t), this._delayed.splice(r--, 1));
        if ((this._processing.length > 0 || this._delayed.length > 0 || this._pendingAsyncCount > 0) && this._requestFlush(), this._yieldPromise !== void 0 && this._hasNoMoreFiniteWork) {
          const r = this._yieldPromise;
          this._yieldPromise = void 0, r.resolve();
        }
      } else
        this._requestFlush();
      this._tracer.enabled && this._tracer.leave(this, "flush full");
    }
    /**
     * Cancel the next flush cycle (and/or the macrotask that schedules the next flush cycle, in case this is a microtask queue), if it was requested.
     *
     * This operation is idempotent and will do nothing if no flush is scheduled.
     */
    cancel() {
      this._tracer.enabled && this._tracer.enter(this, "cancel"), this._flushRequested && (this.$cancel(), this._flushRequested = !1), this._tracer.enabled && this._tracer.leave(this, "cancel");
    }
    /**
     * Returns a promise that, when awaited, resolves when:
     * - all *non*-persistent (including async) tasks have finished;
     * - the last-added persistent task has run exactly once;
     *
     * This operation is idempotent: the same promise will be returned until it resolves.
     *
     * If `yield()` is called multiple times in a row when there are one or more persistent tasks in the queue, each call will await exactly one cycle of those tasks.
     */
    async yield() {
      this._tracer.enabled && this._tracer.enter(this, "yield"), this.isEmpty ? this._tracer.enabled && this._tracer.leave(this, "yield empty") : (this._yieldPromise === void 0 && (this._tracer.enabled && this._tracer.trace(this, "yield - creating promise"), this._yieldPromise = uz()), await this._yieldPromise, this._tracer.enabled && this._tracer.leave(this, "yield task"));
    }
    queueTask(e, t) {
      this._tracer.enabled && this._tracer.enter(this, "queueTask");
      const { delay: i, preempt: r, persistent: s, suspend: o } = { ...$te, ...t };
      if (r) {
        if (i > 0)
          throw Bte();
        if (s)
          throw Vte();
      }
      this._processing.length === 0 && this._requestFlush();
      const a = this._now(), l = new Lte(this._tracer, this, a, a + i, r, s, o, e);
      return r ? this._processing[this._processing.length] = l : i === 0 ? this._pending[this._pending.length] = l : this._delayed[this._delayed.length] = l, this._tracer.enabled && this._tracer.leave(this, "queueTask"), l;
    }
    /**
     * Remove the task from this queue.
     */
    remove(e) {
      this._tracer.enabled && this._tracer.enter(this, "remove");
      let t = this._processing.indexOf(e);
      if (t > -1) {
        this._processing.splice(t, 1), this._tracer.enabled && this._tracer.leave(this, "remove processing");
        return;
      }
      if (t = this._pending.indexOf(e), t > -1) {
        this._pending.splice(t, 1), this._tracer.enabled && this._tracer.leave(this, "remove pending");
        return;
      }
      if (t = this._delayed.indexOf(e), t > -1) {
        this._delayed.splice(t, 1), this._tracer.enabled && this._tracer.leave(this, "remove delayed");
        return;
      }
      throw this._tracer.enabled && this._tracer.leave(this, "remove error"), Yd(`Task #${e.id} could not be found`);
    }
    /**
     * Reset the persistent task back to its pending state, preparing it for being invoked again on the next flush.
     *
     * @internal
     */
    _resetPersistentTask(e) {
      this._tracer.enabled && this._tracer.enter(this, "resetPersistentTask"), e.reset(this._now()), e.createdTime === e.queueTime ? this._pending[this._pending.length] = e : this._delayed[this._delayed.length] = e, this._tracer.enabled && this._tracer.leave(this, "resetPersistentTask");
    }
    /**
     * Notify the queue that this async task has had its promise resolved, so that the queue can proceed with consecutive tasks on the next flush.
     *
     * @internal
     */
    _completeAsyncTask(e) {
      var t;
      if (this._tracer.enabled && this._tracer.enter(this, "completeAsyncTask"), e.suspend === !0) {
        if (this._suspenderTask !== e)
          throw this._tracer.enabled && this._tracer.leave(this, "completeAsyncTask error"), Yd(`Async task completion mismatch: suspenderTask=${(t = this._suspenderTask) == null ? void 0 : t.id}, task=${e.id}`);
        this._suspenderTask = void 0;
      } else
        --this._pendingAsyncCount;
      if (this._yieldPromise !== void 0 && this._hasNoMoreFiniteWork) {
        const i = this._yieldPromise;
        this._yieldPromise = void 0, i.resolve();
      }
      this.isEmpty && this.cancel(), this._tracer.enabled && this._tracer.leave(this, "completeAsyncTask");
    }
  }
  class LA extends Error {
    constructor(e) {
      super("Task was canceled."), this.task = e;
    }
  }
  let Nte = 0;
  class Lte {
    get result() {
      const e = this._result;
      if (e === void 0)
        switch (this._status) {
          case mm: {
            const t = this._result = uz();
            return this._resolve = t.resolve, this._reject = t.reject, t;
          }
          case aS:
            throw Yd("Trying to await task from within task will cause a deadlock.");
          case VE:
            return this._result = Promise.resolve();
          case Oy:
            return this._result = Promise.reject(new LA(this));
        }
      return e;
    }
    get status() {
      return this._status;
    }
    constructor(e, t, i, r, s, o, a, l) {
      this.taskQueue = t, this.createdTime = i, this.queueTime = r, this.preempt = s, this.persistent = o, this.suspend = a, this.callback = l, this.id = ++Nte, this._resolve = void 0, this._reject = void 0, this._result = void 0, this._status = mm, this._tracer = e;
    }
    run(e = this.taskQueue.platform.performanceNow()) {
      if (this._tracer.enabled && this._tracer.enter(this, "run"), this._status !== mm)
        throw this._tracer.enabled && this._tracer.leave(this, "run error"), Yd(`Cannot run task in ${this._status} state`);
      const { persistent: t, taskQueue: i, callback: r, _resolve: s, _reject: o, createdTime: a } = this;
      let l;
      this._status = aS;
      try {
        l = r(e - a), l instanceof Promise ? l.then((c) => {
          this.persistent ? i._resetPersistentTask(this) : (t ? this._status = Oy : this._status = VE, this.dispose()), i._completeAsyncTask(this), this._tracer.enabled && this._tracer.leave(this, "run async then"), s !== void 0 && s(c);
        }).catch((c) => {
          if (this.persistent || this.dispose(), i._completeAsyncTask(this), this._tracer.enabled && this._tracer.leave(this, "run async catch"), o !== void 0)
            o(c);
          else
            throw c;
        }) : (this.persistent ? i._resetPersistentTask(this) : (t ? this._status = Oy : this._status = VE, this.dispose()), this._tracer.enabled && this._tracer.leave(this, "run sync success"), s !== void 0 && s(l));
      } catch (c) {
        if (this.persistent || this.dispose(), this._tracer.enabled && this._tracer.leave(this, "run sync error"), o !== void 0)
          o(c);
        else
          throw c;
      }
    }
    cancel() {
      if (this._tracer.enabled && this._tracer.enter(this, "cancel"), this._status === mm) {
        const e = this.taskQueue, t = this._reject;
        return e.remove(this), e.isEmpty && e.cancel(), this._status = Oy, this.dispose(), t !== void 0 && t(new LA(this)), this._tracer.enabled && this._tracer.leave(this, "cancel true =pending"), !0;
      } else if (this._status === aS && this.persistent)
        return this.persistent = !1, this._tracer.enabled && this._tracer.leave(this, "cancel true =running+persistent"), !0;
      return this._tracer.enabled && this._tracer.leave(this, "cancel false"), !1;
    }
    reset(e) {
      this._tracer.enabled && this._tracer.enter(this, "reset");
      const t = this.queueTime - this.createdTime;
      this.createdTime = e, this.queueTime = e + t, this._status = mm, this._resolve = void 0, this._reject = void 0, this._result = void 0, this._tracer.enabled && this._tracer.leave(this, "reset");
    }
    dispose() {
      this._tracer.enabled && this._tracer.trace(this, "dispose"), this.callback = void 0, this._resolve = void 0, this._reject = void 0, this._result = void 0;
    }
  }
  class Hte {
    constructor(e) {
      this.console = e, this.enabled = !1, this.depth = 0;
    }
    enter(e, t) {
      this.log(`${"  ".repeat(this.depth++)}> `, e, t);
    }
    leave(e, t) {
      this.log(`${"  ".repeat(--this.depth)}< `, e, t);
    }
    trace(e, t) {
      this.log(`${"  ".repeat(this.depth)}- `, e, t);
    }
    log(e, t, i) {
      if (t instanceof NO) {
        const r = t._processing.length, s = t._pending.length, o = t._delayed.length, a = t._flushRequested, l = !!t._suspenderTask, c = `processing=${r} pending=${s} delayed=${o} flushReq=${a} susTask=${l}`;
        this.console.log(`${e}[Q.${i}] ${c}`);
      } else {
        const r = t.id, s = Math.round(t.createdTime * 10) / 10, o = Math.round(t.queueTime * 10) / 10, a = t.preempt, l = t.persistent, c = t.suspend, u = t._status, h = `id=${r} created=${s} queue=${o} preempt=${a} persistent=${l} status=${u} suspend=${c}`;
        this.console.log(`${e}[T.${i}] ${h}`);
      }
    }
  }
  const $te = {
    delay: 0,
    preempt: !1,
    persistent: !1,
    suspend: !1
  };
  let lz, cz;
  const Fte = (n, e) => {
    lz = n, cz = e;
  }, uz = () => {
    const n = new Promise(Fte);
    return n.resolve = lz, n.reject = cz, n;
  }, jE = (n) => n.persistent, Bte = () => Yd("AUR1006: Invalid arguments: preempt cannot be combined with a greater-than-zero delay"), Vte = () => Yd("AUR1007: Invalid arguments: preempt cannot be combined with persistent"), Yd = (n) => new Error(n);
  class _u extends DO {
    static getOrCreate(e, t = {}) {
      let i = _u._lookup.get(e);
      return i === void 0 && _u._lookup.set(e, i = new _u(e, t)), i;
    }
    static set(e, t) {
      _u._lookup.set(e, t);
    }
    /**
     * @deprecated Use `platform.domQueue` instead.
     */
    get domWriteQueue() {
      return this.console.log("[DEV:aurelia] platform.domQueue is deprecated, please use platform.domQueue instead."), this.domQueue;
    }
    /**
     * @deprecated Use `platform.domQueue` instead.
     */
    get domReadQueue() {
      return this.console.log("[DEV:aurelia] platform.domReadQueue has been removed, please use platform.domQueue instead."), this.domQueue;
    }
    constructor(e, t = {}) {
      super(e, t);
      const i = (r) => () => {
        throw new Error(`The PLATFORM did not receive a valid reference to the global function '${r}'.`);
      };
      "Node Element HTMLElement CustomEvent CSSStyleSheet ShadowRoot MutationObserver window document customElements".split(" ").forEach((r) => this[r] = r in t ? t[r] : e[r]), "fetch requestAnimationFrame cancelAnimationFrame".split(" ").forEach((r) => {
        var s;
        return (
          // eslint-disable-next-line
          this[r] = r in t ? t[r] : ((s = e[r]) == null ? void 0 : s.bind(e)) ?? i(r)
        );
      }), this.domQueue = (() => {
        let r = !1, s = -1;
        const o = () => {
          r = !0, s === -1 && (s = this.requestAnimationFrame(l));
        }, a = () => {
          r = !1, s > -1 && (this.cancelAnimationFrame(s), s = -1);
        }, l = () => {
          s = -1, r === !0 && (r = !1, c.flush());
        }, c = new NO(this, o, a);
        return c;
      })();
    }
  }
  _u._lookup = /* @__PURE__ */ new WeakMap();
  const { default: LO, oneTime: VR, toView: Jn, fromView: Rc, twoWay: hz } = Lw, dr = Pc.get, WR = Pc.has, ta = Pc.define, { annotation: Wte } = F6, kc = Wte.keyFor, $w = Object, Kd = String, dz = $w.prototype, yd = dz.hasOwnProperty, Dc = $w.freeze, fz = $w.assign, gz = $w.getOwnPropertyNames, HO = $w.keys, $$ = /* @__PURE__ */ sn(), HA = (n, e, t) => {
    if ($$[e] === !0)
      return !0;
    if (!yt(e))
      return !1;
    const i = e.slice(0, 5);
    return $$[e] = i === "aria-" || i === "data-" || t.isStandardSvgAttribute(n, e);
  }, $A = (n) => {
    throw n;
  }, pz = Reflect.defineProperty, bs = (n, e, t) => (pz(n, e, {
    enumerable: !1,
    configurable: !0,
    writable: !0,
    value: t
  }), t), mz = (n, e, t) => n.addSignalListener(e, t), bz = (n, e, t) => n.removeSignalListener(e, t), jte = "Interpolation", zte = "IsIterator", Ute = "IsFunction", rl = "IsProperty", F$ = "pending", zE = "running", $O = EO.Observer, nh = EO.Node, gl = EO.Layout, Me = (n, ...e) => new Error(`AUR${Kd(n).padStart(4, "0")}: ${Yte(n, ...e)}`), Gte = {
    99: "Method {{0}} not implemented",
    101: 'Ast eval error: binding behavior "{{0}}" could not be found. Did you forget to register it as a dependency?',
    102: 'Ast eval error: binding behavior "{{0}}" already applied.',
    103: 'Ast eval error: value converter "{{0}}" could not be found. Did you forget to register it as a dependency?',
    105: "Ast eval error: unable to find $host context. Did you forget [au-slot] attribute?",
    106: 'Ast eval error: invalid assignment. "$host" is a reserved keyword.',
    107: "Ast eval error: expression is not a function.",
    109: 'Ast eval error: unknown unary operator: "{{0}}"',
    108: 'Ast eval error: unknown binary operator: "{{0}}"',
    110: "Ast eval error: left-hand side of tagged template expression is not a function.",
    111: 'Ast eval error: expected "{{0}}" to be a function',
    112: "Ast eval error: cannot use non-object value for destructuring assignment.",
    113: "Ast eval error: infinite loop detected. Increment operators should only be used in event handlers.",
    114: 'Ast eval error: cannot access property "{{0}}" of {{1}}.',
    115: 'Ast eval error: cannot access key "{{0}}" of {{1}}.',
    116: 'Ast eval error: cannot assign value to property "{{0}}" of null/undefined.',
    151: "No binding behavior definition found for type {{0:name}}",
    152: "No value converter definition found for type {{0:name}}",
    153: 'Element "{{0}}" has already been registered.',
    154: 'Attribute "{{0}}" has already been registered.',
    155: "Value converter {{0}} has already been registered.",
    156: "Binding behavior {{0}} has already been registered.",
    157: "Binding command {{0}} has already been registered.",
    203: "Trying to retrieve a property or build a scope from a null/undefined scope",
    204: "Trying to create a scope with null/undefined binding context",
    227: "@bindable is not supported for properties that uses a symbol for name. Use a string for the property name instead.",
    228: "@bindable cannot be used as a class decorator when no configuration object is supplied.",
    229: "@bindable cannot be used as a class decorator when no property name is supplied in the configuration object.",
    500: "There is no cached controller for the provided ViewModel: {{0}}",
    501: "Invalid combination: cannot combine the containerless custom element option with Shadow DOM.",
    502: "Trying to activate a disposed controller: {{0}}.",
    503: "Controller at {{0}} is in an unexpected state: {{1}} during activation.",
    504: "Synthetic view at {{0}} is being activated with null/undefined scope.",
    505: "Controller at {{0}} is in an unexpected state: {{1}} during deactivation.",
    506: "Invalid callback for @watch decorator: {{0}}",
    507: "Observer for bindable property {{0}} does not support coercion.",
    508: "Observer for property {{0}} does not support change handler.",
    759: "No attribute definition found for type {{0:name}}",
    760: "No element definition found for type {{0:name}}",
    761: "Cannot create a custom element definition with only a name and no type: {{0}}",
    762: "Trying to retrieve a custom element controller from a node, but the provided node <{{0:nodeName}} /> is not a custom element or containerless host.",
    763: "Trying to retrieve a custom element controller from a node, but the provided node <{{0:nodeName}} /> is not a custom element or containerless host.",
    764: "Trying to retrieve a custom element controller from a node. But the provided node <{{0:nodeName}} /> does not appear to be part of an Aurelia app DOM tree, or it was added to the DOM in a way that Aurelia cannot properly resolve its position in the component tree.",
    765: "Trying to retrieve a custom element controller from a node. But the provided node <{{0:nodeName}} /> does not appear to be part of an Aurelia app DOM tree, or it was added to the DOM in a way that Aurelia cannot properly resolve its position in the component tree.",
    766: "Invalid @processContent hook. Expected the hook to be a function (when defined in a class, it needs to be a static function) but got a {{0:typeof}}.",
    652: "Aurelia is unable to observe property {{0}}. Register observation mapping with .useConfig().",
    653: "Mapping for property {{0}} of <{{1}} /> already exists",
    654: "Array values can only be bound to a multi-select.",
    714: 'Template compilation error: primary already exists on element/attribute "{{0}}"',
    719: "Attribute {{0}} has been already registered for {{1:element}}",
    767: "Aurelia.root was accessed without a valid root.",
    768: "An instance of Aurelia is already registered with the container or an ancestor of it.",
    769: "Failed to initialize the platform object. The host element's ownerDocument does not have a defaultView, did you create the host from a DOMParser and forget to call adoptNode()?",
    770: "Aurelia.start() was called without a composition root",
    771: "The aurelia instance must be fully stopped before it can be disposed",
    750: "view.ref is not supported. If you are migrating from v1, this can be understood as the controller.",
    751: `Attempted to reference "{{0}}", but it was not found amongst the target's API.`,
    752: "Element {{0:.res}} is not registered in {{1:name}}.",
    753: "Attribute {{0:.res}} is not registered in {{1:name}}.",
    754: "Attribute {{0:.res}} is not registered in {{1:name}}.",
    755: "Cannot resolve ViewFactory before the provider was prepared.",
    756: "Cannot resolve ViewFactory without a (valid) name.",
    757: "AUR0757: The compiled template is not aligned with the render instructions. There are {{0}} targets and {{1}} instructions.",
    772: "Invalid @watch decorator config. Expected an expression or a fn but received null/undefined.",
    773: 'Invalid @watch decorator change handler config.Method "{{0}}" not found in class {{1}}',
    774: "Invalid @watch decorator usage: decorated target {{0}} is not a class method.",
    775: 'Invalid command "{{0}}" usage with [repeat]',
    776: 'Invalid [repeat] usage, found extraneous target "{{0}}"',
    777: "Unsupported: [repeat] cannot iterate over {{0:toString}}",
    778: "Unsupported: [repeat] cannot count {{0:toString}}",
    814: "[repeat] encountered an error: number of views != number of items {{0:join(!=)}}",
    779: "Invalid portal insertion position: {{0}}",
    801: '"& self" binding behavior only supports listener binding via trigger/capture command.',
    802: `"& updateTrigger" invalid usage. This binding behavior requires at least one event name argument: eg <input value.bind="firstName & updateTrigger:'blur'">`,
    803: '"& updateTrigger" invalid usage. This binding behavior can only be applied to two-way/ from-view bindings.',
    805: 'Invalid scope behavior "{{0}}" on <au-compose />. Only "scoped" or "auto" allowed.',
    // originally not supported
    806: `<au-compose /> couldn't find a custom element with name "{{0}}", did you forget to register it locally or globally?`,
    807: "Composition has already been activated/deactivated. Id: {{0:controller}}",
    808: "Composition has already been deactivated.",
    810: "Invalid [else] usage, it should follow an [if]",
    811: "Invalid portal strict target query, empty query.",
    812: "Invalid portal strict target resolution, target not found.",
    813: 'Invalid [pending]/[then]/[catch] usage. The parent [promise].resolve not found; only "*[promise.resolve] > *[pending|then|catch]" relation is supported.',
    815: 'Invalid [case/default-case] usage. The parent [switch] not found; only "*[switch] > *[case|default-case]" relation is supported.',
    816: "Invalid [default-case] usage. Multiple 'default-case's are not allowed.",
    817: '"& signal" binding behavior can only be used with bindings that have a "handleChange" method',
    818: `"& signal" invalid usage. At least one signal name must be passed to the signal behavior, e.g. "expr & signal:'my-signal'"`,
    819: "Spreading to bindables onto non custom element",
    820: "Invalid spread target {{0}}",
    9999: "No scope context for spread binding.",
    9998: "Spread binding does not support spreading custom attributes/template controllers. Did you build the spread instruction manually?",
    9997: "Marker is malformed. This likely happens when a compiled template has been modified. Did you accidentally modified some compiled template? You can modify template before compilation with compiling Template compiler hook.",
    9996: "Invalid usage, a rate limit has already been applied. Did you have both throttle and debounce on the same binding?",
    9995: "The binding already has a target subscriber.",
    9994: `"& attr" can be only used on property binding. It's used on {{0:ctor}}`,
    9993: '"& updateTrigger" binding behavior only works with the default implementation of Aurelia HTML observation. Implement your own node observation + updateTrigger',
    9992: '"& updateTrigger" uses node observer to observe, but it does not know how to use events to observe property <{{0:target@property}} />',
    9991: "Invalid @children usage. @children decorator can only be used on a field",
    9990: "Invalid @slotted usage. @slotted decorator can only be used on a field",
    9989: "Invalid query selector. Only selectors with alpha-numeric characters, or $all are allowed. Got {{0}} instead."
  }, Yte = (n, ...e) => {
    var i;
    let t = Gte[n];
    for (let r = 0; r < e.length; ++r) {
      const s = new RegExp(`{{${r}(:.*)?}}`, "g");
      let o = s.exec(t);
      for (; o != null; ) {
        const a = (i = o[1]) == null ? void 0 : i.slice(1);
        let l = e[r];
        if (l != null)
          switch (a) {
            case "nodeName":
              l = l.nodeName.toLowerCase();
              break;
            case "name":
              l = l.name;
              break;
            case "typeof":
              l = typeof l;
              break;
            case "ctor":
              l = l.constructor.name;
              break;
            case "controller":
              l = l.controller.name;
              break;
            case "target@property":
              l = `${l.target}@${l.targetProperty}`;
              break;
            case "toString":
              l = Object.prototype.toString.call(l);
              break;
            case "join(!=)":
              l = l.join("!=");
              break;
            case "bindingCommandHelp":
              l = Kte(l);
              break;
            case "element":
              l = l === "*" ? "all elements" : `<${l} />`;
              break;
            default:
              a != null && a.startsWith(".") ? l = Kd(l[a.slice(1)]) : l = Kd(l);
          }
        t = t.slice(0, o.index) + l + t.slice(s.lastIndex), o = s.exec(t);
      }
    }
    return t;
  };
  function Kte(n) {
    switch (n) {
      case "delegate":
        return `
The ".delegate" binding command has been removed in v2. Binding command ".trigger" should be used instead. If you are migrating v1 application, install compat package to add back the ".delegate" binding command for ease of migration.`;
      case "call":
        return `
The ".call" binding command has been removed in v2. If you want to pass a callback that preserves the context of the function call, you can use lambda instead. Refer to lambda expression doc for more details.`;
      default:
        return "";
    }
  }
  function Qr(n, e) {
    let t;
    function i(r, s) {
      var c;
      let o;
      switch (s.kind) {
        case "getter":
        case "field": {
          const u = s.name;
          if (typeof u != "string")
            throw Me(
              227
              /* ErrorNames.invalid_bindable_decorator_usage_symbol */
            );
          o = u;
          break;
        }
        case "class":
          if (t == null)
            throw Me(
              228
              /* ErrorNames.invalid_bindable_decorator_usage_class_without_configuration */
            );
          if (typeof t == "string")
            o = t;
          else {
            const u = t.name;
            if (!u)
              throw Me(
                229
                /* ErrorNames.invalid_bindable_decorator_usage_class_without_property_name_configuration */
              );
            if (typeof u != "string")
              throw Me(
                227
                /* ErrorNames.invalid_bindable_decorator_usage_symbol */
              );
            o = u;
          }
          break;
      }
      const a = t == null || typeof t == "string" ? { name: o } : t, l = (c = s.metadata)[bu] ?? (c[bu] = sn());
      l[o] = ac.create(o, a);
    }
    if (arguments.length > 1) {
      t = {}, i(n, e);
      return;
    } else if (yt(n))
      return t = n, i;
    return t = n === void 0 ? {} : n, i;
  }
  const bu = /* @__PURE__ */ kc("bindables"), cs = Dc({
    name: bu,
    keyFrom: (n) => `${bu}:${n}`,
    from(...n) {
      const e = {}, t = Array.isArray;
      function i(o) {
        e[o] = ac.create(o);
      }
      function r(o, a) {
        e[o] = a instanceof ac ? a : ac.create(o, a === !0 ? {} : a);
      }
      function s(o) {
        t(o) ? o.forEach((a) => yt(a) ? i(a) : r(a.name, a)) : o instanceof ac ? e[o.name] = o : o !== void 0 && HO(o).forEach((a) => r(a, o[a]));
      }
      return n.forEach(s), e;
    },
    getAll(n) {
      const e = [], t = eQ(n);
      let i = t.length, r;
      for (; --i >= 0; ) {
        r = t[i];
        const s = dr(bu, r);
        s != null && e.push(...Object.values(s));
      }
      return e;
    },
    /** @internal */
    _add(n, e) {
      let t = dr(bu, e);
      t == null && ta(t = sn(), e, bu), t[n.name] = n;
    }
  });
  class ac {
    constructor(e, t, i, r, s, o) {
      this.attribute = e, this.callback = t, this.mode = i, this.primary = r, this.name = s, this.set = o;
    }
    static create(e, t = {}) {
      const i = t.mode ?? Jn;
      return new ac(t.attribute ?? L6(e), t.callback ?? `${e}Changed`, yt(i) ? Lw[i] ?? LO : i, t.primary ?? !1, t.name ?? e, t.set ?? qte(t));
    }
  }
  const FA = {
    key: /* @__PURE__ */ kc("coercer"),
    define(n, e) {
      ta(n[e].bind(n), n, FA.key);
    },
    for(n) {
      return dr(FA.key, n);
    }
  };
  function qte(n = {}) {
    const e = n.type ?? null;
    if (e == null)
      return Za;
    let t;
    switch (e) {
      case Number:
      case Boolean:
      case String:
      case BigInt:
        t = e;
        break;
      default: {
        const i = e.coerce;
        t = typeof i == "function" ? i.bind(e) : FA.for(e) ?? Za;
        break;
      }
    }
    return t === Za ? t : Xte(t, n.nullable);
  }
  function Xte(n, e) {
    return function(t, i) {
      return i != null && i.enableCoercion ? (e ?? !((i == null ? void 0 : i.coerceNullish) ?? !1)) && t == null ? t : n(t, i) : t;
    };
  }
  const zn = pf.createInterface, pl = Vd.singleton, Wu = Vd.aliasTo, Zte = Vd.instance, di = (n, e, t) => n.registerResolver(e, t), Qte = "custom-element", Jte = "custom-attribute", ju = (n, e, t, i = "__au_static_resource__") => {
    var s;
    let r = dr(i, n);
    return r == null && ((s = n.$au) == null ? void 0 : s.type) === e && (r = t(n.$au, n), ta(r, n, i)), r;
  };
  class sv {
    constructor(e, t, i, r) {
      this.Type = e, this.name = t, this.aliases = i, this.key = r;
    }
    static create(e, t) {
      let i, r;
      return yt(e) ? (i = e, r = { name: i }) : (i = e.name, r = e), new sv(t, mu(B$(t, "name"), i), hi(B$(t, "aliases"), r.aliases, t.aliases), vz.keyFrom(i));
    }
    register(e, t) {
      const i = this.Type, r = typeof t == "string" ? ov(t) : this.key, s = this.aliases;
      e.has(r, !1) ? console.warn(`[DEV:aurelia] ${Me(156, this.name)}`) : e.register(e.has(i, !1) ? null : pl(i, i), Wu(i, r), ...s.map((o) => Wu(i, ov(o))));
    }
  }
  const Js = "binding-behavior", xg = /* @__PURE__ */ gf(Js), B$ = (n, e) => dr(kc(e), n), ov = (n) => `${xg}:${n}`, vz = /* @__PURE__ */ Dc({
    name: xg,
    keyFrom: ov,
    isType(n) {
      var e;
      return jt(n) && (WR(xg, n) || ((e = n.$au) == null ? void 0 : e.type) === Js);
    },
    define(n, e) {
      const t = sv.create(n, e), i = t.Type;
      return ta(t, i, xg, Ya), i;
    },
    getDefinition(n) {
      const e = dr(xg, n) ?? ju(n, Js, sv.create);
      if (e === void 0)
        throw Me(151, n);
      return e;
    },
    find(n, e) {
      const t = n.find(Js, e);
      return t == null ? null : dr(xg, t) ?? ju(t, Js, sv.create) ?? null;
    },
    get(n, e) {
      try {
        return n.get(pp(ov(e)));
      } catch (t) {
        throw console.error("[DEV:aurelia] Cannot retrieve binding behavior with name", e), t;
      }
      return n.get(pp(ov(e)));
    }
  }), UE = /* @__PURE__ */ new Map(), jR = (n) => ({ type: Js, name: n });
  class zR {
    bind(e, t) {
      UE.set(t, t.mode), t.mode = this.mode;
    }
    unbind(e, t) {
      t.mode = UE.get(t), UE.delete(t);
    }
  }
  class wz extends zR {
    get mode() {
      return VR;
    }
  }
  wz.$au = jR("oneTime");
  class yz extends zR {
    get mode() {
      return Jn;
    }
  }
  yz.$au = jR("toView");
  class Cz extends zR {
    get mode() {
      return Rc;
    }
  }
  Cz.$au = jR("fromView");
  class Sz extends zR {
    get mode() {
      return hz;
    }
  }
  Sz.$au = jR("twoWay");
  const GE = /* @__PURE__ */ new WeakMap(), ene = 200;
  class _z {
    constructor() {
      this._platform = ge(Np);
    }
    bind(e, t, i, r) {
      var a;
      const s = {
        type: "debounce",
        delay: i ?? ene,
        now: this._platform.performanceNow,
        queue: this._platform.taskQueue,
        signals: yt(r) ? [r] : r ?? pt
      }, o = (a = t.limit) == null ? void 0 : a.call(t, s);
      o == null ? console.warn(`Binding ${t.constructor.name} does not support debounce rate limiting`) : GE.set(t, o);
    }
    unbind(e, t) {
      var i;
      (i = GE.get(t)) == null || i.dispose(), GE.delete(t);
    }
  }
  _z.$au = {
    type: Js,
    name: "debounce"
  };
  const n_ = /* @__PURE__ */ zn("ISignaler", (n) => n.singleton(tne));
  class tne {
    constructor() {
      this.signals = sn();
    }
    dispatchSignal(e) {
      const t = this.signals[e];
      if (t === void 0)
        return;
      let i;
      for (i of t.keys())
        i.handleChange(void 0, void 0);
    }
    addSignalListener(e, t) {
      var i;
      ((i = this.signals)[e] ?? (i[e] = /* @__PURE__ */ new Set())).add(t);
    }
    removeSignalListener(e, t) {
      var i;
      (i = this.signals[e]) == null || i.delete(t);
    }
  }
  class Rz {
    constructor() {
      this._lookup = /* @__PURE__ */ new Map(), this._signaler = ge(n_);
    }
    bind(e, t, ...i) {
      if (!("handleChange" in t))
        throw Me(
          817
          /* ErrorNames.signal_behavior_invalid_usage */
        );
      if (i.length === 0)
        throw Me(
          818
          /* ErrorNames.signal_behavior_no_signals */
        );
      this._lookup.set(t, i);
      let r;
      for (r of i)
        mz(this._signaler, r, t);
    }
    unbind(e, t) {
      const i = this._lookup.get(t);
      this._lookup.delete(t);
      let r;
      for (r of i)
        bz(this._signaler, r, t);
    }
  }
  Rz.$au = {
    type: Js,
    name: "signal"
  };
  const YE = /* @__PURE__ */ new WeakMap(), nne = 200;
  class Ez {
    constructor() {
      ({ performanceNow: this._now, taskQueue: this._taskQueue } = ge(Np));
    }
    bind(e, t, i, r) {
      var a;
      const s = {
        type: "throttle",
        delay: i ?? nne,
        now: this._now,
        queue: this._taskQueue,
        signals: yt(r) ? [r] : r ?? pt
      }, o = (a = t.limit) == null ? void 0 : a.call(t, s);
      o == null ? console.warn(`Binding ${t.constructor.name} does not support debounce rate limiting`) : YE.set(t, o);
    }
    unbind(e, t) {
      var i;
      (i = YE.get(t)) == null || i.dispose(), YE.delete(t);
    }
  }
  Ez.$au = {
    type: Js,
    name: "throttle"
  };
  const ho = Np, BA = /* @__PURE__ */ (() => {
    const n = /* @__PURE__ */ new WeakMap();
    return Dc({
      add(e, t) {
        let i = n.get(e);
        i == null && n.set(e, i = []), i.push(t);
      },
      getDefinitions(e) {
        return n.get(e) ?? pt;
      }
    });
  })();
  class qd {
    // a simple marker to distinguish between Custom Element definition & Custom attribute definition
    get type() {
      return Jte;
    }
    constructor(e, t, i, r, s, o, a, l, c, u, h) {
      this.Type = e, this.name = t, this.aliases = i, this.key = r, this.defaultBindingMode = s, this.isTemplateController = o, this.bindables = a, this.noMultiBindings = l, this.watches = c, this.dependencies = u, this.containerStrategy = h;
    }
    static create(e, t) {
      let i, r;
      yt(e) ? (i = e, r = { name: i }) : (i = e.name, r = e);
      const s = mu(Vl(t, "defaultBindingMode"), r.defaultBindingMode, t.defaultBindingMode, Jn);
      for (const o of Object.values(cs.from(r.bindables)))
        cs._add(o, t);
      return new qd(t, mu(Vl(t, "name"), i), hi(Vl(t, "aliases"), r.aliases, t.aliases), ep(i), yt(s) ? Lw[s] ?? LO : s, mu(Vl(t, "isTemplateController"), r.isTemplateController, t.isTemplateController, !1), cs.from(...cs.getAll(t), Vl(t, "bindables"), t.bindables, r.bindables), mu(Vl(t, "noMultiBindings"), r.noMultiBindings, t.noMultiBindings, !1), hi(BA.getDefinitions(t), t.watches), hi(Vl(t, "dependencies"), r.dependencies, t.dependencies), mu(Vl(t, "containerStrategy"), r.containerStrategy, t.containerStrategy, "reuse"));
    }
    register(e, t) {
      const i = this.Type, r = typeof t == "string" ? ep(t) : this.key, s = this.aliases;
      e.has(r, !1) ? (qd.warnDuplicate && e.get(Wd).warn(Me(154, this.name)), console.warn(`[DEV:aurelia] ${Me(154, this.name)}`)) : e.register(e.has(i, !1) ? null : pl(i, i), Wu(i, r), ...s.map((o) => Wu(i, ep(o))));
    }
    toString() {
      return `au:ca:${this.name}`;
    }
  }
  qd.warnDuplicate = !0;
  const fr = "custom-attribute", bp = /* @__PURE__ */ gf(fr), ep = (n) => `${bp}:${n}`, Vl = (n, e) => dr(kc(e), n), ine = (n) => {
    var e;
    return jt(n) && (WR(bp, n) || ((e = n.$au) == null ? void 0 : e.type) === fr);
  }, xz = (n, e) => Vg(n, ep(e)) ?? void 0, FO = (n, e) => {
    const t = qd.create(n, e), i = t.Type;
    return ta(t, i, bp, Ya), i;
  }, BO = (n) => {
    const e = dr(bp, n) ?? ju(n, fr, qd.create);
    if (e === void 0)
      throw Me(759, n);
    return e;
  }, rne = (n, e) => {
    let t = "", i = "";
    if (yt(e))
      t = ep(e), i = e;
    else {
      const s = BO(e);
      t = s.key, i = s.name;
    }
    let r = n;
    for (; r !== null; ) {
      const s = Vg(r, t);
      if (s != null && s.is(i))
        return s;
      r = s_(r);
    }
    return null;
  }, VO = /* @__PURE__ */ Dc({
    name: bp,
    keyFrom: ep,
    isType: ine,
    for: xz,
    closest: rne,
    define: FO,
    getDefinition: BO,
    annotate(n, e, t) {
      ta(t, n, kc(e));
    },
    getAnnotation: Vl,
    find(n, e) {
      const t = n.find(fr, e);
      return t === null ? null : dr(bp, t) ?? ju(t, fr, qd.create) ?? null;
    }
  }), Lf = /* @__PURE__ */ zn("ILifecycleHooks");
  class sne {
    constructor(e, t) {
      this.definition = e, this.instance = t;
    }
  }
  class WO {
    constructor(e, t) {
      this.Type = e, this.propertyNames = t;
    }
    /**
     * @param def - Placeholder for future extensions. Currently always an empty object.
     */
    static create(e, t) {
      const i = /* @__PURE__ */ new Set();
      let r = t.prototype;
      for (; r !== dz; ) {
        for (const s of gz(r))
          s !== "constructor" && !s.startsWith("_") && i.add(s);
        r = Object.getPrototypeOf(r);
      }
      return new WO(t, i);
    }
  }
  const V$ = /* @__PURE__ */ (() => {
    const n = /* @__PURE__ */ new WeakMap(), e = /* @__PURE__ */ new WeakMap();
    return Dc({
      // name: lhBaseName,
      /**
       * @param def - Placeholder for future extensions. Currently always an empty object.
       */
      define(t, i) {
        const r = WO.create(t, i), s = r.Type;
        return e.set(s, r), {
          register(o) {
            pl(Lf, s).register(o);
          }
        };
      },
      /**
       * @param ctx - The container where the resolution starts
       * @param Type - The constructor of the Custom element/ Custom attribute with lifecycle metadata
       */
      resolve(t) {
        let i = n.get(t);
        if (i === void 0) {
          n.set(t, i = new one());
          const r = t.root, s = r === t ? t.getAll(Lf) : t.has(Lf, !1) ? r.getAll(Lf).concat(t.getAll(Lf)) : r.getAll(Lf);
          let o, a, l, c, u;
          for (o of s) {
            a = e.get(o.constructor), l = new sne(a, o);
            for (c of a.propertyNames)
              u = i[c], u === void 0 ? i[c] = [l] : u.push(l);
          }
        }
        return i;
      }
    });
  })();
  class one {
  }
  class av {
    constructor(e, t, i, r) {
      this.Type = e, this.name = t, this.aliases = i, this.key = r;
    }
    static create(e, t) {
      let i, r;
      return yt(e) ? (i = e, r = { name: i }) : (i = e.name, r = e), new av(t, mu(VA(t, "name"), i), hi(VA(t, "aliases"), r.aliases, t.aliases), Tz.keyFrom(i));
    }
    register(e, t) {
      const i = this.Type, r = typeof t == "string" ? lv(t) : this.key, s = this.aliases;
      e.has(r, !1) ? console.warn(`[DEV:aurelia] ${Me(155, this.name)}`) : e.register(e.has(i, !1) ? null : pl(i, i), Wu(i, r), ...s.map((o) => Wu(i, lv(o))));
    }
  }
  const Lg = "value-converter", Tg = /* @__PURE__ */ gf(Lg), VA = (n, e) => dr(kc(e), n), lv = (n) => `${Tg}:${n}`, Tz = Dc({
    name: Tg,
    keyFrom: lv,
    isType(n) {
      var e;
      return jt(n) && (WR(Tg, n) || ((e = n.$au) == null ? void 0 : e.type) === Lg);
    },
    define(n, e) {
      const t = av.create(n, e), i = t.Type;
      return ta(t, i, Tg, Ya), i;
    },
    getDefinition(n) {
      const e = dr(Tg, n) ?? ju(n, Lg, av.create);
      if (e === void 0)
        throw Me(152, n);
      return e;
    },
    annotate(n, e, t) {
      ta(t, n, kc(e));
    },
    getAnnotation: VA,
    find(n, e) {
      const t = n.find(Lg, e);
      return t == null ? null : dr(Tg, t) ?? ju(t, Lg, av.create) ?? null;
    },
    get(n, e) {
      try {
        return n.get(pp(lv(e)));
      } catch (t) {
        throw console.error("[DEV:aurelia] Cannot retrieve value converter with name", e), t;
      }
      return n.get(pp(lv(e)));
    }
  });
  class ane {
    constructor(e, t) {
      this._value = void 0, this.b = e, this._flushQueue = t;
    }
    flush() {
      this.b.updateSource(this._value);
    }
    // deepscan-disable-next-line
    handleChange(e, t) {
      const i = this.b;
      e !== kn(i.ast, i._scope, i, null) && (this._value = e, this._flushQueue.add(this));
    }
  }
  const mf = /* @__PURE__ */ (() => {
    function n(e) {
      this._scope = e;
    }
    return (e) => {
      bs(e.prototype, "useScope", n);
    };
  })(), Nc = /* @__PURE__ */ (() => {
    class n {
    }
    const e = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap(), i = /* @__PURE__ */ new WeakMap();
    function r(d) {
      return this.l.get(d);
    }
    function s(d, f) {
      let g = t.get(d);
      return g == null && t.set(d, g = new n()), g[f] ?? (g[f] = vz.get(d.l, f));
    }
    function o(d, f, g) {
      var v;
      const p = s(this, d);
      if (p == null)
        throw Me(101, d);
      let m = i.get(this);
      if (m == null && i.set(this, m = {}), m[d])
        throw Me(102, d);
      (v = p.bind) == null || v.call(p, f, this, ...g);
    }
    function a(d, f) {
      var m;
      const g = s(this, d), p = i.get(this);
      (m = g == null ? void 0 : g.unbind) == null || m.call(g, f, this), p != null && (p[d] = !1);
    }
    function l(d, f) {
      let g = e.get(d);
      return g == null && e.set(d, g = new n()), g[f] ?? (g[f] = Tz.get(d.l, f));
    }
    function c(d) {
      const f = l(this, d);
      if (f == null)
        throw Me(103, d);
      const g = f.signals;
      if (g != null) {
        const p = this.l.get(n_), m = g.length;
        let v = 0;
        for (; v < m; ++v)
          p.addSignalListener(g[v], this);
      }
    }
    function u(d) {
      const f = l(this, d);
      if ((f == null ? void 0 : f.signals) === void 0)
        return;
      const g = this.l.get(n_);
      let p = 0;
      for (; p < f.signals.length; ++p)
        g.removeSignalListener(f.signals[p], this);
    }
    function h(d, f, g, p) {
      var v;
      const m = l(this, d);
      if (m == null)
        throw Me(103, d);
      switch (f) {
        case "toView":
          return "toView" in m ? m.toView(g, ...p) : g;
        case "fromView":
          return "fromView" in m ? (v = m.fromView) == null ? void 0 : v.call(m, g, ...p) : g;
      }
    }
    return (d) => {
      const f = d.prototype;
      bs(f, "get", r), bs(f, "bindBehavior", o), bs(f, "unbindBehavior", a), bs(f, "bindConverter", c), bs(f, "unbindConverter", u), bs(f, "useConverter", h);
    };
  })(), lne = /* @__PURE__ */ zn("IFlushQueue", (n) => n.singleton(cne));
  class cne {
    constructor() {
      this._flushing = !1, this._items = /* @__PURE__ */ new Set();
    }
    get count() {
      return this._items.size;
    }
    add(e) {
      if (this._items.add(e), !this._flushing) {
        this._flushing = !0;
        try {
          this._items.forEach(une);
        } finally {
          this._flushing = !1;
        }
      }
    }
    clear() {
      this._items.clear(), this._flushing = !1;
    }
  }
  const une = function(n, e, t) {
    t.delete(n), n.flush();
  }, bf = /* @__PURE__ */ (() => {
    const n = /* @__PURE__ */ new WeakSet(), e = (i, r, s) => {
      let o, a, l, c = !1;
      const u = i.queue, h = () => r(l), d = (g) => {
        l = g, s.isBound ? (a = o, o = u.queueTask(h, { delay: i.delay }), a == null || a.cancel()) : h();
      }, f = d.dispose = () => {
        a == null || a.cancel(), o == null || o.cancel(), a = o = void 0;
      };
      return d.flush = () => {
        c = (o == null ? void 0 : o.status) === F$, f(), c && h();
      }, d;
    }, t = (i, r, s) => {
      let o, a, l = 0, c = 0, u, h = !1;
      const d = i.queue, f = () => i.now(), g = () => r(u), p = (v) => {
        u = v, s.isBound ? (c = f() - l, a = o, c > i.delay ? (l = f(), g()) : o = d.queueTask(() => {
          l = f(), g();
        }, { delay: i.delay - c }), a == null || a.cancel()) : g();
      }, m = p.dispose = () => {
        a == null || a.cancel(), o == null || o.cancel(), a = o = void 0;
      };
      return p.flush = () => {
        h = (o == null ? void 0 : o.status) === F$, m(), h && g();
      }, p;
    };
    return (i, r) => {
      bs(i.prototype, "limit", function(s) {
        if (n.has(this))
          throw Me(
            9996
            /* ErrorNames.binding_already_has_rate_limited */
          );
        n.add(this);
        const o = r(this, s), a = s.signals, l = a.length > 0 ? this.get(n_) : null, c = this[o], u = (...f) => c.call(this, ...f), h = s.type === "debounce" ? e(s, u, this) : t(s, u, this), d = l ? { handleChange: h.flush } : null;
        return this[o] = h, l && a.forEach((f) => mz(l, f, d)), {
          dispose: () => {
            l && a.forEach((f) => bz(l, f, d)), n.delete(this), h.dispose(), delete this[o];
          }
        };
      });
    };
  })(), ih = /* @__PURE__ */ ((n = /* @__PURE__ */ new WeakSet()) => (e) => function() {
    n.has(this) || (n.add(this), e.call(this));
  })(), hne = {
    preempt: !0
  };
  class fd {
    constructor(e, t, i, r, s, o, a, l, c, u) {
      this.targetAttribute = a, this.targetProperty = l, this.mode = c, this.strict = u, this.isBound = !1, this._scope = void 0, this._task = null, this._value = void 0, this.boundFn = !1, this.l = t, this.ast = s, this._controller = e, this.target = o, this.oL = i, this._taskQueue = r;
    }
    updateTarget(e) {
      const t = this.target, i = this.targetAttribute, r = this.targetProperty;
      switch (i) {
        case "class":
          t.classList.toggle(r, !!e);
          break;
        case "style": {
          let s = "", o = Kd(e);
          yt(o) && o.includes("!important") && (s = "important", o = o.replace("!important", "")), t.style.setProperty(r, o, s);
          break;
        }
        default:
          e == null ? t.removeAttribute(i) : t.setAttribute(i, Kd(e));
      }
    }
    handleChange() {
      if (!this.isBound)
        return;
      let e;
      this.obs.version++;
      const t = kn(
        this.ast,
        this._scope,
        this,
        // should observe?
        (this.mode & Jn) > 0 ? this : null
      );
      this.obs.clear(), t !== this._value && (this._value = t, this._controller.state !== vs ? (e = this._task, this._task = this._taskQueue.queueTask(() => {
        this._task = null, this.updateTarget(t);
      }, hne), e == null || e.cancel()) : this.updateTarget(t));
    }
    // todo: based off collection and handle update accordingly instead off always start
    handleCollectionChange() {
      this.handleChange();
    }
    bind(e) {
      if (this.isBound) {
        if (this._scope === e)
          return;
        this.unbind();
      }
      this._scope = e, eh(this.ast, e, this), this.mode & (Jn | VR) && this.updateTarget(this._value = kn(
        this.ast,
        e,
        this,
        /* should connect? */
        (this.mode & Jn) > 0 ? this : null
      )), this.isBound = !0;
    }
    unbind() {
      var e;
      this.isBound && (this.isBound = !1, th(this.ast, this._scope, this), this._scope = void 0, this._value = void 0, (e = this._task) == null || e.cancel(), this._task = null, this.obs.clearAll());
    }
  }
  fd.mix = ih(() => {
    mf(fd), bf(fd, () => "updateTarget"), oa(fd, null), Nc(fd);
  });
  const dne = {
    preempt: !0
  };
  class fne {
    constructor(e, t, i, r, s, o, a, l, c) {
      this.ast = s, this.target = o, this.targetProperty = a, this.mode = l, this.strict = c, this.isBound = !1, this._scope = void 0, this._task = null, this._controller = e, this.oL = i, this._taskQueue = r, this._targetObserver = i.getAccessor(o, a);
      const u = s.expressions, h = this.partBindings = Array(u.length), d = u.length;
      let f = 0;
      for (; d > f; ++f)
        h[f] = new gd(u[f], o, a, t, i, c, this);
    }
    /** @internal */
    _handlePartChange() {
      this.updateTarget();
    }
    updateTarget() {
      const e = this.partBindings, t = this.ast.parts, i = e.length;
      let r = "", s = 0;
      if (i === 1)
        r = t[0] + e[0]._value + t[1];
      else
        for (r = t[0]; i > s; ++s)
          r += e[s]._value + t[s + 1];
      const o = this._targetObserver, a = this._controller.state !== vs && (o.type & gl) > 0;
      let l;
      a ? (l = this._task, this._task = this._taskQueue.queueTask(() => {
        this._task = null, o.setValue(r, this.target, this.targetProperty);
      }, dne), l == null || l.cancel(), l = null) : o.setValue(r, this.target, this.targetProperty);
    }
    bind(e) {
      if (this.isBound) {
        if (this._scope === e)
          return;
        this.unbind();
      }
      this._scope = e;
      const t = this.partBindings, i = t.length;
      let r = 0;
      for (; i > r; ++r)
        t[r].bind(e);
      this.updateTarget(), this.isBound = !0;
    }
    unbind() {
      var r;
      if (!this.isBound)
        return;
      this.isBound = !1, this._scope = void 0;
      const e = this.partBindings, t = e.length;
      let i = 0;
      for (; t > i; ++i)
        e[i].unbind();
      (r = this._task) == null || r.cancel(), this._task = null;
    }
    /**
     * Start using a given observer to update the target
     */
    useAccessor(e) {
      this._targetObserver = e;
    }
  }
  class gd {
    constructor(e, t, i, r, s, o, a) {
      this.ast = e, this.target = t, this.targetProperty = i, this.strict = o, this.owner = a, this.mode = Jn, this.task = null, this.isBound = !1, this._value = "", this.boundFn = !1, this.l = r, this.oL = s;
    }
    updateTarget() {
      this.owner._handlePartChange();
    }
    handleChange() {
      if (!this.isBound)
        return;
      this.obs.version++;
      const e = kn(
        this.ast,
        this._scope,
        this,
        // should observe?
        (this.mode & Jn) > 0 ? this : null
      );
      this.obs.clear(), e != this._value && (this._value = e, oi(e) && this.observeCollection(e), this.updateTarget());
    }
    handleCollectionChange() {
      this.updateTarget();
    }
    bind(e) {
      if (this.isBound) {
        if (this._scope === e)
          return;
        this.unbind();
      }
      this._scope = e, eh(this.ast, e, this), this._value = kn(this.ast, this._scope, this, (this.mode & Jn) > 0 ? this : null), oi(this._value) && this.observeCollection(this._value), this.isBound = !0;
    }
    unbind() {
      this.isBound && (this.isBound = !1, th(this.ast, this._scope, this), this._scope = void 0, this.obs.clearAll());
    }
  }
  gd.mix = ih(() => {
    mf(gd), bf(gd, () => "updateTarget"), oa(gd, null), Nc(gd);
  });
  const gne = {
    preempt: !0
  };
  class pd {
    constructor(e, t, i, r, s, o, a, l) {
      this.p = s, this.ast = o, this.target = a, this.strict = l, this.isBound = !1, this.mode = Jn, this._task = null, this._value = "", this._needsRemoveNode = !1, this.boundFn = !1, this.l = t, this._controller = e, this.oL = i, this._taskQueue = r;
    }
    updateTarget(e) {
      var r, s;
      const t = this.target, i = this._value;
      this._value = e, this._needsRemoveNode && ((r = i.parentNode) == null || r.removeChild(i), this._needsRemoveNode = !1), e instanceof this.p.Node && ((s = t.parentNode) == null || s.insertBefore(e, t), e = "", this._needsRemoveNode = !0), t.textContent = Kd(e ?? "");
    }
    handleChange() {
      var i;
      if (!this.isBound)
        return;
      this.obs.version++;
      const e = kn(
        this.ast,
        this._scope,
        this,
        // should observe?
        (this.mode & Jn) > 0 ? this : null
      );
      if (this.obs.clear(), e === this._value) {
        (i = this._task) == null || i.cancel(), this._task = null;
        return;
      }
      this._controller.state !== vs ? this._queueUpdate(e) : this.updateTarget(e);
    }
    handleCollectionChange() {
      if (!this.isBound)
        return;
      this.obs.version++;
      const e = this._value = kn(this.ast, this._scope, this, (this.mode & Jn) > 0 ? this : null);
      this.obs.clear(), oi(e) && this.observeCollection(e), this._controller.state !== vs ? this._queueUpdate(e) : this.updateTarget(e);
    }
    bind(e) {
      if (this.isBound) {
        if (this._scope === e)
          return;
        this.unbind();
      }
      this._scope = e, eh(this.ast, e, this);
      const t = this._value = kn(this.ast, this._scope, this, (this.mode & Jn) > 0 ? this : null);
      oi(t) && this.observeCollection(t), this.updateTarget(t), this.isBound = !0;
    }
    unbind() {
      var e, t;
      this.isBound && (this.isBound = !1, th(this.ast, this._scope, this), this._needsRemoveNode && ((e = this._value.parentNode) == null || e.removeChild(this._value)), this._scope = void 0, this.obs.clearAll(), (t = this._task) == null || t.cancel(), this._task = null);
    }
    // queue a force update
    /** @internal */
    _queueUpdate(e) {
      const t = this._task;
      this._task = this._taskQueue.queueTask(() => {
        this._task = null, this.updateTarget(e);
      }, gne), t == null || t.cancel();
    }
  }
  pd.mix = ih(() => {
    mf(pd), bf(pd, () => "updateTarget"), oa(pd, null), Nc(pd);
  });
  class md {
    constructor(e, t, i, r, s, o) {
      this.ast = i, this.targetProperty = r, this.isBound = !1, this._scope = void 0, this.target = null, this.boundFn = !1, this.l = e, this.oL = t, this.strict = o, this._toBindingContext = s;
    }
    updateTarget() {
      this.target[this.targetProperty] = this._value;
    }
    handleChange() {
      this.isBound && (this.obs.version++, this._value = kn(this.ast, this._scope, this, this), this.obs.clear(), this.updateTarget());
    }
    handleCollectionChange() {
      this.handleChange();
    }
    bind(e) {
      if (this.isBound) {
        if (this._scope === e)
          return;
        this.unbind();
      }
      this._scope = e, this.target = this._toBindingContext ? e.bindingContext : e.overrideContext, eh(this.ast, e, this), this._value = kn(this.ast, this._scope, this, this), this.updateTarget(), this.isBound = !0;
    }
    unbind() {
      this.isBound && (this.isBound = !1, th(this.ast, this._scope, this), this._scope = void 0, this.obs.clearAll());
    }
  }
  md.mix = ih(() => {
    mf(md), bf(md, () => "updateTarget"), oa(md, null), Nc(md);
  });
  class Ar {
    constructor(e, t, i, r, s, o, a, l, c) {
      this.ast = s, this.target = o, this.targetProperty = a, this.mode = l, this.strict = c, this.isBound = !1, this._scope = void 0, this._targetObserver = void 0, this._task = null, this._targetSubscriber = null, this.boundFn = !1, this.l = t, this._controller = e, this._taskQueue = r, this.oL = i;
    }
    updateTarget(e) {
      this._targetObserver.setValue(e, this.target, this.targetProperty);
    }
    updateSource(e) {
      Qv(this.ast, this._scope, this, e);
    }
    handleChange() {
      if (!this.isBound)
        return;
      this.obs.version++;
      const e = kn(
        this.ast,
        this._scope,
        this,
        // should observe?
        (this.mode & Jn) > 0 ? this : null
      );
      this.obs.clear(), this._controller.state !== vs && (this._targetObserver.type & gl) > 0 ? (bm = this._task, this._task = this._taskQueue.queueTask(() => {
        this.updateTarget(e), this._task = null;
      }, pne), bm == null || bm.cancel(), bm = null) : this.updateTarget(e);
    }
    // todo: based off collection and handle update accordingly instead off always start
    handleCollectionChange() {
      this.handleChange();
    }
    bind(e) {
      if (this.isBound) {
        if (this._scope === e)
          return;
        this.unbind();
      }
      this._scope = e, eh(this.ast, e, this);
      const t = this.oL, i = this.mode;
      let r = this._targetObserver;
      r || (i & Rc ? r = t.getObserver(this.target, this.targetProperty) : r = t.getAccessor(this.target, this.targetProperty), this._targetObserver = r);
      const s = (i & Jn) > 0;
      i & (Jn | VR) && this.updateTarget(kn(this.ast, this._scope, this, s ? this : null)), i & Rc && (r.subscribe(this._targetSubscriber ?? (this._targetSubscriber = new ane(this, this.l.get(lne)))), s || this.updateSource(r.getValue(this.target, this.targetProperty))), this.isBound = !0;
    }
    unbind() {
      var e;
      this.isBound && (this.isBound = !1, th(this.ast, this._scope, this), this._scope = void 0, this._targetSubscriber && (this._targetObserver.unsubscribe(this._targetSubscriber), this._targetSubscriber = null), (e = this._task) == null || e.cancel(), this._task = null, this.obs.clearAll());
    }
    /**
     * Start using a given observer to listen to changes on the target of this binding
     */
    useTargetObserver(e) {
      var t;
      (t = this._targetObserver) == null || t.unsubscribe(this), (this._targetObserver = e).subscribe(this);
    }
    /**
     * Provide a subscriber for target change observation.
     *
     * Binding behaviors can use this to setup custom observation handling during bind lifecycle
     * to alter the update source behavior during bind phase of this binding.
     */
    useTargetSubscriber(e) {
      if (this._targetSubscriber != null)
        throw Me(
          9995
          /* ErrorNames.binding_already_has_target_subscriber */
        );
      this._targetSubscriber = e;
    }
  }
  Ar.mix = ih(() => {
    mf(Ar), bf(Ar, (n) => n.mode & Rc ? "updateSource" : "updateTarget"), oa(Ar, null), Nc(Ar);
  });
  let bm = null;
  const pne = {
    preempt: !0
  };
  class WA {
    constructor(e, t, i, r) {
      this.ast = t, this.target = i, this.strict = r, this.isBound = !1, this._scope = void 0, this.l = e;
    }
    bind(e) {
      if (this.isBound) {
        if (this._scope === e)
          return;
        this.unbind();
      }
      this._scope = e, eh(this.ast, e, this), Qv(this.ast, this._scope, this, this.target), this.isBound = !0;
    }
    unbind() {
      this.isBound && (this.isBound = !1, kn(this.ast, this._scope, this, null) === this.target && Qv(this.ast, this._scope, this, null), th(this.ast, this._scope, this), this._scope = void 0);
    }
  }
  WA.mix = ih(() => {
    Nc(WA);
  });
  class mne {
    constructor(e, t = !1, i) {
      this.prevent = e, this.capture = t, this.onError = i;
    }
  }
  class Hg {
    constructor(e, t, i, r, s, o, a) {
      this.ast = t, this.target = i, this.targetEvent = r, this.strict = a, this.isBound = !1, this.self = !1, this.boundFn = !0, this._modifiedEventHandler = null, this.l = e, this._options = s, this._modifiedEventHandler = o;
    }
    callSource(e) {
      const t = this._scope.overrideContext;
      t.$event = e;
      let i = kn(this.ast, this._scope, this, null);
      delete t.$event, jt(i) && (i = i(e)), i !== !0 && this._options.prevent && e.preventDefault();
    }
    handleEvent(e) {
      var t;
      if (!(this.self && this.target !== e.composedPath()[0]) && ((t = this._modifiedEventHandler) == null ? void 0 : t.call(this, e)) !== !1)
        try {
          this.callSource(e);
        } catch (i) {
          this._options.onError(e, i);
        }
    }
    bind(e) {
      if (this.isBound) {
        if (this._scope === e)
          return;
        this.unbind();
      }
      this._scope = e, eh(this.ast, e, this), this.target.addEventListener(this.targetEvent, this, this._options), this.isBound = !0;
    }
    unbind() {
      this.isBound && (this.isBound = !1, th(this.ast, this._scope, this), this._scope = void 0, this.target.removeEventListener(this.targetEvent, this, this._options));
    }
  }
  Hg.mix = ih(function() {
    mf(Hg), bf(Hg, () => "callSource"), Nc(Hg);
  });
  const UR = /* @__PURE__ */ zn("IEventModifier"), Mz = /* @__PURE__ */ zn("IKeyMapping", (n) => n.instance({
    meta: Dc(["ctrl", "alt", "shift", "meta"]),
    keys: {
      escape: "Escape",
      enter: "Enter",
      space: "Space",
      tab: "tab",
      // by default, maps the key a-z and A-Z to their respective keycodes
      ...Array.from({ length: 25 }).reduce((e, t, i) => {
        let r = String.fromCharCode(i + 65);
        return e[i + 65] = r, r = String.fromCharCode(i + 97), e[i + 97] = e[r] = r, e;
      }, {})
    }
  }));
  class jO {
    constructor() {
      this.type = ["click", "mousedown", "mousemove", "mouseup", "dblclick", "contextmenu"], this._mapping = ge(Mz), this._mouseButtons = ["left", "middle", "right"];
    }
    static register(e) {
      e.register(pl(UR, jO));
    }
    getHandler(e) {
      const t = e.split(/[:+.]/);
      return (i) => {
        let r = !1, s = !1, o;
        for (o of t) {
          switch (o) {
            case "prevent":
              r = !0;
              continue;
            case "stop":
              s = !0;
              continue;
            case "left":
            case "middle":
            case "right":
              if (i.button !== this._mouseButtons.indexOf(o))
                return !1;
              continue;
          }
          if (this._mapping.meta.includes(o) && i[`${o}Key`] !== !0)
            return !1;
          console.warn(`Modifier '${o}' is not supported for mouse events.`);
        }
        return r && i.preventDefault(), s && i.stopPropagation(), !0;
      };
    }
  }
  class zO {
    constructor() {
      this._mapping = ge(Mz), this.type = ["keydown", "keyup"];
    }
    static register(e) {
      e.register(pl(UR, zO));
    }
    getHandler(e) {
      const t = e.split(/[:+.]/);
      return (i) => {
        let r = !1, s = !1, o;
        for (o of t) {
          switch (o) {
            case "prevent":
              r = !0;
              continue;
            case "stop":
              s = !0;
              continue;
          }
          if (this._mapping.meta.includes(o)) {
            if (i[`${o}Key`] !== !0)
              return !1;
            continue;
          }
          if (this._mapping.keys[o] !== i.key)
            return !1;
          console.warn(`Modifier '${o}' is not supported for keyboard event with key "${i.key}".`);
        }
        return r && i.preventDefault(), s && i.stopPropagation(), !0;
      };
    }
  }
  class UO {
    constructor() {
      this.type = ["$ALL"];
    }
    static register(e) {
      e.register(pl(UR, UO));
    }
    getHandler(e) {
      const t = e.split(/[:+.]/);
      return (i) => {
        let r = !1, s = !1, o;
        for (o of t) {
          switch (o) {
            case "prevent":
              r = !0;
              continue;
            case "stop":
              s = !0;
              continue;
          }
          console.warn(`Modifier '${o}' is not supported for event "${i.type}".`);
        }
        return r && i.preventDefault(), s && i.stopPropagation(), !0;
      };
    }
  }
  const Az = /* @__PURE__ */ zn("IEventModifierHandler", (n) => n.instance({
    getHandler: () => (console.warn("No event modifier handler registered"), null)
  }));
  class GO {
    constructor() {
      this._reg = ge(hO(UR)).reduce((e, t) => ((oi(t.type) ? t.type : [t.type]).forEach((r) => e[r] = t), e), {});
    }
    static register(e) {
      e.register(pl(Az, GO));
    }
    getHandler(e, t) {
      var i;
      return yt(t) ? ((i = this._reg[e] ?? this._reg.$ALL) == null ? void 0 : i.getHandler(t)) ?? null : null;
    }
  }
  const bne = {
    register(n) {
      n.register(GO, jO, zO, UO);
    }
  }, xs = /* @__PURE__ */ zn("IViewFactory");
  class GR {
    constructor(e, t) {
      this.isCaching = !1, this._cache = null, this._cacheSize = -1, this.name = t.name, this.container = e, this.def = t;
    }
    setCacheSize(e, t) {
      e && (e === "*" ? e = GR.maxCacheSize : yt(e) && (e = parseInt(e, 10)), (this._cacheSize === -1 || !t) && (this._cacheSize = e)), this._cacheSize > 0 ? this._cache = [] : this._cache = null, this.isCaching = this._cacheSize > 0;
    }
    canReturnToCache(e) {
      return this._cache != null && this._cache.length < this._cacheSize;
    }
    tryReturnToCache(e) {
      return this.canReturnToCache(e) ? (this._cache.push(e), !0) : !1;
    }
    create(e) {
      const t = this._cache;
      let i;
      return t != null && t.length > 0 ? (i = t.pop(), i) : (i = ys.$view(this, e), i);
    }
  }
  GR.maxCacheSize = 65535;
  const vne = /* @__PURE__ */ (() => {
    const n = (e, t) => e.document.createComment(t);
    return (e) => {
      const t = n(e, "au-end");
      return t.$start = n(e, "au-start"), t;
    };
  })(), ky = (n, e, t) => {
    if (n === null)
      return;
    const i = t.length;
    let r = 0;
    for (; i > r; )
      n.insertBefore(t[r], e), ++r;
  }, Pz = (n, e) => new n.ownerDocument.defaultView.MutationObserver(e), wne = (n) => n.nodeType === 1, Iz = "default", yne = "au-slot", Oz = /* @__PURE__ */ zn("IAuSlotsInfo");
  class kz {
    constructor(e) {
      this.projectedSlots = e;
    }
  }
  const Cne = /* @__PURE__ */ zn("IAuSlotWatcher");
  class YR {
    /**
     * Create a list of SpreadBinding by searching for captured attributes in HydrationContexts
     * from a container
     */
    static create(e, t, i, r, s, o, a, l) {
      const c = [], u = r.renderers, h = (f) => {
        let g = f, p = e;
        for (; p != null && g > 0; )
          p = p.parent, --g;
        if (p == null)
          throw Me(
            9999
            /* ErrorNames.no_spread_scope_context_found */
          );
        return p;
      }, d = (f) => {
        var y;
        const g = h(f), p = new YR(g), m = s.compileSpread(g.controller.definition, ((y = g.instruction) == null ? void 0 : y.captures) ?? pt, g.controller.container, t, i);
        let v;
        for (v of m)
          switch (v.type) {
            case gi.spreadTransferedBinding:
              d(f + 1);
              break;
            case gi.spreadElementProp:
              u[v.instruction.type].render(p, Od(t), v.instruction, o, a, l);
              break;
            default:
              u[v.type].render(p, t, v, o, a, l);
          }
        c.push(p);
      };
      return d(0), c;
    }
    get container() {
      return this.locator;
    }
    get definition() {
      return this.$controller.definition;
    }
    get state() {
      return this.$controller.state;
    }
    constructor(e) {
      this.isBound = !1, this._innerBindings = [], this.locator = (this.$controller = (this._hydrationContext = e).controller).container;
    }
    get(e) {
      return this.locator.get(e);
    }
    bind(e) {
      if (this.isBound)
        return;
      this.isBound = !0;
      const t = this.scope = this._hydrationContext.controller.scope.parent ?? void 0;
      if (t == null)
        throw Me(
          9999
          /* ErrorNames.no_spread_scope_context_found */
        );
      this._innerBindings.forEach((i) => i.bind(t));
    }
    unbind() {
      this._innerBindings.forEach((e) => e.unbind()), this.isBound = !1;
    }
    addBinding(e) {
      this._innerBindings.push(e);
    }
    addChild(e) {
      if (e.vmKind !== ld)
        throw Me(
          9998
          /* ErrorNames.no_spread_template_controller */
        );
      this.$controller.addChild(e);
    }
  }
  class Ba {
    constructor(e, t, i, r, s, o, a, l) {
      this.target = t, this.targetKeys = i, this.ast = r, this.strict = l, this.isBound = !1, this._scope = void 0, this.boundFn = !1, this._bindingCache = {}, this._scopeCache = /* @__PURE__ */ new WeakMap(), this._controller = e, this.oL = s, this.l = o, this._taskQueue = a;
    }
    updateTarget() {
      this.obs.version++;
      const e = kn(this.ast, this._scope, this, this);
      this.obs.clear(), this._createBindings(e, !0);
    }
    handleChange() {
      this.isBound && this.updateTarget();
    }
    handleCollectionChange() {
      this.isBound && this.updateTarget();
    }
    bind(e) {
      if (this.isBound) {
        if (e === this._scope)
          return;
        this.unbind();
      }
      this.isBound = !0, this._scope = e, eh(this.ast, e, this);
      const t = kn(this.ast, e, this, this);
      this._createBindings(t, !1);
    }
    unbind() {
      if (!this.isBound)
        return;
      this.isBound = !1, th(this.ast, this._scope, this), this._scope = void 0;
      let e;
      for (e in this._bindingCache)
        this._bindingCache[e].unbind();
    }
    /**
     * @internal
     */
    _createBindings(e, t) {
      var o, a;
      let i;
      if (!k6(e)) {
        console.warn(`[DEV:aurelia] $bindable spread is given a non object for properties: "${this.targetKeys.join(", ")}" of ${this.target.constructor.name}`);
        for (i in this._bindingCache)
          (o = this._bindingCache[i]) == null || o.unbind();
        return;
      }
      let r, s = this._scopeCache.get(e);
      s == null && this._scopeCache.set(e, s = fi.fromParent(this._scope, e));
      for (i of this.targetKeys)
        r = this._bindingCache[i], i in e ? (r == null && (r = this._bindingCache[i] = new Ar(this._controller, this.l, this.oL, this._taskQueue, (a = Ba._astCache)[i] ?? (a[i] = new nv(i, 0)), this.target, i, Lw.toView, this.strict)), r.bind(s)) : t && (r == null || r.unbind());
    }
  }
  Ba.mix = ih(() => {
    mf(Ba), bf(Ba, () => "updateTarget"), oa(Ba, null), Nc(Ba);
  });
  Ba._astCache = {};
  const W$ = (n, e, t, i) => {
    n.addEventListener(e, t, i);
  }, j$ = (n, e, t, i) => {
    n.removeEventListener(e, t, i);
  }, YO = (n) => {
    let e;
    const t = n.prototype;
    bs(t, "subscribe", function(i) {
      var r;
      if (this.subs.add(i) && this.subs.count === 1) {
        for (e of this._config.events)
          W$(this._el, e, this);
        this._listened = !0, (r = this._start) == null || r.call(this);
      }
    }), bs(t, "unsubscribe", function(i) {
      var r;
      if (this.subs.remove(i) && this.subs.count === 0) {
        for (e of this._config.events)
          j$(this._el, e, this);
        this._listened = !1, (r = this._stop) == null || r.call(this);
      }
    }), bs(t, "useConfig", function(i) {
      if (this._config = i, this._listened) {
        for (e of this._config.events)
          j$(this._el, e, this);
        for (e of this._config.events)
          W$(this._el, e, this);
      }
    });
  }, KR = (n) => {
    bs(n.prototype, "subscribe", Za), bs(n.prototype, "unsubscribe", Za);
  };
  class qR {
    get doNotCache() {
      return !0;
    }
    constructor(e, t = {}) {
      this.obj = e, this.mapping = t, this.type = nh | gl, this._value = "", this._nameIndex = {}, this._version = 0;
    }
    getValue() {
      return this._value;
    }
    setValue(e) {
      e !== this._value && (this._value = e, this._flushChanges());
    }
    /** @internal */
    _flushChanges() {
      const e = this._nameIndex, t = ++this._version, i = this.obj.classList, r = Dz(this._value), s = r.length;
      let o = 0, a;
      if (s > 0)
        for (; o < s; o++)
          a = r[o], a = this.mapping[a] || a, a.length !== 0 && (e[a] = this._version, i.add(a));
      if (t !== 1)
        for (a in e)
          a = this.mapping[a] || a, e[a] !== t && i.remove(a);
    }
  }
  KR(qR);
  function Dz(n) {
    if (yt(n))
      return z$(n);
    if (typeof n != "object")
      return pt;
    if (oi(n)) {
      const i = n.length;
      if (i > 0) {
        const r = [];
        let s = 0;
        for (; i > s; ++s)
          r.push(...Dz(n[s]));
        return r;
      } else
        return pt;
    }
    const e = [];
    let t;
    for (t in n)
      n[t] && (t.includes(" ") ? e.push(...z$(t)) : e.push(t));
    return e;
  }
  function z$(n) {
    const e = n.match(/\S+/g);
    return e === null ? pt : e;
  }
  const Nz = (n) => ({
    $isResolver: !0,
    resolve(e, t) {
      return t.get(Xd).controller.container.get(CQ(n));
    }
  }), Lz = /* @__PURE__ */ zn("IRenderer");
  function Fi(n, e) {
    var i;
    const t = n[i = Symbol.metadata] ?? (n[i] = /* @__PURE__ */ Object.create(null));
    return t[hl] = {
      register(r) {
        pl(Lz, n).register(r);
      }
    }, n;
  }
  function sl(n, e, t) {
    return yt(e) ? n.parse(e, t) : e;
  }
  function XR(n) {
    return n.viewModel != null ? n.viewModel : n;
  }
  function Sne(n, e) {
    if (e === "element")
      return n;
    switch (e) {
      case "controller":
        return Od(n);
      case "view":
        throw Me(
          750
          /* ErrorNames.not_supported_view_ref_api */
        );
      case "component":
        return Od(n).viewModel;
      default: {
        const t = xz(n, e);
        if (t !== void 0)
          return t.viewModel;
        const i = Od(n, { name: e });
        if (i === void 0)
          throw Me(751, e);
        return i.viewModel;
      }
    }
  }
  const _ne = /* @__PURE__ */ Fi(class {
    constructor() {
      this.target = gi.setProperty;
    }
    render(e, t, i) {
      var s;
      const r = XR(t);
      ((s = r.$observers) == null ? void 0 : s[i.to]) !== void 0 ? r.$observers[i.to].setValue(i.value) : r[i.to] = i.value;
    }
  }), Rne = /* @__PURE__ */ Fi(class {
    constructor() {
      this._rendering = ge(rh), this.target = gi.hydrateElement;
    }
    render(e, t, i, r, s, o) {
      let a, l, c;
      const u = i.res, h = i.projections, d = e.container;
      switch (typeof u) {
        case "string":
          if (a = Li.find(d, u), a == null)
            throw Me(752, i, e);
          break;
        default:
          a = u;
      }
      const g = i.containerless || a.containerless ? Jv(t) : null, p = Gne(
        /* platform         */
        r,
        /* parentController */
        e,
        /* host             */
        t,
        /* instruction      */
        i,
        /* location         */
        g,
        /* SlotsInfo      */
        h == null ? void 0 : new kz(HO(h))
      );
      l = p.invoke(a.Type), c = ys.$el(
        /* own container       */
        p,
        /* viewModel           */
        l,
        /* host                */
        t,
        /* instruction         */
        i,
        /* definition          */
        a,
        /* location            */
        g
      ), nr(t, a.key, c);
      const m = this._rendering.renderers, v = i.props, y = v.length;
      let w = 0, R;
      for (; y > w; )
        R = v[w], m[R.type].render(e, c, R, r, s, o), ++w;
      e.addChild(c);
    }
  }), Ene = /* @__PURE__ */ Fi(class {
    constructor() {
      this._rendering = ge(rh), this.target = gi.hydrateAttribute;
    }
    render(e, t, i, r, s, o) {
      let a = e.container, l;
      switch (typeof i.res) {
        case "string":
          if (l = VO.find(a, i.res), l == null)
            throw Me(753, i, e);
          break;
        default:
          l = i.res;
      }
      const c = Vz(
        /* platform         */
        r,
        /* attr definition  */
        l,
        /* parentController */
        e,
        /* host             */
        t,
        /* instruction      */
        i,
        /* viewFactory      */
        void 0,
        /* location         */
        void 0
      ), u = ys.$attr(
        /* context ct */
        c.ctn,
        /* viewModel  */
        c.vm,
        /* host       */
        t,
        /* definition */
        l
      );
      nr(t, l.key, u);
      const h = this._rendering.renderers, d = i.props, f = d.length;
      let g = 0, p;
      for (; f > g; )
        p = d[g], h[p.type].render(e, u, p, r, s, o), ++g;
      e.addChild(u);
    }
  }), xne = /* @__PURE__ */ Fi(class {
    constructor() {
      this._rendering = ge(rh), this.target = gi.hydrateTemplateController;
    }
    render(e, t, i, r, s, o) {
      var y, w;
      let a = e.container, l;
      switch (typeof i.res) {
        case "string":
          if (l = VO.find(a, i.res), l == null)
            throw Me(754, i, e);
          break;
        default:
          l = i.res;
      }
      const c = this._rendering.getViewFactory(i.def, l.containerStrategy === "new" ? a.createChild({ inheritParentResources: !0 }) : a), u = Jv(t), h = Vz(
        /* platform         */
        r,
        /* attr definition  */
        l,
        /* parentController */
        e,
        /* host             */
        t,
        /* instruction      */
        i,
        /* viewFactory      */
        c,
        /* location         */
        u
      ), d = ys.$attr(
        /* container ct */
        h.ctn,
        /* viewModel    */
        h.vm,
        /* host         */
        t,
        /* definition   */
        l
      );
      nr(u, l.key, d), (w = (y = h.vm).link) == null || w.call(y, e, d, t, i);
      const f = this._rendering.renderers, g = i.props, p = g.length;
      let m = 0, v;
      for (; p > m; )
        v = g[m], f[v.type].render(e, d, v, r, s, o), ++m;
      e.addChild(d);
    }
  }), Tne = /* @__PURE__ */ Fi(class {
    constructor() {
      this.target = gi.hydrateLetElement, md.mix();
    }
    render(e, t, i, r, s, o) {
      t.remove();
      const a = i.instructions, l = i.toBindingContext, c = e.container, u = a.length;
      let h, d, f = 0;
      for (; u > f; )
        h = a[f], d = sl(s, h.from, rl), e.addBinding(new md(c, o, d, h.to, l, e.strict ?? !1)), ++f;
    }
  }), Mne = /* @__PURE__ */ Fi(class {
    constructor() {
      this.target = gi.refBinding;
    }
    render(e, t, i, r, s) {
      e.addBinding(new WA(e.container, sl(s, i.from, rl), Sne(t, i.to), e.strict ?? !1));
    }
  }), Ane = /* @__PURE__ */ Fi(class {
    constructor() {
      this.target = gi.interpolation, gd.mix();
    }
    render(e, t, i, r, s, o) {
      const a = e.container, l = new fne(e, a, o, r.domQueue, sl(s, i.from, jte), XR(t), i.to, Jn, e.strict ?? !1);
      if (i.to === "class" && l.target.nodeType > 0) {
        const c = a.get(Nz(i_));
        l.useAccessor(new qR(l.target, c));
      }
      e.addBinding(l);
    }
  }), Pne = /* @__PURE__ */ Fi(class {
    constructor() {
      this.target = gi.propertyBinding, Ar.mix();
    }
    render(e, t, i, r, s, o) {
      const a = e.container, l = new Ar(e, a, o, r.domQueue, sl(s, i.from, rl), XR(t), i.to, i.mode, e.strict ?? !1);
      if (i.to === "class" && l.target.nodeType > 0) {
        const c = a.get(Nz(i_));
        l.useTargetObserver(new qR(l.target, c));
      }
      e.addBinding(l);
    }
  }), Ine = /* @__PURE__ */ Fi(class {
    constructor() {
      this.target = gi.iteratorBinding, Ar.mix();
    }
    render(e, t, i, r, s, o) {
      e.addBinding(new Ar(e, e.container, o, r.domQueue, sl(s, i.forOf, zte), XR(t), i.to, Jn, e.strict ?? !1));
    }
  }), One = /* @__PURE__ */ Fi(class {
    constructor() {
      this.target = gi.textBinding, pd.mix();
    }
    render(e, t, i, r, s, o) {
      e.addBinding(new pd(e, e.container, o, r.domQueue, r, sl(s, i.from, rl), t, e.strict ?? !1));
    }
  }), kne = zn("IListenerBindingOptions", (n) => n.singleton(class {
    constructor() {
      this.p = ge(ho), this.prevent = !1, this.onError = (e, t) => {
        const i = new this.p.CustomEvent("au-event-error", { cancelable: !0, detail: { event: e, error: t } });
        if (this.p.window.dispatchEvent(i), !i.defaultPrevented)
          throw t;
      };
    }
  })), Dne = /* @__PURE__ */ Fi(class {
    constructor() {
      this.target = gi.listenerBinding, this._modifierHandler = ge(Az), this._defaultOptions = ge(kne), Hg.mix();
    }
    render(e, t, i, r, s) {
      e.addBinding(new Hg(e.container, sl(s, i.from, Ute), t, i.to, new mne(this._defaultOptions.prevent, i.capture, this._defaultOptions.onError), this._modifierHandler.getHandler(i.to, i.modifier), e.strict ?? !1));
    }
  }), Nne = /* @__PURE__ */ Fi(class {
    constructor() {
      this.target = gi.setAttribute;
    }
    render(e, t, i) {
      t.setAttribute(i.to, i.value);
    }
  }), Lne = /* @__PURE__ */ Fi(class {
    constructor() {
      this.target = gi.setClassAttribute;
    }
    render(e, t, i) {
      zne(t.classList, i.value);
    }
  }), Hne = /* @__PURE__ */ Fi(class {
    constructor() {
      this.target = gi.setStyleAttribute;
    }
    render(e, t, i) {
      t.style.cssText += i.value;
    }
  }), $ne = [
    "height",
    "width",
    "border-width",
    "padding",
    "padding-left",
    "padding-right",
    "padding-top",
    "padding-right",
    "padding-inline",
    "padding-block",
    "margin",
    "margin-left",
    "margin-right",
    "margin-top",
    "margin-bottom",
    "margin-inline",
    "margin-block",
    "top",
    "right",
    "bottom",
    "left"
  ], Fne = /* @__PURE__ */ Fi(class {
    constructor() {
      this.target = gi.stylePropertyBinding, Ar.mix();
    }
    render(e, t, i, r, s, o) {
      if ($ne.includes(i.to)) {
        e.addBinding(new Bne(e, e.container, o, r.domQueue, sl(s, i.from, rl), t.style, i.to, Jn, e.strict ?? !1));
        return;
      }
      e.addBinding(new Ar(e, e.container, o, r.domQueue, sl(s, i.from, rl), t.style, i.to, Jn, e.strict ?? !1));
    }
  });
  class Bne extends Ar {
    updateTarget(e) {
      return typeof e == "number" && e > 0 && console.warn(`[DEV]: Setting number ${e} as value for style.${this.targetProperty}. Did you meant "${e}px"?`), super.updateTarget(e);
    }
  }
  const Vne = /* @__PURE__ */ Fi(class {
    constructor() {
      this.target = gi.attributeBinding, fd.mix();
    }
    render(e, t, i, r, s, o) {
      const a = e.container, l = a.has(i_, !1) ? a.get(i_) : null;
      e.addBinding(new fd(e, a, o, r.domQueue, sl(s, i.from, rl), t, i.attr, l == null ? i.to : i.to.split(/\s/g).map((c) => l[c] ?? c).join(" "), Jn, e.strict ?? !1));
    }
  }), Wne = /* @__PURE__ */ Fi(class {
    constructor() {
      this._compiler = ge(LR), this._rendering = ge(rh), this.target = gi.spreadTransferedBinding;
    }
    render(e, t, i, r, s, o) {
      YR.create(e.container.get(Xd), t, void 0, this._rendering, this._compiler, r, s, o).forEach((a) => e.addBinding(a));
    }
  }), jne = /* @__PURE__ */ Fi(class {
    constructor() {
      this.target = gi.spreadValueBinding, Ba.mix();
    }
    render(e, t, i, r, s, o) {
      const a = i.target;
      if (a === "$bindables")
        e.addBinding(new Ba(e, t.viewModel, HO(t.definition.bindables), s.parse(i.from, rl), o, e.container, r.domQueue, e.strict ?? !1));
      else
        throw Me(820, a);
    }
  });
  function zne(n, e) {
    const t = e.length;
    let i = 0;
    for (let r = 0; r < t; ++r)
      e.charCodeAt(r) === 32 ? (r !== i && n.add(e.slice(i, r)), i = r + 1) : r + 1 === t && n.add(e.slice(i));
  }
  const Hz = "IController", $z = "IInstruction", Une = "IRenderLocation", Fz = "ISlotsInfo";
  function Gne(n, e, t, i, r, s) {
    const o = e.container.createChild();
    return KO(o, t, n), di(o, ZR, new ar(Hz, e)), di(o, $p, new ar($z, i)), di(o, Or, r == null ? jz : new Wz(r)), di(o, xs, zz), di(o, Oz, s == null ? Uz : new ar(Fz, s)), o;
  }
  class Bz {
    get $isResolver() {
      return !0;
    }
    constructor(e) {
      this.f = e;
    }
    resolve() {
      const e = this.f;
      if (e === null)
        throw Me(
          755
          /* ErrorNames.view_factory_provider_not_ready */
        );
      if (!yt(e.name) || e.name.length === 0)
        throw Me(
          756
          /* ErrorNames.view_factory_invalid_name */
        );
      return e;
    }
  }
  function Vz(n, e, t, i, r, s, o, a) {
    const l = t instanceof ys ? t : t.$controller, c = l.container.createChild();
    return KO(c, i, n), di(c, ZR, new ar(Hz, l)), di(c, $p, new ar($z, r)), di(c, Or, o == null ? jz : new ar(Une, o)), di(c, xs, s == null ? zz : new Bz(s)), di(
      c,
      Oz,
      Uz
    ), { vm: c.invoke(e.Type), ctn: c };
  }
  class Wz {
    get name() {
      return "IRenderLocation";
    }
    get $isResolver() {
      return !0;
    }
    constructor(e) {
      this._location = e;
    }
    resolve() {
      return this._location;
    }
  }
  const jz = new Wz(null), zz = new Bz(null), Uz = new ar(Fz, new kz(pt)), rh = /* @__PURE__ */ zn("IRendering", (n) => n.singleton(Yne));
  class Yne {
    get renderers() {
      return this._renderers ?? (this._renderers = this._ctn.getAll(Lz, !1).reduce((e, t) => {
        var i;
        return e[t.target] !== void 0 && console.warn(`[DEV:aurelia] Renderer for target ${t.target} already exists.`), e[i = t.target] ?? (e[i] = t), e;
      }, sn()));
    }
    constructor() {
      this._compilationCache = /* @__PURE__ */ new WeakMap(), this._fragmentCache = /* @__PURE__ */ new WeakMap();
      const e = this._ctn = ge(Dp).root, t = this._platform = e.get(ho);
      this._exprParser = e.get(Lp), this._observerLocator = e.get(Bp), this._marker = t.document.createElement("au-m"), this._empty = new ZE(t, t.document.createDocumentFragment());
    }
    compile(e, t) {
      const i = t.get(LR), r = this._compilationCache;
      let s = r.get(e);
      return s == null && r.set(e, s = Pr.create(e.needsCompile ? i.compile(e, t) : e)), s;
    }
    getViewFactory(e, t) {
      return new GR(t, Pr.getOrCreate(e));
    }
    createNodes(e) {
      if (e.enhance === !0)
        return new ZE(this._platform, this._transformMarker(e.template));
      let t, i = !1;
      const r = this._fragmentCache, s = this._platform, o = s.document;
      if (r.has(e))
        t = r.get(e);
      else {
        const a = e.template;
        let l;
        a == null ? t = null : a instanceof s.Node ? a.nodeName === "TEMPLATE" ? (t = a.content, i = !0) : (t = o.createDocumentFragment()).appendChild(a.cloneNode(!0)) : (l = o.createElement("template"), yt(a) && (l.innerHTML = a), t = l.content, i = !0), this._transformMarker(t), r.set(e, t);
      }
      return t == null ? this._empty : new ZE(this._platform, i ? o.importNode(t, !0) : o.adoptNode(t.cloneNode(!0)));
    }
    render(e, t, i, r) {
      const s = i.instructions, o = this.renderers, a = t.length;
      let l = 0, c = 0, u = s.length, h, d, f;
      if (a !== u)
        throw Me(757, a, u);
      if (a > 0)
        for (; a > l; ) {
          for (h = s[l], f = t[l], c = 0, u = h.length; u > c; )
            d = h[c], o[d.type].render(e, f, d, this._platform, this._exprParser, this._observerLocator), ++c;
          ++l;
        }
      if (r != null && (h = i.surrogates, (u = h.length) > 0))
        for (c = 0; u > c; )
          d = h[c], o[d.type].render(e, r, d, this._platform, this._exprParser, this._observerLocator), ++c;
    }
    /** @internal */
    _transformMarker(e) {
      if (e == null)
        return null;
      const t = this._platform.document.createTreeWalker(
        e,
        /* NodeFilter.SHOW_COMMENT */
        128
      );
      let i;
      for (; (i = t.nextNode()) != null; )
        i.nodeValue === "au*" && i.parentNode.replaceChild(t.currentNode = this._marker.cloneNode(), i);
      return e;
    }
  }
  const U$ = /* @__PURE__ */ zn("IShadowDOMStyles"), Kne = /* @__PURE__ */ zn("IShadowDOMGlobalStyles", (n) => n.instance({ applyTo: Za })), { enter: qne, exit: Xne } = jee, { wrap: Zne, unwrap: Qne } = xte;
  class Gz {
    get value() {
      return this._value;
    }
    constructor(e, t, i, r, s) {
      this.obj = e, this.$get = i, this.useProxy = s, this.isBound = !1, this.running = !1, this._value = void 0, this._callback = r, this.oL = t;
    }
    handleChange() {
      this.run();
    }
    handleCollectionChange() {
      this.run();
    }
    bind() {
      this.isBound || (this.compute(), this.isBound = !0);
    }
    unbind() {
      this.isBound && (this.isBound = !1, this.obs.clearAll());
    }
    run() {
      if (!this.isBound || this.running)
        return;
      const e = this.obj, t = this._value, i = this.compute();
      ea(i, t) || this._callback.call(e, i, t, e);
    }
    compute() {
      this.running = !0, this.obs.version++;
      try {
        return qne(this), this._value = Qne(this.$get.call(void 0, this.useProxy ? Zne(this.obj) : this.obj, this));
      } finally {
        this.obs.clear(), this.running = !1, Xne(this);
      }
    }
  }
  oa(Gz, null);
  class jA {
    get value() {
      return this._value;
    }
    constructor(e, t, i, r, s) {
      this.scope = e, this.l = t, this.oL = i, this.isBound = !1, this.boundFn = !1, this.obj = e.bindingContext, this._expression = r, this._callback = s;
    }
    handleChange(e) {
      const t = this._expression, i = this.obj, r = this._value;
      t.$kind === "AccessScope" && this.obs.count === 1 || (this.obs.version++, e = kn(t, this.scope, this, this), this.obs.clear()), ea(e, r) || (this._value = e, this._callback.call(i, e, r, i));
    }
    bind() {
      this.isBound || (this.obs.version++, this._value = kn(this._expression, this.scope, this, this), this.obs.clear(), this.isBound = !0);
    }
    unbind() {
      this.isBound && (this.isBound = !1, this.obs.clearAll(), this._value = void 0);
    }
  }
  oa(jA, null), Nc(jA);
  class ys {
    get lifecycleHooks() {
      return this._lifecycleHooks;
    }
    get isActive() {
      return (this.state & (vs | bd)) > 0 && (this.state & cv) === 0;
    }
    get name() {
      var e;
      if (this.parent === null)
        switch (this.vmKind) {
          case ld:
            return `[${this.definition.name}]`;
          case Vs:
            return this.definition.name;
          case Xi:
            return this.viewFactory.name;
        }
      switch (this.vmKind) {
        case ld:
          return `${this.parent.name}>[${this.definition.name}]`;
        case Vs:
          return `${this.parent.name}>${this.definition.name}`;
        case Xi:
          return this.viewFactory.name === ((e = this.parent.definition) == null ? void 0 : e.name) ? `${this.parent.name}[view]` : `${this.parent.name}[view:${this.viewFactory.name}]`;
      }
    }
    get viewModel() {
      return this._vm;
    }
    set viewModel(e) {
      this._vm = e, this._vmHooks = e == null || this.vmKind === Xi ? $g.none : new $g(e);
    }
    get strict() {
      var e;
      return (e = this.definition) == null ? void 0 : e.strict;
    }
    constructor(e, t, i, r, s, o, a) {
      this.container = e, this.vmKind = t, this.definition = i, this.viewFactory = r, this.host = o, this.head = null, this.tail = null, this.next = null, this.parent = null, this.bindings = null, this.children = null, this.hasLockedScope = !1, this.scope = null, this.isBound = !1, this._isBindingDone = !1, this.hostController = null, this.mountTarget = Yz, this.shadowRoot = null, this.nodes = null, this.location = null, this._lifecycleHooks = null, this.state = KE, this._fullyNamed = !1, this.$initiator = null, this.$resolve = void 0, this.$reject = void 0, this.$promise = void 0, this._activatingStack = 0, this._detachingStack = 0, this._unbindingStack = 0, this._vm = s, this._vmHooks = t === Xi ? $g.none : new $g(s), this.logger = null, this.debug = !1, this.location = a, this._rendering = e.root.get(rh), this.coercion = t === Xi ? void 0 : e.get(tie);
    }
    static getCached(e) {
      return Gc.get(e);
    }
    static getCachedOrThrow(e) {
      const t = ys.getCached(e);
      if (t === void 0)
        throw Me(500, e);
      return t;
    }
    /**
     * Create a controller for a custom element based on a given set of parameters
     *
     * @param ctn - The own container of the custom element
     * @param viewModel - The view model object (can be any object if a definition is specified)
     *
     * Semi private API
     */
    static $el(e, t, i, r, s = void 0, o = null) {
      if (Gc.has(t))
        return Gc.get(t);
      if (s == null)
        try {
          s = Zz(t.constructor);
        } catch (c) {
          throw console.error(`[DEV:aurelia] Custom element definition not found for creating a controller with host: <${i.nodeName} /> and component ${t.constructor.name || "(Anonymous) class"}`), c;
        }
      di(e, s.Type, new ar(s.key, t, s.Type));
      const a = new ys(
        /* container      */
        e,
        /* vmKind         */
        Vs,
        /* definition     */
        s,
        /* viewFactory    */
        null,
        /* viewModel      */
        t,
        /* host           */
        i,
        /* location       */
        o
      ), l = e.get(j6(Xd));
      return s.dependencies.length > 0 && e.register(...s.dependencies), di(e, Xd, new ar("IHydrationContext", new Kz(a, r, l))), Gc.set(t, a), (r == null || r.hydrate !== !1) && a._hydrateCustomElement(r), a;
    }
    /**
     * Create a controller for a custom attribute based on a given set of parameters
     *
     * @param ctn - own container associated with the custom attribute object
     * @param viewModel - the view model object
     * @param host - host element where this custom attribute is used
     * @param flags - todo(comment)
     * @param definition - the definition of the custom attribute,
     * will be used to override the definition associated with the view model object contructor if given
     */
    static $attr(e, t, i, r) {
      if (Gc.has(t))
        return Gc.get(t);
      r = r ?? BO(t.constructor), di(e, r.Type, new ar(r.key, t, r.Type));
      const s = new ys(
        /* own ct         */
        e,
        /* vmKind         */
        ld,
        /* definition     */
        r,
        /* viewFactory    */
        null,
        /* viewModel      */
        t,
        /* host           */
        i,
        /* location       */
        null
      );
      return r.dependencies.length > 0 && e.register(...r.dependencies), Gc.set(t, s), s._hydrateCustomAttribute(), s;
    }
    /**
     * Create a synthetic view (controller) for a given factory
     *
     * @param viewFactory - todo(comment)
     * @param flags - todo(comment)
     * @param parentController - the parent controller to connect the created view with. Used in activation
     *
     * Semi private API
     */
    static $view(e, t = void 0) {
      const i = new ys(
        /* container      */
        e.container,
        /* vmKind         */
        Xi,
        /* definition     */
        null,
        /* viewFactory    */
        e,
        /* viewModel      */
        null,
        /* host           */
        null,
        /* location       */
        null
      );
      return i.parent = t ?? null, i._hydrateSynthetic(), i;
    }
    /** @internal */
    _hydrateCustomElement(e) {
      this.logger = this.container.get(Wd).root, this.debug = this.logger.config.level <= xQ.debug, this.debug && (this.logger = this.logger.scopeTo(this.name));
      const t = this.container, i = this._vm, r = this.definition;
      this.scope = fi.create(i, null, !0), r.watches.length > 0 && K$(this, t, r, i), G$(this, r, i), this._lifecycleHooks = V$.resolve(t), t.register(r.Type), r.injectable !== null && di(t, r.injectable, new ar("definition.injectable", i)), (e == null || e.hydrate !== !1) && (this._hydrate(e == null ? void 0 : e.hostController), this._hydrateChildren());
    }
    /** @internal */
    _hydrate(e) {
      this._lifecycleHooks.hydrating != null && this._lifecycleHooks.hydrating.forEach(oie, this), this._vmHooks._hydrating && (this.debug && this.logger.trace("invoking hydrating() hook"), this._vm.hydrating(this));
      const t = this.definition, i = this._compiledDef = this._rendering.compile(t, this.container), r = i.shadowOptions, s = i.hasSlots, o = i.containerless;
      let a = this.host, l = this.location, c = !1;
      if (e != null ? (this.hostController = e, c = !0) : (this.hostController = Od(a, eie)) !== null && (a = this.host = this.container.root.get(ho).document.createElement(t.name), c = !0), c && o && l == null && (l = this.location = Jv(a)), nr(a, ji, this), nr(a, t.key, this), r !== null || s) {
        if (l != null)
          throw Me(
            501
            /* ErrorNames.controller_no_shadow_on_containerless */
          );
        nr(this.shadowRoot = a.attachShadow(r ?? iie), ji, this), nr(this.shadowRoot, t.key, this), this.mountTarget = od;
      } else l != null ? (nr(l, ji, this), nr(l, t.key, this), this.mountTarget = ad) : this.mountTarget = sd;
      this._vm.$controller = this, this.nodes = this._rendering.createNodes(i), this._lifecycleHooks.hydrated !== void 0 && this._lifecycleHooks.hydrated.forEach(aie, this), this._vmHooks._hydrated && (this.debug && this.logger.trace("invoking hydrated() hook"), this._vm.hydrated(this));
    }
    /** @internal */
    _hydrateChildren() {
      this._rendering.render(
        /* controller */
        this,
        /* targets    */
        this.nodes.findTargets(),
        /* definition */
        this._compiledDef,
        /* host       */
        this.host
      ), this._lifecycleHooks.created !== void 0 && this._lifecycleHooks.created.forEach(q$, this), this._vmHooks._created && (this.debug && this.logger.trace("invoking created() hook"), this._vm.created(this));
    }
    /** @internal */
    _hydrateCustomAttribute() {
      const e = this.definition, t = this._vm;
      e.watches.length > 0 && K$(this, this.container, e, t), G$(this, e, t), t.$controller = this, this._lifecycleHooks = V$.resolve(this.container), this._lifecycleHooks.created !== void 0 && this._lifecycleHooks.created.forEach(q$, this), this._vmHooks._created && (this.debug && this.logger.trace("invoking created() hook"), this._vm.created(this));
    }
    /** @internal */
    _hydrateSynthetic() {
      this._compiledDef = this._rendering.compile(this.viewFactory.def, this.container), this._rendering.render(
        /* controller */
        this,
        /* targets    */
        (this.nodes = this._rendering.createNodes(this._compiledDef)).findTargets(),
        /* definition */
        this._compiledDef,
        /* host       */
        void 0
      );
    }
    activate(e, t, i) {
      switch (this.state) {
        case KE:
        case Fg:
          if (!(t === null || t.isActive))
            return;
          this.state = vs;
          break;
        case bd:
          return;
        case uu:
          throw Me(502, this.name);
        default:
          throw Me(503, this.name, rie(this.state));
      }
      switch (this.parent = t, this.debug && !this._fullyNamed && (this._fullyNamed = !0, (this.logger ?? (this.logger = this.container.get(Wd).root.scopeTo(this.name))).trace("activate()")), this.vmKind) {
        case Vs:
          this.scope.parent = i ?? null;
          break;
        case ld:
          this.scope = i ?? null;
          break;
        case Xi:
          if (i == null)
            throw Me(504, this.name);
          this.hasLockedScope || (this.scope = i);
          break;
      }
      this.$initiator = e, this._enterActivating();
      let r;
      return this.vmKind !== Xi && this._lifecycleHooks.binding != null && (this.debug && this.logger.trace("lifecycleHooks.binding()"), r = Pi(...this._lifecycleHooks.binding.map(lie, this))), this._vmHooks._binding && (this.debug && this.logger.trace("binding()"), r = Pi(r, this._vm.binding(this.$initiator, this.parent))), Oi(r) ? (this._ensurePromise(), r.then(() => {
        this._isBindingDone = !0, this.state !== vs ? this._leaveActivating() : this.bind();
      }).catch((s) => {
        this._reject(s);
      }), this.$promise) : (this._isBindingDone = !0, this.bind(), this.$promise);
    }
    bind() {
      this.debug && this.logger.trace("bind()");
      let e = 0, t = 0, i;
      if (this.bindings !== null)
        for (e = 0, t = this.bindings.length; t > e; )
          this.bindings[e].bind(this.scope), ++e;
      if (this.vmKind !== Xi && this._lifecycleHooks.bound != null && (this.debug && this.logger.trace("lifecycleHooks.bound()"), i = Pi(...this._lifecycleHooks.bound.map(cie, this))), this._vmHooks._bound && (this.debug && this.logger.trace("bound()"), i = Pi(i, this._vm.bound(this.$initiator, this.parent))), Oi(i)) {
        this._ensurePromise(), i.then(() => {
          this.isBound = !0, this.state !== vs ? this._leaveActivating() : this._attach();
        }).catch((r) => {
          this._reject(r);
        });
        return;
      }
      this.isBound = !0, this._attach();
    }
    /** @internal */
    _append(...e) {
      switch (this.mountTarget) {
        case sd:
          this.host.append(...e);
          break;
        case od:
          this.shadowRoot.append(...e);
          break;
        case ad: {
          let t = 0;
          for (; t < e.length; ++t)
            this.location.parentNode.insertBefore(e[t], this.location);
          break;
        }
      }
    }
    /** @internal */
    _attach() {
      if (this.debug && this.logger.trace("attach()"), this.hostController !== null)
        switch (this.mountTarget) {
          case sd:
          case od:
            this.hostController._append(this.host);
            break;
          case ad:
            this.hostController._append(this.location.$start, this.location);
            break;
        }
      switch (this.mountTarget) {
        case sd:
          this.nodes.appendTo(this.host, this.definition != null && this.definition.enhance);
          break;
        case od: {
          const i = this.container;
          (i.has(U$, !1) ? i.get(U$) : i.get(Kne)).applyTo(this.shadowRoot), this.nodes.appendTo(this.shadowRoot);
          break;
        }
        case ad:
          this.nodes.insertBefore(this.location);
          break;
      }
      let e = 0, t;
      if (this.vmKind !== Xi && this._lifecycleHooks.attaching != null && (this.debug && this.logger.trace("lifecycleHooks.attaching()"), t = Pi(...this._lifecycleHooks.attaching.map(uie, this))), this._vmHooks._attaching && (this.debug && this.logger.trace("attaching()"), t = Pi(t, this._vm.attaching(this.$initiator, this.parent))), Oi(t) && (this._ensurePromise(), this._enterActivating(), t.then(() => {
        this._leaveActivating();
      }).catch((i) => {
        this._reject(i);
      })), this.children !== null)
        for (; e < this.children.length; ++e)
          this.children[e].activate(this.$initiator, this, this.scope);
      this._leaveActivating();
    }
    deactivate(e, t) {
      var o;
      let i;
      switch (this.state & ~Bg) {
        case bd:
          this.state = cv;
          break;
        case vs:
          this.state = cv, i = (o = this.$promise) == null ? void 0 : o.catch(
            (a) => {
              this.logger.warn("The activation error will be ignored, as the controller is already scheduled for deactivation. The activation was rejected with: %s", a);
            }
          );
          break;
        case KE:
        case Fg:
        case uu:
        case Fg | uu:
          return;
        default:
          throw Me(505, this.name, this.state);
      }
      this.debug && this.logger.trace("deactivate()"), this.$initiator = e, e === this && this._enterDetaching();
      let r = 0, s;
      if (this.children !== null)
        for (r = 0; r < this.children.length; ++r)
          this.children[r].deactivate(e, this);
      return It(i, () => {
        if (this.isBound && (this.vmKind !== Xi && this._lifecycleHooks.detaching != null && (this.debug && this.logger.trace("lifecycleHooks.detaching()"), s = Pi(...this._lifecycleHooks.detaching.map(die, this))), this._vmHooks._detaching && (this.debug && this.logger.trace("detaching()"), s = Pi(s, this._vm.detaching(this.$initiator, this.parent)))), Oi(s) && (this._ensurePromise(), e._enterDetaching(), s.then(() => {
          e._leaveDetaching();
        }).catch((a) => {
          e._reject(a);
        })), e.head === null ? e.head = this : e.tail.next = this, e.tail = this, e === this)
          return this._leaveDetaching(), this.$promise;
      });
    }
    removeNodes() {
      switch (this.vmKind) {
        case Vs:
        case Xi:
          this.nodes.remove(), this.nodes.unlink();
      }
      if (this.hostController !== null)
        switch (this.mountTarget) {
          case sd:
          case od:
            this.host.remove();
            break;
          case ad:
            this.location.$start.remove(), this.location.remove();
            break;
        }
    }
    unbind() {
      this.debug && this.logger.trace("unbind()");
      let e = 0;
      if (this.bindings !== null)
        for (; e < this.bindings.length; ++e)
          this.bindings[e].unbind();
      switch (this.parent = null, this.vmKind) {
        case ld:
          this.scope = null;
          break;
        case Xi:
          this.hasLockedScope || (this.scope = null), (this.state & Bg) === Bg && !this.viewFactory.tryReturnToCache(this) && this.$initiator === this && this.dispose();
          break;
        case Vs:
          this.scope.parent = null;
          break;
      }
      this.state = Fg, this.$initiator = null, this._resolve();
    }
    /** @internal */
    _ensurePromise() {
      this.$promise === void 0 && (this.$promise = new Promise((e, t) => {
        this.$resolve = e, this.$reject = t;
      }), this.$initiator !== this && this.parent._ensurePromise());
    }
    /** @internal */
    _resolve() {
      this.$promise !== void 0 && (qE = this.$resolve, this.$resolve = this.$reject = this.$promise = void 0, qE(), qE = void 0);
    }
    /** @internal */
    _reject(e) {
      this.$promise !== void 0 && (XE = this.$reject, this.$resolve = this.$reject = this.$promise = void 0, XE(e), XE = void 0), this.$initiator !== this && this.parent._reject(e);
    }
    /** @internal */
    _enterActivating() {
      ++this._activatingStack, this.$initiator !== this && this.parent._enterActivating();
    }
    /** @internal */
    _leaveActivating() {
      if (this.state !== vs) {
        --this._activatingStack, this._resolve(), this.$initiator !== this && this.parent._leaveActivating();
        return;
      }
      if (--this._activatingStack === 0) {
        if (this.vmKind !== Xi && this._lifecycleHooks.attached != null && (gh = Pi(...this._lifecycleHooks.attached.map(hie, this))), this._vmHooks._attached && (this.debug && this.logger.trace("attached()"), gh = Pi(gh, this._vm.attached(this.$initiator))), Oi(gh)) {
          this._ensurePromise(), gh.then(() => {
            this.state = bd, this._resolve(), this.$initiator !== this && this.parent._leaveActivating();
          }).catch((e) => {
            this._reject(e);
          }), gh = void 0;
          return;
        }
        gh = void 0, this.state = bd, this._resolve();
      }
      this.$initiator !== this && this.parent._leaveActivating();
    }
    /** @internal */
    _enterDetaching() {
      ++this._detachingStack;
    }
    /** @internal */
    _leaveDetaching() {
      if (--this._detachingStack === 0) {
        this.debug && this.logger.trace("detach()"), this._enterUnbinding(), this.removeNodes();
        let e = this.$initiator.head, t;
        for (; e !== null; )
          e !== this && (e.debug && e.logger.trace("detach()"), e.removeNodes()), e._isBindingDone && (e.vmKind !== Xi && e._lifecycleHooks.unbinding != null && (t = Pi(...e._lifecycleHooks.unbinding.map(fie, e))), e._vmHooks._unbinding && (e.debug && e.logger.trace("unbinding()"), t = Pi(t, e.viewModel.unbinding(e.$initiator, e.parent)))), Oi(t) && (this._ensurePromise(), this._enterUnbinding(), t.then(() => {
            this._leaveUnbinding();
          }).catch((i) => {
            this._reject(i);
          })), t = void 0, e = e.next;
        this._leaveUnbinding();
      }
    }
    /** @internal */
    _enterUnbinding() {
      ++this._unbindingStack;
    }
    /** @internal */
    _leaveUnbinding() {
      if (--this._unbindingStack === 0) {
        this.debug && this.logger.trace("unbind()");
        let e = this.$initiator.head, t = null;
        for (; e !== null; )
          e !== this && (e._isBindingDone = !1, e.isBound = !1, e.unbind()), t = e.next, e.next = null, e = t;
        this.head = this.tail = null, this._isBindingDone = !1, this.isBound = !1, this.unbind();
      }
    }
    addBinding(e) {
      this.bindings === null ? this.bindings = [e] : this.bindings[this.bindings.length] = e;
    }
    addChild(e) {
      this.children === null ? this.children = [e] : this.children[this.children.length] = e;
    }
    is(e) {
      switch (this.vmKind) {
        case ld:
        case Vs:
          return this.definition.name === e;
        case Xi:
          return this.viewFactory.name === e;
      }
    }
    lockScope(e) {
      this.scope = e, this.hasLockedScope = !0;
    }
    setHost(e) {
      return this.vmKind === Vs && (nr(e, ji, this), nr(e, this.definition.key, this)), this.host = e, this.mountTarget = sd, this;
    }
    setShadowRoot(e) {
      return this.vmKind === Vs && (nr(e, ji, this), nr(e, this.definition.key, this)), this.shadowRoot = e, this.mountTarget = od, this;
    }
    setLocation(e) {
      return this.vmKind === Vs && (nr(e, ji, this), nr(e, this.definition.key, this)), this.location = e, this.mountTarget = ad, this;
    }
    release() {
      this.state |= Bg;
    }
    dispose() {
      this.debug && this.logger.trace("dispose()"), (this.state & uu) !== uu && (this.state |= uu, this._vmHooks._dispose && this._vm.dispose(), this.children !== null && (this.children.forEach(sie), this.children = null), this.hostController = null, this.scope = null, this.nodes = null, this.location = null, this.viewFactory = null, this._vm !== null && (Gc.delete(this._vm), this._vm = null), this._vm = null, this.host = null, this.shadowRoot = null, this.container.disposeResolvers());
    }
    accept(e) {
      if (e(this) === !0 || this._vmHooks._accept && this._vm.accept(e) === !0)
        return !0;
      if (this.children !== null) {
        const { children: t } = this;
        for (let i = 0, r = t.length; i < r; ++i)
          if (t[i].accept(e) === !0)
            return !0;
      }
    }
  }
  const Gc = /* @__PURE__ */ new WeakMap(), Yz = 0, sd = 1, od = 2, ad = 3, Jne = Dc({
    none: Yz,
    host: sd,
    shadowRoot: od,
    location: ad
  }), eie = { optional: !0 }, tie = SQ(tz);
  function G$(n, e, t) {
    var c, u;
    const i = e.bindables, r = gz(i), s = r.length, o = n.container.get(Bp), a = "propertiesChanged" in t;
    if (s === 0)
      return;
    const l = a ? (() => {
      let h = {}, d, f = 0;
      const g = Promise.resolve(), p = () => {
        d == null && (d = g.then(() => {
          var v;
          const m = h;
          h = {}, f = 0, d = void 0, n.isBound && ((v = t.propertiesChanged) == null || v.call(t, m), f > 0 && p());
        }));
      };
      return (m, v, y) => {
        h[m] = { newValue: v, oldValue: y }, f++, p();
      };
    })() : Za;
    for (let h = 0; h < s; ++h) {
      const d = r[h], f = i[d], g = f.callback, p = o.getObserver(t, d);
      if (f.set !== Za && ((c = p.useCoercer) == null ? void 0 : c.call(p, f.set, n.coercion)) !== !0)
        throw Me(507, d);
      if (t[g] != null || t.propertyChanged != null || a) {
        const m = (v, y) => {
          var w, R;
          n.isBound && ((w = t[g]) == null || w.call(t, v, y), (R = t.propertyChanged) == null || R.call(t, d, v, y), l(d, v, y));
        };
        if (((u = p.useCallback) == null ? void 0 : u.call(p, m)) !== !0)
          throw Me(508, d);
      }
    }
  }
  const Y$ = /* @__PURE__ */ new Map(), nie = (n) => {
    let e = Y$.get(n);
    return e == null && (e = new nv(n, 0), Y$.set(n, e)), e;
  };
  function K$(n, e, t, i) {
    const r = e.get(Bp), s = e.get(Lp), o = t.watches, a = n.vmKind === Vs ? n.scope : fi.create(i, null, !0), l = o.length;
    let c, u, h, d = 0;
    for (; l > d; ++d) {
      if ({ expression: c, callback: u } = o[d], u = jt(u) ? u : Reflect.get(i, u), !jt(u))
        throw Me(506, u);
      jt(c) ? n.addBinding(new Gz(i, r, c, u, !0)) : (h = yt(c) ? s.parse(c, rl) : nie(c), n.addBinding(new jA(a, e, r, h, u)));
    }
  }
  class $g {
    constructor(e) {
      this._define = "define" in e, this._hydrating = "hydrating" in e, this._hydrated = "hydrated" in e, this._created = "created" in e, this._binding = "binding" in e, this._bound = "bound" in e, this._attaching = "attaching" in e, this._attached = "attached" in e, this._detaching = "detaching" in e, this._unbinding = "unbinding" in e, this._dispose = "dispose" in e, this._accept = "accept" in e;
    }
  }
  $g.none = new $g({});
  const iie = {
    mode: "open"
  }, Vs = "customElement", ld = "customAttribute", Xi = "synthetic", KE = 0, vs = 1, bd = 2, cv = 4, Fg = 8, Bg = 16, uu = 32;
  function rie(n) {
    const e = [];
    return (n & vs) === vs && e.push("activating"), (n & bd) === bd && e.push("activated"), (n & cv) === cv && e.push("deactivating"), (n & Fg) === Fg && e.push("deactivated"), (n & Bg) === Bg && e.push("released"), (n & uu) === uu && e.push("disposed"), e.length === 0 ? "none" : e.join("|");
  }
  const ZR = /* @__PURE__ */ zn("IController"), Xd = /* @__PURE__ */ zn("IHydrationContext");
  class Kz {
    constructor(e, t, i) {
      this.instruction = t, this.parent = i, this.controller = e;
    }
  }
  function sie(n) {
    n.dispose();
  }
  function q$(n) {
    n.instance.created(this._vm, this);
  }
  function oie(n) {
    n.instance.hydrating(this._vm, this);
  }
  function aie(n) {
    n.instance.hydrated(this._vm, this);
  }
  function lie(n) {
    return n.instance.binding(this._vm, this.$initiator, this.parent);
  }
  function cie(n) {
    return n.instance.bound(this._vm, this.$initiator, this.parent);
  }
  function uie(n) {
    return n.instance.attaching(this._vm, this.$initiator, this.parent);
  }
  function hie(n) {
    return n.instance.attached(this._vm, this.$initiator);
  }
  function die(n) {
    return n.instance.detaching(this._vm, this.$initiator, this.parent);
  }
  function fie(n) {
    return n.instance.unbinding(this._vm, this.$initiator, this.parent);
  }
  let qE, XE, gh;
  class gie {
  }
  function Vg(n, e) {
    var t;
    return ((t = n.$au) == null ? void 0 : t[e]) ?? null;
  }
  function nr(n, e, t) {
    (n.$au ?? (n.$au = new gie()))[e] = t;
  }
  const Fw = /* @__PURE__ */ zn("INode"), Or = /* @__PURE__ */ zn("IRenderLocation"), i_ = /* @__PURE__ */ zn("ICssClassMapping"), r_ = /* @__PURE__ */ new WeakMap();
  function s_(n) {
    if (r_.has(n))
      return r_.get(n);
    let e = 0, t = n.nextSibling;
    for (; t !== null; ) {
      if (t.nodeType === 8)
        switch (t.textContent) {
          case "au-start":
            ++e;
            break;
          case "au-end":
            if (e-- === 0)
              return t;
        }
      t = t.nextSibling;
    }
    if (n.parentNode === null && n.nodeType === 11) {
      const i = Od(n, { optional: !0 });
      if (i == null)
        return null;
      if (i.mountTarget === Jne.shadowRoot)
        return s_(i.host);
    }
    return n.parentNode;
  }
  function pie(n, e) {
    if (n.platform !== void 0 && !(n instanceof n.platform.Node)) {
      const t = n.childNodes;
      for (let i = 0, r = t.length; i < r; ++i)
        r_.set(t[i], e);
    } else
      r_.set(n, e);
  }
  function Jv(n) {
    if (qz(n))
      return n;
    const e = n.ownerDocument.createComment("au-end"), t = e.$start = n.ownerDocument.createComment("au-start"), i = n.parentNode;
    return i !== null && (i.replaceChild(e, n), i.insertBefore(t, e)), e;
  }
  function qz(n) {
    return n.textContent === "au-end";
  }
  class ZE {
    get firstChild() {
      return this._firstChild;
    }
    get lastChild() {
      return this._lastChild;
    }
    constructor(e, t) {
      this.platform = e, this.next = void 0, this._isMounted = !1, this._isLinked = !1, this.ref = null;
      const i = (this.f = t).querySelectorAll("au-m");
      let r = 0, s = i.length, o = this.t = Array(s), a, l;
      for (; s > r; )
        l = i[r], a = l.nextSibling, l.remove(), a.nodeType === 8 && (l = a, (a = a.nextSibling).$start = l), o[r] = a, ++r;
      const c = t.childNodes, u = this.childNodes = Array(s = c.length);
      for (r = 0; s > r; )
        u[r] = c[r], ++r;
      this._firstChild = t.firstChild, this._lastChild = t.lastChild;
    }
    findTargets() {
      return this.t;
    }
    insertBefore(e) {
      if (this._isLinked && this.ref)
        this.addToLinked();
      else {
        const t = e.parentNode;
        if (this._isMounted) {
          let i = this._firstChild, r;
          const s = this._lastChild;
          for (; i != null && (r = i.nextSibling, t.insertBefore(i, e), i !== s); )
            i = r;
        } else
          this._isMounted = !0, e.parentNode.insertBefore(this.f, e);
      }
    }
    appendTo(e, t = !1) {
      if (this._isMounted) {
        let i = this._firstChild, r;
        const s = this._lastChild;
        for (; i != null && (r = i.nextSibling, e.appendChild(i), i !== s); )
          i = r;
      } else
        this._isMounted = !0, t || e.appendChild(this.f);
    }
    remove() {
      if (this._isMounted) {
        this._isMounted = !1;
        const e = this.f, t = this._lastChild;
        let i, r = this._firstChild;
        for (; r !== null && (i = r.nextSibling, e.appendChild(r), r !== t); )
          r = i;
      }
    }
    addToLinked() {
      const e = this.ref, t = e.parentNode;
      if (this._isMounted) {
        let i = this._firstChild, r;
        const s = this._lastChild;
        for (; i != null && (r = i.nextSibling, t.insertBefore(i, e), i !== s); )
          i = r;
      } else
        this._isMounted = !0, t.insertBefore(this.f, e);
    }
    unlink() {
      this._isLinked = !1, this.next = void 0, this.ref = void 0;
    }
    link(e) {
      this._isLinked = !0, qz(e) ? this.ref = e : (this.next = e, this._obtainRefNode());
    }
    /** @internal */
    _obtainRefNode() {
      this.next !== void 0 ? this.ref = this.next.firstChild : this.ref = void 0;
    }
  }
  const KO = (n, e, t = n.get(ho)) => (di(n, t.HTMLElement, di(n, t.Element, di(n, Fw, new ar("ElementResolver", e)))), n);
  function Lc(n) {
    return function(e, t) {
      return t.addInitializer(function() {
        Xz(n, this);
      }), e;
    };
  }
  const QE = /* @__PURE__ */ new WeakMap();
  class Pr {
    get type() {
      return Qte;
    }
    constructor(e, t, i, r, s, o, a, l, c, u, h, d, f, g, p, m, v, y, w) {
      this.Type = e, this.name = t, this.aliases = i, this.key = r, this.capture = s, this.template = o, this.instructions = a, this.dependencies = l, this.injectable = c, this.needsCompile = u, this.surrogates = h, this.bindables = d, this.containerless = f, this.shadowOptions = g, this.hasSlots = p, this.enhance = m, this.watches = v, this.strict = y, this.processContent = w;
    }
    static create(e, t = null) {
      if (t === null) {
        const r = e;
        if (yt(r))
          throw Me(761, e);
        const s = So("name", r, zA);
        jt(r.Type) ? t = r.Type : t = Qz(N6(s));
        for (const o of Object.values(cs.from(r.bindables)))
          cs._add(o, t);
        return new Pr(
          t,
          s,
          hi(r.aliases),
          So("key", r, () => Mg(s)),
          Ps("capture", r, t, Os),
          So("template", r, Is),
          hi(r.instructions),
          hi(is(t, "dependencies"), r.dependencies),
          So("injectable", r, Is),
          So("needsCompile", r, ex),
          hi(r.surrogates),
          cs.from(is(t, "bindables"), r.bindables),
          Ps("containerless", r, t, Os),
          So("shadowOptions", r, Is),
          So("hasSlots", r, Os),
          So("enhance", r, Os),
          So("watches", r, bie),
          // casting is incorrect, but it's good enough
          So("strict", r, JE),
          Co("processContent", t, Is)
        );
      }
      if (yt(e))
        return new Pr(t, e, hi(is(t, "aliases"), t.aliases), Mg(e), Co("capture", t, Os), Co("template", t, Is), hi(is(t, "instructions"), t.instructions), hi(is(t, "dependencies"), t.dependencies), Co("injectable", t, Is), Co("needsCompile", t, ex), hi(is(t, "surrogates"), t.surrogates), cs.from(...cs.getAll(t), is(t, "bindables"), t.bindables), Co("containerless", t, Os), Co("shadowOptions", t, Is), Co("hasSlots", t, Os), Co("enhance", t, Os), hi(BA.getDefinitions(t), t.watches), Co("strict", t, JE), Co("processContent", t, Is));
      const i = So("name", e, zA);
      for (const r of Object.values(cs.from(e.bindables)))
        cs._add(r, t);
      return new Pr(t, i, hi(is(t, "aliases"), e.aliases, t.aliases), Mg(i), Ps("capture", e, t, Os), Ps("template", e, t, Is), hi(is(t, "instructions"), e.instructions, t.instructions), hi(is(t, "dependencies"), e.dependencies, t.dependencies), Ps("injectable", e, t, Is), Ps("needsCompile", e, t, ex), hi(is(t, "surrogates"), e.surrogates, t.surrogates), cs.from(...cs.getAll(t), is(t, "bindables"), t.bindables, e.bindables), Ps("containerless", e, t, Os), Ps("shadowOptions", e, t, Is), Ps("hasSlots", e, t, Os), Ps("enhance", e, t, Os), hi(e.watches, BA.getDefinitions(t), t.watches), Ps("strict", e, t, JE), Ps("processContent", e, t, Is));
    }
    static getOrCreate(e) {
      if (e instanceof Pr)
        return e;
      if (QE.has(e))
        return QE.get(e);
      const t = Pr.create(e);
      return QE.set(e, t), ta(t, t.Type, ji), t;
    }
    register(e, t) {
      const i = this.Type, r = typeof t == "string" ? Mg(t) : this.key, s = this.aliases;
      if (e.has(r, !1)) {
        console.warn(Me(153, this.name));
        return;
      }
      e.register(e.has(i, !1) ? null : pl(i, i), Wu(i, r), ...s.map((o) => Wu(i, Mg(o))));
    }
    toString() {
      return `au:ce:${this.name}`;
    }
  }
  const mie = {
    name: void 0,
    searchParents: !1,
    optional: !1
  }, Is = () => null, JE = () => {
  }, Os = () => !1, ex = () => !0, bie = () => pt, Zd = "custom-element", ji = /* @__PURE__ */ gf(Zd), Mg = (n) => `${ji}:${n}`, zA = /* @__PURE__ */ ((n) => () => `unnamed-${++n}`)(0), vie = (n, e, t) => {
    ta(t, n, kc(e));
  }, Xz = (n, e) => {
    const t = Pr.create(n, e), i = t.Type;
    return ta(t, i, ji, Ya), i;
  }, wie = (n) => {
    var e;
    return jt(n) && (WR(ji, n) || ((e = n.$au) == null ? void 0 : e.type) === Zd);
  }, Od = (n, e = mie) => {
    if (e.name === void 0 && e.searchParents !== !0) {
      const i = Vg(n, ji);
      if (i === null) {
        if (e.optional === !0)
          return null;
        throw Me(762, n);
      }
      return i;
    }
    if (e.name !== void 0) {
      if (e.searchParents !== !0) {
        const s = Vg(n, ji);
        if (s === null)
          throw Me(763, n);
        return s.is(e.name) ? s : void 0;
      }
      let i = n, r = !1;
      for (; i !== null; ) {
        const s = Vg(i, ji);
        if (s !== null && (r = !0, s.is(e.name)))
          return s;
        i = s_(i);
      }
      if (r)
        return;
      throw Me(764, n);
    }
    let t = n;
    for (; t !== null; ) {
      const i = Vg(t, ji);
      if (i !== null)
        return i;
      t = s_(t);
    }
    throw Me(765, n);
  }, is = (n, e) => dr(kc(e), n), Zz = (n) => {
    const e = dr(ji, n) ?? ju(n, Zd, Pr.create);
    if (e == null)
      throw Me(760, n);
    return e;
  }, yie = () => {
    const n = {
      // Old code is kept around. Needs to be refactored when TC39 supports argument decorator.
      // function(target: Injectable | AbstractInjectable, property: string | symbol | undefined, index?: number): Injectable | AbstractInjectable {
      //   const annotationParamtypes = DI.getOrCreateAnnotationParamTypes(target as Constructable);
      //   annotationParamtypes[index!] = $injectable;
      //   return target;
      // },
      $isInterface: !1,
      register() {
        return {
          $isResolver: !0,
          resolve(e, t) {
            return t.has(n, !0) ? t.get(n) : null;
          }
        };
      }
    };
    return n;
  }, Qz = /* @__PURE__ */ function() {
    const n = {
      value: "",
      writable: !1,
      enumerable: !1,
      configurable: !0
    }, e = {};
    return function(t, i = e) {
      const r = class {
      };
      return n.value = t, pz(r, "name", n), i !== e && fz(r.prototype, i), r;
    };
  }(), Li = /* @__PURE__ */ Dc({
    name: ji,
    keyFrom: Mg,
    isType: wie,
    for: Od,
    define: Xz,
    getDefinition: Zz,
    annotate: vie,
    getAnnotation: is,
    generateName: zA,
    createInjectable: yie,
    generateType: Qz,
    find(n, e) {
      const t = n.find(Zd, e);
      return t == null ? null : dr(ji, t) ?? ju(t, Zd, Pr.create) ?? null;
    }
  }), Jz = /* @__PURE__ */ zn("ISVGAnalyzer", (n) => n.singleton(Cie));
  class Cie {
    isStandardSvgAttribute(e, t) {
      return !1;
    }
  }
  class e8 {
    constructor() {
      this.fns = [], this._tagAttrMap = sn(), this._globalAttrMap = sn(), this.svg = ge(Jz), this.useMapping({
        LABEL: { for: "htmlFor" },
        IMG: { usemap: "useMap" },
        INPUT: {
          maxlength: "maxLength",
          minlength: "minLength",
          formaction: "formAction",
          formenctype: "formEncType",
          formmethod: "formMethod",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          inputmode: "inputMode"
        },
        TEXTAREA: { maxlength: "maxLength" },
        TD: { rowspan: "rowSpan", colspan: "colSpan" },
        TH: { rowspan: "rowSpan", colspan: "colSpan" }
      }), this.useGlobalMapping({
        accesskey: "accessKey",
        contenteditable: "contentEditable",
        tabindex: "tabIndex",
        textcontent: "textContent",
        innerhtml: "innerHTML",
        scrolltop: "scrollTop",
        scrollleft: "scrollLeft",
        readonly: "readOnly"
      });
    }
    /**
     * Allow application to teach Aurelia how to define how to map attributes to properties
     * based on element tagName
     */
    useMapping(e) {
      var o;
      let t, i, r, s;
      for (r in e) {
        t = e[r], i = (o = this._tagAttrMap)[r] ?? (o[r] = sn());
        for (s in t) {
          if (i[s] !== void 0)
            throw X$(s, r);
          i[s] = t[s];
        }
      }
    }
    /**
     * Allow applications to teach Aurelia how to define how to map attributes to properties
     * for all elements
     */
    useGlobalMapping(e) {
      const t = this._globalAttrMap;
      for (const i in e) {
        if (t[i] !== void 0)
          throw X$(i, "*");
        t[i] = e[i];
      }
    }
    /**
     * Add a given function to a list of fns that will be used
     * to check if `'bind'` command can be understood as `'two-way'` command.
     */
    useTwoWay(e) {
      this.fns.push(e);
    }
    /**
     * Returns true if an attribute should be two way bound based on an element
     */
    isTwoWay(e, t) {
      return Sie(e, t) || this.fns.length > 0 && this.fns.some((i) => i(e, t));
    }
    /**
     * Retrieves the mapping information this mapper have for an attribute on an element
     */
    map(e, t) {
      var i;
      return ((i = this._tagAttrMap[e.nodeName]) == null ? void 0 : i[t]) ?? this._globalAttrMap[t] ?? (HA(e, t, this.svg) ? t : null);
    }
  }
  e8.register = Dw(f5);
  function Sie(n, e) {
    switch (n.nodeName) {
      case "INPUT":
        switch (n.type) {
          case "checkbox":
          case "radio":
            return e === "checked";
          default:
            return e === "value" || e === "files" || e === "value-as-number" || e === "value-as-date";
        }
      case "TEXTAREA":
      case "SELECT":
        return e === "value";
      default:
        switch (e) {
          case "textcontent":
          case "innerhtml":
            return n.hasAttribute("contenteditable");
          case "scrolltop":
          case "scrollleft":
            return !0;
          default:
            return !1;
        }
    }
  }
  function X$(n, e) {
    return Me(719, n, e);
  }
  const _ie = {
    register(n) {
      n.register(Q5, e8, t8);
    }
  };
  class Rie {
    constructor(e, t, i) {
      this.attrs = e, this.bindables = t, this.primary = i;
    }
  }
  class t8 {
    constructor() {
      this._resourceCache = /* @__PURE__ */ new WeakMap(), this._bindableCache = /* @__PURE__ */ new WeakMap();
    }
    el(e, t) {
      let i = this._resourceCache.get(e);
      return i == null && this._resourceCache.set(e, i = new Z$()), t in i._element ? i._element[t] : i._element[t] = Li.find(e, t);
    }
    attr(e, t) {
      let i = this._resourceCache.get(e);
      return i == null && this._resourceCache.set(e, i = new Z$()), t in i._attr ? i._attr[t] : i._attr[t] = VO.find(e, t);
    }
    bindables(e) {
      let t = this._bindableCache.get(e);
      if (t == null) {
        const i = e.bindables, r = sn();
        let s, o, a = !1, l, c;
        for (o in i) {
          if (s = i[o], c = s.attribute, s.primary === !0) {
            if (a)
              throw Me(714, e);
            a = !0, l = s;
          } else !a && l == null && (l = s);
          r[c] = ac.create(o, s);
        }
        s == null && e.type === "custom-attribute" && (l = r.value = ac.create("value", { mode: e.defaultBindingMode ?? LO })), this._bindableCache.set(e, t = new Rie(r, i, l ?? null));
      }
      return t;
    }
  }
  t8.register = Dw(J5);
  class Z$ {
    constructor() {
      this._element = sn(), this._attr = sn();
    }
  }
  const tx = sn();
  class ew {
    static forNs(e) {
      return tx[e] ?? (tx[e] = new ew(e));
    }
    constructor(e) {
      this.ns = e, this.type = nh | gl;
    }
    getValue(e, t) {
      return e.getAttributeNS(this.ns, t);
    }
    setValue(e, t, i) {
      e == null ? t.removeAttributeNS(this.ns, i) : t.setAttributeNS(this.ns, i, e);
    }
  }
  KR(ew);
  class n8 {
    constructor() {
      this.type = nh | gl;
    }
    getValue(e, t) {
      return e.getAttribute(t);
    }
    setValue(e, t, i) {
      e == null ? t.removeAttribute(i) : t.setAttribute(i, e);
    }
  }
  KR(n8);
  const lS = /* @__PURE__ */ new n8();
  class kd {
    /** @internal */
    static _getSelectedOptions(e) {
      const t = [];
      if (e.length === 0)
        return t;
      const i = e.length;
      let r = 0, s;
      for (; i > r; )
        s = e[r], s.selected && (t[t.length] = yd.call(s, "model") ? s.model : s.value), ++r;
      return t;
    }
    /** @internal */
    static _defaultMatcher(e, t) {
      return e === t;
    }
    constructor(e, t, i, r) {
      this.type = nh | $O | gl, this._value = void 0, this._oldValue = void 0, this._hasChanges = !1, this._arrayObserver = void 0, this._nodeObserver = void 0, this._observing = !1, this._listened = !1, this._el = e, this._observerLocator = r, this._config = i;
    }
    getValue() {
      return this._observing ? this._value : this._el.multiple ? kd._getSelectedOptions(this._el.options) : this._el.value;
    }
    setValue(e) {
      this._oldValue = this._value, this._value = e, this._hasChanges = e !== this._oldValue, this._observeArray(e instanceof Array ? e : null), this._flushChanges();
    }
    /** @internal */
    _flushChanges() {
      this._hasChanges && (this._hasChanges = !1, this.syncOptions());
    }
    handleCollectionChange() {
      this.syncOptions();
    }
    syncOptions() {
      const e = this._value, t = this._el, i = oi(e), r = t.matcher ?? kd._defaultMatcher, s = t.options;
      let o = s.length;
      for (; o-- > 0; ) {
        const a = s[o], l = yd.call(a, "model") ? a.model : a.value;
        if (i) {
          a.selected = e.findIndex((c) => !!r(l, c)) !== -1;
          continue;
        }
        a.selected = !!r(l, e);
      }
    }
    syncValue() {
      const e = this._el, t = e.options, i = t.length, r = this._value;
      let s = 0;
      if (e.multiple) {
        if (!(r instanceof Array))
          return !0;
        let l;
        const c = e.matcher || kd._defaultMatcher, u = [];
        for (; s < i; )
          l = t[s], l.selected && u.push(yd.call(l, "model") ? l.model : l.value), ++s;
        let h;
        for (s = 0; s < r.length; )
          h = r[s], u.findIndex((d) => !!c(h, d)) === -1 ? r.splice(s, 1) : ++s;
        for (s = 0; s < u.length; )
          h = u[s], r.findIndex((d) => !!c(h, d)) === -1 && r.push(h), ++s;
        return !1;
      }
      let o = null, a;
      for (; s < i; ) {
        if (a = t[s], a.selected) {
          o = yd.call(a, "model") ? a.model : a.value;
          break;
        }
        ++s;
      }
      return this._oldValue = this._value, this._value = o, !0;
    }
    /**
     * Used by mixing defined methods subscribe
     *
     * @internal
     */
    _start() {
      (this._nodeObserver = Pz(this._el, this._handleNodeChange.bind(this))).observe(this._el, {
        childList: !0,
        subtree: !0,
        characterData: !0
      }), this._observeArray(this._value instanceof Array ? this._value : null), this._observing = !0;
    }
    /**
     * Used by mixing defined method unsubscribe
     *
     * @internal
     */
    _stop() {
      var e;
      this._nodeObserver.disconnect(), (e = this._arrayObserver) == null || e.unsubscribe(this), this._nodeObserver = this._arrayObserver = void 0, this._observing = !1;
    }
    // todo: observe all kind of collection
    /** @internal */
    _observeArray(e) {
      var t;
      if ((t = this._arrayObserver) == null || t.unsubscribe(this), this._arrayObserver = void 0, e != null) {
        if (!this._el.multiple)
          throw Me(
            654
            /* ErrorNames.select_observer_array_on_non_multi_select */
          );
        (this._arrayObserver = this._observerLocator.getArrayObserver(e)).subscribe(this);
      }
    }
    handleEvent() {
      this.syncValue() && this._flush();
    }
    /** @internal */
    _handleNodeChange(e) {
      this.syncOptions(), this.syncValue() && this._flush();
    }
    /** @internal */
    _flush() {
      const e = this._oldValue;
      this._oldValue = this._value, this.subs.notify(this._value, e);
    }
  }
  YO(kd), so(kd, null);
  const Eie = "--";
  class i8 {
    constructor(e) {
      this.obj = e, this.type = nh | gl, this._value = "", this._oldValue = "", this.styles = {}, this.version = 0, this._hasChanges = !1;
    }
    getValue() {
      return this.obj.style.cssText;
    }
    setValue(e) {
      this._value = e, this._hasChanges = e !== this._oldValue, this._flushChanges();
    }
    /** @internal */
    _getStyleTuplesFromString(e) {
      const t = [], i = /url\([^)]+$/;
      let r = 0, s = "", o, a, l, c;
      for (; r < e.length; ) {
        if (o = e.indexOf(";", r), o === -1 && (o = e.length), s += e.substring(r, o), r = o + 1, i.test(s)) {
          s += ";";
          continue;
        }
        a = s.indexOf(":"), l = s.substring(0, a).trim(), c = s.substring(a + 1).trim(), t.push([l, c]), s = "";
      }
      return t;
    }
    /** @internal */
    _getStyleTuplesFromObject(e) {
      let t, i;
      const r = [];
      for (i in e)
        if (t = e[i], t != null) {
          if (yt(t)) {
            if (i.startsWith(Eie)) {
              r.push([i, t]);
              continue;
            }
            r.push([L6(i), t]);
            continue;
          }
          r.push(...this._getStyleTuples(t));
        }
      return r;
    }
    /** @internal */
    _getStyleTuplesFromArray(e) {
      const t = e.length;
      if (t > 0) {
        const i = [];
        let r = 0;
        for (; t > r; ++r)
          i.push(...this._getStyleTuples(e[r]));
        return i;
      }
      return pt;
    }
    /** @internal */
    _getStyleTuples(e) {
      return yt(e) ? this._getStyleTuplesFromString(e) : e instanceof Array ? this._getStyleTuplesFromArray(e) : e instanceof Object ? this._getStyleTuplesFromObject(e) : pt;
    }
    /** @internal */
    _flushChanges() {
      if (this._hasChanges) {
        this._hasChanges = !1;
        const e = this._value, t = this.styles, i = this._getStyleTuples(e);
        let r, s = this.version;
        this._oldValue = e;
        let o, a, l, c = 0;
        const u = i.length;
        for (; c < u; ++c)
          o = i[c], a = o[0], l = o[1], this.setProperty(a, l), t[a] = s;
        if (this.styles = t, this.version += 1, s === 0)
          return;
        s -= 1;
        for (r in t)
          !yd.call(t, r) || t[r] !== s || this.obj.style.removeProperty(r);
      }
    }
    setProperty(e, t) {
      let i = "";
      t != null && jt(t.indexOf) && t.includes("!important") && (i = "important", t = t.replace("!important", "")), this.obj.style.setProperty(e, t, i);
    }
    bind() {
      this._value = this._oldValue = this.obj.style.cssText;
    }
  }
  KR(i8);
  class UA {
    constructor(e, t, i) {
      this.type = nh | $O | gl, this._value = "", this._oldValue = "", this._hasChanges = !1, this._listened = !1, this._el = e, this._key = t, this._config = i;
    }
    getValue() {
      return this._value;
    }
    setValue(e) {
      ea(e, this._value) || (this._oldValue = this._value, this._value = e, this._hasChanges = !0, this._config.readonly || this._flushChanges());
    }
    /** @internal */
    _flushChanges() {
      this._hasChanges && (this._hasChanges = !1, this._el[this._key] = this._value ?? this._config.default, this._flush());
    }
    handleEvent() {
      this._oldValue = this._value, this._value = this._el[this._key], this._oldValue !== this._value && (this._hasChanges = !1, this._flush());
    }
    /**
     * Used by mixing defined methods subscribe
     *
     * @internal
     */
    _start() {
      this._value = this._oldValue = this._el[this._key];
    }
    /** @internal */
    _flush() {
      const e = this._oldValue;
      this._oldValue = this._value, this.subs.notify(this._value, e);
    }
  }
  YO(UA), so(UA, null);
  const Q$ = (() => {
    const n = "http://www.w3.org/1999/xlink", e = "http://www.w3.org/XML/1998/namespace", t = "http://www.w3.org/2000/xmlns/";
    return fz(sn(), {
      "xlink:actuate": ["actuate", n],
      "xlink:arcrole": ["arcrole", n],
      "xlink:href": ["href", n],
      "xlink:role": ["role", n],
      "xlink:show": ["show", n],
      "xlink:title": ["title", n],
      "xlink:type": ["type", n],
      "xml:lang": ["lang", e],
      "xml:space": ["space", e],
      xmlns: ["xmlns", t],
      "xmlns:xlink": ["xlink", t]
    });
  })(), r8 = new oz();
  r8.type = nh | gl;
  class qO {
    constructor() {
      this.allowDirtyCheck = !0, this._events = sn(), this._globalEvents = sn(), this._overrides = sn(), this._globalOverrides = sn(), this._locator = ge(bQ), this._platform = ge(ho), this._dirtyChecker = ge(PO), this.svg = ge(Jz);
      const e = ["change", "input"], t = { events: e, default: "" };
      this.useConfig({
        INPUT: {
          value: t,
          valueAsNumber: { events: e, default: 0 },
          checked: { type: GA, events: e },
          files: { events: e, readonly: !0 }
        },
        SELECT: {
          value: { type: kd, events: ["change"], default: "" }
        },
        TEXTAREA: {
          value: t
        }
      });
      const i = { events: ["change", "input", "blur", "keyup", "paste"], default: "" }, r = { events: ["scroll"], default: 0 };
      this.useConfigGlobal({
        scrollTop: r,
        scrollLeft: r,
        textContent: i,
        innerHTML: i
      }), this.overrideAccessorGlobal("css", "style", "class"), this.overrideAccessor({
        INPUT: ["value", "checked", "model"],
        SELECT: ["value"],
        TEXTAREA: ["value"]
      });
    }
    // deepscan-disable-next-line
    handles(e, t) {
      return e instanceof this._platform.Node;
    }
    useConfig(e, t, i) {
      const r = this._events;
      let s;
      if (yt(e))
        s = r[e] ?? (r[e] = sn()), s[t] == null ? s[t] = i : Dy(e, t);
      else
        for (const o in e) {
          s = r[o] ?? (r[o] = sn());
          const a = e[o];
          for (t in a)
            s[t] == null ? s[t] = a[t] : Dy(o, t);
        }
    }
    useConfigGlobal(e, t) {
      const i = this._globalEvents;
      if (typeof e == "object")
        for (const r in e)
          i[r] == null ? i[r] = e[r] : Dy("*", r);
      else
        i[e] == null ? i[e] = t : Dy("*", e);
    }
    // deepscan-disable-nextline
    getAccessor(e, t, i) {
      if (t in this._globalOverrides || t in (this._overrides[e.tagName] ?? W6))
        return this.getObserver(e, t, i);
      switch (t) {
        case "src":
        case "href":
        case "role":
        case "minLength":
        case "maxLength":
        case "placeholder":
        case "size":
        case "pattern":
        case "title":
        case "popovertarget":
        case "popovertargetaction":
          return (t === "popovertarget" || t === "popovertargetaction") && e.nodeName !== "INPUT" && e.nodeName !== "BUTTON" && console.warn(`[aurelia] Popover API are only valid on <input> or <button>. Detected ${t} on <${e.nodeName.toLowerCase()}>`), lS;
        default: {
          const r = Q$[t];
          return r !== void 0 ? ew.forNs(r[1]) : HA(e, t, this.svg) ? lS : r8;
        }
      }
    }
    overrideAccessor(e, t) {
      var r, s;
      let i;
      if (yt(e))
        i = (r = this._overrides)[e] ?? (r[e] = sn()), i[t] = !0;
      else
        for (const o in e)
          for (const a of e[o])
            i = (s = this._overrides)[o] ?? (s[o] = sn()), i[a] = !0;
    }
    /**
     * For all elements:
     * compose a list of properties,
     * to indicate that an overser should be returned instead of an accessor in `.getAccessor()`
     */
    overrideAccessorGlobal(...e) {
      for (const t of e)
        this._globalOverrides[t] = !0;
    }
    getNodeObserverConfig(e, t) {
      var i;
      return ((i = this._events[e.tagName]) == null ? void 0 : i[t]) ?? this._globalEvents[t];
    }
    getNodeObserver(e, t, i) {
      var o;
      const r = ((o = this._events[e.tagName]) == null ? void 0 : o[t]) ?? this._globalEvents[t];
      let s;
      return r != null ? (s = new (r.type ?? UA)(e, t, r, i, this._locator), s.doNotCache || (az(e)[t] = s), s) : null;
    }
    getObserver(e, t, i) {
      switch (t) {
        case "class":
          return new qR(e);
        case "css":
        case "style":
          return new i8(e);
      }
      const r = this.getNodeObserver(e, t, i);
      if (r != null)
        return r;
      const s = Q$[t];
      if (s !== void 0)
        return ew.forNs(s[1]);
      if (HA(e, t, this.svg))
        return lS;
      if (t in e.constructor.prototype) {
        if (this.allowDirtyCheck)
          return this._dirtyChecker.createProperty(e, t);
        throw Me(652, t);
      } else
        return new IO(e, t);
    }
  }
  qO.register = Dw(OO);
  function xie(n, e) {
    if (n instanceof Array)
      return e.getArrayObserver(n);
    if (n instanceof Map)
      return e.getMapObserver(n);
    if (n instanceof Set)
      return e.getSetObserver(n);
  }
  function Dy(n, e) {
    throw Me(653, n, e);
  }
  function J$(n, e) {
    return n === e;
  }
  class GA {
    constructor(e, t, i, r) {
      this.type = nh | $O | gl, this._value = void 0, this._oldValue = void 0, this._collectionObserver = void 0, this._valueObserver = void 0, this._listened = !1, this._el = e, this.oL = r, this._config = i;
    }
    getValue() {
      return this._value;
    }
    setValue(e) {
      const t = this._value;
      e !== t && (this._value = e, this._oldValue = t, this._observe(), this._synchronizeElement(), this._flush());
    }
    handleCollectionChange() {
      this._synchronizeElement();
    }
    handleChange(e, t) {
      this._synchronizeElement();
    }
    /** @internal */
    _synchronizeElement() {
      const e = this._value, t = this._el, i = yd.call(t, "model") ? t.model : t.value, r = t.type === "radio", s = t.matcher !== void 0 ? t.matcher : J$;
      if (r)
        t.checked = !!s(e, i);
      else if (e === !0)
        t.checked = !0;
      else {
        let o = !1;
        if (oi(e))
          o = e.findIndex((a) => !!s(a, i)) !== -1;
        else if (e instanceof Set) {
          for (const a of e)
            if (s(a, i)) {
              o = !0;
              break;
            }
        } else if (e instanceof Map)
          for (const a of e) {
            const l = a[0], c = a[1];
            if (s(l, i) && c === !0) {
              o = !0;
              break;
            }
          }
        t.checked = o;
      }
    }
    handleEvent() {
      let e = this._oldValue = this._value;
      const t = this._el, i = yd.call(t, "model") ? t.model : t.value, r = t.checked, s = t.matcher !== void 0 ? t.matcher : J$;
      if (t.type === "checkbox") {
        if (oi(e)) {
          const o = e.findIndex((a) => !!s(a, i));
          r && o === -1 ? e.push(i) : !r && o !== -1 && e.splice(o, 1);
          return;
        } else if (e instanceof Set) {
          const o = {};
          let a = o;
          for (const l of e)
            if (s(l, i) === !0) {
              a = l;
              break;
            }
          r && a === o ? e.add(i) : !r && a !== o && e.delete(a);
          return;
        } else if (e instanceof Map) {
          let o;
          for (const a of e) {
            const l = a[0];
            if (s(l, i) === !0) {
              o = l;
              break;
            }
          }
          e.set(o, r);
          return;
        }
        e = r;
      } else if (r)
        e = i;
      else
        return;
      this._value = e, this._flush();
    }
    /**
     * Used by mixing defined methods subscribe
     *
     * @internal
     */
    _start() {
      this._observe();
    }
    /**
     * Used by mixing defined methods unsubscribe
     *
     * @internal
     */
    _stop() {
      var e, t;
      this._value = this._oldValue = void 0, (e = this._collectionObserver) == null || e.unsubscribe(this), (t = this._valueObserver) == null || t.unsubscribe(this), this._collectionObserver = this._valueObserver = void 0;
    }
    /** @internal */
    _flush() {
      nx = this._oldValue, this._oldValue = this._value, this.subs.notify(this._value, nx), nx = void 0;
    }
    /** @internal */
    _observe() {
      var t, i, r, s, o;
      const e = this._el;
      (r = this._valueObserver ?? (this._valueObserver = ((t = e.$observers) == null ? void 0 : t.model) ?? ((i = e.$observers) == null ? void 0 : i.value))) == null || r.subscribe(this), (s = this._collectionObserver) == null || s.unsubscribe(this), this._collectionObserver = void 0, e.type === "checkbox" && ((o = this._collectionObserver = xie(this._value, this.oL)) == null || o.subscribe(this));
    }
  }
  YO(GA), so(GA, null);
  let nx;
  class s8 {
    bind(e, t) {
      if (!(t instanceof Ar))
        throw Me(9994, t);
      t.useTargetObserver(lS);
    }
  }
  s8.$au = {
    type: Js,
    name: "attr"
  };
  class o8 {
    bind(e, t) {
      if (!("handleEvent" in t))
        throw Me(
          801
          /* ErrorNames.self_behavior_invalid_usage */
        );
      t.self = !0;
    }
    unbind(e, t) {
      t.self = !1;
    }
  }
  o8.$au = {
    type: Js,
    name: "self"
  };
  class a8 {
    constructor() {
      this._observerLocator = ge(Bp), this._nodeObserverLocator = ge(OO);
    }
    bind(e, t, ...i) {
      if (!(this._nodeObserverLocator instanceof qO))
        throw Me(
          9993
          /* ErrorNames.update_trigger_behavior_not_supported */
        );
      if (i.length === 0)
        throw Me(
          802
          /* ErrorNames.update_trigger_behavior_no_triggers */
        );
      if (!(t instanceof Ar) || !(t.mode & Rc))
        throw Me(
          803
          /* ErrorNames.update_trigger_invalid_usage */
        );
      const r = this._nodeObserverLocator.getNodeObserverConfig(t.target, t.targetProperty);
      if (r == null)
        throw Me(9992, t);
      const s = this._nodeObserverLocator.getNodeObserver(t.target, t.targetProperty, this._observerLocator);
      s.useConfig({ readonly: r.readonly, default: r.default, events: i }), t.useTargetObserver(s);
    }
  }
  a8.$au = {
    type: Js,
    name: "updateTrigger"
  };
  class o_ {
    constructor() {
      this.elseFactory = void 0, this.elseView = void 0, this.ifView = void 0, this.view = void 0, this.value = !1, this.cache = !0, this.pending = void 0, this._wantsDeactivate = !1, this._swapId = 0, this._ifFactory = ge(xs), this._location = ge(Or);
    }
    attaching(e, t) {
      return this._swap(this.value);
    }
    detaching(e, t) {
      return this._wantsDeactivate = !0, It(this.pending, () => {
        var i;
        this._wantsDeactivate = !1, this.pending = void 0, (i = this.view) == null || i.deactivate(e, this.$controller);
      });
    }
    valueChanged(e, t) {
      if (this.$controller.isActive && (e = !!e, t = !!t, e !== t))
        return this._swap(e);
    }
    /** @internal */
    _swap(e) {
      const t = this.view, i = this.$controller, r = this._swapId++, s = () => !this._wantsDeactivate && this._swapId === r + 1;
      let o;
      return It(this.pending, () => this.pending = It(t == null ? void 0 : t.deactivate(t, i), () => {
        var a;
        if (s() && (e ? o = this.view = this.ifView = this.cache && this.ifView != null ? this.ifView : this._ifFactory.create() : o = this.view = this.elseView = this.cache && this.elseView != null ? this.elseView : (a = this.elseFactory) == null ? void 0 : a.create(), o != null))
          return o.setLocation(this._location), It(o.activate(o, i, i.scope), () => {
            s() && (this.pending = void 0);
          });
      }));
    }
    dispose() {
      var e, t;
      (e = this.ifView) == null || e.dispose(), (t = this.elseView) == null || t.dispose(), this.ifView = this.elseView = this.view = void 0;
    }
    accept(e) {
      var t;
      if (((t = this.view) == null ? void 0 : t.accept(e)) === !0)
        return !0;
    }
  }
  o_.$au = {
    type: fr,
    name: "if",
    isTemplateController: !0,
    bindables: {
      value: !0,
      cache: {
        set: (n) => n === "" || !!n && n !== "false"
      }
    }
  };
  class l8 {
    constructor() {
      this._factory = ge(xs);
    }
    link(e, t, i, r) {
      const s = e.children, o = s[s.length - 1];
      if (o instanceof o_)
        o.elseFactory = this._factory;
      else if (o.viewModel instanceof o_)
        o.viewModel.elseFactory = this._factory;
      else
        throw Me(
          810
          /* ErrorNames.else_without_if */
        );
    }
  }
  l8.$au = {
    type: "custom-attribute",
    name: "else",
    isTemplateController: !0
  };
  function Tie(n) {
    n.dispose();
  }
  const Mie = [
    "BindingBehavior",
    "ValueConverter"
  ];
  class c8 {
    constructor() {
      this.views = [], this.key = null, this._oldViews = [], this._scopes = [], this._oldScopes = [], this._scopeMap = /* @__PURE__ */ new Map(), this._observer = void 0, this._observingInnerItems = !1, this._reevaluating = !1, this._innerItemsExpression = null, this._normalizedItems = void 0, this._hasDestructuredLocal = !1, this._location = ge(Or), this._parent = ge(ZR), this._factory = ge(xs), this._resolver = ge(Pie);
      const t = ge($p).props[0].props[0];
      if (t !== void 0) {
        const { to: i, value: r, command: s } = t;
        if (i === "key")
          if (s === null)
            this.key = r;
          else if (s === "bind")
            this.key = ge(Lp).parse(r, rl);
          else
            throw Me(775, s);
        else
          throw Me(776, i);
      }
    }
    binding(e, t) {
      const i = this._parent.bindings, r = i.length;
      let s, o, a = 0;
      for (; r > a; ++a)
        if (s = i[a], s.target === this && s.targetProperty === "items") {
          o = this.forOf = s.ast, this._forOfBinding = s;
          let c = o.iterable;
          for (; c != null && Mie.includes(c.$kind); )
            c = c.expression, this._observingInnerItems = !0;
          this._innerItemsExpression = c;
          break;
        }
      this._refreshCollectionObserver();
      const l = o.declaration;
      (this._hasDestructuredLocal = l.$kind === "ArrayDestructuring" || l.$kind === "ObjectDestructuring") || (this.local = kn(l, this.$controller.scope, s, null));
    }
    attaching(e, t) {
      return this._normalizeToArray(), this._createScopes(), this._activateAllViews(e, this._normalizedItems ?? pt);
    }
    detaching(e, t) {
      return this._refreshCollectionObserver(), this._deactivateAllViews(e);
    }
    unbinding(e, t) {
      this._scopeMap.clear();
    }
    // called by SetterObserver
    itemsChanged() {
      this.$controller.isActive && (this._refreshCollectionObserver(), this._normalizeToArray(), this._createScopes(), this._applyIndexMap(void 0));
    }
    handleCollectionChange(e, t) {
      const i = this.$controller;
      if (i.isActive) {
        if (this._observingInnerItems) {
          if (this._reevaluating)
            return;
          this._reevaluating = !0, this.items = kn(this.forOf.iterable, i.scope, this._forOfBinding, null), this._reevaluating = !1;
          return;
        }
        this._normalizeToArray(), this._createScopes(), this._applyIndexMap(t);
      }
    }
    /** @internal */
    _applyIndexMap(e) {
      const t = this.views;
      this._oldViews = t.slice();
      const i = t.length, r = this.key, s = r !== null, o = this._oldScopes, a = this._scopes;
      if (s || e === void 0) {
        const l = this.local, u = this._normalizedItems.length, d = this.forOf.declaration, f = this._forOfBinding, g = this._hasDestructuredLocal;
        e = Gd(u);
        let p = 0;
        if (i === 0)
          for (; p < u; ++p)
            e[p] = -2;
        else if (u === 0)
          for (p = 0; p < i; ++p)
            e.deletedIndices.push(p), e.deletedItems.push(cS(g, d, o[p], f, l));
        else if (s) {
          const m = Array(i);
          for (p = 0; p < i; ++p)
            m[p] = o2(g, r, d, o[p], f, l);
          const v = Array(i);
          for (p = 0; p < u; ++p)
            v[p] = o2(g, r, d, a[p], f, l);
          for (p = 0; p < u; ++p)
            m.includes(v[p]) ? e[p] = m.indexOf(v[p]) : e[p] = -2;
          for (p = 0; p < i; ++p)
            v.includes(m[p]) || (e.deletedIndices.push(p), e.deletedItems.push(cS(g, d, o[p], f, l)));
        } else {
          for (p = 0; p < u; ++p)
            o.includes(a[p]) ? e[p] = o.indexOf(a[p]) : e[p] = -2;
          for (p = 0; p < i; ++p)
            a.includes(o[p]) || (e.deletedIndices.push(p), e.deletedItems.push(cS(g, d, o[p], f, l)));
        }
      }
      if (e.deletedIndices.length > 0) {
        const l = It(this._deactivateAndRemoveViewsByKey(e), () => this._createAndActivateAndSortViewsByKey(e));
        Oi(l) && l.catch($A);
      } else
        this._createAndActivateAndSortViewsByKey(e);
    }
    // todo: subscribe to collection from inner expression
    /** @internal */
    _refreshCollectionObserver() {
      var o, a;
      const e = this.$controller.scope;
      let t = this._innerItems, i = this._observingInnerItems, r;
      i && (t = this._innerItems = kn(this._innerItemsExpression, e, this._forOfBinding, null) ?? null, i = this._observingInnerItems = !ea(this.items, t));
      const s = this._observer;
      if (this.$controller.isActive) {
        const l = i ? t : this.items;
        r = this._observer = (a = (o = this._resolver.resolve(l)).getObserver) == null ? void 0 : a.call(o, l), s !== r && (s == null || s.unsubscribe(this), r == null || r.subscribe(this));
      } else
        s == null || s.unsubscribe(this), this._observer = void 0;
    }
    /** @internal */
    _createScopes() {
      const e = this._scopes;
      this._oldScopes = e.slice();
      const t = this._normalizedItems, i = t.length, r = this._scopes = Array(t.length), s = this._scopeMap, o = /* @__PURE__ */ new Map(), a = this.$controller.scope, l = this._forOfBinding, c = this.forOf, u = this.local, h = this._hasDestructuredLocal;
      for (let d = 0; d < i; ++d)
        r[d] = Nie(s, o, t[d], c, a, l, u, h);
      s.clear(), this._scopeMap = o;
    }
    /** @internal */
    _normalizeToArray() {
      const e = this.items;
      if (oi(e)) {
        this._normalizedItems = e.slice(0);
        return;
      }
      const t = [];
      this._resolver.resolve(e).iterate(e, (i, r) => {
        t[r] = i;
      }), this._normalizedItems = t;
    }
    /** @internal */
    _activateAllViews(e, t) {
      let i, r, s, o;
      const { $controller: a, _factory: l, _location: c, _scopes: u } = this, h = t.length, d = this.views = Array(h);
      for (let f = 0; f < h; ++f)
        s = d[f] = l.create().setLocation(c), s.nodes.unlink(), o = u[f], Ly(o.overrideContext, f, h), r = s.activate(e ?? s, a, o), Oi(r) && (i ?? (i = [])).push(r);
      if (i !== void 0)
        return i.length === 1 ? i[0] : Promise.all(i);
    }
    /** @internal */
    _deactivateAllViews(e) {
      let t, i, r, s = 0;
      const { views: o, $controller: a } = this, l = o.length;
      for (; l > s; ++s)
        r = o[s], r.release(), i = r.deactivate(e ?? r, a), Oi(i) && (t ?? (t = [])).push(i);
      if (t !== void 0)
        return t.length === 1 ? t[0] : Promise.all(t);
    }
    /** @internal */
    _deactivateAndRemoveViewsByKey(e) {
      let t, i, r;
      const { $controller: s, views: o } = this, a = e.deletedIndices.slice().sort(Hie), l = a.length;
      let c = 0;
      for (; l > c; ++c)
        r = o[a[c]], r.release(), i = r.deactivate(r, s), Oi(i) && (t ?? (t = [])).push(i);
      for (c = 0; l > c; ++c)
        o.splice(a[c] - c, 1);
      if (t !== void 0)
        return t.length === 1 ? t[0] : Promise.all(t);
    }
    /** @internal */
    _createAndActivateAndSortViewsByKey(e) {
      let t, i, r, s = 0;
      const { $controller: o, _factory: a, _location: l, views: c, _scopes: u, _oldViews: h } = this, d = e.length;
      for (; d > s; ++s)
        e[s] === -2 && (r = a.create(), c.splice(s, 0, r));
      if (c.length !== d)
        throw Me(814, [c.length, d]);
      let f = 0;
      for (s = 0; s < e.length; ++s)
        (f = e[s]) !== -2 && (c[s] = h[f]);
      const g = Aie(e), p = g.length;
      let m, v = p - 1;
      for (s = d - 1; s >= 0; --s)
        r = c[s], m = c[s + 1], r.nodes.link((m == null ? void 0 : m.nodes) ?? l), e[s] === -2 ? (r.setLocation(l), Ly(u[s].overrideContext, s, d), i = r.activate(r, o, u[s]), Oi(i) && (t ?? (t = [])).push(i)) : v < 0 || p === 1 || s !== g[v] ? (Ly(r.scope.overrideContext, s, d), r.nodes.insertBefore(r.location)) : (Ly(r.scope.overrideContext, s, d), --v);
      if (t !== void 0)
        return t.length === 1 ? t[0] : Promise.all(t);
    }
    dispose() {
      this.views.forEach(Tie), this.views = void 0;
    }
    accept(e) {
      const { views: t } = this;
      if (t !== void 0) {
        for (let i = 0, r = t.length; i < r; ++i)
          if (t[i].accept(e) === !0)
            return !0;
      }
    }
  }
  c8.$au = {
    type: fr,
    name: "repeat",
    isTemplateController: !0,
    bindables: ["items"]
  };
  let a_ = 16, El = new Int32Array(a_), Ny = new Int32Array(a_);
  function Aie(n) {
    const e = n.length;
    e > a_ && (a_ = e, El = new Int32Array(e), Ny = new Int32Array(e));
    let t = 0, i = 0, r = 0, s = 0, o = 0, a = 0, l = 0, c = 0;
    for (; s < e; s++)
      if (i = n[s], i !== -2) {
        if (o = El[t], r = n[o], r !== -2 && r < i) {
          Ny[s] = o, El[++t] = s;
          continue;
        }
        for (a = 0, l = t; a < l; )
          c = a + l >> 1, r = n[El[c]], r !== -2 && r < i ? a = c + 1 : l = c;
        r = n[El[a]], (i < r || r === -2) && (a > 0 && (Ny[s] = El[a - 1]), El[a] = s);
      }
    s = ++t;
    const u = new Int32Array(s);
    for (i = El[t - 1]; t-- > 0; )
      u[t] = i, i = Ny[i];
    for (; s-- > 0; )
      El[s] = 0;
    return u;
  }
  class e2 {
    get $odd() {
      return !this.$even;
    }
    get $even() {
      return this.$index % 2 === 0;
    }
    get $first() {
      return this.$index === 0;
    }
    get $middle() {
      return !this.$first && !this.$last;
    }
    get $last() {
      return this.$index === this.$length - 1;
    }
    constructor(e = 0, t = 1) {
      this.$index = e, this.$length = t;
    }
  }
  const Ly = (n, e, t) => {
    n.$index = e, n.$length = t;
  }, Pie = /* @__PURE__ */ zn("IRepeatableHandlerResolver", (n) => n.singleton(Iie));
  class Iie {
    constructor() {
      this._handlers = ge(hO(Oie));
    }
    resolve(e) {
      if (t2.handles(e))
        return t2;
      if (n2.handles(e))
        return n2;
      if (i2.handles(e))
        return i2;
      if (r2.handles(e))
        return r2;
      if (s2.handles(e))
        return s2;
      const t = this._handlers.find((i) => i.handles(e));
      return t !== void 0 ? t : kie;
    }
  }
  const Oie = /* @__PURE__ */ zn("IRepeatableHandler"), t2 = {
    handles: oi,
    getObserver: kO,
    /* istanbul ignore next */
    iterate(n, e) {
      const t = n.length;
      let i = 0;
      for (; i < t; ++i)
        e(n[i], i, n);
    }
    // getCount: items => items.length,
  }, n2 = {
    handles: kp,
    getObserver: kO,
    iterate(n, e) {
      let t = 0, i;
      for (i of n.keys())
        e(i, t++, n);
    }
    // getCount: s => s.size,
  }, i2 = {
    handles: ku,
    getObserver: kO,
    iterate(n, e) {
      let t = 0, i;
      for (i of n.entries())
        e(i, t++, n);
    }
    // getCount: s => s.size,
  }, r2 = {
    handles: ZZ,
    iterate(n, e) {
      let t = 0;
      for (; t < n; ++t)
        e(t, t, n);
    }
    // getCount: v => v,
  }, s2 = {
    handles: (n) => n == null,
    iterate() {
    }
    // getCount: () => 0,
  }, kie = {
    handles(n) {
      return !1;
    },
    iterate(n, e) {
      throw Me(777, n);
    }
    // getCount: () => 0,
  }, Die = (n, e, t, i, r, s) => {
    n ? Qv(e, t, i, s) : t.bindingContext[r] = s;
  }, cS = (n, e, t, i, r) => n ? kn(e, t, i, null) : t.bindingContext[r], o2 = (n, e, t, i, r, s) => typeof e == "string" ? cS(n, t, i, r, s)[e] : kn(e, i, r, null), Nie = (n, e, t, i, r, s, o, a) => {
    let l = n.get(t);
    if (l === void 0 ? l = Lie(t, i, r, s, o, a) : l instanceof fi ? n.delete(t) : l.length === 1 ? (l = l[0], n.delete(t)) : l = l.shift(), e.has(t)) {
      const c = e.get(t);
      c instanceof fi ? e.set(t, [c, l]) : c.push(l);
    } else
      e.set(t, l);
    return Die(a, i.declaration, l, s, o, t), l;
  }, Lie = (n, e, t, i, r, s) => {
    if (s) {
      const o = fi.fromParent(t, new P$(), new e2());
      Qv(e.declaration, o, i, n);
    }
    return fi.fromParent(t, new P$(r, n), new e2());
  }, Hie = (n, e) => n - e;
  class u8 {
    constructor() {
      this.view = ge(xs).create().setLocation(ge(Or));
    }
    valueChanged(e, t) {
      const i = this.$controller, r = this.view.bindings;
      let s, o = 0, a = 0;
      if (i.isActive && r != null)
        for (s = fi.fromParent(i.scope, e === void 0 ? {} : e), a = r.length; a > o; ++o)
          r[o].bind(s);
    }
    attaching(e, t) {
      const { $controller: i, value: r } = this, s = fi.fromParent(i.scope, r === void 0 ? {} : r);
      return this.view.activate(e, i, s);
    }
    detaching(e, t) {
      return this.view.deactivate(e, this.$controller);
    }
    dispose() {
      this.view.dispose(), this.view = void 0;
    }
    accept(e) {
      var t;
      if (((t = this.view) == null ? void 0 : t.accept(e)) === !0)
        return !0;
    }
  }
  u8.$au = {
    type: fr,
    name: "with",
    isTemplateController: !0,
    bindables: ["value"]
  };
  class XO {
    constructor() {
      this.cases = [], this.activeCases = [], this.promise = void 0, this._factory = ge(xs), this._location = ge(Or);
    }
    link(e, t, i, r) {
      this.view = this._factory.create(this.$controller).setLocation(this._location);
    }
    attaching(e, t) {
      const i = this.view, r = this.$controller;
      return this.queue(() => i.activate(e, r, r.scope)), this.queue(() => this.swap(e, this.value)), this.promise;
    }
    detaching(e, t) {
      return this.queue(() => this.view.deactivate(e, this.$controller)), this.promise;
    }
    dispose() {
      var e;
      (e = this.view) == null || e.dispose(), this.view = void 0;
    }
    valueChanged(e, t) {
      this.$controller.isActive && this.queue(() => this.swap(null, this.value));
    }
    caseChanged(e) {
      this.queue(() => this._handleCaseChange(e));
    }
    /** @internal */
    _handleCaseChange(e) {
      const t = e.isMatch(this.value), i = this.activeCases, r = i.length;
      if (!t)
        return r > 0 && i[0].id === e.id ? this._clearActiveCases(null) : void 0;
      if (r > 0 && i[0].id < e.id)
        return;
      const s = [];
      let o = e.fallThrough;
      if (!o)
        s.push(e);
      else {
        const a = this.cases, l = a.indexOf(e);
        for (let c = l, u = a.length; c < u && o; c++) {
          const h = a[c];
          s.push(h), o = h.fallThrough;
        }
      }
      return It(this._clearActiveCases(null, s), () => (this.activeCases = s, this._activateCases(null)));
    }
    swap(e, t) {
      const i = [];
      let r = !1;
      for (const o of this.cases)
        if ((r || o.isMatch(t)) && (i.push(o), r = o.fallThrough), i.length > 0 && !r)
          break;
      const s = this.defaultCase;
      return i.length === 0 && s !== void 0 && i.push(s), It(this.activeCases.length > 0 ? this._clearActiveCases(e, i) : void 0, () => {
        if (this.activeCases = i, i.length !== 0)
          return this._activateCases(e);
      });
    }
    /** @internal */
    _activateCases(e) {
      const t = this.$controller;
      if (!t.isActive)
        return;
      const i = this.activeCases, r = i.length;
      if (r === 0)
        return;
      const s = t.scope;
      return r === 1 ? i[0].activate(e, s) : Pi(...i.map((o) => o.activate(e, s)));
    }
    /** @internal */
    _clearActiveCases(e, t = []) {
      const i = this.activeCases, r = i.length;
      if (r !== 0) {
        if (r === 1) {
          const s = i[0];
          return t.includes(s) ? void 0 : (i.length = 0, s.deactivate(e));
        }
        return It(Pi(...i.reduce((s, o) => (t.includes(o) || s.push(o.deactivate(e)), s), [])), () => {
          i.length = 0;
        });
      }
    }
    queue(e) {
      const t = this.promise;
      let i;
      i = this.promise = It(It(t, e), () => {
        this.promise === i && (this.promise = void 0);
      });
    }
    accept(e) {
      if (this.$controller.accept(e) === !0 || this.activeCases.some((t) => t.accept(e)))
        return !0;
    }
  }
  XO.$au = {
    type: fr,
    name: "switch",
    isTemplateController: !0,
    bindables: ["value"]
  };
  let $ie = 0;
  const h8 = [
    "value",
    {
      name: "fallThrough",
      mode: VR,
      set(n) {
        switch (n) {
          case "true":
            return !0;
          case "false":
            return !1;
          default:
            return !!n;
        }
      }
    }
  ];
  class ZO {
    constructor() {
      this.id = ++$ie, this.fallThrough = !1, this.view = void 0, this._factory = ge(xs), this._locator = ge(Bp), this._location = ge(Or), this._logger = ge(Wd).scopeTo(`${this.constructor.name}-#${this.id}`);
    }
    link(e, t, i, r) {
      const s = e.parent, o = s == null ? void 0 : s.viewModel;
      if (o instanceof XO)
        this.$switch = o, this.linkToSwitch(o);
      else
        throw Me(
          815
          /* ErrorNames.switch_invalid_usage */
        );
    }
    detaching(e, t) {
      return this.deactivate(e);
    }
    isMatch(e) {
      this._logger.debug("isMatch()");
      const t = this.value;
      return oi(t) ? (this._observer === void 0 && (this._observer = this._observeCollection(t)), t.includes(e)) : t === e;
    }
    valueChanged(e, t) {
      var i;
      oi(e) ? ((i = this._observer) == null || i.unsubscribe(this), this._observer = this._observeCollection(e)) : this._observer !== void 0 && this._observer.unsubscribe(this), this.$switch.caseChanged(this);
    }
    handleCollectionChange() {
      this.$switch.caseChanged(this);
    }
    activate(e, t) {
      let i = this.view;
      if (i === void 0 && (i = this.view = this._factory.create().setLocation(this._location)), !i.isActive)
        return i.activate(e ?? i, this.$controller, t);
    }
    deactivate(e) {
      const t = this.view;
      if (!(t === void 0 || !t.isActive))
        return t.deactivate(e ?? t, this.$controller);
    }
    dispose() {
      var e, t;
      (e = this._observer) == null || e.unsubscribe(this), (t = this.view) == null || t.dispose(), this.view = void 0;
    }
    linkToSwitch(e) {
      e.cases.push(this);
    }
    /** @internal */
    _observeCollection(e) {
      const t = this._locator.getArrayObserver(e);
      return t.subscribe(this), t;
    }
    accept(e) {
      var t;
      return this.$controller.accept(e) === !0 ? !0 : (t = this.view) == null ? void 0 : t.accept(e);
    }
  }
  FO({ name: "case", bindables: h8, isTemplateController: !0 }, ZO);
  class d8 extends ZO {
    linkToSwitch(e) {
      if (e.defaultCase !== void 0)
        throw Me(
          816
          /* ErrorNames.switch_no_multiple_default */
        );
      e.defaultCase = this;
    }
  }
  FO({ name: "default-case", bindables: h8, isTemplateController: !0 }, d8);
  var f8, g8, p8;
  class QO {
    constructor() {
      this.preSettledTask = null, this.postSettledTask = null, this._factory = ge(xs), this._location = ge(Or), this._platform = ge(ho), this.logger = ge(Wd).scopeTo("promise.resolve");
    }
    link(e, t, i, r) {
      this.view = this._factory.create(this.$controller).setLocation(this._location);
    }
    attaching(e, t) {
      const i = this.view, r = this.$controller;
      return It(i.activate(e, r, this.viewScope = fi.fromParent(r.scope, {})), () => this.swap(e));
    }
    valueChanged(e, t) {
      this.$controller.isActive && this.swap(null);
    }
    swap(e) {
      var u, h;
      const t = this.value;
      if (!Oi(t)) {
        this.logger.warn(`The value '${Kd(t)}' is not a promise. No change will be done.`);
        return;
      }
      const i = this._platform.domQueue, r = this.fulfilled, s = this.rejected, o = this.pending, a = this.viewScope;
      let l;
      const c = () => {
        Pi(
          // At first deactivate the fulfilled and rejected views, as well as activate the pending view.
          // The order of these 3 should not necessarily be sequential (i.e. order-irrelevant).
          l = (this.preSettledTask = i.queueTask(() => Pi(r == null ? void 0 : r.deactivate(e), s == null ? void 0 : s.deactivate(e), o == null ? void 0 : o.activate(e, a)))).result.catch((d) => {
            if (!(d instanceof LA))
              throw d;
          }),
          t.then((d) => {
            if (this.value !== t)
              return;
            const f = () => {
              this.postSettlePromise = (this.postSettledTask = i.queueTask(() => Pi(o == null ? void 0 : o.deactivate(e), s == null ? void 0 : s.deactivate(e), r == null ? void 0 : r.activate(e, a, d)))).result;
            };
            this.preSettledTask.status === zE ? l.then(f) : (this.preSettledTask.cancel(), f());
          }, (d) => {
            if (this.value !== t)
              return;
            const f = () => {
              this.postSettlePromise = (this.postSettledTask = i.queueTask(() => Pi(o == null ? void 0 : o.deactivate(e), r == null ? void 0 : r.deactivate(e), s == null ? void 0 : s.activate(e, a, d)))).result;
            };
            this.preSettledTask.status === zE ? l.then(f) : (this.preSettledTask.cancel(), f());
          })
        );
      };
      ((u = this.postSettledTask) == null ? void 0 : u.status) === zE ? this.postSettlePromise.then(c) : ((h = this.postSettledTask) == null || h.cancel(), c());
    }
    detaching(e, t) {
      var i, r;
      return (i = this.preSettledTask) == null || i.cancel(), (r = this.postSettledTask) == null || r.cancel(), this.preSettledTask = this.postSettledTask = null, this.view.deactivate(e, this.$controller);
    }
    dispose() {
      var e;
      (e = this.view) == null || e.dispose(), this.view = void 0;
    }
  }
  QO.$au = {
    type: fr,
    name: "promise",
    isTemplateController: !0,
    bindables: ["value"]
  };
  class m8 {
    constructor() {
      this.view = void 0, this._factory = ge(xs), this._location = ge(Or);
    }
    link(e, t, i, r) {
      JO(e).pending = this;
    }
    activate(e, t) {
      let i = this.view;
      if (i === void 0 && (i = this.view = this._factory.create().setLocation(this._location)), !i.isActive)
        return i.activate(i, this.$controller, t);
    }
    deactivate(e) {
      const t = this.view;
      if (!(t === void 0 || !t.isActive))
        return t.deactivate(t, this.$controller);
    }
    detaching(e) {
      return this.deactivate(e);
    }
    dispose() {
      var e;
      (e = this.view) == null || e.dispose(), this.view = void 0;
    }
  }
  m8.$au = {
    type: fr,
    name: "pending",
    isTemplateController: !0,
    bindables: {
      value: { mode: Jn }
    }
  };
  class b8 {
    constructor() {
      this.view = void 0, this._factory = ge(xs), this._location = ge(Or);
    }
    link(e, t, i, r) {
      JO(e).fulfilled = this;
    }
    activate(e, t, i) {
      this.value = i;
      let r = this.view;
      if (r === void 0 && (r = this.view = this._factory.create().setLocation(this._location)), !r.isActive)
        return r.activate(r, this.$controller, t);
    }
    deactivate(e) {
      const t = this.view;
      if (!(t === void 0 || !t.isActive))
        return t.deactivate(t, this.$controller);
    }
    detaching(e, t) {
      return this.deactivate(e);
    }
    dispose() {
      var e;
      (e = this.view) == null || e.dispose(), this.view = void 0;
    }
  }
  b8.$au = {
    type: fr,
    name: "then",
    isTemplateController: !0,
    bindables: {
      value: { mode: Rc }
    }
  };
  class v8 {
    constructor() {
      this.view = void 0, this._factory = ge(xs), this._location = ge(Or);
    }
    link(e, t, i, r) {
      JO(e).rejected = this;
    }
    activate(e, t, i) {
      this.value = i;
      let r = this.view;
      if (r === void 0 && (r = this.view = this._factory.create().setLocation(this._location)), !r.isActive)
        return r.activate(r, this.$controller, t);
    }
    deactivate(e) {
      const t = this.view;
      if (!(t === void 0 || !t.isActive))
        return t.deactivate(t, this.$controller);
    }
    detaching(e, t) {
      return this.deactivate(e);
    }
    dispose() {
      var e;
      (e = this.view) == null || e.dispose(), this.view = void 0;
    }
  }
  v8.$au = {
    type: fr,
    name: "catch",
    isTemplateController: !0,
    bindables: {
      value: { mode: Rc }
    }
  };
  function JO(n) {
    const e = n.parent, t = e == null ? void 0 : e.viewModel;
    if (t instanceof QO)
      return t;
    throw Me(
      813
      /* ErrorNames.promise_invalid_usage */
    );
  }
  class YA {
    "promise.resolve"(e, t) {
      return new Ss(e, t, "promise", "bind");
    }
  }
  f8 = Symbol.metadata;
  YA[f8] = {
    [hl]: Ju.create([{ pattern: "promise.resolve", symbols: "" }], YA)
  };
  class KA {
    then(e, t) {
      return new Ss(e, t, "then", "from-view");
    }
  }
  g8 = Symbol.metadata;
  KA[g8] = {
    [hl]: Ju.create([{ pattern: "then", symbols: "" }], KA)
  };
  class qA {
    catch(e, t) {
      return new Ss(e, t, "catch", "from-view");
    }
  }
  p8 = Symbol.metadata;
  qA[p8] = {
    [hl]: Ju.create([{ pattern: "catch", symbols: "" }], qA)
  };
  class w8 {
    constructor() {
      this._needsApply = !1, this._element = ge(Fw), this._platform = ge(ho);
    }
    binding() {
      this.valueChanged();
    }
    /**
     * Invoked everytime the bound value changes.
     *
     * @param newValue - The new value.
     */
    valueChanged() {
      this.$controller.isActive ? this._apply() : this._needsApply = !0;
    }
    /**
     * Invoked when the attribute is attached to the DOM.
     */
    attached() {
      this._needsApply && (this._needsApply = !1, this._apply()), this._element.addEventListener("focus", this), this._element.addEventListener("blur", this);
    }
    /**
     * Invoked when the attribute is afterDetachChildren from the DOM.
     */
    detaching() {
      const e = this._element;
      e.removeEventListener("focus", this), e.removeEventListener("blur", this);
    }
    /**
     * EventTarget interface handler for better memory usage
     */
    handleEvent(e) {
      e.type === "focus" ? this.value = !0 : this._isElFocused || (this.value = !1);
    }
    /**
     * Focus/blur based on current value
     *
     * @internal
     */
    _apply() {
      const e = this._element, t = this._isElFocused, i = this.value;
      i && !t ? e.focus() : !i && t && e.blur();
    }
    /** @internal */
    get _isElFocused() {
      return this._element === this._platform.document.activeElement;
    }
  }
  w8.$au = {
    type: fr,
    name: "focus",
    bindables: {
      value: { mode: hz }
    }
  };
  class y8 {
    constructor() {
      this.position = "beforeend", this.strict = !1;
      const e = ge(xs), t = ge(Or), i = ge(ho);
      this._platform = i, this._resolvedTarget = i.document.createElement("div"), (this.view = e.create()).setLocation(this._targetLocation = vne(i)), pie(this.view.nodes, t);
    }
    attaching(e) {
      this.callbackContext == null && (this.callbackContext = this.$controller.scope.bindingContext);
      const t = this._resolvedTarget = this._getTarget();
      return this._moveLocation(t, this.position), this._activating(e, t);
    }
    detaching(e) {
      return this._deactivating(e, this._resolvedTarget);
    }
    targetChanged() {
      const { $controller: e } = this;
      if (!e.isActive)
        return;
      const t = this._getTarget();
      if (this._resolvedTarget === t)
        return;
      this._resolvedTarget = t;
      const i = It(this._deactivating(null, t), () => (this._moveLocation(t, this.position), this._activating(null, t)));
      Oi(i) && i.catch($A);
    }
    positionChanged() {
      const { $controller: e, _resolvedTarget: t } = this;
      if (!e.isActive)
        return;
      const i = It(this._deactivating(null, t), () => (this._moveLocation(t, this.position), this._activating(null, t)));
      Oi(i) && i.catch($A);
    }
    /** @internal */
    _activating(e, t) {
      const { activating: i, callbackContext: r, view: s } = this;
      return It(i == null ? void 0 : i.call(r, t, s), () => this._activate(e, t));
    }
    /** @internal */
    _activate(e, t) {
      const { $controller: i, view: r } = this;
      if (e === null)
        r.nodes.insertBefore(this._targetLocation);
      else
        return It(r.activate(e ?? r, i, i.scope), () => this._activated(t));
      return this._activated(t);
    }
    /** @internal */
    _activated(e) {
      const { activated: t, callbackContext: i, view: r } = this;
      return t == null ? void 0 : t.call(i, e, r);
    }
    /** @internal */
    _deactivating(e, t) {
      const { deactivating: i, callbackContext: r, view: s } = this;
      return It(i == null ? void 0 : i.call(r, t, s), () => this._deactivate(e, t));
    }
    /** @internal */
    _deactivate(e, t) {
      const { $controller: i, view: r } = this;
      if (e === null)
        r.nodes.remove();
      else
        return It(r.deactivate(e, i), () => this._deactivated(t));
      return this._deactivated(t);
    }
    /** @internal */
    _deactivated(e) {
      const { deactivated: t, callbackContext: i, view: r } = this;
      return It(t == null ? void 0 : t.call(i, e, r), () => this._removeLocation());
    }
    /** @internal */
    _getTarget() {
      const e = this._platform, t = e.document;
      let i = this.target, r = this.renderContext;
      if (i === "") {
        if (this.strict)
          throw Me(
            811
            /* ErrorNames.portal_query_empty */
          );
        return t.body;
      }
      if (yt(i)) {
        let s = t;
        yt(r) && (r = t.querySelector(r)), r instanceof e.Node && (s = r), i = s.querySelector(i);
      }
      if (i instanceof e.Node)
        return i;
      if (i == null) {
        if (this.strict)
          throw Me(
            812
            /* ErrorNames.portal_no_target */
          );
        return t.body;
      }
      return i;
    }
    /** @internal */
    _removeLocation() {
      this._targetLocation.remove(), this._targetLocation.$start.remove();
    }
    /** @internal */
    _moveLocation(e, t) {
      const i = this._targetLocation, r = i.$start, s = e.parentNode, o = [r, i];
      switch (t) {
        case "beforeend":
          ky(e, null, o);
          break;
        case "afterbegin":
          ky(e, e.firstChild, o);
          break;
        case "beforebegin":
          ky(s, e, o);
          break;
        case "afterend":
          ky(s, e.nextSibling, o);
          break;
        default:
          throw Me(779, t);
      }
    }
    dispose() {
      this.view.dispose(), this.view = void 0, this.callbackContext = null;
    }
    accept(e) {
      var t;
      if (((t = this.view) == null ? void 0 : t.accept(e)) === !0)
        return !0;
    }
  }
  y8.$au = {
    type: fr,
    name: "portal",
    isTemplateController: !0,
    bindables: [
      { name: "target", primary: !0 },
      "position",
      "activated",
      "activating",
      "callbackContext",
      { name: "renderContext", callback: "targetChanged" },
      "strict",
      "deactivated",
      "deactivating"
    ]
    // bindables: {
    //   target: { primary: true },
    //   position: true,
    //   renderContext: { callback: 'targetChanged' },
    //   activated: true,
    //   activating: true,
    //   callbackContext: true,
    //   deactivated: true,
    //   deactivating: true,
    //   strict: true
    // }
  };
  let Fie;
  class QR {
    constructor() {
      var h, d, f, g;
      this._parentScope = null, this._outerScope = null, this._attached = !1, this.expose = null, this.slotchange = null, this._subs = /* @__PURE__ */ new Set(), this._observer = null;
      const e = ge(Xd), t = ge(Or), i = ge($p), r = ge(rh), s = this.name = i.data.name, o = (h = i.projections) == null ? void 0 : h[Iz], a = (f = (d = e.instruction) == null ? void 0 : d.projections) == null ? void 0 : f[s], l = e.controller.container;
      let c, u;
      a == null ? (u = l.createChild({ inheritParentResources: !0 }), c = r.getViewFactory(o ?? Fie ?? (Fie = Pr.create({
        name: "au-slot-empty-template",
        template: "",
        needsCompile: !1
      })), u), this._hasProjection = !1) : (u = l.createChild(), u.useResources(e.parent.controller.container), di(u, Xd, new ar(void 0, e.parent)), c = r.getViewFactory(a, u), this._hasProjection = !0, this._slotwatchers = ((g = l.getAll(Cne, !1)) == null ? void 0 : g.filter((p) => p.slotName === "*" || p.slotName === s)) ?? pt), this._hasSlotWatcher = (this._slotwatchers ?? (this._slotwatchers = pt)).length > 0, this._hdrContext = e, this.view = c.create().setLocation(this._location = t);
    }
    get nodes() {
      const e = [], t = this._location;
      let i = t.$start.nextSibling;
      for (; i != null && i !== t; )
        i.nodeType !== /* comment */
        8 && e.push(i), i = i.nextSibling;
      return e;
    }
    subscribe(e) {
      this._subs.add(e);
    }
    unsubscribe(e) {
      this._subs.delete(e);
    }
    binding(e, t) {
      var s;
      for (this._parentScope = t.scope; t.vmKind === "synthetic" && ((s = t.parent) == null ? void 0 : s.viewModel) instanceof QR; )
        t = t.parent.parent;
      const i = t.scope.bindingContext;
      let r;
      this._hasProjection && (r = this._hdrContext.controller.scope.parent, (this._outerScope = fi.fromParent(r, r.bindingContext)).overrideContext.$host = this.expose ?? i);
    }
    attaching(e, t) {
      return It(this.view.activate(e, this.$controller, this._hasProjection ? this._outerScope : this._parentScope), () => {
        this._hasSlotWatcher && (this._slotwatchers.forEach((i) => i.watch(this)), this._observe(), this._notifySlotChange(), this._attached = !0);
      });
    }
    detaching(e, t) {
      return this._attached = !1, this._unobserve(), this._slotwatchers.forEach((i) => i.unwatch(this)), this.view.deactivate(e, this.$controller);
    }
    exposeChanged(e) {
      this._hasProjection && this._outerScope != null && (this._outerScope.overrideContext.$host = e);
    }
    dispose() {
      this.view.dispose(), this.view = void 0;
    }
    accept(e) {
      var t;
      if (((t = this.view) == null ? void 0 : t.accept(e)) === !0)
        return !0;
    }
    /** @internal */
    _observe() {
      if (this._observer != null)
        return;
      const e = this._location, t = e.parentElement;
      t != null && (this._observer = Pz(t, (i) => {
        Bie(e, i) && this._notifySlotChange();
      })).observe(t, { childList: !0 });
    }
    /** @internal */
    _unobserve() {
      var e;
      (e = this._observer) == null || e.disconnect(), this._observer = null;
    }
    /** @internal */
    _notifySlotChange() {
      var r;
      const e = this.nodes, t = new Set(this._subs);
      let i;
      this._attached && ((r = this.slotchange) == null || r.call(void 0, this.name, e));
      for (i of t)
        i.handleSlotChange(this, e);
    }
  }
  QR.$au = {
    type: Zd,
    name: "au-slot",
    template: null,
    containerless: !0,
    processContent(n, e, t) {
      t.name = n.getAttribute("name") ?? Iz;
      let i = n.firstChild, r = null;
      for (; i !== null; )
        r = i.nextSibling, wne(i) && i.hasAttribute(yne) && (console.warn("[DEV:aurelia] detected [au-slot] attribute on a child node", `of an <au-slot> element: "<${i.nodeName} au-slot>".`, "This element will be ignored and removed"), n.removeChild(i)), i = r;
    },
    bindables: ["expose", "slotchange"]
  };
  const Hy = (n, e) => n.compareDocumentPosition(e), Bie = (n, e) => {
    for (const { addedNodes: t, removedNodes: i, nextSibling: r } of e) {
      let s = 0, o = t.length, a;
      for (; s < o; ++s)
        if (a = t[s], Hy(n.$start, a) === /* DOCUMENT_POSITION_FOLLOWING */
        4 && Hy(n, a) === /* DOCUMENT_POSITION_PRECEDING */
        2)
          return !0;
      if (i.length > 0 && r != null && Hy(n.$start, r) === /* DOCUMENT_POSITION_FOLLOWING */
      4 && Hy(n, r) === /* DOCUMENT_POSITION_PRECEDING */
      2)
        return !0;
    }
  };
  class C8 {
    constructor() {
      this.scopeBehavior = "auto", this._composition = void 0, this.tag = null, this._container = ge(Dp), this.parent = ge(ZR), this._host = ge(Fw), this._location = ge(Or), this._platform = ge(ho), this._rendering = ge(rh), this._instruction = ge($p), this._contextFactory = ge(vQ(Wie)), this._compiler = ge(LR), this._hydrationContext = ge(Xd), this._exprParser = ge(Lp), this._observerLocator = ge(Bp);
    }
    get composing() {
      return this._composing;
    }
    get composition() {
      return this._composition;
    }
    attaching(e, t) {
      return this._composing = It(this.queue(new a2(this.template, this.component, this.model, void 0), e), (i) => {
        this._contextFactory._isCurrent(i) && (this._composing = void 0);
      });
    }
    detaching(e) {
      const t = this._composition, i = this._composing;
      return this._contextFactory.invalidate(), this._composition = this._composing = void 0, It(i, () => t == null ? void 0 : t.deactivate(e));
    }
    /** @internal */
    propertyChanged(e) {
      var t;
      if (!(e === "composing" || e === "composition")) {
        if (e === "model" && this._composition != null) {
          this._composition.update(this.model);
          return;
        }
        if (e === "tag" && ((t = this._composition) == null ? void 0 : t.controller.vmKind) === Vs) {
          console.warn("[DEV:aurelia] Changing tag name of a custom element composition is ignored.");
          return;
        }
        this._composing = It(this._composing, () => It(this.queue(new a2(this.template, this.component, this.model, e), void 0), (i) => {
          this._contextFactory._isCurrent(i) && (this._composing = void 0);
        }));
      }
    }
    /** @internal */
    queue(e, t) {
      const i = this._contextFactory, r = this._composition;
      return It(i.create(e), (s) => i._isCurrent(s) ? It(this.compose(s), (o) => i._isCurrent(s) ? It(o.activate(t), () => i._isCurrent(s) ? (this._composition = o, It(r == null ? void 0 : r.deactivate(t), () => s)) : It(
        o.controller.deactivate(o.controller, this.$controller),
        // todo: do we need to deactivate?
        () => (o.controller.dispose(), s)
      )) : (o.controller.dispose(), s)) : s);
    }
    /** @internal */
    compose(e) {
      const { _template: t, _component: i, _model: r } = e.change, { _container: s, $controller: o, _location: a, _instruction: l } = this, c = this._getDefinition(this._hydrationContext.controller.container, i), u = s.createChild(), h = this._platform.document.createElement(c == null ? this.tag ?? "div" : c.name);
      a.parentNode.insertBefore(h, a);
      let d;
      c == null ? d = this.tag == null ? Jv(h) : null : d = c.containerless ? Jv(h) : null;
      const f = () => {
        var m;
        if (h.remove(), d != null) {
          let v = d.$start.nextSibling, y = null;
          for (; v !== null && v !== d; )
            y = v.nextSibling, v.remove(), v = y;
          (m = d.$start) == null || m.remove(), d.remove();
        }
      }, g = this._createComponentInstance(u, typeof i == "string" ? c.Type : i, h, d), p = () => {
        const m = l.captures ?? pt;
        if (c !== null) {
          const v = c.capture, [y, w] = m.reduce((E, C) => {
            const T = !(C.target in c.bindables) && (v === !0 || jt(v) && !!v(C.target));
            return E[T ? 0 : 1].push(C), E;
          }, [[], []]), R = ys.$el(u, g, h, {
            projections: l.projections,
            captures: y
          }, c, d);
          return this._createSpreadBindings(h, c, w).forEach((E) => R.addBinding(E)), new c2(
            R,
            (E) => R.activate(E ?? R, o, o.scope.parent),
            // todo: call deactivate on the component component
            (E) => It(R.deactivate(E ?? R, o), f),
            // casting is technically incorrect
            // but it's ignored in the caller anyway
            (E) => {
              var C;
              return (C = g.activate) == null ? void 0 : C.call(g, E);
            },
            e
          );
        } else {
          const v = Pr.create({
            name: Li.generateName(),
            template: t
          }), y = this._rendering.getViewFactory(v, u), w = ys.$view(y, o), R = this.scopeBehavior === "auto" ? fi.fromParent(this.parent.scope, g) : fi.create(g);
          return w.setHost(h), d == null ? this._createSpreadBindings(h, v, m).forEach((E) => w.addBinding(E)) : w.setLocation(d), new c2(
            w,
            (E) => w.activate(E ?? w, o, R),
            // todo: call deactivate on the component
            // a difference with composing custom element is that we leave render location/host alone
            // as they all share the same host/render location
            (E) => It(w.deactivate(E ?? w, o), f),
            // casting is technically incorrect
            // but it's ignored in the caller anyway
            (E) => {
              var C;
              return (C = g.activate) == null ? void 0 : C.call(g, E);
            },
            e
          );
        }
      };
      return "activate" in g ? It(g.activate(r), () => p()) : p();
    }
    /** @internal */
    _createComponentInstance(e, t, i, r) {
      if (t == null)
        return new Vie();
      if (typeof t == "object")
        return t;
      const s = this._platform;
      KO(e, i, s), di(e, Or, new ar("IRenderLocation", r));
      const o = e.invoke(t);
      return di(e, t, new ar("au-compose.component", o)), o;
    }
    /** @internal */
    _getDefinition(e, t) {
      if (typeof t == "string") {
        const r = Li.find(e, t);
        if (r == null)
          throw Me(806, t);
        return r;
      }
      const i = jt(t) ? t : t == null ? void 0 : t.constructor;
      return Li.isType(i, void 0) ? Li.getDefinition(i, null) : null;
    }
    /** @internal */
    _createSpreadBindings(e, t, i) {
      const r = new Kz(this.$controller, { projections: null, captures: i }, this._hydrationContext.parent);
      return YR.create(r, e, t, this._rendering, this._compiler, this._platform, this._exprParser, this._observerLocator);
    }
  }
  C8.$au = {
    type: Zd,
    name: "au-compose",
    capture: !0,
    containerless: !0,
    bindables: [
      "template",
      "component",
      "model",
      { name: "scopeBehavior", set: (n) => {
        if (n === "scoped" || n === "auto")
          return n;
        throw Me(805, n);
      } },
      { name: "composing", mode: Rc },
      { name: "composition", mode: Rc },
      "tag"
    ]
  };
  class Vie {
  }
  class Wie {
    constructor() {
      this.id = 0;
    }
    _isCurrent(e) {
      return e.id === this.id;
    }
    create(e) {
      return It(e.load(), (t) => new jie(++this.id, t));
    }
    // simplify increasing the id will invalidate all previously created context
    invalidate() {
      this.id++;
    }
  }
  class a2 {
    constructor(e, t, i, r) {
      this._template = e, this._component = t, this._model = i, this._src = r;
    }
    load() {
      return Oi(this._template) || Oi(this._component) ? Promise.all([this._template, this._component]).then(([e, t]) => new l2(e, t, this._model, this._src)) : new l2(this._template, this._component, this._model, this._src);
    }
  }
  class l2 {
    constructor(e, t, i, r) {
      this._template = e, this._component = t, this._model = i, this._src = r;
    }
  }
  class jie {
    constructor(e, t) {
      this.id = e, this.change = t;
    }
  }
  class c2 {
    constructor(e, t, i, r, s) {
      this.controller = e, this.start = t, this.stop = i, this.update = r, this.context = s, this.state = 0;
    }
    activate(e) {
      if (this.state !== 0)
        throw Me(807, this);
      return this.state = 1, this.start(e);
    }
    deactivate(e) {
      switch (this.state) {
        case 1:
          return this.state = -1, this.stop(e);
        case -1:
          throw Me(
            808
            /* ErrorNames.au_compose_duplicate_deactivate */
          );
        default:
          this.state = -1;
      }
    }
  }
  const zie = /* @__PURE__ */ zn("ISanitizer", (n) => n.singleton(class {
    sanitize() {
      throw Me(99, "sanitize");
    }
  }));
  class S8 {
    constructor() {
      this._sanitizer = ge(zie);
    }
    /**
     * Process the provided markup that flows to the view.
     *
     * @param untrustedMarkup - The untrusted markup to be sanitized.
     */
    toView(e) {
      return e == null ? null : this._sanitizer.sanitize(e);
    }
  }
  S8.$au = {
    type: Lg,
    name: "sanitize"
  };
  class _8 {
    constructor() {
      this.el = ge(Fw), this.p = ge(ho), this._isActive = !1, this._task = null, this.$val = "", this.$prio = "", this.update = () => {
        this._task = null, !!this.value !== this._isToggled && (this._isToggled === this._base ? (this._isToggled = !this._base, this.$val = this.el.style.getPropertyValue("display"), this.$prio = this.el.style.getPropertyPriority("display"), this.el.style.setProperty("display", "none", "important")) : (this._isToggled = this._base, this.el.style.setProperty("display", this.$val, this.$prio), this.el.getAttribute("style") === "" && this.el.removeAttribute("style")));
      };
      const e = ge($p);
      this._isToggled = this._base = e.alias !== "hide";
    }
    binding() {
      this._isActive = !0, this.update();
    }
    detaching() {
      var e;
      this._isActive = !1, (e = this._task) == null || e.cancel(), this._task = null;
    }
    valueChanged() {
      this._isActive && this._task === null && (this._task = this.p.domQueue.queueTask(this.update));
    }
  }
  _8.$au = {
    type: fr,
    name: "show",
    bindables: ["value"],
    aliases: ["hide"]
  };
  const Uie = [
    _ie,
    Mte,
    qO
  ], Gie = [
    xA,
    EA,
    TA,
    bne
  ], Yie = [
    j5,
    F5,
    V5,
    B5,
    W5,
    z5,
    X5,
    U5,
    G5,
    q5,
    K5,
    Y5,
    Z5
  ], Kie = [
    _z,
    wz,
    yz,
    Cz,
    Rz,
    Ez,
    Sz,
    S8,
    o_,
    l8,
    c8,
    u8,
    XO,
    ZO,
    d8,
    QO,
    m8,
    b8,
    v8,
    YA,
    KA,
    qA,
    s8,
    o8,
    a8,
    C8,
    y8,
    w8,
    _8,
    QR
  ], qie = [
    Pne,
    Ine,
    Mne,
    Ane,
    _ne,
    Rne,
    Ene,
    xne,
    Tne,
    Dne,
    Vne,
    Nne,
    Lne,
    Hne,
    Fne,
    One,
    Wne,
    jne
  ], Xie = /* @__PURE__ */ R8(Za);
  function R8(n) {
    return {
      optionsProvider: n,
      /**
       * Apply this configuration to the provided container.
       */
      register(e) {
        const t = {
          coercingOptions: {
            enableCoercion: !1,
            coerceNullish: !1
          }
        };
        return n(t), e.register(Zte(tz, t.coercingOptions), i5, ...Uie, ...Kie, ...Gie, ...Yie, ...qie);
      },
      customize(e) {
        return R8(e ?? n);
      }
    };
  }
  class Zie {
    constructor() {
      this.ctn = ge(Dp), this.p = ge(ho), this.r = ge(rh);
    }
    define(e, t, i) {
      if (!e.includes("-"))
        throw rx('Invalid web-components custom element name. It must include a "-"');
      let r;
      if (t == null)
        throw rx("Invalid custom element definition");
      switch (typeof t) {
        case "function":
          r = Li.isType(t) ? Li.getDefinition(t) : Pr.create(Li.generateName(), t);
          break;
        default:
          r = Pr.getOrCreate(t);
          break;
      }
      if (r.containerless)
        throw rx("Containerless custom element is not supported. Consider using buitl-in extends instead");
      const s = i != null && i.extends ? this.p.document.createElement(i.extends).constructor : this.p.HTMLElement, o = this.ctn, a = this.r, l = r.bindables, c = this.p;
      class u extends s {
        auInit() {
          if (this.auInited)
            return;
          this.auInited = !0;
          const d = o.createChild();
          ix(d, c.HTMLElement, ix(d, c.Element, ix(d, Fw, new ar("ElementProvider", this))));
          const f = a.compile(r, d), g = d.invoke(f.Type), p = this.auCtrl = ys.$el(d, g, this, null, f);
          nr(this, f.key, p);
        }
        connectedCallback() {
          this.auInit(), this.auCtrl.activate(this.auCtrl, null);
        }
        disconnectedCallback() {
          this.auCtrl.deactivate(this.auCtrl, null);
        }
        adoptedCallback() {
          this.auInit();
        }
        attributeChangedCallback(d, f, g) {
          this.auInit(), this.auCtrl.viewModel[d] = g;
        }
      }
      u.observedAttributes = Object.keys(l);
      for (const h in l)
        Object.defineProperty(u.prototype, h, {
          configurable: !0,
          enumerable: !1,
          get() {
            return this.auCtrl.viewModel[h];
          },
          set(d) {
            this.auInited || this.auInit(), this.auCtrl.viewModel[h] = d;
          }
        });
      return this.p.customElements.define(e, u, i), u;
    }
  }
  const ix = (n, e, t) => n.registerResolver(e, t), rx = (n) => new Error(n), E8 = "chartjs", XA = `<div>
    <canvas ref="mychart"></canvas>
</div>
`, x8 = [], T8 = {};
  let sx;
  function Qie(n) {
    sx || (sx = Li.define({ name: E8, template: XA, dependencies: x8, bindables: T8 })), n.register(sx);
  }
  const Jie = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    bindables: T8,
    default: XA,
    dependencies: x8,
    name: E8,
    register: Qie,
    template: XA
  }, Symbol.toStringTag, { value: "Module" }));
  /*!
   * @kurkle/color v0.3.4
   * https://github.com/kurkle/color#readme
   * (c) 2024 Jukka Kurkela
   * Released under the MIT License
   */
  function Bw(n) {
    return n + 0.5 | 0;
  }
  const Ru = (n, e, t) => Math.max(Math.min(n, t), e);
  function Nb(n) {
    return Ru(Bw(n * 2.55), 0, 255);
  }
  function Nu(n) {
    return Ru(Bw(n * 255), 0, 255);
  }
  function ec(n) {
    return Ru(Bw(n / 2.55) / 100, 0, 1);
  }
  function u2(n) {
    return Ru(Bw(n * 100), 0, 100);
  }
  const ks = {
    0: 0,
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
    8: 8,
    9: 9,
    A: 10,
    B: 11,
    C: 12,
    D: 13,
    E: 14,
    F: 15,
    a: 10,
    b: 11,
    c: 12,
    d: 13,
    e: 14,
    f: 15
  }, ZA = [..."0123456789ABCDEF"], ere = (n) => ZA[n & 15], tre = (n) => ZA[(n & 240) >> 4] + ZA[n & 15], $y = (n) => (n & 240) >> 4 === (n & 15), nre = (n) => $y(n.r) && $y(n.g) && $y(n.b) && $y(n.a);
  function ire(n) {
    var e = n.length, t;
    return n[0] === "#" && (e === 4 || e === 5 ? t = {
      r: 255 & ks[n[1]] * 17,
      g: 255 & ks[n[2]] * 17,
      b: 255 & ks[n[3]] * 17,
      a: e === 5 ? ks[n[4]] * 17 : 255
    } : (e === 7 || e === 9) && (t = {
      r: ks[n[1]] << 4 | ks[n[2]],
      g: ks[n[3]] << 4 | ks[n[4]],
      b: ks[n[5]] << 4 | ks[n[6]],
      a: e === 9 ? ks[n[7]] << 4 | ks[n[8]] : 255
    })), t;
  }
  const rre = (n, e) => n < 255 ? e(n) : "";
  function sre(n) {
    var e = nre(n) ? ere : tre;
    return n ? "#" + e(n.r) + e(n.g) + e(n.b) + rre(n.a, e) : void 0;
  }
  const ore = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
  function M8(n, e, t) {
    const i = e * Math.min(t, 1 - t), r = (s, o = (s + n / 30) % 12) => t - i * Math.max(Math.min(o - 3, 9 - o, 1), -1);
    return [r(0), r(8), r(4)];
  }
  function are(n, e, t) {
    const i = (r, s = (r + n / 60) % 6) => t - t * e * Math.max(Math.min(s, 4 - s, 1), 0);
    return [i(5), i(3), i(1)];
  }
  function lre(n, e, t) {
    const i = M8(n, 1, 0.5);
    let r;
    for (e + t > 1 && (r = 1 / (e + t), e *= r, t *= r), r = 0; r < 3; r++)
      i[r] *= 1 - e - t, i[r] += e;
    return i;
  }
  function cre(n, e, t, i, r) {
    return n === r ? (e - t) / i + (e < t ? 6 : 0) : e === r ? (t - n) / i + 2 : (n - e) / i + 4;
  }
  function ek(n) {
    const t = n.r / 255, i = n.g / 255, r = n.b / 255, s = Math.max(t, i, r), o = Math.min(t, i, r), a = (s + o) / 2;
    let l, c, u;
    return s !== o && (u = s - o, c = a > 0.5 ? u / (2 - s - o) : u / (s + o), l = cre(t, i, r, u, s), l = l * 60 + 0.5), [l | 0, c || 0, a];
  }
  function tk(n, e, t, i) {
    return (Array.isArray(e) ? n(e[0], e[1], e[2]) : n(e, t, i)).map(Nu);
  }
  function nk(n, e, t) {
    return tk(M8, n, e, t);
  }
  function ure(n, e, t) {
    return tk(lre, n, e, t);
  }
  function hre(n, e, t) {
    return tk(are, n, e, t);
  }
  function A8(n) {
    return (n % 360 + 360) % 360;
  }
  function dre(n) {
    const e = ore.exec(n);
    let t = 255, i;
    if (!e)
      return;
    e[5] !== i && (t = e[6] ? Nb(+e[5]) : Nu(+e[5]));
    const r = A8(+e[2]), s = +e[3] / 100, o = +e[4] / 100;
    return e[1] === "hwb" ? i = ure(r, s, o) : e[1] === "hsv" ? i = hre(r, s, o) : i = nk(r, s, o), {
      r: i[0],
      g: i[1],
      b: i[2],
      a: t
    };
  }
  function fre(n, e) {
    var t = ek(n);
    t[0] = A8(t[0] + e), t = nk(t), n.r = t[0], n.g = t[1], n.b = t[2];
  }
  function gre(n) {
    if (!n)
      return;
    const e = ek(n), t = e[0], i = u2(e[1]), r = u2(e[2]);
    return n.a < 255 ? `hsla(${t}, ${i}%, ${r}%, ${ec(n.a)})` : `hsl(${t}, ${i}%, ${r}%)`;
  }
  const h2 = {
    x: "dark",
    Z: "light",
    Y: "re",
    X: "blu",
    W: "gr",
    V: "medium",
    U: "slate",
    A: "ee",
    T: "ol",
    S: "or",
    B: "ra",
    C: "lateg",
    D: "ights",
    R: "in",
    Q: "turquois",
    E: "hi",
    P: "ro",
    O: "al",
    N: "le",
    M: "de",
    L: "yello",
    F: "en",
    K: "ch",
    G: "arks",
    H: "ea",
    I: "ightg",
    J: "wh"
  }, d2 = {
    OiceXe: "f0f8ff",
    antiquewEte: "faebd7",
    aqua: "ffff",
    aquamarRe: "7fffd4",
    azuY: "f0ffff",
    beige: "f5f5dc",
    bisque: "ffe4c4",
    black: "0",
    blanKedOmond: "ffebcd",
    Xe: "ff",
    XeviTet: "8a2be2",
    bPwn: "a52a2a",
    burlywood: "deb887",
    caMtXe: "5f9ea0",
    KartYuse: "7fff00",
    KocTate: "d2691e",
    cSO: "ff7f50",
    cSnflowerXe: "6495ed",
    cSnsilk: "fff8dc",
    crimson: "dc143c",
    cyan: "ffff",
    xXe: "8b",
    xcyan: "8b8b",
    xgTMnPd: "b8860b",
    xWay: "a9a9a9",
    xgYF: "6400",
    xgYy: "a9a9a9",
    xkhaki: "bdb76b",
    xmagFta: "8b008b",
    xTivegYF: "556b2f",
    xSange: "ff8c00",
    xScEd: "9932cc",
    xYd: "8b0000",
    xsOmon: "e9967a",
    xsHgYF: "8fbc8f",
    xUXe: "483d8b",
    xUWay: "2f4f4f",
    xUgYy: "2f4f4f",
    xQe: "ced1",
    xviTet: "9400d3",
    dAppRk: "ff1493",
    dApskyXe: "bfff",
    dimWay: "696969",
    dimgYy: "696969",
    dodgerXe: "1e90ff",
    fiYbrick: "b22222",
    flSOwEte: "fffaf0",
    foYstWAn: "228b22",
    fuKsia: "ff00ff",
    gaRsbSo: "dcdcdc",
    ghostwEte: "f8f8ff",
    gTd: "ffd700",
    gTMnPd: "daa520",
    Way: "808080",
    gYF: "8000",
    gYFLw: "adff2f",
    gYy: "808080",
    honeyMw: "f0fff0",
    hotpRk: "ff69b4",
    RdianYd: "cd5c5c",
    Rdigo: "4b0082",
    ivSy: "fffff0",
    khaki: "f0e68c",
    lavFMr: "e6e6fa",
    lavFMrXsh: "fff0f5",
    lawngYF: "7cfc00",
    NmoncEffon: "fffacd",
    ZXe: "add8e6",
    ZcSO: "f08080",
    Zcyan: "e0ffff",
    ZgTMnPdLw: "fafad2",
    ZWay: "d3d3d3",
    ZgYF: "90ee90",
    ZgYy: "d3d3d3",
    ZpRk: "ffb6c1",
    ZsOmon: "ffa07a",
    ZsHgYF: "20b2aa",
    ZskyXe: "87cefa",
    ZUWay: "778899",
    ZUgYy: "778899",
    ZstAlXe: "b0c4de",
    ZLw: "ffffe0",
    lime: "ff00",
    limegYF: "32cd32",
    lRF: "faf0e6",
    magFta: "ff00ff",
    maPon: "800000",
    VaquamarRe: "66cdaa",
    VXe: "cd",
    VScEd: "ba55d3",
    VpurpN: "9370db",
    VsHgYF: "3cb371",
    VUXe: "7b68ee",
    VsprRggYF: "fa9a",
    VQe: "48d1cc",
    VviTetYd: "c71585",
    midnightXe: "191970",
    mRtcYam: "f5fffa",
    mistyPse: "ffe4e1",
    moccasR: "ffe4b5",
    navajowEte: "ffdead",
    navy: "80",
    Tdlace: "fdf5e6",
    Tive: "808000",
    TivedBb: "6b8e23",
    Sange: "ffa500",
    SangeYd: "ff4500",
    ScEd: "da70d6",
    pOegTMnPd: "eee8aa",
    pOegYF: "98fb98",
    pOeQe: "afeeee",
    pOeviTetYd: "db7093",
    papayawEp: "ffefd5",
    pHKpuff: "ffdab9",
    peru: "cd853f",
    pRk: "ffc0cb",
    plum: "dda0dd",
    powMrXe: "b0e0e6",
    purpN: "800080",
    YbeccapurpN: "663399",
    Yd: "ff0000",
    Psybrown: "bc8f8f",
    PyOXe: "4169e1",
    saddNbPwn: "8b4513",
    sOmon: "fa8072",
    sandybPwn: "f4a460",
    sHgYF: "2e8b57",
    sHshell: "fff5ee",
    siFna: "a0522d",
    silver: "c0c0c0",
    skyXe: "87ceeb",
    UXe: "6a5acd",
    UWay: "708090",
    UgYy: "708090",
    snow: "fffafa",
    sprRggYF: "ff7f",
    stAlXe: "4682b4",
    tan: "d2b48c",
    teO: "8080",
    tEstN: "d8bfd8",
    tomato: "ff6347",
    Qe: "40e0d0",
    viTet: "ee82ee",
    JHt: "f5deb3",
    wEte: "ffffff",
    wEtesmoke: "f5f5f5",
    Lw: "ffff00",
    LwgYF: "9acd32"
  };
  function pre() {
    const n = {}, e = Object.keys(d2), t = Object.keys(h2);
    let i, r, s, o, a;
    for (i = 0; i < e.length; i++) {
      for (o = a = e[i], r = 0; r < t.length; r++)
        s = t[r], a = a.replace(s, h2[s]);
      s = parseInt(d2[o], 16), n[a] = [s >> 16 & 255, s >> 8 & 255, s & 255];
    }
    return n;
  }
  let Fy;
  function mre(n) {
    Fy || (Fy = pre(), Fy.transparent = [0, 0, 0, 0]);
    const e = Fy[n.toLowerCase()];
    return e && {
      r: e[0],
      g: e[1],
      b: e[2],
      a: e.length === 4 ? e[3] : 255
    };
  }
  const bre = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
  function vre(n) {
    const e = bre.exec(n);
    let t = 255, i, r, s;
    if (e) {
      if (e[7] !== i) {
        const o = +e[7];
        t = e[8] ? Nb(o) : Ru(o * 255, 0, 255);
      }
      return i = +e[1], r = +e[3], s = +e[5], i = 255 & (e[2] ? Nb(i) : Ru(i, 0, 255)), r = 255 & (e[4] ? Nb(r) : Ru(r, 0, 255)), s = 255 & (e[6] ? Nb(s) : Ru(s, 0, 255)), {
        r: i,
        g: r,
        b: s,
        a: t
      };
    }
  }
  function wre(n) {
    return n && (n.a < 255 ? `rgba(${n.r}, ${n.g}, ${n.b}, ${ec(n.a)})` : `rgb(${n.r}, ${n.g}, ${n.b})`);
  }
  const ox = (n) => n <= 31308e-7 ? n * 12.92 : Math.pow(n, 1 / 2.4) * 1.055 - 0.055, Hf = (n) => n <= 0.04045 ? n / 12.92 : Math.pow((n + 0.055) / 1.055, 2.4);
  function yre(n, e, t) {
    const i = Hf(ec(n.r)), r = Hf(ec(n.g)), s = Hf(ec(n.b));
    return {
      r: Nu(ox(i + t * (Hf(ec(e.r)) - i))),
      g: Nu(ox(r + t * (Hf(ec(e.g)) - r))),
      b: Nu(ox(s + t * (Hf(ec(e.b)) - s))),
      a: n.a + t * (e.a - n.a)
    };
  }
  function By(n, e, t) {
    if (n) {
      let i = ek(n);
      i[e] = Math.max(0, Math.min(i[e] + i[e] * t, e === 0 ? 360 : 1)), i = nk(i), n.r = i[0], n.g = i[1], n.b = i[2];
    }
  }
  function P8(n, e) {
    return n && Object.assign(e || {}, n);
  }
  function f2(n) {
    var e = {
      r: 0,
      g: 0,
      b: 0,
      a: 255
    };
    return Array.isArray(n) ? n.length >= 3 && (e = {
      r: n[0],
      g: n[1],
      b: n[2],
      a: 255
    }, n.length > 3 && (e.a = Nu(n[3]))) : (e = P8(n, {
      r: 0,
      g: 0,
      b: 0,
      a: 1
    }), e.a = Nu(e.a)), e;
  }
  function Cre(n) {
    return n.charAt(0) === "r" ? vre(n) : dre(n);
  }
  let I8 = class QA {
    constructor(e) {
      if (e instanceof QA)
        return e;
      const t = typeof e;
      let i;
      t === "object" ? i = f2(e) : t === "string" && (i = ire(e) || mre(e) || Cre(e)), this._rgb = i, this._valid = !!i;
    }
    get valid() {
      return this._valid;
    }
    get rgb() {
      var e = P8(this._rgb);
      return e && (e.a = ec(e.a)), e;
    }
    set rgb(e) {
      this._rgb = f2(e);
    }
    rgbString() {
      return this._valid ? wre(this._rgb) : void 0;
    }
    hexString() {
      return this._valid ? sre(this._rgb) : void 0;
    }
    hslString() {
      return this._valid ? gre(this._rgb) : void 0;
    }
    mix(e, t) {
      if (e) {
        const i = this.rgb, r = e.rgb;
        let s;
        const o = t === s ? 0.5 : t, a = 2 * o - 1, l = i.a - r.a, c = ((a * l === -1 ? a : (a + l) / (1 + a * l)) + 1) / 2;
        s = 1 - c, i.r = 255 & c * i.r + s * r.r + 0.5, i.g = 255 & c * i.g + s * r.g + 0.5, i.b = 255 & c * i.b + s * r.b + 0.5, i.a = o * i.a + (1 - o) * r.a, this.rgb = i;
      }
      return this;
    }
    interpolate(e, t) {
      return e && (this._rgb = yre(this._rgb, e._rgb, t)), this;
    }
    clone() {
      return new QA(this.rgb);
    }
    alpha(e) {
      return this._rgb.a = Nu(e), this;
    }
    clearer(e) {
      const t = this._rgb;
      return t.a *= 1 - e, this;
    }
    greyscale() {
      const e = this._rgb, t = Bw(e.r * 0.3 + e.g * 0.59 + e.b * 0.11);
      return e.r = e.g = e.b = t, this;
    }
    opaquer(e) {
      const t = this._rgb;
      return t.a *= 1 + e, this;
    }
    negate() {
      const e = this._rgb;
      return e.r = 255 - e.r, e.g = 255 - e.g, e.b = 255 - e.b, this;
    }
    lighten(e) {
      return By(this._rgb, 2, e), this;
    }
    darken(e) {
      return By(this._rgb, 2, -e), this;
    }
    saturate(e) {
      return By(this._rgb, 1, e), this;
    }
    desaturate(e) {
      return By(this._rgb, 1, -e), this;
    }
    rotate(e) {
      return fre(this._rgb, e), this;
    }
  };
  /*!
   * Chart.js v4.4.6
   * https://www.chartjs.org
   * (c) 2024 Chart.js Contributors
   * Released under the MIT License
   */
  function xl() {
  }
  const Sre = /* @__PURE__ */ (() => {
    let n = 0;
    return () => n++;
  })();
  function kt(n) {
    return n === null || typeof n > "u";
  }
  function Pn(n) {
    if (Array.isArray && Array.isArray(n))
      return !0;
    const e = Object.prototype.toString.call(n);
    return e.slice(0, 7) === "[object" && e.slice(-6) === "Array]";
  }
  function Rt(n) {
    return n !== null && Object.prototype.toString.call(n) === "[object Object]";
  }
  function ei(n) {
    return (typeof n == "number" || n instanceof Number) && isFinite(+n);
  }
  function as(n, e) {
    return ei(n) ? n : e;
  }
  function tt(n, e) {
    return typeof n > "u" ? e : n;
  }
  const _re = (n, e) => typeof n == "string" && n.endsWith("%") ? parseFloat(n) / 100 : +n / e, O8 = (n, e) => typeof n == "string" && n.endsWith("%") ? parseFloat(n) / 100 * e : +n;
  function bn(n, e, t) {
    if (n && typeof n.call == "function")
      return n.apply(t, e);
  }
  function Jt(n, e, t, i) {
    let r, s, o;
    if (Pn(n))
      for (s = n.length, r = 0; r < s; r++)
        e.call(t, n[r], r);
    else if (Rt(n))
      for (o = Object.keys(n), s = o.length, r = 0; r < s; r++)
        e.call(t, n[o[r]], o[r]);
  }
  function l_(n, e) {
    let t, i, r, s;
    if (!n || !e || n.length !== e.length)
      return !1;
    for (t = 0, i = n.length; t < i; ++t)
      if (r = n[t], s = e[t], r.datasetIndex !== s.datasetIndex || r.index !== s.index)
        return !1;
    return !0;
  }
  function c_(n) {
    if (Pn(n))
      return n.map(c_);
    if (Rt(n)) {
      const e = /* @__PURE__ */ Object.create(null), t = Object.keys(n), i = t.length;
      let r = 0;
      for (; r < i; ++r)
        e[t[r]] = c_(n[t[r]]);
      return e;
    }
    return n;
  }
  function k8(n) {
    return ["__proto__", "prototype", "constructor"].indexOf(n) === -1;
  }
  function Rre(n, e, t, i) {
    if (!k8(n))
      return;
    const r = e[n], s = t[n];
    Rt(r) && Rt(s) ? _s(r, s, i) : e[n] = c_(s);
  }
  function _s(n, e, t) {
    const i = Pn(e) ? e : [e], r = i.length;
    if (!Rt(n))
      return n;
    t = t || {};
    const s = t.merger || Rre;
    let o;
    for (let a = 0; a < r; ++a) {
      if (o = i[a], !Rt(o))
        continue;
      const l = Object.keys(o);
      for (let c = 0, u = l.length; c < u; ++c)
        s(l[c], n, o, t);
    }
    return n;
  }
  function uv(n, e) {
    return _s(n, e, {
      merger: Ere
    });
  }
  function Ere(n, e, t) {
    if (!k8(n))
      return;
    const i = e[n], r = t[n];
    Rt(i) && Rt(r) ? uv(i, r) : Object.prototype.hasOwnProperty.call(e, n) || (e[n] = c_(r));
  }
  const g2 = {
    // Chart.helpers.core resolveObjectKey should resolve empty key to root object
    "": (n) => n,
    // default resolvers
    x: (n) => n.x,
    y: (n) => n.y
  };
  function xre(n) {
    const e = n.split("."), t = [];
    let i = "";
    for (const r of e)
      i += r, i.endsWith("\\") ? i = i.slice(0, -1) + "." : (t.push(i), i = "");
    return t;
  }
  function Tre(n) {
    const e = xre(n);
    return (t) => {
      for (const i of e) {
        if (i === "")
          break;
        t = t && t[i];
      }
      return t;
    };
  }
  function zu(n, e) {
    return (g2[e] || (g2[e] = Tre(e)))(n);
  }
  function ik(n) {
    return n.charAt(0).toUpperCase() + n.slice(1);
  }
  const tw = (n) => typeof n < "u", Uu = (n) => typeof n == "function", p2 = (n, e) => {
    if (n.size !== e.size)
      return !1;
    for (const t of n)
      if (!e.has(t))
        return !1;
    return !0;
  };
  function Mre(n) {
    return n.type === "mouseup" || n.type === "click" || n.type === "contextmenu";
  }
  const _n = Math.PI, Sn = 2 * _n, Are = Sn + _n, u_ = Number.POSITIVE_INFINITY, Pre = _n / 180, si = _n / 2, ph = _n / 4, m2 = _n * 2 / 3, Eu = Math.log10, Qa = Math.sign;
  function hv(n, e, t) {
    return Math.abs(n - e) < t;
  }
  function b2(n) {
    const e = Math.round(n);
    n = hv(n, e, n / 1e3) ? e : n;
    const t = Math.pow(10, Math.floor(Eu(n))), i = n / t;
    return (i <= 1 ? 1 : i <= 2 ? 2 : i <= 5 ? 5 : 10) * t;
  }
  function Ire(n) {
    const e = [], t = Math.sqrt(n);
    let i;
    for (i = 1; i < t; i++)
      n % i === 0 && (e.push(i), e.push(n / i));
    return t === (t | 0) && e.push(t), e.sort((r, s) => r - s).pop(), e;
  }
  function vp(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
  }
  function Ore(n, e) {
    const t = Math.round(n);
    return t - e <= n && t + e >= n;
  }
  function D8(n, e, t) {
    let i, r, s;
    for (i = 0, r = n.length; i < r; i++)
      s = n[i][t], isNaN(s) || (e.min = Math.min(e.min, s), e.max = Math.max(e.max, s));
  }
  function Ko(n) {
    return n * (_n / 180);
  }
  function rk(n) {
    return n * (180 / _n);
  }
  function v2(n) {
    if (!ei(n))
      return;
    let e = 1, t = 0;
    for (; Math.round(n * e) / e !== n; )
      e *= 10, t++;
    return t;
  }
  function N8(n, e) {
    const t = e.x - n.x, i = e.y - n.y, r = Math.sqrt(t * t + i * i);
    let s = Math.atan2(i, t);
    return s < -0.5 * _n && (s += Sn), {
      angle: s,
      distance: r
    };
  }
  function JA(n, e) {
    return Math.sqrt(Math.pow(e.x - n.x, 2) + Math.pow(e.y - n.y, 2));
  }
  function kre(n, e) {
    return (n - e + Are) % Sn - _n;
  }
  function gs(n) {
    return (n % Sn + Sn) % Sn;
  }
  function nw(n, e, t, i) {
    const r = gs(n), s = gs(e), o = gs(t), a = gs(s - r), l = gs(o - r), c = gs(r - s), u = gs(r - o);
    return r === s || r === o || i && s === o || a > l && c < u;
  }
  function Hi(n, e, t) {
    return Math.max(e, Math.min(t, n));
  }
  function Dre(n) {
    return Hi(n, -32768, 32767);
  }
  function lc(n, e, t, i = 1e-6) {
    return n >= Math.min(e, t) - i && n <= Math.max(e, t) + i;
  }
  function sk(n, e, t) {
    t = t || ((o) => n[o] < e);
    let i = n.length - 1, r = 0, s;
    for (; i - r > 1; )
      s = r + i >> 1, t(s) ? r = s : i = s;
    return {
      lo: r,
      hi: i
    };
  }
  const cc = (n, e, t, i) => sk(n, t, i ? (r) => {
    const s = n[r][e];
    return s < t || s === t && n[r + 1][e] === t;
  } : (r) => n[r][e] < t), Nre = (n, e, t) => sk(n, t, (i) => n[i][e] >= t);
  function Lre(n, e, t) {
    let i = 0, r = n.length;
    for (; i < r && n[i] < e; )
      i++;
    for (; r > i && n[r - 1] > t; )
      r--;
    return i > 0 || r < n.length ? n.slice(i, r) : n;
  }
  const L8 = ["push", "pop", "shift", "splice", "unshift"];
  function Hre(n, e) {
    if (n._chartjs) {
      n._chartjs.listeners.push(e);
      return;
    }
    Object.defineProperty(n, "_chartjs", {
      configurable: !0,
      enumerable: !1,
      value: {
        listeners: [e]
      }
    }), L8.forEach((t) => {
      const i = "_onData" + ik(t), r = n[t];
      Object.defineProperty(n, t, {
        configurable: !0,
        enumerable: !1,
        value(...s) {
          const o = r.apply(this, s);
          return n._chartjs.listeners.forEach((a) => {
            typeof a[i] == "function" && a[i](...s);
          }), o;
        }
      });
    });
  }
  function w2(n, e) {
    const t = n._chartjs;
    if (!t)
      return;
    const i = t.listeners, r = i.indexOf(e);
    r !== -1 && i.splice(r, 1), !(i.length > 0) && (L8.forEach((s) => {
      delete n[s];
    }), delete n._chartjs);
  }
  function H8(n) {
    const e = new Set(n);
    return e.size === n.length ? n : Array.from(e);
  }
  const $8 = function() {
    return typeof window > "u" ? function(n) {
      return n();
    } : window.requestAnimationFrame;
  }();
  function F8(n, e) {
    let t = [], i = !1;
    return function(...r) {
      t = r, i || (i = !0, $8.call(window, () => {
        i = !1, n.apply(e, t);
      }));
    };
  }
  function $re(n, e) {
    let t;
    return function(...i) {
      return e ? (clearTimeout(t), t = setTimeout(n, e, i)) : n.apply(this, i), e;
    };
  }
  const ok = (n) => n === "start" ? "left" : n === "end" ? "right" : "center", ir = (n, e, t) => n === "start" ? e : n === "end" ? t : (e + t) / 2, Fre = (n, e, t, i) => n === (i ? "left" : "right") ? t : n === "center" ? (e + t) / 2 : e;
  function B8(n, e, t) {
    const i = e.length;
    let r = 0, s = i;
    if (n._sorted) {
      const {
        iScale: o,
        _parsed: a
      } = n, l = o.axis, {
        min: c,
        max: u,
        minDefined: h,
        maxDefined: d
      } = o.getUserBounds();
      h && (r = Hi(Math.min(
        // @ts-expect-error Need to type _parsed
        cc(a, l, c).lo,
        // @ts-expect-error Need to fix types on _lookupByKey
        t ? i : cc(e, l, o.getPixelForValue(c)).lo
      ), 0, i - 1)), d ? s = Hi(Math.max(
        // @ts-expect-error Need to type _parsed
        cc(a, o.axis, u, !0).hi + 1,
        // @ts-expect-error Need to fix types on _lookupByKey
        t ? 0 : cc(e, l, o.getPixelForValue(u), !0).hi + 1
      ), r, i) - r : s = i - r;
    }
    return {
      start: r,
      count: s
    };
  }
  function V8(n) {
    const {
      xScale: e,
      yScale: t,
      _scaleRanges: i
    } = n, r = {
      xmin: e.min,
      xmax: e.max,
      ymin: t.min,
      ymax: t.max
    };
    if (!i)
      return n._scaleRanges = r, !0;
    const s = i.xmin !== e.min || i.xmax !== e.max || i.ymin !== t.min || i.ymax !== t.max;
    return Object.assign(i, r), s;
  }
  const Vy = (n) => n === 0 || n === 1, y2 = (n, e, t) => -(Math.pow(2, 10 * (n -= 1)) * Math.sin((n - e) * Sn / t)), C2 = (n, e, t) => Math.pow(2, -10 * n) * Math.sin((n - e) * Sn / t) + 1, dv = {
    linear: (n) => n,
    easeInQuad: (n) => n * n,
    easeOutQuad: (n) => -n * (n - 2),
    easeInOutQuad: (n) => (n /= 0.5) < 1 ? 0.5 * n * n : -0.5 * (--n * (n - 2) - 1),
    easeInCubic: (n) => n * n * n,
    easeOutCubic: (n) => (n -= 1) * n * n + 1,
    easeInOutCubic: (n) => (n /= 0.5) < 1 ? 0.5 * n * n * n : 0.5 * ((n -= 2) * n * n + 2),
    easeInQuart: (n) => n * n * n * n,
    easeOutQuart: (n) => -((n -= 1) * n * n * n - 1),
    easeInOutQuart: (n) => (n /= 0.5) < 1 ? 0.5 * n * n * n * n : -0.5 * ((n -= 2) * n * n * n - 2),
    easeInQuint: (n) => n * n * n * n * n,
    easeOutQuint: (n) => (n -= 1) * n * n * n * n + 1,
    easeInOutQuint: (n) => (n /= 0.5) < 1 ? 0.5 * n * n * n * n * n : 0.5 * ((n -= 2) * n * n * n * n + 2),
    easeInSine: (n) => -Math.cos(n * si) + 1,
    easeOutSine: (n) => Math.sin(n * si),
    easeInOutSine: (n) => -0.5 * (Math.cos(_n * n) - 1),
    easeInExpo: (n) => n === 0 ? 0 : Math.pow(2, 10 * (n - 1)),
    easeOutExpo: (n) => n === 1 ? 1 : -Math.pow(2, -10 * n) + 1,
    easeInOutExpo: (n) => Vy(n) ? n : n < 0.5 ? 0.5 * Math.pow(2, 10 * (n * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (n * 2 - 1)) + 2),
    easeInCirc: (n) => n >= 1 ? n : -(Math.sqrt(1 - n * n) - 1),
    easeOutCirc: (n) => Math.sqrt(1 - (n -= 1) * n),
    easeInOutCirc: (n) => (n /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - n * n) - 1) : 0.5 * (Math.sqrt(1 - (n -= 2) * n) + 1),
    easeInElastic: (n) => Vy(n) ? n : y2(n, 0.075, 0.3),
    easeOutElastic: (n) => Vy(n) ? n : C2(n, 0.075, 0.3),
    easeInOutElastic(n) {
      return Vy(n) ? n : n < 0.5 ? 0.5 * y2(n * 2, 0.1125, 0.45) : 0.5 + 0.5 * C2(n * 2 - 1, 0.1125, 0.45);
    },
    easeInBack(n) {
      return n * n * ((1.70158 + 1) * n - 1.70158);
    },
    easeOutBack(n) {
      return (n -= 1) * n * ((1.70158 + 1) * n + 1.70158) + 1;
    },
    easeInOutBack(n) {
      let e = 1.70158;
      return (n /= 0.5) < 1 ? 0.5 * (n * n * (((e *= 1.525) + 1) * n - e)) : 0.5 * ((n -= 2) * n * (((e *= 1.525) + 1) * n + e) + 2);
    },
    easeInBounce: (n) => 1 - dv.easeOutBounce(1 - n),
    easeOutBounce(n) {
      return n < 1 / 2.75 ? 7.5625 * n * n : n < 2 / 2.75 ? 7.5625 * (n -= 1.5 / 2.75) * n + 0.75 : n < 2.5 / 2.75 ? 7.5625 * (n -= 2.25 / 2.75) * n + 0.9375 : 7.5625 * (n -= 2.625 / 2.75) * n + 0.984375;
    },
    easeInOutBounce: (n) => n < 0.5 ? dv.easeInBounce(n * 2) * 0.5 : dv.easeOutBounce(n * 2 - 1) * 0.5 + 0.5
  };
  function ak(n) {
    if (n && typeof n == "object") {
      const e = n.toString();
      return e === "[object CanvasPattern]" || e === "[object CanvasGradient]";
    }
    return !1;
  }
  function S2(n) {
    return ak(n) ? n : new I8(n);
  }
  function ax(n) {
    return ak(n) ? n : new I8(n).saturate(0.5).darken(0.1).hexString();
  }
  const Bre = ["x", "y", "borderWidth", "radius", "tension"], Vre = ["color", "borderColor", "backgroundColor"];
  function Wre(n) {
    n.set("animation", {
      delay: void 0,
      duration: 1e3,
      easing: "easeOutQuart",
      fn: void 0,
      from: void 0,
      loop: void 0,
      to: void 0,
      type: void 0
    }), n.describe("animation", {
      _fallback: !1,
      _indexable: !1,
      _scriptable: (e) => e !== "onProgress" && e !== "onComplete" && e !== "fn"
    }), n.set("animations", {
      colors: {
        type: "color",
        properties: Vre
      },
      numbers: {
        type: "number",
        properties: Bre
      }
    }), n.describe("animations", {
      _fallback: "animation"
    }), n.set("transitions", {
      active: {
        animation: {
          duration: 400
        }
      },
      resize: {
        animation: {
          duration: 0
        }
      },
      show: {
        animations: {
          colors: {
            from: "transparent"
          },
          visible: {
            type: "boolean",
            duration: 0
          }
        }
      },
      hide: {
        animations: {
          colors: {
            to: "transparent"
          },
          visible: {
            type: "boolean",
            easing: "linear",
            fn: (e) => e | 0
          }
        }
      }
    });
  }
  function jre(n) {
    n.set("layout", {
      autoPadding: !0,
      padding: {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      }
    });
  }
  const _2 = /* @__PURE__ */ new Map();
  function zre(n, e) {
    e = e || {};
    const t = n + JSON.stringify(e);
    let i = _2.get(t);
    return i || (i = new Intl.NumberFormat(n, e), _2.set(t, i)), i;
  }
  function Vw(n, e, t) {
    return zre(e, t).format(n);
  }
  const W8 = {
    values(n) {
      return Pn(n) ? n : "" + n;
    },
    numeric(n, e, t) {
      if (n === 0)
        return "0";
      const i = this.chart.options.locale;
      let r, s = n;
      if (t.length > 1) {
        const c = Math.max(Math.abs(t[0].value), Math.abs(t[t.length - 1].value));
        (c < 1e-4 || c > 1e15) && (r = "scientific"), s = Ure(n, t);
      }
      const o = Eu(Math.abs(s)), a = isNaN(o) ? 1 : Math.max(Math.min(-1 * Math.floor(o), 20), 0), l = {
        notation: r,
        minimumFractionDigits: a,
        maximumFractionDigits: a
      };
      return Object.assign(l, this.options.ticks.format), Vw(n, i, l);
    },
    logarithmic(n, e, t) {
      if (n === 0)
        return "0";
      const i = t[e].significand || n / Math.pow(10, Math.floor(Eu(n)));
      return [1, 2, 3, 5, 10, 15].includes(i) || e > 0.8 * t.length ? W8.numeric.call(this, n, e, t) : "";
    }
  };
  function Ure(n, e) {
    let t = e.length > 3 ? e[2].value - e[1].value : e[1].value - e[0].value;
    return Math.abs(t) >= 1 && n !== Math.floor(n) && (t = n - Math.floor(n)), t;
  }
  var JR = {
    formatters: W8
  };
  function Gre(n) {
    n.set("scale", {
      display: !0,
      offset: !1,
      reverse: !1,
      beginAtZero: !1,
      bounds: "ticks",
      clip: !0,
      grace: 0,
      grid: {
        display: !0,
        lineWidth: 1,
        drawOnChartArea: !0,
        drawTicks: !0,
        tickLength: 8,
        tickWidth: (e, t) => t.lineWidth,
        tickColor: (e, t) => t.color,
        offset: !1
      },
      border: {
        display: !0,
        dash: [],
        dashOffset: 0,
        width: 1
      },
      title: {
        display: !1,
        text: "",
        padding: {
          top: 4,
          bottom: 4
        }
      },
      ticks: {
        minRotation: 0,
        maxRotation: 50,
        mirror: !1,
        textStrokeWidth: 0,
        textStrokeColor: "",
        padding: 3,
        display: !0,
        autoSkip: !0,
        autoSkipPadding: 3,
        labelOffset: 0,
        callback: JR.formatters.values,
        minor: {},
        major: {},
        align: "center",
        crossAlign: "near",
        showLabelBackdrop: !1,
        backdropColor: "rgba(255, 255, 255, 0.75)",
        backdropPadding: 2
      }
    }), n.route("scale.ticks", "color", "", "color"), n.route("scale.grid", "color", "", "borderColor"), n.route("scale.border", "color", "", "borderColor"), n.route("scale.title", "color", "", "color"), n.describe("scale", {
      _fallback: !1,
      _scriptable: (e) => !e.startsWith("before") && !e.startsWith("after") && e !== "callback" && e !== "parser",
      _indexable: (e) => e !== "borderDash" && e !== "tickBorderDash" && e !== "dash"
    }), n.describe("scales", {
      _fallback: "scale"
    }), n.describe("scale.ticks", {
      _scriptable: (e) => e !== "backdropPadding" && e !== "callback",
      _indexable: (e) => e !== "backdropPadding"
    });
  }
  const Qd = /* @__PURE__ */ Object.create(null), eP = /* @__PURE__ */ Object.create(null);
  function fv(n, e) {
    if (!e)
      return n;
    const t = e.split(".");
    for (let i = 0, r = t.length; i < r; ++i) {
      const s = t[i];
      n = n[s] || (n[s] = /* @__PURE__ */ Object.create(null));
    }
    return n;
  }
  function lx(n, e, t) {
    return typeof e == "string" ? _s(fv(n, e), t) : _s(fv(n, ""), e);
  }
  class Yre {
    constructor(e, t) {
      this.animation = void 0, this.backgroundColor = "rgba(0,0,0,0.1)", this.borderColor = "rgba(0,0,0,0.1)", this.color = "#666", this.datasets = {}, this.devicePixelRatio = (i) => i.chart.platform.getDevicePixelRatio(), this.elements = {}, this.events = ["mousemove", "mouseout", "click", "touchstart", "touchmove"], this.font = {
        family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        size: 12,
        style: "normal",
        lineHeight: 1.2,
        weight: null
      }, this.hover = {}, this.hoverBackgroundColor = (i, r) => ax(r.backgroundColor), this.hoverBorderColor = (i, r) => ax(r.borderColor), this.hoverColor = (i, r) => ax(r.color), this.indexAxis = "x", this.interaction = {
        mode: "nearest",
        intersect: !0,
        includeInvisible: !1
      }, this.maintainAspectRatio = !0, this.onHover = null, this.onClick = null, this.parsing = !0, this.plugins = {}, this.responsive = !0, this.scale = void 0, this.scales = {}, this.showLine = !0, this.drawActiveElementsOnTop = !0, this.describe(e), this.apply(t);
    }
    set(e, t) {
      return lx(this, e, t);
    }
    get(e) {
      return fv(this, e);
    }
    describe(e, t) {
      return lx(eP, e, t);
    }
    override(e, t) {
      return lx(Qd, e, t);
    }
    route(e, t, i, r) {
      const s = fv(this, e), o = fv(this, i), a = "_" + t;
      Object.defineProperties(s, {
        [a]: {
          value: s[t],
          writable: !0
        },
        [t]: {
          enumerable: !0,
          get() {
            const l = this[a], c = o[r];
            return Rt(l) ? Object.assign({}, c, l) : tt(l, c);
          },
          set(l) {
            this[a] = l;
          }
        }
      });
    }
    apply(e) {
      e.forEach((t) => t(this));
    }
  }
  var On = /* @__PURE__ */ new Yre({
    _scriptable: (n) => !n.startsWith("on"),
    _indexable: (n) => n !== "events",
    hover: {
      _fallback: "interaction"
    },
    interaction: {
      _scriptable: !1,
      _indexable: !1
    }
  }, [Wre, jre, Gre]);
  function Kre(n) {
    return !n || kt(n.size) || kt(n.family) ? null : (n.style ? n.style + " " : "") + (n.weight ? n.weight + " " : "") + n.size + "px " + n.family;
  }
  function h_(n, e, t, i, r) {
    let s = e[r];
    return s || (s = e[r] = n.measureText(r).width, t.push(r)), s > i && (i = s), i;
  }
  function qre(n, e, t, i) {
    i = i || {};
    let r = i.data = i.data || {}, s = i.garbageCollect = i.garbageCollect || [];
    i.font !== e && (r = i.data = {}, s = i.garbageCollect = [], i.font = e), n.save(), n.font = e;
    let o = 0;
    const a = t.length;
    let l, c, u, h, d;
    for (l = 0; l < a; l++)
      if (h = t[l], h != null && !Pn(h))
        o = h_(n, r, s, o, h);
      else if (Pn(h))
        for (c = 0, u = h.length; c < u; c++)
          d = h[c], d != null && !Pn(d) && (o = h_(n, r, s, o, d));
    n.restore();
    const f = s.length / 2;
    if (f > t.length) {
      for (l = 0; l < f; l++)
        delete r[s[l]];
      s.splice(0, f);
    }
    return o;
  }
  function mh(n, e, t) {
    const i = n.currentDevicePixelRatio, r = t !== 0 ? Math.max(t / 2, 0.5) : 0;
    return Math.round((e - r) * i) / i + r;
  }
  function R2(n, e) {
    !e && !n || (e = e || n.getContext("2d"), e.save(), e.resetTransform(), e.clearRect(0, 0, n.width, n.height), e.restore());
  }
  function d_(n, e, t, i) {
    j8(n, e, t, i, null);
  }
  function j8(n, e, t, i, r) {
    let s, o, a, l, c, u, h, d;
    const f = e.pointStyle, g = e.rotation, p = e.radius;
    let m = (g || 0) * Pre;
    if (f && typeof f == "object" && (s = f.toString(), s === "[object HTMLImageElement]" || s === "[object HTMLCanvasElement]")) {
      n.save(), n.translate(t, i), n.rotate(m), n.drawImage(f, -f.width / 2, -f.height / 2, f.width, f.height), n.restore();
      return;
    }
    if (!(isNaN(p) || p <= 0)) {
      switch (n.beginPath(), f) {
        default:
          r ? n.ellipse(t, i, r / 2, p, 0, 0, Sn) : n.arc(t, i, p, 0, Sn), n.closePath();
          break;
        case "triangle":
          u = r ? r / 2 : p, n.moveTo(t + Math.sin(m) * u, i - Math.cos(m) * p), m += m2, n.lineTo(t + Math.sin(m) * u, i - Math.cos(m) * p), m += m2, n.lineTo(t + Math.sin(m) * u, i - Math.cos(m) * p), n.closePath();
          break;
        case "rectRounded":
          c = p * 0.516, l = p - c, o = Math.cos(m + ph) * l, h = Math.cos(m + ph) * (r ? r / 2 - c : l), a = Math.sin(m + ph) * l, d = Math.sin(m + ph) * (r ? r / 2 - c : l), n.arc(t - h, i - a, c, m - _n, m - si), n.arc(t + d, i - o, c, m - si, m), n.arc(t + h, i + a, c, m, m + si), n.arc(t - d, i + o, c, m + si, m + _n), n.closePath();
          break;
        case "rect":
          if (!g) {
            l = Math.SQRT1_2 * p, u = r ? r / 2 : l, n.rect(t - u, i - l, 2 * u, 2 * l);
            break;
          }
          m += ph;
        case "rectRot":
          h = Math.cos(m) * (r ? r / 2 : p), o = Math.cos(m) * p, a = Math.sin(m) * p, d = Math.sin(m) * (r ? r / 2 : p), n.moveTo(t - h, i - a), n.lineTo(t + d, i - o), n.lineTo(t + h, i + a), n.lineTo(t - d, i + o), n.closePath();
          break;
        case "crossRot":
          m += ph;
        case "cross":
          h = Math.cos(m) * (r ? r / 2 : p), o = Math.cos(m) * p, a = Math.sin(m) * p, d = Math.sin(m) * (r ? r / 2 : p), n.moveTo(t - h, i - a), n.lineTo(t + h, i + a), n.moveTo(t + d, i - o), n.lineTo(t - d, i + o);
          break;
        case "star":
          h = Math.cos(m) * (r ? r / 2 : p), o = Math.cos(m) * p, a = Math.sin(m) * p, d = Math.sin(m) * (r ? r / 2 : p), n.moveTo(t - h, i - a), n.lineTo(t + h, i + a), n.moveTo(t + d, i - o), n.lineTo(t - d, i + o), m += ph, h = Math.cos(m) * (r ? r / 2 : p), o = Math.cos(m) * p, a = Math.sin(m) * p, d = Math.sin(m) * (r ? r / 2 : p), n.moveTo(t - h, i - a), n.lineTo(t + h, i + a), n.moveTo(t + d, i - o), n.lineTo(t - d, i + o);
          break;
        case "line":
          o = r ? r / 2 : Math.cos(m) * p, a = Math.sin(m) * p, n.moveTo(t - o, i - a), n.lineTo(t + o, i + a);
          break;
        case "dash":
          n.moveTo(t, i), n.lineTo(t + Math.cos(m) * (r ? r / 2 : p), i + Math.sin(m) * p);
          break;
        case !1:
          n.closePath();
          break;
      }
      n.fill(), e.borderWidth > 0 && n.stroke();
    }
  }
  function uc(n, e, t) {
    return t = t || 0.5, !e || n && n.x > e.left - t && n.x < e.right + t && n.y > e.top - t && n.y < e.bottom + t;
  }
  function Dd(n, e) {
    n.save(), n.beginPath(), n.rect(e.left, e.top, e.right - e.left, e.bottom - e.top), n.clip();
  }
  function Nd(n) {
    n.restore();
  }
  function Xre(n, e, t, i, r) {
    if (!e)
      return n.lineTo(t.x, t.y);
    if (r === "middle") {
      const s = (e.x + t.x) / 2;
      n.lineTo(s, e.y), n.lineTo(s, t.y);
    } else r === "after" != !!i ? n.lineTo(e.x, t.y) : n.lineTo(t.x, e.y);
    n.lineTo(t.x, t.y);
  }
  function Zre(n, e, t, i) {
    if (!e)
      return n.lineTo(t.x, t.y);
    n.bezierCurveTo(i ? e.cp1x : e.cp2x, i ? e.cp1y : e.cp2y, i ? t.cp2x : t.cp1x, i ? t.cp2y : t.cp1y, t.x, t.y);
  }
  function Qre(n, e) {
    e.translation && n.translate(e.translation[0], e.translation[1]), kt(e.rotation) || n.rotate(e.rotation), e.color && (n.fillStyle = e.color), e.textAlign && (n.textAlign = e.textAlign), e.textBaseline && (n.textBaseline = e.textBaseline);
  }
  function Jre(n, e, t, i, r) {
    if (r.strikethrough || r.underline) {
      const s = n.measureText(i), o = e - s.actualBoundingBoxLeft, a = e + s.actualBoundingBoxRight, l = t - s.actualBoundingBoxAscent, c = t + s.actualBoundingBoxDescent, u = r.strikethrough ? (l + c) / 2 : c;
      n.strokeStyle = n.fillStyle, n.beginPath(), n.lineWidth = r.decorationWidth || 2, n.moveTo(o, u), n.lineTo(a, u), n.stroke();
    }
  }
  function ese(n, e) {
    const t = n.fillStyle;
    n.fillStyle = e.color, n.fillRect(e.left, e.top, e.width, e.height), n.fillStyle = t;
  }
  function Jd(n, e, t, i, r, s = {}) {
    const o = Pn(e) ? e : [e], a = s.strokeWidth > 0 && s.strokeColor !== "";
    let l, c;
    for (n.save(), n.font = r.string, Qre(n, s), l = 0; l < o.length; ++l)
      c = o[l], s.backdrop && ese(n, s.backdrop), a && (s.strokeColor && (n.strokeStyle = s.strokeColor), kt(s.strokeWidth) || (n.lineWidth = s.strokeWidth), n.strokeText(c, t, i, s.maxWidth)), n.fillText(c, t, i, s.maxWidth), Jre(n, t, i, c, s), i += Number(r.lineHeight);
    n.restore();
  }
  function iw(n, e) {
    const {
      x: t,
      y: i,
      w: r,
      h: s,
      radius: o
    } = e;
    n.arc(t + o.topLeft, i + o.topLeft, o.topLeft, 1.5 * _n, _n, !0), n.lineTo(t, i + s - o.bottomLeft), n.arc(t + o.bottomLeft, i + s - o.bottomLeft, o.bottomLeft, _n, si, !0), n.lineTo(t + r - o.bottomRight, i + s), n.arc(t + r - o.bottomRight, i + s - o.bottomRight, o.bottomRight, si, 0, !0), n.lineTo(t + r, i + o.topRight), n.arc(t + r - o.topRight, i + o.topRight, o.topRight, 0, -si, !0), n.lineTo(t + o.topLeft, i);
  }
  const tse = /^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/, nse = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;
  function ise(n, e) {
    const t = ("" + n).match(tse);
    if (!t || t[1] === "normal")
      return e * 1.2;
    switch (n = +t[2], t[3]) {
      case "px":
        return n;
      case "%":
        n /= 100;
        break;
    }
    return e * n;
  }
  const rse = (n) => +n || 0;
  function lk(n, e) {
    const t = {}, i = Rt(e), r = i ? Object.keys(e) : e, s = Rt(n) ? i ? (o) => tt(n[o], n[e[o]]) : (o) => n[o] : () => n;
    for (const o of r)
      t[o] = rse(s(o));
    return t;
  }
  function z8(n) {
    return lk(n, {
      top: "y",
      right: "x",
      bottom: "y",
      left: "x"
    });
  }
  function Ld(n) {
    return lk(n, ["topLeft", "topRight", "bottomLeft", "bottomRight"]);
  }
  function gr(n) {
    const e = z8(n);
    return e.width = e.left + e.right, e.height = e.top + e.bottom, e;
  }
  function Ri(n, e) {
    n = n || {}, e = e || On.font;
    let t = tt(n.size, e.size);
    typeof t == "string" && (t = parseInt(t, 10));
    let i = tt(n.style, e.style);
    i && !("" + i).match(nse) && (console.warn('Invalid font style specified: "' + i + '"'), i = void 0);
    const r = {
      family: tt(n.family, e.family),
      lineHeight: ise(tt(n.lineHeight, e.lineHeight), t),
      size: t,
      style: i,
      weight: tt(n.weight, e.weight),
      string: ""
    };
    return r.string = Kre(r), r;
  }
  function Lb(n, e, t, i) {
    let r, s, o;
    for (r = 0, s = n.length; r < s; ++r)
      if (o = n[r], o !== void 0 && o !== void 0)
        return o;
  }
  function sse(n, e, t) {
    const {
      min: i,
      max: r
    } = n, s = O8(e, (r - i) / 2), o = (a, l) => t && a === 0 ? 0 : a + l;
    return {
      min: o(i, -Math.abs(s)),
      max: o(r, s)
    };
  }
  function sh(n, e) {
    return Object.assign(Object.create(n), e);
  }
  function ck(n, e = [""], t, i, r = () => n[0]) {
    const s = t || n;
    typeof i > "u" && (i = K8("_fallback", n));
    const o = {
      [Symbol.toStringTag]: "Object",
      _cacheable: !0,
      _scopes: n,
      _rootScopes: s,
      _fallback: i,
      _getTarget: r,
      override: (a) => ck([a, ...n], e, s, i)
    };
    return new Proxy(o, {
      /**
      * A trap for the delete operator.
      */
      deleteProperty(a, l) {
        return delete a[l], delete a._keys, delete n[0][l], !0;
      },
      /**
      * A trap for getting property values.
      */
      get(a, l) {
        return G8(a, l, () => fse(l, e, n, a));
      },
      /**
      * A trap for Object.getOwnPropertyDescriptor.
      * Also used by Object.hasOwnProperty.
      */
      getOwnPropertyDescriptor(a, l) {
        return Reflect.getOwnPropertyDescriptor(a._scopes[0], l);
      },
      /**
      * A trap for Object.getPrototypeOf.
      */
      getPrototypeOf() {
        return Reflect.getPrototypeOf(n[0]);
      },
      /**
      * A trap for the in operator.
      */
      has(a, l) {
        return x2(a).includes(l);
      },
      /**
      * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
      */
      ownKeys(a) {
        return x2(a);
      },
      /**
      * A trap for setting property values.
      */
      set(a, l, c) {
        const u = a._storage || (a._storage = r());
        return a[l] = u[l] = c, delete a._keys, !0;
      }
    });
  }
  function wp(n, e, t, i) {
    const r = {
      _cacheable: !1,
      _proxy: n,
      _context: e,
      _subProxy: t,
      _stack: /* @__PURE__ */ new Set(),
      _descriptors: U8(n, i),
      setContext: (s) => wp(n, s, t, i),
      override: (s) => wp(n.override(s), e, t, i)
    };
    return new Proxy(r, {
      /**
      * A trap for the delete operator.
      */
      deleteProperty(s, o) {
        return delete s[o], delete n[o], !0;
      },
      /**
      * A trap for getting property values.
      */
      get(s, o, a) {
        return G8(s, o, () => ase(s, o, a));
      },
      /**
      * A trap for Object.getOwnPropertyDescriptor.
      * Also used by Object.hasOwnProperty.
      */
      getOwnPropertyDescriptor(s, o) {
        return s._descriptors.allKeys ? Reflect.has(n, o) ? {
          enumerable: !0,
          configurable: !0
        } : void 0 : Reflect.getOwnPropertyDescriptor(n, o);
      },
      /**
      * A trap for Object.getPrototypeOf.
      */
      getPrototypeOf() {
        return Reflect.getPrototypeOf(n);
      },
      /**
      * A trap for the in operator.
      */
      has(s, o) {
        return Reflect.has(n, o);
      },
      /**
      * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
      */
      ownKeys() {
        return Reflect.ownKeys(n);
      },
      /**
      * A trap for setting property values.
      */
      set(s, o, a) {
        return n[o] = a, delete s[o], !0;
      }
    });
  }
  function U8(n, e = {
    scriptable: !0,
    indexable: !0
  }) {
    const {
      _scriptable: t = e.scriptable,
      _indexable: i = e.indexable,
      _allKeys: r = e.allKeys
    } = n;
    return {
      allKeys: r,
      scriptable: t,
      indexable: i,
      isScriptable: Uu(t) ? t : () => t,
      isIndexable: Uu(i) ? i : () => i
    };
  }
  const ose = (n, e) => n ? n + ik(e) : e, uk = (n, e) => Rt(e) && n !== "adapters" && (Object.getPrototypeOf(e) === null || e.constructor === Object);
  function G8(n, e, t) {
    if (Object.prototype.hasOwnProperty.call(n, e) || e === "constructor")
      return n[e];
    const i = t();
    return n[e] = i, i;
  }
  function ase(n, e, t) {
    const {
      _proxy: i,
      _context: r,
      _subProxy: s,
      _descriptors: o
    } = n;
    let a = i[e];
    return Uu(a) && o.isScriptable(e) && (a = lse(e, a, n, t)), Pn(a) && a.length && (a = cse(e, a, n, o.isIndexable)), uk(e, a) && (a = wp(a, r, s && s[e], o)), a;
  }
  function lse(n, e, t, i) {
    const {
      _proxy: r,
      _context: s,
      _subProxy: o,
      _stack: a
    } = t;
    if (a.has(n))
      throw new Error("Recursion detected: " + Array.from(a).join("->") + "->" + n);
    a.add(n);
    let l = e(s, o || i);
    return a.delete(n), uk(n, l) && (l = hk(r._scopes, r, n, l)), l;
  }
  function cse(n, e, t, i) {
    const {
      _proxy: r,
      _context: s,
      _subProxy: o,
      _descriptors: a
    } = t;
    if (typeof s.index < "u" && i(n))
      return e[s.index % e.length];
    if (Rt(e[0])) {
      const l = e, c = r._scopes.filter((u) => u !== l);
      e = [];
      for (const u of l) {
        const h = hk(c, r, n, u);
        e.push(wp(h, s, o && o[n], a));
      }
    }
    return e;
  }
  function Y8(n, e, t) {
    return Uu(n) ? n(e, t) : n;
  }
  const use = (n, e) => n === !0 ? e : typeof n == "string" ? zu(e, n) : void 0;
  function hse(n, e, t, i, r) {
    for (const s of e) {
      const o = use(t, s);
      if (o) {
        n.add(o);
        const a = Y8(o._fallback, t, r);
        if (typeof a < "u" && a !== t && a !== i)
          return a;
      } else if (o === !1 && typeof i < "u" && t !== i)
        return null;
    }
    return !1;
  }
  function hk(n, e, t, i) {
    const r = e._rootScopes, s = Y8(e._fallback, t, i), o = [...n, ...r], a = /* @__PURE__ */ new Set();
    a.add(i);
    let l = E2(a, o, t, s || t, i);
    return l === null || typeof s < "u" && s !== t && (l = E2(a, o, s, l, i), l === null) ? !1 : ck(Array.from(a), [""], r, s, () => dse(e, t, i));
  }
  function E2(n, e, t, i, r) {
    for (; t; )
      t = hse(n, e, t, i, r);
    return t;
  }
  function dse(n, e, t) {
    const i = n._getTarget();
    e in i || (i[e] = {});
    const r = i[e];
    return Pn(r) && Rt(t) ? t : r || {};
  }
  function fse(n, e, t, i) {
    let r;
    for (const s of e)
      if (r = K8(ose(s, n), t), typeof r < "u")
        return uk(n, r) ? hk(t, i, n, r) : r;
  }
  function K8(n, e) {
    for (const t of e) {
      if (!t)
        continue;
      const i = t[n];
      if (typeof i < "u")
        return i;
    }
  }
  function x2(n) {
    let e = n._keys;
    return e || (e = n._keys = gse(n._scopes)), e;
  }
  function gse(n) {
    const e = /* @__PURE__ */ new Set();
    for (const t of n)
      for (const i of Object.keys(t).filter((r) => !r.startsWith("_")))
        e.add(i);
    return Array.from(e);
  }
  function q8(n, e, t, i) {
    const {
      iScale: r
    } = n, {
      key: s = "r"
    } = this._parsing, o = new Array(i);
    let a, l, c, u;
    for (a = 0, l = i; a < l; ++a)
      c = a + t, u = e[c], o[a] = {
        r: r.parse(zu(u, s), c)
      };
    return o;
  }
  const pse = Number.EPSILON || 1e-14, yp = (n, e) => e < n.length && !n[e].skip && n[e], X8 = (n) => n === "x" ? "y" : "x";
  function mse(n, e, t, i) {
    const r = n.skip ? e : n, s = e, o = t.skip ? e : t, a = JA(s, r), l = JA(o, s);
    let c = a / (a + l), u = l / (a + l);
    c = isNaN(c) ? 0 : c, u = isNaN(u) ? 0 : u;
    const h = i * c, d = i * u;
    return {
      previous: {
        x: s.x - h * (o.x - r.x),
        y: s.y - h * (o.y - r.y)
      },
      next: {
        x: s.x + d * (o.x - r.x),
        y: s.y + d * (o.y - r.y)
      }
    };
  }
  function bse(n, e, t) {
    const i = n.length;
    let r, s, o, a, l, c = yp(n, 0);
    for (let u = 0; u < i - 1; ++u)
      if (l = c, c = yp(n, u + 1), !(!l || !c)) {
        if (hv(e[u], 0, pse)) {
          t[u] = t[u + 1] = 0;
          continue;
        }
        r = t[u] / e[u], s = t[u + 1] / e[u], a = Math.pow(r, 2) + Math.pow(s, 2), !(a <= 9) && (o = 3 / Math.sqrt(a), t[u] = r * o * e[u], t[u + 1] = s * o * e[u]);
      }
  }
  function vse(n, e, t = "x") {
    const i = X8(t), r = n.length;
    let s, o, a, l = yp(n, 0);
    for (let c = 0; c < r; ++c) {
      if (o = a, a = l, l = yp(n, c + 1), !a)
        continue;
      const u = a[t], h = a[i];
      o && (s = (u - o[t]) / 3, a[`cp1${t}`] = u - s, a[`cp1${i}`] = h - s * e[c]), l && (s = (l[t] - u) / 3, a[`cp2${t}`] = u + s, a[`cp2${i}`] = h + s * e[c]);
    }
  }
  function wse(n, e = "x") {
    const t = X8(e), i = n.length, r = Array(i).fill(0), s = Array(i);
    let o, a, l, c = yp(n, 0);
    for (o = 0; o < i; ++o)
      if (a = l, l = c, c = yp(n, o + 1), !!l) {
        if (c) {
          const u = c[e] - l[e];
          r[o] = u !== 0 ? (c[t] - l[t]) / u : 0;
        }
        s[o] = a ? c ? Qa(r[o - 1]) !== Qa(r[o]) ? 0 : (r[o - 1] + r[o]) / 2 : r[o - 1] : r[o];
      }
    bse(n, r, s), vse(n, s, e);
  }
  function Wy(n, e, t) {
    return Math.max(Math.min(n, t), e);
  }
  function yse(n, e) {
    let t, i, r, s, o, a = uc(n[0], e);
    for (t = 0, i = n.length; t < i; ++t)
      o = s, s = a, a = t < i - 1 && uc(n[t + 1], e), s && (r = n[t], o && (r.cp1x = Wy(r.cp1x, e.left, e.right), r.cp1y = Wy(r.cp1y, e.top, e.bottom)), a && (r.cp2x = Wy(r.cp2x, e.left, e.right), r.cp2y = Wy(r.cp2y, e.top, e.bottom)));
  }
  function Cse(n, e, t, i, r) {
    let s, o, a, l;
    if (e.spanGaps && (n = n.filter((c) => !c.skip)), e.cubicInterpolationMode === "monotone")
      wse(n, r);
    else {
      let c = i ? n[n.length - 1] : n[0];
      for (s = 0, o = n.length; s < o; ++s)
        a = n[s], l = mse(c, a, n[Math.min(s + 1, o - (i ? 0 : 1)) % o], e.tension), a.cp1x = l.previous.x, a.cp1y = l.previous.y, a.cp2x = l.next.x, a.cp2y = l.next.y, c = a;
    }
    e.capBezierPoints && yse(n, t);
  }
  function dk() {
    return typeof window < "u" && typeof document < "u";
  }
  function fk(n) {
    let e = n.parentNode;
    return e && e.toString() === "[object ShadowRoot]" && (e = e.host), e;
  }
  function f_(n, e, t) {
    let i;
    return typeof n == "string" ? (i = parseInt(n, 10), n.indexOf("%") !== -1 && (i = i / 100 * e.parentNode[t])) : i = n, i;
  }
  const e1 = (n) => n.ownerDocument.defaultView.getComputedStyle(n, null);
  function Sse(n, e) {
    return e1(n).getPropertyValue(e);
  }
  const _se = ["top", "right", "bottom", "left"];
  function Hd(n, e, t) {
    const i = {};
    t = t ? "-" + t : "";
    for (let r = 0; r < 4; r++) {
      const s = _se[r];
      i[s] = parseFloat(n[e + "-" + s + t]) || 0;
    }
    return i.width = i.left + i.right, i.height = i.top + i.bottom, i;
  }
  const Rse = (n, e, t) => (n > 0 || e > 0) && (!t || !t.shadowRoot);
  function Ese(n, e) {
    const t = n.touches, i = t && t.length ? t[0] : n, {
      offsetX: r,
      offsetY: s
    } = i;
    let o = !1, a, l;
    if (Rse(r, s, n.target))
      a = r, l = s;
    else {
      const c = e.getBoundingClientRect();
      a = i.clientX - c.left, l = i.clientY - c.top, o = !0;
    }
    return {
      x: a,
      y: l,
      box: o
    };
  }
  function cd(n, e) {
    if ("native" in n)
      return n;
    const {
      canvas: t,
      currentDevicePixelRatio: i
    } = e, r = e1(t), s = r.boxSizing === "border-box", o = Hd(r, "padding"), a = Hd(r, "border", "width"), {
      x: l,
      y: c,
      box: u
    } = Ese(n, t), h = o.left + (u && a.left), d = o.top + (u && a.top);
    let {
      width: f,
      height: g
    } = e;
    return s && (f -= o.width + a.width, g -= o.height + a.height), {
      x: Math.round((l - h) / f * t.width / i),
      y: Math.round((c - d) / g * t.height / i)
    };
  }
  function xse(n, e, t) {
    let i, r;
    if (e === void 0 || t === void 0) {
      const s = n && fk(n);
      if (!s)
        e = n.clientWidth, t = n.clientHeight;
      else {
        const o = s.getBoundingClientRect(), a = e1(s), l = Hd(a, "border", "width"), c = Hd(a, "padding");
        e = o.width - c.width - l.width, t = o.height - c.height - l.height, i = f_(a.maxWidth, s, "clientWidth"), r = f_(a.maxHeight, s, "clientHeight");
      }
    }
    return {
      width: e,
      height: t,
      maxWidth: i || u_,
      maxHeight: r || u_
    };
  }
  const jy = (n) => Math.round(n * 10) / 10;
  function Tse(n, e, t, i) {
    const r = e1(n), s = Hd(r, "margin"), o = f_(r.maxWidth, n, "clientWidth") || u_, a = f_(r.maxHeight, n, "clientHeight") || u_, l = xse(n, e, t);
    let {
      width: c,
      height: u
    } = l;
    if (r.boxSizing === "content-box") {
      const d = Hd(r, "border", "width"), f = Hd(r, "padding");
      c -= f.width + d.width, u -= f.height + d.height;
    }
    return c = Math.max(0, c - s.width), u = Math.max(0, i ? c / i : u - s.height), c = jy(Math.min(c, o, l.maxWidth)), u = jy(Math.min(u, a, l.maxHeight)), c && !u && (u = jy(c / 2)), (e !== void 0 || t !== void 0) && i && l.height && u > l.height && (u = l.height, c = jy(Math.floor(u * i))), {
      width: c,
      height: u
    };
  }
  function T2(n, e, t) {
    const i = e || 1, r = Math.floor(n.height * i), s = Math.floor(n.width * i);
    n.height = Math.floor(n.height), n.width = Math.floor(n.width);
    const o = n.canvas;
    return o.style && (t || !o.style.height && !o.style.width) && (o.style.height = `${n.height}px`, o.style.width = `${n.width}px`), n.currentDevicePixelRatio !== i || o.height !== r || o.width !== s ? (n.currentDevicePixelRatio = i, o.height = r, o.width = s, n.ctx.setTransform(i, 0, 0, i, 0, 0), !0) : !1;
  }
  const Mse = function() {
    let n = !1;
    try {
      const e = {
        get passive() {
          return n = !0, !1;
        }
      };
      dk() && (window.addEventListener("test", null, e), window.removeEventListener("test", null, e));
    } catch {
    }
    return n;
  }();
  function M2(n, e) {
    const t = Sse(n, e), i = t && t.match(/^(\d+)(\.\d+)?px$/);
    return i ? +i[1] : void 0;
  }
  function ud(n, e, t, i) {
    return {
      x: n.x + t * (e.x - n.x),
      y: n.y + t * (e.y - n.y)
    };
  }
  function Ase(n, e, t, i) {
    return {
      x: n.x + t * (e.x - n.x),
      y: i === "middle" ? t < 0.5 ? n.y : e.y : i === "after" ? t < 1 ? n.y : e.y : t > 0 ? e.y : n.y
    };
  }
  function Pse(n, e, t, i) {
    const r = {
      x: n.cp2x,
      y: n.cp2y
    }, s = {
      x: e.cp1x,
      y: e.cp1y
    }, o = ud(n, r, t), a = ud(r, s, t), l = ud(s, e, t), c = ud(o, a, t), u = ud(a, l, t);
    return ud(c, u, t);
  }
  const Ise = function(n, e) {
    return {
      x(t) {
        return n + n + e - t;
      },
      setWidth(t) {
        e = t;
      },
      textAlign(t) {
        return t === "center" ? t : t === "right" ? "left" : "right";
      },
      xPlus(t, i) {
        return t - i;
      },
      leftForLtr(t, i) {
        return t - i;
      }
    };
  }, Ose = function() {
    return {
      x(n) {
        return n;
      },
      setWidth(n) {
      },
      textAlign(n) {
        return n;
      },
      xPlus(n, e) {
        return n + e;
      },
      leftForLtr(n, e) {
        return n;
      }
    };
  };
  function tp(n, e, t) {
    return n ? Ise(e, t) : Ose();
  }
  function Z8(n, e) {
    let t, i;
    (e === "ltr" || e === "rtl") && (t = n.canvas.style, i = [t.getPropertyValue("direction"), t.getPropertyPriority("direction")], t.setProperty("direction", e, "important"), n.prevTextDirection = i);
  }
  function Q8(n, e) {
    e !== void 0 && (delete n.prevTextDirection, n.canvas.style.setProperty("direction", e[0], e[1]));
  }
  function J8(n) {
    return n === "angle" ? {
      between: nw,
      compare: kre,
      normalize: gs
    } : {
      between: lc,
      compare: (e, t) => e - t,
      normalize: (e) => e
    };
  }
  function A2({
    start: n,
    end: e,
    count: t,
    loop: i,
    style: r
  }) {
    return {
      start: n % t,
      end: e % t,
      loop: i && (e - n + 1) % t === 0,
      style: r
    };
  }
  function kse(n, e, t) {
    const {
      property: i,
      start: r,
      end: s
    } = t, {
      between: o,
      normalize: a
    } = J8(i), l = e.length;
    let {
      start: c,
      end: u,
      loop: h
    } = n, d, f;
    if (h) {
      for (c += l, u += l, d = 0, f = l; d < f && o(a(e[c % l][i]), r, s); ++d)
        c--, u--;
      c %= l, u %= l;
    }
    return u < c && (u += l), {
      start: c,
      end: u,
      loop: h,
      style: n.style
    };
  }
  function e4(n, e, t) {
    if (!t)
      return [n];
    const {
      property: i,
      start: r,
      end: s
    } = t, o = e.length, {
      compare: a,
      between: l,
      normalize: c
    } = J8(i), {
      start: u,
      end: h,
      loop: d,
      style: f
    } = kse(n, e, t), g = [];
    let p = !1, m = null, v, y, w;
    const R = () => l(r, w, v) && a(r, w) !== 0, E = () => a(s, v) === 0 || l(s, w, v), C = () => p || R(), T = () => !p || E();
    for (let P = u, x = u; P <= h; ++P)
      y = e[P % o], !y.skip && (v = c(y[i]), v !== w && (p = l(v, r, s), m === null && C() && (m = a(v, r) === 0 ? P : x), m !== null && T() && (g.push(A2({
        start: m,
        end: P,
        loop: d,
        count: o,
        style: f
      })), m = null), x = P, w = v));
    return m !== null && g.push(A2({
      start: m,
      end: h,
      loop: d,
      count: o,
      style: f
    })), g;
  }
  function t4(n, e) {
    const t = [], i = n.segments;
    for (let r = 0; r < i.length; r++) {
      const s = e4(i[r], n.points, e);
      s.length && t.push(...s);
    }
    return t;
  }
  function Dse(n, e, t, i) {
    let r = 0, s = e - 1;
    if (t && !i)
      for (; r < e && !n[r].skip; )
        r++;
    for (; r < e && n[r].skip; )
      r++;
    for (r %= e, t && (s += r); s > r && n[s % e].skip; )
      s--;
    return s %= e, {
      start: r,
      end: s
    };
  }
  function Nse(n, e, t, i) {
    const r = n.length, s = [];
    let o = e, a = n[e], l;
    for (l = e + 1; l <= t; ++l) {
      const c = n[l % r];
      c.skip || c.stop ? a.skip || (i = !1, s.push({
        start: e % r,
        end: (l - 1) % r,
        loop: i
      }), e = o = c.stop ? l : null) : (o = l, a.skip && (e = l)), a = c;
    }
    return o !== null && s.push({
      start: e % r,
      end: o % r,
      loop: i
    }), s;
  }
  function Lse(n, e) {
    const t = n.points, i = n.options.spanGaps, r = t.length;
    if (!r)
      return [];
    const s = !!n._loop, {
      start: o,
      end: a
    } = Dse(t, r, s, i);
    if (i === !0)
      return P2(n, [{
        start: o,
        end: a,
        loop: s
      }], t, e);
    const l = a < o ? a + r : a, c = !!n._fullLoop && o === 0 && a === r - 1;
    return P2(n, Nse(t, o, l, c), t, e);
  }
  function P2(n, e, t, i) {
    return !i || !i.setContext || !t ? e : Hse(n, e, t, i);
  }
  function Hse(n, e, t, i) {
    const r = n._chart.getContext(), s = I2(n.options), {
      _datasetIndex: o,
      options: {
        spanGaps: a
      }
    } = n, l = t.length, c = [];
    let u = s, h = e[0].start, d = h;
    function f(g, p, m, v) {
      const y = a ? -1 : 1;
      if (g !== p) {
        for (g += l; t[g % l].skip; )
          g -= y;
        for (; t[p % l].skip; )
          p += y;
        g % l !== p % l && (c.push({
          start: g % l,
          end: p % l,
          loop: m,
          style: v
        }), u = v, h = p % l);
      }
    }
    for (const g of e) {
      h = a ? h : g.start;
      let p = t[h % l], m;
      for (d = h + 1; d <= g.end; d++) {
        const v = t[d % l];
        m = I2(i.setContext(sh(r, {
          type: "segment",
          p0: p,
          p1: v,
          p0DataIndex: (d - 1) % l,
          p1DataIndex: d % l,
          datasetIndex: o
        }))), $se(m, u) && f(h, d - 1, g.loop, u), p = v, u = m;
      }
      h < d - 1 && f(h, d - 1, g.loop, u);
    }
    return c;
  }
  function I2(n) {
    return {
      backgroundColor: n.backgroundColor,
      borderCapStyle: n.borderCapStyle,
      borderDash: n.borderDash,
      borderDashOffset: n.borderDashOffset,
      borderJoinStyle: n.borderJoinStyle,
      borderWidth: n.borderWidth,
      borderColor: n.borderColor
    };
  }
  function $se(n, e) {
    if (!e)
      return !1;
    const t = [], i = function(r, s) {
      return ak(s) ? (t.includes(s) || t.push(s), t.indexOf(s)) : s;
    };
    return JSON.stringify(n, i) !== JSON.stringify(e, i);
  }
  /*!
   * Chart.js v4.4.6
   * https://www.chartjs.org
   * (c) 2024 Chart.js Contributors
   * Released under the MIT License
   */
  class Fse {
    constructor() {
      this._request = null, this._charts = /* @__PURE__ */ new Map(), this._running = !1, this._lastDate = void 0;
    }
    _notify(e, t, i, r) {
      const s = t.listeners[r], o = t.duration;
      s.forEach((a) => a({
        chart: e,
        initial: t.initial,
        numSteps: o,
        currentStep: Math.min(i - t.start, o)
      }));
    }
    _refresh() {
      this._request || (this._running = !0, this._request = $8.call(window, () => {
        this._update(), this._request = null, this._running && this._refresh();
      }));
    }
    _update(e = Date.now()) {
      let t = 0;
      this._charts.forEach((i, r) => {
        if (!i.running || !i.items.length)
          return;
        const s = i.items;
        let o = s.length - 1, a = !1, l;
        for (; o >= 0; --o)
          l = s[o], l._active ? (l._total > i.duration && (i.duration = l._total), l.tick(e), a = !0) : (s[o] = s[s.length - 1], s.pop());
        a && (r.draw(), this._notify(r, i, e, "progress")), s.length || (i.running = !1, this._notify(r, i, e, "complete"), i.initial = !1), t += s.length;
      }), this._lastDate = e, t === 0 && (this._running = !1);
    }
    _getAnims(e) {
      const t = this._charts;
      let i = t.get(e);
      return i || (i = {
        running: !1,
        initial: !0,
        items: [],
        listeners: {
          complete: [],
          progress: []
        }
      }, t.set(e, i)), i;
    }
    listen(e, t, i) {
      this._getAnims(e).listeners[t].push(i);
    }
    add(e, t) {
      !t || !t.length || this._getAnims(e).items.push(...t);
    }
    has(e) {
      return this._getAnims(e).items.length > 0;
    }
    start(e) {
      const t = this._charts.get(e);
      t && (t.running = !0, t.start = Date.now(), t.duration = t.items.reduce((i, r) => Math.max(i, r._duration), 0), this._refresh());
    }
    running(e) {
      if (!this._running)
        return !1;
      const t = this._charts.get(e);
      return !(!t || !t.running || !t.items.length);
    }
    stop(e) {
      const t = this._charts.get(e);
      if (!t || !t.items.length)
        return;
      const i = t.items;
      let r = i.length - 1;
      for (; r >= 0; --r)
        i[r].cancel();
      t.items = [], this._notify(e, t, Date.now(), "complete");
    }
    remove(e) {
      return this._charts.delete(e);
    }
  }
  var Wl = /* @__PURE__ */ new Fse();
  const O2 = "transparent", Bse = {
    boolean(n, e, t) {
      return t > 0.5 ? e : n;
    },
    color(n, e, t) {
      const i = S2(n || O2), r = i.valid && S2(e || O2);
      return r && r.valid ? r.mix(i, t).hexString() : e;
    },
    number(n, e, t) {
      return n + (e - n) * t;
    }
  };
  class Vse {
    constructor(e, t, i, r) {
      const s = t[i];
      r = Lb([e.to, r, s, e.from]);
      const o = Lb([e.from, s, r]);
      this._active = !0, this._fn = e.fn || Bse[e.type || typeof o], this._easing = dv[e.easing] || dv.linear, this._start = Math.floor(Date.now() + (e.delay || 0)), this._duration = this._total = Math.floor(e.duration), this._loop = !!e.loop, this._target = t, this._prop = i, this._from = o, this._to = r, this._promises = void 0;
    }
    active() {
      return this._active;
    }
    update(e, t, i) {
      if (this._active) {
        this._notify(!1);
        const r = this._target[this._prop], s = i - this._start, o = this._duration - s;
        this._start = i, this._duration = Math.floor(Math.max(o, e.duration)), this._total += s, this._loop = !!e.loop, this._to = Lb([e.to, t, r, e.from]), this._from = Lb([e.from, r, t]);
      }
    }
    cancel() {
      this._active && (this.tick(Date.now()), this._active = !1, this._notify(!1));
    }
    tick(e) {
      const t = e - this._start, i = this._duration, r = this._prop, s = this._from, o = this._loop, a = this._to;
      let l;
      if (this._active = s !== a && (o || t < i), !this._active) {
        this._target[r] = a, this._notify(!0);
        return;
      }
      if (t < 0) {
        this._target[r] = s;
        return;
      }
      l = t / i % 2, l = o && l > 1 ? 2 - l : l, l = this._easing(Math.min(1, Math.max(0, l))), this._target[r] = this._fn(s, a, l);
    }
    wait() {
      const e = this._promises || (this._promises = []);
      return new Promise((t, i) => {
        e.push({
          res: t,
          rej: i
        });
      });
    }
    _notify(e) {
      const t = e ? "res" : "rej", i = this._promises || [];
      for (let r = 0; r < i.length; r++)
        i[r][t]();
    }
  }
  class n4 {
    constructor(e, t) {
      this._chart = e, this._properties = /* @__PURE__ */ new Map(), this.configure(t);
    }
    configure(e) {
      if (!Rt(e))
        return;
      const t = Object.keys(On.animation), i = this._properties;
      Object.getOwnPropertyNames(e).forEach((r) => {
        const s = e[r];
        if (!Rt(s))
          return;
        const o = {};
        for (const a of t)
          o[a] = s[a];
        (Pn(s.properties) && s.properties || [r]).forEach((a) => {
          (a === r || !i.has(a)) && i.set(a, o);
        });
      });
    }
    _animateOptions(e, t) {
      const i = t.options, r = jse(e, i);
      if (!r)
        return [];
      const s = this._createAnimations(r, i);
      return i.$shared && Wse(e.options.$animations, i).then(() => {
        e.options = i;
      }, () => {
      }), s;
    }
    _createAnimations(e, t) {
      const i = this._properties, r = [], s = e.$animations || (e.$animations = {}), o = Object.keys(t), a = Date.now();
      let l;
      for (l = o.length - 1; l >= 0; --l) {
        const c = o[l];
        if (c.charAt(0) === "$")
          continue;
        if (c === "options") {
          r.push(...this._animateOptions(e, t));
          continue;
        }
        const u = t[c];
        let h = s[c];
        const d = i.get(c);
        if (h)
          if (d && h.active()) {
            h.update(d, u, a);
            continue;
          } else
            h.cancel();
        if (!d || !d.duration) {
          e[c] = u;
          continue;
        }
        s[c] = h = new Vse(d, e, c, u), r.push(h);
      }
      return r;
    }
    update(e, t) {
      if (this._properties.size === 0) {
        Object.assign(e, t);
        return;
      }
      const i = this._createAnimations(e, t);
      if (i.length)
        return Wl.add(this._chart, i), !0;
    }
  }
  function Wse(n, e) {
    const t = [], i = Object.keys(e);
    for (let r = 0; r < i.length; r++) {
      const s = n[i[r]];
      s && s.active() && t.push(s.wait());
    }
    return Promise.all(t);
  }
  function jse(n, e) {
    if (!e)
      return;
    let t = n.options;
    if (!t) {
      n.options = e;
      return;
    }
    return t.$shared && (n.options = t = Object.assign({}, t, {
      $shared: !1,
      $animations: {}
    })), t;
  }
  function k2(n, e) {
    const t = n && n.options || {}, i = t.reverse, r = t.min === void 0 ? e : 0, s = t.max === void 0 ? e : 0;
    return {
      start: i ? s : r,
      end: i ? r : s
    };
  }
  function zse(n, e, t) {
    if (t === !1)
      return !1;
    const i = k2(n, t), r = k2(e, t);
    return {
      top: r.end,
      right: i.end,
      bottom: r.start,
      left: i.start
    };
  }
  function Use(n) {
    let e, t, i, r;
    return Rt(n) ? (e = n.top, t = n.right, i = n.bottom, r = n.left) : e = t = i = r = n, {
      top: e,
      right: t,
      bottom: i,
      left: r,
      disabled: n === !1
    };
  }
  function i4(n, e) {
    const t = [], i = n._getSortedDatasetMetas(e);
    let r, s;
    for (r = 0, s = i.length; r < s; ++r)
      t.push(i[r].index);
    return t;
  }
  function D2(n, e, t, i = {}) {
    const r = n.keys, s = i.mode === "single";
    let o, a, l, c;
    if (e === null)
      return;
    let u = !1;
    for (o = 0, a = r.length; o < a; ++o) {
      if (l = +r[o], l === t) {
        if (u = !0, i.all)
          continue;
        break;
      }
      c = n.values[l], ei(c) && (s || e === 0 || Qa(e) === Qa(c)) && (e += c);
    }
    return !u && !i.all ? 0 : e;
  }
  function Gse(n, e) {
    const {
      iScale: t,
      vScale: i
    } = e, r = t.axis === "x" ? "x" : "y", s = i.axis === "x" ? "x" : "y", o = Object.keys(n), a = new Array(o.length);
    let l, c, u;
    for (l = 0, c = o.length; l < c; ++l)
      u = o[l], a[l] = {
        [r]: u,
        [s]: n[u]
      };
    return a;
  }
  function cx(n, e) {
    const t = n && n.options.stacked;
    return t || t === void 0 && e.stack !== void 0;
  }
  function Yse(n, e, t) {
    return `${n.id}.${e.id}.${t.stack || t.type}`;
  }
  function Kse(n) {
    const {
      min: e,
      max: t,
      minDefined: i,
      maxDefined: r
    } = n.getUserBounds();
    return {
      min: i ? e : Number.NEGATIVE_INFINITY,
      max: r ? t : Number.POSITIVE_INFINITY
    };
  }
  function qse(n, e, t) {
    const i = n[e] || (n[e] = {});
    return i[t] || (i[t] = {});
  }
  function N2(n, e, t, i) {
    for (const r of e.getMatchingVisibleMetas(i).reverse()) {
      const s = n[r.index];
      if (t && s > 0 || !t && s < 0)
        return r.index;
    }
    return null;
  }
  function L2(n, e) {
    const {
      chart: t,
      _cachedMeta: i
    } = n, r = t._stacks || (t._stacks = {}), {
      iScale: s,
      vScale: o,
      index: a
    } = i, l = s.axis, c = o.axis, u = Yse(s, o, i), h = e.length;
    let d;
    for (let f = 0; f < h; ++f) {
      const g = e[f], {
        [l]: p,
        [c]: m
      } = g, v = g._stacks || (g._stacks = {});
      d = v[c] = qse(r, u, p), d[a] = m, d._top = N2(d, o, !0, i.type), d._bottom = N2(d, o, !1, i.type);
      const y = d._visualValues || (d._visualValues = {});
      y[a] = m;
    }
  }
  function ux(n, e) {
    const t = n.scales;
    return Object.keys(t).filter((i) => t[i].axis === e).shift();
  }
  function Xse(n, e) {
    return sh(n, {
      active: !1,
      dataset: void 0,
      datasetIndex: e,
      index: e,
      mode: "default",
      type: "dataset"
    });
  }
  function Zse(n, e, t) {
    return sh(n, {
      active: !1,
      dataIndex: e,
      parsed: void 0,
      raw: void 0,
      element: t,
      index: e,
      mode: "default",
      type: "data"
    });
  }
  function vm(n, e) {
    const t = n.controller.index, i = n.vScale && n.vScale.axis;
    if (i) {
      e = e || n._parsed;
      for (const r of e) {
        const s = r._stacks;
        if (!s || s[i] === void 0 || s[i][t] === void 0)
          return;
        delete s[i][t], s[i]._visualValues !== void 0 && s[i]._visualValues[t] !== void 0 && delete s[i]._visualValues[t];
      }
    }
  }
  const hx = (n) => n === "reset" || n === "none", H2 = (n, e) => e ? n : Object.assign({}, n), Qse = (n, e, t) => n && !e.hidden && e._stacked && {
    keys: i4(t, !0),
    values: null
  };
  class fo {
    constructor(e, t) {
      this.chart = e, this._ctx = e.ctx, this.index = t, this._cachedDataOpts = {}, this._cachedMeta = this.getMeta(), this._type = this._cachedMeta.type, this.options = void 0, this._parsing = !1, this._data = void 0, this._objectData = void 0, this._sharedOptions = void 0, this._drawStart = void 0, this._drawCount = void 0, this.enableOptionSharing = !1, this.supportsDecimation = !1, this.$context = void 0, this._syncList = [], this.datasetElementType = new.target.datasetElementType, this.dataElementType = new.target.dataElementType, this.initialize();
    }
    initialize() {
      const e = this._cachedMeta;
      this.configure(), this.linkScales(), e._stacked = cx(e.vScale, e), this.addElements(), this.options.fill && !this.chart.isPluginEnabled("filler") && console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options");
    }
    updateIndex(e) {
      this.index !== e && vm(this._cachedMeta), this.index = e;
    }
    linkScales() {
      const e = this.chart, t = this._cachedMeta, i = this.getDataset(), r = (h, d, f, g) => h === "x" ? d : h === "r" ? g : f, s = t.xAxisID = tt(i.xAxisID, ux(e, "x")), o = t.yAxisID = tt(i.yAxisID, ux(e, "y")), a = t.rAxisID = tt(i.rAxisID, ux(e, "r")), l = t.indexAxis, c = t.iAxisID = r(l, s, o, a), u = t.vAxisID = r(l, o, s, a);
      t.xScale = this.getScaleForId(s), t.yScale = this.getScaleForId(o), t.rScale = this.getScaleForId(a), t.iScale = this.getScaleForId(c), t.vScale = this.getScaleForId(u);
    }
    getDataset() {
      return this.chart.data.datasets[this.index];
    }
    getMeta() {
      return this.chart.getDatasetMeta(this.index);
    }
    getScaleForId(e) {
      return this.chart.scales[e];
    }
    _getOtherScale(e) {
      const t = this._cachedMeta;
      return e === t.iScale ? t.vScale : t.iScale;
    }
    reset() {
      this._update("reset");
    }
    _destroy() {
      const e = this._cachedMeta;
      this._data && w2(this._data, this), e._stacked && vm(e);
    }
    _dataCheck() {
      const e = this.getDataset(), t = e.data || (e.data = []), i = this._data;
      if (Rt(t)) {
        const r = this._cachedMeta;
        this._data = Gse(t, r);
      } else if (i !== t) {
        if (i) {
          w2(i, this);
          const r = this._cachedMeta;
          vm(r), r._parsed = [];
        }
        t && Object.isExtensible(t) && Hre(t, this), this._syncList = [], this._data = t;
      }
    }
    addElements() {
      const e = this._cachedMeta;
      this._dataCheck(), this.datasetElementType && (e.dataset = new this.datasetElementType());
    }
    buildOrUpdateElements(e) {
      const t = this._cachedMeta, i = this.getDataset();
      let r = !1;
      this._dataCheck();
      const s = t._stacked;
      t._stacked = cx(t.vScale, t), t.stack !== i.stack && (r = !0, vm(t), t.stack = i.stack), this._resyncElements(e), (r || s !== t._stacked) && (L2(this, t._parsed), t._stacked = cx(t.vScale, t));
    }
    configure() {
      const e = this.chart.config, t = e.datasetScopeKeys(this._type), i = e.getOptionScopes(this.getDataset(), t, !0);
      this.options = e.createResolver(i, this.getContext()), this._parsing = this.options.parsing, this._cachedDataOpts = {};
    }
    parse(e, t) {
      const {
        _cachedMeta: i,
        _data: r
      } = this, {
        iScale: s,
        _stacked: o
      } = i, a = s.axis;
      let l = e === 0 && t === r.length ? !0 : i._sorted, c = e > 0 && i._parsed[e - 1], u, h, d;
      if (this._parsing === !1)
        i._parsed = r, i._sorted = !0, d = r;
      else {
        Pn(r[e]) ? d = this.parseArrayData(i, r, e, t) : Rt(r[e]) ? d = this.parseObjectData(i, r, e, t) : d = this.parsePrimitiveData(i, r, e, t);
        const f = () => h[a] === null || c && h[a] < c[a];
        for (u = 0; u < t; ++u)
          i._parsed[u + e] = h = d[u], l && (f() && (l = !1), c = h);
        i._sorted = l;
      }
      o && L2(this, d);
    }
    parsePrimitiveData(e, t, i, r) {
      const {
        iScale: s,
        vScale: o
      } = e, a = s.axis, l = o.axis, c = s.getLabels(), u = s === o, h = new Array(r);
      let d, f, g;
      for (d = 0, f = r; d < f; ++d)
        g = d + i, h[d] = {
          [a]: u || s.parse(c[g], g),
          [l]: o.parse(t[g], g)
        };
      return h;
    }
    parseArrayData(e, t, i, r) {
      const {
        xScale: s,
        yScale: o
      } = e, a = new Array(r);
      let l, c, u, h;
      for (l = 0, c = r; l < c; ++l)
        u = l + i, h = t[u], a[l] = {
          x: s.parse(h[0], u),
          y: o.parse(h[1], u)
        };
      return a;
    }
    parseObjectData(e, t, i, r) {
      const {
        xScale: s,
        yScale: o
      } = e, {
        xAxisKey: a = "x",
        yAxisKey: l = "y"
      } = this._parsing, c = new Array(r);
      let u, h, d, f;
      for (u = 0, h = r; u < h; ++u)
        d = u + i, f = t[d], c[u] = {
          x: s.parse(zu(f, a), d),
          y: o.parse(zu(f, l), d)
        };
      return c;
    }
    getParsed(e) {
      return this._cachedMeta._parsed[e];
    }
    getDataElement(e) {
      return this._cachedMeta.data[e];
    }
    applyStack(e, t, i) {
      const r = this.chart, s = this._cachedMeta, o = t[e.axis], a = {
        keys: i4(r, !0),
        values: t._stacks[e.axis]._visualValues
      };
      return D2(a, o, s.index, {
        mode: i
      });
    }
    updateRangeFromParsed(e, t, i, r) {
      const s = i[t.axis];
      let o = s === null ? NaN : s;
      const a = r && i._stacks[t.axis];
      r && a && (r.values = a, o = D2(r, s, this._cachedMeta.index)), e.min = Math.min(e.min, o), e.max = Math.max(e.max, o);
    }
    getMinMax(e, t) {
      const i = this._cachedMeta, r = i._parsed, s = i._sorted && e === i.iScale, o = r.length, a = this._getOtherScale(e), l = Qse(t, i, this.chart), c = {
        min: Number.POSITIVE_INFINITY,
        max: Number.NEGATIVE_INFINITY
      }, {
        min: u,
        max: h
      } = Kse(a);
      let d, f;
      function g() {
        f = r[d];
        const p = f[a.axis];
        return !ei(f[e.axis]) || u > p || h < p;
      }
      for (d = 0; d < o && !(!g() && (this.updateRangeFromParsed(c, e, f, l), s)); ++d)
        ;
      if (s) {
        for (d = o - 1; d >= 0; --d)
          if (!g()) {
            this.updateRangeFromParsed(c, e, f, l);
            break;
          }
      }
      return c;
    }
    getAllParsedValues(e) {
      const t = this._cachedMeta._parsed, i = [];
      let r, s, o;
      for (r = 0, s = t.length; r < s; ++r)
        o = t[r][e.axis], ei(o) && i.push(o);
      return i;
    }
    getMaxOverflow() {
      return !1;
    }
    getLabelAndValue(e) {
      const t = this._cachedMeta, i = t.iScale, r = t.vScale, s = this.getParsed(e);
      return {
        label: i ? "" + i.getLabelForValue(s[i.axis]) : "",
        value: r ? "" + r.getLabelForValue(s[r.axis]) : ""
      };
    }
    _update(e) {
      const t = this._cachedMeta;
      this.update(e || "default"), t._clip = Use(tt(this.options.clip, zse(t.xScale, t.yScale, this.getMaxOverflow())));
    }
    update(e) {
    }
    draw() {
      const e = this._ctx, t = this.chart, i = this._cachedMeta, r = i.data || [], s = t.chartArea, o = [], a = this._drawStart || 0, l = this._drawCount || r.length - a, c = this.options.drawActiveElementsOnTop;
      let u;
      for (i.dataset && i.dataset.draw(e, s, a, l), u = a; u < a + l; ++u) {
        const h = r[u];
        h.hidden || (h.active && c ? o.push(h) : h.draw(e, s));
      }
      for (u = 0; u < o.length; ++u)
        o[u].draw(e, s);
    }
    getStyle(e, t) {
      const i = t ? "active" : "default";
      return e === void 0 && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(i) : this.resolveDataElementOptions(e || 0, i);
    }
    getContext(e, t, i) {
      const r = this.getDataset();
      let s;
      if (e >= 0 && e < this._cachedMeta.data.length) {
        const o = this._cachedMeta.data[e];
        s = o.$context || (o.$context = Zse(this.getContext(), e, o)), s.parsed = this.getParsed(e), s.raw = r.data[e], s.index = s.dataIndex = e;
      } else
        s = this.$context || (this.$context = Xse(this.chart.getContext(), this.index)), s.dataset = r, s.index = s.datasetIndex = this.index;
      return s.active = !!t, s.mode = i, s;
    }
    resolveDatasetElementOptions(e) {
      return this._resolveElementOptions(this.datasetElementType.id, e);
    }
    resolveDataElementOptions(e, t) {
      return this._resolveElementOptions(this.dataElementType.id, t, e);
    }
    _resolveElementOptions(e, t = "default", i) {
      const r = t === "active", s = this._cachedDataOpts, o = e + "-" + t, a = s[o], l = this.enableOptionSharing && tw(i);
      if (a)
        return H2(a, l);
      const c = this.chart.config, u = c.datasetElementScopeKeys(this._type, e), h = r ? [`${e}Hover`, "hover", e, ""] : [e, ""], d = c.getOptionScopes(this.getDataset(), u), f = Object.keys(On.elements[e]), g = () => this.getContext(i, r, t), p = c.resolveNamedOptions(d, f, g, h);
      return p.$shared && (p.$shared = l, s[o] = Object.freeze(H2(p, l))), p;
    }
    _resolveAnimations(e, t, i) {
      const r = this.chart, s = this._cachedDataOpts, o = `animation-${t}`, a = s[o];
      if (a)
        return a;
      let l;
      if (r.options.animation !== !1) {
        const u = this.chart.config, h = u.datasetAnimationScopeKeys(this._type, t), d = u.getOptionScopes(this.getDataset(), h);
        l = u.createResolver(d, this.getContext(e, i, t));
      }
      const c = new n4(r, l && l.animations);
      return l && l._cacheable && (s[o] = Object.freeze(c)), c;
    }
    getSharedOptions(e) {
      if (e.$shared)
        return this._sharedOptions || (this._sharedOptions = Object.assign({}, e));
    }
    includeOptions(e, t) {
      return !t || hx(e) || this.chart._animationsDisabled;
    }
    _getSharedOptions(e, t) {
      const i = this.resolveDataElementOptions(e, t), r = this._sharedOptions, s = this.getSharedOptions(i), o = this.includeOptions(t, s) || s !== r;
      return this.updateSharedOptions(s, t, i), {
        sharedOptions: s,
        includeOptions: o
      };
    }
    updateElement(e, t, i, r) {
      hx(r) ? Object.assign(e, i) : this._resolveAnimations(t, r).update(e, i);
    }
    updateSharedOptions(e, t, i) {
      e && !hx(t) && this._resolveAnimations(void 0, t).update(e, i);
    }
    _setStyle(e, t, i, r) {
      e.active = r;
      const s = this.getStyle(t, r);
      this._resolveAnimations(t, i, r).update(e, {
        options: !r && this.getSharedOptions(s) || s
      });
    }
    removeHoverStyle(e, t, i) {
      this._setStyle(e, i, "active", !1);
    }
    setHoverStyle(e, t, i) {
      this._setStyle(e, i, "active", !0);
    }
    _removeDatasetHoverStyle() {
      const e = this._cachedMeta.dataset;
      e && this._setStyle(e, void 0, "active", !1);
    }
    _setDatasetHoverStyle() {
      const e = this._cachedMeta.dataset;
      e && this._setStyle(e, void 0, "active", !0);
    }
    _resyncElements(e) {
      const t = this._data, i = this._cachedMeta.data;
      for (const [a, l, c] of this._syncList)
        this[a](l, c);
      this._syncList = [];
      const r = i.length, s = t.length, o = Math.min(s, r);
      o && this.parse(0, o), s > r ? this._insertElements(r, s - r, e) : s < r && this._removeElements(s, r - s);
    }
    _insertElements(e, t, i = !0) {
      const r = this._cachedMeta, s = r.data, o = e + t;
      let a;
      const l = (c) => {
        for (c.length += t, a = c.length - 1; a >= o; a--)
          c[a] = c[a - t];
      };
      for (l(s), a = e; a < o; ++a)
        s[a] = new this.dataElementType();
      this._parsing && l(r._parsed), this.parse(e, t), i && this.updateElements(s, e, t, "reset");
    }
    updateElements(e, t, i, r) {
    }
    _removeElements(e, t) {
      const i = this._cachedMeta;
      if (this._parsing) {
        const r = i._parsed.splice(e, t);
        i._stacked && vm(i, r);
      }
      i.data.splice(e, t);
    }
    _sync(e) {
      if (this._parsing)
        this._syncList.push(e);
      else {
        const [t, i, r] = e;
        this[t](i, r);
      }
      this.chart._dataChanges.push([this.index, ...e]);
    }
    _onDataPush() {
      const e = arguments.length;
      this._sync(["_insertElements", this.getDataset().data.length - e, e]);
    }
    _onDataPop() {
      this._sync(["_removeElements", this._cachedMeta.data.length - 1, 1]);
    }
    _onDataShift() {
      this._sync(["_removeElements", 0, 1]);
    }
    _onDataSplice(e, t) {
      t && this._sync(["_removeElements", e, t]);
      const i = arguments.length - 2;
      i && this._sync(["_insertElements", e, i]);
    }
    _onDataUnshift() {
      this._sync(["_insertElements", 0, arguments.length]);
    }
  }
  fo.defaults = {};
  fo.datasetElementType = null;
  fo.dataElementType = null;
  function Jse(n, e) {
    if (!n._cache.$bar) {
      const t = n.getMatchingVisibleMetas(e);
      let i = [];
      for (let r = 0, s = t.length; r < s; r++)
        i = i.concat(t[r].controller.getAllParsedValues(n));
      n._cache.$bar = H8(i.sort((r, s) => r - s));
    }
    return n._cache.$bar;
  }
  function eoe(n) {
    const e = n.iScale, t = Jse(e, n.type);
    let i = e._length, r, s, o, a;
    const l = () => {
      o === 32767 || o === -32768 || (tw(a) && (i = Math.min(i, Math.abs(o - a) || i)), a = o);
    };
    for (r = 0, s = t.length; r < s; ++r)
      o = e.getPixelForValue(t[r]), l();
    for (a = void 0, r = 0, s = e.ticks.length; r < s; ++r)
      o = e.getPixelForTick(r), l();
    return i;
  }
  function toe(n, e, t, i) {
    const r = t.barThickness;
    let s, o;
    return kt(r) ? (s = e.min * t.categoryPercentage, o = t.barPercentage) : (s = r * i, o = 1), {
      chunk: s / i,
      ratio: o,
      start: e.pixels[n] - s / 2
    };
  }
  function noe(n, e, t, i) {
    const r = e.pixels, s = r[n];
    let o = n > 0 ? r[n - 1] : null, a = n < r.length - 1 ? r[n + 1] : null;
    const l = t.categoryPercentage;
    o === null && (o = s - (a === null ? e.end - e.start : a - s)), a === null && (a = s + s - o);
    const c = s - (s - Math.min(o, a)) / 2 * l;
    return {
      chunk: Math.abs(a - o) / 2 * l / i,
      ratio: t.barPercentage,
      start: c
    };
  }
  function ioe(n, e, t, i) {
    const r = t.parse(n[0], i), s = t.parse(n[1], i), o = Math.min(r, s), a = Math.max(r, s);
    let l = o, c = a;
    Math.abs(o) > Math.abs(a) && (l = a, c = o), e[t.axis] = c, e._custom = {
      barStart: l,
      barEnd: c,
      start: r,
      end: s,
      min: o,
      max: a
    };
  }
  function r4(n, e, t, i) {
    return Pn(n) ? ioe(n, e, t, i) : e[t.axis] = t.parse(n, i), e;
  }
  function $2(n, e, t, i) {
    const r = n.iScale, s = n.vScale, o = r.getLabels(), a = r === s, l = [];
    let c, u, h, d;
    for (c = t, u = t + i; c < u; ++c)
      d = e[c], h = {}, h[r.axis] = a || r.parse(o[c], c), l.push(r4(d, h, s, c));
    return l;
  }
  function dx(n) {
    return n && n.barStart !== void 0 && n.barEnd !== void 0;
  }
  function roe(n, e, t) {
    return n !== 0 ? Qa(n) : (e.isHorizontal() ? 1 : -1) * (e.min >= t ? 1 : -1);
  }
  function soe(n) {
    let e, t, i, r, s;
    return n.horizontal ? (e = n.base > n.x, t = "left", i = "right") : (e = n.base < n.y, t = "bottom", i = "top"), e ? (r = "end", s = "start") : (r = "start", s = "end"), {
      start: t,
      end: i,
      reverse: e,
      top: r,
      bottom: s
    };
  }
  function ooe(n, e, t, i) {
    let r = e.borderSkipped;
    const s = {};
    if (!r) {
      n.borderSkipped = s;
      return;
    }
    if (r === !0) {
      n.borderSkipped = {
        top: !0,
        right: !0,
        bottom: !0,
        left: !0
      };
      return;
    }
    const {
      start: o,
      end: a,
      reverse: l,
      top: c,
      bottom: u
    } = soe(n);
    r === "middle" && t && (n.enableBorderRadius = !0, (t._top || 0) === i ? r = c : (t._bottom || 0) === i ? r = u : (s[F2(u, o, a, l)] = !0, r = c)), s[F2(r, o, a, l)] = !0, n.borderSkipped = s;
  }
  function F2(n, e, t, i) {
    return i ? (n = aoe(n, e, t), n = B2(n, t, e)) : n = B2(n, e, t), n;
  }
  function aoe(n, e, t) {
    return n === e ? t : n === t ? e : n;
  }
  function B2(n, e, t) {
    return n === "start" ? e : n === "end" ? t : n;
  }
  function loe(n, {
    inflateAmount: e
  }, t) {
    n.inflateAmount = e === "auto" ? t === 1 ? 0.33 : 0 : e;
  }
  class t1 extends fo {
    parsePrimitiveData(e, t, i, r) {
      return $2(e, t, i, r);
    }
    parseArrayData(e, t, i, r) {
      return $2(e, t, i, r);
    }
    parseObjectData(e, t, i, r) {
      const {
        iScale: s,
        vScale: o
      } = e, {
        xAxisKey: a = "x",
        yAxisKey: l = "y"
      } = this._parsing, c = s.axis === "x" ? a : l, u = o.axis === "x" ? a : l, h = [];
      let d, f, g, p;
      for (d = i, f = i + r; d < f; ++d)
        p = t[d], g = {}, g[s.axis] = s.parse(zu(p, c), d), h.push(r4(zu(p, u), g, o, d));
      return h;
    }
    updateRangeFromParsed(e, t, i, r) {
      super.updateRangeFromParsed(e, t, i, r);
      const s = i._custom;
      s && t === this._cachedMeta.vScale && (e.min = Math.min(e.min, s.min), e.max = Math.max(e.max, s.max));
    }
    getMaxOverflow() {
      return 0;
    }
    getLabelAndValue(e) {
      const t = this._cachedMeta, {
        iScale: i,
        vScale: r
      } = t, s = this.getParsed(e), o = s._custom, a = dx(o) ? "[" + o.start + ", " + o.end + "]" : "" + r.getLabelForValue(s[r.axis]);
      return {
        label: "" + i.getLabelForValue(s[i.axis]),
        value: a
      };
    }
    initialize() {
      this.enableOptionSharing = !0, super.initialize();
      const e = this._cachedMeta;
      e.stack = this.getDataset().stack;
    }
    update(e) {
      const t = this._cachedMeta;
      this.updateElements(t.data, 0, t.data.length, e);
    }
    updateElements(e, t, i, r) {
      const s = r === "reset", {
        index: o,
        _cachedMeta: {
          vScale: a
        }
      } = this, l = a.getBasePixel(), c = a.isHorizontal(), u = this._getRuler(), {
        sharedOptions: h,
        includeOptions: d
      } = this._getSharedOptions(t, r);
      for (let f = t; f < t + i; f++) {
        const g = this.getParsed(f), p = s || kt(g[a.axis]) ? {
          base: l,
          head: l
        } : this._calculateBarValuePixels(f), m = this._calculateBarIndexPixels(f, u), v = (g._stacks || {})[a.axis], y = {
          horizontal: c,
          base: p.base,
          enableBorderRadius: !v || dx(g._custom) || o === v._top || o === v._bottom,
          x: c ? p.head : m.center,
          y: c ? m.center : p.head,
          height: c ? m.size : Math.abs(p.size),
          width: c ? Math.abs(p.size) : m.size
        };
        d && (y.options = h || this.resolveDataElementOptions(f, e[f].active ? "active" : r));
        const w = y.options || e[f].options;
        ooe(y, w, v, o), loe(y, w, u.ratio), this.updateElement(e[f], f, y, r);
      }
    }
    _getStacks(e, t) {
      const {
        iScale: i
      } = this._cachedMeta, r = i.getMatchingVisibleMetas(this._type).filter((u) => u.controller.options.grouped), s = i.options.stacked, o = [], a = this._cachedMeta.controller.getParsed(t), l = a && a[i.axis], c = (u) => {
        const h = u._parsed.find((f) => f[i.axis] === l), d = h && h[u.vScale.axis];
        if (kt(d) || isNaN(d))
          return !0;
      };
      for (const u of r)
        if (!(t !== void 0 && c(u)) && ((s === !1 || o.indexOf(u.stack) === -1 || s === void 0 && u.stack === void 0) && o.push(u.stack), u.index === e))
          break;
      return o.length || o.push(void 0), o;
    }
    _getStackCount(e) {
      return this._getStacks(void 0, e).length;
    }
    _getStackIndex(e, t, i) {
      const r = this._getStacks(e, i), s = t !== void 0 ? r.indexOf(t) : -1;
      return s === -1 ? r.length - 1 : s;
    }
    _getRuler() {
      const e = this.options, t = this._cachedMeta, i = t.iScale, r = [];
      let s, o;
      for (s = 0, o = t.data.length; s < o; ++s)
        r.push(i.getPixelForValue(this.getParsed(s)[i.axis], s));
      const a = e.barThickness;
      return {
        min: a || eoe(t),
        pixels: r,
        start: i._startPixel,
        end: i._endPixel,
        stackCount: this._getStackCount(),
        scale: i,
        grouped: e.grouped,
        ratio: a ? 1 : e.categoryPercentage * e.barPercentage
      };
    }
    _calculateBarValuePixels(e) {
      const {
        _cachedMeta: {
          vScale: t,
          _stacked: i,
          index: r
        },
        options: {
          base: s,
          minBarLength: o
        }
      } = this, a = s || 0, l = this.getParsed(e), c = l._custom, u = dx(c);
      let h = l[t.axis], d = 0, f = i ? this.applyStack(t, l, i) : h, g, p;
      f !== h && (d = f - h, f = h), u && (h = c.barStart, f = c.barEnd - c.barStart, h !== 0 && Qa(h) !== Qa(c.barEnd) && (d = 0), d += h);
      const m = !kt(s) && !u ? s : d;
      let v = t.getPixelForValue(m);
      if (this.chart.getDataVisibility(e) ? g = t.getPixelForValue(d + f) : g = v, p = g - v, Math.abs(p) < o) {
        p = roe(p, t, a) * o, h === a && (v -= p / 2);
        const y = t.getPixelForDecimal(0), w = t.getPixelForDecimal(1), R = Math.min(y, w), E = Math.max(y, w);
        v = Math.max(Math.min(v, E), R), g = v + p, i && !u && (l._stacks[t.axis]._visualValues[r] = t.getValueForPixel(g) - t.getValueForPixel(v));
      }
      if (v === t.getPixelForValue(a)) {
        const y = Qa(p) * t.getLineWidthForValue(a) / 2;
        v += y, p -= y;
      }
      return {
        size: p,
        base: v,
        head: g,
        center: g + p / 2
      };
    }
    _calculateBarIndexPixels(e, t) {
      const i = t.scale, r = this.options, s = r.skipNull, o = tt(r.maxBarThickness, 1 / 0);
      let a, l;
      if (t.grouped) {
        const c = s ? this._getStackCount(e) : t.stackCount, u = r.barThickness === "flex" ? noe(e, t, r, c) : toe(e, t, r, c), h = this._getStackIndex(this.index, this._cachedMeta.stack, s ? e : void 0);
        a = u.start + u.chunk * h + u.chunk / 2, l = Math.min(o, u.chunk * u.ratio);
      } else
        a = i.getPixelForValue(this.getParsed(e)[i.axis], e), l = Math.min(o, t.min * t.ratio);
      return {
        base: a - l / 2,
        head: a + l / 2,
        center: a,
        size: l
      };
    }
    draw() {
      const e = this._cachedMeta, t = e.vScale, i = e.data, r = i.length;
      let s = 0;
      for (; s < r; ++s)
        this.getParsed(s)[t.axis] !== null && !i[s].hidden && i[s].draw(this._ctx);
    }
  }
  t1.id = "bar";
  t1.defaults = {
    datasetElementType: !1,
    dataElementType: "bar",
    categoryPercentage: 0.8,
    barPercentage: 0.9,
    grouped: !0,
    animations: {
      numbers: {
        type: "number",
        properties: ["x", "y", "base", "width", "height"]
      }
    }
  };
  t1.overrides = {
    scales: {
      _index_: {
        type: "category",
        offset: !0,
        grid: {
          offset: !0
        }
      },
      _value_: {
        type: "linear",
        beginAtZero: !0
      }
    }
  };
  class n1 extends fo {
    initialize() {
      this.enableOptionSharing = !0, super.initialize();
    }
    parsePrimitiveData(e, t, i, r) {
      const s = super.parsePrimitiveData(e, t, i, r);
      for (let o = 0; o < s.length; o++)
        s[o]._custom = this.resolveDataElementOptions(o + i).radius;
      return s;
    }
    parseArrayData(e, t, i, r) {
      const s = super.parseArrayData(e, t, i, r);
      for (let o = 0; o < s.length; o++) {
        const a = t[i + o];
        s[o]._custom = tt(a[2], this.resolveDataElementOptions(o + i).radius);
      }
      return s;
    }
    parseObjectData(e, t, i, r) {
      const s = super.parseObjectData(e, t, i, r);
      for (let o = 0; o < s.length; o++) {
        const a = t[i + o];
        s[o]._custom = tt(a && a.r && +a.r, this.resolveDataElementOptions(o + i).radius);
      }
      return s;
    }
    getMaxOverflow() {
      const e = this._cachedMeta.data;
      let t = 0;
      for (let i = e.length - 1; i >= 0; --i)
        t = Math.max(t, e[i].size(this.resolveDataElementOptions(i)) / 2);
      return t > 0 && t;
    }
    getLabelAndValue(e) {
      const t = this._cachedMeta, i = this.chart.data.labels || [], {
        xScale: r,
        yScale: s
      } = t, o = this.getParsed(e), a = r.getLabelForValue(o.x), l = s.getLabelForValue(o.y), c = o._custom;
      return {
        label: i[e] || "",
        value: "(" + a + ", " + l + (c ? ", " + c : "") + ")"
      };
    }
    update(e) {
      const t = this._cachedMeta.data;
      this.updateElements(t, 0, t.length, e);
    }
    updateElements(e, t, i, r) {
      const s = r === "reset", {
        iScale: o,
        vScale: a
      } = this._cachedMeta, {
        sharedOptions: l,
        includeOptions: c
      } = this._getSharedOptions(t, r), u = o.axis, h = a.axis;
      for (let d = t; d < t + i; d++) {
        const f = e[d], g = !s && this.getParsed(d), p = {}, m = p[u] = s ? o.getPixelForDecimal(0.5) : o.getPixelForValue(g[u]), v = p[h] = s ? a.getBasePixel() : a.getPixelForValue(g[h]);
        p.skip = isNaN(m) || isNaN(v), c && (p.options = l || this.resolveDataElementOptions(d, f.active ? "active" : r), s && (p.options.radius = 0)), this.updateElement(f, d, p, r);
      }
    }
    resolveDataElementOptions(e, t) {
      const i = this.getParsed(e);
      let r = super.resolveDataElementOptions(e, t);
      r.$shared && (r = Object.assign({}, r, {
        $shared: !1
      }));
      const s = r.radius;
      return t !== "active" && (r.radius = 0), r.radius += tt(i && i._custom, s), r;
    }
  }
  n1.id = "bubble";
  n1.defaults = {
    datasetElementType: !1,
    dataElementType: "point",
    animations: {
      numbers: {
        type: "number",
        properties: ["x", "y", "borderWidth", "radius"]
      }
    }
  };
  n1.overrides = {
    scales: {
      x: {
        type: "linear"
      },
      y: {
        type: "linear"
      }
    }
  };
  function coe(n, e, t) {
    let i = 1, r = 1, s = 0, o = 0;
    if (e < Sn) {
      const a = n, l = a + e, c = Math.cos(a), u = Math.sin(a), h = Math.cos(l), d = Math.sin(l), f = (w, R, E) => nw(w, a, l, !0) ? 1 : Math.max(R, R * t, E, E * t), g = (w, R, E) => nw(w, a, l, !0) ? -1 : Math.min(R, R * t, E, E * t), p = f(0, c, h), m = f(si, u, d), v = g(_n, c, h), y = g(_n + si, u, d);
      i = (p - v) / 2, r = (m - y) / 2, s = -(p + v) / 2, o = -(m + y) / 2;
    }
    return {
      ratioX: i,
      ratioY: r,
      offsetX: s,
      offsetY: o
    };
  }
  class vf extends fo {
    constructor(e, t) {
      super(e, t), this.enableOptionSharing = !0, this.innerRadius = void 0, this.outerRadius = void 0, this.offsetX = void 0, this.offsetY = void 0;
    }
    linkScales() {
    }
    parse(e, t) {
      const i = this.getDataset().data, r = this._cachedMeta;
      if (this._parsing === !1)
        r._parsed = i;
      else {
        let s = (l) => +i[l];
        if (Rt(i[e])) {
          const {
            key: l = "value"
          } = this._parsing;
          s = (c) => +zu(i[c], l);
        }
        let o, a;
        for (o = e, a = e + t; o < a; ++o)
          r._parsed[o] = s(o);
      }
    }
    _getRotation() {
      return Ko(this.options.rotation - 90);
    }
    _getCircumference() {
      return Ko(this.options.circumference);
    }
    _getRotationExtents() {
      let e = Sn, t = -Sn;
      for (let i = 0; i < this.chart.data.datasets.length; ++i)
        if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {
          const r = this.chart.getDatasetMeta(i).controller, s = r._getRotation(), o = r._getCircumference();
          e = Math.min(e, s), t = Math.max(t, s + o);
        }
      return {
        rotation: e,
        circumference: t - e
      };
    }
    update(e) {
      const t = this.chart, {
        chartArea: i
      } = t, r = this._cachedMeta, s = r.data, o = this.getMaxBorderWidth() + this.getMaxOffset(s) + this.options.spacing, a = Math.max((Math.min(i.width, i.height) - o) / 2, 0), l = Math.min(_re(this.options.cutout, a), 1), c = this._getRingWeight(this.index), {
        circumference: u,
        rotation: h
      } = this._getRotationExtents(), {
        ratioX: d,
        ratioY: f,
        offsetX: g,
        offsetY: p
      } = coe(h, u, l), m = (i.width - o) / d, v = (i.height - o) / f, y = Math.max(Math.min(m, v) / 2, 0), w = O8(this.options.radius, y), R = Math.max(w * l, 0), E = (w - R) / this._getVisibleDatasetWeightTotal();
      this.offsetX = g * w, this.offsetY = p * w, r.total = this.calculateTotal(), this.outerRadius = w - E * this._getRingWeightOffset(this.index), this.innerRadius = Math.max(this.outerRadius - E * c, 0), this.updateElements(s, 0, s.length, e);
    }
    _circumference(e, t) {
      const i = this.options, r = this._cachedMeta, s = this._getCircumference();
      return t && i.animation.animateRotate || !this.chart.getDataVisibility(e) || r._parsed[e] === null || r.data[e].hidden ? 0 : this.calculateCircumference(r._parsed[e] * s / Sn);
    }
    updateElements(e, t, i, r) {
      const s = r === "reset", o = this.chart, a = o.chartArea, c = o.options.animation, u = (a.left + a.right) / 2, h = (a.top + a.bottom) / 2, d = s && c.animateScale, f = d ? 0 : this.innerRadius, g = d ? 0 : this.outerRadius, {
        sharedOptions: p,
        includeOptions: m
      } = this._getSharedOptions(t, r);
      let v = this._getRotation(), y;
      for (y = 0; y < t; ++y)
        v += this._circumference(y, s);
      for (y = t; y < t + i; ++y) {
        const w = this._circumference(y, s), R = e[y], E = {
          x: u + this.offsetX,
          y: h + this.offsetY,
          startAngle: v,
          endAngle: v + w,
          circumference: w,
          outerRadius: g,
          innerRadius: f
        };
        m && (E.options = p || this.resolveDataElementOptions(y, R.active ? "active" : r)), v += w, this.updateElement(R, y, E, r);
      }
    }
    calculateTotal() {
      const e = this._cachedMeta, t = e.data;
      let i = 0, r;
      for (r = 0; r < t.length; r++) {
        const s = e._parsed[r];
        s !== null && !isNaN(s) && this.chart.getDataVisibility(r) && !t[r].hidden && (i += Math.abs(s));
      }
      return i;
    }
    calculateCircumference(e) {
      const t = this._cachedMeta.total;
      return t > 0 && !isNaN(e) ? Sn * (Math.abs(e) / t) : 0;
    }
    getLabelAndValue(e) {
      const t = this._cachedMeta, i = this.chart, r = i.data.labels || [], s = Vw(t._parsed[e], i.options.locale);
      return {
        label: r[e] || "",
        value: s
      };
    }
    getMaxBorderWidth(e) {
      let t = 0;
      const i = this.chart;
      let r, s, o, a, l;
      if (!e) {
        for (r = 0, s = i.data.datasets.length; r < s; ++r)
          if (i.isDatasetVisible(r)) {
            o = i.getDatasetMeta(r), e = o.data, a = o.controller;
            break;
          }
      }
      if (!e)
        return 0;
      for (r = 0, s = e.length; r < s; ++r)
        l = a.resolveDataElementOptions(r), l.borderAlign !== "inner" && (t = Math.max(t, l.borderWidth || 0, l.hoverBorderWidth || 0));
      return t;
    }
    getMaxOffset(e) {
      let t = 0;
      for (let i = 0, r = e.length; i < r; ++i) {
        const s = this.resolveDataElementOptions(i);
        t = Math.max(t, s.offset || 0, s.hoverOffset || 0);
      }
      return t;
    }
    _getRingWeightOffset(e) {
      let t = 0;
      for (let i = 0; i < e; ++i)
        this.chart.isDatasetVisible(i) && (t += this._getRingWeight(i));
      return t;
    }
    _getRingWeight(e) {
      return Math.max(tt(this.chart.data.datasets[e].weight, 1), 0);
    }
    _getVisibleDatasetWeightTotal() {
      return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
    }
  }
  vf.id = "doughnut";
  vf.defaults = {
    datasetElementType: !1,
    dataElementType: "arc",
    animation: {
      animateRotate: !0,
      animateScale: !1
    },
    animations: {
      numbers: {
        type: "number",
        properties: ["circumference", "endAngle", "innerRadius", "outerRadius", "startAngle", "x", "y", "offset", "borderWidth", "spacing"]
      }
    },
    cutout: "50%",
    rotation: 0,
    circumference: 360,
    radius: "100%",
    spacing: 0,
    indexAxis: "r"
  };
  vf.descriptors = {
    _scriptable: (n) => n !== "spacing",
    _indexable: (n) => n !== "spacing" && !n.startsWith("borderDash") && !n.startsWith("hoverBorderDash")
  };
  vf.overrides = {
    aspectRatio: 1,
    plugins: {
      legend: {
        labels: {
          generateLabels(n) {
            const e = n.data;
            if (e.labels.length && e.datasets.length) {
              const {
                labels: {
                  pointStyle: t,
                  color: i
                }
              } = n.legend.options;
              return e.labels.map((r, s) => {
                const a = n.getDatasetMeta(0).controller.getStyle(s);
                return {
                  text: r,
                  fillStyle: a.backgroundColor,
                  strokeStyle: a.borderColor,
                  fontColor: i,
                  lineWidth: a.borderWidth,
                  pointStyle: t,
                  hidden: !n.getDataVisibility(s),
                  index: s
                };
              });
            }
            return [];
          }
        },
        onClick(n, e, t) {
          t.chart.toggleDataVisibility(e.index), t.chart.update();
        }
      }
    }
  };
  class i1 extends fo {
    initialize() {
      this.enableOptionSharing = !0, this.supportsDecimation = !0, super.initialize();
    }
    update(e) {
      const t = this._cachedMeta, {
        dataset: i,
        data: r = [],
        _dataset: s
      } = t, o = this.chart._animationsDisabled;
      let {
        start: a,
        count: l
      } = B8(t, r, o);
      this._drawStart = a, this._drawCount = l, V8(t) && (a = 0, l = r.length), i._chart = this.chart, i._datasetIndex = this.index, i._decimated = !!s._decimated, i.points = r;
      const c = this.resolveDatasetElementOptions(e);
      this.options.showLine || (c.borderWidth = 0), c.segment = this.options.segment, this.updateElement(i, void 0, {
        animated: !o,
        options: c
      }, e), this.updateElements(r, a, l, e);
    }
    updateElements(e, t, i, r) {
      const s = r === "reset", {
        iScale: o,
        vScale: a,
        _stacked: l,
        _dataset: c
      } = this._cachedMeta, {
        sharedOptions: u,
        includeOptions: h
      } = this._getSharedOptions(t, r), d = o.axis, f = a.axis, {
        spanGaps: g,
        segment: p
      } = this.options, m = vp(g) ? g : Number.POSITIVE_INFINITY, v = this.chart._animationsDisabled || s || r === "none", y = t + i, w = e.length;
      let R = t > 0 && this.getParsed(t - 1);
      for (let E = 0; E < w; ++E) {
        const C = e[E], T = v ? C : {};
        if (E < t || E >= y) {
          T.skip = !0;
          continue;
        }
        const P = this.getParsed(E), x = kt(P[f]), A = T[d] = o.getPixelForValue(P[d], E), D = T[f] = s || x ? a.getBasePixel() : a.getPixelForValue(l ? this.applyStack(a, P, l) : P[f], E);
        T.skip = isNaN(A) || isNaN(D) || x, T.stop = E > 0 && Math.abs(P[d] - R[d]) > m, p && (T.parsed = P, T.raw = c.data[E]), h && (T.options = u || this.resolveDataElementOptions(E, C.active ? "active" : r)), v || this.updateElement(C, E, T, r), R = P;
      }
    }
    getMaxOverflow() {
      const e = this._cachedMeta, t = e.dataset, i = t.options && t.options.borderWidth || 0, r = e.data || [];
      if (!r.length)
        return i;
      const s = r[0].size(this.resolveDataElementOptions(0)), o = r[r.length - 1].size(this.resolveDataElementOptions(r.length - 1));
      return Math.max(i, s, o) / 2;
    }
    draw() {
      const e = this._cachedMeta;
      e.dataset.updateControlPoints(this.chart.chartArea, e.iScale.axis), super.draw();
    }
  }
  i1.id = "line";
  i1.defaults = {
    datasetElementType: "line",
    dataElementType: "point",
    showLine: !0,
    spanGaps: !1
  };
  i1.overrides = {
    scales: {
      _index_: {
        type: "category"
      },
      _value_: {
        type: "linear"
      }
    }
  };
  class Ww extends fo {
    constructor(e, t) {
      super(e, t), this.innerRadius = void 0, this.outerRadius = void 0;
    }
    getLabelAndValue(e) {
      const t = this._cachedMeta, i = this.chart, r = i.data.labels || [], s = Vw(t._parsed[e].r, i.options.locale);
      return {
        label: r[e] || "",
        value: s
      };
    }
    parseObjectData(e, t, i, r) {
      return q8.bind(this)(e, t, i, r);
    }
    update(e) {
      const t = this._cachedMeta.data;
      this._updateRadius(), this.updateElements(t, 0, t.length, e);
    }
    getMinMax() {
      const e = this._cachedMeta, t = {
        min: Number.POSITIVE_INFINITY,
        max: Number.NEGATIVE_INFINITY
      };
      return e.data.forEach((i, r) => {
        const s = this.getParsed(r).r;
        !isNaN(s) && this.chart.getDataVisibility(r) && (s < t.min && (t.min = s), s > t.max && (t.max = s));
      }), t;
    }
    _updateRadius() {
      const e = this.chart, t = e.chartArea, i = e.options, r = Math.min(t.right - t.left, t.bottom - t.top), s = Math.max(r / 2, 0), o = Math.max(i.cutoutPercentage ? s / 100 * i.cutoutPercentage : 1, 0), a = (s - o) / e.getVisibleDatasetCount();
      this.outerRadius = s - a * this.index, this.innerRadius = this.outerRadius - a;
    }
    updateElements(e, t, i, r) {
      const s = r === "reset", o = this.chart, l = o.options.animation, c = this._cachedMeta.rScale, u = c.xCenter, h = c.yCenter, d = c.getIndexAngle(0) - 0.5 * _n;
      let f = d, g;
      const p = 360 / this.countVisibleElements();
      for (g = 0; g < t; ++g)
        f += this._computeAngle(g, r, p);
      for (g = t; g < t + i; g++) {
        const m = e[g];
        let v = f, y = f + this._computeAngle(g, r, p), w = o.getDataVisibility(g) ? c.getDistanceFromCenterForValue(this.getParsed(g).r) : 0;
        f = y, s && (l.animateScale && (w = 0), l.animateRotate && (v = y = d));
        const R = {
          x: u,
          y: h,
          innerRadius: 0,
          outerRadius: w,
          startAngle: v,
          endAngle: y,
          options: this.resolveDataElementOptions(g, m.active ? "active" : r)
        };
        this.updateElement(m, g, R, r);
      }
    }
    countVisibleElements() {
      const e = this._cachedMeta;
      let t = 0;
      return e.data.forEach((i, r) => {
        !isNaN(this.getParsed(r).r) && this.chart.getDataVisibility(r) && t++;
      }), t;
    }
    _computeAngle(e, t, i) {
      return this.chart.getDataVisibility(e) ? Ko(this.resolveDataElementOptions(e, t).angle || i) : 0;
    }
  }
  Ww.id = "polarArea";
  Ww.defaults = {
    dataElementType: "arc",
    animation: {
      animateRotate: !0,
      animateScale: !0
    },
    animations: {
      numbers: {
        type: "number",
        properties: ["x", "y", "startAngle", "endAngle", "innerRadius", "outerRadius"]
      }
    },
    indexAxis: "r",
    startAngle: 0
  };
  Ww.overrides = {
    aspectRatio: 1,
    plugins: {
      legend: {
        labels: {
          generateLabels(n) {
            const e = n.data;
            if (e.labels.length && e.datasets.length) {
              const {
                labels: {
                  pointStyle: t,
                  color: i
                }
              } = n.legend.options;
              return e.labels.map((r, s) => {
                const a = n.getDatasetMeta(0).controller.getStyle(s);
                return {
                  text: r,
                  fillStyle: a.backgroundColor,
                  strokeStyle: a.borderColor,
                  fontColor: i,
                  lineWidth: a.borderWidth,
                  pointStyle: t,
                  hidden: !n.getDataVisibility(s),
                  index: s
                };
              });
            }
            return [];
          }
        },
        onClick(n, e, t) {
          t.chart.toggleDataVisibility(e.index), t.chart.update();
        }
      }
    },
    scales: {
      r: {
        type: "radialLinear",
        angleLines: {
          display: !1
        },
        beginAtZero: !0,
        grid: {
          circular: !0
        },
        pointLabels: {
          display: !1
        },
        startAngle: 0
      }
    }
  };
  class gk extends vf {
  }
  gk.id = "pie";
  gk.defaults = {
    cutout: 0,
    rotation: 0,
    circumference: 360,
    radius: "100%"
  };
  class r1 extends fo {
    getLabelAndValue(e) {
      const t = this._cachedMeta.vScale, i = this.getParsed(e);
      return {
        label: t.getLabels()[e],
        value: "" + t.getLabelForValue(i[t.axis])
      };
    }
    parseObjectData(e, t, i, r) {
      return q8.bind(this)(e, t, i, r);
    }
    update(e) {
      const t = this._cachedMeta, i = t.dataset, r = t.data || [], s = t.iScale.getLabels();
      if (i.points = r, e !== "resize") {
        const o = this.resolveDatasetElementOptions(e);
        this.options.showLine || (o.borderWidth = 0);
        const a = {
          _loop: !0,
          _fullLoop: s.length === r.length,
          options: o
        };
        this.updateElement(i, void 0, a, e);
      }
      this.updateElements(r, 0, r.length, e);
    }
    updateElements(e, t, i, r) {
      const s = this._cachedMeta.rScale, o = r === "reset";
      for (let a = t; a < t + i; a++) {
        const l = e[a], c = this.resolveDataElementOptions(a, l.active ? "active" : r), u = s.getPointPositionForValue(a, this.getParsed(a).r), h = o ? s.xCenter : u.x, d = o ? s.yCenter : u.y, f = {
          x: h,
          y: d,
          angle: u.angle,
          skip: isNaN(h) || isNaN(d),
          options: c
        };
        this.updateElement(l, a, f, r);
      }
    }
  }
  r1.id = "radar";
  r1.defaults = {
    datasetElementType: "line",
    dataElementType: "point",
    indexAxis: "r",
    showLine: !0,
    elements: {
      line: {
        fill: "start"
      }
    }
  };
  r1.overrides = {
    aspectRatio: 1,
    scales: {
      r: {
        type: "radialLinear"
      }
    }
  };
  class s1 extends fo {
    getLabelAndValue(e) {
      const t = this._cachedMeta, i = this.chart.data.labels || [], {
        xScale: r,
        yScale: s
      } = t, o = this.getParsed(e), a = r.getLabelForValue(o.x), l = s.getLabelForValue(o.y);
      return {
        label: i[e] || "",
        value: "(" + a + ", " + l + ")"
      };
    }
    update(e) {
      const t = this._cachedMeta, {
        data: i = []
      } = t, r = this.chart._animationsDisabled;
      let {
        start: s,
        count: o
      } = B8(t, i, r);
      if (this._drawStart = s, this._drawCount = o, V8(t) && (s = 0, o = i.length), this.options.showLine) {
        this.datasetElementType || this.addElements();
        const {
          dataset: a,
          _dataset: l
        } = t;
        a._chart = this.chart, a._datasetIndex = this.index, a._decimated = !!l._decimated, a.points = i;
        const c = this.resolveDatasetElementOptions(e);
        c.segment = this.options.segment, this.updateElement(a, void 0, {
          animated: !r,
          options: c
        }, e);
      } else this.datasetElementType && (delete t.dataset, this.datasetElementType = !1);
      this.updateElements(i, s, o, e);
    }
    addElements() {
      const {
        showLine: e
      } = this.options;
      !this.datasetElementType && e && (this.datasetElementType = this.chart.registry.getElement("line")), super.addElements();
    }
    updateElements(e, t, i, r) {
      const s = r === "reset", {
        iScale: o,
        vScale: a,
        _stacked: l,
        _dataset: c
      } = this._cachedMeta, u = this.resolveDataElementOptions(t, r), h = this.getSharedOptions(u), d = this.includeOptions(r, h), f = o.axis, g = a.axis, {
        spanGaps: p,
        segment: m
      } = this.options, v = vp(p) ? p : Number.POSITIVE_INFINITY, y = this.chart._animationsDisabled || s || r === "none";
      let w = t > 0 && this.getParsed(t - 1);
      for (let R = t; R < t + i; ++R) {
        const E = e[R], C = this.getParsed(R), T = y ? E : {}, P = kt(C[g]), x = T[f] = o.getPixelForValue(C[f], R), A = T[g] = s || P ? a.getBasePixel() : a.getPixelForValue(l ? this.applyStack(a, C, l) : C[g], R);
        T.skip = isNaN(x) || isNaN(A) || P, T.stop = R > 0 && Math.abs(C[f] - w[f]) > v, m && (T.parsed = C, T.raw = c.data[R]), d && (T.options = h || this.resolveDataElementOptions(R, E.active ? "active" : r)), y || this.updateElement(E, R, T, r), w = C;
      }
      this.updateSharedOptions(h, r, u);
    }
    getMaxOverflow() {
      const e = this._cachedMeta, t = e.data || [];
      if (!this.options.showLine) {
        let a = 0;
        for (let l = t.length - 1; l >= 0; --l)
          a = Math.max(a, t[l].size(this.resolveDataElementOptions(l)) / 2);
        return a > 0 && a;
      }
      const i = e.dataset, r = i.options && i.options.borderWidth || 0;
      if (!t.length)
        return r;
      const s = t[0].size(this.resolveDataElementOptions(0)), o = t[t.length - 1].size(this.resolveDataElementOptions(t.length - 1));
      return Math.max(r, s, o) / 2;
    }
  }
  s1.id = "scatter";
  s1.defaults = {
    datasetElementType: !1,
    dataElementType: "point",
    showLine: !1,
    fill: !1
  };
  s1.overrides = {
    interaction: {
      mode: "point"
    },
    scales: {
      x: {
        type: "linear"
      },
      y: {
        type: "linear"
      }
    }
  };
  var uoe = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    BarController: t1,
    BubbleController: n1,
    DoughnutController: vf,
    LineController: i1,
    PieController: gk,
    PolarAreaController: Ww,
    RadarController: r1,
    ScatterController: s1
  });
  function bh() {
    throw new Error("This method is not implemented: Check that a complete date adapter is provided.");
  }
  class pk {
    /**
    * Override default date adapter methods.
    * Accepts type parameter to define options type.
    * @example
    * Chart._adapters._date.override<{myAdapterOption: string}>({
    *   init() {
    *     console.log(this.options.myAdapterOption);
    *   }
    * })
    */
    static override(e) {
      Object.assign(pk.prototype, e);
    }
    constructor(e) {
      this.options = void 0, this.options = e || {};
    }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    init() {
    }
    formats() {
      return bh();
    }
    parse() {
      return bh();
    }
    format() {
      return bh();
    }
    add() {
      return bh();
    }
    diff() {
      return bh();
    }
    startOf() {
      return bh();
    }
    endOf() {
      return bh();
    }
  }
  var hoe = {
    _date: pk
  };
  function doe(n, e, t, i) {
    const {
      controller: r,
      data: s,
      _sorted: o
    } = n, a = r._cachedMeta.iScale;
    if (a && e === a.axis && e !== "r" && o && s.length) {
      const l = a._reversePixels ? Nre : cc;
      if (i) {
        if (r._sharedOptions) {
          const c = s[0], u = typeof c.getRange == "function" && c.getRange(e);
          if (u) {
            const h = l(s, e, t - u), d = l(s, e, t + u);
            return {
              lo: h.lo,
              hi: d.hi
            };
          }
        }
      } else return l(s, e, t);
    }
    return {
      lo: 0,
      hi: s.length - 1
    };
  }
  function jw(n, e, t, i, r) {
    const s = n.getSortedVisibleDatasetMetas(), o = t[e];
    for (let a = 0, l = s.length; a < l; ++a) {
      const {
        index: c,
        data: u
      } = s[a], {
        lo: h,
        hi: d
      } = doe(s[a], e, o, r);
      for (let f = h; f <= d; ++f) {
        const g = u[f];
        g.skip || i(g, c, f);
      }
    }
  }
  function foe(n) {
    const e = n.indexOf("x") !== -1, t = n.indexOf("y") !== -1;
    return function(i, r) {
      const s = e ? Math.abs(i.x - r.x) : 0, o = t ? Math.abs(i.y - r.y) : 0;
      return Math.sqrt(Math.pow(s, 2) + Math.pow(o, 2));
    };
  }
  function fx(n, e, t, i, r) {
    const s = [];
    return !r && !n.isPointInArea(e) || jw(n, t, e, function(a, l, c) {
      !r && !uc(a, n.chartArea, 0) || a.inRange(e.x, e.y, i) && s.push({
        element: a,
        datasetIndex: l,
        index: c
      });
    }, !0), s;
  }
  function goe(n, e, t, i) {
    let r = [];
    function s(o, a, l) {
      const {
        startAngle: c,
        endAngle: u
      } = o.getProps(["startAngle", "endAngle"], i), {
        angle: h
      } = N8(o, {
        x: e.x,
        y: e.y
      });
      nw(h, c, u) && r.push({
        element: o,
        datasetIndex: a,
        index: l
      });
    }
    return jw(n, t, e, s), r;
  }
  function poe(n, e, t, i, r, s) {
    let o = [];
    const a = foe(t);
    let l = Number.POSITIVE_INFINITY;
    function c(u, h, d) {
      const f = u.inRange(e.x, e.y, r);
      if (i && !f)
        return;
      const g = u.getCenterPoint(r);
      if (!(!!s || n.isPointInArea(g)) && !f)
        return;
      const m = a(e, g);
      m < l ? (o = [{
        element: u,
        datasetIndex: h,
        index: d
      }], l = m) : m === l && o.push({
        element: u,
        datasetIndex: h,
        index: d
      });
    }
    return jw(n, t, e, c), o;
  }
  function gx(n, e, t, i, r, s) {
    return !s && !n.isPointInArea(e) ? [] : t === "r" && !i ? goe(n, e, t, r) : poe(n, e, t, i, r, s);
  }
  function V2(n, e, t, i, r) {
    const s = [], o = t === "x" ? "inXRange" : "inYRange";
    let a = !1;
    return jw(n, t, e, (l, c, u) => {
      l[o] && l[o](e[t], r) && (s.push({
        element: l,
        datasetIndex: c,
        index: u
      }), a = a || l.inRange(e.x, e.y, r));
    }), i && !a ? [] : s;
  }
  var moe = {
    evaluateInteractionItems: jw,
    modes: {
      index(n, e, t, i) {
        const r = cd(e, n), s = t.axis || "x", o = t.includeInvisible || !1, a = t.intersect ? fx(n, r, s, i, o) : gx(n, r, s, !1, i, o), l = [];
        return a.length ? (n.getSortedVisibleDatasetMetas().forEach((c) => {
          const u = a[0].index, h = c.data[u];
          h && !h.skip && l.push({
            element: h,
            datasetIndex: c.index,
            index: u
          });
        }), l) : [];
      },
      dataset(n, e, t, i) {
        const r = cd(e, n), s = t.axis || "xy", o = t.includeInvisible || !1;
        let a = t.intersect ? fx(n, r, s, i, o) : gx(n, r, s, !1, i, o);
        if (a.length > 0) {
          const l = a[0].datasetIndex, c = n.getDatasetMeta(l).data;
          a = [];
          for (let u = 0; u < c.length; ++u)
            a.push({
              element: c[u],
              datasetIndex: l,
              index: u
            });
        }
        return a;
      },
      point(n, e, t, i) {
        const r = cd(e, n), s = t.axis || "xy", o = t.includeInvisible || !1;
        return fx(n, r, s, i, o);
      },
      nearest(n, e, t, i) {
        const r = cd(e, n), s = t.axis || "xy", o = t.includeInvisible || !1;
        return gx(n, r, s, t.intersect, i, o);
      },
      x(n, e, t, i) {
        const r = cd(e, n);
        return V2(n, r, "x", t.intersect, i);
      },
      y(n, e, t, i) {
        const r = cd(e, n);
        return V2(n, r, "y", t.intersect, i);
      }
    }
  };
  const s4 = ["left", "top", "right", "bottom"];
  function wm(n, e) {
    return n.filter((t) => t.pos === e);
  }
  function W2(n, e) {
    return n.filter((t) => s4.indexOf(t.pos) === -1 && t.box.axis === e);
  }
  function ym(n, e) {
    return n.sort((t, i) => {
      const r = e ? i : t, s = e ? t : i;
      return r.weight === s.weight ? r.index - s.index : r.weight - s.weight;
    });
  }
  function boe(n) {
    const e = [];
    let t, i, r, s, o, a;
    for (t = 0, i = (n || []).length; t < i; ++t)
      r = n[t], {
        position: s,
        options: {
          stack: o,
          stackWeight: a = 1
        }
      } = r, e.push({
        index: t,
        box: r,
        pos: s,
        horizontal: r.isHorizontal(),
        weight: r.weight,
        stack: o && s + o,
        stackWeight: a
      });
    return e;
  }
  function voe(n) {
    const e = {};
    for (const t of n) {
      const {
        stack: i,
        pos: r,
        stackWeight: s
      } = t;
      if (!i || !s4.includes(r))
        continue;
      const o = e[i] || (e[i] = {
        count: 0,
        placed: 0,
        weight: 0,
        size: 0
      });
      o.count++, o.weight += s;
    }
    return e;
  }
  function woe(n, e) {
    const t = voe(n), {
      vBoxMaxWidth: i,
      hBoxMaxHeight: r
    } = e;
    let s, o, a;
    for (s = 0, o = n.length; s < o; ++s) {
      a = n[s];
      const {
        fullSize: l
      } = a.box, c = t[a.stack], u = c && a.stackWeight / c.weight;
      a.horizontal ? (a.width = u ? u * i : l && e.availableWidth, a.height = r) : (a.width = i, a.height = u ? u * r : l && e.availableHeight);
    }
    return t;
  }
  function yoe(n) {
    const e = boe(n), t = ym(e.filter((c) => c.box.fullSize), !0), i = ym(wm(e, "left"), !0), r = ym(wm(e, "right")), s = ym(wm(e, "top"), !0), o = ym(wm(e, "bottom")), a = W2(e, "x"), l = W2(e, "y");
    return {
      fullSize: t,
      leftAndTop: i.concat(s),
      rightAndBottom: r.concat(l).concat(o).concat(a),
      chartArea: wm(e, "chartArea"),
      vertical: i.concat(r).concat(l),
      horizontal: s.concat(o).concat(a)
    };
  }
  function j2(n, e, t, i) {
    return Math.max(n[t], e[t]) + Math.max(n[i], e[i]);
  }
  function o4(n, e) {
    n.top = Math.max(n.top, e.top), n.left = Math.max(n.left, e.left), n.bottom = Math.max(n.bottom, e.bottom), n.right = Math.max(n.right, e.right);
  }
  function Coe(n, e, t, i) {
    const {
      pos: r,
      box: s
    } = t, o = n.maxPadding;
    if (!Rt(r)) {
      t.size && (n[r] -= t.size);
      const h = i[t.stack] || {
        size: 0,
        count: 1
      };
      h.size = Math.max(h.size, t.horizontal ? s.height : s.width), t.size = h.size / h.count, n[r] += t.size;
    }
    s.getPadding && o4(o, s.getPadding());
    const a = Math.max(0, e.outerWidth - j2(o, n, "left", "right")), l = Math.max(0, e.outerHeight - j2(o, n, "top", "bottom")), c = a !== n.w, u = l !== n.h;
    return n.w = a, n.h = l, t.horizontal ? {
      same: c,
      other: u
    } : {
      same: u,
      other: c
    };
  }
  function Soe(n) {
    const e = n.maxPadding;
    function t(i) {
      const r = Math.max(e[i] - n[i], 0);
      return n[i] += r, r;
    }
    n.y += t("top"), n.x += t("left"), t("right"), t("bottom");
  }
  function _oe(n, e) {
    const t = e.maxPadding;
    function i(r) {
      const s = {
        left: 0,
        top: 0,
        right: 0,
        bottom: 0
      };
      return r.forEach((o) => {
        s[o] = Math.max(e[o], t[o]);
      }), s;
    }
    return i(n ? ["left", "right"] : ["top", "bottom"]);
  }
  function Hb(n, e, t, i) {
    const r = [];
    let s, o, a, l, c, u;
    for (s = 0, o = n.length, c = 0; s < o; ++s) {
      a = n[s], l = a.box, l.update(a.width || e.w, a.height || e.h, _oe(a.horizontal, e));
      const {
        same: h,
        other: d
      } = Coe(e, t, a, i);
      c |= h && r.length, u = u || d, l.fullSize || r.push(a);
    }
    return c && Hb(r, e, t, i) || u;
  }
  function zy(n, e, t, i, r) {
    n.top = t, n.left = e, n.right = e + i, n.bottom = t + r, n.width = i, n.height = r;
  }
  function z2(n, e, t, i) {
    const r = t.padding;
    let {
      x: s,
      y: o
    } = e;
    for (const a of n) {
      const l = a.box, c = i[a.stack] || {
        count: 1,
        placed: 0,
        weight: 1
      }, u = a.stackWeight / c.weight || 1;
      if (a.horizontal) {
        const h = e.w * u, d = c.size || l.height;
        tw(c.start) && (o = c.start), l.fullSize ? zy(l, r.left, o, t.outerWidth - r.right - r.left, d) : zy(l, e.left + c.placed, o, h, d), c.start = o, c.placed += h, o = l.bottom;
      } else {
        const h = e.h * u, d = c.size || l.width;
        tw(c.start) && (s = c.start), l.fullSize ? zy(l, s, r.top, d, t.outerHeight - r.bottom - r.top) : zy(l, s, e.top + c.placed, d, h), c.start = s, c.placed += h, s = l.right;
      }
    }
    e.x = s, e.y = o;
  }
  var lr = {
    addBox(n, e) {
      n.boxes || (n.boxes = []), e.fullSize = e.fullSize || !1, e.position = e.position || "top", e.weight = e.weight || 0, e._layers = e._layers || function() {
        return [{
          z: 0,
          draw(t) {
            e.draw(t);
          }
        }];
      }, n.boxes.push(e);
    },
    removeBox(n, e) {
      const t = n.boxes ? n.boxes.indexOf(e) : -1;
      t !== -1 && n.boxes.splice(t, 1);
    },
    configure(n, e, t) {
      e.fullSize = t.fullSize, e.position = t.position, e.weight = t.weight;
    },
    update(n, e, t, i) {
      if (!n)
        return;
      const r = gr(n.options.layout.padding), s = Math.max(e - r.width, 0), o = Math.max(t - r.height, 0), a = yoe(n.boxes), l = a.vertical, c = a.horizontal;
      Jt(n.boxes, (p) => {
        typeof p.beforeLayout == "function" && p.beforeLayout();
      });
      const u = l.reduce((p, m) => m.box.options && m.box.options.display === !1 ? p : p + 1, 0) || 1, h = Object.freeze({
        outerWidth: e,
        outerHeight: t,
        padding: r,
        availableWidth: s,
        availableHeight: o,
        vBoxMaxWidth: s / 2 / u,
        hBoxMaxHeight: o / 2
      }), d = Object.assign({}, r);
      o4(d, gr(i));
      const f = Object.assign({
        maxPadding: d,
        w: s,
        h: o,
        x: r.left,
        y: r.top
      }, r), g = woe(l.concat(c), h);
      Hb(a.fullSize, f, h, g), Hb(l, f, h, g), Hb(c, f, h, g) && Hb(l, f, h, g), Soe(f), z2(a.leftAndTop, f, h, g), f.x += f.w, f.y += f.h, z2(a.rightAndBottom, f, h, g), n.chartArea = {
        left: f.left,
        top: f.top,
        right: f.left + f.w,
        bottom: f.top + f.h,
        height: f.h,
        width: f.w
      }, Jt(a.chartArea, (p) => {
        const m = p.box;
        Object.assign(m, n.chartArea), m.update(f.w, f.h, {
          left: 0,
          top: 0,
          right: 0,
          bottom: 0
        });
      });
    }
  };
  class a4 {
    acquireContext(e, t) {
    }
    releaseContext(e) {
      return !1;
    }
    addEventListener(e, t, i) {
    }
    removeEventListener(e, t, i) {
    }
    getDevicePixelRatio() {
      return 1;
    }
    getMaximumSize(e, t, i, r) {
      return t = Math.max(0, t || e.width), i = i || e.height, {
        width: t,
        height: Math.max(0, r ? Math.floor(t / r) : i)
      };
    }
    isAttached(e) {
      return !0;
    }
    updateConfig(e) {
    }
  }
  class Roe extends a4 {
    acquireContext(e) {
      return e && e.getContext && e.getContext("2d") || null;
    }
    updateConfig(e) {
      e.options.animation = !1;
    }
  }
  const uS = "$chartjs", Eoe = {
    touchstart: "mousedown",
    touchmove: "mousemove",
    touchend: "mouseup",
    pointerenter: "mouseenter",
    pointerdown: "mousedown",
    pointermove: "mousemove",
    pointerup: "mouseup",
    pointerleave: "mouseout",
    pointerout: "mouseout"
  }, U2 = (n) => n === null || n === "";
  function xoe(n, e) {
    const t = n.style, i = n.getAttribute("height"), r = n.getAttribute("width");
    if (n[uS] = {
      initial: {
        height: i,
        width: r,
        style: {
          display: t.display,
          height: t.height,
          width: t.width
        }
      }
    }, t.display = t.display || "block", t.boxSizing = t.boxSizing || "border-box", U2(r)) {
      const s = M2(n, "width");
      s !== void 0 && (n.width = s);
    }
    if (U2(i))
      if (n.style.height === "")
        n.height = n.width / (e || 2);
      else {
        const s = M2(n, "height");
        s !== void 0 && (n.height = s);
      }
    return n;
  }
  const l4 = Mse ? {
    passive: !0
  } : !1;
  function Toe(n, e, t) {
    n && n.addEventListener(e, t, l4);
  }
  function Moe(n, e, t) {
    n && n.canvas && n.canvas.removeEventListener(e, t, l4);
  }
  function Aoe(n, e) {
    const t = Eoe[n.type] || n.type, {
      x: i,
      y: r
    } = cd(n, e);
    return {
      type: t,
      chart: e,
      native: n,
      x: i !== void 0 ? i : null,
      y: r !== void 0 ? r : null
    };
  }
  function g_(n, e) {
    for (const t of n)
      if (t === e || t.contains(e))
        return !0;
  }
  function Poe(n, e, t) {
    const i = n.canvas, r = new MutationObserver((s) => {
      let o = !1;
      for (const a of s)
        o = o || g_(a.addedNodes, i), o = o && !g_(a.removedNodes, i);
      o && t();
    });
    return r.observe(document, {
      childList: !0,
      subtree: !0
    }), r;
  }
  function Ioe(n, e, t) {
    const i = n.canvas, r = new MutationObserver((s) => {
      let o = !1;
      for (const a of s)
        o = o || g_(a.removedNodes, i), o = o && !g_(a.addedNodes, i);
      o && t();
    });
    return r.observe(document, {
      childList: !0,
      subtree: !0
    }), r;
  }
  const rw = /* @__PURE__ */ new Map();
  let G2 = 0;
  function c4() {
    const n = window.devicePixelRatio;
    n !== G2 && (G2 = n, rw.forEach((e, t) => {
      t.currentDevicePixelRatio !== n && e();
    }));
  }
  function Ooe(n, e) {
    rw.size || window.addEventListener("resize", c4), rw.set(n, e);
  }
  function koe(n) {
    rw.delete(n), rw.size || window.removeEventListener("resize", c4);
  }
  function Doe(n, e, t) {
    const i = n.canvas, r = i && fk(i);
    if (!r)
      return;
    const s = F8((a, l) => {
      const c = r.clientWidth;
      t(a, l), c < r.clientWidth && t();
    }, window), o = new ResizeObserver((a) => {
      const l = a[0], c = l.contentRect.width, u = l.contentRect.height;
      c === 0 && u === 0 || s(c, u);
    });
    return o.observe(r), Ooe(n, s), o;
  }
  function px(n, e, t) {
    t && t.disconnect(), e === "resize" && koe(n);
  }
  function Noe(n, e, t) {
    const i = n.canvas, r = F8((s) => {
      n.ctx !== null && t(Aoe(s, n));
    }, n);
    return Toe(i, e, r), r;
  }
  class Loe extends a4 {
    acquireContext(e, t) {
      const i = e && e.getContext && e.getContext("2d");
      return i && i.canvas === e ? (xoe(e, t), i) : null;
    }
    releaseContext(e) {
      const t = e.canvas;
      if (!t[uS])
        return !1;
      const i = t[uS].initial;
      ["height", "width"].forEach((s) => {
        const o = i[s];
        kt(o) ? t.removeAttribute(s) : t.setAttribute(s, o);
      });
      const r = i.style || {};
      return Object.keys(r).forEach((s) => {
        t.style[s] = r[s];
      }), t.width = t.width, delete t[uS], !0;
    }
    addEventListener(e, t, i) {
      this.removeEventListener(e, t);
      const r = e.$proxies || (e.$proxies = {}), o = {
        attach: Poe,
        detach: Ioe,
        resize: Doe
      }[t] || Noe;
      r[t] = o(e, t, i);
    }
    removeEventListener(e, t) {
      const i = e.$proxies || (e.$proxies = {}), r = i[t];
      if (!r)
        return;
      ({
        attach: px,
        detach: px,
        resize: px
      }[t] || Moe)(e, t, r), i[t] = void 0;
    }
    getDevicePixelRatio() {
      return window.devicePixelRatio;
    }
    getMaximumSize(e, t, i, r) {
      return Tse(e, t, i, r);
    }
    isAttached(e) {
      const t = e && fk(e);
      return !!(t && t.isConnected);
    }
  }
  function Hoe(n) {
    return !dk() || typeof OffscreenCanvas < "u" && n instanceof OffscreenCanvas ? Roe : Loe;
  }
  class go {
    constructor() {
      this.x = void 0, this.y = void 0, this.active = !1, this.options = void 0, this.$animations = void 0;
    }
    tooltipPosition(e) {
      const {
        x: t,
        y: i
      } = this.getProps(["x", "y"], e);
      return {
        x: t,
        y: i
      };
    }
    hasValue() {
      return vp(this.x) && vp(this.y);
    }
    getProps(e, t) {
      const i = this.$animations;
      if (!t || !i)
        return this;
      const r = {};
      return e.forEach((s) => {
        r[s] = i[s] && i[s].active() ? i[s]._to : this[s];
      }), r;
    }
  }
  go.defaults = {};
  go.defaultRoutes = void 0;
  function $oe(n, e) {
    const t = n.options.ticks, i = Foe(n), r = Math.min(t.maxTicksLimit || i, i), s = t.major.enabled ? Voe(e) : [], o = s.length, a = s[0], l = s[o - 1], c = [];
    if (o > r)
      return Woe(e, c, s, o / r), c;
    const u = Boe(s, e, r);
    if (o > 0) {
      let h, d;
      const f = o > 1 ? Math.round((l - a) / (o - 1)) : null;
      for (Uy(e, c, u, kt(f) ? 0 : a - f, a), h = 0, d = o - 1; h < d; h++)
        Uy(e, c, u, s[h], s[h + 1]);
      return Uy(e, c, u, l, kt(f) ? e.length : l + f), c;
    }
    return Uy(e, c, u), c;
  }
  function Foe(n) {
    const e = n.options.offset, t = n._tickSize(), i = n._length / t + (e ? 0 : 1), r = n._maxLength / t;
    return Math.floor(Math.min(i, r));
  }
  function Boe(n, e, t) {
    const i = joe(n), r = e.length / t;
    if (!i)
      return Math.max(r, 1);
    const s = Ire(i);
    for (let o = 0, a = s.length - 1; o < a; o++) {
      const l = s[o];
      if (l > r)
        return l;
    }
    return Math.max(r, 1);
  }
  function Voe(n) {
    const e = [];
    let t, i;
    for (t = 0, i = n.length; t < i; t++)
      n[t].major && e.push(t);
    return e;
  }
  function Woe(n, e, t, i) {
    let r = 0, s = t[0], o;
    for (i = Math.ceil(i), o = 0; o < n.length; o++)
      o === s && (e.push(n[o]), r++, s = t[r * i]);
  }
  function Uy(n, e, t, i, r) {
    const s = tt(i, 0), o = Math.min(tt(r, n.length), n.length);
    let a = 0, l, c, u;
    for (t = Math.ceil(t), r && (l = r - i, t = l / Math.floor(l / t)), u = s; u < 0; )
      a++, u = Math.round(s + a * t);
    for (c = Math.max(s, 0); c < o; c++)
      c === u && (e.push(n[c]), a++, u = Math.round(s + a * t));
  }
  function joe(n) {
    const e = n.length;
    let t, i;
    if (e < 2)
      return !1;
    for (i = n[0], t = 1; t < e; ++t)
      if (n[t] - n[t - 1] !== i)
        return !1;
    return i;
  }
  const zoe = (n) => n === "left" ? "right" : n === "right" ? "left" : n, Y2 = (n, e, t) => e === "top" || e === "left" ? n[e] + t : n[e] - t, K2 = (n, e) => Math.min(e || n, n);
  function q2(n, e) {
    const t = [], i = n.length / e, r = n.length;
    let s = 0;
    for (; s < r; s += i)
      t.push(n[Math.floor(s)]);
    return t;
  }
  function Uoe(n, e, t) {
    const i = n.ticks.length, r = Math.min(e, i - 1), s = n._startPixel, o = n._endPixel, a = 1e-6;
    let l = n.getPixelForTick(r), c;
    if (!(t && (i === 1 ? c = Math.max(l - s, o - l) : e === 0 ? c = (n.getPixelForTick(1) - l) / 2 : c = (l - n.getPixelForTick(r - 1)) / 2, l += r < e ? c : -c, l < s - a || l > o + a)))
      return l;
  }
  function Goe(n, e) {
    Jt(n, (t) => {
      const i = t.gc, r = i.length / 2;
      let s;
      if (r > e) {
        for (s = 0; s < r; ++s)
          delete t.data[i[s]];
        i.splice(0, r);
      }
    });
  }
  function Cm(n) {
    return n.drawTicks ? n.tickLength : 0;
  }
  function X2(n, e) {
    if (!n.display)
      return 0;
    const t = Ri(n.font, e), i = gr(n.padding);
    return (Pn(n.text) ? n.text.length : 1) * t.lineHeight + i.height;
  }
  function Yoe(n, e) {
    return sh(n, {
      scale: e,
      type: "scale"
    });
  }
  function Koe(n, e, t) {
    return sh(n, {
      tick: t,
      index: e,
      type: "tick"
    });
  }
  function qoe(n, e, t) {
    let i = ok(n);
    return (t && e !== "right" || !t && e === "right") && (i = zoe(i)), i;
  }
  function Xoe(n, e, t, i) {
    const {
      top: r,
      left: s,
      bottom: o,
      right: a,
      chart: l
    } = n, {
      chartArea: c,
      scales: u
    } = l;
    let h = 0, d, f, g;
    const p = o - r, m = a - s;
    if (n.isHorizontal()) {
      if (f = ir(i, s, a), Rt(t)) {
        const v = Object.keys(t)[0], y = t[v];
        g = u[v].getPixelForValue(y) + p - e;
      } else t === "center" ? g = (c.bottom + c.top) / 2 + p - e : g = Y2(n, t, e);
      d = a - s;
    } else {
      if (Rt(t)) {
        const v = Object.keys(t)[0], y = t[v];
        f = u[v].getPixelForValue(y) - m + e;
      } else t === "center" ? f = (c.left + c.right) / 2 - m + e : f = Y2(n, t, e);
      g = ir(i, o, r), h = t === "left" ? -si : si;
    }
    return {
      titleX: f,
      titleY: g,
      maxWidth: d,
      rotation: h
    };
  }
  class oh extends go {
    constructor(e) {
      super(), this.id = e.id, this.type = e.type, this.options = void 0, this.ctx = e.ctx, this.chart = e.chart, this.top = void 0, this.bottom = void 0, this.left = void 0, this.right = void 0, this.width = void 0, this.height = void 0, this._margins = {
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }, this.maxWidth = void 0, this.maxHeight = void 0, this.paddingTop = void 0, this.paddingBottom = void 0, this.paddingLeft = void 0, this.paddingRight = void 0, this.axis = void 0, this.labelRotation = void 0, this.min = void 0, this.max = void 0, this._range = void 0, this.ticks = [], this._gridLineItems = null, this._labelItems = null, this._labelSizes = null, this._length = 0, this._maxLength = 0, this._longestTextCache = {}, this._startPixel = void 0, this._endPixel = void 0, this._reversePixels = !1, this._userMax = void 0, this._userMin = void 0, this._suggestedMax = void 0, this._suggestedMin = void 0, this._ticksLength = 0, this._borderValue = 0, this._cache = {}, this._dataLimitsCached = !1, this.$context = void 0;
    }
    init(e) {
      this.options = e.setContext(this.getContext()), this.axis = e.axis, this._userMin = this.parse(e.min), this._userMax = this.parse(e.max), this._suggestedMin = this.parse(e.suggestedMin), this._suggestedMax = this.parse(e.suggestedMax);
    }
    parse(e, t) {
      return e;
    }
    getUserBounds() {
      let {
        _userMin: e,
        _userMax: t,
        _suggestedMin: i,
        _suggestedMax: r
      } = this;
      return e = as(e, Number.POSITIVE_INFINITY), t = as(t, Number.NEGATIVE_INFINITY), i = as(i, Number.POSITIVE_INFINITY), r = as(r, Number.NEGATIVE_INFINITY), {
        min: as(e, i),
        max: as(t, r),
        minDefined: ei(e),
        maxDefined: ei(t)
      };
    }
    getMinMax(e) {
      let {
        min: t,
        max: i,
        minDefined: r,
        maxDefined: s
      } = this.getUserBounds(), o;
      if (r && s)
        return {
          min: t,
          max: i
        };
      const a = this.getMatchingVisibleMetas();
      for (let l = 0, c = a.length; l < c; ++l)
        o = a[l].controller.getMinMax(this, e), r || (t = Math.min(t, o.min)), s || (i = Math.max(i, o.max));
      return t = s && t > i ? i : t, i = r && t > i ? t : i, {
        min: as(t, as(i, t)),
        max: as(i, as(t, i))
      };
    }
    getPadding() {
      return {
        left: this.paddingLeft || 0,
        top: this.paddingTop || 0,
        right: this.paddingRight || 0,
        bottom: this.paddingBottom || 0
      };
    }
    getTicks() {
      return this.ticks;
    }
    getLabels() {
      const e = this.chart.data;
      return this.options.labels || (this.isHorizontal() ? e.xLabels : e.yLabels) || e.labels || [];
    }
    getLabelItems(e = this.chart.chartArea) {
      return this._labelItems || (this._labelItems = this._computeLabelItems(e));
    }
    beforeLayout() {
      this._cache = {}, this._dataLimitsCached = !1;
    }
    beforeUpdate() {
      bn(this.options.beforeUpdate, [this]);
    }
    update(e, t, i) {
      const {
        beginAtZero: r,
        grace: s,
        ticks: o
      } = this.options, a = o.sampleSize;
      this.beforeUpdate(), this.maxWidth = e, this.maxHeight = t, this._margins = i = Object.assign({
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
      }, i), this.ticks = null, this._labelSizes = null, this._gridLineItems = null, this._labelItems = null, this.beforeSetDimensions(), this.setDimensions(), this.afterSetDimensions(), this._maxLength = this.isHorizontal() ? this.width + i.left + i.right : this.height + i.top + i.bottom, this._dataLimitsCached || (this.beforeDataLimits(), this.determineDataLimits(), this.afterDataLimits(), this._range = sse(this, s, r), this._dataLimitsCached = !0), this.beforeBuildTicks(), this.ticks = this.buildTicks() || [], this.afterBuildTicks();
      const l = a < this.ticks.length;
      this._convertTicksToLabels(l ? q2(this.ticks, a) : this.ticks), this.configure(), this.beforeCalculateLabelRotation(), this.calculateLabelRotation(), this.afterCalculateLabelRotation(), o.display && (o.autoSkip || o.source === "auto") && (this.ticks = $oe(this, this.ticks), this._labelSizes = null, this.afterAutoSkip()), l && this._convertTicksToLabels(this.ticks), this.beforeFit(), this.fit(), this.afterFit(), this.afterUpdate();
    }
    configure() {
      let e = this.options.reverse, t, i;
      this.isHorizontal() ? (t = this.left, i = this.right) : (t = this.top, i = this.bottom, e = !e), this._startPixel = t, this._endPixel = i, this._reversePixels = e, this._length = i - t, this._alignToPixels = this.options.alignToPixels;
    }
    afterUpdate() {
      bn(this.options.afterUpdate, [this]);
    }
    beforeSetDimensions() {
      bn(this.options.beforeSetDimensions, [this]);
    }
    setDimensions() {
      this.isHorizontal() ? (this.width = this.maxWidth, this.left = 0, this.right = this.width) : (this.height = this.maxHeight, this.top = 0, this.bottom = this.height), this.paddingLeft = 0, this.paddingTop = 0, this.paddingRight = 0, this.paddingBottom = 0;
    }
    afterSetDimensions() {
      bn(this.options.afterSetDimensions, [this]);
    }
    _callHooks(e) {
      this.chart.notifyPlugins(e, this.getContext()), bn(this.options[e], [this]);
    }
    beforeDataLimits() {
      this._callHooks("beforeDataLimits");
    }
    determineDataLimits() {
    }
    afterDataLimits() {
      this._callHooks("afterDataLimits");
    }
    beforeBuildTicks() {
      this._callHooks("beforeBuildTicks");
    }
    buildTicks() {
      return [];
    }
    afterBuildTicks() {
      this._callHooks("afterBuildTicks");
    }
    beforeTickToLabelConversion() {
      bn(this.options.beforeTickToLabelConversion, [this]);
    }
    generateTickLabels(e) {
      const t = this.options.ticks;
      let i, r, s;
      for (i = 0, r = e.length; i < r; i++)
        s = e[i], s.label = bn(t.callback, [s.value, i, e], this);
    }
    afterTickToLabelConversion() {
      bn(this.options.afterTickToLabelConversion, [this]);
    }
    beforeCalculateLabelRotation() {
      bn(this.options.beforeCalculateLabelRotation, [this]);
    }
    calculateLabelRotation() {
      const e = this.options, t = e.ticks, i = K2(this.ticks.length, e.ticks.maxTicksLimit), r = t.minRotation || 0, s = t.maxRotation;
      let o = r, a, l, c;
      if (!this._isVisible() || !t.display || r >= s || i <= 1 || !this.isHorizontal()) {
        this.labelRotation = r;
        return;
      }
      const u = this._getLabelSizes(), h = u.widest.width, d = u.highest.height, f = Hi(this.chart.width - h, 0, this.maxWidth);
      a = e.offset ? this.maxWidth / i : f / (i - 1), h + 6 > a && (a = f / (i - (e.offset ? 0.5 : 1)), l = this.maxHeight - Cm(e.grid) - t.padding - X2(e.title, this.chart.options.font), c = Math.sqrt(h * h + d * d), o = rk(Math.min(Math.asin(Hi((u.highest.height + 6) / a, -1, 1)), Math.asin(Hi(l / c, -1, 1)) - Math.asin(Hi(d / c, -1, 1)))), o = Math.max(r, Math.min(s, o))), this.labelRotation = o;
    }
    afterCalculateLabelRotation() {
      bn(this.options.afterCalculateLabelRotation, [this]);
    }
    afterAutoSkip() {
    }
    beforeFit() {
      bn(this.options.beforeFit, [this]);
    }
    fit() {
      const e = {
        width: 0,
        height: 0
      }, {
        chart: t,
        options: {
          ticks: i,
          title: r,
          grid: s
        }
      } = this, o = this._isVisible(), a = this.isHorizontal();
      if (o) {
        const l = X2(r, t.options.font);
        if (a ? (e.width = this.maxWidth, e.height = Cm(s) + l) : (e.height = this.maxHeight, e.width = Cm(s) + l), i.display && this.ticks.length) {
          const {
            first: c,
            last: u,
            widest: h,
            highest: d
          } = this._getLabelSizes(), f = i.padding * 2, g = Ko(this.labelRotation), p = Math.cos(g), m = Math.sin(g);
          if (a) {
            const v = i.mirror ? 0 : m * h.width + p * d.height;
            e.height = Math.min(this.maxHeight, e.height + v + f);
          } else {
            const v = i.mirror ? 0 : p * h.width + m * d.height;
            e.width = Math.min(this.maxWidth, e.width + v + f);
          }
          this._calculatePadding(c, u, m, p);
        }
      }
      this._handleMargins(), a ? (this.width = this._length = t.width - this._margins.left - this._margins.right, this.height = e.height) : (this.width = e.width, this.height = this._length = t.height - this._margins.top - this._margins.bottom);
    }
    _calculatePadding(e, t, i, r) {
      const {
        ticks: {
          align: s,
          padding: o
        },
        position: a
      } = this.options, l = this.labelRotation !== 0, c = a !== "top" && this.axis === "x";
      if (this.isHorizontal()) {
        const u = this.getPixelForTick(0) - this.left, h = this.right - this.getPixelForTick(this.ticks.length - 1);
        let d = 0, f = 0;
        l ? c ? (d = r * e.width, f = i * t.height) : (d = i * e.height, f = r * t.width) : s === "start" ? f = t.width : s === "end" ? d = e.width : s !== "inner" && (d = e.width / 2, f = t.width / 2), this.paddingLeft = Math.max((d - u + o) * this.width / (this.width - u), 0), this.paddingRight = Math.max((f - h + o) * this.width / (this.width - h), 0);
      } else {
        let u = t.height / 2, h = e.height / 2;
        s === "start" ? (u = 0, h = e.height) : s === "end" && (u = t.height, h = 0), this.paddingTop = u + o, this.paddingBottom = h + o;
      }
    }
    _handleMargins() {
      this._margins && (this._margins.left = Math.max(this.paddingLeft, this._margins.left), this._margins.top = Math.max(this.paddingTop, this._margins.top), this._margins.right = Math.max(this.paddingRight, this._margins.right), this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom));
    }
    afterFit() {
      bn(this.options.afterFit, [this]);
    }
    isHorizontal() {
      const {
        axis: e,
        position: t
      } = this.options;
      return t === "top" || t === "bottom" || e === "x";
    }
    isFullSize() {
      return this.options.fullSize;
    }
    _convertTicksToLabels(e) {
      this.beforeTickToLabelConversion(), this.generateTickLabels(e);
      let t, i;
      for (t = 0, i = e.length; t < i; t++)
        kt(e[t].label) && (e.splice(t, 1), i--, t--);
      this.afterTickToLabelConversion();
    }
    _getLabelSizes() {
      let e = this._labelSizes;
      if (!e) {
        const t = this.options.ticks.sampleSize;
        let i = this.ticks;
        t < i.length && (i = q2(i, t)), this._labelSizes = e = this._computeLabelSizes(i, i.length, this.options.ticks.maxTicksLimit);
      }
      return e;
    }
    _computeLabelSizes(e, t, i) {
      const {
        ctx: r,
        _longestTextCache: s
      } = this, o = [], a = [], l = Math.floor(t / K2(t, i));
      let c = 0, u = 0, h, d, f, g, p, m, v, y, w, R, E;
      for (h = 0; h < t; h += l) {
        if (g = e[h].label, p = this._resolveTickFontOptions(h), r.font = m = p.string, v = s[m] = s[m] || {
          data: {},
          gc: []
        }, y = p.lineHeight, w = R = 0, !kt(g) && !Pn(g))
          w = h_(r, v.data, v.gc, w, g), R = y;
        else if (Pn(g))
          for (d = 0, f = g.length; d < f; ++d)
            E = g[d], !kt(E) && !Pn(E) && (w = h_(r, v.data, v.gc, w, E), R += y);
        o.push(w), a.push(R), c = Math.max(w, c), u = Math.max(R, u);
      }
      Goe(s, t);
      const C = o.indexOf(c), T = a.indexOf(u), P = (x) => ({
        width: o[x] || 0,
        height: a[x] || 0
      });
      return {
        first: P(0),
        last: P(t - 1),
        widest: P(C),
        highest: P(T),
        widths: o,
        heights: a
      };
    }
    getLabelForValue(e) {
      return e;
    }
    getPixelForValue(e, t) {
      return NaN;
    }
    getValueForPixel(e) {
    }
    getPixelForTick(e) {
      const t = this.ticks;
      return e < 0 || e > t.length - 1 ? null : this.getPixelForValue(t[e].value);
    }
    getPixelForDecimal(e) {
      this._reversePixels && (e = 1 - e);
      const t = this._startPixel + e * this._length;
      return Dre(this._alignToPixels ? mh(this.chart, t, 0) : t);
    }
    getDecimalForPixel(e) {
      const t = (e - this._startPixel) / this._length;
      return this._reversePixels ? 1 - t : t;
    }
    getBasePixel() {
      return this.getPixelForValue(this.getBaseValue());
    }
    getBaseValue() {
      const {
        min: e,
        max: t
      } = this;
      return e < 0 && t < 0 ? t : e > 0 && t > 0 ? e : 0;
    }
    getContext(e) {
      const t = this.ticks || [];
      if (e >= 0 && e < t.length) {
        const i = t[e];
        return i.$context || (i.$context = Koe(this.getContext(), e, i));
      }
      return this.$context || (this.$context = Yoe(this.chart.getContext(), this));
    }
    _tickSize() {
      const e = this.options.ticks, t = Ko(this.labelRotation), i = Math.abs(Math.cos(t)), r = Math.abs(Math.sin(t)), s = this._getLabelSizes(), o = e.autoSkipPadding || 0, a = s ? s.widest.width + o : 0, l = s ? s.highest.height + o : 0;
      return this.isHorizontal() ? l * i > a * r ? a / i : l / r : l * r < a * i ? l / i : a / r;
    }
    _isVisible() {
      const e = this.options.display;
      return e !== "auto" ? !!e : this.getMatchingVisibleMetas().length > 0;
    }
    _computeGridLineItems(e) {
      const t = this.axis, i = this.chart, r = this.options, {
        grid: s,
        position: o,
        border: a
      } = r, l = s.offset, c = this.isHorizontal(), h = this.ticks.length + (l ? 1 : 0), d = Cm(s), f = [], g = a.setContext(this.getContext()), p = g.display ? g.width : 0, m = p / 2, v = function(O) {
        return mh(i, O, p);
      };
      let y, w, R, E, C, T, P, x, A, D, B, F;
      if (o === "top")
        y = v(this.bottom), T = this.bottom - d, x = y - m, D = v(e.top) + m, F = e.bottom;
      else if (o === "bottom")
        y = v(this.top), D = e.top, F = v(e.bottom) - m, T = y + m, x = this.top + d;
      else if (o === "left")
        y = v(this.right), C = this.right - d, P = y - m, A = v(e.left) + m, B = e.right;
      else if (o === "right")
        y = v(this.left), A = e.left, B = v(e.right) - m, C = y + m, P = this.left + d;
      else if (t === "x") {
        if (o === "center")
          y = v((e.top + e.bottom) / 2 + 0.5);
        else if (Rt(o)) {
          const O = Object.keys(o)[0], V = o[O];
          y = v(this.chart.scales[O].getPixelForValue(V));
        }
        D = e.top, F = e.bottom, T = y + m, x = T + d;
      } else if (t === "y") {
        if (o === "center")
          y = v((e.left + e.right) / 2);
        else if (Rt(o)) {
          const O = Object.keys(o)[0], V = o[O];
          y = v(this.chart.scales[O].getPixelForValue(V));
        }
        C = y - m, P = C - d, A = e.left, B = e.right;
      }
      const W = tt(r.ticks.maxTicksLimit, h), N = Math.max(1, Math.ceil(h / W));
      for (w = 0; w < h; w += N) {
        const O = this.getContext(w), V = s.setContext(O), G = a.setContext(O), U = V.lineWidth, se = V.color, b = G.dash || [], S = G.dashOffset, _ = V.tickWidth, I = V.tickColor, H = V.tickBorderDash || [], M = V.tickBorderDashOffset;
        R = Uoe(this, w, l), R !== void 0 && (E = mh(i, R, U), c ? C = P = A = B = E : T = x = D = F = E, f.push({
          tx1: C,
          ty1: T,
          tx2: P,
          ty2: x,
          x1: A,
          y1: D,
          x2: B,
          y2: F,
          width: U,
          color: se,
          borderDash: b,
          borderDashOffset: S,
          tickWidth: _,
          tickColor: I,
          tickBorderDash: H,
          tickBorderDashOffset: M
        }));
      }
      return this._ticksLength = h, this._borderValue = y, f;
    }
    _computeLabelItems(e) {
      const t = this.axis, i = this.options, {
        position: r,
        ticks: s
      } = i, o = this.isHorizontal(), a = this.ticks, {
        align: l,
        crossAlign: c,
        padding: u,
        mirror: h
      } = s, d = Cm(i.grid), f = d + u, g = h ? -u : f, p = -Ko(this.labelRotation), m = [];
      let v, y, w, R, E, C, T, P, x, A, D, B, F = "middle";
      if (r === "top")
        C = this.bottom - g, T = this._getXAxisLabelAlignment();
      else if (r === "bottom")
        C = this.top + g, T = this._getXAxisLabelAlignment();
      else if (r === "left") {
        const N = this._getYAxisLabelAlignment(d);
        T = N.textAlign, E = N.x;
      } else if (r === "right") {
        const N = this._getYAxisLabelAlignment(d);
        T = N.textAlign, E = N.x;
      } else if (t === "x") {
        if (r === "center")
          C = (e.top + e.bottom) / 2 + f;
        else if (Rt(r)) {
          const N = Object.keys(r)[0], O = r[N];
          C = this.chart.scales[N].getPixelForValue(O) + f;
        }
        T = this._getXAxisLabelAlignment();
      } else if (t === "y") {
        if (r === "center")
          E = (e.left + e.right) / 2 - f;
        else if (Rt(r)) {
          const N = Object.keys(r)[0], O = r[N];
          E = this.chart.scales[N].getPixelForValue(O);
        }
        T = this._getYAxisLabelAlignment(d).textAlign;
      }
      t === "y" && (l === "start" ? F = "top" : l === "end" && (F = "bottom"));
      const W = this._getLabelSizes();
      for (v = 0, y = a.length; v < y; ++v) {
        w = a[v], R = w.label;
        const N = s.setContext(this.getContext(v));
        P = this.getPixelForTick(v) + s.labelOffset, x = this._resolveTickFontOptions(v), A = x.lineHeight, D = Pn(R) ? R.length : 1;
        const O = D / 2, V = N.color, G = N.textStrokeColor, U = N.textStrokeWidth;
        let se = T;
        o ? (E = P, T === "inner" && (v === y - 1 ? se = this.options.reverse ? "left" : "right" : v === 0 ? se = this.options.reverse ? "right" : "left" : se = "center"), r === "top" ? c === "near" || p !== 0 ? B = -D * A + A / 2 : c === "center" ? B = -W.highest.height / 2 - O * A + A : B = -W.highest.height + A / 2 : c === "near" || p !== 0 ? B = A / 2 : c === "center" ? B = W.highest.height / 2 - O * A : B = W.highest.height - D * A, h && (B *= -1), p !== 0 && !N.showLabelBackdrop && (E += A / 2 * Math.sin(p))) : (C = P, B = (1 - D) * A / 2);
        let b;
        if (N.showLabelBackdrop) {
          const S = gr(N.backdropPadding), _ = W.heights[v], I = W.widths[v];
          let H = B - S.top, M = 0 - S.left;
          switch (F) {
            case "middle":
              H -= _ / 2;
              break;
            case "bottom":
              H -= _;
              break;
          }
          switch (T) {
            case "center":
              M -= I / 2;
              break;
            case "right":
              M -= I;
              break;
            case "inner":
              v === y - 1 ? M -= I : v > 0 && (M -= I / 2);
              break;
          }
          b = {
            left: M,
            top: H,
            width: I + S.width,
            height: _ + S.height,
            color: N.backdropColor
          };
        }
        m.push({
          label: R,
          font: x,
          textOffset: B,
          options: {
            rotation: p,
            color: V,
            strokeColor: G,
            strokeWidth: U,
            textAlign: se,
            textBaseline: F,
            translation: [E, C],
            backdrop: b
          }
        });
      }
      return m;
    }
    _getXAxisLabelAlignment() {
      const {
        position: e,
        ticks: t
      } = this.options;
      if (-Ko(this.labelRotation))
        return e === "top" ? "left" : "right";
      let r = "center";
      return t.align === "start" ? r = "left" : t.align === "end" ? r = "right" : t.align === "inner" && (r = "inner"), r;
    }
    _getYAxisLabelAlignment(e) {
      const {
        position: t,
        ticks: {
          crossAlign: i,
          mirror: r,
          padding: s
        }
      } = this.options, o = this._getLabelSizes(), a = e + s, l = o.widest.width;
      let c, u;
      return t === "left" ? r ? (u = this.right + s, i === "near" ? c = "left" : i === "center" ? (c = "center", u += l / 2) : (c = "right", u += l)) : (u = this.right - a, i === "near" ? c = "right" : i === "center" ? (c = "center", u -= l / 2) : (c = "left", u = this.left)) : t === "right" ? r ? (u = this.left + s, i === "near" ? c = "right" : i === "center" ? (c = "center", u -= l / 2) : (c = "left", u -= l)) : (u = this.left + a, i === "near" ? c = "left" : i === "center" ? (c = "center", u += l / 2) : (c = "right", u = this.right)) : c = "right", {
        textAlign: c,
        x: u
      };
    }
    _computeLabelArea() {
      if (this.options.ticks.mirror)
        return;
      const e = this.chart, t = this.options.position;
      if (t === "left" || t === "right")
        return {
          top: 0,
          left: this.left,
          bottom: e.height,
          right: this.right
        };
      if (t === "top" || t === "bottom")
        return {
          top: this.top,
          left: 0,
          bottom: this.bottom,
          right: e.width
        };
    }
    drawBackground() {
      const {
        ctx: e,
        options: {
          backgroundColor: t
        },
        left: i,
        top: r,
        width: s,
        height: o
      } = this;
      t && (e.save(), e.fillStyle = t, e.fillRect(i, r, s, o), e.restore());
    }
    getLineWidthForValue(e) {
      const t = this.options.grid;
      if (!this._isVisible() || !t.display)
        return 0;
      const r = this.ticks.findIndex((s) => s.value === e);
      return r >= 0 ? t.setContext(this.getContext(r)).lineWidth : 0;
    }
    drawGrid(e) {
      const t = this.options.grid, i = this.ctx, r = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(e));
      let s, o;
      const a = (l, c, u) => {
        !u.width || !u.color || (i.save(), i.lineWidth = u.width, i.strokeStyle = u.color, i.setLineDash(u.borderDash || []), i.lineDashOffset = u.borderDashOffset, i.beginPath(), i.moveTo(l.x, l.y), i.lineTo(c.x, c.y), i.stroke(), i.restore());
      };
      if (t.display)
        for (s = 0, o = r.length; s < o; ++s) {
          const l = r[s];
          t.drawOnChartArea && a({
            x: l.x1,
            y: l.y1
          }, {
            x: l.x2,
            y: l.y2
          }, l), t.drawTicks && a({
            x: l.tx1,
            y: l.ty1
          }, {
            x: l.tx2,
            y: l.ty2
          }, {
            color: l.tickColor,
            width: l.tickWidth,
            borderDash: l.tickBorderDash,
            borderDashOffset: l.tickBorderDashOffset
          });
        }
    }
    drawBorder() {
      const {
        chart: e,
        ctx: t,
        options: {
          border: i,
          grid: r
        }
      } = this, s = i.setContext(this.getContext()), o = i.display ? s.width : 0;
      if (!o)
        return;
      const a = r.setContext(this.getContext(0)).lineWidth, l = this._borderValue;
      let c, u, h, d;
      this.isHorizontal() ? (c = mh(e, this.left, o) - o / 2, u = mh(e, this.right, a) + a / 2, h = d = l) : (h = mh(e, this.top, o) - o / 2, d = mh(e, this.bottom, a) + a / 2, c = u = l), t.save(), t.lineWidth = s.width, t.strokeStyle = s.color, t.beginPath(), t.moveTo(c, h), t.lineTo(u, d), t.stroke(), t.restore();
    }
    drawLabels(e) {
      if (!this.options.ticks.display)
        return;
      const i = this.ctx, r = this._computeLabelArea();
      r && Dd(i, r);
      const s = this.getLabelItems(e);
      for (const o of s) {
        const a = o.options, l = o.font, c = o.label, u = o.textOffset;
        Jd(i, c, 0, u, l, a);
      }
      r && Nd(i);
    }
    drawTitle() {
      const {
        ctx: e,
        options: {
          position: t,
          title: i,
          reverse: r
        }
      } = this;
      if (!i.display)
        return;
      const s = Ri(i.font), o = gr(i.padding), a = i.align;
      let l = s.lineHeight / 2;
      t === "bottom" || t === "center" || Rt(t) ? (l += o.bottom, Pn(i.text) && (l += s.lineHeight * (i.text.length - 1))) : l += o.top;
      const {
        titleX: c,
        titleY: u,
        maxWidth: h,
        rotation: d
      } = Xoe(this, l, t, a);
      Jd(e, i.text, 0, 0, s, {
        color: i.color,
        maxWidth: h,
        rotation: d,
        textAlign: qoe(a, t, r),
        textBaseline: "middle",
        translation: [c, u]
      });
    }
    draw(e) {
      this._isVisible() && (this.drawBackground(), this.drawGrid(e), this.drawBorder(), this.drawTitle(), this.drawLabels(e));
    }
    _layers() {
      const e = this.options, t = e.ticks && e.ticks.z || 0, i = tt(e.grid && e.grid.z, -1), r = tt(e.border && e.border.z, 0);
      return !this._isVisible() || this.draw !== oh.prototype.draw ? [{
        z: t,
        draw: (s) => {
          this.draw(s);
        }
      }] : [{
        z: i,
        draw: (s) => {
          this.drawBackground(), this.drawGrid(s), this.drawTitle();
        }
      }, {
        z: r,
        draw: () => {
          this.drawBorder();
        }
      }, {
        z: t,
        draw: (s) => {
          this.drawLabels(s);
        }
      }];
    }
    getMatchingVisibleMetas(e) {
      const t = this.chart.getSortedVisibleDatasetMetas(), i = this.axis + "AxisID", r = [];
      let s, o;
      for (s = 0, o = t.length; s < o; ++s) {
        const a = t[s];
        a[i] === this.id && (!e || a.type === e) && r.push(a);
      }
      return r;
    }
    _resolveTickFontOptions(e) {
      const t = this.options.ticks.setContext(this.getContext(e));
      return Ri(t.font);
    }
    _maxDigits() {
      const e = this._resolveTickFontOptions(0).lineHeight;
      return (this.isHorizontal() ? this.width : this.height) / e;
    }
  }
  class Gy {
    constructor(e, t, i) {
      this.type = e, this.scope = t, this.override = i, this.items = /* @__PURE__ */ Object.create(null);
    }
    isForType(e) {
      return Object.prototype.isPrototypeOf.call(this.type.prototype, e.prototype);
    }
    register(e) {
      const t = Object.getPrototypeOf(e);
      let i;
      Joe(t) && (i = this.register(t));
      const r = this.items, s = e.id, o = this.scope + "." + s;
      if (!s)
        throw new Error("class does not have id: " + e);
      return s in r || (r[s] = e, Zoe(e, o, i), this.override && On.override(e.id, e.overrides)), o;
    }
    get(e) {
      return this.items[e];
    }
    unregister(e) {
      const t = this.items, i = e.id, r = this.scope;
      i in t && delete t[i], r && i in On[r] && (delete On[r][i], this.override && delete Qd[i]);
    }
  }
  function Zoe(n, e, t) {
    const i = _s(/* @__PURE__ */ Object.create(null), [t ? On.get(t) : {}, On.get(e), n.defaults]);
    On.set(e, i), n.defaultRoutes && Qoe(e, n.defaultRoutes), n.descriptors && On.describe(e, n.descriptors);
  }
  function Qoe(n, e) {
    Object.keys(e).forEach((t) => {
      const i = t.split("."), r = i.pop(), s = [n].concat(i).join("."), o = e[t].split("."), a = o.pop(), l = o.join(".");
      On.route(s, r, l, a);
    });
  }
  function Joe(n) {
    return "id" in n && "defaults" in n;
  }
  class eae {
    constructor() {
      this.controllers = new Gy(fo, "datasets", !0), this.elements = new Gy(go, "elements"), this.plugins = new Gy(Object, "plugins"), this.scales = new Gy(oh, "scales"), this._typedRegistries = [this.controllers, this.scales, this.elements];
    }
    add(...e) {
      this._each("register", e);
    }
    remove(...e) {
      this._each("unregister", e);
    }
    addControllers(...e) {
      this._each("register", e, this.controllers);
    }
    addElements(...e) {
      this._each("register", e, this.elements);
    }
    addPlugins(...e) {
      this._each("register", e, this.plugins);
    }
    addScales(...e) {
      this._each("register", e, this.scales);
    }
    getController(e) {
      return this._get(e, this.controllers, "controller");
    }
    getElement(e) {
      return this._get(e, this.elements, "element");
    }
    getPlugin(e) {
      return this._get(e, this.plugins, "plugin");
    }
    getScale(e) {
      return this._get(e, this.scales, "scale");
    }
    removeControllers(...e) {
      this._each("unregister", e, this.controllers);
    }
    removeElements(...e) {
      this._each("unregister", e, this.elements);
    }
    removePlugins(...e) {
      this._each("unregister", e, this.plugins);
    }
    removeScales(...e) {
      this._each("unregister", e, this.scales);
    }
    _each(e, t, i) {
      [...t].forEach((r) => {
        const s = i || this._getRegistryForType(r);
        i || s.isForType(r) || s === this.plugins && r.id ? this._exec(e, s, r) : Jt(r, (o) => {
          const a = i || this._getRegistryForType(o);
          this._exec(e, a, o);
        });
      });
    }
    _exec(e, t, i) {
      const r = ik(e);
      bn(i["before" + r], [], i), t[e](i), bn(i["after" + r], [], i);
    }
    _getRegistryForType(e) {
      for (let t = 0; t < this._typedRegistries.length; t++) {
        const i = this._typedRegistries[t];
        if (i.isForType(e))
          return i;
      }
      return this.plugins;
    }
    _get(e, t, i) {
      const r = t.get(e);
      if (r === void 0)
        throw new Error('"' + e + '" is not a registered ' + i + ".");
      return r;
    }
  }
  var xr = /* @__PURE__ */ new eae();
  class tae {
    constructor() {
      this._init = [];
    }
    notify(e, t, i, r) {
      t === "beforeInit" && (this._init = this._createDescriptors(e, !0), this._notify(this._init, e, "install"));
      const s = r ? this._descriptors(e).filter(r) : this._descriptors(e), o = this._notify(s, e, t, i);
      return t === "afterDestroy" && (this._notify(s, e, "stop"), this._notify(this._init, e, "uninstall")), o;
    }
    _notify(e, t, i, r) {
      r = r || {};
      for (const s of e) {
        const o = s.plugin, a = o[i], l = [t, r, s.options];
        if (bn(a, l, o) === !1 && r.cancelable)
          return !1;
      }
      return !0;
    }
    invalidate() {
      kt(this._cache) || (this._oldCache = this._cache, this._cache = void 0);
    }
    _descriptors(e) {
      if (this._cache)
        return this._cache;
      const t = this._cache = this._createDescriptors(e);
      return this._notifyStateChanges(e), t;
    }
    _createDescriptors(e, t) {
      const i = e && e.config, r = tt(i.options && i.options.plugins, {}), s = nae(i);
      return r === !1 && !t ? [] : rae(e, s, r, t);
    }
    _notifyStateChanges(e) {
      const t = this._oldCache || [], i = this._cache, r = (s, o) => s.filter((a) => !o.some((l) => a.plugin.id === l.plugin.id));
      this._notify(r(t, i), e, "stop"), this._notify(r(i, t), e, "start");
    }
  }
  function nae(n) {
    const e = {}, t = [], i = Object.keys(xr.plugins.items);
    for (let s = 0; s < i.length; s++)
      t.push(xr.getPlugin(i[s]));
    const r = n.plugins || [];
    for (let s = 0; s < r.length; s++) {
      const o = r[s];
      t.indexOf(o) === -1 && (t.push(o), e[o.id] = !0);
    }
    return {
      plugins: t,
      localIds: e
    };
  }
  function iae(n, e) {
    return !e && n === !1 ? null : n === !0 ? {} : n;
  }
  function rae(n, {
    plugins: e,
    localIds: t
  }, i, r) {
    const s = [], o = n.getContext();
    for (const a of e) {
      const l = a.id, c = iae(i[l], r);
      c !== null && s.push({
        plugin: a,
        options: sae(n.config, {
          plugin: a,
          local: t[l]
        }, c, o)
      });
    }
    return s;
  }
  function sae(n, {
    plugin: e,
    local: t
  }, i, r) {
    const s = n.pluginScopeKeys(e), o = n.getOptionScopes(i, s);
    return t && e.defaults && o.push(e.defaults), n.createResolver(o, r, [""], {
      scriptable: !1,
      indexable: !1,
      allKeys: !0
    });
  }
  function tP(n, e) {
    const t = On.datasets[n] || {};
    return ((e.datasets || {})[n] || {}).indexAxis || e.indexAxis || t.indexAxis || "x";
  }
  function oae(n, e) {
    let t = n;
    return n === "_index_" ? t = e : n === "_value_" && (t = e === "x" ? "y" : "x"), t;
  }
  function aae(n, e) {
    return n === e ? "_index_" : "_value_";
  }
  function Z2(n) {
    if (n === "x" || n === "y" || n === "r")
      return n;
  }
  function lae(n) {
    if (n === "top" || n === "bottom")
      return "x";
    if (n === "left" || n === "right")
      return "y";
  }
  function nP(n, ...e) {
    if (Z2(n))
      return n;
    for (const t of e) {
      const i = t.axis || lae(t.position) || n.length > 1 && Z2(n[0].toLowerCase());
      if (i)
        return i;
    }
    throw new Error(`Cannot determine type of '${n}' axis. Please provide 'axis' or 'position' option.`);
  }
  function Q2(n, e, t) {
    if (t[e + "AxisID"] === n)
      return {
        axis: e
      };
  }
  function cae(n, e) {
    if (e.data && e.data.datasets) {
      const t = e.data.datasets.filter((i) => i.xAxisID === n || i.yAxisID === n);
      if (t.length)
        return Q2(n, "x", t[0]) || Q2(n, "y", t[0]);
    }
    return {};
  }
  function uae(n, e) {
    const t = Qd[n.type] || {
      scales: {}
    }, i = e.scales || {}, r = tP(n.type, e), s = /* @__PURE__ */ Object.create(null);
    return Object.keys(i).forEach((o) => {
      const a = i[o];
      if (!Rt(a))
        return console.error(`Invalid scale configuration for scale: ${o}`);
      if (a._proxy)
        return console.warn(`Ignoring resolver passed as options for scale: ${o}`);
      const l = nP(o, a, cae(o, n), On.scales[a.type]), c = aae(l, r), u = t.scales || {};
      s[o] = uv(/* @__PURE__ */ Object.create(null), [{
        axis: l
      }, a, u[l], u[c]]);
    }), n.data.datasets.forEach((o) => {
      const a = o.type || n.type, l = o.indexAxis || tP(a, e), u = (Qd[a] || {}).scales || {};
      Object.keys(u).forEach((h) => {
        const d = oae(h, l), f = o[d + "AxisID"] || d;
        s[f] = s[f] || /* @__PURE__ */ Object.create(null), uv(s[f], [{
          axis: d
        }, i[f], u[h]]);
      });
    }), Object.keys(s).forEach((o) => {
      const a = s[o];
      uv(a, [On.scales[a.type], On.scale]);
    }), s;
  }
  function u4(n) {
    const e = n.options || (n.options = {});
    e.plugins = tt(e.plugins, {}), e.scales = uae(n, e);
  }
  function h4(n) {
    return n = n || {}, n.datasets = n.datasets || [], n.labels = n.labels || [], n;
  }
  function hae(n) {
    return n = n || {}, n.data = h4(n.data), u4(n), n;
  }
  const J2 = /* @__PURE__ */ new Map(), d4 = /* @__PURE__ */ new Set();
  function Yy(n, e) {
    let t = J2.get(n);
    return t || (t = e(), J2.set(n, t), d4.add(t)), t;
  }
  const Sm = (n, e, t) => {
    const i = zu(e, t);
    i !== void 0 && n.add(i);
  };
  class dae {
    constructor(e) {
      this._config = hae(e), this._scopeCache = /* @__PURE__ */ new Map(), this._resolverCache = /* @__PURE__ */ new Map();
    }
    get platform() {
      return this._config.platform;
    }
    get type() {
      return this._config.type;
    }
    set type(e) {
      this._config.type = e;
    }
    get data() {
      return this._config.data;
    }
    set data(e) {
      this._config.data = h4(e);
    }
    get options() {
      return this._config.options;
    }
    set options(e) {
      this._config.options = e;
    }
    get plugins() {
      return this._config.plugins;
    }
    update() {
      const e = this._config;
      this.clearCache(), u4(e);
    }
    clearCache() {
      this._scopeCache.clear(), this._resolverCache.clear();
    }
    datasetScopeKeys(e) {
      return Yy(e, () => [[`datasets.${e}`, ""]]);
    }
    datasetAnimationScopeKeys(e, t) {
      return Yy(`${e}.transition.${t}`, () => [[`datasets.${e}.transitions.${t}`, `transitions.${t}`], [`datasets.${e}`, ""]]);
    }
    datasetElementScopeKeys(e, t) {
      return Yy(`${e}-${t}`, () => [[`datasets.${e}.elements.${t}`, `datasets.${e}`, `elements.${t}`, ""]]);
    }
    pluginScopeKeys(e) {
      const t = e.id, i = this.type;
      return Yy(`${i}-plugin-${t}`, () => [[`plugins.${t}`, ...e.additionalOptionScopes || []]]);
    }
    _cachedScopes(e, t) {
      const i = this._scopeCache;
      let r = i.get(e);
      return (!r || t) && (r = /* @__PURE__ */ new Map(), i.set(e, r)), r;
    }
    getOptionScopes(e, t, i) {
      const {
        options: r,
        type: s
      } = this, o = this._cachedScopes(e, i), a = o.get(t);
      if (a)
        return a;
      const l = /* @__PURE__ */ new Set();
      t.forEach((u) => {
        e && (l.add(e), u.forEach((h) => Sm(l, e, h))), u.forEach((h) => Sm(l, r, h)), u.forEach((h) => Sm(l, Qd[s] || {}, h)), u.forEach((h) => Sm(l, On, h)), u.forEach((h) => Sm(l, eP, h));
      });
      const c = Array.from(l);
      return c.length === 0 && c.push(/* @__PURE__ */ Object.create(null)), d4.has(t) && o.set(t, c), c;
    }
    chartOptionScopes() {
      const {
        options: e,
        type: t
      } = this;
      return [e, Qd[t] || {}, On.datasets[t] || {}, {
        type: t
      }, On, eP];
    }
    resolveNamedOptions(e, t, i, r = [""]) {
      const s = {
        $shared: !0
      }, {
        resolver: o,
        subPrefixes: a
      } = eF(this._resolverCache, e, r);
      let l = o;
      if (gae(o, t)) {
        s.$shared = !1, i = Uu(i) ? i() : i;
        const c = this.createResolver(e, i, a);
        l = wp(o, i, c);
      }
      for (const c of t)
        s[c] = l[c];
      return s;
    }
    createResolver(e, t, i = [""], r) {
      const {
        resolver: s
      } = eF(this._resolverCache, e, i);
      return Rt(t) ? wp(s, t, void 0, r) : s;
    }
  }
  function eF(n, e, t) {
    let i = n.get(e);
    i || (i = /* @__PURE__ */ new Map(), n.set(e, i));
    const r = t.join();
    let s = i.get(r);
    return s || (s = {
      resolver: ck(e, t),
      subPrefixes: t.filter((a) => !a.toLowerCase().includes("hover"))
    }, i.set(r, s)), s;
  }
  const fae = (n) => Rt(n) && Object.getOwnPropertyNames(n).some((e) => Uu(n[e]));
  function gae(n, e) {
    const {
      isScriptable: t,
      isIndexable: i
    } = U8(n);
    for (const r of e) {
      const s = t(r), o = i(r), a = (o || s) && n[r];
      if (s && (Uu(a) || fae(a)) || o && Pn(a))
        return !0;
    }
    return !1;
  }
  var pae = "4.4.6";
  const mae = ["top", "bottom", "left", "right", "chartArea"];
  function tF(n, e) {
    return n === "top" || n === "bottom" || mae.indexOf(n) === -1 && e === "x";
  }
  function nF(n, e) {
    return function(t, i) {
      return t[n] === i[n] ? t[e] - i[e] : t[n] - i[n];
    };
  }
  function iF(n) {
    const e = n.chart, t = e.options.animation;
    e.notifyPlugins("afterRender"), bn(t && t.onComplete, [n], e);
  }
  function bae(n) {
    const e = n.chart, t = e.options.animation;
    bn(t && t.onProgress, [n], e);
  }
  function f4(n) {
    return dk() && typeof n == "string" ? n = document.getElementById(n) : n && n.length && (n = n[0]), n && n.canvas && (n = n.canvas), n;
  }
  const p_ = {}, g4 = (n) => {
    const e = f4(n);
    return Object.values(p_).filter((t) => t.canvas === e).pop();
  };
  function vae(n, e, t) {
    const i = Object.keys(n);
    for (const r of i) {
      const s = +r;
      if (s >= e) {
        const o = n[r];
        delete n[r], (t > 0 || s > e) && (n[s + t] = o);
      }
    }
  }
  function wae(n, e, t, i) {
    return !t || n.type === "mouseout" ? null : i ? e : n;
  }
  function Ky(n, e, t) {
    return n.options.clip ? n[t] : e[t];
  }
  function yae(n, e) {
    const {
      xScale: t,
      yScale: i
    } = n;
    return t && i ? {
      left: Ky(t, e, "left"),
      right: Ky(t, e, "right"),
      top: Ky(i, e, "top"),
      bottom: Ky(i, e, "bottom")
    } : e;
  }
  class Rs {
    static register(...e) {
      xr.add(...e), rF();
    }
    static unregister(...e) {
      xr.remove(...e), rF();
    }
    constructor(e, t) {
      const i = this.config = new dae(t), r = f4(e), s = g4(r);
      if (s)
        throw new Error("Canvas is already in use. Chart with ID '" + s.id + "' must be destroyed before the canvas with ID '" + s.canvas.id + "' can be reused.");
      const o = i.createResolver(i.chartOptionScopes(), this.getContext());
      this.platform = new (i.platform || Hoe(r))(), this.platform.updateConfig(i);
      const a = this.platform.acquireContext(r, o.aspectRatio), l = a && a.canvas, c = l && l.height, u = l && l.width;
      if (this.id = Sre(), this.ctx = a, this.canvas = l, this.width = u, this.height = c, this._options = o, this._aspectRatio = this.aspectRatio, this._layers = [], this._metasets = [], this._stacks = void 0, this.boxes = [], this.currentDevicePixelRatio = void 0, this.chartArea = void 0, this._active = [], this._lastEvent = void 0, this._listeners = {}, this._responsiveListeners = void 0, this._sortedMetasets = [], this.scales = {}, this._plugins = new tae(), this.$proxies = {}, this._hiddenIndices = {}, this.attached = !1, this._animationsDisabled = void 0, this.$context = void 0, this._doResize = $re((h) => this.update(h), o.resizeDelay || 0), this._dataChanges = [], p_[this.id] = this, !a || !l) {
        console.error("Failed to create chart: can't acquire context from the given item");
        return;
      }
      Wl.listen(this, "complete", iF), Wl.listen(this, "progress", bae), this._initialize(), this.attached && this.update();
    }
    get aspectRatio() {
      const {
        options: {
          aspectRatio: e,
          maintainAspectRatio: t
        },
        width: i,
        height: r,
        _aspectRatio: s
      } = this;
      return kt(e) ? t && s ? s : r ? i / r : null : e;
    }
    get data() {
      return this.config.data;
    }
    set data(e) {
      this.config.data = e;
    }
    get options() {
      return this._options;
    }
    set options(e) {
      this.config.options = e;
    }
    get registry() {
      return xr;
    }
    _initialize() {
      return this.notifyPlugins("beforeInit"), this.options.responsive ? this.resize() : T2(this, this.options.devicePixelRatio), this.bindEvents(), this.notifyPlugins("afterInit"), this;
    }
    clear() {
      return R2(this.canvas, this.ctx), this;
    }
    stop() {
      return Wl.stop(this), this;
    }
    resize(e, t) {
      Wl.running(this) ? this._resizeBeforeDraw = {
        width: e,
        height: t
      } : this._resize(e, t);
    }
    _resize(e, t) {
      const i = this.options, r = this.canvas, s = i.maintainAspectRatio && this.aspectRatio, o = this.platform.getMaximumSize(r, e, t, s), a = i.devicePixelRatio || this.platform.getDevicePixelRatio(), l = this.width ? "resize" : "attach";
      this.width = o.width, this.height = o.height, this._aspectRatio = this.aspectRatio, T2(this, a, !0) && (this.notifyPlugins("resize", {
        size: o
      }), bn(i.onResize, [this, o], this), this.attached && this._doResize(l) && this.render());
    }
    ensureScalesHaveIDs() {
      const t = this.options.scales || {};
      Jt(t, (i, r) => {
        i.id = r;
      });
    }
    buildOrUpdateScales() {
      const e = this.options, t = e.scales, i = this.scales, r = Object.keys(i).reduce((o, a) => (o[a] = !1, o), {});
      let s = [];
      t && (s = s.concat(Object.keys(t).map((o) => {
        const a = t[o], l = nP(o, a), c = l === "r", u = l === "x";
        return {
          options: a,
          dposition: c ? "chartArea" : u ? "bottom" : "left",
          dtype: c ? "radialLinear" : u ? "category" : "linear"
        };
      }))), Jt(s, (o) => {
        const a = o.options, l = a.id, c = nP(l, a), u = tt(a.type, o.dtype);
        (a.position === void 0 || tF(a.position, c) !== tF(o.dposition)) && (a.position = o.dposition), r[l] = !0;
        let h = null;
        if (l in i && i[l].type === u)
          h = i[l];
        else {
          const d = xr.getScale(u);
          h = new d({
            id: l,
            type: u,
            ctx: this.ctx,
            chart: this
          }), i[h.id] = h;
        }
        h.init(a, e);
      }), Jt(r, (o, a) => {
        o || delete i[a];
      }), Jt(i, (o) => {
        lr.configure(this, o, o.options), lr.addBox(this, o);
      });
    }
    _updateMetasets() {
      const e = this._metasets, t = this.data.datasets.length, i = e.length;
      if (e.sort((r, s) => r.index - s.index), i > t) {
        for (let r = t; r < i; ++r)
          this._destroyDatasetMeta(r);
        e.splice(t, i - t);
      }
      this._sortedMetasets = e.slice(0).sort(nF("order", "index"));
    }
    _removeUnreferencedMetasets() {
      const {
        _metasets: e,
        data: {
          datasets: t
        }
      } = this;
      e.length > t.length && delete this._stacks, e.forEach((i, r) => {
        t.filter((s) => s === i._dataset).length === 0 && this._destroyDatasetMeta(r);
      });
    }
    buildOrUpdateControllers() {
      const e = [], t = this.data.datasets;
      let i, r;
      for (this._removeUnreferencedMetasets(), i = 0, r = t.length; i < r; i++) {
        const s = t[i];
        let o = this.getDatasetMeta(i);
        const a = s.type || this.config.type;
        if (o.type && o.type !== a && (this._destroyDatasetMeta(i), o = this.getDatasetMeta(i)), o.type = a, o.indexAxis = s.indexAxis || tP(a, this.options), o.order = s.order || 0, o.index = i, o.label = "" + s.label, o.visible = this.isDatasetVisible(i), o.controller)
          o.controller.updateIndex(i), o.controller.linkScales();
        else {
          const l = xr.getController(a), {
            datasetElementType: c,
            dataElementType: u
          } = On.datasets[a];
          Object.assign(l, {
            dataElementType: xr.getElement(u),
            datasetElementType: c && xr.getElement(c)
          }), o.controller = new l(this, i), e.push(o.controller);
        }
      }
      return this._updateMetasets(), e;
    }
    _resetElements() {
      Jt(this.data.datasets, (e, t) => {
        this.getDatasetMeta(t).controller.reset();
      }, this);
    }
    reset() {
      this._resetElements(), this.notifyPlugins("reset");
    }
    update(e) {
      const t = this.config;
      t.update();
      const i = this._options = t.createResolver(t.chartOptionScopes(), this.getContext()), r = this._animationsDisabled = !i.animation;
      if (this._updateScales(), this._checkEventBindings(), this._updateHiddenIndices(), this._plugins.invalidate(), this.notifyPlugins("beforeUpdate", {
        mode: e,
        cancelable: !0
      }) === !1)
        return;
      const s = this.buildOrUpdateControllers();
      this.notifyPlugins("beforeElementsUpdate");
      let o = 0;
      for (let c = 0, u = this.data.datasets.length; c < u; c++) {
        const {
          controller: h
        } = this.getDatasetMeta(c), d = !r && s.indexOf(h) === -1;
        h.buildOrUpdateElements(d), o = Math.max(+h.getMaxOverflow(), o);
      }
      o = this._minPadding = i.layout.autoPadding ? o : 0, this._updateLayout(o), r || Jt(s, (c) => {
        c.reset();
      }), this._updateDatasets(e), this.notifyPlugins("afterUpdate", {
        mode: e
      }), this._layers.sort(nF("z", "_idx"));
      const {
        _active: a,
        _lastEvent: l
      } = this;
      l ? this._eventHandler(l, !0) : a.length && this._updateHoverStyles(a, a, !0), this.render();
    }
    _updateScales() {
      Jt(this.scales, (e) => {
        lr.removeBox(this, e);
      }), this.ensureScalesHaveIDs(), this.buildOrUpdateScales();
    }
    _checkEventBindings() {
      const e = this.options, t = new Set(Object.keys(this._listeners)), i = new Set(e.events);
      (!p2(t, i) || !!this._responsiveListeners !== e.responsive) && (this.unbindEvents(), this.bindEvents());
    }
    _updateHiddenIndices() {
      const {
        _hiddenIndices: e
      } = this, t = this._getUniformDataChanges() || [];
      for (const {
        method: i,
        start: r,
        count: s
      } of t) {
        const o = i === "_removeElements" ? -s : s;
        vae(e, r, o);
      }
    }
    _getUniformDataChanges() {
      const e = this._dataChanges;
      if (!e || !e.length)
        return;
      this._dataChanges = [];
      const t = this.data.datasets.length, i = (s) => new Set(e.filter((o) => o[0] === s).map((o, a) => a + "," + o.splice(1).join(","))), r = i(0);
      for (let s = 1; s < t; s++)
        if (!p2(r, i(s)))
          return;
      return Array.from(r).map((s) => s.split(",")).map((s) => ({
        method: s[1],
        start: +s[2],
        count: +s[3]
      }));
    }
    _updateLayout(e) {
      if (this.notifyPlugins("beforeLayout", {
        cancelable: !0
      }) === !1)
        return;
      lr.update(this, this.width, this.height, e);
      const t = this.chartArea, i = t.width <= 0 || t.height <= 0;
      this._layers = [], Jt(this.boxes, (r) => {
        i && r.position === "chartArea" || (r.configure && r.configure(), this._layers.push(...r._layers()));
      }, this), this._layers.forEach((r, s) => {
        r._idx = s;
      }), this.notifyPlugins("afterLayout");
    }
    _updateDatasets(e) {
      if (this.notifyPlugins("beforeDatasetsUpdate", {
        mode: e,
        cancelable: !0
      }) !== !1) {
        for (let t = 0, i = this.data.datasets.length; t < i; ++t)
          this.getDatasetMeta(t).controller.configure();
        for (let t = 0, i = this.data.datasets.length; t < i; ++t)
          this._updateDataset(t, Uu(e) ? e({
            datasetIndex: t
          }) : e);
        this.notifyPlugins("afterDatasetsUpdate", {
          mode: e
        });
      }
    }
    _updateDataset(e, t) {
      const i = this.getDatasetMeta(e), r = {
        meta: i,
        index: e,
        mode: t,
        cancelable: !0
      };
      this.notifyPlugins("beforeDatasetUpdate", r) !== !1 && (i.controller._update(t), r.cancelable = !1, this.notifyPlugins("afterDatasetUpdate", r));
    }
    render() {
      this.notifyPlugins("beforeRender", {
        cancelable: !0
      }) !== !1 && (Wl.has(this) ? this.attached && !Wl.running(this) && Wl.start(this) : (this.draw(), iF({
        chart: this
      })));
    }
    draw() {
      let e;
      if (this._resizeBeforeDraw) {
        const {
          width: i,
          height: r
        } = this._resizeBeforeDraw;
        this._resizeBeforeDraw = null, this._resize(i, r);
      }
      if (this.clear(), this.width <= 0 || this.height <= 0 || this.notifyPlugins("beforeDraw", {
        cancelable: !0
      }) === !1)
        return;
      const t = this._layers;
      for (e = 0; e < t.length && t[e].z <= 0; ++e)
        t[e].draw(this.chartArea);
      for (this._drawDatasets(); e < t.length; ++e)
        t[e].draw(this.chartArea);
      this.notifyPlugins("afterDraw");
    }
    _getSortedDatasetMetas(e) {
      const t = this._sortedMetasets, i = [];
      let r, s;
      for (r = 0, s = t.length; r < s; ++r) {
        const o = t[r];
        (!e || o.visible) && i.push(o);
      }
      return i;
    }
    getSortedVisibleDatasetMetas() {
      return this._getSortedDatasetMetas(!0);
    }
    _drawDatasets() {
      if (this.notifyPlugins("beforeDatasetsDraw", {
        cancelable: !0
      }) === !1)
        return;
      const e = this.getSortedVisibleDatasetMetas();
      for (let t = e.length - 1; t >= 0; --t)
        this._drawDataset(e[t]);
      this.notifyPlugins("afterDatasetsDraw");
    }
    _drawDataset(e) {
      const t = this.ctx, i = e._clip, r = !i.disabled, s = yae(e, this.chartArea), o = {
        meta: e,
        index: e.index,
        cancelable: !0
      };
      this.notifyPlugins("beforeDatasetDraw", o) !== !1 && (r && Dd(t, {
        left: i.left === !1 ? 0 : s.left - i.left,
        right: i.right === !1 ? this.width : s.right + i.right,
        top: i.top === !1 ? 0 : s.top - i.top,
        bottom: i.bottom === !1 ? this.height : s.bottom + i.bottom
      }), e.controller.draw(), r && Nd(t), o.cancelable = !1, this.notifyPlugins("afterDatasetDraw", o));
    }
    isPointInArea(e) {
      return uc(e, this.chartArea, this._minPadding);
    }
    getElementsAtEventForMode(e, t, i, r) {
      const s = moe.modes[t];
      return typeof s == "function" ? s(this, e, i, r) : [];
    }
    getDatasetMeta(e) {
      const t = this.data.datasets[e], i = this._metasets;
      let r = i.filter((s) => s && s._dataset === t).pop();
      return r || (r = {
        type: null,
        data: [],
        dataset: null,
        controller: null,
        hidden: null,
        xAxisID: null,
        yAxisID: null,
        order: t && t.order || 0,
        index: e,
        _dataset: t,
        _parsed: [],
        _sorted: !1
      }, i.push(r)), r;
    }
    getContext() {
      return this.$context || (this.$context = sh(null, {
        chart: this,
        type: "chart"
      }));
    }
    getVisibleDatasetCount() {
      return this.getSortedVisibleDatasetMetas().length;
    }
    isDatasetVisible(e) {
      const t = this.data.datasets[e];
      if (!t)
        return !1;
      const i = this.getDatasetMeta(e);
      return typeof i.hidden == "boolean" ? !i.hidden : !t.hidden;
    }
    setDatasetVisibility(e, t) {
      const i = this.getDatasetMeta(e);
      i.hidden = !t;
    }
    toggleDataVisibility(e) {
      this._hiddenIndices[e] = !this._hiddenIndices[e];
    }
    getDataVisibility(e) {
      return !this._hiddenIndices[e];
    }
    _updateVisibility(e, t, i) {
      const r = i ? "show" : "hide", s = this.getDatasetMeta(e), o = s.controller._resolveAnimations(void 0, r);
      tw(t) ? (s.data[t].hidden = !i, this.update()) : (this.setDatasetVisibility(e, i), o.update(s, {
        visible: i
      }), this.update((a) => a.datasetIndex === e ? r : void 0));
    }
    hide(e, t) {
      this._updateVisibility(e, t, !1);
    }
    show(e, t) {
      this._updateVisibility(e, t, !0);
    }
    _destroyDatasetMeta(e) {
      const t = this._metasets[e];
      t && t.controller && t.controller._destroy(), delete this._metasets[e];
    }
    _stop() {
      let e, t;
      for (this.stop(), Wl.remove(this), e = 0, t = this.data.datasets.length; e < t; ++e)
        this._destroyDatasetMeta(e);
    }
    destroy() {
      this.notifyPlugins("beforeDestroy");
      const {
        canvas: e,
        ctx: t
      } = this;
      this._stop(), this.config.clearCache(), e && (this.unbindEvents(), R2(e, t), this.platform.releaseContext(t), this.canvas = null, this.ctx = null), delete p_[this.id], this.notifyPlugins("afterDestroy");
    }
    toBase64Image(...e) {
      return this.canvas.toDataURL(...e);
    }
    bindEvents() {
      this.bindUserEvents(), this.options.responsive ? this.bindResponsiveEvents() : this.attached = !0;
    }
    bindUserEvents() {
      const e = this._listeners, t = this.platform, i = (s, o) => {
        t.addEventListener(this, s, o), e[s] = o;
      }, r = (s, o, a) => {
        s.offsetX = o, s.offsetY = a, this._eventHandler(s);
      };
      Jt(this.options.events, (s) => i(s, r));
    }
    bindResponsiveEvents() {
      this._responsiveListeners || (this._responsiveListeners = {});
      const e = this._responsiveListeners, t = this.platform, i = (l, c) => {
        t.addEventListener(this, l, c), e[l] = c;
      }, r = (l, c) => {
        e[l] && (t.removeEventListener(this, l, c), delete e[l]);
      }, s = (l, c) => {
        this.canvas && this.resize(l, c);
      };
      let o;
      const a = () => {
        r("attach", a), this.attached = !0, this.resize(), i("resize", s), i("detach", o);
      };
      o = () => {
        this.attached = !1, r("resize", s), this._stop(), this._resize(0, 0), i("attach", a);
      }, t.isAttached(this.canvas) ? a() : o();
    }
    unbindEvents() {
      Jt(this._listeners, (e, t) => {
        this.platform.removeEventListener(this, t, e);
      }), this._listeners = {}, Jt(this._responsiveListeners, (e, t) => {
        this.platform.removeEventListener(this, t, e);
      }), this._responsiveListeners = void 0;
    }
    updateHoverStyle(e, t, i) {
      const r = i ? "set" : "remove";
      let s, o, a, l;
      for (t === "dataset" && (s = this.getDatasetMeta(e[0].datasetIndex), s.controller["_" + r + "DatasetHoverStyle"]()), a = 0, l = e.length; a < l; ++a) {
        o = e[a];
        const c = o && this.getDatasetMeta(o.datasetIndex).controller;
        c && c[r + "HoverStyle"](o.element, o.datasetIndex, o.index);
      }
    }
    getActiveElements() {
      return this._active || [];
    }
    setActiveElements(e) {
      const t = this._active || [], i = e.map(({
        datasetIndex: s,
        index: o
      }) => {
        const a = this.getDatasetMeta(s);
        if (!a)
          throw new Error("No dataset found at index " + s);
        return {
          datasetIndex: s,
          element: a.data[o],
          index: o
        };
      });
      !l_(i, t) && (this._active = i, this._lastEvent = null, this._updateHoverStyles(i, t));
    }
    notifyPlugins(e, t, i) {
      return this._plugins.notify(this, e, t, i);
    }
    isPluginEnabled(e) {
      return this._plugins._cache.filter((t) => t.plugin.id === e).length === 1;
    }
    _updateHoverStyles(e, t, i) {
      const r = this.options.hover, s = (l, c) => l.filter((u) => !c.some((h) => u.datasetIndex === h.datasetIndex && u.index === h.index)), o = s(t, e), a = i ? e : s(e, t);
      o.length && this.updateHoverStyle(o, r.mode, !1), a.length && r.mode && this.updateHoverStyle(a, r.mode, !0);
    }
    _eventHandler(e, t) {
      const i = {
        event: e,
        replay: t,
        cancelable: !0,
        inChartArea: this.isPointInArea(e)
      }, r = (o) => (o.options.events || this.options.events).includes(e.native.type);
      if (this.notifyPlugins("beforeEvent", i, r) === !1)
        return;
      const s = this._handleEvent(e, t, i.inChartArea);
      return i.cancelable = !1, this.notifyPlugins("afterEvent", i, r), (s || i.changed) && this.render(), this;
    }
    _handleEvent(e, t, i) {
      const {
        _active: r = [],
        options: s
      } = this, o = t, a = this._getActiveElements(e, r, i, o), l = Mre(e), c = wae(e, this._lastEvent, i, l);
      i && (this._lastEvent = null, bn(s.onHover, [e, a, this], this), l && bn(s.onClick, [e, a, this], this));
      const u = !l_(a, r);
      return (u || t) && (this._active = a, this._updateHoverStyles(a, r, t)), this._lastEvent = c, u;
    }
    _getActiveElements(e, t, i, r) {
      if (e.type === "mouseout")
        return [];
      if (!i)
        return t;
      const s = this.options.hover;
      return this.getElementsAtEventForMode(e, s.mode, s, r);
    }
  }
  Rs.defaults = On;
  Rs.instances = p_;
  Rs.overrides = Qd;
  Rs.registry = xr;
  Rs.version = pae;
  Rs.getChart = g4;
  function rF() {
    return Jt(Rs.instances, (n) => n._plugins.invalidate());
  }
  function Cae(n, e, t) {
    const {
      startAngle: i,
      pixelMargin: r,
      x: s,
      y: o,
      outerRadius: a,
      innerRadius: l
    } = e;
    let c = r / a;
    n.beginPath(), n.arc(s, o, a, i - c, t + c), l > r ? (c = r / l, n.arc(s, o, l, t + c, i - c, !0)) : n.arc(s, o, r, t + si, i - si), n.closePath(), n.clip();
  }
  function Sae(n) {
    return lk(n, ["outerStart", "outerEnd", "innerStart", "innerEnd"]);
  }
  function _ae(n, e, t, i) {
    const r = Sae(n.options.borderRadius), s = (t - e) / 2, o = Math.min(s, i * e / 2), a = (l) => {
      const c = (t - Math.min(s, l)) * i / 2;
      return Hi(l, 0, Math.min(s, c));
    };
    return {
      outerStart: a(r.outerStart),
      outerEnd: a(r.outerEnd),
      innerStart: Hi(r.innerStart, 0, o),
      innerEnd: Hi(r.innerEnd, 0, o)
    };
  }
  function $f(n, e, t, i) {
    return {
      x: t + n * Math.cos(e),
      y: i + n * Math.sin(e)
    };
  }
  function m_(n, e, t, i, r, s) {
    const {
      x: o,
      y: a,
      startAngle: l,
      pixelMargin: c,
      innerRadius: u
    } = e, h = Math.max(e.outerRadius + i + t - c, 0), d = u > 0 ? u + i + t + c : 0;
    let f = 0;
    const g = r - l;
    if (i) {
      const N = u > 0 ? u - i : 0, O = h > 0 ? h - i : 0, V = (N + O) / 2, G = V !== 0 ? g * V / (V + i) : g;
      f = (g - G) / 2;
    }
    const p = Math.max(1e-3, g * h - t / _n) / h, m = (g - p) / 2, v = l + m + f, y = r - m - f, {
      outerStart: w,
      outerEnd: R,
      innerStart: E,
      innerEnd: C
    } = _ae(e, d, h, y - v), T = h - w, P = h - R, x = v + w / T, A = y - R / P, D = d + E, B = d + C, F = v + E / D, W = y - C / B;
    if (n.beginPath(), s) {
      const N = (x + A) / 2;
      if (n.arc(o, a, h, x, N), n.arc(o, a, h, N, A), R > 0) {
        const U = $f(P, A, o, a);
        n.arc(U.x, U.y, R, A, y + si);
      }
      const O = $f(B, y, o, a);
      if (n.lineTo(O.x, O.y), C > 0) {
        const U = $f(B, W, o, a);
        n.arc(U.x, U.y, C, y + si, W + Math.PI);
      }
      const V = (y - C / d + (v + E / d)) / 2;
      if (n.arc(o, a, d, y - C / d, V, !0), n.arc(o, a, d, V, v + E / d, !0), E > 0) {
        const U = $f(D, F, o, a);
        n.arc(U.x, U.y, E, F + Math.PI, v - si);
      }
      const G = $f(T, v, o, a);
      if (n.lineTo(G.x, G.y), w > 0) {
        const U = $f(T, x, o, a);
        n.arc(U.x, U.y, w, v - si, x);
      }
    } else {
      n.moveTo(o, a);
      const N = Math.cos(x) * h + o, O = Math.sin(x) * h + a;
      n.lineTo(N, O);
      const V = Math.cos(A) * h + o, G = Math.sin(A) * h + a;
      n.lineTo(V, G);
    }
    n.closePath();
  }
  function Rae(n, e, t, i, r) {
    const {
      fullCircles: s,
      startAngle: o,
      circumference: a
    } = e;
    let l = e.endAngle;
    if (s) {
      m_(n, e, t, i, l, r);
      for (let c = 0; c < s; ++c)
        n.fill();
      isNaN(a) || (l = o + (a % Sn || Sn));
    }
    return m_(n, e, t, i, l, r), n.fill(), l;
  }
  function Eae(n, e, t, i, r) {
    const {
      fullCircles: s,
      startAngle: o,
      circumference: a,
      options: l
    } = e, {
      borderWidth: c,
      borderJoinStyle: u,
      borderDash: h,
      borderDashOffset: d
    } = l, f = l.borderAlign === "inner";
    if (!c)
      return;
    n.setLineDash(h || []), n.lineDashOffset = d, f ? (n.lineWidth = c * 2, n.lineJoin = u || "round") : (n.lineWidth = c, n.lineJoin = u || "bevel");
    let g = e.endAngle;
    if (s) {
      m_(n, e, t, i, g, r);
      for (let p = 0; p < s; ++p)
        n.stroke();
      isNaN(a) || (g = o + (a % Sn || Sn));
    }
    f && Cae(n, e, g), s || (m_(n, e, t, i, g, r), n.stroke());
  }
  class zw extends go {
    constructor(e) {
      super(), this.circumference = void 0, this.endAngle = void 0, this.fullCircles = void 0, this.innerRadius = void 0, this.outerRadius = void 0, this.pixelMargin = void 0, this.startAngle = void 0, this.options = void 0, this.circumference = void 0, this.startAngle = void 0, this.endAngle = void 0, this.innerRadius = void 0, this.outerRadius = void 0, this.pixelMargin = 0, this.fullCircles = 0, e && Object.assign(this, e);
    }
    inRange(e, t, i) {
      const r = this.getProps(["x", "y"], i), {
        angle: s,
        distance: o
      } = N8(r, {
        x: e,
        y: t
      }), {
        startAngle: a,
        endAngle: l,
        innerRadius: c,
        outerRadius: u,
        circumference: h
      } = this.getProps(["startAngle", "endAngle", "innerRadius", "outerRadius", "circumference"], i), d = (this.options.spacing + this.options.borderWidth) / 2, f = tt(h, l - a), g = nw(s, a, l) && a !== l, p = f >= Sn || g, m = lc(o, c + d, u + d);
      return p && m;
    }
    getCenterPoint(e) {
      const {
        x: t,
        y: i,
        startAngle: r,
        endAngle: s,
        innerRadius: o,
        outerRadius: a
      } = this.getProps(["x", "y", "startAngle", "endAngle", "innerRadius", "outerRadius"], e), {
        offset: l,
        spacing: c
      } = this.options, u = (r + s) / 2, h = (o + a + c + l) / 2;
      return {
        x: t + Math.cos(u) * h,
        y: i + Math.sin(u) * h
      };
    }
    tooltipPosition(e) {
      return this.getCenterPoint(e);
    }
    draw(e) {
      const {
        options: t,
        circumference: i
      } = this, r = (t.offset || 0) / 4, s = (t.spacing || 0) / 2, o = t.circular;
      if (this.pixelMargin = t.borderAlign === "inner" ? 0.33 : 0, this.fullCircles = i > Sn ? Math.floor(i / Sn) : 0, i === 0 || this.innerRadius < 0 || this.outerRadius < 0)
        return;
      e.save();
      const a = (this.startAngle + this.endAngle) / 2;
      e.translate(Math.cos(a) * r, Math.sin(a) * r);
      const l = 1 - Math.sin(Math.min(_n, i || 0)), c = r * l;
      e.fillStyle = t.backgroundColor, e.strokeStyle = t.borderColor, Rae(e, this, c, s, o), Eae(e, this, c, s, o), e.restore();
    }
  }
  zw.id = "arc";
  zw.defaults = {
    borderAlign: "center",
    borderColor: "#fff",
    borderDash: [],
    borderDashOffset: 0,
    borderJoinStyle: void 0,
    borderRadius: 0,
    borderWidth: 2,
    offset: 0,
    spacing: 0,
    angle: void 0,
    circular: !0
  };
  zw.defaultRoutes = {
    backgroundColor: "backgroundColor"
  };
  zw.descriptors = {
    _scriptable: !0,
    _indexable: (n) => n !== "borderDash"
  };
  function p4(n, e, t = e) {
    n.lineCap = tt(t.borderCapStyle, e.borderCapStyle), n.setLineDash(tt(t.borderDash, e.borderDash)), n.lineDashOffset = tt(t.borderDashOffset, e.borderDashOffset), n.lineJoin = tt(t.borderJoinStyle, e.borderJoinStyle), n.lineWidth = tt(t.borderWidth, e.borderWidth), n.strokeStyle = tt(t.borderColor, e.borderColor);
  }
  function xae(n, e, t) {
    n.lineTo(t.x, t.y);
  }
  function Tae(n) {
    return n.stepped ? Xre : n.tension || n.cubicInterpolationMode === "monotone" ? Zre : xae;
  }
  function m4(n, e, t = {}) {
    const i = n.length, {
      start: r = 0,
      end: s = i - 1
    } = t, {
      start: o,
      end: a
    } = e, l = Math.max(r, o), c = Math.min(s, a), u = r < o && s < o || r > a && s > a;
    return {
      count: i,
      start: l,
      loop: e.loop,
      ilen: c < l && !u ? i + c - l : c - l
    };
  }
  function Mae(n, e, t, i) {
    const {
      points: r,
      options: s
    } = e, {
      count: o,
      start: a,
      loop: l,
      ilen: c
    } = m4(r, t, i), u = Tae(s);
    let {
      move: h = !0,
      reverse: d
    } = i || {}, f, g, p;
    for (f = 0; f <= c; ++f)
      g = r[(a + (d ? c - f : f)) % o], !g.skip && (h ? (n.moveTo(g.x, g.y), h = !1) : u(n, p, g, d, s.stepped), p = g);
    return l && (g = r[(a + (d ? c : 0)) % o], u(n, p, g, d, s.stepped)), !!l;
  }
  function Aae(n, e, t, i) {
    const r = e.points, {
      count: s,
      start: o,
      ilen: a
    } = m4(r, t, i), {
      move: l = !0,
      reverse: c
    } = i || {};
    let u = 0, h = 0, d, f, g, p, m, v;
    const y = (R) => (o + (c ? a - R : R)) % s, w = () => {
      p !== m && (n.lineTo(u, m), n.lineTo(u, p), n.lineTo(u, v));
    };
    for (l && (f = r[y(0)], n.moveTo(f.x, f.y)), d = 0; d <= a; ++d) {
      if (f = r[y(d)], f.skip)
        continue;
      const R = f.x, E = f.y, C = R | 0;
      C === g ? (E < p ? p = E : E > m && (m = E), u = (h * u + R) / ++h) : (w(), n.lineTo(R, E), g = C, h = 0, p = m = E), v = E;
    }
    w();
  }
  function iP(n) {
    const e = n.options, t = e.borderDash && e.borderDash.length;
    return !n._decimated && !n._loop && !e.tension && e.cubicInterpolationMode !== "monotone" && !e.stepped && !t ? Aae : Mae;
  }
  function Pae(n) {
    return n.stepped ? Ase : n.tension || n.cubicInterpolationMode === "monotone" ? Pse : ud;
  }
  function Iae(n, e, t, i) {
    let r = e._path;
    r || (r = e._path = new Path2D(), e.path(r, t, i) && r.closePath()), p4(n, e.options), n.stroke(r);
  }
  function Oae(n, e, t, i) {
    const {
      segments: r,
      options: s
    } = e, o = iP(e);
    for (const a of r)
      p4(n, s, a.style), n.beginPath(), o(n, e, a, {
        start: t,
        end: t + i - 1
      }) && n.closePath(), n.stroke();
  }
  const kae = typeof Path2D == "function";
  function Dae(n, e, t, i) {
    kae && !e.options.segment ? Iae(n, e, t, i) : Oae(n, e, t, i);
  }
  class ah extends go {
    constructor(e) {
      super(), this.animated = !0, this.options = void 0, this._chart = void 0, this._loop = void 0, this._fullLoop = void 0, this._path = void 0, this._points = void 0, this._segments = void 0, this._decimated = !1, this._pointsUpdated = !1, this._datasetIndex = void 0, e && Object.assign(this, e);
    }
    updateControlPoints(e, t) {
      const i = this.options;
      if ((i.tension || i.cubicInterpolationMode === "monotone") && !i.stepped && !this._pointsUpdated) {
        const r = i.spanGaps ? this._loop : this._fullLoop;
        Cse(this._points, i, e, r, t), this._pointsUpdated = !0;
      }
    }
    set points(e) {
      this._points = e, delete this._segments, delete this._path, this._pointsUpdated = !1;
    }
    get points() {
      return this._points;
    }
    get segments() {
      return this._segments || (this._segments = Lse(this, this.options.segment));
    }
    first() {
      const e = this.segments, t = this.points;
      return e.length && t[e[0].start];
    }
    last() {
      const e = this.segments, t = this.points, i = e.length;
      return i && t[e[i - 1].end];
    }
    interpolate(e, t) {
      const i = this.options, r = e[t], s = this.points, o = t4(this, {
        property: t,
        start: r,
        end: r
      });
      if (!o.length)
        return;
      const a = [], l = Pae(i);
      let c, u;
      for (c = 0, u = o.length; c < u; ++c) {
        const {
          start: h,
          end: d
        } = o[c], f = s[h], g = s[d];
        if (f === g) {
          a.push(f);
          continue;
        }
        const p = Math.abs((r - f[t]) / (g[t] - f[t])), m = l(f, g, p, i.stepped);
        m[t] = e[t], a.push(m);
      }
      return a.length === 1 ? a[0] : a;
    }
    pathSegment(e, t, i) {
      return iP(this)(e, this, t, i);
    }
    path(e, t, i) {
      const r = this.segments, s = iP(this);
      let o = this._loop;
      t = t || 0, i = i || this.points.length - t;
      for (const a of r)
        o &= s(e, this, a, {
          start: t,
          end: t + i - 1
        });
      return !!o;
    }
    draw(e, t, i, r) {
      const s = this.options || {};
      (this.points || []).length && s.borderWidth && (e.save(), Dae(e, this, i, r), e.restore()), this.animated && (this._pointsUpdated = !1, this._path = void 0);
    }
  }
  ah.id = "line";
  ah.defaults = {
    borderCapStyle: "butt",
    borderDash: [],
    borderDashOffset: 0,
    borderJoinStyle: "miter",
    borderWidth: 3,
    capBezierPoints: !0,
    cubicInterpolationMode: "default",
    fill: !1,
    spanGaps: !1,
    stepped: !1,
    tension: 0
  };
  ah.defaultRoutes = {
    backgroundColor: "backgroundColor",
    borderColor: "borderColor"
  };
  ah.descriptors = {
    _scriptable: !0,
    _indexable: (n) => n !== "borderDash" && n !== "fill"
  };
  function sF(n, e, t, i) {
    const r = n.options, {
      [t]: s
    } = n.getProps([t], i);
    return Math.abs(e - s) < r.radius + r.hitRadius;
  }
  class Uw extends go {
    constructor(e) {
      super(), this.parsed = void 0, this.skip = void 0, this.stop = void 0, this.options = void 0, this.parsed = void 0, this.skip = void 0, this.stop = void 0, e && Object.assign(this, e);
    }
    inRange(e, t, i) {
      const r = this.options, {
        x: s,
        y: o
      } = this.getProps(["x", "y"], i);
      return Math.pow(e - s, 2) + Math.pow(t - o, 2) < Math.pow(r.hitRadius + r.radius, 2);
    }
    inXRange(e, t) {
      return sF(this, e, "x", t);
    }
    inYRange(e, t) {
      return sF(this, e, "y", t);
    }
    getCenterPoint(e) {
      const {
        x: t,
        y: i
      } = this.getProps(["x", "y"], e);
      return {
        x: t,
        y: i
      };
    }
    size(e) {
      e = e || this.options || {};
      let t = e.radius || 0;
      t = Math.max(t, t && e.hoverRadius || 0);
      const i = t && e.borderWidth || 0;
      return (t + i) * 2;
    }
    draw(e, t) {
      const i = this.options;
      this.skip || i.radius < 0.1 || !uc(this, t, this.size(i) / 2) || (e.strokeStyle = i.borderColor, e.lineWidth = i.borderWidth, e.fillStyle = i.backgroundColor, d_(e, i, this.x, this.y));
    }
    getRange() {
      const e = this.options || {};
      return e.radius + e.hitRadius;
    }
  }
  Uw.id = "point";
  Uw.defaults = {
    borderWidth: 1,
    hitRadius: 1,
    hoverBorderWidth: 1,
    hoverRadius: 4,
    pointStyle: "circle",
    radius: 3,
    rotation: 0
  };
  Uw.defaultRoutes = {
    backgroundColor: "backgroundColor",
    borderColor: "borderColor"
  };
  function b4(n, e) {
    const {
      x: t,
      y: i,
      base: r,
      width: s,
      height: o
    } = n.getProps(["x", "y", "base", "width", "height"], e);
    let a, l, c, u, h;
    return n.horizontal ? (h = o / 2, a = Math.min(t, r), l = Math.max(t, r), c = i - h, u = i + h) : (h = s / 2, a = t - h, l = t + h, c = Math.min(i, r), u = Math.max(i, r)), {
      left: a,
      top: c,
      right: l,
      bottom: u
    };
  }
  function xu(n, e, t, i) {
    return n ? 0 : Hi(e, t, i);
  }
  function Nae(n, e, t) {
    const i = n.options.borderWidth, r = n.borderSkipped, s = z8(i);
    return {
      t: xu(r.top, s.top, 0, t),
      r: xu(r.right, s.right, 0, e),
      b: xu(r.bottom, s.bottom, 0, t),
      l: xu(r.left, s.left, 0, e)
    };
  }
  function Lae(n, e, t) {
    const {
      enableBorderRadius: i
    } = n.getProps(["enableBorderRadius"]), r = n.options.borderRadius, s = Ld(r), o = Math.min(e, t), a = n.borderSkipped, l = i || Rt(r);
    return {
      topLeft: xu(!l || a.top || a.left, s.topLeft, 0, o),
      topRight: xu(!l || a.top || a.right, s.topRight, 0, o),
      bottomLeft: xu(!l || a.bottom || a.left, s.bottomLeft, 0, o),
      bottomRight: xu(!l || a.bottom || a.right, s.bottomRight, 0, o)
    };
  }
  function Hae(n) {
    const e = b4(n), t = e.right - e.left, i = e.bottom - e.top, r = Nae(n, t / 2, i / 2), s = Lae(n, t / 2, i / 2);
    return {
      outer: {
        x: e.left,
        y: e.top,
        w: t,
        h: i,
        radius: s
      },
      inner: {
        x: e.left + r.l,
        y: e.top + r.t,
        w: t - r.l - r.r,
        h: i - r.t - r.b,
        radius: {
          topLeft: Math.max(0, s.topLeft - Math.max(r.t, r.l)),
          topRight: Math.max(0, s.topRight - Math.max(r.t, r.r)),
          bottomLeft: Math.max(0, s.bottomLeft - Math.max(r.b, r.l)),
          bottomRight: Math.max(0, s.bottomRight - Math.max(r.b, r.r))
        }
      }
    };
  }
  function mx(n, e, t, i) {
    const r = e === null, s = t === null, a = n && !(r && s) && b4(n, i);
    return a && (r || lc(e, a.left, a.right)) && (s || lc(t, a.top, a.bottom));
  }
  function $ae(n) {
    return n.topLeft || n.topRight || n.bottomLeft || n.bottomRight;
  }
  function Fae(n, e) {
    n.rect(e.x, e.y, e.w, e.h);
  }
  function bx(n, e, t = {}) {
    const i = n.x !== t.x ? -e : 0, r = n.y !== t.y ? -e : 0, s = (n.x + n.w !== t.x + t.w ? e : 0) - i, o = (n.y + n.h !== t.y + t.h ? e : 0) - r;
    return {
      x: n.x + i,
      y: n.y + r,
      w: n.w + s,
      h: n.h + o,
      radius: n.radius
    };
  }
  class Vp extends go {
    constructor(e) {
      super(), this.options = void 0, this.horizontal = void 0, this.base = void 0, this.width = void 0, this.height = void 0, this.inflateAmount = void 0, e && Object.assign(this, e);
    }
    draw(e) {
      const {
        inflateAmount: t,
        options: {
          borderColor: i,
          backgroundColor: r
        }
      } = this, {
        inner: s,
        outer: o
      } = Hae(this), a = $ae(o.radius) ? iw : Fae;
      e.save(), (o.w !== s.w || o.h !== s.h) && (e.beginPath(), a(e, bx(o, t, s)), e.clip(), a(e, bx(s, -t, o)), e.fillStyle = i, e.fill("evenodd")), e.beginPath(), a(e, bx(s, t)), e.fillStyle = r, e.fill(), e.restore();
    }
    inRange(e, t, i) {
      return mx(this, e, t, i);
    }
    inXRange(e, t) {
      return mx(this, e, null, t);
    }
    inYRange(e, t) {
      return mx(this, null, e, t);
    }
    getCenterPoint(e) {
      const {
        x: t,
        y: i,
        base: r,
        horizontal: s
      } = this.getProps(["x", "y", "base", "horizontal"], e);
      return {
        x: s ? (t + r) / 2 : t,
        y: s ? i : (i + r) / 2
      };
    }
    getRange(e) {
      return e === "x" ? this.width / 2 : this.height / 2;
    }
  }
  Vp.id = "bar";
  Vp.defaults = {
    borderSkipped: "start",
    borderWidth: 0,
    borderRadius: 0,
    inflateAmount: "auto",
    pointStyle: void 0
  };
  Vp.defaultRoutes = {
    backgroundColor: "backgroundColor",
    borderColor: "borderColor"
  };
  var Bae = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    ArcElement: zw,
    BarElement: Vp,
    LineElement: ah,
    PointElement: Uw
  });
  const rP = [
    "rgb(54, 162, 235)",
    "rgb(255, 99, 132)",
    "rgb(255, 159, 64)",
    "rgb(255, 205, 86)",
    "rgb(75, 192, 192)",
    "rgb(153, 102, 255)",
    "rgb(201, 203, 207)"
    // grey
  ], oF = /* @__PURE__ */ rP.map((n) => n.replace("rgb(", "rgba(").replace(")", ", 0.5)"));
  function v4(n) {
    return rP[n % rP.length];
  }
  function w4(n) {
    return oF[n % oF.length];
  }
  function Vae(n, e) {
    return n.borderColor = v4(e), n.backgroundColor = w4(e), ++e;
  }
  function Wae(n, e) {
    return n.backgroundColor = n.data.map(() => v4(e++)), e;
  }
  function jae(n, e) {
    return n.backgroundColor = n.data.map(() => w4(e++)), e;
  }
  function zae(n) {
    let e = 0;
    return (t, i) => {
      const r = n.getDatasetMeta(i).controller;
      r instanceof vf ? e = Wae(t, e) : r instanceof Ww ? e = jae(t, e) : r && (e = Vae(t, e));
    };
  }
  function aF(n) {
    let e;
    for (e in n)
      if (n[e].borderColor || n[e].backgroundColor)
        return !0;
    return !1;
  }
  function Uae(n) {
    return n && (n.borderColor || n.backgroundColor);
  }
  function Gae() {
    return On.borderColor !== "rgba(0,0,0,0.1)" || On.backgroundColor !== "rgba(0,0,0,0.1)";
  }
  var Yae = {
    id: "colors",
    defaults: {
      enabled: !0,
      forceOverride: !1
    },
    beforeLayout(n, e, t) {
      if (!t.enabled)
        return;
      const {
        data: {
          datasets: i
        },
        options: r
      } = n.config, {
        elements: s
      } = r, o = aF(i) || Uae(r) || s && aF(s) || Gae();
      if (!t.forceOverride && o)
        return;
      const a = zae(n);
      i.forEach(a);
    }
  };
  function Kae(n, e, t, i, r) {
    const s = r.samples || i;
    if (s >= t)
      return n.slice(e, e + t);
    const o = [], a = (t - 2) / (s - 2);
    let l = 0;
    const c = e + t - 1;
    let u = e, h, d, f, g, p;
    for (o[l++] = n[u], h = 0; h < s - 2; h++) {
      let m = 0, v = 0, y;
      const w = Math.floor((h + 1) * a) + 1 + e, R = Math.min(Math.floor((h + 2) * a) + 1, t) + e, E = R - w;
      for (y = w; y < R; y++)
        m += n[y].x, v += n[y].y;
      m /= E, v /= E;
      const C = Math.floor(h * a) + 1 + e, T = Math.min(Math.floor((h + 1) * a) + 1, t) + e, {
        x: P,
        y: x
      } = n[u];
      for (f = g = -1, y = C; y < T; y++)
        g = 0.5 * Math.abs((P - m) * (n[y].y - x) - (P - n[y].x) * (v - x)), g > f && (f = g, d = n[y], p = y);
      o[l++] = d, u = p;
    }
    return o[l++] = n[c], o;
  }
  function qae(n, e, t, i) {
    let r = 0, s = 0, o, a, l, c, u, h, d, f, g, p;
    const m = [], v = e + t - 1, y = n[e].x, R = n[v].x - y;
    for (o = e; o < e + t; ++o) {
      a = n[o], l = (a.x - y) / R * i, c = a.y;
      const E = l | 0;
      if (E === u)
        c < g ? (g = c, h = o) : c > p && (p = c, d = o), r = (s * r + a.x) / ++s;
      else {
        const C = o - 1;
        if (!kt(h) && !kt(d)) {
          const T = Math.min(h, d), P = Math.max(h, d);
          T !== f && T !== C && m.push({
            ...n[T],
            x: r
          }), P !== f && P !== C && m.push({
            ...n[P],
            x: r
          });
        }
        o > 0 && C !== f && m.push(n[C]), m.push(a), u = E, s = 0, g = p = c, h = d = f = o;
      }
    }
    return m;
  }
  function y4(n) {
    if (n._decimated) {
      const e = n._data;
      delete n._decimated, delete n._data, Object.defineProperty(n, "data", {
        configurable: !0,
        enumerable: !0,
        writable: !0,
        value: e
      });
    }
  }
  function lF(n) {
    n.data.datasets.forEach((e) => {
      y4(e);
    });
  }
  function Xae(n, e) {
    const t = e.length;
    let i = 0, r;
    const {
      iScale: s
    } = n, {
      min: o,
      max: a,
      minDefined: l,
      maxDefined: c
    } = s.getUserBounds();
    return l && (i = Hi(cc(e, s.axis, o).lo, 0, t - 1)), c ? r = Hi(cc(e, s.axis, a).hi + 1, i, t) - i : r = t - i, {
      start: i,
      count: r
    };
  }
  var Zae = {
    id: "decimation",
    defaults: {
      algorithm: "min-max",
      enabled: !1
    },
    beforeElementsUpdate: (n, e, t) => {
      if (!t.enabled) {
        lF(n);
        return;
      }
      const i = n.width;
      n.data.datasets.forEach((r, s) => {
        const {
          _data: o,
          indexAxis: a
        } = r, l = n.getDatasetMeta(s), c = o || r.data;
        if (Lb([a, n.options.indexAxis]) === "y" || !l.controller.supportsDecimation)
          return;
        const u = n.scales[l.xAxisID];
        if (u.type !== "linear" && u.type !== "time" || n.options.parsing)
          return;
        let {
          start: h,
          count: d
        } = Xae(l, c);
        const f = t.threshold || 4 * i;
        if (d <= f) {
          y4(r);
          return;
        }
        kt(o) && (r._data = c, delete r.data, Object.defineProperty(r, "data", {
          configurable: !0,
          enumerable: !0,
          get: function() {
            return this._decimated;
          },
          set: function(p) {
            this._data = p;
          }
        }));
        let g;
        switch (t.algorithm) {
          case "lttb":
            g = Kae(c, h, d, i, t);
            break;
          case "min-max":
            g = qae(c, h, d, i);
            break;
          default:
            throw new Error(`Unsupported decimation algorithm '${t.algorithm}'`);
        }
        r._decimated = g;
      });
    },
    destroy(n) {
      lF(n);
    }
  };
  function Qae(n, e, t) {
    const i = n.segments, r = n.points, s = e.points, o = [];
    for (const a of i) {
      let {
        start: l,
        end: c
      } = a;
      c = mk(l, c, r);
      const u = sP(t, r[l], r[c], a.loop);
      if (!e.segments) {
        o.push({
          source: a,
          target: u,
          start: r[l],
          end: r[c]
        });
        continue;
      }
      const h = t4(e, u);
      for (const d of h) {
        const f = sP(t, s[d.start], s[d.end], d.loop), g = e4(a, r, f);
        for (const p of g)
          o.push({
            source: p,
            target: d,
            start: {
              [t]: cF(u, f, "start", Math.max)
            },
            end: {
              [t]: cF(u, f, "end", Math.min)
            }
          });
      }
    }
    return o;
  }
  function sP(n, e, t, i) {
    if (i)
      return;
    let r = e[n], s = t[n];
    return n === "angle" && (r = gs(r), s = gs(s)), {
      property: n,
      start: r,
      end: s
    };
  }
  function Jae(n, e) {
    const {
      x: t = null,
      y: i = null
    } = n || {}, r = e.points, s = [];
    return e.segments.forEach(({
      start: o,
      end: a
    }) => {
      a = mk(o, a, r);
      const l = r[o], c = r[a];
      i !== null ? (s.push({
        x: l.x,
        y: i
      }), s.push({
        x: c.x,
        y: i
      })) : t !== null && (s.push({
        x: t,
        y: l.y
      }), s.push({
        x: t,
        y: c.y
      }));
    }), s;
  }
  function mk(n, e, t) {
    for (; e > n; e--) {
      const i = t[e];
      if (!isNaN(i.x) && !isNaN(i.y))
        break;
    }
    return e;
  }
  function cF(n, e, t, i) {
    return n && e ? i(n[t], e[t]) : n ? n[t] : e ? e[t] : 0;
  }
  function C4(n, e) {
    let t = [], i = !1;
    return Pn(n) ? (i = !0, t = n) : t = Jae(n, e), t.length ? new ah({
      points: t,
      options: {
        tension: 0
      },
      _loop: i,
      _fullLoop: i
    }) : null;
  }
  function uF(n) {
    return n && n.fill !== !1;
  }
  function ele(n, e, t) {
    let r = n[e].fill;
    const s = [e];
    let o;
    if (!t)
      return r;
    for (; r !== !1 && s.indexOf(r) === -1; ) {
      if (!ei(r))
        return r;
      if (o = n[r], !o)
        return !1;
      if (o.visible)
        return r;
      s.push(r), r = o.fill;
    }
    return !1;
  }
  function tle(n, e, t) {
    const i = sle(n);
    if (Rt(i))
      return isNaN(i.value) ? !1 : i;
    let r = parseFloat(i);
    return ei(r) && Math.floor(r) === r ? nle(i[0], e, r, t) : ["origin", "start", "end", "stack", "shape"].indexOf(i) >= 0 && i;
  }
  function nle(n, e, t, i) {
    return (n === "-" || n === "+") && (t = e + t), t === e || t < 0 || t >= i ? !1 : t;
  }
  function ile(n, e) {
    let t = null;
    return n === "start" ? t = e.bottom : n === "end" ? t = e.top : Rt(n) ? t = e.getPixelForValue(n.value) : e.getBasePixel && (t = e.getBasePixel()), t;
  }
  function rle(n, e, t) {
    let i;
    return n === "start" ? i = t : n === "end" ? i = e.options.reverse ? e.min : e.max : Rt(n) ? i = n.value : i = e.getBaseValue(), i;
  }
  function sle(n) {
    const e = n.options, t = e.fill;
    let i = tt(t && t.target, t);
    return i === void 0 && (i = !!e.backgroundColor), i === !1 || i === null ? !1 : i === !0 ? "origin" : i;
  }
  function ole(n) {
    const {
      scale: e,
      index: t,
      line: i
    } = n, r = [], s = i.segments, o = i.points, a = ale(e, t);
    a.push(C4({
      x: null,
      y: e.bottom
    }, i));
    for (let l = 0; l < s.length; l++) {
      const c = s[l];
      for (let u = c.start; u <= c.end; u++)
        lle(r, o[u], a);
    }
    return new ah({
      points: r,
      options: {}
    });
  }
  function ale(n, e) {
    const t = [], i = n.getMatchingVisibleMetas("line");
    for (let r = 0; r < i.length; r++) {
      const s = i[r];
      if (s.index === e)
        break;
      s.hidden || t.unshift(s.dataset);
    }
    return t;
  }
  function lle(n, e, t) {
    const i = [];
    for (let r = 0; r < t.length; r++) {
      const s = t[r], {
        first: o,
        last: a,
        point: l
      } = cle(s, e, "x");
      if (!(!l || o && a)) {
        if (o)
          i.unshift(l);
        else if (n.push(l), !a)
          break;
      }
    }
    n.push(...i);
  }
  function cle(n, e, t) {
    const i = n.interpolate(e, t);
    if (!i)
      return {};
    const r = i[t], s = n.segments, o = n.points;
    let a = !1, l = !1;
    for (let c = 0; c < s.length; c++) {
      const u = s[c], h = o[u.start][t], d = o[u.end][t];
      if (lc(r, h, d)) {
        a = r === h, l = r === d;
        break;
      }
    }
    return {
      first: a,
      last: l,
      point: i
    };
  }
  class S4 {
    constructor(e) {
      this.x = e.x, this.y = e.y, this.radius = e.radius;
    }
    pathSegment(e, t, i) {
      const {
        x: r,
        y: s,
        radius: o
      } = this;
      return t = t || {
        start: 0,
        end: Sn
      }, e.arc(r, s, o, t.end, t.start, !0), !i.bounds;
    }
    interpolate(e) {
      const {
        x: t,
        y: i,
        radius: r
      } = this, s = e.angle;
      return {
        x: t + Math.cos(s) * r,
        y: i + Math.sin(s) * r,
        angle: s
      };
    }
  }
  function ule(n) {
    const {
      chart: e,
      fill: t,
      line: i
    } = n;
    if (ei(t))
      return hle(e, t);
    if (t === "stack")
      return ole(n);
    if (t === "shape")
      return !0;
    const r = dle(n);
    return r instanceof S4 ? r : C4(r, i);
  }
  function hle(n, e) {
    const t = n.getDatasetMeta(e);
    return t && n.isDatasetVisible(e) ? t.dataset : null;
  }
  function dle(n) {
    return (n.scale || {}).getPointPositionForValue ? gle(n) : fle(n);
  }
  function fle(n) {
    const {
      scale: e = {},
      fill: t
    } = n, i = ile(t, e);
    if (ei(i)) {
      const r = e.isHorizontal();
      return {
        x: r ? i : null,
        y: r ? null : i
      };
    }
    return null;
  }
  function gle(n) {
    const {
      scale: e,
      fill: t
    } = n, i = e.options, r = e.getLabels().length, s = i.reverse ? e.max : e.min, o = rle(t, e, s), a = [];
    if (i.grid.circular) {
      const l = e.getPointPositionForValue(0, s);
      return new S4({
        x: l.x,
        y: l.y,
        radius: e.getDistanceFromCenterForValue(o)
      });
    }
    for (let l = 0; l < r; ++l)
      a.push(e.getPointPositionForValue(l, o));
    return a;
  }
  function vx(n, e, t) {
    const i = ule(e), {
      line: r,
      scale: s,
      axis: o
    } = e, a = r.options, l = a.fill, c = a.backgroundColor, {
      above: u = c,
      below: h = c
    } = l || {};
    i && r.points.length && (Dd(n, t), ple(n, {
      line: r,
      target: i,
      above: u,
      below: h,
      area: t,
      scale: s,
      axis: o
    }), Nd(n));
  }
  function ple(n, e) {
    const {
      line: t,
      target: i,
      above: r,
      below: s,
      area: o,
      scale: a
    } = e, l = t._loop ? "angle" : e.axis;
    n.save(), l === "x" && s !== r && (hF(n, i, o.top), dF(n, {
      line: t,
      target: i,
      color: r,
      scale: a,
      property: l
    }), n.restore(), n.save(), hF(n, i, o.bottom)), dF(n, {
      line: t,
      target: i,
      color: s,
      scale: a,
      property: l
    }), n.restore();
  }
  function hF(n, e, t) {
    const {
      segments: i,
      points: r
    } = e;
    let s = !0, o = !1;
    n.beginPath();
    for (const a of i) {
      const {
        start: l,
        end: c
      } = a, u = r[l], h = r[mk(l, c, r)];
      s ? (n.moveTo(u.x, u.y), s = !1) : (n.lineTo(u.x, t), n.lineTo(u.x, u.y)), o = !!e.pathSegment(n, a, {
        move: o
      }), o ? n.closePath() : n.lineTo(h.x, t);
    }
    n.lineTo(e.first().x, t), n.closePath(), n.clip();
  }
  function dF(n, e) {
    const {
      line: t,
      target: i,
      property: r,
      color: s,
      scale: o
    } = e, a = Qae(t, i, r);
    for (const {
      source: l,
      target: c,
      start: u,
      end: h
    } of a) {
      const {
        style: {
          backgroundColor: d = s
        } = {}
      } = l, f = i !== !0;
      n.save(), n.fillStyle = d, mle(n, o, f && sP(r, u, h)), n.beginPath();
      const g = !!t.pathSegment(n, l);
      let p;
      if (f) {
        g ? n.closePath() : fF(n, i, h, r);
        const m = !!i.pathSegment(n, c, {
          move: g,
          reverse: !0
        });
        p = g && m, p || fF(n, i, u, r);
      }
      n.closePath(), n.fill(p ? "evenodd" : "nonzero"), n.restore();
    }
  }
  function mle(n, e, t) {
    const {
      top: i,
      bottom: r
    } = e.chart.chartArea, {
      property: s,
      start: o,
      end: a
    } = t || {};
    s === "x" && (n.beginPath(), n.rect(o, i, a - o, r - i), n.clip());
  }
  function fF(n, e, t, i) {
    const r = e.interpolate(t, i);
    r && n.lineTo(r.x, r.y);
  }
  var ble = {
    id: "filler",
    afterDatasetsUpdate(n, e, t) {
      const i = (n.data.datasets || []).length, r = [];
      let s, o, a, l;
      for (o = 0; o < i; ++o)
        s = n.getDatasetMeta(o), a = s.dataset, l = null, a && a.options && a instanceof ah && (l = {
          visible: n.isDatasetVisible(o),
          index: o,
          fill: tle(a, o, i),
          chart: n,
          axis: s.controller.options.indexAxis,
          scale: s.vScale,
          line: a
        }), s.$filler = l, r.push(l);
      for (o = 0; o < i; ++o)
        l = r[o], !(!l || l.fill === !1) && (l.fill = ele(r, o, t.propagate));
    },
    beforeDraw(n, e, t) {
      const i = t.drawTime === "beforeDraw", r = n.getSortedVisibleDatasetMetas(), s = n.chartArea;
      for (let o = r.length - 1; o >= 0; --o) {
        const a = r[o].$filler;
        a && (a.line.updateControlPoints(s, a.axis), i && a.fill && vx(n.ctx, a, s));
      }
    },
    beforeDatasetsDraw(n, e, t) {
      if (t.drawTime !== "beforeDatasetsDraw")
        return;
      const i = n.getSortedVisibleDatasetMetas();
      for (let r = i.length - 1; r >= 0; --r) {
        const s = i[r].$filler;
        uF(s) && vx(n.ctx, s, n.chartArea);
      }
    },
    beforeDatasetDraw(n, e, t) {
      const i = e.meta.$filler;
      !uF(i) || t.drawTime !== "beforeDatasetDraw" || vx(n.ctx, i, n.chartArea);
    },
    defaults: {
      propagate: !0,
      drawTime: "beforeDatasetDraw"
    }
  };
  const gF = (n, e) => {
    let {
      boxHeight: t = e,
      boxWidth: i = e
    } = n;
    return n.usePointStyle && (t = Math.min(t, e), i = n.pointStyleWidth || Math.min(i, e)), {
      boxWidth: i,
      boxHeight: t,
      itemHeight: Math.max(e, t)
    };
  }, vle = (n, e) => n !== null && e !== null && n.datasetIndex === e.datasetIndex && n.index === e.index;
  class pF extends go {
    constructor(e) {
      super(), this._added = !1, this.legendHitBoxes = [], this._hoveredItem = null, this.doughnutMode = !1, this.chart = e.chart, this.options = e.options, this.ctx = e.ctx, this.legendItems = void 0, this.columnSizes = void 0, this.lineWidths = void 0, this.maxHeight = void 0, this.maxWidth = void 0, this.top = void 0, this.bottom = void 0, this.left = void 0, this.right = void 0, this.height = void 0, this.width = void 0, this._margins = void 0, this.position = void 0, this.weight = void 0, this.fullSize = void 0;
    }
    update(e, t, i) {
      this.maxWidth = e, this.maxHeight = t, this._margins = i, this.setDimensions(), this.buildLabels(), this.fit();
    }
    setDimensions() {
      this.isHorizontal() ? (this.width = this.maxWidth, this.left = this._margins.left, this.right = this.width) : (this.height = this.maxHeight, this.top = this._margins.top, this.bottom = this.height);
    }
    buildLabels() {
      const e = this.options.labels || {};
      let t = bn(e.generateLabels, [this.chart], this) || [];
      e.filter && (t = t.filter((i) => e.filter(i, this.chart.data))), e.sort && (t = t.sort((i, r) => e.sort(i, r, this.chart.data))), this.options.reverse && t.reverse(), this.legendItems = t;
    }
    fit() {
      const {
        options: e,
        ctx: t
      } = this;
      if (!e.display) {
        this.width = this.height = 0;
        return;
      }
      const i = e.labels, r = Ri(i.font), s = r.size, o = this._computeTitleHeight(), {
        boxWidth: a,
        itemHeight: l
      } = gF(i, s);
      let c, u;
      t.font = r.string, this.isHorizontal() ? (c = this.maxWidth, u = this._fitRows(o, s, a, l) + 10) : (u = this.maxHeight, c = this._fitCols(o, r, a, l) + 10), this.width = Math.min(c, e.maxWidth || this.maxWidth), this.height = Math.min(u, e.maxHeight || this.maxHeight);
    }
    _fitRows(e, t, i, r) {
      const {
        ctx: s,
        maxWidth: o,
        options: {
          labels: {
            padding: a
          }
        }
      } = this, l = this.legendHitBoxes = [], c = this.lineWidths = [0], u = r + a;
      let h = e;
      s.textAlign = "left", s.textBaseline = "middle";
      let d = -1, f = -u;
      return this.legendItems.forEach((g, p) => {
        const m = i + t / 2 + s.measureText(g.text).width;
        (p === 0 || c[c.length - 1] + m + 2 * a > o) && (h += u, c[c.length - (p > 0 ? 0 : 1)] = 0, f += u, d++), l[p] = {
          left: 0,
          top: f,
          row: d,
          width: m,
          height: r
        }, c[c.length - 1] += m + a;
      }), h;
    }
    _fitCols(e, t, i, r) {
      const {
        ctx: s,
        maxHeight: o,
        options: {
          labels: {
            padding: a
          }
        }
      } = this, l = this.legendHitBoxes = [], c = this.columnSizes = [], u = o - e;
      let h = a, d = 0, f = 0, g = 0, p = 0;
      return this.legendItems.forEach((m, v) => {
        const {
          itemWidth: y,
          itemHeight: w
        } = wle(i, t, s, m, r);
        v > 0 && f + w + 2 * a > u && (h += d + a, c.push({
          width: d,
          height: f
        }), g += d + a, p++, d = f = 0), l[v] = {
          left: g,
          top: f,
          col: p,
          width: y,
          height: w
        }, d = Math.max(d, y), f += w + a;
      }), h += d, c.push({
        width: d,
        height: f
      }), h;
    }
    adjustHitBoxes() {
      if (!this.options.display)
        return;
      const e = this._computeTitleHeight(), {
        legendHitBoxes: t,
        options: {
          align: i,
          labels: {
            padding: r
          },
          rtl: s
        }
      } = this, o = tp(s, this.left, this.width);
      if (this.isHorizontal()) {
        let a = 0, l = ir(i, this.left + r, this.right - this.lineWidths[a]);
        for (const c of t)
          a !== c.row && (a = c.row, l = ir(i, this.left + r, this.right - this.lineWidths[a])), c.top += this.top + e + r, c.left = o.leftForLtr(o.x(l), c.width), l += c.width + r;
      } else {
        let a = 0, l = ir(i, this.top + e + r, this.bottom - this.columnSizes[a].height);
        for (const c of t)
          c.col !== a && (a = c.col, l = ir(i, this.top + e + r, this.bottom - this.columnSizes[a].height)), c.top = l, c.left += this.left + r, c.left = o.leftForLtr(o.x(c.left), c.width), l += c.height + r;
      }
    }
    isHorizontal() {
      return this.options.position === "top" || this.options.position === "bottom";
    }
    draw() {
      if (this.options.display) {
        const e = this.ctx;
        Dd(e, this), this._draw(), Nd(e);
      }
    }
    _draw() {
      const {
        options: e,
        columnSizes: t,
        lineWidths: i,
        ctx: r
      } = this, {
        align: s,
        labels: o
      } = e, a = On.color, l = tp(e.rtl, this.left, this.width), c = Ri(o.font), {
        padding: u
      } = o, h = c.size, d = h / 2;
      let f;
      this.drawTitle(), r.textAlign = l.textAlign("left"), r.textBaseline = "middle", r.lineWidth = 0.5, r.font = c.string;
      const {
        boxWidth: g,
        boxHeight: p,
        itemHeight: m
      } = gF(o, h), v = function(C, T, P) {
        if (isNaN(g) || g <= 0 || isNaN(p) || p < 0)
          return;
        r.save();
        const x = tt(P.lineWidth, 1);
        if (r.fillStyle = tt(P.fillStyle, a), r.lineCap = tt(P.lineCap, "butt"), r.lineDashOffset = tt(P.lineDashOffset, 0), r.lineJoin = tt(P.lineJoin, "miter"), r.lineWidth = x, r.strokeStyle = tt(P.strokeStyle, a), r.setLineDash(tt(P.lineDash, [])), o.usePointStyle) {
          const A = {
            radius: p * Math.SQRT2 / 2,
            pointStyle: P.pointStyle,
            rotation: P.rotation,
            borderWidth: x
          }, D = l.xPlus(C, g / 2), B = T + d;
          j8(r, A, D, B, o.pointStyleWidth && g);
        } else {
          const A = T + Math.max((h - p) / 2, 0), D = l.leftForLtr(C, g), B = Ld(P.borderRadius);
          r.beginPath(), Object.values(B).some((F) => F !== 0) ? iw(r, {
            x: D,
            y: A,
            w: g,
            h: p,
            radius: B
          }) : r.rect(D, A, g, p), r.fill(), x !== 0 && r.stroke();
        }
        r.restore();
      }, y = function(C, T, P) {
        Jd(r, P.text, C, T + m / 2, c, {
          strikethrough: P.hidden,
          textAlign: l.textAlign(P.textAlign)
        });
      }, w = this.isHorizontal(), R = this._computeTitleHeight();
      w ? f = {
        x: ir(s, this.left + u, this.right - i[0]),
        y: this.top + u + R,
        line: 0
      } : f = {
        x: this.left + u,
        y: ir(s, this.top + R + u, this.bottom - t[0].height),
        line: 0
      }, Z8(this.ctx, e.textDirection);
      const E = m + u;
      this.legendItems.forEach((C, T) => {
        r.strokeStyle = C.fontColor, r.fillStyle = C.fontColor;
        const P = r.measureText(C.text).width, x = l.textAlign(C.textAlign || (C.textAlign = o.textAlign)), A = g + d + P;
        let D = f.x, B = f.y;
        l.setWidth(this.width), w ? T > 0 && D + A + u > this.right && (B = f.y += E, f.line++, D = f.x = ir(s, this.left + u, this.right - i[f.line])) : T > 0 && B + E > this.bottom && (D = f.x = D + t[f.line].width + u, f.line++, B = f.y = ir(s, this.top + R + u, this.bottom - t[f.line].height));
        const F = l.x(D);
        if (v(F, B, C), D = Fre(x, D + g + d, w ? D + A : this.right, e.rtl), y(l.x(D), B, C), w)
          f.x += A + u;
        else if (typeof C.text != "string") {
          const W = c.lineHeight;
          f.y += _4(C, W) + u;
        } else
          f.y += E;
      }), Q8(this.ctx, e.textDirection);
    }
    drawTitle() {
      const e = this.options, t = e.title, i = Ri(t.font), r = gr(t.padding);
      if (!t.display)
        return;
      const s = tp(e.rtl, this.left, this.width), o = this.ctx, a = t.position, l = i.size / 2, c = r.top + l;
      let u, h = this.left, d = this.width;
      if (this.isHorizontal())
        d = Math.max(...this.lineWidths), u = this.top + c, h = ir(e.align, h, this.right - d);
      else {
        const g = this.columnSizes.reduce((p, m) => Math.max(p, m.height), 0);
        u = c + ir(e.align, this.top, this.bottom - g - e.labels.padding - this._computeTitleHeight());
      }
      const f = ir(a, h, h + d);
      o.textAlign = s.textAlign(ok(a)), o.textBaseline = "middle", o.strokeStyle = t.color, o.fillStyle = t.color, o.font = i.string, Jd(o, t.text, f, u, i);
    }
    _computeTitleHeight() {
      const e = this.options.title, t = Ri(e.font), i = gr(e.padding);
      return e.display ? t.lineHeight + i.height : 0;
    }
    _getLegendItemAt(e, t) {
      let i, r, s;
      if (lc(e, this.left, this.right) && lc(t, this.top, this.bottom)) {
        for (s = this.legendHitBoxes, i = 0; i < s.length; ++i)
          if (r = s[i], lc(e, r.left, r.left + r.width) && lc(t, r.top, r.top + r.height))
            return this.legendItems[i];
      }
      return null;
    }
    handleEvent(e) {
      const t = this.options;
      if (!Sle(e.type, t))
        return;
      const i = this._getLegendItemAt(e.x, e.y);
      if (e.type === "mousemove" || e.type === "mouseout") {
        const r = this._hoveredItem, s = vle(r, i);
        r && !s && bn(t.onLeave, [e, r, this], this), this._hoveredItem = i, i && !s && bn(t.onHover, [e, i, this], this);
      } else i && bn(t.onClick, [e, i, this], this);
    }
  }
  function wle(n, e, t, i, r) {
    const s = yle(i, n, e, t), o = Cle(r, i, e.lineHeight);
    return {
      itemWidth: s,
      itemHeight: o
    };
  }
  function yle(n, e, t, i) {
    let r = n.text;
    return r && typeof r != "string" && (r = r.reduce((s, o) => s.length > o.length ? s : o)), e + t.size / 2 + i.measureText(r).width;
  }
  function Cle(n, e, t) {
    let i = n;
    return typeof e.text != "string" && (i = _4(e, t)), i;
  }
  function _4(n, e) {
    const t = n.text ? n.text.length : 0;
    return e * t;
  }
  function Sle(n, e) {
    return !!((n === "mousemove" || n === "mouseout") && (e.onHover || e.onLeave) || e.onClick && (n === "click" || n === "mouseup"));
  }
  var _le = {
    id: "legend",
    _element: pF,
    start(n, e, t) {
      const i = n.legend = new pF({
        ctx: n.ctx,
        options: t,
        chart: n
      });
      lr.configure(n, i, t), lr.addBox(n, i);
    },
    stop(n) {
      lr.removeBox(n, n.legend), delete n.legend;
    },
    beforeUpdate(n, e, t) {
      const i = n.legend;
      lr.configure(n, i, t), i.options = t;
    },
    afterUpdate(n) {
      const e = n.legend;
      e.buildLabels(), e.adjustHitBoxes();
    },
    afterEvent(n, e) {
      e.replay || n.legend.handleEvent(e.event);
    },
    defaults: {
      display: !0,
      position: "top",
      align: "center",
      fullSize: !0,
      reverse: !1,
      weight: 1e3,
      onClick(n, e, t) {
        const i = e.datasetIndex, r = t.chart;
        r.isDatasetVisible(i) ? (r.hide(i), e.hidden = !0) : (r.show(i), e.hidden = !1);
      },
      onHover: null,
      onLeave: null,
      labels: {
        color: (n) => n.chart.options.color,
        boxWidth: 40,
        padding: 10,
        generateLabels(n) {
          const e = n.data.datasets, {
            labels: {
              usePointStyle: t,
              pointStyle: i,
              textAlign: r,
              color: s,
              useBorderRadius: o,
              borderRadius: a
            }
          } = n.legend.options;
          return n._getSortedDatasetMetas().map((l) => {
            const c = l.controller.getStyle(t ? 0 : void 0), u = gr(c.borderWidth);
            return {
              text: e[l.index].label,
              fillStyle: c.backgroundColor,
              fontColor: s,
              hidden: !l.visible,
              lineCap: c.borderCapStyle,
              lineDash: c.borderDash,
              lineDashOffset: c.borderDashOffset,
              lineJoin: c.borderJoinStyle,
              lineWidth: (u.width + u.height) / 4,
              strokeStyle: c.borderColor,
              pointStyle: i || c.pointStyle,
              rotation: c.rotation,
              textAlign: r || c.textAlign,
              borderRadius: o && (a || c.borderRadius),
              datasetIndex: l.index
            };
          }, this);
        }
      },
      title: {
        color: (n) => n.chart.options.color,
        display: !1,
        position: "center",
        text: ""
      }
    },
    descriptors: {
      _scriptable: (n) => !n.startsWith("on"),
      labels: {
        _scriptable: (n) => !["generateLabels", "filter", "sort"].includes(n)
      }
    }
  };
  class bk extends go {
    constructor(e) {
      super(), this.chart = e.chart, this.options = e.options, this.ctx = e.ctx, this._padding = void 0, this.top = void 0, this.bottom = void 0, this.left = void 0, this.right = void 0, this.width = void 0, this.height = void 0, this.position = void 0, this.weight = void 0, this.fullSize = void 0;
    }
    update(e, t) {
      const i = this.options;
      if (this.left = 0, this.top = 0, !i.display) {
        this.width = this.height = this.right = this.bottom = 0;
        return;
      }
      this.width = this.right = e, this.height = this.bottom = t;
      const r = Pn(i.text) ? i.text.length : 1;
      this._padding = gr(i.padding);
      const s = r * Ri(i.font).lineHeight + this._padding.height;
      this.isHorizontal() ? this.height = s : this.width = s;
    }
    isHorizontal() {
      const e = this.options.position;
      return e === "top" || e === "bottom";
    }
    _drawArgs(e) {
      const {
        top: t,
        left: i,
        bottom: r,
        right: s,
        options: o
      } = this, a = o.align;
      let l = 0, c, u, h;
      return this.isHorizontal() ? (u = ir(a, i, s), h = t + e, c = s - i) : (o.position === "left" ? (u = i + e, h = ir(a, r, t), l = _n * -0.5) : (u = s - e, h = ir(a, t, r), l = _n * 0.5), c = r - t), {
        titleX: u,
        titleY: h,
        maxWidth: c,
        rotation: l
      };
    }
    draw() {
      const e = this.ctx, t = this.options;
      if (!t.display)
        return;
      const i = Ri(t.font), s = i.lineHeight / 2 + this._padding.top, {
        titleX: o,
        titleY: a,
        maxWidth: l,
        rotation: c
      } = this._drawArgs(s);
      Jd(e, t.text, 0, 0, i, {
        color: t.color,
        maxWidth: l,
        rotation: c,
        textAlign: ok(t.align),
        textBaseline: "middle",
        translation: [o, a]
      });
    }
  }
  function Rle(n, e) {
    const t = new bk({
      ctx: n.ctx,
      options: e,
      chart: n
    });
    lr.configure(n, t, e), lr.addBox(n, t), n.titleBlock = t;
  }
  var Ele = {
    id: "title",
    _element: bk,
    start(n, e, t) {
      Rle(n, t);
    },
    stop(n) {
      const e = n.titleBlock;
      lr.removeBox(n, e), delete n.titleBlock;
    },
    beforeUpdate(n, e, t) {
      const i = n.titleBlock;
      lr.configure(n, i, t), i.options = t;
    },
    defaults: {
      align: "center",
      display: !1,
      font: {
        weight: "bold"
      },
      fullSize: !0,
      padding: 10,
      position: "top",
      text: "",
      weight: 2e3
    },
    defaultRoutes: {
      color: "color"
    },
    descriptors: {
      _scriptable: !0,
      _indexable: !1
    }
  };
  const qy = /* @__PURE__ */ new WeakMap();
  var xle = {
    id: "subtitle",
    start(n, e, t) {
      const i = new bk({
        ctx: n.ctx,
        options: t,
        chart: n
      });
      lr.configure(n, i, t), lr.addBox(n, i), qy.set(n, i);
    },
    stop(n) {
      lr.removeBox(n, qy.get(n)), qy.delete(n);
    },
    beforeUpdate(n, e, t) {
      const i = qy.get(n);
      lr.configure(n, i, t), i.options = t;
    },
    defaults: {
      align: "center",
      display: !1,
      font: {
        weight: "normal"
      },
      fullSize: !0,
      padding: 0,
      position: "top",
      text: "",
      weight: 1500
    },
    defaultRoutes: {
      color: "color"
    },
    descriptors: {
      _scriptable: !0,
      _indexable: !1
    }
  };
  const gv = {
    average(n) {
      if (!n.length)
        return !1;
      let e, t, i = /* @__PURE__ */ new Set(), r = 0, s = 0;
      for (e = 0, t = n.length; e < t; ++e) {
        const a = n[e].element;
        if (a && a.hasValue()) {
          const l = a.tooltipPosition();
          i.add(l.x), r += l.y, ++s;
        }
      }
      return s === 0 || i.size === 0 ? !1 : {
        x: [...i].reduce((a, l) => a + l) / i.size,
        y: r / s
      };
    },
    nearest(n, e) {
      if (!n.length)
        return !1;
      let t = e.x, i = e.y, r = Number.POSITIVE_INFINITY, s, o, a;
      for (s = 0, o = n.length; s < o; ++s) {
        const l = n[s].element;
        if (l && l.hasValue()) {
          const c = l.getCenterPoint(), u = JA(e, c);
          u < r && (r = u, a = l);
        }
      }
      if (a) {
        const l = a.tooltipPosition();
        t = l.x, i = l.y;
      }
      return {
        x: t,
        y: i
      };
    }
  };
  function Pa(n, e) {
    return e && (Pn(e) ? Array.prototype.push.apply(n, e) : n.push(e)), n;
  }
  function jl(n) {
    return (typeof n == "string" || n instanceof String) && n.indexOf(`
`) > -1 ? n.split(`
`) : n;
  }
  function Tle(n, e) {
    const {
      element: t,
      datasetIndex: i,
      index: r
    } = e, s = n.getDatasetMeta(i).controller, {
      label: o,
      value: a
    } = s.getLabelAndValue(r);
    return {
      chart: n,
      label: o,
      parsed: s.getParsed(r),
      raw: n.data.datasets[i].data[r],
      formattedValue: a,
      dataset: s.getDataset(),
      dataIndex: r,
      datasetIndex: i,
      element: t
    };
  }
  function mF(n, e) {
    const t = n.chart.ctx, {
      body: i,
      footer: r,
      title: s
    } = n, {
      boxWidth: o,
      boxHeight: a
    } = e, l = Ri(e.bodyFont), c = Ri(e.titleFont), u = Ri(e.footerFont), h = s.length, d = r.length, f = i.length, g = gr(e.padding);
    let p = g.height, m = 0, v = i.reduce((R, E) => R + E.before.length + E.lines.length + E.after.length, 0);
    if (v += n.beforeBody.length + n.afterBody.length, h && (p += h * c.lineHeight + (h - 1) * e.titleSpacing + e.titleMarginBottom), v) {
      const R = e.displayColors ? Math.max(a, l.lineHeight) : l.lineHeight;
      p += f * R + (v - f) * l.lineHeight + (v - 1) * e.bodySpacing;
    }
    d && (p += e.footerMarginTop + d * u.lineHeight + (d - 1) * e.footerSpacing);
    let y = 0;
    const w = function(R) {
      m = Math.max(m, t.measureText(R).width + y);
    };
    return t.save(), t.font = c.string, Jt(n.title, w), t.font = l.string, Jt(n.beforeBody.concat(n.afterBody), w), y = e.displayColors ? o + 2 + e.boxPadding : 0, Jt(i, (R) => {
      Jt(R.before, w), Jt(R.lines, w), Jt(R.after, w);
    }), y = 0, t.font = u.string, Jt(n.footer, w), t.restore(), m += g.width, {
      width: m,
      height: p
    };
  }
  function Mle(n, e) {
    const {
      y: t,
      height: i
    } = e;
    return t < i / 2 ? "top" : t > n.height - i / 2 ? "bottom" : "center";
  }
  function Ale(n, e, t, i) {
    const {
      x: r,
      width: s
    } = i, o = t.caretSize + t.caretPadding;
    if (n === "left" && r + s + o > e.width || n === "right" && r - s - o < 0)
      return !0;
  }
  function Ple(n, e, t, i) {
    const {
      x: r,
      width: s
    } = t, {
      width: o,
      chartArea: {
        left: a,
        right: l
      }
    } = n;
    let c = "center";
    return i === "center" ? c = r <= (a + l) / 2 ? "left" : "right" : r <= s / 2 ? c = "left" : r >= o - s / 2 && (c = "right"), Ale(c, n, e, t) && (c = "center"), c;
  }
  function bF(n, e, t) {
    const i = t.yAlign || e.yAlign || Mle(n, t);
    return {
      xAlign: t.xAlign || e.xAlign || Ple(n, e, t, i),
      yAlign: i
    };
  }
  function Ile(n, e) {
    let {
      x: t,
      width: i
    } = n;
    return e === "right" ? t -= i : e === "center" && (t -= i / 2), t;
  }
  function Ole(n, e, t) {
    let {
      y: i,
      height: r
    } = n;
    return e === "top" ? i += t : e === "bottom" ? i -= r + t : i -= r / 2, i;
  }
  function vF(n, e, t, i) {
    const {
      caretSize: r,
      caretPadding: s,
      cornerRadius: o
    } = n, {
      xAlign: a,
      yAlign: l
    } = t, c = r + s, {
      topLeft: u,
      topRight: h,
      bottomLeft: d,
      bottomRight: f
    } = Ld(o);
    let g = Ile(e, a);
    const p = Ole(e, l, c);
    return l === "center" ? a === "left" ? g += c : a === "right" && (g -= c) : a === "left" ? g -= Math.max(u, d) + r : a === "right" && (g += Math.max(h, f) + r), {
      x: Hi(g, 0, i.width - e.width),
      y: Hi(p, 0, i.height - e.height)
    };
  }
  function Xy(n, e, t) {
    const i = gr(t.padding);
    return e === "center" ? n.x + n.width / 2 : e === "right" ? n.x + n.width - i.right : n.x + i.left;
  }
  function wF(n) {
    return Pa([], jl(n));
  }
  function kle(n, e, t) {
    return sh(n, {
      tooltip: e,
      tooltipItems: t,
      type: "tooltip"
    });
  }
  function yF(n, e) {
    const t = e && e.dataset && e.dataset.tooltip && e.dataset.tooltip.callbacks;
    return t ? n.override(t) : n;
  }
  const R4 = {
    beforeTitle: xl,
    title(n) {
      if (n.length > 0) {
        const e = n[0], t = e.chart.data.labels, i = t ? t.length : 0;
        if (this && this.options && this.options.mode === "dataset")
          return e.dataset.label || "";
        if (e.label)
          return e.label;
        if (i > 0 && e.dataIndex < i)
          return t[e.dataIndex];
      }
      return "";
    },
    afterTitle: xl,
    beforeBody: xl,
    beforeLabel: xl,
    label(n) {
      if (this && this.options && this.options.mode === "dataset")
        return n.label + ": " + n.formattedValue || n.formattedValue;
      let e = n.dataset.label || "";
      e && (e += ": ");
      const t = n.formattedValue;
      return kt(t) || (e += t), e;
    },
    labelColor(n) {
      const t = n.chart.getDatasetMeta(n.datasetIndex).controller.getStyle(n.dataIndex);
      return {
        borderColor: t.borderColor,
        backgroundColor: t.backgroundColor,
        borderWidth: t.borderWidth,
        borderDash: t.borderDash,
        borderDashOffset: t.borderDashOffset,
        borderRadius: 0
      };
    },
    labelTextColor() {
      return this.options.bodyColor;
    },
    labelPointStyle(n) {
      const t = n.chart.getDatasetMeta(n.datasetIndex).controller.getStyle(n.dataIndex);
      return {
        pointStyle: t.pointStyle,
        rotation: t.rotation
      };
    },
    afterLabel: xl,
    afterBody: xl,
    beforeFooter: xl,
    footer: xl,
    afterFooter: xl
  };
  function Hr(n, e, t, i) {
    const r = n[e].call(t, i);
    return typeof r > "u" ? R4[e].call(t, i) : r;
  }
  class oP extends go {
    constructor(e) {
      super(), this.opacity = 0, this._active = [], this._eventPosition = void 0, this._size = void 0, this._cachedAnimations = void 0, this._tooltipItems = [], this.$animations = void 0, this.$context = void 0, this.chart = e.chart, this.options = e.options, this.dataPoints = void 0, this.title = void 0, this.beforeBody = void 0, this.body = void 0, this.afterBody = void 0, this.footer = void 0, this.xAlign = void 0, this.yAlign = void 0, this.x = void 0, this.y = void 0, this.height = void 0, this.width = void 0, this.caretX = void 0, this.caretY = void 0, this.labelColors = void 0, this.labelPointStyles = void 0, this.labelTextColors = void 0;
    }
    initialize(e) {
      this.options = e, this._cachedAnimations = void 0, this.$context = void 0;
    }
    _resolveAnimations() {
      const e = this._cachedAnimations;
      if (e)
        return e;
      const t = this.chart, i = this.options.setContext(this.getContext()), r = i.enabled && t.options.animation && i.animations, s = new n4(this.chart, r);
      return r._cacheable && (this._cachedAnimations = Object.freeze(s)), s;
    }
    getContext() {
      return this.$context || (this.$context = kle(this.chart.getContext(), this, this._tooltipItems));
    }
    getTitle(e, t) {
      const {
        callbacks: i
      } = t, r = Hr(i, "beforeTitle", this, e), s = Hr(i, "title", this, e), o = Hr(i, "afterTitle", this, e);
      let a = [];
      return a = Pa(a, jl(r)), a = Pa(a, jl(s)), a = Pa(a, jl(o)), a;
    }
    getBeforeBody(e, t) {
      return wF(Hr(t.callbacks, "beforeBody", this, e));
    }
    getBody(e, t) {
      const {
        callbacks: i
      } = t, r = [];
      return Jt(e, (s) => {
        const o = {
          before: [],
          lines: [],
          after: []
        }, a = yF(i, s);
        Pa(o.before, jl(Hr(a, "beforeLabel", this, s))), Pa(o.lines, Hr(a, "label", this, s)), Pa(o.after, jl(Hr(a, "afterLabel", this, s))), r.push(o);
      }), r;
    }
    getAfterBody(e, t) {
      return wF(Hr(t.callbacks, "afterBody", this, e));
    }
    getFooter(e, t) {
      const {
        callbacks: i
      } = t, r = Hr(i, "beforeFooter", this, e), s = Hr(i, "footer", this, e), o = Hr(i, "afterFooter", this, e);
      let a = [];
      return a = Pa(a, jl(r)), a = Pa(a, jl(s)), a = Pa(a, jl(o)), a;
    }
    _createItems(e) {
      const t = this._active, i = this.chart.data, r = [], s = [], o = [];
      let a = [], l, c;
      for (l = 0, c = t.length; l < c; ++l)
        a.push(Tle(this.chart, t[l]));
      return e.filter && (a = a.filter((u, h, d) => e.filter(u, h, d, i))), e.itemSort && (a = a.sort((u, h) => e.itemSort(u, h, i))), Jt(a, (u) => {
        const h = yF(e.callbacks, u);
        r.push(Hr(h, "labelColor", this, u)), s.push(Hr(h, "labelPointStyle", this, u)), o.push(Hr(h, "labelTextColor", this, u));
      }), this.labelColors = r, this.labelPointStyles = s, this.labelTextColors = o, this.dataPoints = a, a;
    }
    update(e, t) {
      const i = this.options.setContext(this.getContext()), r = this._active;
      let s, o = [];
      if (!r.length)
        this.opacity !== 0 && (s = {
          opacity: 0
        });
      else {
        const a = gv[i.position].call(this, r, this._eventPosition);
        o = this._createItems(i), this.title = this.getTitle(o, i), this.beforeBody = this.getBeforeBody(o, i), this.body = this.getBody(o, i), this.afterBody = this.getAfterBody(o, i), this.footer = this.getFooter(o, i);
        const l = this._size = mF(this, i), c = Object.assign({}, a, l), u = bF(this.chart, i, c), h = vF(i, c, u, this.chart);
        this.xAlign = u.xAlign, this.yAlign = u.yAlign, s = {
          opacity: 1,
          x: h.x,
          y: h.y,
          width: l.width,
          height: l.height,
          caretX: a.x,
          caretY: a.y
        };
      }
      this._tooltipItems = o, this.$context = void 0, s && this._resolveAnimations().update(this, s), e && i.external && i.external.call(this, {
        chart: this.chart,
        tooltip: this,
        replay: t
      });
    }
    drawCaret(e, t, i, r) {
      const s = this.getCaretPosition(e, i, r);
      t.lineTo(s.x1, s.y1), t.lineTo(s.x2, s.y2), t.lineTo(s.x3, s.y3);
    }
    getCaretPosition(e, t, i) {
      const {
        xAlign: r,
        yAlign: s
      } = this, {
        caretSize: o,
        cornerRadius: a
      } = i, {
        topLeft: l,
        topRight: c,
        bottomLeft: u,
        bottomRight: h
      } = Ld(a), {
        x: d,
        y: f
      } = e, {
        width: g,
        height: p
      } = t;
      let m, v, y, w, R, E;
      return s === "center" ? (R = f + p / 2, r === "left" ? (m = d, v = m - o, w = R + o, E = R - o) : (m = d + g, v = m + o, w = R - o, E = R + o), y = m) : (r === "left" ? v = d + Math.max(l, u) + o : r === "right" ? v = d + g - Math.max(c, h) - o : v = this.caretX, s === "top" ? (w = f, R = w - o, m = v - o, y = v + o) : (w = f + p, R = w + o, m = v + o, y = v - o), E = w), {
        x1: m,
        x2: v,
        x3: y,
        y1: w,
        y2: R,
        y3: E
      };
    }
    drawTitle(e, t, i) {
      const r = this.title, s = r.length;
      let o, a, l;
      if (s) {
        const c = tp(i.rtl, this.x, this.width);
        for (e.x = Xy(this, i.titleAlign, i), t.textAlign = c.textAlign(i.titleAlign), t.textBaseline = "middle", o = Ri(i.titleFont), a = i.titleSpacing, t.fillStyle = i.titleColor, t.font = o.string, l = 0; l < s; ++l)
          t.fillText(r[l], c.x(e.x), e.y + o.lineHeight / 2), e.y += o.lineHeight + a, l + 1 === s && (e.y += i.titleMarginBottom - a);
      }
    }
    _drawColorBox(e, t, i, r, s) {
      const o = this.labelColors[i], a = this.labelPointStyles[i], {
        boxHeight: l,
        boxWidth: c
      } = s, u = Ri(s.bodyFont), h = Xy(this, "left", s), d = r.x(h), f = l < u.lineHeight ? (u.lineHeight - l) / 2 : 0, g = t.y + f;
      if (s.usePointStyle) {
        const p = {
          radius: Math.min(c, l) / 2,
          pointStyle: a.pointStyle,
          rotation: a.rotation,
          borderWidth: 1
        }, m = r.leftForLtr(d, c) + c / 2, v = g + l / 2;
        e.strokeStyle = s.multiKeyBackground, e.fillStyle = s.multiKeyBackground, d_(e, p, m, v), e.strokeStyle = o.borderColor, e.fillStyle = o.backgroundColor, d_(e, p, m, v);
      } else {
        e.lineWidth = Rt(o.borderWidth) ? Math.max(...Object.values(o.borderWidth)) : o.borderWidth || 1, e.strokeStyle = o.borderColor, e.setLineDash(o.borderDash || []), e.lineDashOffset = o.borderDashOffset || 0;
        const p = r.leftForLtr(d, c), m = r.leftForLtr(r.xPlus(d, 1), c - 2), v = Ld(o.borderRadius);
        Object.values(v).some((y) => y !== 0) ? (e.beginPath(), e.fillStyle = s.multiKeyBackground, iw(e, {
          x: p,
          y: g,
          w: c,
          h: l,
          radius: v
        }), e.fill(), e.stroke(), e.fillStyle = o.backgroundColor, e.beginPath(), iw(e, {
          x: m,
          y: g + 1,
          w: c - 2,
          h: l - 2,
          radius: v
        }), e.fill()) : (e.fillStyle = s.multiKeyBackground, e.fillRect(p, g, c, l), e.strokeRect(p, g, c, l), e.fillStyle = o.backgroundColor, e.fillRect(m, g + 1, c - 2, l - 2));
      }
      e.fillStyle = this.labelTextColors[i];
    }
    drawBody(e, t, i) {
      const {
        body: r
      } = this, {
        bodySpacing: s,
        bodyAlign: o,
        displayColors: a,
        boxHeight: l,
        boxWidth: c,
        boxPadding: u
      } = i, h = Ri(i.bodyFont);
      let d = h.lineHeight, f = 0;
      const g = tp(i.rtl, this.x, this.width), p = function(P) {
        t.fillText(P, g.x(e.x + f), e.y + d / 2), e.y += d + s;
      }, m = g.textAlign(o);
      let v, y, w, R, E, C, T;
      for (t.textAlign = o, t.textBaseline = "middle", t.font = h.string, e.x = Xy(this, m, i), t.fillStyle = i.bodyColor, Jt(this.beforeBody, p), f = a && m !== "right" ? o === "center" ? c / 2 + u : c + 2 + u : 0, R = 0, C = r.length; R < C; ++R) {
        for (v = r[R], y = this.labelTextColors[R], t.fillStyle = y, Jt(v.before, p), w = v.lines, a && w.length && (this._drawColorBox(t, e, R, g, i), d = Math.max(h.lineHeight, l)), E = 0, T = w.length; E < T; ++E)
          p(w[E]), d = h.lineHeight;
        Jt(v.after, p);
      }
      f = 0, d = h.lineHeight, Jt(this.afterBody, p), e.y -= s;
    }
    drawFooter(e, t, i) {
      const r = this.footer, s = r.length;
      let o, a;
      if (s) {
        const l = tp(i.rtl, this.x, this.width);
        for (e.x = Xy(this, i.footerAlign, i), e.y += i.footerMarginTop, t.textAlign = l.textAlign(i.footerAlign), t.textBaseline = "middle", o = Ri(i.footerFont), t.fillStyle = i.footerColor, t.font = o.string, a = 0; a < s; ++a)
          t.fillText(r[a], l.x(e.x), e.y + o.lineHeight / 2), e.y += o.lineHeight + i.footerSpacing;
      }
    }
    drawBackground(e, t, i, r) {
      const {
        xAlign: s,
        yAlign: o
      } = this, {
        x: a,
        y: l
      } = e, {
        width: c,
        height: u
      } = i, {
        topLeft: h,
        topRight: d,
        bottomLeft: f,
        bottomRight: g
      } = Ld(r.cornerRadius);
      t.fillStyle = r.backgroundColor, t.strokeStyle = r.borderColor, t.lineWidth = r.borderWidth, t.beginPath(), t.moveTo(a + h, l), o === "top" && this.drawCaret(e, t, i, r), t.lineTo(a + c - d, l), t.quadraticCurveTo(a + c, l, a + c, l + d), o === "center" && s === "right" && this.drawCaret(e, t, i, r), t.lineTo(a + c, l + u - g), t.quadraticCurveTo(a + c, l + u, a + c - g, l + u), o === "bottom" && this.drawCaret(e, t, i, r), t.lineTo(a + f, l + u), t.quadraticCurveTo(a, l + u, a, l + u - f), o === "center" && s === "left" && this.drawCaret(e, t, i, r), t.lineTo(a, l + h), t.quadraticCurveTo(a, l, a + h, l), t.closePath(), t.fill(), r.borderWidth > 0 && t.stroke();
    }
    _updateAnimationTarget(e) {
      const t = this.chart, i = this.$animations, r = i && i.x, s = i && i.y;
      if (r || s) {
        const o = gv[e.position].call(this, this._active, this._eventPosition);
        if (!o)
          return;
        const a = this._size = mF(this, e), l = Object.assign({}, o, this._size), c = bF(t, e, l), u = vF(e, l, c, t);
        (r._to !== u.x || s._to !== u.y) && (this.xAlign = c.xAlign, this.yAlign = c.yAlign, this.width = a.width, this.height = a.height, this.caretX = o.x, this.caretY = o.y, this._resolveAnimations().update(this, u));
      }
    }
    _willRender() {
      return !!this.opacity;
    }
    draw(e) {
      const t = this.options.setContext(this.getContext());
      let i = this.opacity;
      if (!i)
        return;
      this._updateAnimationTarget(t);
      const r = {
        width: this.width,
        height: this.height
      }, s = {
        x: this.x,
        y: this.y
      };
      i = Math.abs(i) < 1e-3 ? 0 : i;
      const o = gr(t.padding), a = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;
      t.enabled && a && (e.save(), e.globalAlpha = i, this.drawBackground(s, e, r, t), Z8(e, t.textDirection), s.y += o.top, this.drawTitle(s, e, t), this.drawBody(s, e, t), this.drawFooter(s, e, t), Q8(e, t.textDirection), e.restore());
    }
    getActiveElements() {
      return this._active || [];
    }
    setActiveElements(e, t) {
      const i = this._active, r = e.map(({
        datasetIndex: a,
        index: l
      }) => {
        const c = this.chart.getDatasetMeta(a);
        if (!c)
          throw new Error("Cannot find a dataset at index " + a);
        return {
          datasetIndex: a,
          element: c.data[l],
          index: l
        };
      }), s = !l_(i, r), o = this._positionChanged(r, t);
      (s || o) && (this._active = r, this._eventPosition = t, this._ignoreReplayEvents = !0, this.update(!0));
    }
    handleEvent(e, t, i = !0) {
      if (t && this._ignoreReplayEvents)
        return !1;
      this._ignoreReplayEvents = !1;
      const r = this.options, s = this._active || [], o = this._getActiveElements(e, s, t, i), a = this._positionChanged(o, e), l = t || !l_(o, s) || a;
      return l && (this._active = o, (r.enabled || r.external) && (this._eventPosition = {
        x: e.x,
        y: e.y
      }, this.update(!0, t))), l;
    }
    _getActiveElements(e, t, i, r) {
      const s = this.options;
      if (e.type === "mouseout")
        return [];
      if (!r)
        return t.filter((a) => this.chart.data.datasets[a.datasetIndex] && this.chart.getDatasetMeta(a.datasetIndex).controller.getParsed(a.index) !== void 0);
      const o = this.chart.getElementsAtEventForMode(e, s.mode, s, i);
      return s.reverse && o.reverse(), o;
    }
    _positionChanged(e, t) {
      const {
        caretX: i,
        caretY: r,
        options: s
      } = this, o = gv[s.position].call(this, e, t);
      return o !== !1 && (i !== o.x || r !== o.y);
    }
  }
  oP.positioners = gv;
  var Dle = {
    id: "tooltip",
    _element: oP,
    positioners: gv,
    afterInit(n, e, t) {
      t && (n.tooltip = new oP({
        chart: n,
        options: t
      }));
    },
    beforeUpdate(n, e, t) {
      n.tooltip && n.tooltip.initialize(t);
    },
    reset(n, e, t) {
      n.tooltip && n.tooltip.initialize(t);
    },
    afterDraw(n) {
      const e = n.tooltip;
      if (e && e._willRender()) {
        const t = {
          tooltip: e
        };
        if (n.notifyPlugins("beforeTooltipDraw", {
          ...t,
          cancelable: !0
        }) === !1)
          return;
        e.draw(n.ctx), n.notifyPlugins("afterTooltipDraw", t);
      }
    },
    afterEvent(n, e) {
      if (n.tooltip) {
        const t = e.replay;
        n.tooltip.handleEvent(e.event, t, e.inChartArea) && (e.changed = !0);
      }
    },
    defaults: {
      enabled: !0,
      external: null,
      position: "average",
      backgroundColor: "rgba(0,0,0,0.8)",
      titleColor: "#fff",
      titleFont: {
        weight: "bold"
      },
      titleSpacing: 2,
      titleMarginBottom: 6,
      titleAlign: "left",
      bodyColor: "#fff",
      bodySpacing: 2,
      bodyFont: {},
      bodyAlign: "left",
      footerColor: "#fff",
      footerSpacing: 2,
      footerMarginTop: 6,
      footerFont: {
        weight: "bold"
      },
      footerAlign: "left",
      padding: 6,
      caretPadding: 2,
      caretSize: 5,
      cornerRadius: 6,
      boxHeight: (n, e) => e.bodyFont.size,
      boxWidth: (n, e) => e.bodyFont.size,
      multiKeyBackground: "#fff",
      displayColors: !0,
      boxPadding: 0,
      borderColor: "rgba(0,0,0,0)",
      borderWidth: 0,
      animation: {
        duration: 400,
        easing: "easeOutQuart"
      },
      animations: {
        numbers: {
          type: "number",
          properties: ["x", "y", "width", "height", "caretX", "caretY"]
        },
        opacity: {
          easing: "linear",
          duration: 200
        }
      },
      callbacks: R4
    },
    defaultRoutes: {
      bodyFont: "font",
      footerFont: "font",
      titleFont: "font"
    },
    descriptors: {
      _scriptable: (n) => n !== "filter" && n !== "itemSort" && n !== "external",
      _indexable: !1,
      callbacks: {
        _scriptable: !1,
        _indexable: !1
      },
      animation: {
        _fallback: !1
      },
      animations: {
        _fallback: "animation"
      }
    },
    additionalOptionScopes: ["interaction"]
  }, Nle = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    Colors: Yae,
    Decimation: Zae,
    Filler: ble,
    Legend: _le,
    SubTitle: xle,
    Title: Ele,
    Tooltip: Dle
  });
  const Lle = (n, e, t, i) => (typeof e == "string" ? (t = n.push(e) - 1, i.unshift({
    index: t,
    label: e
  })) : isNaN(e) && (t = null), t);
  function Hle(n, e, t, i) {
    const r = n.indexOf(e);
    if (r === -1)
      return Lle(n, e, t, i);
    const s = n.lastIndexOf(e);
    return r !== s ? t : r;
  }
  const $le = (n, e) => n === null ? null : Hi(Math.round(n), 0, e);
  function E4(n) {
    const e = this.getLabels();
    return n >= 0 && n < e.length ? e[n] : n;
  }
  class vk extends oh {
    constructor(e) {
      super(e), this._startValue = void 0, this._valueRange = 0, this._addedLabels = [];
    }
    init(e) {
      const t = this._addedLabels;
      if (t.length) {
        const i = this.getLabels();
        for (const {
          index: r,
          label: s
        } of t)
          i[r] === s && i.splice(r, 1);
        this._addedLabels = [];
      }
      super.init(e);
    }
    parse(e, t) {
      if (kt(e))
        return null;
      const i = this.getLabels();
      return t = isFinite(t) && i[t] === e ? t : Hle(i, e, tt(t, e), this._addedLabels), $le(t, i.length - 1);
    }
    determineDataLimits() {
      const {
        minDefined: e,
        maxDefined: t
      } = this.getUserBounds();
      let {
        min: i,
        max: r
      } = this.getMinMax(!0);
      this.options.bounds === "ticks" && (e || (i = 0), t || (r = this.getLabels().length - 1)), this.min = i, this.max = r;
    }
    buildTicks() {
      const e = this.min, t = this.max, i = this.options.offset, r = [];
      let s = this.getLabels();
      s = e === 0 && t === s.length - 1 ? s : s.slice(e, t + 1), this._valueRange = Math.max(s.length - (i ? 0 : 1), 1), this._startValue = this.min - (i ? 0.5 : 0);
      for (let o = e; o <= t; o++)
        r.push({
          value: o
        });
      return r;
    }
    getLabelForValue(e) {
      return E4.call(this, e);
    }
    configure() {
      super.configure(), this.isHorizontal() || (this._reversePixels = !this._reversePixels);
    }
    getPixelForValue(e) {
      return typeof e != "number" && (e = this.parse(e)), e === null ? NaN : this.getPixelForDecimal((e - this._startValue) / this._valueRange);
    }
    getPixelForTick(e) {
      const t = this.ticks;
      return e < 0 || e > t.length - 1 ? null : this.getPixelForValue(t[e].value);
    }
    getValueForPixel(e) {
      return Math.round(this._startValue + this.getDecimalForPixel(e) * this._valueRange);
    }
    getBasePixel() {
      return this.bottom;
    }
  }
  vk.id = "category";
  vk.defaults = {
    ticks: {
      callback: E4
    }
  };
  function Fle(n, e) {
    const t = [], {
      bounds: r,
      step: s,
      min: o,
      max: a,
      precision: l,
      count: c,
      maxTicks: u,
      maxDigits: h,
      includeBounds: d
    } = n, f = s || 1, g = u - 1, {
      min: p,
      max: m
    } = e, v = !kt(o), y = !kt(a), w = !kt(c), R = (m - p) / (h + 1);
    let E = b2((m - p) / g / f) * f, C, T, P, x;
    if (E < 1e-14 && !v && !y)
      return [{
        value: p
      }, {
        value: m
      }];
    x = Math.ceil(m / E) - Math.floor(p / E), x > g && (E = b2(x * E / g / f) * f), kt(l) || (C = Math.pow(10, l), E = Math.ceil(E * C) / C), r === "ticks" ? (T = Math.floor(p / E) * E, P = Math.ceil(m / E) * E) : (T = p, P = m), v && y && s && Ore((a - o) / s, E / 1e3) ? (x = Math.round(Math.min((a - o) / E, u)), E = (a - o) / x, T = o, P = a) : w ? (T = v ? o : T, P = y ? a : P, x = c - 1, E = (P - T) / x) : (x = (P - T) / E, hv(x, Math.round(x), E / 1e3) ? x = Math.round(x) : x = Math.ceil(x));
    const A = Math.max(v2(E), v2(T));
    C = Math.pow(10, kt(l) ? A : l), T = Math.round(T * C) / C, P = Math.round(P * C) / C;
    let D = 0;
    for (v && (d && T !== o ? (t.push({
      value: o
    }), T < o && D++, hv(Math.round((T + D * E) * C) / C, o, CF(o, R, n)) && D++) : T < o && D++); D < x; ++D) {
      const B = Math.round((T + D * E) * C) / C;
      if (y && B > a)
        break;
      t.push({
        value: B
      });
    }
    return y && d && P !== a ? t.length && hv(t[t.length - 1].value, a, CF(a, R, n)) ? t[t.length - 1].value = a : t.push({
      value: a
    }) : (!y || P === a) && t.push({
      value: P
    }), t;
  }
  function CF(n, e, {
    horizontal: t,
    minRotation: i
  }) {
    const r = Ko(i), s = (t ? Math.sin(r) : Math.cos(r)) || 1e-3, o = 0.75 * e * ("" + n).length;
    return Math.min(e / s, o);
  }
  class b_ extends oh {
    constructor(e) {
      super(e), this.start = void 0, this.end = void 0, this._startValue = void 0, this._endValue = void 0, this._valueRange = 0;
    }
    parse(e, t) {
      return kt(e) || (typeof e == "number" || e instanceof Number) && !isFinite(+e) ? null : +e;
    }
    handleTickRangeOptions() {
      const {
        beginAtZero: e
      } = this.options, {
        minDefined: t,
        maxDefined: i
      } = this.getUserBounds();
      let {
        min: r,
        max: s
      } = this;
      const o = (l) => r = t ? r : l, a = (l) => s = i ? s : l;
      if (e) {
        const l = Qa(r), c = Qa(s);
        l < 0 && c < 0 ? a(0) : l > 0 && c > 0 && o(0);
      }
      if (r === s) {
        let l = s === 0 ? 1 : Math.abs(s * 0.05);
        a(s + l), e || o(r - l);
      }
      this.min = r, this.max = s;
    }
    getTickLimit() {
      const e = this.options.ticks;
      let {
        maxTicksLimit: t,
        stepSize: i
      } = e, r;
      return i ? (r = Math.ceil(this.max / i) - Math.floor(this.min / i) + 1, r > 1e3 && (console.warn(`scales.${this.id}.ticks.stepSize: ${i} would result generating up to ${r} ticks. Limiting to 1000.`), r = 1e3)) : (r = this.computeTickLimit(), t = t || 11), t && (r = Math.min(t, r)), r;
    }
    computeTickLimit() {
      return Number.POSITIVE_INFINITY;
    }
    buildTicks() {
      const e = this.options, t = e.ticks;
      let i = this.getTickLimit();
      i = Math.max(2, i);
      const r = {
        maxTicks: i,
        bounds: e.bounds,
        min: e.min,
        max: e.max,
        precision: t.precision,
        step: t.stepSize,
        count: t.count,
        maxDigits: this._maxDigits(),
        horizontal: this.isHorizontal(),
        minRotation: t.minRotation || 0,
        includeBounds: t.includeBounds !== !1
      }, s = this._range || this, o = Fle(r, s);
      return e.bounds === "ticks" && D8(o, this, "value"), e.reverse ? (o.reverse(), this.start = this.max, this.end = this.min) : (this.start = this.min, this.end = this.max), o;
    }
    configure() {
      const e = this.ticks;
      let t = this.min, i = this.max;
      if (super.configure(), this.options.offset && e.length) {
        const r = (i - t) / Math.max(e.length - 1, 1) / 2;
        t -= r, i += r;
      }
      this._startValue = t, this._endValue = i, this._valueRange = i - t;
    }
    getLabelForValue(e) {
      return Vw(e, this.chart.options.locale, this.options.ticks.format);
    }
  }
  class Wp extends b_ {
    determineDataLimits() {
      const {
        min: e,
        max: t
      } = this.getMinMax(!0);
      this.min = ei(e) ? e : 0, this.max = ei(t) ? t : 1, this.handleTickRangeOptions();
    }
    computeTickLimit() {
      const e = this.isHorizontal(), t = e ? this.width : this.height, i = Ko(this.options.ticks.minRotation), r = (e ? Math.sin(i) : Math.cos(i)) || 1e-3, s = this._resolveTickFontOptions(0);
      return Math.ceil(t / Math.min(40, s.lineHeight / r));
    }
    getPixelForValue(e) {
      return e === null ? NaN : this.getPixelForDecimal((e - this._startValue) / this._valueRange);
    }
    getValueForPixel(e) {
      return this._startValue + this.getDecimalForPixel(e) * this._valueRange;
    }
  }
  Wp.id = "linear";
  Wp.defaults = {
    ticks: {
      callback: JR.formatters.numeric
    }
  };
  const sw = (n) => Math.floor(Eu(n)), vh = (n, e) => Math.pow(10, sw(n) + e);
  function SF(n) {
    return n / Math.pow(10, sw(n)) === 1;
  }
  function _F(n, e, t) {
    const i = Math.pow(10, t), r = Math.floor(n / i);
    return Math.ceil(e / i) - r;
  }
  function Ble(n, e) {
    const t = e - n;
    let i = sw(t);
    for (; _F(n, e, i) > 10; )
      i++;
    for (; _F(n, e, i) < 10; )
      i--;
    return Math.min(i, sw(n));
  }
  function Vle(n, {
    min: e,
    max: t
  }) {
    e = as(n.min, e);
    const i = [], r = sw(e);
    let s = Ble(e, t), o = s < 0 ? Math.pow(10, Math.abs(s)) : 1;
    const a = Math.pow(10, s), l = r > s ? Math.pow(10, r) : 0, c = Math.round((e - l) * o) / o, u = Math.floor((e - l) / a / 10) * a * 10;
    let h = Math.floor((c - u) / Math.pow(10, s)), d = as(n.min, Math.round((l + u + h * Math.pow(10, s)) * o) / o);
    for (; d < t; )
      i.push({
        value: d,
        major: SF(d),
        significand: h
      }), h >= 10 ? h = h < 15 ? 15 : 20 : h++, h >= 20 && (s++, h = 2, o = s >= 0 ? 1 : o), d = Math.round((l + u + h * Math.pow(10, s)) * o) / o;
    const f = as(n.max, d);
    return i.push({
      value: f,
      major: SF(f),
      significand: h
    }), i;
  }
  class jp extends oh {
    constructor(e) {
      super(e), this.start = void 0, this.end = void 0, this._startValue = void 0, this._valueRange = 0;
    }
    parse(e, t) {
      const i = b_.prototype.parse.apply(this, [e, t]);
      if (i === 0) {
        this._zero = !0;
        return;
      }
      return ei(i) && i > 0 ? i : null;
    }
    determineDataLimits() {
      const {
        min: e,
        max: t
      } = this.getMinMax(!0);
      this.min = ei(e) ? Math.max(0, e) : null, this.max = ei(t) ? Math.max(0, t) : null, this.options.beginAtZero && (this._zero = !0), this._zero && this.min !== this._suggestedMin && !ei(this._userMin) && (this.min = e === vh(this.min, 0) ? vh(this.min, -1) : vh(this.min, 0)), this.handleTickRangeOptions();
    }
    handleTickRangeOptions() {
      const {
        minDefined: e,
        maxDefined: t
      } = this.getUserBounds();
      let i = this.min, r = this.max;
      const s = (a) => i = e ? i : a, o = (a) => r = t ? r : a;
      i === r && (i <= 0 ? (s(1), o(10)) : (s(vh(i, -1)), o(vh(r, 1)))), i <= 0 && s(vh(r, -1)), r <= 0 && o(vh(i, 1)), this.min = i, this.max = r;
    }
    buildTicks() {
      const e = this.options, t = {
        min: this._userMin,
        max: this._userMax
      }, i = Vle(t, this);
      return e.bounds === "ticks" && D8(i, this, "value"), e.reverse ? (i.reverse(), this.start = this.max, this.end = this.min) : (this.start = this.min, this.end = this.max), i;
    }
    getLabelForValue(e) {
      return e === void 0 ? "0" : Vw(e, this.chart.options.locale, this.options.ticks.format);
    }
    configure() {
      const e = this.min;
      super.configure(), this._startValue = Eu(e), this._valueRange = Eu(this.max) - Eu(e);
    }
    getPixelForValue(e) {
      return (e === void 0 || e === 0) && (e = this.min), e === null || isNaN(e) ? NaN : this.getPixelForDecimal(e === this.min ? 0 : (Eu(e) - this._startValue) / this._valueRange);
    }
    getValueForPixel(e) {
      const t = this.getDecimalForPixel(e);
      return Math.pow(10, this._startValue + t * this._valueRange);
    }
  }
  jp.id = "logarithmic";
  jp.defaults = {
    ticks: {
      callback: JR.formatters.logarithmic,
      major: {
        enabled: !0
      }
    }
  };
  function aP(n) {
    const e = n.ticks;
    if (e.display && n.display) {
      const t = gr(e.backdropPadding);
      return tt(e.font && e.font.size, On.font.size) + t.height;
    }
    return 0;
  }
  function Wle(n, e, t) {
    return t = Pn(t) ? t : [t], {
      w: qre(n, e.string, t),
      h: t.length * e.lineHeight
    };
  }
  function RF(n, e, t, i, r) {
    return n === i || n === r ? {
      start: e - t / 2,
      end: e + t / 2
    } : n < i || n > r ? {
      start: e - t,
      end: e
    } : {
      start: e,
      end: e + t
    };
  }
  function jle(n) {
    const e = {
      l: n.left + n._padding.left,
      r: n.right - n._padding.right,
      t: n.top + n._padding.top,
      b: n.bottom - n._padding.bottom
    }, t = Object.assign({}, e), i = [], r = [], s = n._pointLabels.length, o = n.options.pointLabels, a = o.centerPointLabels ? _n / s : 0;
    for (let l = 0; l < s; l++) {
      const c = o.setContext(n.getPointLabelContext(l));
      r[l] = c.padding;
      const u = n.getPointPosition(l, n.drawingArea + r[l], a), h = Ri(c.font), d = Wle(n.ctx, h, n._pointLabels[l]);
      i[l] = d;
      const f = gs(n.getIndexAngle(l) + a), g = Math.round(rk(f)), p = RF(g, u.x, d.w, 0, 180), m = RF(g, u.y, d.h, 90, 270);
      zle(t, e, f, p, m);
    }
    n.setCenterPoint(e.l - t.l, t.r - e.r, e.t - t.t, t.b - e.b), n._pointLabelItems = Yle(n, i, r);
  }
  function zle(n, e, t, i, r) {
    const s = Math.abs(Math.sin(t)), o = Math.abs(Math.cos(t));
    let a = 0, l = 0;
    i.start < e.l ? (a = (e.l - i.start) / s, n.l = Math.min(n.l, e.l - a)) : i.end > e.r && (a = (i.end - e.r) / s, n.r = Math.max(n.r, e.r + a)), r.start < e.t ? (l = (e.t - r.start) / o, n.t = Math.min(n.t, e.t - l)) : r.end > e.b && (l = (r.end - e.b) / o, n.b = Math.max(n.b, e.b + l));
  }
  function Ule(n, e, t) {
    const i = n.drawingArea, {
      extra: r,
      additionalAngle: s,
      padding: o,
      size: a
    } = t, l = n.getPointPosition(e, i + r + o, s), c = Math.round(rk(gs(l.angle + si))), u = Xle(l.y, a.h, c), h = Kle(c), d = qle(l.x, a.w, h);
    return {
      visible: !0,
      x: l.x,
      y: u,
      textAlign: h,
      left: d,
      top: u,
      right: d + a.w,
      bottom: u + a.h
    };
  }
  function Gle(n, e) {
    if (!e)
      return !0;
    const {
      left: t,
      top: i,
      right: r,
      bottom: s
    } = n;
    return !(uc({
      x: t,
      y: i
    }, e) || uc({
      x: t,
      y: s
    }, e) || uc({
      x: r,
      y: i
    }, e) || uc({
      x: r,
      y: s
    }, e));
  }
  function Yle(n, e, t) {
    const i = [], r = n._pointLabels.length, s = n.options, {
      centerPointLabels: o,
      display: a
    } = s.pointLabels, l = {
      extra: aP(s) / 2,
      additionalAngle: o ? _n / r : 0
    };
    let c;
    for (let u = 0; u < r; u++) {
      l.padding = t[u], l.size = e[u];
      const h = Ule(n, u, l);
      i.push(h), a === "auto" && (h.visible = Gle(h, c), h.visible && (c = h));
    }
    return i;
  }
  function Kle(n) {
    return n === 0 || n === 180 ? "center" : n < 180 ? "left" : "right";
  }
  function qle(n, e, t) {
    return t === "right" ? n -= e : t === "center" && (n -= e / 2), n;
  }
  function Xle(n, e, t) {
    return t === 90 || t === 270 ? n -= e / 2 : (t > 270 || t < 90) && (n -= e), n;
  }
  function Zle(n, e, t) {
    const {
      left: i,
      top: r,
      right: s,
      bottom: o
    } = t, {
      backdropColor: a
    } = e;
    if (!kt(a)) {
      const l = Ld(e.borderRadius), c = gr(e.backdropPadding);
      n.fillStyle = a;
      const u = i - c.left, h = r - c.top, d = s - i + c.width, f = o - r + c.height;
      Object.values(l).some((g) => g !== 0) ? (n.beginPath(), iw(n, {
        x: u,
        y: h,
        w: d,
        h: f,
        radius: l
      }), n.fill()) : n.fillRect(u, h, d, f);
    }
  }
  function Qle(n, e) {
    const {
      ctx: t,
      options: {
        pointLabels: i
      }
    } = n;
    for (let r = e - 1; r >= 0; r--) {
      const s = n._pointLabelItems[r];
      if (!s.visible)
        continue;
      const o = i.setContext(n.getPointLabelContext(r));
      Zle(t, o, s);
      const a = Ri(o.font), {
        x: l,
        y: c,
        textAlign: u
      } = s;
      Jd(t, n._pointLabels[r], l, c + a.lineHeight / 2, a, {
        color: o.color,
        textAlign: u,
        textBaseline: "middle"
      });
    }
  }
  function x4(n, e, t, i) {
    const {
      ctx: r
    } = n;
    if (t)
      r.arc(n.xCenter, n.yCenter, e, 0, Sn);
    else {
      let s = n.getPointPosition(0, e);
      r.moveTo(s.x, s.y);
      for (let o = 1; o < i; o++)
        s = n.getPointPosition(o, e), r.lineTo(s.x, s.y);
    }
  }
  function Jle(n, e, t, i, r) {
    const s = n.ctx, o = e.circular, {
      color: a,
      lineWidth: l
    } = e;
    !o && !i || !a || !l || t < 0 || (s.save(), s.strokeStyle = a, s.lineWidth = l, s.setLineDash(r.dash || []), s.lineDashOffset = r.dashOffset, s.beginPath(), x4(n, t, o, i), s.closePath(), s.stroke(), s.restore());
  }
  function ece(n, e, t) {
    return sh(n, {
      label: t,
      index: e,
      type: "pointLabel"
    });
  }
  class Gw extends b_ {
    constructor(e) {
      super(e), this.xCenter = void 0, this.yCenter = void 0, this.drawingArea = void 0, this._pointLabels = [], this._pointLabelItems = [];
    }
    setDimensions() {
      const e = this._padding = gr(aP(this.options) / 2), t = this.width = this.maxWidth - e.width, i = this.height = this.maxHeight - e.height;
      this.xCenter = Math.floor(this.left + t / 2 + e.left), this.yCenter = Math.floor(this.top + i / 2 + e.top), this.drawingArea = Math.floor(Math.min(t, i) / 2);
    }
    determineDataLimits() {
      const {
        min: e,
        max: t
      } = this.getMinMax(!1);
      this.min = ei(e) && !isNaN(e) ? e : 0, this.max = ei(t) && !isNaN(t) ? t : 0, this.handleTickRangeOptions();
    }
    computeTickLimit() {
      return Math.ceil(this.drawingArea / aP(this.options));
    }
    generateTickLabels(e) {
      b_.prototype.generateTickLabels.call(this, e), this._pointLabels = this.getLabels().map((t, i) => {
        const r = bn(this.options.pointLabels.callback, [t, i], this);
        return r || r === 0 ? r : "";
      }).filter((t, i) => this.chart.getDataVisibility(i));
    }
    fit() {
      const e = this.options;
      e.display && e.pointLabels.display ? jle(this) : this.setCenterPoint(0, 0, 0, 0);
    }
    setCenterPoint(e, t, i, r) {
      this.xCenter += Math.floor((e - t) / 2), this.yCenter += Math.floor((i - r) / 2), this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(e, t, i, r));
    }
    getIndexAngle(e) {
      const t = Sn / (this._pointLabels.length || 1), i = this.options.startAngle || 0;
      return gs(e * t + Ko(i));
    }
    getDistanceFromCenterForValue(e) {
      if (kt(e))
        return NaN;
      const t = this.drawingArea / (this.max - this.min);
      return this.options.reverse ? (this.max - e) * t : (e - this.min) * t;
    }
    getValueForDistanceFromCenter(e) {
      if (kt(e))
        return NaN;
      const t = e / (this.drawingArea / (this.max - this.min));
      return this.options.reverse ? this.max - t : this.min + t;
    }
    getPointLabelContext(e) {
      const t = this._pointLabels || [];
      if (e >= 0 && e < t.length) {
        const i = t[e];
        return ece(this.getContext(), e, i);
      }
    }
    getPointPosition(e, t, i = 0) {
      const r = this.getIndexAngle(e) - si + i;
      return {
        x: Math.cos(r) * t + this.xCenter,
        y: Math.sin(r) * t + this.yCenter,
        angle: r
      };
    }
    getPointPositionForValue(e, t) {
      return this.getPointPosition(e, this.getDistanceFromCenterForValue(t));
    }
    getBasePosition(e) {
      return this.getPointPositionForValue(e || 0, this.getBaseValue());
    }
    getPointLabelPosition(e) {
      const {
        left: t,
        top: i,
        right: r,
        bottom: s
      } = this._pointLabelItems[e];
      return {
        left: t,
        top: i,
        right: r,
        bottom: s
      };
    }
    drawBackground() {
      const {
        backgroundColor: e,
        grid: {
          circular: t
        }
      } = this.options;
      if (e) {
        const i = this.ctx;
        i.save(), i.beginPath(), x4(this, this.getDistanceFromCenterForValue(this._endValue), t, this._pointLabels.length), i.closePath(), i.fillStyle = e, i.fill(), i.restore();
      }
    }
    drawGrid() {
      const e = this.ctx, t = this.options, {
        angleLines: i,
        grid: r,
        border: s
      } = t, o = this._pointLabels.length;
      let a, l, c;
      if (t.pointLabels.display && Qle(this, o), r.display && this.ticks.forEach((u, h) => {
        if (h !== 0 || h === 0 && this.min < 0) {
          l = this.getDistanceFromCenterForValue(u.value);
          const d = this.getContext(h), f = r.setContext(d), g = s.setContext(d);
          Jle(this, f, l, o, g);
        }
      }), i.display) {
        for (e.save(), a = o - 1; a >= 0; a--) {
          const u = i.setContext(this.getPointLabelContext(a)), {
            color: h,
            lineWidth: d
          } = u;
          !d || !h || (e.lineWidth = d, e.strokeStyle = h, e.setLineDash(u.borderDash), e.lineDashOffset = u.borderDashOffset, l = this.getDistanceFromCenterForValue(t.reverse ? this.min : this.max), c = this.getPointPosition(a, l), e.beginPath(), e.moveTo(this.xCenter, this.yCenter), e.lineTo(c.x, c.y), e.stroke());
        }
        e.restore();
      }
    }
    drawBorder() {
    }
    drawLabels() {
      const e = this.ctx, t = this.options, i = t.ticks;
      if (!i.display)
        return;
      const r = this.getIndexAngle(0);
      let s, o;
      e.save(), e.translate(this.xCenter, this.yCenter), e.rotate(r), e.textAlign = "center", e.textBaseline = "middle", this.ticks.forEach((a, l) => {
        if (l === 0 && this.min >= 0 && !t.reverse)
          return;
        const c = i.setContext(this.getContext(l)), u = Ri(c.font);
        if (s = this.getDistanceFromCenterForValue(this.ticks[l].value), c.showLabelBackdrop) {
          e.font = u.string, o = e.measureText(a.label).width, e.fillStyle = c.backdropColor;
          const h = gr(c.backdropPadding);
          e.fillRect(-o / 2 - h.left, -s - u.size / 2 - h.top, o + h.width, u.size + h.height);
        }
        Jd(e, a.label, 0, -s, u, {
          color: c.color,
          strokeColor: c.textStrokeColor,
          strokeWidth: c.textStrokeWidth
        });
      }), e.restore();
    }
    drawTitle() {
    }
  }
  Gw.id = "radialLinear";
  Gw.defaults = {
    display: !0,
    animate: !0,
    position: "chartArea",
    angleLines: {
      display: !0,
      lineWidth: 1,
      borderDash: [],
      borderDashOffset: 0
    },
    grid: {
      circular: !1
    },
    startAngle: 0,
    ticks: {
      showLabelBackdrop: !0,
      callback: JR.formatters.numeric
    },
    pointLabels: {
      backdropColor: void 0,
      backdropPadding: 2,
      display: !0,
      font: {
        size: 10
      },
      callback(n) {
        return n;
      },
      padding: 5,
      centerPointLabels: !1
    }
  };
  Gw.defaultRoutes = {
    "angleLines.color": "borderColor",
    "pointLabels.color": "color",
    "ticks.color": "color"
  };
  Gw.descriptors = {
    angleLines: {
      _fallback: "grid"
    }
  };
  const o1 = {
    millisecond: {
      common: !0,
      size: 1,
      steps: 1e3
    },
    second: {
      common: !0,
      size: 1e3,
      steps: 60
    },
    minute: {
      common: !0,
      size: 6e4,
      steps: 60
    },
    hour: {
      common: !0,
      size: 36e5,
      steps: 24
    },
    day: {
      common: !0,
      size: 864e5,
      steps: 30
    },
    week: {
      common: !1,
      size: 6048e5,
      steps: 4
    },
    month: {
      common: !0,
      size: 2628e6,
      steps: 12
    },
    quarter: {
      common: !1,
      size: 7884e6,
      steps: 4
    },
    year: {
      common: !0,
      size: 3154e7
    }
  }, Jr = /* @__PURE__ */ Object.keys(o1);
  function EF(n, e) {
    return n - e;
  }
  function xF(n, e) {
    if (kt(e))
      return null;
    const t = n._adapter, {
      parser: i,
      round: r,
      isoWeekday: s
    } = n._parseOpts;
    let o = e;
    return typeof i == "function" && (o = i(o)), ei(o) || (o = typeof i == "string" ? t.parse(o, i) : t.parse(o)), o === null ? null : (r && (o = r === "week" && (vp(s) || s === !0) ? t.startOf(o, "isoWeek", s) : t.startOf(o, r)), +o);
  }
  function TF(n, e, t, i) {
    const r = Jr.length;
    for (let s = Jr.indexOf(n); s < r - 1; ++s) {
      const o = o1[Jr[s]], a = o.steps ? o.steps : Number.MAX_SAFE_INTEGER;
      if (o.common && Math.ceil((t - e) / (a * o.size)) <= i)
        return Jr[s];
    }
    return Jr[r - 1];
  }
  function tce(n, e, t, i, r) {
    for (let s = Jr.length - 1; s >= Jr.indexOf(t); s--) {
      const o = Jr[s];
      if (o1[o].common && n._adapter.diff(r, i, o) >= e - 1)
        return o;
    }
    return Jr[t ? Jr.indexOf(t) : 0];
  }
  function nce(n) {
    for (let e = Jr.indexOf(n) + 1, t = Jr.length; e < t; ++e)
      if (o1[Jr[e]].common)
        return Jr[e];
  }
  function MF(n, e, t) {
    if (!t)
      n[e] = !0;
    else if (t.length) {
      const {
        lo: i,
        hi: r
      } = sk(t, e), s = t[i] >= e ? t[i] : t[r];
      n[s] = !0;
    }
  }
  function ice(n, e, t, i) {
    const r = n._adapter, s = +r.startOf(e[0].value, i), o = e[e.length - 1].value;
    let a, l;
    for (a = s; a <= o; a = +r.add(a, 1, i))
      l = t[a], l >= 0 && (e[l].major = !0);
    return e;
  }
  function AF(n, e, t) {
    const i = [], r = {}, s = e.length;
    let o, a;
    for (o = 0; o < s; ++o)
      a = e[o], r[a] = o, i.push({
        value: a,
        major: !1
      });
    return s === 0 || !t ? i : ice(n, i, r, t);
  }
  class Yw extends oh {
    constructor(e) {
      super(e), this._cache = {
        data: [],
        labels: [],
        all: []
      }, this._unit = "day", this._majorUnit = void 0, this._offsets = {}, this._normalized = !1, this._parseOpts = void 0;
    }
    init(e, t = {}) {
      const i = e.time || (e.time = {}), r = this._adapter = new hoe._date(e.adapters.date);
      r.init(t), uv(i.displayFormats, r.formats()), this._parseOpts = {
        parser: i.parser,
        round: i.round,
        isoWeekday: i.isoWeekday
      }, super.init(e), this._normalized = t.normalized;
    }
    parse(e, t) {
      return e === void 0 ? null : xF(this, e);
    }
    beforeLayout() {
      super.beforeLayout(), this._cache = {
        data: [],
        labels: [],
        all: []
      };
    }
    determineDataLimits() {
      const e = this.options, t = this._adapter, i = e.time.unit || "day";
      let {
        min: r,
        max: s,
        minDefined: o,
        maxDefined: a
      } = this.getUserBounds();
      function l(c) {
        !o && !isNaN(c.min) && (r = Math.min(r, c.min)), !a && !isNaN(c.max) && (s = Math.max(s, c.max));
      }
      (!o || !a) && (l(this._getLabelBounds()), (e.bounds !== "ticks" || e.ticks.source !== "labels") && l(this.getMinMax(!1))), r = ei(r) && !isNaN(r) ? r : +t.startOf(Date.now(), i), s = ei(s) && !isNaN(s) ? s : +t.endOf(Date.now(), i) + 1, this.min = Math.min(r, s - 1), this.max = Math.max(r + 1, s);
    }
    _getLabelBounds() {
      const e = this.getLabelTimestamps();
      let t = Number.POSITIVE_INFINITY, i = Number.NEGATIVE_INFINITY;
      return e.length && (t = e[0], i = e[e.length - 1]), {
        min: t,
        max: i
      };
    }
    buildTicks() {
      const e = this.options, t = e.time, i = e.ticks, r = i.source === "labels" ? this.getLabelTimestamps() : this._generate();
      e.bounds === "ticks" && r.length && (this.min = this._userMin || r[0], this.max = this._userMax || r[r.length - 1]);
      const s = this.min, o = this.max, a = Lre(r, s, o);
      return this._unit = t.unit || (i.autoSkip ? TF(t.minUnit, this.min, this.max, this._getLabelCapacity(s)) : tce(this, a.length, t.minUnit, this.min, this.max)), this._majorUnit = !i.major.enabled || this._unit === "year" ? void 0 : nce(this._unit), this.initOffsets(r), e.reverse && a.reverse(), AF(this, a, this._majorUnit);
    }
    afterAutoSkip() {
      this.options.offsetAfterAutoskip && this.initOffsets(this.ticks.map((e) => +e.value));
    }
    initOffsets(e = []) {
      let t = 0, i = 0, r, s;
      this.options.offset && e.length && (r = this.getDecimalForValue(e[0]), e.length === 1 ? t = 1 - r : t = (this.getDecimalForValue(e[1]) - r) / 2, s = this.getDecimalForValue(e[e.length - 1]), e.length === 1 ? i = s : i = (s - this.getDecimalForValue(e[e.length - 2])) / 2);
      const o = e.length < 3 ? 0.5 : 0.25;
      t = Hi(t, 0, o), i = Hi(i, 0, o), this._offsets = {
        start: t,
        end: i,
        factor: 1 / (t + 1 + i)
      };
    }
    _generate() {
      const e = this._adapter, t = this.min, i = this.max, r = this.options, s = r.time, o = s.unit || TF(s.minUnit, t, i, this._getLabelCapacity(t)), a = tt(r.ticks.stepSize, 1), l = o === "week" ? s.isoWeekday : !1, c = vp(l) || l === !0, u = {};
      let h = t, d, f;
      if (c && (h = +e.startOf(h, "isoWeek", l)), h = +e.startOf(h, c ? "day" : o), e.diff(i, t, o) > 1e5 * a)
        throw new Error(t + " and " + i + " are too far apart with stepSize of " + a + " " + o);
      const g = r.ticks.source === "data" && this.getDataTimestamps();
      for (d = h, f = 0; d < i; d = +e.add(d, a, o), f++)
        MF(u, d, g);
      return (d === i || r.bounds === "ticks" || f === 1) && MF(u, d, g), Object.keys(u).sort(EF).map((p) => +p);
    }
    getLabelForValue(e) {
      const t = this._adapter, i = this.options.time;
      return i.tooltipFormat ? t.format(e, i.tooltipFormat) : t.format(e, i.displayFormats.datetime);
    }
    format(e, t) {
      const r = this.options.time.displayFormats, s = this._unit, o = t || r[s];
      return this._adapter.format(e, o);
    }
    _tickFormatFunction(e, t, i, r) {
      const s = this.options, o = s.ticks.callback;
      if (o)
        return bn(o, [e, t, i], this);
      const a = s.time.displayFormats, l = this._unit, c = this._majorUnit, u = l && a[l], h = c && a[c], d = i[t], f = c && h && d && d.major;
      return this._adapter.format(e, r || (f ? h : u));
    }
    generateTickLabels(e) {
      let t, i, r;
      for (t = 0, i = e.length; t < i; ++t)
        r = e[t], r.label = this._tickFormatFunction(r.value, t, e);
    }
    getDecimalForValue(e) {
      return e === null ? NaN : (e - this.min) / (this.max - this.min);
    }
    getPixelForValue(e) {
      const t = this._offsets, i = this.getDecimalForValue(e);
      return this.getPixelForDecimal((t.start + i) * t.factor);
    }
    getValueForPixel(e) {
      const t = this._offsets, i = this.getDecimalForPixel(e) / t.factor - t.end;
      return this.min + i * (this.max - this.min);
    }
    _getLabelSize(e) {
      const t = this.options.ticks, i = this.ctx.measureText(e).width, r = Ko(this.isHorizontal() ? t.maxRotation : t.minRotation), s = Math.cos(r), o = Math.sin(r), a = this._resolveTickFontOptions(0).size;
      return {
        w: i * s + a * o,
        h: i * o + a * s
      };
    }
    _getLabelCapacity(e) {
      const t = this.options.time, i = t.displayFormats, r = i[t.unit] || i.millisecond, s = this._tickFormatFunction(e, 0, AF(this, [e], this._majorUnit), r), o = this._getLabelSize(s), a = Math.floor(this.isHorizontal() ? this.width / o.w : this.height / o.h) - 1;
      return a > 0 ? a : 1;
    }
    getDataTimestamps() {
      let e = this._cache.data || [], t, i;
      if (e.length)
        return e;
      const r = this.getMatchingVisibleMetas();
      if (this._normalized && r.length)
        return this._cache.data = r[0].controller.getAllParsedValues(this);
      for (t = 0, i = r.length; t < i; ++t)
        e = e.concat(r[t].controller.getAllParsedValues(this));
      return this._cache.data = this.normalize(e);
    }
    getLabelTimestamps() {
      const e = this._cache.labels || [];
      let t, i;
      if (e.length)
        return e;
      const r = this.getLabels();
      for (t = 0, i = r.length; t < i; ++t)
        e.push(xF(this, r[t]));
      return this._cache.labels = this._normalized ? e : this.normalize(e);
    }
    normalize(e) {
      return H8(e.sort(EF));
    }
  }
  Yw.id = "time";
  Yw.defaults = {
    bounds: "data",
    adapters: {},
    time: {
      parser: !1,
      unit: !1,
      round: !1,
      isoWeekday: !1,
      minUnit: "millisecond",
      displayFormats: {}
    },
    ticks: {
      source: "auto",
      callback: !1,
      major: {
        enabled: !1
      }
    }
  };
  function Zy(n, e, t) {
    let i = 0, r = n.length - 1, s, o, a, l;
    t ? (e >= n[i].pos && e <= n[r].pos && ({
      lo: i,
      hi: r
    } = cc(n, "pos", e)), {
      pos: s,
      time: a
    } = n[i], {
      pos: o,
      time: l
    } = n[r]) : (e >= n[i].time && e <= n[r].time && ({
      lo: i,
      hi: r
    } = cc(n, "time", e)), {
      time: s,
      pos: a
    } = n[i], {
      time: o,
      pos: l
    } = n[r]);
    const c = o - s;
    return c ? a + (l - a) * (e - s) / c : a;
  }
  class wk extends Yw {
    constructor(e) {
      super(e), this._table = [], this._minPos = void 0, this._tableRange = void 0;
    }
    initOffsets() {
      const e = this._getTimestampsForTable(), t = this._table = this.buildLookupTable(e);
      this._minPos = Zy(t, this.min), this._tableRange = Zy(t, this.max) - this._minPos, super.initOffsets(e);
    }
    buildLookupTable(e) {
      const {
        min: t,
        max: i
      } = this, r = [], s = [];
      let o, a, l, c, u;
      for (o = 0, a = e.length; o < a; ++o)
        c = e[o], c >= t && c <= i && r.push(c);
      if (r.length < 2)
        return [{
          time: t,
          pos: 0
        }, {
          time: i,
          pos: 1
        }];
      for (o = 0, a = r.length; o < a; ++o)
        u = r[o + 1], l = r[o - 1], c = r[o], Math.round((u + l) / 2) !== c && s.push({
          time: c,
          pos: o / (a - 1)
        });
      return s;
    }
    _generate() {
      const e = this.min, t = this.max;
      let i = super.getDataTimestamps();
      return (!i.includes(e) || !i.length) && i.splice(0, 0, e), (!i.includes(t) || i.length === 1) && i.push(t), i.sort((r, s) => r - s);
    }
    _getTimestampsForTable() {
      let e = this._cache.all || [];
      if (e.length)
        return e;
      const t = this.getDataTimestamps(), i = this.getLabelTimestamps();
      return t.length && i.length ? e = this.normalize(t.concat(i)) : e = t.length ? t : i, e = this._cache.all = e, e;
    }
    getDecimalForValue(e) {
      return (Zy(this._table, e) - this._minPos) / this._tableRange;
    }
    getValueForPixel(e) {
      const t = this._offsets, i = this.getDecimalForPixel(e) / t.factor - t.end;
      return Zy(this._table, i * this._tableRange + this._minPos, !0);
    }
  }
  wk.id = "timeseries";
  wk.defaults = Yw.defaults;
  var rce = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    CategoryScale: vk,
    LinearScale: Wp,
    LogarithmicScale: jp,
    RadialLinearScale: Gw,
    TimeScale: Yw,
    TimeSeriesScale: wk
  });
  const T4 = [uoe, Bae, Nle, rce];
  Rs.register(...T4);
  function M4(n, e, t, i = {}) {
    return new Rs(n, {
      type: e,
      data: t,
      options: i
    });
  }
  _u.getOrCreate(globalThis);
  var A4;
  let P4;
  function sce(n, e, t, i, r, s) {
    var o, a, l, c, u, h, d, f = Symbol.metadata || Symbol.for("Symbol.metadata"), g = Object.defineProperty, p = Object.create, m = [p(null), p(null)], v = e.length;
    function y(C, T, P) {
      return function(x, A) {
        T && (A = x, x = n);
        for (var D = 0; D < C.length; D++) A = C[D].apply(x, P ? [A] : []);
        return P ? A : x;
      };
    }
    function w(C, T, P, x) {
      if (typeof C != "function" && (x || C !== void 0)) throw new TypeError(T + " must " + (P || "be") + " a function" + (x ? "" : " or undefined"));
      return C;
    }
    function R(C, T, P, x, A, D, B, F, W, N, O) {
      function V(ee) {
        if (!O(ee)) throw new TypeError("Attempted to access private element on non-instance");
      }
      var G = [].concat(T[0]), U = T[3], se = !B, b = A === 1, S = A === 3, _ = A === 4, I = A === 2;
      function H(ee, ae, Ne) {
        return function(fe, ye) {
          return ae && (ye = fe, fe = C), Ne && Ne(fe), M[ee].call(fe, ye);
        };
      }
      if (!se) {
        var M = {}, $ = [], Y = S ? "get" : _ || b ? "set" : "value";
        if (W ? (N || b ? M = { get: PF(function() {
          return U(this);
        }, x, "get"), set: function(ee) {
          T[4](this, ee);
        } } : M[Y] = U, N || PF(M[Y], x, I ? "" : Y)) : N || (M = Object.getOwnPropertyDescriptor(C, x)), !N && !W) {
          if ((a = m[+F][x]) && (a ^ A) != 7) throw Error("Decorating two elements with the same name (" + M[Y].name + ") is not supported yet");
          m[+F][x] = A < 3 ? 1 : A;
        }
      }
      for (var K = C, ce = G.length - 1; ce >= 0; ce -= P ? 2 : 1) {
        var le = w(G[ce], "A decorator", "be", !0), _e = P ? G[ce - 1] : void 0, be = {}, Z = { kind: ["field", "accessor", "method", "getter", "setter", "class"][A], name: x, metadata: o, addInitializer: (function(ee, ae) {
          if (ee.v) throw new TypeError("attempted to call addInitializer after decoration was finished");
          w(ae, "An initializer", "be", !0), D.push(ae);
        }).bind(null, be) };
        if (se) a = le.call(_e, K, Z), be.v = 1, w(a, "class decorators", "return") && (K = a);
        else if (Z.static = F, Z.private = W, a = Z.access = { has: W ? O.bind() : function(ee) {
          return x in ee;
        } }, _ || (a.get = W ? I ? function(ee) {
          return V(ee), M.value;
        } : H("get", 0, V) : function(ee) {
          return ee[x];
        }), I || S || (a.set = W ? H("set", 0, V) : function(ee, ae) {
          ee[x] = ae;
        }), K = le.call(_e, b ? { get: M.get, set: M.set } : M[Y], Z), be.v = 1, b) {
          if (typeof K == "object" && K) (a = w(K.get, "accessor.get")) && (M.get = a), (a = w(K.set, "accessor.set")) && (M.set = a), (a = w(K.init, "accessor.init")) && $.unshift(a);
          else if (K !== void 0) throw new TypeError("accessor decorators must return an object with get, set, or init properties or undefined");
        } else w(K, (N ? "field" : "method") + " decorators", "return") && (N ? $.unshift(K) : M[Y] = K);
      }
      return A < 2 && B.push(y($, F, 1), y(D, F, 0)), N || se || (W ? b ? B.splice(-1, 0, H("get", F), H("set", F)) : B.push(I ? M[Y] : w.call.bind(M[Y])) : g(C, x, M)), K;
    }
    function E(C) {
      return g(C, f, { configurable: !0, enumerable: !0, value: o });
    }
    return o = p(o ?? null), u = [], h = function(C) {
      C && u.push(y(C));
    }, d = function(C, T) {
      for (var P = 0; P < t.length; P++) {
        var x = t[P], A = x[1], D = 7 & A;
        if ((8 & A) == C && !D == T) {
          var B = x[2], F = !!x[3], W = 16 & A;
          R(C ? n : n.prototype, x, W, F ? "#" + B : oce(B), D, D < 2 ? [] : C ? c = c || [] : l = l || [], u, !!C, F, T, C && F ? function(N) {
            return lce(N) === n;
          } : r);
        }
      }
    }, d(8, 0), d(0, 0), d(8, 1), d(0, 1), h(l), h(c), a = u, v || E(n), { e: a, get c() {
      var C = [];
      return v && [E(n = R(n, [e], i, n.name, 5, C)), y(C, 1)];
    } };
  }
  function oce(n) {
    var e = ace(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function ace(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function PF(n, e, t) {
    typeof e == "symbol" && (e = (e = e.description) ? "[" + e + "]" : "");
    try {
      Object.defineProperty(n, "name", { configurable: !0, value: t ? t + " " + e : e });
    } catch {
    }
    return n;
  }
  function lce(n) {
    if (Object(n) !== n) throw TypeError("right-hand side of 'in' should be an object, got " + (n !== null ? typeof n : "null"));
    return n;
  }
  let a1;
  class cce {
    constructor() {
      this.mychart = void 0;
    }
    bind() {
    }
    attached() {
      const e = [{
        year: 2010,
        count: 10
      }, {
        year: 2011,
        count: 20
      }, {
        year: 2012,
        count: 15
      }, {
        year: 2013,
        count: 25
      }, {
        year: 2014,
        count: 22
      }, {
        year: 2015,
        count: 30
      }, {
        year: 2016,
        count: 28
      }], t = {
        labels: e.map((i) => i.year),
        datasets: [{
          label: "Acquisitions by year",
          data: e.map((i) => i.count)
        }]
      };
      this.chartjs = M4(this.mychart, "bar", t);
    }
  }
  A4 = cce;
  [a1, P4] = sce(A4, [Lc({
    ...Jie,
    name: "sv-chartjs"
  })], []).c;
  P4();
  const I4 = "chartjs-scatter", lP = `<div>
    chart-scatter view - should not be used
    <canvas ref="mychart"></canvas>
</div>
`, O4 = [], k4 = {};
  let wx;
  function uce(n) {
    wx || (wx = Li.define({ name: I4, template: lP, dependencies: O4, bindables: k4 })), n.register(wx);
  }
  const hce = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    bindables: k4,
    default: lP,
    dependencies: O4,
    name: I4,
    register: uce,
    template: lP
  }, Symbol.toStringTag, { value: "Module" }));
  var D4;
  let N4;
  function dce(n, e, t, i, r, s) {
    var o, a, l, c, u, h, d, f = Symbol.metadata || Symbol.for("Symbol.metadata"), g = Object.defineProperty, p = Object.create, m = [p(null), p(null)], v = e.length;
    function y(C, T, P) {
      return function(x, A) {
        T && (A = x, x = n);
        for (var D = 0; D < C.length; D++) A = C[D].apply(x, P ? [A] : []);
        return P ? A : x;
      };
    }
    function w(C, T, P, x) {
      if (typeof C != "function" && (x || C !== void 0)) throw new TypeError(T + " must " + (P || "be") + " a function" + (x ? "" : " or undefined"));
      return C;
    }
    function R(C, T, P, x, A, D, B, F, W, N, O) {
      function V(ee) {
        if (!O(ee)) throw new TypeError("Attempted to access private element on non-instance");
      }
      var G = [].concat(T[0]), U = T[3], se = !B, b = A === 1, S = A === 3, _ = A === 4, I = A === 2;
      function H(ee, ae, Ne) {
        return function(fe, ye) {
          return ae && (ye = fe, fe = C), Ne && Ne(fe), M[ee].call(fe, ye);
        };
      }
      if (!se) {
        var M = {}, $ = [], Y = S ? "get" : _ || b ? "set" : "value";
        if (W ? (N || b ? M = { get: IF(function() {
          return U(this);
        }, x, "get"), set: function(ee) {
          T[4](this, ee);
        } } : M[Y] = U, N || IF(M[Y], x, I ? "" : Y)) : N || (M = Object.getOwnPropertyDescriptor(C, x)), !N && !W) {
          if ((a = m[+F][x]) && (a ^ A) != 7) throw Error("Decorating two elements with the same name (" + M[Y].name + ") is not supported yet");
          m[+F][x] = A < 3 ? 1 : A;
        }
      }
      for (var K = C, ce = G.length - 1; ce >= 0; ce -= P ? 2 : 1) {
        var le = w(G[ce], "A decorator", "be", !0), _e = P ? G[ce - 1] : void 0, be = {}, Z = { kind: ["field", "accessor", "method", "getter", "setter", "class"][A], name: x, metadata: o, addInitializer: (function(ee, ae) {
          if (ee.v) throw new TypeError("attempted to call addInitializer after decoration was finished");
          w(ae, "An initializer", "be", !0), D.push(ae);
        }).bind(null, be) };
        if (se) a = le.call(_e, K, Z), be.v = 1, w(a, "class decorators", "return") && (K = a);
        else if (Z.static = F, Z.private = W, a = Z.access = { has: W ? O.bind() : function(ee) {
          return x in ee;
        } }, _ || (a.get = W ? I ? function(ee) {
          return V(ee), M.value;
        } : H("get", 0, V) : function(ee) {
          return ee[x];
        }), I || S || (a.set = W ? H("set", 0, V) : function(ee, ae) {
          ee[x] = ae;
        }), K = le.call(_e, b ? { get: M.get, set: M.set } : M[Y], Z), be.v = 1, b) {
          if (typeof K == "object" && K) (a = w(K.get, "accessor.get")) && (M.get = a), (a = w(K.set, "accessor.set")) && (M.set = a), (a = w(K.init, "accessor.init")) && $.unshift(a);
          else if (K !== void 0) throw new TypeError("accessor decorators must return an object with get, set, or init properties or undefined");
        } else w(K, (N ? "field" : "method") + " decorators", "return") && (N ? $.unshift(K) : M[Y] = K);
      }
      return A < 2 && B.push(y($, F, 1), y(D, F, 0)), N || se || (W ? b ? B.splice(-1, 0, H("get", F), H("set", F)) : B.push(I ? M[Y] : w.call.bind(M[Y])) : g(C, x, M)), K;
    }
    function E(C) {
      return g(C, f, { configurable: !0, enumerable: !0, value: o });
    }
    return s !== void 0 && (o = s[f]), o = p(o ?? null), u = [], h = function(C) {
      C && u.push(y(C));
    }, d = function(C, T) {
      for (var P = 0; P < t.length; P++) {
        var x = t[P], A = x[1], D = 7 & A;
        if ((8 & A) == C && !D == T) {
          var B = x[2], F = !!x[3], W = 16 & A;
          R(C ? n : n.prototype, x, W, F ? "#" + B : fce(B), D, D < 2 ? [] : C ? c = c || [] : l = l || [], u, !!C, F, T, C && F ? function(N) {
            return pce(N) === n;
          } : r);
        }
      }
    }, d(8, 0), d(0, 0), d(8, 1), d(0, 1), h(l), h(c), a = u, v || E(n), { e: a, get c() {
      var C = [];
      return v && [E(n = R(n, [e], i, n.name, 5, C)), y(C, 1)];
    } };
  }
  function fce(n) {
    var e = gce(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function gce(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function IF(n, e, t) {
    typeof e == "symbol" && (e = (e = e.description) ? "[" + e + "]" : "");
    try {
      Object.defineProperty(n, "name", { configurable: !0, value: t ? t + " " + e : e });
    } catch {
    }
    return n;
  }
  function pce(n) {
    if (Object(n) !== n) throw TypeError("right-hand side of 'in' should be an object, got " + (n !== null ? typeof n : "null"));
    return n;
  }
  let L4;
  class mce extends a1 {
    constructor(...e) {
      super(...e), this.mychart = void 0;
    }
    bind() {
    }
    attached() {
      const e = {
        datasets: [{
          label: "First Dataset",
          data: [{
            x: 20,
            y: 30,
            r: 15
          }, {
            x: 40,
            y: 10,
            r: 10
          }, {
            x: 30,
            y: 12,
            r: 5
          }]
          //backgroundColor: 'rgb(255, 99, 132)'
        }, {
          label: "Second Dataset",
          data: [{
            x: 19,
            y: 32,
            r: 2
          }, {
            x: 41,
            y: 12,
            r: 5
          }, {
            x: 35,
            y: 11,
            r: 6
          }]
          //backgroundColor: 'rgb(99, 255, 132)'
        }]
      };
      this.chartjs = M4(this.mychart, "bubble", e);
    }
  }
  D4 = mce;
  [L4, N4] = dce(D4, [Lc({
    ...hce,
    name: "sv-chartjs-scatter"
  })], [], 0, void 0, a1).c;
  N4();
  const H4 = "table", cP = '<div ref="mytable" show.bind="showtable"></div>', $4 = [], F4 = {};
  let yx;
  function bce(n) {
    yx || (yx = Li.define({ name: H4, template: cP, dependencies: $4, bindables: F4 })), n.register(yx);
  }
  const vce = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    bindables: F4,
    default: cP,
    dependencies: $4,
    name: H4,
    register: bce,
    template: cP
  }, Symbol.toStringTag, { value: "Module" }));
  var Wg = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
  function zp(n) {
    return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, "default") ? n.default : n;
  }
  var _m = function(n) {
    return n && n.Math === Math && n;
  }, Ui = (
    // eslint-disable-next-line es/no-global-this -- safe
    _m(typeof globalThis == "object" && globalThis) || _m(typeof window == "object" && window) || // eslint-disable-next-line no-restricted-globals -- safe
    _m(typeof self == "object" && self) || _m(typeof Wg == "object" && Wg) || _m(typeof Wg == "object" && Wg) || // eslint-disable-next-line no-new-func -- fallback
    /* @__PURE__ */ function() {
      return this;
    }() || Function("return this")()
  ), yk = {}, es = function(n) {
    try {
      return !!n();
    } catch {
      return !0;
    }
  }, wce = es, aa = !wce(function() {
    return Object.defineProperty({}, 1, {
      get: function() {
        return 7;
      }
    })[1] !== 7;
  }), yce = es, l1 = !yce(function() {
    var n = (function() {
    }).bind();
    return typeof n != "function" || n.hasOwnProperty("prototype");
  }), Cce = l1, Qy = Function.prototype.call, la = Cce ? Qy.bind(Qy) : function() {
    return Qy.apply(Qy, arguments);
  }, B4 = {}, V4 = {}.propertyIsEnumerable, W4 = Object.getOwnPropertyDescriptor, Sce = W4 && !V4.call({
    1: 2
  }, 1);
  B4.f = Sce ? function(e) {
    var t = W4(this, e);
    return !!t && t.enumerable;
  } : V4;
  var c1 = function(n, e) {
    return {
      enumerable: !(n & 1),
      configurable: !(n & 2),
      writable: !(n & 4),
      value: e
    };
  }, j4 = l1, z4 = Function.prototype, uP = z4.call, _ce = j4 && z4.bind.bind(uP, uP), pi = j4 ? _ce : function(n) {
    return function() {
      return uP.apply(n, arguments);
    };
  }, U4 = pi, Rce = U4({}.toString), Ece = U4("".slice), wf = function(n) {
    return Ece(Rce(n), 8, -1);
  }, xce = pi, Tce = es, Mce = wf, Cx = Object, Ace = xce("".split), Pce = Tce(function() {
    return !Cx("z").propertyIsEnumerable(0);
  }) ? function(n) {
    return Mce(n) === "String" ? Ace(n, "") : Cx(n);
  } : Cx, u1 = function(n) {
    return n == null;
  }, Ice = u1, Oce = TypeError, Kw = function(n) {
    if (Ice(n)) throw new Oce("Can't call method on " + n);
    return n;
  }, kce = Pce, Dce = Kw, h1 = function(n) {
    return kce(Dce(n));
  }, Sx = typeof document == "object" && document.all, Gi = typeof Sx > "u" && Sx !== void 0 ? function(n) {
    return typeof n == "function" || n === Sx;
  } : function(n) {
    return typeof n == "function";
  }, Nce = Gi, ml = function(n) {
    return typeof n == "object" ? n !== null : Nce(n);
  }, _x = Ui, Lce = Gi, Hce = function(n) {
    return Lce(n) ? n : void 0;
  }, Up = function(n, e) {
    return arguments.length < 2 ? Hce(_x[n]) : _x[n] && _x[n][e];
  }, $ce = pi, d1 = $ce({}.isPrototypeOf), Fce = Ui, OF = Fce.navigator, kF = OF && OF.userAgent, f1 = kF ? String(kF) : "", G4 = Ui, Rx = f1, DF = G4.process, NF = G4.Deno, LF = DF && DF.versions || NF && NF.version, HF = LF && LF.v8, Uo, v_;
  HF && (Uo = HF.split("."), v_ = Uo[0] > 0 && Uo[0] < 4 ? 1 : +(Uo[0] + Uo[1]));
  !v_ && Rx && (Uo = Rx.match(/Edge\/(\d+)/), (!Uo || Uo[1] >= 74) && (Uo = Rx.match(/Chrome\/(\d+)/), Uo && (v_ = +Uo[1])));
  var Bce = v_, $F = Bce, Vce = es, Wce = Ui, jce = Wce.String, Ck = !!Object.getOwnPropertySymbols && !Vce(function() {
    var n = Symbol("symbol detection");
    return !jce(n) || !(Object(n) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && $F && $F < 41;
  }), zce = Ck, Y4 = zce && !Symbol.sham && typeof Symbol.iterator == "symbol", Uce = Up, Gce = Gi, Yce = d1, Kce = Y4, qce = Object, Sk = Kce ? function(n) {
    return typeof n == "symbol";
  } : function(n) {
    var e = Uce("Symbol");
    return Gce(e) && Yce(e.prototype, qce(n));
  }, Xce = String, g1 = function(n) {
    try {
      return Xce(n);
    } catch {
      return "Object";
    }
  }, Zce = Gi, Qce = g1, Jce = TypeError, qw = function(n) {
    if (Zce(n)) return n;
    throw new Jce(Qce(n) + " is not a function");
  }, eue = qw, tue = u1, p1 = function(n, e) {
    var t = n[e];
    return tue(t) ? void 0 : eue(t);
  }, Ex = la, xx = Gi, Tx = ml, nue = TypeError, iue = function(n, e) {
    var t, i;
    if (e === "string" && xx(t = n.toString) && !Tx(i = Ex(t, n)) || xx(t = n.valueOf) && !Tx(i = Ex(t, n)) || e !== "string" && xx(t = n.toString) && !Tx(i = Ex(t, n))) return i;
    throw new nue("Can't convert object to primitive value");
  }, K4 = { exports: {} }, FF = Ui, rue = Object.defineProperty, _k = function(n, e) {
    try {
      rue(FF, n, {
        value: e,
        configurable: !0,
        writable: !0
      });
    } catch {
      FF[n] = e;
    }
    return e;
  }, sue = Ui, oue = _k, BF = "__core-js_shared__", VF = K4.exports = sue[BF] || oue(BF, {});
  (VF.versions || (VF.versions = [])).push({
    version: "3.39.0",
    mode: "global",
    copyright: "© 2014-2024 Denis Pushkarev (zloirock.ru)",
    license: "https://github.com/zloirock/core-js/blob/v3.39.0/LICENSE",
    source: "https://github.com/zloirock/core-js"
  });
  var Rk = K4.exports, WF = Rk, q4 = function(n, e) {
    return WF[n] || (WF[n] = e || {});
  }, aue = Kw, lue = Object, Xw = function(n) {
    return lue(aue(n));
  }, cue = pi, uue = Xw, hue = cue({}.hasOwnProperty), bl = Object.hasOwn || function(e, t) {
    return hue(uue(e), t);
  }, due = pi, fue = 0, gue = Math.random(), pue = due(1 .toString), X4 = function(n) {
    return "Symbol(" + (n === void 0 ? "" : n) + ")_" + pue(++fue + gue, 36);
  }, mue = Ui, bue = q4, jF = bl, vue = X4, wue = Ck, yue = Y4, jg = mue.Symbol, Mx = bue("wks"), Cue = yue ? jg.for || jg : jg && jg.withoutSetter || vue, lh = function(n) {
    return jF(Mx, n) || (Mx[n] = wue && jF(jg, n) ? jg[n] : Cue("Symbol." + n)), Mx[n];
  }, Sue = la, zF = ml, UF = Sk, _ue = p1, Rue = iue, Eue = lh, xue = TypeError, Tue = Eue("toPrimitive"), Mue = function(n, e) {
    if (!zF(n) || UF(n)) return n;
    var t = _ue(n, Tue), i;
    if (t) {
      if (e === void 0 && (e = "default"), i = Sue(t, n, e), !zF(i) || UF(i)) return i;
      throw new xue("Can't convert object to primitive value");
    }
    return e === void 0 && (e = "number"), Rue(n, e);
  }, Aue = Mue, Pue = Sk, Z4 = function(n) {
    var e = Aue(n, "string");
    return Pue(e) ? e : e + "";
  }, Iue = Ui, GF = ml, hP = Iue.document, Oue = GF(hP) && GF(hP.createElement), Ek = function(n) {
    return Oue ? hP.createElement(n) : {};
  }, kue = aa, Due = es, Nue = Ek, Q4 = !kue && !Due(function() {
    return Object.defineProperty(Nue("div"), "a", {
      get: function() {
        return 7;
      }
    }).a !== 7;
  }), Lue = aa, Hue = la, $ue = B4, Fue = c1, Bue = h1, Vue = Z4, Wue = bl, jue = Q4, YF = Object.getOwnPropertyDescriptor;
  yk.f = Lue ? YF : function(e, t) {
    if (e = Bue(e), t = Vue(t), jue) try {
      return YF(e, t);
    } catch {
    }
    if (Wue(e, t)) return Fue(!Hue($ue.f, e, t), e[t]);
  };
  var ch = {}, zue = aa, Uue = es, J4 = zue && Uue(function() {
    return Object.defineProperty(function() {
    }, "prototype", {
      value: 42,
      writable: !1
    }).prototype !== 42;
  }), Gue = ml, Yue = String, Kue = TypeError, Hc = function(n) {
    if (Gue(n)) return n;
    throw new Kue(Yue(n) + " is not an object");
  }, que = aa, Xue = Q4, Zue = J4, Jy = Hc, KF = Z4, Que = TypeError, Ax = Object.defineProperty, Jue = Object.getOwnPropertyDescriptor, Px = "enumerable", Ix = "configurable", Ox = "writable";
  ch.f = que ? Zue ? function(e, t, i) {
    if (Jy(e), t = KF(t), Jy(i), typeof e == "function" && t === "prototype" && "value" in i && Ox in i && !i[Ox]) {
      var r = Jue(e, t);
      r && r[Ox] && (e[t] = i.value, i = {
        configurable: Ix in i ? i[Ix] : r[Ix],
        enumerable: Px in i ? i[Px] : r[Px],
        writable: !1
      });
    }
    return Ax(e, t, i);
  } : Ax : function(e, t, i) {
    if (Jy(e), t = KF(t), Jy(i), Xue) try {
      return Ax(e, t, i);
    } catch {
    }
    if ("get" in i || "set" in i) throw new Que("Accessors not supported");
    return "value" in i && (e[t] = i.value), e;
  };
  var ehe = aa, the = ch, nhe = c1, Zw = ehe ? function(n, e, t) {
    return the.f(n, e, nhe(1, t));
  } : function(n, e, t) {
    return n[e] = t, n;
  }, eU = { exports: {} }, dP = aa, ihe = bl, tU = Function.prototype, rhe = dP && Object.getOwnPropertyDescriptor, xk = ihe(tU, "name"), she = xk && (function() {
  }).name === "something", ohe = xk && (!dP || dP && rhe(tU, "name").configurable), ahe = {
    EXISTS: xk,
    PROPER: she,
    CONFIGURABLE: ohe
  }, lhe = pi, che = Gi, fP = Rk, uhe = lhe(Function.toString);
  che(fP.inspectSource) || (fP.inspectSource = function(n) {
    return uhe(n);
  });
  var hhe = fP.inspectSource, dhe = Ui, fhe = Gi, qF = dhe.WeakMap, ghe = fhe(qF) && /native code/.test(String(qF)), phe = q4, mhe = X4, XF = phe("keys"), nU = function(n) {
    return XF[n] || (XF[n] = mhe(n));
  }, Tk = {}, bhe = ghe, iU = Ui, vhe = ml, whe = Zw, kx = bl, Dx = Rk, yhe = nU, Che = Tk, ZF = "Object already initialized", gP = iU.TypeError, She = iU.WeakMap, w_, ow, y_, _he = function(n) {
    return y_(n) ? ow(n) : w_(n, {});
  }, Rhe = function(n) {
    return function(e) {
      var t;
      if (!vhe(e) || (t = ow(e)).type !== n)
        throw new gP("Incompatible receiver, " + n + " required");
      return t;
    };
  };
  if (bhe || Dx.state) {
    var da = Dx.state || (Dx.state = new She());
    da.get = da.get, da.has = da.has, da.set = da.set, w_ = function(n, e) {
      if (da.has(n)) throw new gP(ZF);
      return e.facade = n, da.set(n, e), e;
    }, ow = function(n) {
      return da.get(n) || {};
    }, y_ = function(n) {
      return da.has(n);
    };
  } else {
    var Ff = yhe("state");
    Che[Ff] = !0, w_ = function(n, e) {
      if (kx(n, Ff)) throw new gP(ZF);
      return e.facade = n, whe(n, Ff, e), e;
    }, ow = function(n) {
      return kx(n, Ff) ? n[Ff] : {};
    }, y_ = function(n) {
      return kx(n, Ff);
    };
  }
  var Ehe = {
    set: w_,
    get: ow,
    has: y_,
    enforce: _he,
    getterFor: Rhe
  }, Mk = pi, xhe = es, The = Gi, e0 = bl, pP = aa, Mhe = ahe.CONFIGURABLE, Ahe = hhe, rU = Ehe, Phe = rU.enforce, Ihe = rU.get, QF = String, hS = Object.defineProperty, Ohe = Mk("".slice), khe = Mk("".replace), Dhe = Mk([].join), Nhe = pP && !xhe(function() {
    return hS(function() {
    }, "length", {
      value: 8
    }).length !== 8;
  }), Lhe = String(String).split("String"), Hhe = eU.exports = function(n, e, t) {
    Ohe(QF(e), 0, 7) === "Symbol(" && (e = "[" + khe(QF(e), /^Symbol\(([^)]*)\).*$/, "$1") + "]"), t && t.getter && (e = "get " + e), t && t.setter && (e = "set " + e), (!e0(n, "name") || Mhe && n.name !== e) && (pP ? hS(n, "name", {
      value: e,
      configurable: !0
    }) : n.name = e), Nhe && t && e0(t, "arity") && n.length !== t.arity && hS(n, "length", {
      value: t.arity
    });
    try {
      t && e0(t, "constructor") && t.constructor ? pP && hS(n, "prototype", {
        writable: !1
      }) : n.prototype && (n.prototype = void 0);
    } catch {
    }
    var i = Phe(n);
    return e0(i, "source") || (i.source = Dhe(Lhe, typeof e == "string" ? e : "")), n;
  };
  Function.prototype.toString = Hhe(function() {
    return The(this) && Ihe(this).source || Ahe(this);
  }, "toString");
  var $he = eU.exports, Fhe = Gi, Bhe = ch, Vhe = $he, Whe = _k, jhe = function(n, e, t, i) {
    i || (i = {});
    var r = i.enumerable, s = i.name !== void 0 ? i.name : e;
    if (Fhe(t) && Vhe(t, s, i), i.global)
      r ? n[e] = t : Whe(e, t);
    else {
      try {
        i.unsafe ? n[e] && (r = !0) : delete n[e];
      } catch {
      }
      r ? n[e] = t : Bhe.f(n, e, {
        value: t,
        enumerable: !1,
        configurable: !i.nonConfigurable,
        writable: !i.nonWritable
      });
    }
    return n;
  }, sU = {}, zhe = Math.ceil, Uhe = Math.floor, Ghe = Math.trunc || function(e) {
    var t = +e;
    return (t > 0 ? Uhe : zhe)(t);
  }, Yhe = Ghe, Qw = function(n) {
    var e = +n;
    return e !== e || e === 0 ? 0 : Yhe(e);
  }, Khe = Qw, qhe = Math.max, Xhe = Math.min, Zhe = function(n, e) {
    var t = Khe(n);
    return t < 0 ? qhe(t + e, 0) : Xhe(t, e);
  }, Qhe = Qw, Jhe = Math.min, ede = function(n) {
    var e = Qhe(n);
    return e > 0 ? Jhe(e, 9007199254740991) : 0;
  }, tde = ede, Jw = function(n) {
    return tde(n.length);
  }, nde = h1, ide = Zhe, rde = Jw, JF = function(n) {
    return function(e, t, i) {
      var r = nde(e), s = rde(r);
      if (s === 0) return !n && -1;
      var o = ide(i, s), a;
      if (n && t !== t) {
        for (; s > o; )
          if (a = r[o++], a !== a) return !0;
      } else for (; s > o; o++)
        if ((n || o in r) && r[o] === t) return n || o || 0;
      return !n && -1;
    };
  }, sde = {
    // `Array.prototype.includes` method
    // https://tc39.es/ecma262/#sec-array.prototype.includes
    includes: JF(!0),
    // `Array.prototype.indexOf` method
    // https://tc39.es/ecma262/#sec-array.prototype.indexof
    indexOf: JF(!1)
  }, ode = pi, Nx = bl, ade = h1, lde = sde.indexOf, cde = Tk, eB = ode([].push), oU = function(n, e) {
    var t = ade(n), i = 0, r = [], s;
    for (s in t) !Nx(cde, s) && Nx(t, s) && eB(r, s);
    for (; e.length > i; ) Nx(t, s = e[i++]) && (~lde(r, s) || eB(r, s));
    return r;
  }, Ak = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"], ude = oU, hde = Ak, dde = hde.concat("length", "prototype");
  sU.f = Object.getOwnPropertyNames || function(e) {
    return ude(e, dde);
  };
  var aU = {};
  aU.f = Object.getOwnPropertySymbols;
  var fde = Up, gde = pi, pde = sU, mde = aU, bde = Hc, vde = gde([].concat), wde = fde("Reflect", "ownKeys") || function(e) {
    var t = pde.f(bde(e)), i = mde.f;
    return i ? vde(t, i(e)) : t;
  }, tB = bl, yde = wde, Cde = yk, Sde = ch, lU = function(n, e, t) {
    for (var i = yde(e), r = Sde.f, s = Cde.f, o = 0; o < i.length; o++) {
      var a = i[o];
      !tB(n, a) && !(t && tB(t, a)) && r(n, a, s(e, a));
    }
  }, _de = es, Rde = Gi, Ede = /#|\.prototype\./, ey = function(n, e) {
    var t = Tde[xde(n)];
    return t === Ade ? !0 : t === Mde ? !1 : Rde(e) ? _de(e) : !!e;
  }, xde = ey.normalize = function(n) {
    return String(n).replace(Ede, ".").toLowerCase();
  }, Tde = ey.data = {}, Mde = ey.NATIVE = "N", Ade = ey.POLYFILL = "P", Pde = ey, t0 = Ui, Ide = yk.f, Ode = Zw, kde = jhe, Dde = _k, Nde = lU, Lde = Pde, Yi = function(n, e) {
    var t = n.target, i = n.global, r = n.stat, s, o, a, l, c, u;
    if (i ? o = t0 : r ? o = t0[t] || Dde(t, {}) : o = t0[t] && t0[t].prototype, o) for (a in e) {
      if (c = e[a], n.dontCallGetSet ? (u = Ide(o, a), l = u && u.value) : l = o[a], s = Lde(i ? a : t + (r ? "." : "#") + a, n.forced), !s && l !== void 0) {
        if (typeof c == typeof l) continue;
        Nde(c, l);
      }
      (n.sham || l && l.sham) && Ode(c, "sham", !0), kde(o, a, c, n);
    }
  }, Hde = l1, cU = Function.prototype, nB = cU.apply, iB = cU.call, m1 = typeof Reflect == "object" && Reflect.apply || (Hde ? iB.bind(nB) : function() {
    return iB.apply(nB, arguments);
  }), $de = pi, Fde = qw, uU = function(n, e, t) {
    try {
      return $de(Fde(Object.getOwnPropertyDescriptor(n, e)[t]));
    } catch {
    }
  }, Bde = ml, Vde = function(n) {
    return Bde(n) || n === null;
  }, Wde = Vde, jde = String, zde = TypeError, Ude = function(n) {
    if (Wde(n)) return n;
    throw new zde("Can't set " + jde(n) + " as a prototype");
  }, Gde = uU, Yde = ml, Kde = Kw, qde = Ude, hU = Object.setPrototypeOf || ("__proto__" in {} ? function() {
    var n = !1, e = {}, t;
    try {
      t = Gde(Object.prototype, "__proto__", "set"), t(e, []), n = e instanceof Array;
    } catch {
    }
    return function(r, s) {
      return Kde(r), qde(s), Yde(r) && (n ? t(r, s) : r.__proto__ = s), r;
    };
  }() : void 0), Xde = ch.f, Zde = function(n, e, t) {
    t in n || Xde(n, t, {
      configurable: !0,
      get: function() {
        return e[t];
      },
      set: function(i) {
        e[t] = i;
      }
    });
  }, Qde = Gi, Jde = ml, rB = hU, efe = function(n, e, t) {
    var i, r;
    return (
      // it can work only with native `setPrototypeOf`
      rB && // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
      Qde(i = e.constructor) && i !== t && Jde(r = i.prototype) && r !== t.prototype && rB(n, r), n
    );
  }, tfe = lh, nfe = tfe("toStringTag"), dU = {};
  dU[nfe] = "z";
  var ife = String(dU) === "[object z]", rfe = ife, sfe = Gi, dS = wf, ofe = lh, afe = ofe("toStringTag"), lfe = Object, cfe = dS(/* @__PURE__ */ function() {
    return arguments;
  }()) === "Arguments", ufe = function(n, e) {
    try {
      return n[e];
    } catch {
    }
  }, fU = rfe ? dS : function(n) {
    var e, t, i;
    return n === void 0 ? "Undefined" : n === null ? "Null" : typeof (t = ufe(e = lfe(n), afe)) == "string" ? t : cfe ? dS(e) : (i = dS(e)) === "Object" && sfe(e.callee) ? "Arguments" : i;
  }, hfe = fU, dfe = String, b1 = function(n) {
    if (hfe(n) === "Symbol") throw new TypeError("Cannot convert a Symbol value to a string");
    return dfe(n);
  }, ffe = b1, gfe = function(n, e) {
    return n === void 0 ? arguments.length < 2 ? "" : e : ffe(n);
  }, pfe = ml, mfe = Zw, bfe = function(n, e) {
    pfe(e) && "cause" in e && mfe(n, "cause", e.cause);
  }, vfe = pi, gU = Error, wfe = vfe("".replace), yfe = function(n) {
    return String(new gU(n).stack);
  }("zxcasd"), pU = /\n\s*at [^:]*:[^\n]*/, Cfe = pU.test(yfe), Sfe = function(n, e) {
    if (Cfe && typeof n == "string" && !gU.prepareStackTrace)
      for (; e--; ) n = wfe(n, pU, "");
    return n;
  }, _fe = es, Rfe = c1, Efe = !_fe(function() {
    var n = new Error("a");
    return "stack" in n ? (Object.defineProperty(n, "stack", Rfe(1, 7)), n.stack !== 7) : !0;
  }), xfe = Zw, Tfe = Sfe, Mfe = Efe, sB = Error.captureStackTrace, Afe = function(n, e, t, i) {
    Mfe && (sB ? sB(n, e) : xfe(n, "stack", Tfe(t, i)));
  }, oB = Up, Pfe = bl, aB = Zw, Ife = d1, lB = hU, cB = lU, uB = Zde, Ofe = efe, kfe = gfe, Dfe = bfe, Nfe = Afe, Lfe = aa, Hfe = function(n, e, t, i) {
    var r = "stackTraceLimit", s = i ? 2 : 1, o = n.split("."), a = o[o.length - 1], l = oB.apply(null, o);
    if (l) {
      var c = l.prototype;
      if (Pfe(c, "cause") && delete c.cause, !t) return l;
      var u = oB("Error"), h = e(function(d, f) {
        var g = kfe(i ? f : d, void 0), p = i ? new l(d) : new l();
        return g !== void 0 && aB(p, "message", g), Nfe(p, h, p.stack, 2), this && Ife(c, this) && Ofe(p, this, h), arguments.length > s && Dfe(p, arguments[s]), p;
      });
      h.prototype = c, a !== "Error" ? lB ? lB(h, u) : cB(h, u, {
        name: !0
      }) : Lfe && r in l && (uB(h, l, r), uB(h, l, "prepareStackTrace")), cB(h, l);
      try {
        c.name !== a && aB(c, "name", a), c.constructor = h;
      } catch {
      }
      return h;
    }
  }, mU = Yi, $fe = Ui, vl = m1, bU = Hfe, mP = "WebAssembly", hB = $fe[mP], C_ = new Error("e", {
    cause: 7
  }).cause !== 7, yf = function(n, e) {
    var t = {};
    t[n] = bU(n, e, C_), mU({
      global: !0,
      constructor: !0,
      arity: 1,
      forced: C_
    }, t);
  }, Pk = function(n, e) {
    if (hB && hB[n]) {
      var t = {};
      t[n] = bU(mP + "." + n, e, C_), mU({
        target: mP,
        stat: !0,
        constructor: !0,
        arity: 1,
        forced: C_
      }, t);
    }
  };
  yf("Error", function(n) {
    return function(t) {
      return vl(n, this, arguments);
    };
  });
  yf("EvalError", function(n) {
    return function(t) {
      return vl(n, this, arguments);
    };
  });
  yf("RangeError", function(n) {
    return function(t) {
      return vl(n, this, arguments);
    };
  });
  yf("ReferenceError", function(n) {
    return function(t) {
      return vl(n, this, arguments);
    };
  });
  yf("SyntaxError", function(n) {
    return function(t) {
      return vl(n, this, arguments);
    };
  });
  yf("TypeError", function(n) {
    return function(t) {
      return vl(n, this, arguments);
    };
  });
  yf("URIError", function(n) {
    return function(t) {
      return vl(n, this, arguments);
    };
  });
  Pk("CompileError", function(n) {
    return function(t) {
      return vl(n, this, arguments);
    };
  });
  Pk("LinkError", function(n) {
    return function(t) {
      return vl(n, this, arguments);
    };
  });
  Pk("RuntimeError", function(n) {
    return function(t) {
      return vl(n, this, arguments);
    };
  });
  var Ffe = wf, vU = Array.isArray || function(e) {
    return Ffe(e) === "Array";
  }, Bfe = aa, Vfe = vU, Wfe = TypeError, jfe = Object.getOwnPropertyDescriptor, zfe = Bfe && !function() {
    if (this !== void 0) return !0;
    try {
      Object.defineProperty([], "length", {
        writable: !1
      }).length = 1;
    } catch (n) {
      return n instanceof TypeError;
    }
  }(), wU = zfe ? function(n, e) {
    if (Vfe(n) && !jfe(n, "length").writable)
      throw new Wfe("Cannot set read only .length");
    return n.length = e;
  } : function(n, e) {
    return n.length = e;
  }, Ufe = TypeError, Gfe = 9007199254740991, yU = function(n) {
    if (n > Gfe) throw Ufe("Maximum allowed index exceeded");
    return n;
  }, Yfe = Yi, Kfe = Xw, qfe = Jw, Xfe = wU, Zfe = yU, Qfe = es, Jfe = Qfe(function() {
    return [].push.call({
      length: 4294967296
    }, 1) !== 4294967297;
  }), ege = function() {
    try {
      Object.defineProperty([], "length", {
        writable: !1
      }).push();
    } catch (n) {
      return n instanceof TypeError;
    }
  }, tge = Jfe || !ege();
  Yfe({
    target: "Array",
    proto: !0,
    arity: 1,
    forced: tge
  }, {
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    push: function(e) {
      var t = Kfe(this), i = qfe(t), r = arguments.length;
      Zfe(i + r);
      for (var s = 0; s < r; s++)
        t[i] = arguments[s], i++;
      return Xfe(t, i), i;
    }
  });
  var Lx = pi, n0 = Set.prototype, wl = {
    // eslint-disable-next-line es/no-set -- safe
    Set,
    add: Lx(n0.add),
    has: Lx(n0.has),
    remove: Lx(n0.delete),
    proto: n0
  }, nge = wl.has, Cf = function(n) {
    return nge(n), n;
  }, ige = la, Sf = function(n, e, t) {
    for (var i = t ? n : n.iterator, r = n.next, s, o; !(s = ige(r, i)).done; )
      if (o = e(s.value), o !== void 0) return o;
  }, CU = pi, rge = Sf, SU = wl, sge = SU.Set, _U = SU.proto, oge = CU(_U.forEach), RU = CU(_U.keys), age = RU(new sge()).next, ty = function(n, e, t) {
    return t ? rge({
      iterator: RU(n),
      next: age
    }, e) : oge(n, e);
  }, EU = wl, lge = ty, cge = EU.Set, uge = EU.add, Ik = function(n) {
    var e = new cge();
    return lge(n, function(t) {
      uge(e, t);
    }), e;
  }, hge = uU, dge = wl, ny = hge(dge.proto, "size", "get") || function(n) {
    return n.size;
  }, fge = function(n) {
    return {
      iterator: n,
      next: n.next,
      done: !1
    };
  }, dB = qw, xU = Hc, fB = la, gge = Qw, pge = fge, gB = "Invalid size", mge = RangeError, bge = TypeError, vge = Math.max, TU = function(n, e) {
    this.set = n, this.size = vge(e, 0), this.has = dB(n.has), this.keys = dB(n.keys);
  };
  TU.prototype = {
    getIterator: function() {
      return pge(xU(fB(this.keys, this.set)));
    },
    includes: function(n) {
      return fB(this.has, this.set, n);
    }
  };
  var _f = function(n) {
    xU(n);
    var e = +n.size;
    if (e !== e) throw new bge(gB);
    var t = gge(e);
    if (t < 0) throw new mge(gB);
    return new TU(n, t);
  }, wge = Cf, MU = wl, yge = Ik, Cge = ny, Sge = _f, _ge = ty, Rge = Sf, Ege = MU.has, pB = MU.remove, xge = function(e) {
    var t = wge(this), i = Sge(e), r = yge(t);
    return Cge(t) <= i.size ? _ge(t, function(s) {
      i.includes(s) && pB(r, s);
    }) : Rge(i.getIterator(), function(s) {
      Ege(t, s) && pB(r, s);
    }), r;
  }, Tge = Up, mB = function(n) {
    return {
      size: n,
      has: function() {
        return !1;
      },
      keys: function() {
        return {
          next: function() {
            return {
              done: !0
            };
          }
        };
      }
    };
  }, Rf = function(n) {
    var e = Tge("Set");
    try {
      new e()[n](mB(0));
      try {
        return new e()[n](mB(-1)), !1;
      } catch {
        return !0;
      }
    } catch {
      return !1;
    }
  }, Mge = Yi, Age = xge, Pge = Rf;
  Mge({
    target: "Set",
    proto: !0,
    real: !0,
    forced: !Pge("difference")
  }, {
    difference: Age
  });
  var Ige = Cf, Ok = wl, Oge = ny, kge = _f, Dge = ty, Nge = Sf, Lge = Ok.Set, bB = Ok.add, Hge = Ok.has, $ge = function(e) {
    var t = Ige(this), i = kge(e), r = new Lge();
    return Oge(t) > i.size ? Nge(i.getIterator(), function(s) {
      Hge(t, s) && bB(r, s);
    }) : Dge(t, function(s) {
      i.includes(s) && bB(r, s);
    }), r;
  }, Fge = Yi, Bge = es, Vge = $ge, Wge = Rf, jge = !Wge("intersection") || Bge(function() {
    return String(Array.from((/* @__PURE__ */ new Set([1, 2, 3])).intersection(/* @__PURE__ */ new Set([3, 2])))) !== "3,2";
  });
  Fge({
    target: "Set",
    proto: !0,
    real: !0,
    forced: jge
  }, {
    intersection: Vge
  });
  var zge = la, vB = Hc, Uge = p1, kk = function(n, e, t) {
    var i, r;
    vB(n);
    try {
      if (i = Uge(n, "return"), !i) {
        if (e === "throw") throw t;
        return t;
      }
      i = zge(i, n);
    } catch (s) {
      r = !0, i = s;
    }
    if (e === "throw") throw t;
    if (r) throw i;
    return vB(i), t;
  }, Gge = Cf, Yge = wl.has, Kge = ny, qge = _f, Xge = ty, Zge = Sf, Qge = kk, Jge = function(e) {
    var t = Gge(this), i = qge(e);
    if (Kge(t) <= i.size) return Xge(t, function(s) {
      if (i.includes(s)) return !1;
    }, !0) !== !1;
    var r = i.getIterator();
    return Zge(r, function(s) {
      if (Yge(t, s)) return Qge(r, "normal", !1);
    }) !== !1;
  }, epe = Yi, tpe = Jge, npe = Rf;
  epe({
    target: "Set",
    proto: !0,
    real: !0,
    forced: !npe("isDisjointFrom")
  }, {
    isDisjointFrom: tpe
  });
  var ipe = Cf, rpe = ny, spe = ty, ope = _f, ape = function(e) {
    var t = ipe(this), i = ope(e);
    return rpe(t) > i.size ? !1 : spe(t, function(r) {
      if (!i.includes(r)) return !1;
    }, !0) !== !1;
  }, lpe = Yi, cpe = ape, upe = Rf;
  lpe({
    target: "Set",
    proto: !0,
    real: !0,
    forced: !upe("isSubsetOf")
  }, {
    isSubsetOf: cpe
  });
  var hpe = Cf, dpe = wl.has, fpe = ny, gpe = _f, ppe = Sf, mpe = kk, bpe = function(e) {
    var t = hpe(this), i = gpe(e);
    if (fpe(t) < i.size) return !1;
    var r = i.getIterator();
    return ppe(r, function(s) {
      if (!dpe(t, s)) return mpe(r, "normal", !1);
    }) !== !1;
  }, vpe = Yi, wpe = bpe, ype = Rf;
  vpe({
    target: "Set",
    proto: !0,
    real: !0,
    forced: !ype("isSupersetOf")
  }, {
    isSupersetOf: wpe
  });
  var Cpe = Cf, Dk = wl, Spe = Ik, _pe = _f, Rpe = Sf, Epe = Dk.add, xpe = Dk.has, Tpe = Dk.remove, Mpe = function(e) {
    var t = Cpe(this), i = _pe(e).getIterator(), r = Spe(t);
    return Rpe(i, function(s) {
      xpe(t, s) ? Tpe(r, s) : Epe(r, s);
    }), r;
  }, Ape = Yi, Ppe = Mpe, Ipe = Rf;
  Ape({
    target: "Set",
    proto: !0,
    real: !0,
    forced: !Ipe("symmetricDifference")
  }, {
    symmetricDifference: Ppe
  });
  var Ope = Cf, kpe = wl.add, Dpe = Ik, Npe = _f, Lpe = Sf, Hpe = function(e) {
    var t = Ope(this), i = Npe(e).getIterator(), r = Dpe(t);
    return Lpe(i, function(s) {
      kpe(r, s);
    }), r;
  }, $pe = Yi, Fpe = Hpe, Bpe = Rf;
  $pe({
    target: "Set",
    proto: !0,
    real: !0,
    forced: !Bpe("union")
  }, {
    union: Fpe
  });
  var Vpe = wf, Wpe = pi, jpe = function(n) {
    if (Vpe(n) === "Function") return Wpe(n);
  }, wB = jpe, zpe = qw, Upe = l1, Gpe = wB(wB.bind), AU = function(n, e) {
    return zpe(n), e === void 0 ? n : Upe ? Gpe(n, e) : function() {
      return n.apply(e, arguments);
    };
  }, Ype = Up, PU = Ype("document", "documentElement"), Kpe = pi, Nk = Kpe([].slice), qpe = TypeError, IU = function(n, e) {
    if (n < e) throw new qpe("Not enough arguments");
    return n;
  }, Xpe = f1, Zpe = /(?:ipad|iphone|ipod).*applewebkit/i.test(Xpe), Rm = Ui, Qpe = f1, Jpe = wf, i0 = function(n) {
    return Qpe.slice(0, n.length) === n;
  }, OU = function() {
    return i0("Bun/") ? "BUN" : i0("Cloudflare-Workers") ? "CLOUDFLARE" : i0("Deno/") ? "DENO" : i0("Node.js/") ? "NODE" : Rm.Bun && typeof Bun.version == "string" ? "BUN" : Rm.Deno && typeof Deno.version == "object" ? "DENO" : Jpe(Rm.process) === "process" ? "NODE" : Rm.window && Rm.document ? "BROWSER" : "REST";
  }(), eme = OU, tme = eme === "NODE", Cs = Ui, nme = m1, ime = AU, yB = Gi, rme = bl, kU = es, CB = PU, sme = Nk, SB = Ek, ome = IU, ame = Zpe, lme = tme, bP = Cs.setImmediate, vP = Cs.clearImmediate, cme = Cs.process, Hx = Cs.Dispatch, ume = Cs.Function, _B = Cs.MessageChannel, hme = Cs.String, $x = 0, pv = {}, RB = "onreadystatechange", aw, wh, Fx, Bx;
  kU(function() {
    aw = Cs.location;
  });
  var Lk = function(n) {
    if (rme(pv, n)) {
      var e = pv[n];
      delete pv[n], e();
    }
  }, Vx = function(n) {
    return function() {
      Lk(n);
    };
  }, EB = function(n) {
    Lk(n.data);
  }, xB = function(n) {
    Cs.postMessage(hme(n), aw.protocol + "//" + aw.host);
  };
  (!bP || !vP) && (bP = function(e) {
    ome(arguments.length, 1);
    var t = yB(e) ? e : ume(e), i = sme(arguments, 1);
    return pv[++$x] = function() {
      nme(t, void 0, i);
    }, wh($x), $x;
  }, vP = function(e) {
    delete pv[e];
  }, lme ? wh = function(n) {
    cme.nextTick(Vx(n));
  } : Hx && Hx.now ? wh = function(n) {
    Hx.now(Vx(n));
  } : _B && !ame ? (Fx = new _B(), Bx = Fx.port2, Fx.port1.onmessage = EB, wh = ime(Bx.postMessage, Bx)) : Cs.addEventListener && yB(Cs.postMessage) && !Cs.importScripts && aw && aw.protocol !== "file:" && !kU(xB) ? (wh = xB, Cs.addEventListener("message", EB, !1)) : RB in SB("script") ? wh = function(n) {
    CB.appendChild(SB("script"))[RB] = function() {
      CB.removeChild(this), Lk(n);
    };
  } : wh = function(n) {
    setTimeout(Vx(n), 0);
  });
  var DU = {
    set: bP,
    clear: vP
  }, dme = Yi, fme = Ui, TB = DU.clear;
  dme({
    global: !0,
    bind: !0,
    enumerable: !0,
    forced: fme.clearImmediate !== TB
  }, {
    clearImmediate: TB
  });
  var NU = Ui, gme = m1, pme = Gi, mme = OU, bme = f1, vme = Nk, wme = IU, yme = NU.Function, Cme = /MSIE .\./.test(bme) || mme === "BUN" && function() {
    var n = NU.Bun.version.split(".");
    return n.length < 3 || n[0] === "0" && (n[1] < 3 || n[1] === "3" && n[2] === "0");
  }(), Sme = function(n, e) {
    var t = e ? 2 : 1;
    return Cme ? function(i, r) {
      var s = wme(arguments.length, 1) > t, o = pme(i) ? i : yme(i), a = s ? vme(arguments, t) : [], l = s ? function() {
        gme(o, this, a);
      } : o;
      return e ? n(l, r) : n(l);
    } : n;
  }, _me = Yi, LU = Ui, MB = DU.set, Rme = Sme, AB = LU.setImmediate ? Rme(MB, !1) : MB;
  _me({
    global: !0,
    bind: !0,
    enumerable: !0,
    forced: LU.setImmediate !== AB
  }, {
    setImmediate: AB
  });
  /*! @license DOMPurify 2.5.7 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.5.7/LICENSE */
  function vu(n) {
    "@babel/helpers - typeof";
    return vu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e) {
      return typeof e;
    } : function(e) {
      return e && typeof Symbol == "function" && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    }, vu(n);
  }
  function wP(n, e) {
    return wP = Object.setPrototypeOf || function(i, r) {
      return i.__proto__ = r, i;
    }, wP(n, e);
  }
  function Eme() {
    if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham) return !1;
    if (typeof Proxy == "function") return !0;
    try {
      return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      })), !0;
    } catch {
      return !1;
    }
  }
  function fS(n, e, t) {
    return Eme() ? fS = Reflect.construct : fS = function(r, s, o) {
      var a = [null];
      a.push.apply(a, s);
      var l = Function.bind.apply(r, a), c = new l();
      return o && wP(c, o.prototype), c;
    }, fS.apply(null, arguments);
  }
  function No(n) {
    return xme(n) || Tme(n) || Mme(n) || Ame();
  }
  function xme(n) {
    if (Array.isArray(n)) return yP(n);
  }
  function Tme(n) {
    if (typeof Symbol < "u" && n[Symbol.iterator] != null || n["@@iterator"] != null) return Array.from(n);
  }
  function Mme(n, e) {
    if (n) {
      if (typeof n == "string") return yP(n, e);
      var t = Object.prototype.toString.call(n).slice(8, -1);
      if (t === "Object" && n.constructor && (t = n.constructor.name), t === "Map" || t === "Set") return Array.from(n);
      if (t === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)) return yP(n, e);
    }
  }
  function yP(n, e) {
    (e == null || e > n.length) && (e = n.length);
    for (var t = 0, i = new Array(e); t < e; t++) i[t] = n[t];
    return i;
  }
  function Ame() {
    throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  var Pme = Object.hasOwnProperty, PB = Object.setPrototypeOf, Ime = Object.isFrozen, Ome = Object.getPrototypeOf, kme = Object.getOwnPropertyDescriptor, kr = Object.freeze, oo = Object.seal, Dme = Object.create, HU = typeof Reflect < "u" && Reflect, S_ = HU.apply, CP = HU.construct;
  S_ || (S_ = function(e, t, i) {
    return e.apply(t, i);
  });
  kr || (kr = function(e) {
    return e;
  });
  oo || (oo = function(e) {
    return e;
  });
  CP || (CP = function(e, t) {
    return fS(e, No(t));
  });
  var Nme = ao(Array.prototype.forEach), IB = ao(Array.prototype.pop), Em = ao(Array.prototype.push), gS = ao(String.prototype.toLowerCase), Wx = ao(String.prototype.toString), OB = ao(String.prototype.match), Ro = ao(String.prototype.replace), Lme = ao(String.prototype.indexOf), Hme = ao(String.prototype.trim), Wi = ao(RegExp.prototype.test), jx = $me(TypeError);
  function ao(n) {
    return function(e) {
      for (var t = arguments.length, i = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++)
        i[r - 1] = arguments[r];
      return S_(n, e, i);
    };
  }
  function $me(n) {
    return function() {
      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++)
        t[i] = arguments[i];
      return CP(n, t);
    };
  }
  function dt(n, e, t) {
    var i;
    t = (i = t) !== null && i !== void 0 ? i : gS, PB && PB(n, null);
    for (var r = e.length; r--; ) {
      var s = e[r];
      if (typeof s == "string") {
        var o = t(s);
        o !== s && (Ime(e) || (e[r] = o), s = o);
      }
      n[s] = !0;
    }
    return n;
  }
  function yh(n) {
    var e = Dme(null), t;
    for (t in n)
      S_(Pme, n, [t]) === !0 && (e[t] = n[t]);
    return e;
  }
  function r0(n, e) {
    for (; n !== null; ) {
      var t = kme(n, e);
      if (t) {
        if (t.get)
          return ao(t.get);
        if (typeof t.value == "function")
          return ao(t.value);
      }
      n = Ome(n);
    }
    function i(r) {
      return console.warn("fallback value for", r), null;
    }
    return i;
  }
  var kB = kr(["a", "abbr", "acronym", "address", "area", "article", "aside", "audio", "b", "bdi", "bdo", "big", "blink", "blockquote", "body", "br", "button", "canvas", "caption", "center", "cite", "code", "col", "colgroup", "content", "data", "datalist", "dd", "decorator", "del", "details", "dfn", "dialog", "dir", "div", "dl", "dt", "element", "em", "fieldset", "figcaption", "figure", "font", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "img", "input", "ins", "kbd", "label", "legend", "li", "main", "map", "mark", "marquee", "menu", "menuitem", "meter", "nav", "nobr", "ol", "optgroup", "option", "output", "p", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "section", "select", "shadow", "small", "source", "spacer", "span", "strike", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "tt", "u", "ul", "var", "video", "wbr"]), zx = kr(["svg", "a", "altglyph", "altglyphdef", "altglyphitem", "animatecolor", "animatemotion", "animatetransform", "circle", "clippath", "defs", "desc", "ellipse", "filter", "font", "g", "glyph", "glyphref", "hkern", "image", "line", "lineargradient", "marker", "mask", "metadata", "mpath", "path", "pattern", "polygon", "polyline", "radialgradient", "rect", "stop", "style", "switch", "symbol", "text", "textpath", "title", "tref", "tspan", "view", "vkern"]), Ux = kr(["feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence"]), Fme = kr(["animate", "color-profile", "cursor", "discard", "fedropshadow", "font-face", "font-face-format", "font-face-name", "font-face-src", "font-face-uri", "foreignobject", "hatch", "hatchpath", "mesh", "meshgradient", "meshpatch", "meshrow", "missing-glyph", "script", "set", "solidcolor", "unknown", "use"]), Gx = kr(["math", "menclose", "merror", "mfenced", "mfrac", "mglyph", "mi", "mlabeledtr", "mmultiscripts", "mn", "mo", "mover", "mpadded", "mphantom", "mroot", "mrow", "ms", "mspace", "msqrt", "mstyle", "msub", "msup", "msubsup", "mtable", "mtd", "mtext", "mtr", "munder", "munderover"]), Bme = kr(["maction", "maligngroup", "malignmark", "mlongdiv", "mscarries", "mscarry", "msgroup", "mstack", "msline", "msrow", "semantics", "annotation", "annotation-xml", "mprescripts", "none"]), DB = kr(["#text"]), NB = kr(["accept", "action", "align", "alt", "autocapitalize", "autocomplete", "autopictureinpicture", "autoplay", "background", "bgcolor", "border", "capture", "cellpadding", "cellspacing", "checked", "cite", "class", "clear", "color", "cols", "colspan", "controls", "controlslist", "coords", "crossorigin", "datetime", "decoding", "default", "dir", "disabled", "disablepictureinpicture", "disableremoteplayback", "download", "draggable", "enctype", "enterkeyhint", "face", "for", "headers", "height", "hidden", "high", "href", "hreflang", "id", "inputmode", "integrity", "ismap", "kind", "label", "lang", "list", "loading", "loop", "low", "max", "maxlength", "media", "method", "min", "minlength", "multiple", "muted", "name", "nonce", "noshade", "novalidate", "nowrap", "open", "optimum", "pattern", "placeholder", "playsinline", "poster", "preload", "pubdate", "radiogroup", "readonly", "rel", "required", "rev", "reversed", "role", "rows", "rowspan", "spellcheck", "scope", "selected", "shape", "size", "sizes", "span", "srclang", "start", "src", "srcset", "step", "style", "summary", "tabindex", "title", "translate", "type", "usemap", "valign", "value", "width", "xmlns", "slot"]), Yx = kr(["accent-height", "accumulate", "additive", "alignment-baseline", "ascent", "attributename", "attributetype", "azimuth", "basefrequency", "baseline-shift", "begin", "bias", "by", "class", "clip", "clippathunits", "clip-path", "clip-rule", "color", "color-interpolation", "color-interpolation-filters", "color-profile", "color-rendering", "cx", "cy", "d", "dx", "dy", "diffuseconstant", "direction", "display", "divisor", "dur", "edgemode", "elevation", "end", "fill", "fill-opacity", "fill-rule", "filter", "filterunits", "flood-color", "flood-opacity", "font-family", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-variant", "font-weight", "fx", "fy", "g1", "g2", "glyph-name", "glyphref", "gradientunits", "gradienttransform", "height", "href", "id", "image-rendering", "in", "in2", "k", "k1", "k2", "k3", "k4", "kerning", "keypoints", "keysplines", "keytimes", "lang", "lengthadjust", "letter-spacing", "kernelmatrix", "kernelunitlength", "lighting-color", "local", "marker-end", "marker-mid", "marker-start", "markerheight", "markerunits", "markerwidth", "maskcontentunits", "maskunits", "max", "mask", "media", "method", "mode", "min", "name", "numoctaves", "offset", "operator", "opacity", "order", "orient", "orientation", "origin", "overflow", "paint-order", "path", "pathlength", "patterncontentunits", "patterntransform", "patternunits", "points", "preservealpha", "preserveaspectratio", "primitiveunits", "r", "rx", "ry", "radius", "refx", "refy", "repeatcount", "repeatdur", "restart", "result", "rotate", "scale", "seed", "shape-rendering", "specularconstant", "specularexponent", "spreadmethod", "startoffset", "stddeviation", "stitchtiles", "stop-color", "stop-opacity", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke", "stroke-width", "style", "surfacescale", "systemlanguage", "tabindex", "targetx", "targety", "transform", "transform-origin", "text-anchor", "text-decoration", "text-rendering", "textlength", "type", "u1", "u2", "unicode", "values", "viewbox", "visibility", "version", "vert-adv-y", "vert-origin-x", "vert-origin-y", "width", "word-spacing", "wrap", "writing-mode", "xchannelselector", "ychannelselector", "x", "x1", "x2", "xmlns", "y", "y1", "y2", "z", "zoomandpan"]), LB = kr(["accent", "accentunder", "align", "bevelled", "close", "columnsalign", "columnlines", "columnspan", "denomalign", "depth", "dir", "display", "displaystyle", "encoding", "fence", "frame", "height", "href", "id", "largeop", "length", "linethickness", "lspace", "lquote", "mathbackground", "mathcolor", "mathsize", "mathvariant", "maxsize", "minsize", "movablelimits", "notation", "numalign", "open", "rowalign", "rowlines", "rowspacing", "rowspan", "rspace", "rquote", "scriptlevel", "scriptminsize", "scriptsizemultiplier", "selection", "separator", "separators", "stretchy", "subscriptshift", "supscriptshift", "symmetric", "voffset", "width", "xmlns"]), s0 = kr(["xlink:href", "xml:id", "xlink:title", "xml:space", "xmlns:xlink"]), Vme = oo(/\{\{[\w\W]*|[\w\W]*\}\}/gm), Wme = oo(/<%[\w\W]*|[\w\W]*%>/gm), jme = oo(/\${[\w\W]*}/gm), zme = oo(/^data-[\-\w.\u00B7-\uFFFF]/), Ume = oo(/^aria-[\-\w]+$/), Gme = oo(
    /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i
    // eslint-disable-line no-useless-escape
  ), Yme = oo(/^(?:\w+script|data):/i), Kme = oo(
    /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g
    // eslint-disable-line no-control-regex
  ), qme = oo(/^html$/i), Xme = oo(/^[a-z][.\w]*(-[.\w]+)+$/i), Zme = function() {
    return typeof window > "u" ? null : window;
  }, Qme = function(e, t) {
    if (vu(e) !== "object" || typeof e.createPolicy != "function")
      return null;
    var i = null, r = "data-tt-policy-suffix";
    t.currentScript && t.currentScript.hasAttribute(r) && (i = t.currentScript.getAttribute(r));
    var s = "dompurify" + (i ? "#" + i : "");
    try {
      return e.createPolicy(s, {
        createHTML: function(a) {
          return a;
        },
        createScriptURL: function(a) {
          return a;
        }
      });
    } catch {
      return console.warn("TrustedTypes policy " + s + " could not be created."), null;
    }
  };
  function $U() {
    var n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : Zme(), e = function(Q) {
      return $U(Q);
    };
    if (e.version = "2.5.7", e.removed = [], !n || !n.document || n.document.nodeType !== 9)
      return e.isSupported = !1, e;
    var t = n.document, i = n.document, r = n.DocumentFragment, s = n.HTMLTemplateElement, o = n.Node, a = n.Element, l = n.NodeFilter, c = n.NamedNodeMap, u = c === void 0 ? n.NamedNodeMap || n.MozNamedAttrMap : c, h = n.HTMLFormElement, d = n.DOMParser, f = n.trustedTypes, g = a.prototype, p = r0(g, "cloneNode"), m = r0(g, "nextSibling"), v = r0(g, "childNodes"), y = r0(g, "parentNode");
    if (typeof s == "function") {
      var w = i.createElement("template");
      w.content && w.content.ownerDocument && (i = w.content.ownerDocument);
    }
    var R = Qme(f, t), E = R ? R.createHTML("") : "", C = i, T = C.implementation, P = C.createNodeIterator, x = C.createDocumentFragment, A = C.getElementsByTagName, D = t.importNode, B = {};
    try {
      B = yh(i).documentMode ? i.documentMode : {};
    } catch {
    }
    var F = {};
    e.isSupported = typeof y == "function" && T && T.createHTMLDocument !== void 0 && B !== 9;
    var W = Vme, N = Wme, O = jme, V = zme, G = Ume, U = Yme, se = Kme, b = Xme, S = Gme, _ = null, I = dt({}, [].concat(No(kB), No(zx), No(Ux), No(Gx), No(DB))), H = null, M = dt({}, [].concat(No(NB), No(Yx), No(LB), No(s0))), $ = Object.seal(Object.create(null, {
      tagNameCheck: {
        writable: !0,
        configurable: !1,
        enumerable: !0,
        value: null
      },
      attributeNameCheck: {
        writable: !0,
        configurable: !1,
        enumerable: !0,
        value: null
      },
      allowCustomizedBuiltInElements: {
        writable: !0,
        configurable: !1,
        enumerable: !0,
        value: !1
      }
    })), Y = null, K = null, ce = !0, le = !0, _e = !1, be = !0, Z = !1, ee = !0, ae = !1, Ne = !1, fe = !1, ye = !1, k = !1, L = !1, j = !0, te = !1, q = "user-content-", re = !0, J = !1, X = {}, ne = null, ie = dt({}, ["annotation-xml", "audio", "colgroup", "desc", "foreignobject", "head", "iframe", "math", "mi", "mn", "mo", "ms", "mtext", "noembed", "noframes", "noscript", "plaintext", "script", "style", "svg", "template", "thead", "title", "video", "xmp"]), oe = null, we = dt({}, ["audio", "video", "img", "source", "image", "track"]), Ae = null, Be = dt({}, ["alt", "class", "for", "id", "label", "name", "pattern", "placeholder", "role", "summary", "title", "value", "style", "xmlns"]), st = "http://www.w3.org/1998/Math/MathML", St = "http://www.w3.org/2000/svg", ht = "http://www.w3.org/1999/xhtml", Ke = ht, xt = !1, Dn = null, Of = dt({}, [st, St, ht], Wx), yo, um = ["application/xhtml+xml", "text/html"], Ms = "text/html", xn, mi = null, Bi = i.createElement("form"), wn = function(Q) {
      return Q instanceof RegExp || Q instanceof Function;
    }, EE = function(Q) {
      mi && mi === Q || ((!Q || vu(Q) !== "object") && (Q = {}), Q = yh(Q), yo = // eslint-disable-next-line unicorn/prefer-includes
      um.indexOf(Q.PARSER_MEDIA_TYPE) === -1 ? yo = Ms : yo = Q.PARSER_MEDIA_TYPE, xn = yo === "application/xhtml+xml" ? Wx : gS, _ = "ALLOWED_TAGS" in Q ? dt({}, Q.ALLOWED_TAGS, xn) : I, H = "ALLOWED_ATTR" in Q ? dt({}, Q.ALLOWED_ATTR, xn) : M, Dn = "ALLOWED_NAMESPACES" in Q ? dt({}, Q.ALLOWED_NAMESPACES, Wx) : Of, Ae = "ADD_URI_SAFE_ATTR" in Q ? dt(
        yh(Be),
        // eslint-disable-line indent
        Q.ADD_URI_SAFE_ATTR,
        // eslint-disable-line indent
        xn
        // eslint-disable-line indent
      ) : Be, oe = "ADD_DATA_URI_TAGS" in Q ? dt(
        yh(we),
        // eslint-disable-line indent
        Q.ADD_DATA_URI_TAGS,
        // eslint-disable-line indent
        xn
        // eslint-disable-line indent
      ) : we, ne = "FORBID_CONTENTS" in Q ? dt({}, Q.FORBID_CONTENTS, xn) : ie, Y = "FORBID_TAGS" in Q ? dt({}, Q.FORBID_TAGS, xn) : {}, K = "FORBID_ATTR" in Q ? dt({}, Q.FORBID_ATTR, xn) : {}, X = "USE_PROFILES" in Q ? Q.USE_PROFILES : !1, ce = Q.ALLOW_ARIA_ATTR !== !1, le = Q.ALLOW_DATA_ATTR !== !1, _e = Q.ALLOW_UNKNOWN_PROTOCOLS || !1, be = Q.ALLOW_SELF_CLOSE_IN_ATTR !== !1, Z = Q.SAFE_FOR_TEMPLATES || !1, ee = Q.SAFE_FOR_XML !== !1, ae = Q.WHOLE_DOCUMENT || !1, ye = Q.RETURN_DOM || !1, k = Q.RETURN_DOM_FRAGMENT || !1, L = Q.RETURN_TRUSTED_TYPE || !1, fe = Q.FORCE_BODY || !1, j = Q.SANITIZE_DOM !== !1, te = Q.SANITIZE_NAMED_PROPS || !1, re = Q.KEEP_CONTENT !== !1, J = Q.IN_PLACE || !1, S = Q.ALLOWED_URI_REGEXP || S, Ke = Q.NAMESPACE || ht, $ = Q.CUSTOM_ELEMENT_HANDLING || {}, Q.CUSTOM_ELEMENT_HANDLING && wn(Q.CUSTOM_ELEMENT_HANDLING.tagNameCheck) && ($.tagNameCheck = Q.CUSTOM_ELEMENT_HANDLING.tagNameCheck), Q.CUSTOM_ELEMENT_HANDLING && wn(Q.CUSTOM_ELEMENT_HANDLING.attributeNameCheck) && ($.attributeNameCheck = Q.CUSTOM_ELEMENT_HANDLING.attributeNameCheck), Q.CUSTOM_ELEMENT_HANDLING && typeof Q.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements == "boolean" && ($.allowCustomizedBuiltInElements = Q.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements), Z && (le = !1), k && (ye = !0), X && (_ = dt({}, No(DB)), H = [], X.html === !0 && (dt(_, kB), dt(H, NB)), X.svg === !0 && (dt(_, zx), dt(H, Yx), dt(H, s0)), X.svgFilters === !0 && (dt(_, Ux), dt(H, Yx), dt(H, s0)), X.mathMl === !0 && (dt(_, Gx), dt(H, LB), dt(H, s0))), Q.ADD_TAGS && (_ === I && (_ = yh(_)), dt(_, Q.ADD_TAGS, xn)), Q.ADD_ATTR && (H === M && (H = yh(H)), dt(H, Q.ADD_ATTR, xn)), Q.ADD_URI_SAFE_ATTR && dt(Ae, Q.ADD_URI_SAFE_ATTR, xn), Q.FORBID_CONTENTS && (ne === ie && (ne = yh(ne)), dt(ne, Q.FORBID_CONTENTS, xn)), re && (_["#text"] = !0), ae && dt(_, ["html", "head", "body"]), _.table && (dt(_, ["tbody"]), delete Y.tbody), kr && kr(Q), mi = Q);
    }, FH = dt({}, ["mi", "mo", "mn", "ms", "mtext"]), BH = dt({}, ["annotation-xml"]), UZ = dt({}, ["title", "style", "font", "a", "script"]), Ty = dt({}, zx);
    dt(Ty, Ux), dt(Ty, Fme);
    var xE = dt({}, Gx);
    dt(xE, Bme);
    var GZ = function(Q) {
      var me = y(Q);
      (!me || !me.tagName) && (me = {
        namespaceURI: Ke,
        tagName: "template"
      });
      var xe = gS(Q.tagName), Bt = gS(me.tagName);
      return Dn[Q.namespaceURI] ? Q.namespaceURI === St ? me.namespaceURI === ht ? xe === "svg" : me.namespaceURI === st ? xe === "svg" && (Bt === "annotation-xml" || FH[Bt]) : !!Ty[xe] : Q.namespaceURI === st ? me.namespaceURI === ht ? xe === "math" : me.namespaceURI === St ? xe === "math" && BH[Bt] : !!xE[xe] : Q.namespaceURI === ht ? me.namespaceURI === St && !BH[Bt] || me.namespaceURI === st && !FH[Bt] ? !1 : !xE[xe] && (UZ[xe] || !Ty[xe]) : !!(yo === "application/xhtml+xml" && Dn[Q.namespaceURI]) : !1;
    }, As = function(Q) {
      Em(e.removed, {
        element: Q
      });
      try {
        Q.parentNode.removeChild(Q);
      } catch {
        try {
          Q.outerHTML = E;
        } catch {
          Q.remove();
        }
      }
    }, My = function(Q, me) {
      try {
        Em(e.removed, {
          attribute: me.getAttributeNode(Q),
          from: me
        });
      } catch {
        Em(e.removed, {
          attribute: null,
          from: me
        });
      }
      if (me.removeAttribute(Q), Q === "is" && !H[Q])
        if (ye || k)
          try {
            As(me);
          } catch {
          }
        else
          try {
            me.setAttribute(Q, "");
          } catch {
          }
    }, VH = function(Q) {
      var me, xe;
      if (fe)
        Q = "<remove></remove>" + Q;
      else {
        var Bt = OB(Q, /^[\r\n\t ]+/);
        xe = Bt && Bt[0];
      }
      yo === "application/xhtml+xml" && Ke === ht && (Q = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + Q + "</body></html>");
      var Lr = R ? R.createHTML(Q) : Q;
      if (Ke === ht)
        try {
          me = new d().parseFromString(Lr, yo);
        } catch {
        }
      if (!me || !me.documentElement) {
        me = T.createDocument(Ke, "template", null);
        try {
          me.documentElement.innerHTML = xt ? E : Lr;
        } catch {
        }
      }
      var qi = me.body || me.documentElement;
      return Q && xe && qi.insertBefore(i.createTextNode(xe), qi.childNodes[0] || null), Ke === ht ? A.call(me, ae ? "html" : "body")[0] : ae ? me.documentElement : qi;
    }, WH = function(Q) {
      return P.call(
        Q.ownerDocument || Q,
        Q,
        // eslint-disable-next-line no-bitwise
        l.SHOW_ELEMENT | l.SHOW_COMMENT | l.SHOW_TEXT | l.SHOW_PROCESSING_INSTRUCTION | l.SHOW_CDATA_SECTION,
        null,
        !1
      );
    }, jH = function(Q) {
      return Q instanceof h && (typeof Q.nodeName != "string" || typeof Q.textContent != "string" || typeof Q.removeChild != "function" || !(Q.attributes instanceof u) || typeof Q.removeAttribute != "function" || typeof Q.setAttribute != "function" || typeof Q.namespaceURI != "string" || typeof Q.insertBefore != "function" || typeof Q.hasChildNodes != "function");
    }, hm = function(Q) {
      return vu(o) === "object" ? Q instanceof o : Q && vu(Q) === "object" && typeof Q.nodeType == "number" && typeof Q.nodeName == "string";
    }, _l = function(Q, me, xe) {
      F[Q] && Nme(F[Q], function(Bt) {
        Bt.call(e, me, xe, mi);
      });
    }, zH = function(Q) {
      var me;
      if (_l("beforeSanitizeElements", Q, null), jH(Q) || Wi(/[\u0080-\uFFFF]/, Q.nodeName))
        return As(Q), !0;
      var xe = xn(Q.nodeName);
      if (_l("uponSanitizeElement", Q, {
        tagName: xe,
        allowedTags: _
      }), Q.hasChildNodes() && !hm(Q.firstElementChild) && (!hm(Q.content) || !hm(Q.content.firstElementChild)) && Wi(/<[/\w]/g, Q.innerHTML) && Wi(/<[/\w]/g, Q.textContent) || xe === "select" && Wi(/<template/i, Q.innerHTML) || Q.nodeType === 7 || ee && Q.nodeType === 8 && Wi(/<[/\w]/g, Q.data))
        return As(Q), !0;
      if (!_[xe] || Y[xe]) {
        if (!Y[xe] && GH(xe) && ($.tagNameCheck instanceof RegExp && Wi($.tagNameCheck, xe) || $.tagNameCheck instanceof Function && $.tagNameCheck(xe)))
          return !1;
        if (re && !ne[xe]) {
          var Bt = y(Q) || Q.parentNode, Lr = v(Q) || Q.childNodes;
          if (Lr && Bt)
            for (var qi = Lr.length, Vi = qi - 1; Vi >= 0; --Vi) {
              var dh = p(Lr[Vi], !0);
              dh.__removalCount = (Q.__removalCount || 0) + 1, Bt.insertBefore(dh, m(Q));
            }
        }
        return As(Q), !0;
      }
      return Q instanceof a && !GZ(Q) || (xe === "noscript" || xe === "noembed" || xe === "noframes") && Wi(/<\/no(script|embed|frames)/i, Q.innerHTML) ? (As(Q), !0) : (Z && Q.nodeType === 3 && (me = Q.textContent, me = Ro(me, W, " "), me = Ro(me, N, " "), me = Ro(me, O, " "), Q.textContent !== me && (Em(e.removed, {
        element: Q.cloneNode()
      }), Q.textContent = me)), _l("afterSanitizeElements", Q, null), !1);
    }, UH = function(Q, me, xe) {
      if (j && (me === "id" || me === "name") && (xe in i || xe in Bi))
        return !1;
      if (!(le && !K[me] && Wi(V, me))) {
        if (!(ce && Wi(G, me))) {
          if (!H[me] || K[me]) {
            if (
              // First condition does a very basic check if a) it's basically a valid custom element tagname AND
              // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
              // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck
              !(GH(Q) && ($.tagNameCheck instanceof RegExp && Wi($.tagNameCheck, Q) || $.tagNameCheck instanceof Function && $.tagNameCheck(Q)) && ($.attributeNameCheck instanceof RegExp && Wi($.attributeNameCheck, me) || $.attributeNameCheck instanceof Function && $.attributeNameCheck(me)) || // Alternative, second condition checks if it's an `is`-attribute, AND
              // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
              me === "is" && $.allowCustomizedBuiltInElements && ($.tagNameCheck instanceof RegExp && Wi($.tagNameCheck, xe) || $.tagNameCheck instanceof Function && $.tagNameCheck(xe)))
            ) return !1;
          } else if (!Ae[me]) {
            if (!Wi(S, Ro(xe, se, ""))) {
              if (!((me === "src" || me === "xlink:href" || me === "href") && Q !== "script" && Lme(xe, "data:") === 0 && oe[Q])) {
                if (!(_e && !Wi(U, Ro(xe, se, "")))) {
                  if (xe)
                    return !1;
                }
              }
            }
          }
        }
      }
      return !0;
    }, GH = function(Q) {
      return Q !== "annotation-xml" && OB(Q, b);
    }, YH = function(Q) {
      var me, xe, Bt, Lr;
      _l("beforeSanitizeAttributes", Q, null);
      var qi = Q.attributes;
      if (qi) {
        var Vi = {
          attrName: "",
          attrValue: "",
          keepAttr: !0,
          allowedAttributes: H
        };
        for (Lr = qi.length; Lr--; ) {
          me = qi[Lr];
          var dh = me, bi = dh.name, TE = dh.namespaceURI;
          if (xe = bi === "value" ? me.value : Hme(me.value), Bt = xn(bi), Vi.attrName = Bt, Vi.attrValue = xe, Vi.keepAttr = !0, Vi.forceKeepAttr = void 0, _l("uponSanitizeAttribute", Q, Vi), xe = Vi.attrValue, !Vi.forceKeepAttr && (My(bi, Q), !!Vi.keepAttr)) {
            if (!be && Wi(/\/>/i, xe)) {
              My(bi, Q);
              continue;
            }
            Z && (xe = Ro(xe, W, " "), xe = Ro(xe, N, " "), xe = Ro(xe, O, " "));
            var KH = xn(Q.nodeName);
            if (UH(KH, Bt, xe)) {
              if (te && (Bt === "id" || Bt === "name") && (My(bi, Q), xe = q + xe), ee && Wi(/((--!?|])>)|<\/(style|title)/i, xe)) {
                My(bi, Q);
                continue;
              }
              if (R && vu(f) === "object" && typeof f.getAttributeType == "function" && !TE)
                switch (f.getAttributeType(KH, Bt)) {
                  case "TrustedHTML": {
                    xe = R.createHTML(xe);
                    break;
                  }
                  case "TrustedScriptURL": {
                    xe = R.createScriptURL(xe);
                    break;
                  }
                }
              try {
                TE ? Q.setAttributeNS(TE, bi, xe) : Q.setAttribute(bi, xe), jH(Q) ? As(Q) : IB(e.removed);
              } catch {
              }
            }
          }
        }
        _l("afterSanitizeAttributes", Q, null);
      }
    }, YZ = function Ve(Q) {
      var me, xe = WH(Q);
      for (_l("beforeSanitizeShadowDOM", Q, null); me = xe.nextNode(); )
        _l("uponSanitizeShadowNode", me, null), !zH(me) && (me.content instanceof r && Ve(me.content), YH(me));
      _l("afterSanitizeShadowDOM", Q, null);
    };
    return e.sanitize = function(Ve) {
      var Q = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, me, xe, Bt, Lr, qi;
      if (xt = !Ve, xt && (Ve = "<!-->"), typeof Ve != "string" && !hm(Ve))
        if (typeof Ve.toString == "function") {
          if (Ve = Ve.toString(), typeof Ve != "string")
            throw jx("dirty is not a string, aborting");
        } else
          throw jx("toString is not a function");
      if (!e.isSupported) {
        if (vu(n.toStaticHTML) === "object" || typeof n.toStaticHTML == "function") {
          if (typeof Ve == "string")
            return n.toStaticHTML(Ve);
          if (hm(Ve))
            return n.toStaticHTML(Ve.outerHTML);
        }
        return Ve;
      }
      if (Ne || EE(Q), e.removed = [], typeof Ve == "string" && (J = !1), J) {
        if (Ve.nodeName) {
          var Vi = xn(Ve.nodeName);
          if (!_[Vi] || Y[Vi])
            throw jx("root node is forbidden and cannot be sanitized in-place");
        }
      } else if (Ve instanceof o)
        me = VH("<!---->"), xe = me.ownerDocument.importNode(Ve, !0), xe.nodeType === 1 && xe.nodeName === "BODY" || xe.nodeName === "HTML" ? me = xe : me.appendChild(xe);
      else {
        if (!ye && !Z && !ae && // eslint-disable-next-line unicorn/prefer-includes
        Ve.indexOf("<") === -1)
          return R && L ? R.createHTML(Ve) : Ve;
        if (me = VH(Ve), !me)
          return ye ? null : L ? E : "";
      }
      me && fe && As(me.firstChild);
      for (var dh = WH(J ? Ve : me); Bt = dh.nextNode(); )
        Bt.nodeType === 3 && Bt === Lr || zH(Bt) || (Bt.content instanceof r && YZ(Bt.content), YH(Bt), Lr = Bt);
      if (Lr = null, J)
        return Ve;
      if (ye) {
        if (k)
          for (qi = x.call(me.ownerDocument); me.firstChild; )
            qi.appendChild(me.firstChild);
        else
          qi = me;
        return (H.shadowroot || H.shadowrootmod) && (qi = D.call(t, qi, !0)), qi;
      }
      var bi = ae ? me.outerHTML : me.innerHTML;
      return ae && _["!doctype"] && me.ownerDocument && me.ownerDocument.doctype && me.ownerDocument.doctype.name && Wi(qme, me.ownerDocument.doctype.name) && (bi = "<!DOCTYPE " + me.ownerDocument.doctype.name + `>
` + bi), Z && (bi = Ro(bi, W, " "), bi = Ro(bi, N, " "), bi = Ro(bi, O, " ")), R && L ? R.createHTML(bi) : bi;
    }, e.setConfig = function(Ve) {
      EE(Ve), Ne = !0;
    }, e.clearConfig = function() {
      mi = null, Ne = !1;
    }, e.isValidAttribute = function(Ve, Q, me) {
      mi || EE({});
      var xe = xn(Ve), Bt = xn(Q);
      return UH(xe, Bt, me);
    }, e.addHook = function(Ve, Q) {
      typeof Q == "function" && (F[Ve] = F[Ve] || [], Em(F[Ve], Q));
    }, e.removeHook = function(Ve) {
      if (F[Ve])
        return IB(F[Ve]);
    }, e.removeHooks = function(Ve) {
      F[Ve] && (F[Ve] = []);
    }, e.removeAllHooks = function() {
      F = {};
    }, e;
  }
  var Jme = $U();
  //! moment.js
  //! version : 2.30.1
  //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
  //! license : MIT
  //! momentjs.com
  var FU;
  function he() {
    return FU.apply(null, arguments);
  }
  function ebe(n) {
    FU = n;
  }
  function na(n) {
    return n instanceof Array || Object.prototype.toString.call(n) === "[object Array]";
  }
  function $d(n) {
    return n != null && Object.prototype.toString.call(n) === "[object Object]";
  }
  function $t(n, e) {
    return Object.prototype.hasOwnProperty.call(n, e);
  }
  function Hk(n) {
    if (Object.getOwnPropertyNames)
      return Object.getOwnPropertyNames(n).length === 0;
    var e;
    for (e in n)
      if ($t(n, e))
        return !1;
    return !0;
  }
  function Ur(n) {
    return n === void 0;
  }
  function Ec(n) {
    return typeof n == "number" || Object.prototype.toString.call(n) === "[object Number]";
  }
  function iy(n) {
    return n instanceof Date || Object.prototype.toString.call(n) === "[object Date]";
  }
  function BU(n, e) {
    var t = [], i, r = n.length;
    for (i = 0; i < r; ++i)
      t.push(e(n[i], i));
    return t;
  }
  function Tu(n, e) {
    for (var t in e)
      $t(e, t) && (n[t] = e[t]);
    return $t(e, "toString") && (n.toString = e.toString), $t(e, "valueOf") && (n.valueOf = e.valueOf), n;
  }
  function yl(n, e, t, i) {
    return c7(n, e, t, i, !0).utc();
  }
  function tbe() {
    return {
      empty: !1,
      unusedTokens: [],
      unusedInput: [],
      overflow: -2,
      charsLeftOver: 0,
      nullInput: !1,
      invalidEra: null,
      invalidMonth: null,
      invalidFormat: !1,
      userInvalidated: !1,
      iso: !1,
      parsedDateParts: [],
      era: null,
      meridiem: null,
      rfc2822: !1,
      weekdayMismatch: !1
    };
  }
  function ct(n) {
    return n._pf == null && (n._pf = tbe()), n._pf;
  }
  var SP;
  Array.prototype.some ? SP = Array.prototype.some : SP = function(n) {
    var e = Object(this), t = e.length >>> 0, i;
    for (i = 0; i < t; i++)
      if (i in e && n.call(this, e[i], i, e))
        return !0;
    return !1;
  };
  function $k(n) {
    var e = null, t = !1, i = n._d && !isNaN(n._d.getTime());
    if (i && (e = ct(n), t = SP.call(e.parsedDateParts, function(r) {
      return r != null;
    }), i = e.overflow < 0 && !e.empty && !e.invalidEra && !e.invalidMonth && !e.invalidWeekday && !e.weekdayMismatch && !e.nullInput && !e.invalidFormat && !e.userInvalidated && (!e.meridiem || e.meridiem && t), n._strict && (i = i && e.charsLeftOver === 0 && e.unusedTokens.length === 0 && e.bigHour === void 0)), Object.isFrozen == null || !Object.isFrozen(n))
      n._isValid = i;
    else
      return i;
    return n._isValid;
  }
  function v1(n) {
    var e = yl(NaN);
    return n != null ? Tu(ct(e), n) : ct(e).userInvalidated = !0, e;
  }
  var HB = he.momentProperties = [], Kx = !1;
  function Fk(n, e) {
    var t, i, r, s = HB.length;
    if (Ur(e._isAMomentObject) || (n._isAMomentObject = e._isAMomentObject), Ur(e._i) || (n._i = e._i), Ur(e._f) || (n._f = e._f), Ur(e._l) || (n._l = e._l), Ur(e._strict) || (n._strict = e._strict), Ur(e._tzm) || (n._tzm = e._tzm), Ur(e._isUTC) || (n._isUTC = e._isUTC), Ur(e._offset) || (n._offset = e._offset), Ur(e._pf) || (n._pf = ct(e)), Ur(e._locale) || (n._locale = e._locale), s > 0)
      for (t = 0; t < s; t++)
        i = HB[t], r = e[i], Ur(r) || (n[i] = r);
    return n;
  }
  function ry(n) {
    Fk(this, n), this._d = new Date(n._d != null ? n._d.getTime() : NaN), this.isValid() || (this._d = /* @__PURE__ */ new Date(NaN)), Kx === !1 && (Kx = !0, he.updateOffset(this), Kx = !1);
  }
  function ia(n) {
    return n instanceof ry || n != null && n._isAMomentObject != null;
  }
  function VU(n) {
    he.suppressDeprecationWarnings === !1 && typeof console < "u" && console.warn && console.warn("Deprecation warning: " + n);
  }
  function po(n, e) {
    var t = !0;
    return Tu(function() {
      if (he.deprecationHandler != null && he.deprecationHandler(null, n), t) {
        var i = [], r, s, o, a = arguments.length;
        for (s = 0; s < a; s++) {
          if (r = "", typeof arguments[s] == "object") {
            r += `
[` + s + "] ";
            for (o in arguments[0])
              $t(arguments[0], o) && (r += o + ": " + arguments[0][o] + ", ");
            r = r.slice(0, -2);
          } else
            r = arguments[s];
          i.push(r);
        }
        VU(n + `
Arguments: ` + Array.prototype.slice.call(i).join("") + `
` + new Error().stack), t = !1;
      }
      return e.apply(this, arguments);
    }, e);
  }
  var $B = {};
  function WU(n, e) {
    he.deprecationHandler != null && he.deprecationHandler(n, e), $B[n] || (VU(e), $B[n] = !0);
  }
  he.suppressDeprecationWarnings = !1;
  he.deprecationHandler = null;
  function Cl(n) {
    return typeof Function < "u" && n instanceof Function || Object.prototype.toString.call(n) === "[object Function]";
  }
  function nbe(n) {
    var e, t;
    for (t in n)
      $t(n, t) && (e = n[t], Cl(e) ? this[t] = e : this["_" + t] = e);
    this._config = n, this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source);
  }
  function _P(n, e) {
    var t = Tu({}, n), i;
    for (i in e)
      $t(e, i) && ($d(n[i]) && $d(e[i]) ? (t[i] = {}, Tu(t[i], n[i]), Tu(t[i], e[i])) : e[i] != null ? t[i] = e[i] : delete t[i]);
    for (i in n)
      $t(n, i) && !$t(e, i) && $d(n[i]) && (t[i] = Tu({}, t[i]));
    return t;
  }
  function Bk(n) {
    n != null && this.set(n);
  }
  var RP;
  Object.keys ? RP = Object.keys : RP = function(n) {
    var e, t = [];
    for (e in n)
      $t(n, e) && t.push(e);
    return t;
  };
  var ibe = {
    sameDay: "[Today at] LT",
    nextDay: "[Tomorrow at] LT",
    nextWeek: "dddd [at] LT",
    lastDay: "[Yesterday at] LT",
    lastWeek: "[Last] dddd [at] LT",
    sameElse: "L"
  };
  function rbe(n, e, t) {
    var i = this._calendar[n] || this._calendar.sameElse;
    return Cl(i) ? i.call(e, t) : i;
  }
  function ol(n, e, t) {
    var i = "" + Math.abs(n), r = e - i.length, s = n >= 0;
    return (s ? t ? "+" : "" : "-") + Math.pow(10, Math.max(0, r)).toString().substr(1) + i;
  }
  var Vk = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, o0 = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, qx = {}, np = {};
  function je(n, e, t, i) {
    var r = i;
    typeof i == "string" && (r = function() {
      return this[i]();
    }), n && (np[n] = r), e && (np[e[0]] = function() {
      return ol(r.apply(this, arguments), e[1], e[2]);
    }), t && (np[t] = function() {
      return this.localeData().ordinal(r.apply(this, arguments), n);
    });
  }
  function sbe(n) {
    return n.match(/\[[\s\S]/) ? n.replace(/^\[|\]$/g, "") : n.replace(/\\/g, "");
  }
  function obe(n) {
    var e = n.match(Vk), t, i;
    for (t = 0, i = e.length; t < i; t++)
      np[e[t]] ? e[t] = np[e[t]] : e[t] = sbe(e[t]);
    return function(r) {
      var s = "", o;
      for (o = 0; o < i; o++)
        s += Cl(e[o]) ? e[o].call(r, n) : e[o];
      return s;
    };
  }
  function pS(n, e) {
    return n.isValid() ? (e = jU(e, n.localeData()), qx[e] = qx[e] || obe(e), qx[e](n)) : n.localeData().invalidDate();
  }
  function jU(n, e) {
    var t = 5;
    function i(r) {
      return e.longDateFormat(r) || r;
    }
    for (o0.lastIndex = 0; t >= 0 && o0.test(n); )
      n = n.replace(o0, i), o0.lastIndex = 0, t -= 1;
    return n;
  }
  var abe = {
    LTS: "h:mm:ss A",
    LT: "h:mm A",
    L: "MM/DD/YYYY",
    LL: "MMMM D, YYYY",
    LLL: "MMMM D, YYYY h:mm A",
    LLLL: "dddd, MMMM D, YYYY h:mm A"
  };
  function lbe(n) {
    var e = this._longDateFormat[n], t = this._longDateFormat[n.toUpperCase()];
    return e || !t ? e : (this._longDateFormat[n] = t.match(Vk).map(function(i) {
      return i === "MMMM" || i === "MM" || i === "DD" || i === "dddd" ? i.slice(1) : i;
    }).join(""), this._longDateFormat[n]);
  }
  var cbe = "Invalid date";
  function ube() {
    return this._invalidDate;
  }
  var hbe = "%d", dbe = /\d{1,2}/;
  function fbe(n) {
    return this._ordinal.replace("%d", n);
  }
  var gbe = {
    future: "in %s",
    past: "%s ago",
    s: "a few seconds",
    ss: "%d seconds",
    m: "a minute",
    mm: "%d minutes",
    h: "an hour",
    hh: "%d hours",
    d: "a day",
    dd: "%d days",
    w: "a week",
    ww: "%d weeks",
    M: "a month",
    MM: "%d months",
    y: "a year",
    yy: "%d years"
  };
  function pbe(n, e, t, i) {
    var r = this._relativeTime[t];
    return Cl(r) ? r(n, e, t, i) : r.replace(/%d/i, n);
  }
  function mbe(n, e) {
    var t = this._relativeTime[n > 0 ? "future" : "past"];
    return Cl(t) ? t(e) : t.replace(/%s/i, e);
  }
  var FB = {
    D: "date",
    dates: "date",
    date: "date",
    d: "day",
    days: "day",
    day: "day",
    e: "weekday",
    weekdays: "weekday",
    weekday: "weekday",
    E: "isoWeekday",
    isoweekdays: "isoWeekday",
    isoweekday: "isoWeekday",
    DDD: "dayOfYear",
    dayofyears: "dayOfYear",
    dayofyear: "dayOfYear",
    h: "hour",
    hours: "hour",
    hour: "hour",
    ms: "millisecond",
    milliseconds: "millisecond",
    millisecond: "millisecond",
    m: "minute",
    minutes: "minute",
    minute: "minute",
    M: "month",
    months: "month",
    month: "month",
    Q: "quarter",
    quarters: "quarter",
    quarter: "quarter",
    s: "second",
    seconds: "second",
    second: "second",
    gg: "weekYear",
    weekyears: "weekYear",
    weekyear: "weekYear",
    GG: "isoWeekYear",
    isoweekyears: "isoWeekYear",
    isoweekyear: "isoWeekYear",
    w: "week",
    weeks: "week",
    week: "week",
    W: "isoWeek",
    isoweeks: "isoWeek",
    isoweek: "isoWeek",
    y: "year",
    years: "year",
    year: "year"
  };
  function mo(n) {
    return typeof n == "string" ? FB[n] || FB[n.toLowerCase()] : void 0;
  }
  function Wk(n) {
    var e = {}, t, i;
    for (i in n)
      $t(n, i) && (t = mo(i), t && (e[t] = n[i]));
    return e;
  }
  var bbe = {
    date: 9,
    day: 11,
    weekday: 11,
    isoWeekday: 11,
    dayOfYear: 4,
    hour: 13,
    millisecond: 16,
    minute: 14,
    month: 8,
    quarter: 7,
    second: 15,
    weekYear: 1,
    isoWeekYear: 1,
    week: 5,
    isoWeek: 5,
    year: 1
  };
  function vbe(n) {
    var e = [], t;
    for (t in n)
      $t(n, t) && e.push({
        unit: t,
        priority: bbe[t]
      });
    return e.sort(function(i, r) {
      return i.priority - r.priority;
    }), e;
  }
  var zU = /\d/, Ts = /\d\d/, UU = /\d{3}/, jk = /\d{4}/, w1 = /[+-]?\d{6}/, En = /\d\d?/, GU = /\d\d\d\d?/, YU = /\d\d\d\d\d\d?/, y1 = /\d{1,3}/, zk = /\d{1,4}/, C1 = /[+-]?\d{1,6}/, Gp = /\d+/, S1 = /[+-]?\d+/, wbe = /Z|[+-]\d\d:?\d\d/gi, _1 = /Z|[+-]\d\d(?::?\d\d)?/gi, ybe = /[+-]?\d+(\.\d{1,3})?/, sy = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, Yp = /^[1-9]\d?/, Uk = /^([1-9]\d|\d)/, __;
  __ = {};
  function De(n, e, t) {
    __[n] = Cl(e) ? e : function(i, r) {
      return i && t ? t : e;
    };
  }
  function Cbe(n, e) {
    return $t(__, n) ? __[n](e._strict, e._locale) : new RegExp(Sbe(n));
  }
  function Sbe(n) {
    return yc(n.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(e, t, i, r, s) {
      return t || i || r || s;
    }));
  }
  function yc(n) {
    return n.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
  }
  function qs(n) {
    return n < 0 ? Math.ceil(n) || 0 : Math.floor(n);
  }
  function Et(n) {
    var e = +n, t = 0;
    return e !== 0 && isFinite(e) && (t = qs(e)), t;
  }
  var EP = {};
  function ln(n, e) {
    var t, i = e, r;
    for (typeof n == "string" && (n = [n]), Ec(e) && (i = function(s, o) {
      o[e] = Et(s);
    }), r = n.length, t = 0; t < r; t++)
      EP[n[t]] = i;
  }
  function oy(n, e) {
    ln(n, function(t, i, r, s) {
      r._w = r._w || {}, e(t, r._w, r, s);
    });
  }
  function _be(n, e, t) {
    e != null && $t(EP, n) && EP[n](e, t._a, t, n);
  }
  function R1(n) {
    return n % 4 === 0 && n % 100 !== 0 || n % 400 === 0;
  }
  var ur = 0, hc = 1, Va = 2, Ei = 3, qo = 4, dc = 5, Cd = 6, Rbe = 7, Ebe = 8;
  je("Y", 0, 0, function() {
    var n = this.year();
    return n <= 9999 ? ol(n, 4) : "+" + n;
  });
  je(0, ["YY", 2], 0, function() {
    return this.year() % 100;
  });
  je(0, ["YYYY", 4], 0, "year");
  je(0, ["YYYYY", 5], 0, "year");
  je(0, ["YYYYYY", 6, !0], 0, "year");
  De("Y", S1);
  De("YY", En, Ts);
  De("YYYY", zk, jk);
  De("YYYYY", C1, w1);
  De("YYYYYY", C1, w1);
  ln(["YYYYY", "YYYYYY"], ur);
  ln("YYYY", function(n, e) {
    e[ur] = n.length === 2 ? he.parseTwoDigitYear(n) : Et(n);
  });
  ln("YY", function(n, e) {
    e[ur] = he.parseTwoDigitYear(n);
  });
  ln("Y", function(n, e) {
    e[ur] = parseInt(n, 10);
  });
  function mv(n) {
    return R1(n) ? 366 : 365;
  }
  he.parseTwoDigitYear = function(n) {
    return Et(n) + (Et(n) > 68 ? 1900 : 2e3);
  };
  var KU = Kp("FullYear", !0);
  function xbe() {
    return R1(this.year());
  }
  function Kp(n, e) {
    return function(t) {
      return t != null ? (qU(this, n, t), he.updateOffset(this, e), this) : lw(this, n);
    };
  }
  function lw(n, e) {
    if (!n.isValid())
      return NaN;
    var t = n._d, i = n._isUTC;
    switch (e) {
      case "Milliseconds":
        return i ? t.getUTCMilliseconds() : t.getMilliseconds();
      case "Seconds":
        return i ? t.getUTCSeconds() : t.getSeconds();
      case "Minutes":
        return i ? t.getUTCMinutes() : t.getMinutes();
      case "Hours":
        return i ? t.getUTCHours() : t.getHours();
      case "Date":
        return i ? t.getUTCDate() : t.getDate();
      case "Day":
        return i ? t.getUTCDay() : t.getDay();
      case "Month":
        return i ? t.getUTCMonth() : t.getMonth();
      case "FullYear":
        return i ? t.getUTCFullYear() : t.getFullYear();
      default:
        return NaN;
    }
  }
  function qU(n, e, t) {
    var i, r, s, o, a;
    if (!(!n.isValid() || isNaN(t))) {
      switch (i = n._d, r = n._isUTC, e) {
        case "Milliseconds":
          return void (r ? i.setUTCMilliseconds(t) : i.setMilliseconds(t));
        case "Seconds":
          return void (r ? i.setUTCSeconds(t) : i.setSeconds(t));
        case "Minutes":
          return void (r ? i.setUTCMinutes(t) : i.setMinutes(t));
        case "Hours":
          return void (r ? i.setUTCHours(t) : i.setHours(t));
        case "Date":
          return void (r ? i.setUTCDate(t) : i.setDate(t));
        case "FullYear":
          break;
        default:
          return;
      }
      s = t, o = n.month(), a = n.date(), a = a === 29 && o === 1 && !R1(s) ? 28 : a, r ? i.setUTCFullYear(s, o, a) : i.setFullYear(s, o, a);
    }
  }
  function Tbe(n) {
    return n = mo(n), Cl(this[n]) ? this[n]() : this;
  }
  function Mbe(n, e) {
    if (typeof n == "object") {
      n = Wk(n);
      var t = vbe(n), i, r = t.length;
      for (i = 0; i < r; i++)
        this[t[i].unit](n[t[i].unit]);
    } else if (n = mo(n), Cl(this[n]))
      return this[n](e);
    return this;
  }
  function Abe(n, e) {
    return (n % e + e) % e;
  }
  var ri;
  Array.prototype.indexOf ? ri = Array.prototype.indexOf : ri = function(n) {
    var e;
    for (e = 0; e < this.length; ++e)
      if (this[e] === n)
        return e;
    return -1;
  };
  function Gk(n, e) {
    if (isNaN(n) || isNaN(e))
      return NaN;
    var t = Abe(e, 12);
    return n += (e - t) / 12, t === 1 ? R1(n) ? 29 : 28 : 31 - t % 7 % 2;
  }
  je("M", ["MM", 2], "Mo", function() {
    return this.month() + 1;
  });
  je("MMM", 0, 0, function(n) {
    return this.localeData().monthsShort(this, n);
  });
  je("MMMM", 0, 0, function(n) {
    return this.localeData().months(this, n);
  });
  De("M", En, Yp);
  De("MM", En, Ts);
  De("MMM", function(n, e) {
    return e.monthsShortRegex(n);
  });
  De("MMMM", function(n, e) {
    return e.monthsRegex(n);
  });
  ln(["M", "MM"], function(n, e) {
    e[hc] = Et(n) - 1;
  });
  ln(["MMM", "MMMM"], function(n, e, t, i) {
    var r = t._locale.monthsParse(n, i, t._strict);
    r != null ? e[hc] = r : ct(t).invalidMonth = n;
  });
  var Pbe = "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), XU = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), ZU = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, Ibe = sy, Obe = sy;
  function kbe(n, e) {
    return n ? na(this._months) ? this._months[n.month()] : this._months[(this._months.isFormat || ZU).test(e) ? "format" : "standalone"][n.month()] : na(this._months) ? this._months : this._months.standalone;
  }
  function Dbe(n, e) {
    return n ? na(this._monthsShort) ? this._monthsShort[n.month()] : this._monthsShort[ZU.test(e) ? "format" : "standalone"][n.month()] : na(this._monthsShort) ? this._monthsShort : this._monthsShort.standalone;
  }
  function Nbe(n, e, t) {
    var i, r, s, o = n.toLocaleLowerCase();
    if (!this._monthsParse)
      for (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = [], i = 0; i < 12; ++i)
        s = yl([2e3, i]), this._shortMonthsParse[i] = this.monthsShort(s, "").toLocaleLowerCase(), this._longMonthsParse[i] = this.months(s, "").toLocaleLowerCase();
    return t ? e === "MMM" ? (r = ri.call(this._shortMonthsParse, o), r !== -1 ? r : null) : (r = ri.call(this._longMonthsParse, o), r !== -1 ? r : null) : e === "MMM" ? (r = ri.call(this._shortMonthsParse, o), r !== -1 ? r : (r = ri.call(this._longMonthsParse, o), r !== -1 ? r : null)) : (r = ri.call(this._longMonthsParse, o), r !== -1 ? r : (r = ri.call(this._shortMonthsParse, o), r !== -1 ? r : null));
  }
  function Lbe(n, e, t) {
    var i, r, s;
    if (this._monthsParseExact)
      return Nbe.call(this, n, e, t);
    for (this._monthsParse || (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = []), i = 0; i < 12; i++) {
      if (r = yl([2e3, i]), t && !this._longMonthsParse[i] && (this._longMonthsParse[i] = new RegExp("^" + this.months(r, "").replace(".", "") + "$", "i"), this._shortMonthsParse[i] = new RegExp("^" + this.monthsShort(r, "").replace(".", "") + "$", "i")), !t && !this._monthsParse[i] && (s = "^" + this.months(r, "") + "|^" + this.monthsShort(r, ""), this._monthsParse[i] = new RegExp(s.replace(".", ""), "i")), t && e === "MMMM" && this._longMonthsParse[i].test(n))
        return i;
      if (t && e === "MMM" && this._shortMonthsParse[i].test(n))
        return i;
      if (!t && this._monthsParse[i].test(n))
        return i;
    }
  }
  function QU(n, e) {
    if (!n.isValid())
      return n;
    if (typeof e == "string") {
      if (/^\d+$/.test(e))
        e = Et(e);
      else if (e = n.localeData().monthsParse(e), !Ec(e))
        return n;
    }
    var t = e, i = n.date();
    return i = i < 29 ? i : Math.min(i, Gk(n.year(), t)), n._isUTC ? n._d.setUTCMonth(t, i) : n._d.setMonth(t, i), n;
  }
  function JU(n) {
    return n != null ? (QU(this, n), he.updateOffset(this, !0), this) : lw(this, "Month");
  }
  function Hbe() {
    return Gk(this.year(), this.month());
  }
  function $be(n) {
    return this._monthsParseExact ? ($t(this, "_monthsRegex") || e7.call(this), n ? this._monthsShortStrictRegex : this._monthsShortRegex) : ($t(this, "_monthsShortRegex") || (this._monthsShortRegex = Ibe), this._monthsShortStrictRegex && n ? this._monthsShortStrictRegex : this._monthsShortRegex);
  }
  function Fbe(n) {
    return this._monthsParseExact ? ($t(this, "_monthsRegex") || e7.call(this), n ? this._monthsStrictRegex : this._monthsRegex) : ($t(this, "_monthsRegex") || (this._monthsRegex = Obe), this._monthsStrictRegex && n ? this._monthsStrictRegex : this._monthsRegex);
  }
  function e7() {
    function n(l, c) {
      return c.length - l.length;
    }
    var e = [], t = [], i = [], r, s, o, a;
    for (r = 0; r < 12; r++)
      s = yl([2e3, r]), o = yc(this.monthsShort(s, "")), a = yc(this.months(s, "")), e.push(o), t.push(a), i.push(a), i.push(o);
    e.sort(n), t.sort(n), i.sort(n), this._monthsRegex = new RegExp("^(" + i.join("|") + ")", "i"), this._monthsShortRegex = this._monthsRegex, this._monthsStrictRegex = new RegExp("^(" + t.join("|") + ")", "i"), this._monthsShortStrictRegex = new RegExp("^(" + e.join("|") + ")", "i");
  }
  function Bbe(n, e, t, i, r, s, o) {
    var a;
    return n < 100 && n >= 0 ? (a = new Date(n + 400, e, t, i, r, s, o), isFinite(a.getFullYear()) && a.setFullYear(n)) : a = new Date(n, e, t, i, r, s, o), a;
  }
  function cw(n) {
    var e, t;
    return n < 100 && n >= 0 ? (t = Array.prototype.slice.call(arguments), t[0] = n + 400, e = new Date(Date.UTC.apply(null, t)), isFinite(e.getUTCFullYear()) && e.setUTCFullYear(n)) : e = new Date(Date.UTC.apply(null, arguments)), e;
  }
  function R_(n, e, t) {
    var i = 7 + e - t, r = (7 + cw(n, 0, i).getUTCDay() - e) % 7;
    return -r + i - 1;
  }
  function t7(n, e, t, i, r) {
    var s = (7 + t - i) % 7, o = R_(n, i, r), a = 1 + 7 * (e - 1) + s + o, l, c;
    return a <= 0 ? (l = n - 1, c = mv(l) + a) : a > mv(n) ? (l = n + 1, c = a - mv(n)) : (l = n, c = a), {
      year: l,
      dayOfYear: c
    };
  }
  function uw(n, e, t) {
    var i = R_(n.year(), e, t), r = Math.floor((n.dayOfYear() - i - 1) / 7) + 1, s, o;
    return r < 1 ? (o = n.year() - 1, s = r + Cc(o, e, t)) : r > Cc(n.year(), e, t) ? (s = r - Cc(n.year(), e, t), o = n.year() + 1) : (o = n.year(), s = r), {
      week: s,
      year: o
    };
  }
  function Cc(n, e, t) {
    var i = R_(n, e, t), r = R_(n + 1, e, t);
    return (mv(n) - i + r) / 7;
  }
  je("w", ["ww", 2], "wo", "week");
  je("W", ["WW", 2], "Wo", "isoWeek");
  De("w", En, Yp);
  De("ww", En, Ts);
  De("W", En, Yp);
  De("WW", En, Ts);
  oy(["w", "ww", "W", "WW"], function(n, e, t, i) {
    e[i.substr(0, 1)] = Et(n);
  });
  function Vbe(n) {
    return uw(n, this._week.dow, this._week.doy).week;
  }
  var Wbe = {
    dow: 0,
    // Sunday is the first day of the week.
    doy: 6
    // The week that contains Jan 6th is the first week of the year.
  };
  function jbe() {
    return this._week.dow;
  }
  function zbe() {
    return this._week.doy;
  }
  function Ube(n) {
    var e = this.localeData().week(this);
    return n == null ? e : this.add((n - e) * 7, "d");
  }
  function Gbe(n) {
    var e = uw(this, 1, 4).week;
    return n == null ? e : this.add((n - e) * 7, "d");
  }
  je("d", 0, "do", "day");
  je("dd", 0, 0, function(n) {
    return this.localeData().weekdaysMin(this, n);
  });
  je("ddd", 0, 0, function(n) {
    return this.localeData().weekdaysShort(this, n);
  });
  je("dddd", 0, 0, function(n) {
    return this.localeData().weekdays(this, n);
  });
  je("e", 0, 0, "weekday");
  je("E", 0, 0, "isoWeekday");
  De("d", En);
  De("e", En);
  De("E", En);
  De("dd", function(n, e) {
    return e.weekdaysMinRegex(n);
  });
  De("ddd", function(n, e) {
    return e.weekdaysShortRegex(n);
  });
  De("dddd", function(n, e) {
    return e.weekdaysRegex(n);
  });
  oy(["dd", "ddd", "dddd"], function(n, e, t, i) {
    var r = t._locale.weekdaysParse(n, i, t._strict);
    r != null ? e.d = r : ct(t).invalidWeekday = n;
  });
  oy(["d", "e", "E"], function(n, e, t, i) {
    e[i] = Et(n);
  });
  function Ybe(n, e) {
    return typeof n != "string" ? n : isNaN(n) ? (n = e.weekdaysParse(n), typeof n == "number" ? n : null) : parseInt(n, 10);
  }
  function Kbe(n, e) {
    return typeof n == "string" ? e.weekdaysParse(n) % 7 || 7 : isNaN(n) ? null : n;
  }
  function Yk(n, e) {
    return n.slice(e, 7).concat(n.slice(0, e));
  }
  var qbe = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), n7 = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), Xbe = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), Zbe = sy, Qbe = sy, Jbe = sy;
  function eve(n, e) {
    var t = na(this._weekdays) ? this._weekdays : this._weekdays[n && n !== !0 && this._weekdays.isFormat.test(e) ? "format" : "standalone"];
    return n === !0 ? Yk(t, this._week.dow) : n ? t[n.day()] : t;
  }
  function tve(n) {
    return n === !0 ? Yk(this._weekdaysShort, this._week.dow) : n ? this._weekdaysShort[n.day()] : this._weekdaysShort;
  }
  function nve(n) {
    return n === !0 ? Yk(this._weekdaysMin, this._week.dow) : n ? this._weekdaysMin[n.day()] : this._weekdaysMin;
  }
  function ive(n, e, t) {
    var i, r, s, o = n.toLocaleLowerCase();
    if (!this._weekdaysParse)
      for (this._weekdaysParse = [], this._shortWeekdaysParse = [], this._minWeekdaysParse = [], i = 0; i < 7; ++i)
        s = yl([2e3, 1]).day(i), this._minWeekdaysParse[i] = this.weekdaysMin(s, "").toLocaleLowerCase(), this._shortWeekdaysParse[i] = this.weekdaysShort(s, "").toLocaleLowerCase(), this._weekdaysParse[i] = this.weekdays(s, "").toLocaleLowerCase();
    return t ? e === "dddd" ? (r = ri.call(this._weekdaysParse, o), r !== -1 ? r : null) : e === "ddd" ? (r = ri.call(this._shortWeekdaysParse, o), r !== -1 ? r : null) : (r = ri.call(this._minWeekdaysParse, o), r !== -1 ? r : null) : e === "dddd" ? (r = ri.call(this._weekdaysParse, o), r !== -1 || (r = ri.call(this._shortWeekdaysParse, o), r !== -1) ? r : (r = ri.call(this._minWeekdaysParse, o), r !== -1 ? r : null)) : e === "ddd" ? (r = ri.call(this._shortWeekdaysParse, o), r !== -1 || (r = ri.call(this._weekdaysParse, o), r !== -1) ? r : (r = ri.call(this._minWeekdaysParse, o), r !== -1 ? r : null)) : (r = ri.call(this._minWeekdaysParse, o), r !== -1 || (r = ri.call(this._weekdaysParse, o), r !== -1) ? r : (r = ri.call(this._shortWeekdaysParse, o), r !== -1 ? r : null));
  }
  function rve(n, e, t) {
    var i, r, s;
    if (this._weekdaysParseExact)
      return ive.call(this, n, e, t);
    for (this._weekdaysParse || (this._weekdaysParse = [], this._minWeekdaysParse = [], this._shortWeekdaysParse = [], this._fullWeekdaysParse = []), i = 0; i < 7; i++) {
      if (r = yl([2e3, 1]).day(i), t && !this._fullWeekdaysParse[i] && (this._fullWeekdaysParse[i] = new RegExp("^" + this.weekdays(r, "").replace(".", "\\.?") + "$", "i"), this._shortWeekdaysParse[i] = new RegExp("^" + this.weekdaysShort(r, "").replace(".", "\\.?") + "$", "i"), this._minWeekdaysParse[i] = new RegExp("^" + this.weekdaysMin(r, "").replace(".", "\\.?") + "$", "i")), this._weekdaysParse[i] || (s = "^" + this.weekdays(r, "") + "|^" + this.weekdaysShort(r, "") + "|^" + this.weekdaysMin(r, ""), this._weekdaysParse[i] = new RegExp(s.replace(".", ""), "i")), t && e === "dddd" && this._fullWeekdaysParse[i].test(n))
        return i;
      if (t && e === "ddd" && this._shortWeekdaysParse[i].test(n))
        return i;
      if (t && e === "dd" && this._minWeekdaysParse[i].test(n))
        return i;
      if (!t && this._weekdaysParse[i].test(n))
        return i;
    }
  }
  function sve(n) {
    if (!this.isValid())
      return n != null ? this : NaN;
    var e = lw(this, "Day");
    return n != null ? (n = Ybe(n, this.localeData()), this.add(n - e, "d")) : e;
  }
  function ove(n) {
    if (!this.isValid())
      return n != null ? this : NaN;
    var e = (this.day() + 7 - this.localeData()._week.dow) % 7;
    return n == null ? e : this.add(n - e, "d");
  }
  function ave(n) {
    if (!this.isValid())
      return n != null ? this : NaN;
    if (n != null) {
      var e = Kbe(n, this.localeData());
      return this.day(this.day() % 7 ? e : e - 7);
    } else
      return this.day() || 7;
  }
  function lve(n) {
    return this._weekdaysParseExact ? ($t(this, "_weekdaysRegex") || Kk.call(this), n ? this._weekdaysStrictRegex : this._weekdaysRegex) : ($t(this, "_weekdaysRegex") || (this._weekdaysRegex = Zbe), this._weekdaysStrictRegex && n ? this._weekdaysStrictRegex : this._weekdaysRegex);
  }
  function cve(n) {
    return this._weekdaysParseExact ? ($t(this, "_weekdaysRegex") || Kk.call(this), n ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex) : ($t(this, "_weekdaysShortRegex") || (this._weekdaysShortRegex = Qbe), this._weekdaysShortStrictRegex && n ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex);
  }
  function uve(n) {
    return this._weekdaysParseExact ? ($t(this, "_weekdaysRegex") || Kk.call(this), n ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex) : ($t(this, "_weekdaysMinRegex") || (this._weekdaysMinRegex = Jbe), this._weekdaysMinStrictRegex && n ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex);
  }
  function Kk() {
    function n(u, h) {
      return h.length - u.length;
    }
    var e = [], t = [], i = [], r = [], s, o, a, l, c;
    for (s = 0; s < 7; s++)
      o = yl([2e3, 1]).day(s), a = yc(this.weekdaysMin(o, "")), l = yc(this.weekdaysShort(o, "")), c = yc(this.weekdays(o, "")), e.push(a), t.push(l), i.push(c), r.push(a), r.push(l), r.push(c);
    e.sort(n), t.sort(n), i.sort(n), r.sort(n), this._weekdaysRegex = new RegExp("^(" + r.join("|") + ")", "i"), this._weekdaysShortRegex = this._weekdaysRegex, this._weekdaysMinRegex = this._weekdaysRegex, this._weekdaysStrictRegex = new RegExp("^(" + i.join("|") + ")", "i"), this._weekdaysShortStrictRegex = new RegExp("^(" + t.join("|") + ")", "i"), this._weekdaysMinStrictRegex = new RegExp("^(" + e.join("|") + ")", "i");
  }
  function qk() {
    return this.hours() % 12 || 12;
  }
  function hve() {
    return this.hours() || 24;
  }
  je("H", ["HH", 2], 0, "hour");
  je("h", ["hh", 2], 0, qk);
  je("k", ["kk", 2], 0, hve);
  je("hmm", 0, 0, function() {
    return "" + qk.apply(this) + ol(this.minutes(), 2);
  });
  je("hmmss", 0, 0, function() {
    return "" + qk.apply(this) + ol(this.minutes(), 2) + ol(this.seconds(), 2);
  });
  je("Hmm", 0, 0, function() {
    return "" + this.hours() + ol(this.minutes(), 2);
  });
  je("Hmmss", 0, 0, function() {
    return "" + this.hours() + ol(this.minutes(), 2) + ol(this.seconds(), 2);
  });
  function i7(n, e) {
    je(n, 0, 0, function() {
      return this.localeData().meridiem(this.hours(), this.minutes(), e);
    });
  }
  i7("a", !0);
  i7("A", !1);
  function r7(n, e) {
    return e._meridiemParse;
  }
  De("a", r7);
  De("A", r7);
  De("H", En, Uk);
  De("h", En, Yp);
  De("k", En, Yp);
  De("HH", En, Ts);
  De("hh", En, Ts);
  De("kk", En, Ts);
  De("hmm", GU);
  De("hmmss", YU);
  De("Hmm", GU);
  De("Hmmss", YU);
  ln(["H", "HH"], Ei);
  ln(["k", "kk"], function(n, e, t) {
    var i = Et(n);
    e[Ei] = i === 24 ? 0 : i;
  });
  ln(["a", "A"], function(n, e, t) {
    t._isPm = t._locale.isPM(n), t._meridiem = n;
  });
  ln(["h", "hh"], function(n, e, t) {
    e[Ei] = Et(n), ct(t).bigHour = !0;
  });
  ln("hmm", function(n, e, t) {
    var i = n.length - 2;
    e[Ei] = Et(n.substr(0, i)), e[qo] = Et(n.substr(i)), ct(t).bigHour = !0;
  });
  ln("hmmss", function(n, e, t) {
    var i = n.length - 4, r = n.length - 2;
    e[Ei] = Et(n.substr(0, i)), e[qo] = Et(n.substr(i, 2)), e[dc] = Et(n.substr(r)), ct(t).bigHour = !0;
  });
  ln("Hmm", function(n, e, t) {
    var i = n.length - 2;
    e[Ei] = Et(n.substr(0, i)), e[qo] = Et(n.substr(i));
  });
  ln("Hmmss", function(n, e, t) {
    var i = n.length - 4, r = n.length - 2;
    e[Ei] = Et(n.substr(0, i)), e[qo] = Et(n.substr(i, 2)), e[dc] = Et(n.substr(r));
  });
  function dve(n) {
    return (n + "").toLowerCase().charAt(0) === "p";
  }
  var fve = /[ap]\.?m?\.?/i, gve = Kp("Hours", !0);
  function pve(n, e, t) {
    return n > 11 ? t ? "pm" : "PM" : t ? "am" : "AM";
  }
  var s7 = {
    calendar: ibe,
    longDateFormat: abe,
    invalidDate: cbe,
    ordinal: hbe,
    dayOfMonthOrdinalParse: dbe,
    relativeTime: gbe,
    months: Pbe,
    monthsShort: XU,
    week: Wbe,
    weekdays: qbe,
    weekdaysMin: Xbe,
    weekdaysShort: n7,
    meridiemParse: fve
  }, An = {}, xm = {}, hw;
  function mve(n, e) {
    var t, i = Math.min(n.length, e.length);
    for (t = 0; t < i; t += 1)
      if (n[t] !== e[t])
        return t;
    return i;
  }
  function BB(n) {
    return n && n.toLowerCase().replace("_", "-");
  }
  function bve(n) {
    for (var e = 0, t, i, r, s; e < n.length; ) {
      for (s = BB(n[e]).split("-"), t = s.length, i = BB(n[e + 1]), i = i ? i.split("-") : null; t > 0; ) {
        if (r = E1(s.slice(0, t).join("-")), r)
          return r;
        if (i && i.length >= t && mve(s, i) >= t - 1)
          break;
        t--;
      }
      e++;
    }
    return hw;
  }
  function vve(n) {
    return !!(n && n.match("^[^/\\\\]*$"));
  }
  function E1(n) {
    var e = null, t;
    if (An[n] === void 0 && typeof zS < "u" && zS && zS.exports && vve(n))
      try {
        e = hw._abbr, t = require, t("./locale/" + n), Lu(e);
      } catch {
        An[n] = null;
      }
    return An[n];
  }
  function Lu(n, e) {
    var t;
    return n && (Ur(e) ? t = $c(n) : t = Xk(n, e), t ? hw = t : typeof console < "u" && console.warn && console.warn("Locale " + n + " not found. Did you forget to load it?")), hw._abbr;
  }
  function Xk(n, e) {
    if (e !== null) {
      var t, i = s7;
      if (e.abbr = n, An[n] != null)
        WU("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."), i = An[n]._config;
      else if (e.parentLocale != null)
        if (An[e.parentLocale] != null)
          i = An[e.parentLocale]._config;
        else if (t = E1(e.parentLocale), t != null)
          i = t._config;
        else
          return xm[e.parentLocale] || (xm[e.parentLocale] = []), xm[e.parentLocale].push({
            name: n,
            config: e
          }), null;
      return An[n] = new Bk(_P(i, e)), xm[n] && xm[n].forEach(function(r) {
        Xk(r.name, r.config);
      }), Lu(n), An[n];
    } else
      return delete An[n], null;
  }
  function wve(n, e) {
    if (e != null) {
      var t, i, r = s7;
      An[n] != null && An[n].parentLocale != null ? An[n].set(_P(An[n]._config, e)) : (i = E1(n), i != null && (r = i._config), e = _P(r, e), i == null && (e.abbr = n), t = new Bk(e), t.parentLocale = An[n], An[n] = t), Lu(n);
    } else
      An[n] != null && (An[n].parentLocale != null ? (An[n] = An[n].parentLocale, n === Lu() && Lu(n)) : An[n] != null && delete An[n]);
    return An[n];
  }
  function $c(n) {
    var e;
    if (n && n._locale && n._locale._abbr && (n = n._locale._abbr), !n)
      return hw;
    if (!na(n)) {
      if (e = E1(n), e)
        return e;
      n = [n];
    }
    return bve(n);
  }
  function yve() {
    return RP(An);
  }
  function Zk(n) {
    var e, t = n._a;
    return t && ct(n).overflow === -2 && (e = t[hc] < 0 || t[hc] > 11 ? hc : t[Va] < 1 || t[Va] > Gk(t[ur], t[hc]) ? Va : t[Ei] < 0 || t[Ei] > 24 || t[Ei] === 24 && (t[qo] !== 0 || t[dc] !== 0 || t[Cd] !== 0) ? Ei : t[qo] < 0 || t[qo] > 59 ? qo : t[dc] < 0 || t[dc] > 59 ? dc : t[Cd] < 0 || t[Cd] > 999 ? Cd : -1, ct(n)._overflowDayOfYear && (e < ur || e > Va) && (e = Va), ct(n)._overflowWeeks && e === -1 && (e = Rbe), ct(n)._overflowWeekday && e === -1 && (e = Ebe), ct(n).overflow = e), n;
  }
  var Cve = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, Sve = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, _ve = /Z|[+-]\d\d(?::?\d\d)?/, a0 = [["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/], ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/], ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/], ["GGGG-[W]WW", /\d{4}-W\d\d/, !1], ["YYYY-DDD", /\d{4}-\d{3}/], ["YYYY-MM", /\d{4}-\d\d/, !1], ["YYYYYYMMDD", /[+-]\d{10}/], ["YYYYMMDD", /\d{8}/], ["GGGG[W]WWE", /\d{4}W\d{3}/], ["GGGG[W]WW", /\d{4}W\d{2}/, !1], ["YYYYDDD", /\d{7}/], ["YYYYMM", /\d{6}/, !1], ["YYYY", /\d{4}/, !1]], Xx = [["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/], ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/], ["HH:mm:ss", /\d\d:\d\d:\d\d/], ["HH:mm", /\d\d:\d\d/], ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/], ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/], ["HHmmss", /\d\d\d\d\d\d/], ["HHmm", /\d\d\d\d/], ["HH", /\d\d/]], Rve = /^\/?Date\((-?\d+)/i, Eve = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, xve = {
    UT: 0,
    GMT: 0,
    EDT: -4 * 60,
    EST: -5 * 60,
    CDT: -5 * 60,
    CST: -6 * 60,
    MDT: -6 * 60,
    MST: -7 * 60,
    PDT: -7 * 60,
    PST: -8 * 60
  };
  function o7(n) {
    var e, t, i = n._i, r = Cve.exec(i) || Sve.exec(i), s, o, a, l, c = a0.length, u = Xx.length;
    if (r) {
      for (ct(n).iso = !0, e = 0, t = c; e < t; e++)
        if (a0[e][1].exec(r[1])) {
          o = a0[e][0], s = a0[e][2] !== !1;
          break;
        }
      if (o == null) {
        n._isValid = !1;
        return;
      }
      if (r[3]) {
        for (e = 0, t = u; e < t; e++)
          if (Xx[e][1].exec(r[3])) {
            a = (r[2] || " ") + Xx[e][0];
            break;
          }
        if (a == null) {
          n._isValid = !1;
          return;
        }
      }
      if (!s && a != null) {
        n._isValid = !1;
        return;
      }
      if (r[4])
        if (_ve.exec(r[4]))
          l = "Z";
        else {
          n._isValid = !1;
          return;
        }
      n._f = o + (a || "") + (l || ""), Jk(n);
    } else
      n._isValid = !1;
  }
  function Tve(n, e, t, i, r, s) {
    var o = [Mve(n), XU.indexOf(e), parseInt(t, 10), parseInt(i, 10), parseInt(r, 10)];
    return s && o.push(parseInt(s, 10)), o;
  }
  function Mve(n) {
    var e = parseInt(n, 10);
    return e <= 49 ? 2e3 + e : e <= 999 ? 1900 + e : e;
  }
  function Ave(n) {
    return n.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
  }
  function Pve(n, e, t) {
    if (n) {
      var i = n7.indexOf(n), r = new Date(e[0], e[1], e[2]).getDay();
      if (i !== r)
        return ct(t).weekdayMismatch = !0, t._isValid = !1, !1;
    }
    return !0;
  }
  function Ive(n, e, t) {
    if (n)
      return xve[n];
    if (e)
      return 0;
    var i = parseInt(t, 10), r = i % 100, s = (i - r) / 100;
    return s * 60 + r;
  }
  function a7(n) {
    var e = Eve.exec(Ave(n._i)), t;
    if (e) {
      if (t = Tve(e[4], e[3], e[2], e[5], e[6], e[7]), !Pve(e[1], t, n))
        return;
      n._a = t, n._tzm = Ive(e[8], e[9], e[10]), n._d = cw.apply(null, n._a), n._d.setUTCMinutes(n._d.getUTCMinutes() - n._tzm), ct(n).rfc2822 = !0;
    } else
      n._isValid = !1;
  }
  function Ove(n) {
    var e = Rve.exec(n._i);
    if (e !== null) {
      n._d = /* @__PURE__ */ new Date(+e[1]);
      return;
    }
    if (o7(n), n._isValid === !1)
      delete n._isValid;
    else
      return;
    if (a7(n), n._isValid === !1)
      delete n._isValid;
    else
      return;
    n._strict ? n._isValid = !1 : he.createFromInputFallback(n);
  }
  he.createFromInputFallback = po("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", function(n) {
    n._d = /* @__PURE__ */ new Date(n._i + (n._useUTC ? " UTC" : ""));
  });
  function Ag(n, e, t) {
    return n ?? e ?? t;
  }
  function kve(n) {
    var e = new Date(he.now());
    return n._useUTC ? [e.getUTCFullYear(), e.getUTCMonth(), e.getUTCDate()] : [e.getFullYear(), e.getMonth(), e.getDate()];
  }
  function Qk(n) {
    var e, t, i = [], r, s, o;
    if (!n._d) {
      for (r = kve(n), n._w && n._a[Va] == null && n._a[hc] == null && Dve(n), n._dayOfYear != null && (o = Ag(n._a[ur], r[ur]), (n._dayOfYear > mv(o) || n._dayOfYear === 0) && (ct(n)._overflowDayOfYear = !0), t = cw(o, 0, n._dayOfYear), n._a[hc] = t.getUTCMonth(), n._a[Va] = t.getUTCDate()), e = 0; e < 3 && n._a[e] == null; ++e)
        n._a[e] = i[e] = r[e];
      for (; e < 7; e++)
        n._a[e] = i[e] = n._a[e] == null ? e === 2 ? 1 : 0 : n._a[e];
      n._a[Ei] === 24 && n._a[qo] === 0 && n._a[dc] === 0 && n._a[Cd] === 0 && (n._nextDay = !0, n._a[Ei] = 0), n._d = (n._useUTC ? cw : Bbe).apply(null, i), s = n._useUTC ? n._d.getUTCDay() : n._d.getDay(), n._tzm != null && n._d.setUTCMinutes(n._d.getUTCMinutes() - n._tzm), n._nextDay && (n._a[Ei] = 24), n._w && typeof n._w.d < "u" && n._w.d !== s && (ct(n).weekdayMismatch = !0);
    }
  }
  function Dve(n) {
    var e, t, i, r, s, o, a, l, c;
    e = n._w, e.GG != null || e.W != null || e.E != null ? (s = 1, o = 4, t = Ag(e.GG, n._a[ur], uw(Rn(), 1, 4).year), i = Ag(e.W, 1), r = Ag(e.E, 1), (r < 1 || r > 7) && (l = !0)) : (s = n._locale._week.dow, o = n._locale._week.doy, c = uw(Rn(), s, o), t = Ag(e.gg, n._a[ur], c.year), i = Ag(e.w, c.week), e.d != null ? (r = e.d, (r < 0 || r > 6) && (l = !0)) : e.e != null ? (r = e.e + s, (e.e < 0 || e.e > 6) && (l = !0)) : r = s), i < 1 || i > Cc(t, s, o) ? ct(n)._overflowWeeks = !0 : l != null ? ct(n)._overflowWeekday = !0 : (a = t7(t, i, r, s, o), n._a[ur] = a.year, n._dayOfYear = a.dayOfYear);
  }
  he.ISO_8601 = function() {
  };
  he.RFC_2822 = function() {
  };
  function Jk(n) {
    if (n._f === he.ISO_8601) {
      o7(n);
      return;
    }
    if (n._f === he.RFC_2822) {
      a7(n);
      return;
    }
    n._a = [], ct(n).empty = !0;
    var e = "" + n._i, t, i, r, s, o, a = e.length, l = 0, c, u;
    for (r = jU(n._f, n._locale).match(Vk) || [], u = r.length, t = 0; t < u; t++)
      s = r[t], i = (e.match(Cbe(s, n)) || [])[0], i && (o = e.substr(0, e.indexOf(i)), o.length > 0 && ct(n).unusedInput.push(o), e = e.slice(e.indexOf(i) + i.length), l += i.length), np[s] ? (i ? ct(n).empty = !1 : ct(n).unusedTokens.push(s), _be(s, i, n)) : n._strict && !i && ct(n).unusedTokens.push(s);
    ct(n).charsLeftOver = a - l, e.length > 0 && ct(n).unusedInput.push(e), n._a[Ei] <= 12 && ct(n).bigHour === !0 && n._a[Ei] > 0 && (ct(n).bigHour = void 0), ct(n).parsedDateParts = n._a.slice(0), ct(n).meridiem = n._meridiem, n._a[Ei] = Nve(n._locale, n._a[Ei], n._meridiem), c = ct(n).era, c !== null && (n._a[ur] = n._locale.erasConvertYear(c, n._a[ur])), Qk(n), Zk(n);
  }
  function Nve(n, e, t) {
    var i;
    return t == null ? e : n.meridiemHour != null ? n.meridiemHour(e, t) : (n.isPM != null && (i = n.isPM(t), i && e < 12 && (e += 12), !i && e === 12 && (e = 0)), e);
  }
  function Lve(n) {
    var e, t, i, r, s, o, a = !1, l = n._f.length;
    if (l === 0) {
      ct(n).invalidFormat = !0, n._d = /* @__PURE__ */ new Date(NaN);
      return;
    }
    for (r = 0; r < l; r++)
      s = 0, o = !1, e = Fk({}, n), n._useUTC != null && (e._useUTC = n._useUTC), e._f = n._f[r], Jk(e), $k(e) && (o = !0), s += ct(e).charsLeftOver, s += ct(e).unusedTokens.length * 10, ct(e).score = s, a ? s < i && (i = s, t = e) : (i == null || s < i || o) && (i = s, t = e, o && (a = !0));
    Tu(n, t || e);
  }
  function Hve(n) {
    if (!n._d) {
      var e = Wk(n._i), t = e.day === void 0 ? e.date : e.day;
      n._a = BU([e.year, e.month, t, e.hour, e.minute, e.second, e.millisecond], function(i) {
        return i && parseInt(i, 10);
      }), Qk(n);
    }
  }
  function $ve(n) {
    var e = new ry(Zk(l7(n)));
    return e._nextDay && (e.add(1, "d"), e._nextDay = void 0), e;
  }
  function l7(n) {
    var e = n._i, t = n._f;
    return n._locale = n._locale || $c(n._l), e === null || t === void 0 && e === "" ? v1({
      nullInput: !0
    }) : (typeof e == "string" && (n._i = e = n._locale.preparse(e)), ia(e) ? new ry(Zk(e)) : (iy(e) ? n._d = e : na(t) ? Lve(n) : t ? Jk(n) : Fve(n), $k(n) || (n._d = null), n));
  }
  function Fve(n) {
    var e = n._i;
    Ur(e) ? n._d = new Date(he.now()) : iy(e) ? n._d = new Date(e.valueOf()) : typeof e == "string" ? Ove(n) : na(e) ? (n._a = BU(e.slice(0), function(t) {
      return parseInt(t, 10);
    }), Qk(n)) : $d(e) ? Hve(n) : Ec(e) ? n._d = new Date(e) : he.createFromInputFallback(n);
  }
  function c7(n, e, t, i, r) {
    var s = {};
    return (e === !0 || e === !1) && (i = e, e = void 0), (t === !0 || t === !1) && (i = t, t = void 0), ($d(n) && Hk(n) || na(n) && n.length === 0) && (n = void 0), s._isAMomentObject = !0, s._useUTC = s._isUTC = r, s._l = t, s._i = n, s._f = e, s._strict = i, $ve(s);
  }
  function Rn(n, e, t, i) {
    return c7(n, e, t, i, !1);
  }
  var Bve = po("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
    var n = Rn.apply(null, arguments);
    return this.isValid() && n.isValid() ? n < this ? this : n : v1();
  }), Vve = po("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
    var n = Rn.apply(null, arguments);
    return this.isValid() && n.isValid() ? n > this ? this : n : v1();
  });
  function u7(n, e) {
    var t, i;
    if (e.length === 1 && na(e[0]) && (e = e[0]), !e.length)
      return Rn();
    for (t = e[0], i = 1; i < e.length; ++i)
      (!e[i].isValid() || e[i][n](t)) && (t = e[i]);
    return t;
  }
  function Wve() {
    var n = [].slice.call(arguments, 0);
    return u7("isBefore", n);
  }
  function jve() {
    var n = [].slice.call(arguments, 0);
    return u7("isAfter", n);
  }
  var zve = function() {
    return Date.now ? Date.now() : +/* @__PURE__ */ new Date();
  }, Tm = ["year", "quarter", "month", "week", "day", "hour", "minute", "second", "millisecond"];
  function Uve(n) {
    var e, t = !1, i, r = Tm.length;
    for (e in n)
      if ($t(n, e) && !(ri.call(Tm, e) !== -1 && (n[e] == null || !isNaN(n[e]))))
        return !1;
    for (i = 0; i < r; ++i)
      if (n[Tm[i]]) {
        if (t)
          return !1;
        parseFloat(n[Tm[i]]) !== Et(n[Tm[i]]) && (t = !0);
      }
    return !0;
  }
  function Gve() {
    return this._isValid;
  }
  function Yve() {
    return ca(NaN);
  }
  function x1(n) {
    var e = Wk(n), t = e.year || 0, i = e.quarter || 0, r = e.month || 0, s = e.week || e.isoWeek || 0, o = e.day || 0, a = e.hour || 0, l = e.minute || 0, c = e.second || 0, u = e.millisecond || 0;
    this._isValid = Uve(e), this._milliseconds = +u + c * 1e3 + // 1000
    l * 6e4 + // 1000 * 60
    a * 1e3 * 60 * 60, this._days = +o + s * 7, this._months = +r + i * 3 + t * 12, this._data = {}, this._locale = $c(), this._bubble();
  }
  function mS(n) {
    return n instanceof x1;
  }
  function xP(n) {
    return n < 0 ? Math.round(-1 * n) * -1 : Math.round(n);
  }
  function Kve(n, e, t) {
    var i = Math.min(n.length, e.length), r = Math.abs(n.length - e.length), s = 0, o;
    for (o = 0; o < i; o++)
      Et(n[o]) !== Et(e[o]) && s++;
    return s + r;
  }
  function h7(n, e) {
    je(n, 0, 0, function() {
      var t = this.utcOffset(), i = "+";
      return t < 0 && (t = -t, i = "-"), i + ol(~~(t / 60), 2) + e + ol(~~t % 60, 2);
    });
  }
  h7("Z", ":");
  h7("ZZ", "");
  De("Z", _1);
  De("ZZ", _1);
  ln(["Z", "ZZ"], function(n, e, t) {
    t._useUTC = !0, t._tzm = eD(_1, n);
  });
  var qve = /([\+\-]|\d\d)/gi;
  function eD(n, e) {
    var t = (e || "").match(n), i, r, s;
    return t === null ? null : (i = t[t.length - 1] || [], r = (i + "").match(qve) || ["-", 0, 0], s = +(r[1] * 60) + Et(r[2]), s === 0 ? 0 : r[0] === "+" ? s : -s);
  }
  function tD(n, e) {
    var t, i;
    return e._isUTC ? (t = e.clone(), i = (ia(n) || iy(n) ? n.valueOf() : Rn(n).valueOf()) - t.valueOf(), t._d.setTime(t._d.valueOf() + i), he.updateOffset(t, !1), t) : Rn(n).local();
  }
  function TP(n) {
    return -Math.round(n._d.getTimezoneOffset());
  }
  he.updateOffset = function() {
  };
  function Xve(n, e, t) {
    var i = this._offset || 0, r;
    if (!this.isValid())
      return n != null ? this : NaN;
    if (n != null) {
      if (typeof n == "string") {
        if (n = eD(_1, n), n === null)
          return this;
      } else Math.abs(n) < 16 && !t && (n = n * 60);
      return !this._isUTC && e && (r = TP(this)), this._offset = n, this._isUTC = !0, r != null && this.add(r, "m"), i !== n && (!e || this._changeInProgress ? g7(this, ca(n - i, "m"), 1, !1) : this._changeInProgress || (this._changeInProgress = !0, he.updateOffset(this, !0), this._changeInProgress = null)), this;
    } else
      return this._isUTC ? i : TP(this);
  }
  function Zve(n, e) {
    return n != null ? (typeof n != "string" && (n = -n), this.utcOffset(n, e), this) : -this.utcOffset();
  }
  function Qve(n) {
    return this.utcOffset(0, n);
  }
  function Jve(n) {
    return this._isUTC && (this.utcOffset(0, n), this._isUTC = !1, n && this.subtract(TP(this), "m")), this;
  }
  function ewe() {
    if (this._tzm != null)
      this.utcOffset(this._tzm, !1, !0);
    else if (typeof this._i == "string") {
      var n = eD(wbe, this._i);
      n != null ? this.utcOffset(n) : this.utcOffset(0, !0);
    }
    return this;
  }
  function twe(n) {
    return this.isValid() ? (n = n ? Rn(n).utcOffset() : 0, (this.utcOffset() - n) % 60 === 0) : !1;
  }
  function nwe() {
    return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
  }
  function iwe() {
    if (!Ur(this._isDSTShifted))
      return this._isDSTShifted;
    var n = {}, e;
    return Fk(n, this), n = l7(n), n._a ? (e = n._isUTC ? yl(n._a) : Rn(n._a), this._isDSTShifted = this.isValid() && Kve(n._a, e.toArray()) > 0) : this._isDSTShifted = !1, this._isDSTShifted;
  }
  function rwe() {
    return this.isValid() ? !this._isUTC : !1;
  }
  function swe() {
    return this.isValid() ? this._isUTC : !1;
  }
  function d7() {
    return this.isValid() ? this._isUTC && this._offset === 0 : !1;
  }
  var owe = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, awe = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
  function ca(n, e) {
    var t = n, i = null, r, s, o;
    return mS(n) ? t = {
      ms: n._milliseconds,
      d: n._days,
      M: n._months
    } : Ec(n) || !isNaN(+n) ? (t = {}, e ? t[e] = +n : t.milliseconds = +n) : (i = owe.exec(n)) ? (r = i[1] === "-" ? -1 : 1, t = {
      y: 0,
      d: Et(i[Va]) * r,
      h: Et(i[Ei]) * r,
      m: Et(i[qo]) * r,
      s: Et(i[dc]) * r,
      ms: Et(xP(i[Cd] * 1e3)) * r
      // the millisecond decimal point is included in the match
    }) : (i = awe.exec(n)) ? (r = i[1] === "-" ? -1 : 1, t = {
      y: Ch(i[2], r),
      M: Ch(i[3], r),
      w: Ch(i[4], r),
      d: Ch(i[5], r),
      h: Ch(i[6], r),
      m: Ch(i[7], r),
      s: Ch(i[8], r)
    }) : t == null ? t = {} : typeof t == "object" && ("from" in t || "to" in t) && (o = lwe(Rn(t.from), Rn(t.to)), t = {}, t.ms = o.milliseconds, t.M = o.months), s = new x1(t), mS(n) && $t(n, "_locale") && (s._locale = n._locale), mS(n) && $t(n, "_isValid") && (s._isValid = n._isValid), s;
  }
  ca.fn = x1.prototype;
  ca.invalid = Yve;
  function Ch(n, e) {
    var t = n && parseFloat(n.replace(",", "."));
    return (isNaN(t) ? 0 : t) * e;
  }
  function VB(n, e) {
    var t = {};
    return t.months = e.month() - n.month() + (e.year() - n.year()) * 12, n.clone().add(t.months, "M").isAfter(e) && --t.months, t.milliseconds = +e - +n.clone().add(t.months, "M"), t;
  }
  function lwe(n, e) {
    var t;
    return n.isValid() && e.isValid() ? (e = tD(e, n), n.isBefore(e) ? t = VB(n, e) : (t = VB(e, n), t.milliseconds = -t.milliseconds, t.months = -t.months), t) : {
      milliseconds: 0,
      months: 0
    };
  }
  function f7(n, e) {
    return function(t, i) {
      var r, s;
      return i !== null && !isNaN(+i) && (WU(e, "moment()." + e + "(period, number) is deprecated. Please use moment()." + e + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."), s = t, t = i, i = s), r = ca(t, i), g7(this, r, n), this;
    };
  }
  function g7(n, e, t, i) {
    var r = e._milliseconds, s = xP(e._days), o = xP(e._months);
    n.isValid() && (i = i ?? !0, o && QU(n, lw(n, "Month") + o * t), s && qU(n, "Date", lw(n, "Date") + s * t), r && n._d.setTime(n._d.valueOf() + r * t), i && he.updateOffset(n, s || o));
  }
  var cwe = f7(1, "add"), uwe = f7(-1, "subtract");
  function p7(n) {
    return typeof n == "string" || n instanceof String;
  }
  function hwe(n) {
    return ia(n) || iy(n) || p7(n) || Ec(n) || fwe(n) || dwe(n) || n === null || n === void 0;
  }
  function dwe(n) {
    var e = $d(n) && !Hk(n), t = !1, i = ["years", "year", "y", "months", "month", "M", "days", "day", "d", "dates", "date", "D", "hours", "hour", "h", "minutes", "minute", "m", "seconds", "second", "s", "milliseconds", "millisecond", "ms"], r, s, o = i.length;
    for (r = 0; r < o; r += 1)
      s = i[r], t = t || $t(n, s);
    return e && t;
  }
  function fwe(n) {
    var e = na(n), t = !1;
    return e && (t = n.filter(function(i) {
      return !Ec(i) && p7(n);
    }).length === 0), e && t;
  }
  function gwe(n) {
    var e = $d(n) && !Hk(n), t = !1, i = ["sameDay", "nextDay", "lastDay", "nextWeek", "lastWeek", "sameElse"], r, s;
    for (r = 0; r < i.length; r += 1)
      s = i[r], t = t || $t(n, s);
    return e && t;
  }
  function pwe(n, e) {
    var t = n.diff(e, "days", !0);
    return t < -6 ? "sameElse" : t < -1 ? "lastWeek" : t < 0 ? "lastDay" : t < 1 ? "sameDay" : t < 2 ? "nextDay" : t < 7 ? "nextWeek" : "sameElse";
  }
  function mwe(n, e) {
    arguments.length === 1 && (arguments[0] ? hwe(arguments[0]) ? (n = arguments[0], e = void 0) : gwe(arguments[0]) && (e = arguments[0], n = void 0) : (n = void 0, e = void 0));
    var t = n || Rn(), i = tD(t, this).startOf("day"), r = he.calendarFormat(this, i) || "sameElse", s = e && (Cl(e[r]) ? e[r].call(this, t) : e[r]);
    return this.format(s || this.localeData().calendar(r, this, Rn(t)));
  }
  function bwe() {
    return new ry(this);
  }
  function vwe(n, e) {
    var t = ia(n) ? n : Rn(n);
    return this.isValid() && t.isValid() ? (e = mo(e) || "millisecond", e === "millisecond" ? this.valueOf() > t.valueOf() : t.valueOf() < this.clone().startOf(e).valueOf()) : !1;
  }
  function wwe(n, e) {
    var t = ia(n) ? n : Rn(n);
    return this.isValid() && t.isValid() ? (e = mo(e) || "millisecond", e === "millisecond" ? this.valueOf() < t.valueOf() : this.clone().endOf(e).valueOf() < t.valueOf()) : !1;
  }
  function ywe(n, e, t, i) {
    var r = ia(n) ? n : Rn(n), s = ia(e) ? e : Rn(e);
    return this.isValid() && r.isValid() && s.isValid() ? (i = i || "()", (i[0] === "(" ? this.isAfter(r, t) : !this.isBefore(r, t)) && (i[1] === ")" ? this.isBefore(s, t) : !this.isAfter(s, t))) : !1;
  }
  function Cwe(n, e) {
    var t = ia(n) ? n : Rn(n), i;
    return this.isValid() && t.isValid() ? (e = mo(e) || "millisecond", e === "millisecond" ? this.valueOf() === t.valueOf() : (i = t.valueOf(), this.clone().startOf(e).valueOf() <= i && i <= this.clone().endOf(e).valueOf())) : !1;
  }
  function Swe(n, e) {
    return this.isSame(n, e) || this.isAfter(n, e);
  }
  function _we(n, e) {
    return this.isSame(n, e) || this.isBefore(n, e);
  }
  function Rwe(n, e, t) {
    var i, r, s;
    if (!this.isValid())
      return NaN;
    if (i = tD(n, this), !i.isValid())
      return NaN;
    switch (r = (i.utcOffset() - this.utcOffset()) * 6e4, e = mo(e), e) {
      case "year":
        s = bS(this, i) / 12;
        break;
      case "month":
        s = bS(this, i);
        break;
      case "quarter":
        s = bS(this, i) / 3;
        break;
      case "second":
        s = (this - i) / 1e3;
        break;
      case "minute":
        s = (this - i) / 6e4;
        break;
      case "hour":
        s = (this - i) / 36e5;
        break;
      case "day":
        s = (this - i - r) / 864e5;
        break;
      case "week":
        s = (this - i - r) / 6048e5;
        break;
      default:
        s = this - i;
    }
    return t ? s : qs(s);
  }
  function bS(n, e) {
    if (n.date() < e.date())
      return -bS(e, n);
    var t = (e.year() - n.year()) * 12 + (e.month() - n.month()), i = n.clone().add(t, "months"), r, s;
    return e - i < 0 ? (r = n.clone().add(t - 1, "months"), s = (e - i) / (i - r)) : (r = n.clone().add(t + 1, "months"), s = (e - i) / (r - i)), -(t + s) || 0;
  }
  he.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
  he.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
  function Ewe() {
    return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
  }
  function xwe(n) {
    if (!this.isValid())
      return null;
    var e = n !== !0, t = e ? this.clone().utc() : this;
    return t.year() < 0 || t.year() > 9999 ? pS(t, e ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ") : Cl(Date.prototype.toISOString) ? e ? this.toDate().toISOString() : new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", pS(t, "Z")) : pS(t, e ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ");
  }
  function Twe() {
    if (!this.isValid())
      return "moment.invalid(/* " + this._i + " */)";
    var n = "moment", e = "", t, i, r, s;
    return this.isLocal() || (n = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone", e = "Z"), t = "[" + n + '("]', i = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY", r = "-MM-DD[T]HH:mm:ss.SSS", s = e + '[")]', this.format(t + i + r + s);
  }
  function Mwe(n) {
    n || (n = this.isUtc() ? he.defaultFormatUtc : he.defaultFormat);
    var e = pS(this, n);
    return this.localeData().postformat(e);
  }
  function Awe(n, e) {
    return this.isValid() && (ia(n) && n.isValid() || Rn(n).isValid()) ? ca({
      to: this,
      from: n
    }).locale(this.locale()).humanize(!e) : this.localeData().invalidDate();
  }
  function Pwe(n) {
    return this.from(Rn(), n);
  }
  function Iwe(n, e) {
    return this.isValid() && (ia(n) && n.isValid() || Rn(n).isValid()) ? ca({
      from: this,
      to: n
    }).locale(this.locale()).humanize(!e) : this.localeData().invalidDate();
  }
  function Owe(n) {
    return this.to(Rn(), n);
  }
  function m7(n) {
    var e;
    return n === void 0 ? this._locale._abbr : (e = $c(n), e != null && (this._locale = e), this);
  }
  var b7 = po("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function(n) {
    return n === void 0 ? this.localeData() : this.locale(n);
  });
  function v7() {
    return this._locale;
  }
  var E_ = 1e3, ip = 60 * E_, x_ = 60 * ip, w7 = (365 * 400 + 97) * 24 * x_;
  function rp(n, e) {
    return (n % e + e) % e;
  }
  function y7(n, e, t) {
    return n < 100 && n >= 0 ? new Date(n + 400, e, t) - w7 : new Date(n, e, t).valueOf();
  }
  function C7(n, e, t) {
    return n < 100 && n >= 0 ? Date.UTC(n + 400, e, t) - w7 : Date.UTC(n, e, t);
  }
  function kwe(n) {
    var e, t;
    if (n = mo(n), n === void 0 || n === "millisecond" || !this.isValid())
      return this;
    switch (t = this._isUTC ? C7 : y7, n) {
      case "year":
        e = t(this.year(), 0, 1);
        break;
      case "quarter":
        e = t(this.year(), this.month() - this.month() % 3, 1);
        break;
      case "month":
        e = t(this.year(), this.month(), 1);
        break;
      case "week":
        e = t(this.year(), this.month(), this.date() - this.weekday());
        break;
      case "isoWeek":
        e = t(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
        break;
      case "day":
      case "date":
        e = t(this.year(), this.month(), this.date());
        break;
      case "hour":
        e = this._d.valueOf(), e -= rp(e + (this._isUTC ? 0 : this.utcOffset() * ip), x_);
        break;
      case "minute":
        e = this._d.valueOf(), e -= rp(e, ip);
        break;
      case "second":
        e = this._d.valueOf(), e -= rp(e, E_);
        break;
    }
    return this._d.setTime(e), he.updateOffset(this, !0), this;
  }
  function Dwe(n) {
    var e, t;
    if (n = mo(n), n === void 0 || n === "millisecond" || !this.isValid())
      return this;
    switch (t = this._isUTC ? C7 : y7, n) {
      case "year":
        e = t(this.year() + 1, 0, 1) - 1;
        break;
      case "quarter":
        e = t(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
        break;
      case "month":
        e = t(this.year(), this.month() + 1, 1) - 1;
        break;
      case "week":
        e = t(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
        break;
      case "isoWeek":
        e = t(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
        break;
      case "day":
      case "date":
        e = t(this.year(), this.month(), this.date() + 1) - 1;
        break;
      case "hour":
        e = this._d.valueOf(), e += x_ - rp(e + (this._isUTC ? 0 : this.utcOffset() * ip), x_) - 1;
        break;
      case "minute":
        e = this._d.valueOf(), e += ip - rp(e, ip) - 1;
        break;
      case "second":
        e = this._d.valueOf(), e += E_ - rp(e, E_) - 1;
        break;
    }
    return this._d.setTime(e), he.updateOffset(this, !0), this;
  }
  function Nwe() {
    return this._d.valueOf() - (this._offset || 0) * 6e4;
  }
  function Lwe() {
    return Math.floor(this.valueOf() / 1e3);
  }
  function Hwe() {
    return new Date(this.valueOf());
  }
  function $we() {
    var n = this;
    return [n.year(), n.month(), n.date(), n.hour(), n.minute(), n.second(), n.millisecond()];
  }
  function Fwe() {
    var n = this;
    return {
      years: n.year(),
      months: n.month(),
      date: n.date(),
      hours: n.hours(),
      minutes: n.minutes(),
      seconds: n.seconds(),
      milliseconds: n.milliseconds()
    };
  }
  function Bwe() {
    return this.isValid() ? this.toISOString() : null;
  }
  function Vwe() {
    return $k(this);
  }
  function Wwe() {
    return Tu({}, ct(this));
  }
  function jwe() {
    return ct(this).overflow;
  }
  function zwe() {
    return {
      input: this._i,
      format: this._f,
      locale: this._locale,
      isUTC: this._isUTC,
      strict: this._strict
    };
  }
  je("N", 0, 0, "eraAbbr");
  je("NN", 0, 0, "eraAbbr");
  je("NNN", 0, 0, "eraAbbr");
  je("NNNN", 0, 0, "eraName");
  je("NNNNN", 0, 0, "eraNarrow");
  je("y", ["y", 1], "yo", "eraYear");
  je("y", ["yy", 2], 0, "eraYear");
  je("y", ["yyy", 3], 0, "eraYear");
  je("y", ["yyyy", 4], 0, "eraYear");
  De("N", nD);
  De("NN", nD);
  De("NNN", nD);
  De("NNNN", tye);
  De("NNNNN", nye);
  ln(["N", "NN", "NNN", "NNNN", "NNNNN"], function(n, e, t, i) {
    var r = t._locale.erasParse(n, i, t._strict);
    r ? ct(t).era = r : ct(t).invalidEra = n;
  });
  De("y", Gp);
  De("yy", Gp);
  De("yyy", Gp);
  De("yyyy", Gp);
  De("yo", iye);
  ln(["y", "yy", "yyy", "yyyy"], ur);
  ln(["yo"], function(n, e, t, i) {
    var r;
    t._locale._eraYearOrdinalRegex && (r = n.match(t._locale._eraYearOrdinalRegex)), t._locale.eraYearOrdinalParse ? e[ur] = t._locale.eraYearOrdinalParse(n, r) : e[ur] = parseInt(n, 10);
  });
  function Uwe(n, e) {
    var t, i, r, s = this._eras || $c("en")._eras;
    for (t = 0, i = s.length; t < i; ++t) {
      switch (typeof s[t].since) {
        case "string":
          r = he(s[t].since).startOf("day"), s[t].since = r.valueOf();
          break;
      }
      switch (typeof s[t].until) {
        case "undefined":
          s[t].until = 1 / 0;
          break;
        case "string":
          r = he(s[t].until).startOf("day").valueOf(), s[t].until = r.valueOf();
          break;
      }
    }
    return s;
  }
  function Gwe(n, e, t) {
    var i, r, s = this.eras(), o, a, l;
    for (n = n.toUpperCase(), i = 0, r = s.length; i < r; ++i)
      if (o = s[i].name.toUpperCase(), a = s[i].abbr.toUpperCase(), l = s[i].narrow.toUpperCase(), t)
        switch (e) {
          case "N":
          case "NN":
          case "NNN":
            if (a === n)
              return s[i];
            break;
          case "NNNN":
            if (o === n)
              return s[i];
            break;
          case "NNNNN":
            if (l === n)
              return s[i];
            break;
        }
      else if ([o, a, l].indexOf(n) >= 0)
        return s[i];
  }
  function Ywe(n, e) {
    var t = n.since <= n.until ? 1 : -1;
    return e === void 0 ? he(n.since).year() : he(n.since).year() + (e - n.offset) * t;
  }
  function Kwe() {
    var n, e, t, i = this.localeData().eras();
    for (n = 0, e = i.length; n < e; ++n)
      if (t = this.clone().startOf("day").valueOf(), i[n].since <= t && t <= i[n].until || i[n].until <= t && t <= i[n].since)
        return i[n].name;
    return "";
  }
  function qwe() {
    var n, e, t, i = this.localeData().eras();
    for (n = 0, e = i.length; n < e; ++n)
      if (t = this.clone().startOf("day").valueOf(), i[n].since <= t && t <= i[n].until || i[n].until <= t && t <= i[n].since)
        return i[n].narrow;
    return "";
  }
  function Xwe() {
    var n, e, t, i = this.localeData().eras();
    for (n = 0, e = i.length; n < e; ++n)
      if (t = this.clone().startOf("day").valueOf(), i[n].since <= t && t <= i[n].until || i[n].until <= t && t <= i[n].since)
        return i[n].abbr;
    return "";
  }
  function Zwe() {
    var n, e, t, i, r = this.localeData().eras();
    for (n = 0, e = r.length; n < e; ++n)
      if (t = r[n].since <= r[n].until ? 1 : -1, i = this.clone().startOf("day").valueOf(), r[n].since <= i && i <= r[n].until || r[n].until <= i && i <= r[n].since)
        return (this.year() - he(r[n].since).year()) * t + r[n].offset;
    return this.year();
  }
  function Qwe(n) {
    return $t(this, "_erasNameRegex") || iD.call(this), n ? this._erasNameRegex : this._erasRegex;
  }
  function Jwe(n) {
    return $t(this, "_erasAbbrRegex") || iD.call(this), n ? this._erasAbbrRegex : this._erasRegex;
  }
  function eye(n) {
    return $t(this, "_erasNarrowRegex") || iD.call(this), n ? this._erasNarrowRegex : this._erasRegex;
  }
  function nD(n, e) {
    return e.erasAbbrRegex(n);
  }
  function tye(n, e) {
    return e.erasNameRegex(n);
  }
  function nye(n, e) {
    return e.erasNarrowRegex(n);
  }
  function iye(n, e) {
    return e._eraYearOrdinalRegex || Gp;
  }
  function iD() {
    var n = [], e = [], t = [], i = [], r, s, o, a, l, c = this.eras();
    for (r = 0, s = c.length; r < s; ++r)
      o = yc(c[r].name), a = yc(c[r].abbr), l = yc(c[r].narrow), e.push(o), n.push(a), t.push(l), i.push(o), i.push(a), i.push(l);
    this._erasRegex = new RegExp("^(" + i.join("|") + ")", "i"), this._erasNameRegex = new RegExp("^(" + e.join("|") + ")", "i"), this._erasAbbrRegex = new RegExp("^(" + n.join("|") + ")", "i"), this._erasNarrowRegex = new RegExp("^(" + t.join("|") + ")", "i");
  }
  je(0, ["gg", 2], 0, function() {
    return this.weekYear() % 100;
  });
  je(0, ["GG", 2], 0, function() {
    return this.isoWeekYear() % 100;
  });
  function T1(n, e) {
    je(0, [n, n.length], 0, e);
  }
  T1("gggg", "weekYear");
  T1("ggggg", "weekYear");
  T1("GGGG", "isoWeekYear");
  T1("GGGGG", "isoWeekYear");
  De("G", S1);
  De("g", S1);
  De("GG", En, Ts);
  De("gg", En, Ts);
  De("GGGG", zk, jk);
  De("gggg", zk, jk);
  De("GGGGG", C1, w1);
  De("ggggg", C1, w1);
  oy(["gggg", "ggggg", "GGGG", "GGGGG"], function(n, e, t, i) {
    e[i.substr(0, 2)] = Et(n);
  });
  oy(["gg", "GG"], function(n, e, t, i) {
    e[i] = he.parseTwoDigitYear(n);
  });
  function rye(n) {
    return S7.call(this, n, this.week(), this.weekday() + this.localeData()._week.dow, this.localeData()._week.dow, this.localeData()._week.doy);
  }
  function sye(n) {
    return S7.call(this, n, this.isoWeek(), this.isoWeekday(), 1, 4);
  }
  function oye() {
    return Cc(this.year(), 1, 4);
  }
  function aye() {
    return Cc(this.isoWeekYear(), 1, 4);
  }
  function lye() {
    var n = this.localeData()._week;
    return Cc(this.year(), n.dow, n.doy);
  }
  function cye() {
    var n = this.localeData()._week;
    return Cc(this.weekYear(), n.dow, n.doy);
  }
  function S7(n, e, t, i, r) {
    var s;
    return n == null ? uw(this, i, r).year : (s = Cc(n, i, r), e > s && (e = s), uye.call(this, n, e, t, i, r));
  }
  function uye(n, e, t, i, r) {
    var s = t7(n, e, t, i, r), o = cw(s.year, 0, s.dayOfYear);
    return this.year(o.getUTCFullYear()), this.month(o.getUTCMonth()), this.date(o.getUTCDate()), this;
  }
  je("Q", 0, "Qo", "quarter");
  De("Q", zU);
  ln("Q", function(n, e) {
    e[hc] = (Et(n) - 1) * 3;
  });
  function hye(n) {
    return n == null ? Math.ceil((this.month() + 1) / 3) : this.month((n - 1) * 3 + this.month() % 3);
  }
  je("D", ["DD", 2], "Do", "date");
  De("D", En, Yp);
  De("DD", En, Ts);
  De("Do", function(n, e) {
    return n ? e._dayOfMonthOrdinalParse || e._ordinalParse : e._dayOfMonthOrdinalParseLenient;
  });
  ln(["D", "DD"], Va);
  ln("Do", function(n, e) {
    e[Va] = Et(n.match(En)[0]);
  });
  var _7 = Kp("Date", !0);
  je("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
  De("DDD", y1);
  De("DDDD", UU);
  ln(["DDD", "DDDD"], function(n, e, t) {
    t._dayOfYear = Et(n);
  });
  function dye(n) {
    var e = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;
    return n == null ? e : this.add(n - e, "d");
  }
  je("m", ["mm", 2], 0, "minute");
  De("m", En, Uk);
  De("mm", En, Ts);
  ln(["m", "mm"], qo);
  var fye = Kp("Minutes", !1);
  je("s", ["ss", 2], 0, "second");
  De("s", En, Uk);
  De("ss", En, Ts);
  ln(["s", "ss"], dc);
  var gye = Kp("Seconds", !1);
  je("S", 0, 0, function() {
    return ~~(this.millisecond() / 100);
  });
  je(0, ["SS", 2], 0, function() {
    return ~~(this.millisecond() / 10);
  });
  je(0, ["SSS", 3], 0, "millisecond");
  je(0, ["SSSS", 4], 0, function() {
    return this.millisecond() * 10;
  });
  je(0, ["SSSSS", 5], 0, function() {
    return this.millisecond() * 100;
  });
  je(0, ["SSSSSS", 6], 0, function() {
    return this.millisecond() * 1e3;
  });
  je(0, ["SSSSSSS", 7], 0, function() {
    return this.millisecond() * 1e4;
  });
  je(0, ["SSSSSSSS", 8], 0, function() {
    return this.millisecond() * 1e5;
  });
  je(0, ["SSSSSSSSS", 9], 0, function() {
    return this.millisecond() * 1e6;
  });
  De("S", y1, zU);
  De("SS", y1, Ts);
  De("SSS", y1, UU);
  var Mu, R7;
  for (Mu = "SSSS"; Mu.length <= 9; Mu += "S")
    De(Mu, Gp);
  function pye(n, e) {
    e[Cd] = Et(("0." + n) * 1e3);
  }
  for (Mu = "S"; Mu.length <= 9; Mu += "S")
    ln(Mu, pye);
  R7 = Kp("Milliseconds", !1);
  je("z", 0, 0, "zoneAbbr");
  je("zz", 0, 0, "zoneName");
  function mye() {
    return this._isUTC ? "UTC" : "";
  }
  function bye() {
    return this._isUTC ? "Coordinated Universal Time" : "";
  }
  var pe = ry.prototype;
  pe.add = cwe;
  pe.calendar = mwe;
  pe.clone = bwe;
  pe.diff = Rwe;
  pe.endOf = Dwe;
  pe.format = Mwe;
  pe.from = Awe;
  pe.fromNow = Pwe;
  pe.to = Iwe;
  pe.toNow = Owe;
  pe.get = Tbe;
  pe.invalidAt = jwe;
  pe.isAfter = vwe;
  pe.isBefore = wwe;
  pe.isBetween = ywe;
  pe.isSame = Cwe;
  pe.isSameOrAfter = Swe;
  pe.isSameOrBefore = _we;
  pe.isValid = Vwe;
  pe.lang = b7;
  pe.locale = m7;
  pe.localeData = v7;
  pe.max = Vve;
  pe.min = Bve;
  pe.parsingFlags = Wwe;
  pe.set = Mbe;
  pe.startOf = kwe;
  pe.subtract = uwe;
  pe.toArray = $we;
  pe.toObject = Fwe;
  pe.toDate = Hwe;
  pe.toISOString = xwe;
  pe.inspect = Twe;
  typeof Symbol < "u" && Symbol.for != null && (pe[Symbol.for("nodejs.util.inspect.custom")] = function() {
    return "Moment<" + this.format() + ">";
  });
  pe.toJSON = Bwe;
  pe.toString = Ewe;
  pe.unix = Lwe;
  pe.valueOf = Nwe;
  pe.creationData = zwe;
  pe.eraName = Kwe;
  pe.eraNarrow = qwe;
  pe.eraAbbr = Xwe;
  pe.eraYear = Zwe;
  pe.year = KU;
  pe.isLeapYear = xbe;
  pe.weekYear = rye;
  pe.isoWeekYear = sye;
  pe.quarter = pe.quarters = hye;
  pe.month = JU;
  pe.daysInMonth = Hbe;
  pe.week = pe.weeks = Ube;
  pe.isoWeek = pe.isoWeeks = Gbe;
  pe.weeksInYear = lye;
  pe.weeksInWeekYear = cye;
  pe.isoWeeksInYear = oye;
  pe.isoWeeksInISOWeekYear = aye;
  pe.date = _7;
  pe.day = pe.days = sve;
  pe.weekday = ove;
  pe.isoWeekday = ave;
  pe.dayOfYear = dye;
  pe.hour = pe.hours = gve;
  pe.minute = pe.minutes = fye;
  pe.second = pe.seconds = gye;
  pe.millisecond = pe.milliseconds = R7;
  pe.utcOffset = Xve;
  pe.utc = Qve;
  pe.local = Jve;
  pe.parseZone = ewe;
  pe.hasAlignedHourOffset = twe;
  pe.isDST = nwe;
  pe.isLocal = rwe;
  pe.isUtcOffset = swe;
  pe.isUtc = d7;
  pe.isUTC = d7;
  pe.zoneAbbr = mye;
  pe.zoneName = bye;
  pe.dates = po("dates accessor is deprecated. Use date instead.", _7);
  pe.months = po("months accessor is deprecated. Use month instead", JU);
  pe.years = po("years accessor is deprecated. Use year instead", KU);
  pe.zone = po("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", Zve);
  pe.isDSTShifted = po("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", iwe);
  function vye(n) {
    return Rn(n * 1e3);
  }
  function wye() {
    return Rn.apply(null, arguments).parseZone();
  }
  function E7(n) {
    return n;
  }
  var Ft = Bk.prototype;
  Ft.calendar = rbe;
  Ft.longDateFormat = lbe;
  Ft.invalidDate = ube;
  Ft.ordinal = fbe;
  Ft.preparse = E7;
  Ft.postformat = E7;
  Ft.relativeTime = pbe;
  Ft.pastFuture = mbe;
  Ft.set = nbe;
  Ft.eras = Uwe;
  Ft.erasParse = Gwe;
  Ft.erasConvertYear = Ywe;
  Ft.erasAbbrRegex = Jwe;
  Ft.erasNameRegex = Qwe;
  Ft.erasNarrowRegex = eye;
  Ft.months = kbe;
  Ft.monthsShort = Dbe;
  Ft.monthsParse = Lbe;
  Ft.monthsRegex = Fbe;
  Ft.monthsShortRegex = $be;
  Ft.week = Vbe;
  Ft.firstDayOfYear = zbe;
  Ft.firstDayOfWeek = jbe;
  Ft.weekdays = eve;
  Ft.weekdaysMin = nve;
  Ft.weekdaysShort = tve;
  Ft.weekdaysParse = rve;
  Ft.weekdaysRegex = lve;
  Ft.weekdaysShortRegex = cve;
  Ft.weekdaysMinRegex = uve;
  Ft.isPM = dve;
  Ft.meridiem = pve;
  function T_(n, e, t, i) {
    var r = $c(), s = yl().set(i, e);
    return r[t](s, n);
  }
  function x7(n, e, t) {
    if (Ec(n) && (e = n, n = void 0), n = n || "", e != null)
      return T_(n, e, t, "month");
    var i, r = [];
    for (i = 0; i < 12; i++)
      r[i] = T_(n, i, t, "month");
    return r;
  }
  function rD(n, e, t, i) {
    typeof n == "boolean" ? (Ec(e) && (t = e, e = void 0), e = e || "") : (e = n, t = e, n = !1, Ec(e) && (t = e, e = void 0), e = e || "");
    var r = $c(), s = n ? r._week.dow : 0, o, a = [];
    if (t != null)
      return T_(e, (t + s) % 7, i, "day");
    for (o = 0; o < 7; o++)
      a[o] = T_(e, (o + s) % 7, i, "day");
    return a;
  }
  function yye(n, e) {
    return x7(n, e, "months");
  }
  function Cye(n, e) {
    return x7(n, e, "monthsShort");
  }
  function Sye(n, e, t) {
    return rD(n, e, t, "weekdays");
  }
  function _ye(n, e, t) {
    return rD(n, e, t, "weekdaysShort");
  }
  function Rye(n, e, t) {
    return rD(n, e, t, "weekdaysMin");
  }
  Lu("en", {
    eras: [{
      since: "0001-01-01",
      until: 1 / 0,
      offset: 1,
      name: "Anno Domini",
      narrow: "AD",
      abbr: "AD"
    }, {
      since: "0000-12-31",
      until: -1 / 0,
      offset: 1,
      name: "Before Christ",
      narrow: "BC",
      abbr: "BC"
    }],
    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
    ordinal: function(n) {
      var e = n % 10, t = Et(n % 100 / 10) === 1 ? "th" : e === 1 ? "st" : e === 2 ? "nd" : e === 3 ? "rd" : "th";
      return n + t;
    }
  });
  he.lang = po("moment.lang is deprecated. Use moment.locale instead.", Lu);
  he.langData = po("moment.langData is deprecated. Use moment.localeData instead.", $c);
  var Tl = Math.abs;
  function Eye() {
    var n = this._data;
    return this._milliseconds = Tl(this._milliseconds), this._days = Tl(this._days), this._months = Tl(this._months), n.milliseconds = Tl(n.milliseconds), n.seconds = Tl(n.seconds), n.minutes = Tl(n.minutes), n.hours = Tl(n.hours), n.months = Tl(n.months), n.years = Tl(n.years), this;
  }
  function T7(n, e, t, i) {
    var r = ca(e, t);
    return n._milliseconds += i * r._milliseconds, n._days += i * r._days, n._months += i * r._months, n._bubble();
  }
  function xye(n, e) {
    return T7(this, n, e, 1);
  }
  function Tye(n, e) {
    return T7(this, n, e, -1);
  }
  function WB(n) {
    return n < 0 ? Math.floor(n) : Math.ceil(n);
  }
  function Mye() {
    var n = this._milliseconds, e = this._days, t = this._months, i = this._data, r, s, o, a, l;
    return n >= 0 && e >= 0 && t >= 0 || n <= 0 && e <= 0 && t <= 0 || (n += WB(MP(t) + e) * 864e5, e = 0, t = 0), i.milliseconds = n % 1e3, r = qs(n / 1e3), i.seconds = r % 60, s = qs(r / 60), i.minutes = s % 60, o = qs(s / 60), i.hours = o % 24, e += qs(o / 24), l = qs(M7(e)), t += l, e -= WB(MP(l)), a = qs(t / 12), t %= 12, i.days = e, i.months = t, i.years = a, this;
  }
  function M7(n) {
    return n * 4800 / 146097;
  }
  function MP(n) {
    return n * 146097 / 4800;
  }
  function Aye(n) {
    if (!this.isValid())
      return NaN;
    var e, t, i = this._milliseconds;
    if (n = mo(n), n === "month" || n === "quarter" || n === "year")
      switch (e = this._days + i / 864e5, t = this._months + M7(e), n) {
        case "month":
          return t;
        case "quarter":
          return t / 3;
        case "year":
          return t / 12;
      }
    else
      switch (e = this._days + Math.round(MP(this._months)), n) {
        case "week":
          return e / 7 + i / 6048e5;
        case "day":
          return e + i / 864e5;
        case "hour":
          return e * 24 + i / 36e5;
        case "minute":
          return e * 1440 + i / 6e4;
        case "second":
          return e * 86400 + i / 1e3;
        case "millisecond":
          return Math.floor(e * 864e5) + i;
        default:
          throw new Error("Unknown unit " + n);
      }
  }
  function Fc(n) {
    return function() {
      return this.as(n);
    };
  }
  var A7 = Fc("ms"), Pye = Fc("s"), Iye = Fc("m"), Oye = Fc("h"), kye = Fc("d"), Dye = Fc("w"), Nye = Fc("M"), Lye = Fc("Q"), Hye = Fc("y"), $ye = A7;
  function Fye() {
    return ca(this);
  }
  function Bye(n) {
    return n = mo(n), this.isValid() ? this[n + "s"]() : NaN;
  }
  function Ef(n) {
    return function() {
      return this.isValid() ? this._data[n] : NaN;
    };
  }
  var Vye = Ef("milliseconds"), Wye = Ef("seconds"), jye = Ef("minutes"), zye = Ef("hours"), Uye = Ef("days"), Gye = Ef("months"), Yye = Ef("years");
  function Kye() {
    return qs(this.days() / 7);
  }
  var ql = Math.round, zg = {
    ss: 44,
    // a few seconds to seconds
    s: 45,
    // seconds to minute
    m: 45,
    // minutes to hour
    h: 22,
    // hours to day
    d: 26,
    // days to month/week
    w: null,
    // weeks to month
    M: 11
    // months to year
  };
  function qye(n, e, t, i, r) {
    return r.relativeTime(e || 1, !!t, n, i);
  }
  function Xye(n, e, t, i) {
    var r = ca(n).abs(), s = ql(r.as("s")), o = ql(r.as("m")), a = ql(r.as("h")), l = ql(r.as("d")), c = ql(r.as("M")), u = ql(r.as("w")), h = ql(r.as("y")), d = s <= t.ss && ["s", s] || s < t.s && ["ss", s] || o <= 1 && ["m"] || o < t.m && ["mm", o] || a <= 1 && ["h"] || a < t.h && ["hh", a] || l <= 1 && ["d"] || l < t.d && ["dd", l];
    return t.w != null && (d = d || u <= 1 && ["w"] || u < t.w && ["ww", u]), d = d || c <= 1 && ["M"] || c < t.M && ["MM", c] || h <= 1 && ["y"] || ["yy", h], d[2] = e, d[3] = +n > 0, d[4] = i, qye.apply(null, d);
  }
  function Zye(n) {
    return n === void 0 ? ql : typeof n == "function" ? (ql = n, !0) : !1;
  }
  function Qye(n, e) {
    return zg[n] === void 0 ? !1 : e === void 0 ? zg[n] : (zg[n] = e, n === "s" && (zg.ss = e - 1), !0);
  }
  function Jye(n, e) {
    if (!this.isValid())
      return this.localeData().invalidDate();
    var t = !1, i = zg, r, s;
    return typeof n == "object" && (e = n, n = !1), typeof n == "boolean" && (t = n), typeof e == "object" && (i = Object.assign({}, zg, e), e.s != null && e.ss == null && (i.ss = e.s - 1)), r = this.localeData(), s = Xye(this, !t, i, r), t && (s = r.pastFuture(+this, s)), r.postformat(s);
  }
  var Zx = Math.abs;
  function Bf(n) {
    return (n > 0) - (n < 0) || +n;
  }
  function M1() {
    if (!this.isValid())
      return this.localeData().invalidDate();
    var n = Zx(this._milliseconds) / 1e3, e = Zx(this._days), t = Zx(this._months), i, r, s, o, a = this.asSeconds(), l, c, u, h;
    return a ? (i = qs(n / 60), r = qs(i / 60), n %= 60, i %= 60, s = qs(t / 12), t %= 12, o = n ? n.toFixed(3).replace(/\.?0+$/, "") : "", l = a < 0 ? "-" : "", c = Bf(this._months) !== Bf(a) ? "-" : "", u = Bf(this._days) !== Bf(a) ? "-" : "", h = Bf(this._milliseconds) !== Bf(a) ? "-" : "", l + "P" + (s ? c + s + "Y" : "") + (t ? c + t + "M" : "") + (e ? u + e + "D" : "") + (r || i || n ? "T" : "") + (r ? h + r + "H" : "") + (i ? h + i + "M" : "") + (n ? h + o + "S" : "")) : "P0D";
  }
  var Pt = x1.prototype;
  Pt.isValid = Gve;
  Pt.abs = Eye;
  Pt.add = xye;
  Pt.subtract = Tye;
  Pt.as = Aye;
  Pt.asMilliseconds = A7;
  Pt.asSeconds = Pye;
  Pt.asMinutes = Iye;
  Pt.asHours = Oye;
  Pt.asDays = kye;
  Pt.asWeeks = Dye;
  Pt.asMonths = Nye;
  Pt.asQuarters = Lye;
  Pt.asYears = Hye;
  Pt.valueOf = $ye;
  Pt._bubble = Mye;
  Pt.clone = Fye;
  Pt.get = Bye;
  Pt.milliseconds = Vye;
  Pt.seconds = Wye;
  Pt.minutes = jye;
  Pt.hours = zye;
  Pt.days = Uye;
  Pt.weeks = Kye;
  Pt.months = Gye;
  Pt.years = Yye;
  Pt.humanize = Jye;
  Pt.toISOString = M1;
  Pt.toString = M1;
  Pt.toJSON = M1;
  Pt.locale = m7;
  Pt.localeData = v7;
  Pt.toIsoString = po("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", M1);
  Pt.lang = b7;
  je("X", 0, 0, "unix");
  je("x", 0, 0, "valueOf");
  De("x", S1);
  De("X", ybe);
  ln("X", function(n, e, t) {
    t._d = new Date(parseFloat(n) * 1e3);
  });
  ln("x", function(n, e, t) {
    t._d = new Date(Et(n));
  });
  //! moment.js
  he.version = "2.30.1";
  ebe(Rn);
  he.fn = pe;
  he.min = Wve;
  he.max = jve;
  he.now = zve;
  he.utc = yl;
  he.unix = vye;
  he.months = yye;
  he.isDate = iy;
  he.locale = Lu;
  he.invalid = v1;
  he.duration = ca;
  he.isMoment = ia;
  he.weekdays = Sye;
  he.parseZone = wye;
  he.localeData = $c;
  he.isDuration = mS;
  he.monthsShort = Cye;
  he.weekdaysMin = Rye;
  he.defineLocale = Xk;
  he.updateLocale = wve;
  he.locales = yve;
  he.weekdaysShort = _ye;
  he.normalizeUnits = mo;
  he.relativeTimeRounding = Zye;
  he.relativeTimeThreshold = Qye;
  he.calendarFormat = pwe;
  he.prototype = pe;
  he.HTML5_FMT = {
    DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
    // <input type="datetime-local" />
    DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
    // <input type="datetime-local" step="1" />
    DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
    // <input type="datetime-local" step="0.001" />
    DATE: "YYYY-MM-DD",
    // <input type="date" />
    TIME: "HH:mm",
    // <input type="time" />
    TIME_SECONDS: "HH:mm:ss",
    // <input type="time" step="1" />
    TIME_MS: "HH:mm:ss.SSS",
    // <input type="time" step="0.001" />
    WEEK: "GGGG-[W]WW",
    // <input type="week" />
    MONTH: "YYYY-MM"
    // <input type="month" />
  };
  function P7(n) {
    const e = n.length;
    let t = 0;
    for (; t < e; )
      n[t] = [n[t]], t += 1;
  }
  function AP(n, e) {
    const t = e.length;
    let i = 0;
    for (; i < t; )
      n.push(e[i]), i += 1;
  }
  function bv(n) {
    const e = [];
    if (!n || n.length === 0 || !n[0] || n[0].length === 0)
      return e;
    const t = n.length, i = n[0].length;
    for (let r = 0; r < t; r++)
      for (let s = 0; s < i; s++)
        e[s] || (e[s] = []), e[s][r] = n[r][s];
    return e;
  }
  function li(n, e, t, i) {
    let r = -1, s = n, o = t;
    Array.isArray(n) || (s = Array.from(n));
    const a = s.length;
    for (i && a && (r += 1, o = s[r]), r += 1; r < a; )
      o = e(o, s[r], r, s), r += 1;
    return o;
  }
  function xc(n, e) {
    let t = 0, i = n;
    Array.isArray(n) || (i = Array.from(n));
    const r = i.length, s = [];
    let o = -1;
    for (; t < r; ) {
      const a = i[t];
      e(a, t, i) && (o += 1, s[o] = a), t += 1;
    }
    return s;
  }
  function mt(n, e) {
    let t = 0, i = n;
    Array.isArray(n) || (i = Array.from(n));
    const r = i.length, s = [];
    let o = -1;
    for (; t < r; ) {
      const a = i[t];
      o += 1, s[o] = e(a, t, i), t += 1;
    }
    return s;
  }
  function z(n, e) {
    let t = 0, i = n;
    Array.isArray(n) || (i = Array.from(n));
    const r = i.length;
    for (; t < r && e(i[t], t, i) !== !1; )
      t += 1;
    return n;
  }
  function I7(n) {
    return li(n, (e, t) => e + t, 0);
  }
  function e0e(n) {
    return li(n, (e, t) => e > t ? e : t, Array.isArray(n) ? n[0] : void 0);
  }
  function t0e(n) {
    return li(n, (e, t) => e < t ? e : t, Array.isArray(n) ? n[0] : void 0);
  }
  function n0e(n) {
    return n.length ? I7(n) / n.length : 0;
  }
  function O7(n) {
    return li(n, (e, t) => e.concat(Array.isArray(t) ? O7(t) : t), []);
  }
  function sD(n) {
    const e = [];
    return z(n, (t) => {
      e.indexOf(t) === -1 && e.push(t);
    }), e;
  }
  function PP() {
    for (var n = arguments.length, e = new Array(n), t = 0; t < n; t++)
      e[t] = arguments[t];
    const [i, ...r] = [...e];
    let s = i;
    return z(r, (o) => {
      s = s.filter((a) => !o.includes(a));
    }), s;
  }
  function i0e() {
    for (var n = arguments.length, e = new Array(n), t = 0; t < n; t++)
      e[t] = arguments[t];
    const [i, ...r] = [...e];
    let s = i;
    return z(r, (o) => {
      s = s.filter((a) => o.includes(a));
    }), s;
  }
  function r0e() {
    for (var n = arguments.length, e = new Array(n), t = 0; t < n; t++)
      e[t] = arguments[t];
    const [i, ...r] = [...e], s = new Set(i);
    return z(r, (o) => {
      z(o, (a) => {
        s.has(a) || s.add(a);
      });
    }), Array.from(s);
  }
  function IP(n) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : " ";
    return n.split(e);
  }
  const s0e = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    arrayAvg: n0e,
    arrayEach: z,
    arrayFilter: xc,
    arrayFlatten: O7,
    arrayMap: mt,
    arrayMax: e0e,
    arrayMin: t0e,
    arrayReduce: li,
    arraySum: I7,
    arrayUnique: sD,
    extendArray: AP,
    getDifferenceOfArrays: PP,
    getIntersectionOfArrays: i0e,
    getUnionOfArrays: r0e,
    pivot: bv,
    stringToArray: IP,
    to2dArray: P7
  }, Symbol.toStringTag, { value: "Module" }));
  function Kt(n) {
    for (var e = arguments.length, t = new Array(e > 1 ? e - 1 : 0), i = 1; i < e; i++)
      t[i - 1] = arguments[i];
    return li(n, (s, o, a) => {
      const l = o.replace(/\r?\n\s*/g, ""), c = t[a] ? t[a] : "";
      return s + l + c;
    }, "").trim();
  }
  function Vn(n) {
    let e;
    switch (typeof n) {
      case "string":
      case "number":
        e = `${n}`;
        break;
      case "object":
        e = n === null ? "" : n.toString();
        break;
      case "undefined":
        e = "";
        break;
      default:
        e = n.toString();
        break;
    }
    return e;
  }
  function ke(n) {
    return typeof n < "u";
  }
  function dn(n) {
    return typeof n > "u";
  }
  function Wn(n) {
    return n === null || n === "" || dn(n);
  }
  function k7(n) {
    return Object.prototype.toString.call(n) === "[object RegExp]";
  }
  const $b = "length", vv = (n) => parseInt(n, 16), jB = (n) => parseInt(n, 10), M_ = (n, e, t) => n.substr(e, t), wv = (n) => n.codePointAt(0) - 65, OP = (n) => `${n}`.replace(/\-/g, ""), o0e = (n) => vv(M_(OP(n), vv("12"), wv("F"))) / (vv(M_(OP(n), wv("B"), ~~![][$b])) || 9), a0e = () => typeof location < "u" && /^([a-z0-9\-]+\.)?\x68\x61\x6E\x64\x73\x6F\x6E\x74\x61\x62\x6C\x65\x2E\x63\x6F\x6D$/i.test(location.host);
  let zB = !1;
  const UB = {
    invalid: () => Kt`
    The license key for Handsontable is invalid.\x20
    If you need any help, contact us at support@handsontable.com.`,
    expired: (n) => {
      let {
        keyValidityDate: e,
        hotVersion: t
      } = n;
      return Kt`
    The license key for Handsontable expired on ${e}, and is not valid for the installed\x20
    version ${t}. Renew your license key at handsontable.com or downgrade to a version released prior\x20
    to ${e}. If you need any help, contact us at sales@handsontable.com.`;
    },
    missing: () => Kt`
    The license key for Handsontable is missing. Use your purchased key to activate the product.\x20
    Alternatively, you can activate Handsontable to use for non-commercial purposes by\x20
    passing the key: 'non-commercial-and-evaluation'. If you need any help, contact\x20
    us at support@handsontable.com.`,
    non_commercial: () => ""
  }, GB = {
    invalid: () => Kt`
    The license key for Handsontable is invalid.\x20
    <a href="https://handsontable.com/docs/tutorial-license-key.html" target="_blank">Read more</a> on how to\x20
    install it properly or contact us at <a href="mailto:support@handsontable.com">support@handsontable.com</a>.`,
    expired: (n) => {
      let {
        keyValidityDate: e,
        hotVersion: t
      } = n;
      return Kt`
    The license key for Handsontable expired on ${e}, and is not valid for the installed\x20
    version ${t}. <a href="https://handsontable.com/pricing" target="_blank">Renew</a> your\x20
    license key or downgrade to a version released prior to ${e}. If you need any\x20
    help, contact us at <a href="mailto:sales@handsontable.com">sales@handsontable.com</a>.`;
    },
    missing: () => Kt`
    The license key for Handsontable is missing. Use your purchased key to activate the product.\x20
    Alternatively, you can activate Handsontable to use for non-commercial purposes by\x20
    passing the key: 'non-commercial-and-evaluation'.\x20
    <a href="https://handsontable.com/docs/tutorial-license-key.html" target="_blank">Read more</a> about it in\x20
    the documentation or contact us at <a href="mailto:support@handsontable.com">support@handsontable.com</a>.`,
    non_commercial: () => ""
  };
  function D7(n, e) {
    const t = !Wn(n), i = typeof n == "string" && n.toLowerCase() === "non-commercial-and-evaluation", r = "14.6.1";
    let s, o = "invalid", a = "invalid";
    n = OP(n || "");
    const l = l0e(n);
    if (t || i || l)
      if (l) {
        const c = he("17/10/2024", "DD/MM/YYYY"), u = Math.floor(c.toDate().getTime() / 864e5), h = o0e(n);
        s = he((h + 1) * 864e5, "x").format("MMMM DD, YYYY"), u > h ? (o = "expired", a = "expired") : (o = "valid", a = "valid");
      } else i ? (o = "non_commercial", a = "valid") : (o = "invalid", a = "invalid");
    else
      o = "missing", a = "missing";
    if (a0e() && (o = "valid", a = "valid"), !zB && o !== "valid" && (UB[o]({
      keyValidityDate: s,
      hotVersion: r
    }) && console[o === "non_commercial" ? "info" : "warn"](UB[o]({
      keyValidityDate: s,
      hotVersion: r
    })), zB = !0), a !== "valid" && e.parentNode && GB[a]({
      keyValidityDate: s,
      hotVersion: r
    })) {
      const u = document.createElement("div");
      u.className = "hot-display-license-info", u.innerHTML = GB[a]({
        keyValidityDate: s,
        hotVersion: r
      }), e.parentNode.insertBefore(u, e.nextSibling);
    }
  }
  function l0e(n) {
    let e = [][$b], t = e;
    if (n[$b] !== wv("Z"))
      return !1;
    for (let i = "", r = "B<H4P+".split(""), s = wv(r.shift()); s; s = wv(r.shift() || "A"))
      --s < ""[$b] ? t = t | (jB(`${jB(vv(i) + (vv(M_(n, Math.abs(s), 2)) + []).padStart(2, "0"))}`) % 97 || 2) >> 1 : i = M_(n, s, s ? r[$b] === 1 ? 9 : 8 : 6);
    return t === e;
  }
  const c0e = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    _injectProductInfo: D7,
    isDefined: ke,
    isEmpty: Wn,
    isRegExp: k7,
    isUndefined: dn,
    stringify: Vn
  }, Symbol.toStringTag, { value: "Module" }));
  function pr(n) {
    return n[0].toUpperCase() + n.substr(1);
  }
  function u0e() {
    const n = [];
    for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++)
      t[i] = arguments[i];
    let r = t.length;
    for (; r; ) {
      r -= 1;
      const s = Vn(t[r]).toLowerCase();
      n.indexOf(s) === -1 && n.push(s);
    }
    return n.length === 1;
  }
  function oD() {
    function n() {
      return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1);
    }
    return n() + n() + n() + n();
  }
  function aD(n) {
    return /^([0-9][0-9]?%$)|(^100%$)/.test(n);
  }
  function lD(n) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return `${n}`.replace(/(?:\\)?\[([^[\]]+)]/g, (t, i) => t.charAt(0) === "\\" ? t.substr(1, t.length - 1) : e[i] === void 0 ? "" : e[i]);
  }
  function kP(n) {
    return A1(`${n}`, {
      ALLOWED_TAGS: []
    });
  }
  function A1(n, e) {
    return Jme.sanitize(n, e);
  }
  const h0e = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    equalsIgnoreCase: u0e,
    isPercentValue: aD,
    randomString: oD,
    sanitize: A1,
    stripTags: kP,
    substitute: lD,
    toUpperCaseFirst: pr
  }, Symbol.toStringTag, { value: "Module" })), qp = (n) => ["tabindex", n], d0e = () => ["role", "treegrid"], Ka = () => ["role", "presentation"], f0e = () => ["role", "gridcell"], g0e = () => ["role", "rowheader"], N7 = () => ["role", "rowgroup"], p0e = () => ["role", "columnheader"], DP = () => ["role", "row"], m0e = () => ["role", "menu"], b0e = () => ["role", "menuitem"], v0e = () => ["role", "menuitemcheckbox"], w0e = () => ["role", "combobox"], L7 = () => ["role", "listbox"], y0e = () => ["role", "option"], C0e = () => ["role", "checkbox"], S0e = () => ["scope", "col"], _0e = () => ["scope", "row"], R0e = () => ["type", "text"], A_ = (n) => ["aria-label", n], xf = () => ["aria-hidden", "true"], E0e = () => ["aria-disabled", "true"], x0e = () => ["aria-multiselectable", "true"], H7 = (n) => ["aria-haspopup", n], $7 = (n) => ["aria-rowcount", n], P1 = (n) => ["aria-colcount", n], F7 = (n) => ["aria-rowindex", n], cD = (n) => ["aria-colindex", n], no = (n) => ["aria-expanded", n], T0e = (n) => ["aria-sort", n], YB = () => ["aria-readonly", "true"], KB = () => ["aria-invalid", "true"], B7 = (n) => ["aria-checked", n], uD = () => ["aria-selected", "true"], M0e = () => ["aria-autocomplete", "list"], A0e = (n) => ["aria-controls", n], P0e = (n) => ["aria-activedescendant", n], I0e = (n) => ["aria-live", n], O0e = (n) => ["aria-relevant", n], k0e = (n) => ["aria-setsize", n], D0e = (n) => ["aria-posinset", n];
  function V7(n) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, t = -1, i = null, r = n;
    for (; r !== null; ) {
      if (t === e) {
        i = r;
        break;
      }
      r.host && r.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? r = r.host : (t += 1, r = r.parentNode);
    }
    return i;
  }
  function W7(n, e) {
    const t = n.closest(".handsontable");
    return !!t && (t.parentNode === e || t === e);
  }
  function j7(n) {
    return Object.getPrototypeOf(n.parent) && n.frameElement;
  }
  function ef(n) {
    return j7(n) && n.parent;
  }
  function N0e(n) {
    return !!Object.getPrototypeOf(n.parent);
  }
  function Gu(n) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], t = arguments.length > 2 ? arguments[2] : void 0;
    const {
      ELEMENT_NODE: i,
      DOCUMENT_FRAGMENT_NODE: r
    } = Node;
    let s = n;
    for (; s != null && s !== t; ) {
      const {
        nodeType: o,
        nodeName: a
      } = s;
      if (o === i && (e.includes(a) || e.includes(s)))
        return s;
      const {
        host: l
      } = s;
      l && o === r ? s = l : s = s.parentNode;
    }
    return null;
  }
  function Fb(n, e, t) {
    const i = [];
    let r = n;
    for (; r && (r = Gu(r, e, t), !(!r || t && !t.contains(r))); )
      i.push(r), r.host && r.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? r = r.host : r = r.parentNode;
    const s = i.length;
    return s ? i[s - 1] : null;
  }
  function Hu(n, e) {
    let t = n.parentNode, i = [];
    for (typeof e == "string" ? n.defaultView ? i = Array.prototype.slice.call(n.querySelectorAll(e), 0) : i = Array.prototype.slice.call(n.ownerDocument.querySelectorAll(e), 0) : i.push(e); t !== null; ) {
      if (i.indexOf(t) > -1)
        return !0;
      t = t.parentNode;
    }
    return !1;
  }
  function z7(n) {
    let e = 0, t = n;
    if (t.previousSibling)
      for (; t = t.previousSibling; )
        e += 1;
    return e;
  }
  function lu(n, e, t) {
    const i = t.parentElement.querySelector(`.ht_clone_${n}`);
    return i ? i.contains(e) : null;
  }
  function U7(n) {
    return !n || !n.length ? [] : n.filter((e) => !!e);
  }
  function G7(n, e) {
    if (!n || !n.length)
      return {
        regexFree: [],
        regexes: []
      };
    const t = [], i = [];
    return i.push(...n.filter((r) => {
      const s = r instanceof RegExp;
      return s && e && t.push(r), !s;
    })), {
      regexFree: i,
      regexes: t
    };
  }
  function Ue(n, e) {
    return n.classList === void 0 || typeof e != "string" || e === "" ? !1 : n.classList.contains(e);
  }
  function ue(n, e) {
    typeof e == "string" && (e = e.split(" ")), e = U7(e), e.length > 0 && n.classList.add(...e);
  }
  function Ze(n, e) {
    typeof e == "string" ? e = e.split(" ") : e instanceof RegExp && (e = [e]);
    let {
      regexFree: t,
      // eslint-disable-next-line prefer-const
      regexes: i
    } = G7(e, !0);
    t = U7(t), t.length > 0 && n.classList.remove(...t), i.forEach((r) => {
      n.classList.forEach((s) => {
        r.test(s) && n.classList.remove(s);
      });
    });
  }
  function ze(n) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], t = arguments.length > 2 ? arguments[2] : void 0;
    Array.isArray(e) || (e = [[e, t]]), e.forEach((i) => {
      Array.isArray(i) && i[0] !== "" && n.setAttribute(...i);
    });
  }
  function Tf(n) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    typeof e == "string" ? e = e.split(" ") : e instanceof RegExp && (e = [e]);
    const {
      regexFree: t,
      regexes: i
    } = G7(e, !0);
    t.forEach((r) => {
      r !== "" && n.removeAttribute(r);
    }), i.forEach((r) => {
      n.getAttributeNames().forEach((s) => {
        r.test(s) && n.removeAttribute(s);
      });
    });
  }
  function hD(n) {
    if (n.nodeType === 3)
      n.parentNode.removeChild(n);
    else if (["TABLE", "THEAD", "TBODY", "TFOOT", "TR"].indexOf(n.nodeName) > -1) {
      const e = n.childNodes;
      for (let t = e.length - 1; t >= 0; t--)
        hD(e[t]);
    }
  }
  function ra(n) {
    let e;
    for (; e = n.lastChild; )
      n.removeChild(e);
  }
  const Y7 = /(<(.*)>|&(.*);)/;
  function Mf(n, e) {
    let t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
    Y7.test(e) ? n.innerHTML = t ? A1(e) : e : Yu(n, e);
  }
  function Yu(n, e) {
    const t = n.firstChild;
    t && t.nodeType === 3 && t.nextSibling === null ? t.textContent = e : (ra(n), n.appendChild(n.ownerDocument.createTextNode(e)));
  }
  function tf(n) {
    const e = n.ownerDocument.documentElement;
    let t = n;
    for (; t !== e; ) {
      if (t === null)
        return !1;
      if (t.nodeType === Node.DOCUMENT_FRAGMENT_NODE)
        if (t.host) {
          if (t.host.impl)
            return tf(t.host.impl);
          if (t.host)
            return tf(t.host);
          throw new Error("Lost in Web Components world");
        } else
          return !1;
      else if (al(t).display === "none")
        return !1;
      t = t.parentNode;
    }
    return !0;
  }
  function _i(n) {
    const e = n.ownerDocument, t = e.defaultView, i = e.documentElement;
    let r = n, s, o, a;
    for (s = r.offsetLeft, o = r.offsetTop, a = r; (r = r.offsetParent) && !(r === e.body || !("offsetLeft" in r)); )
      s += r.offsetLeft, o += r.offsetTop, a = r;
    return a && a.style.position === "fixed" && (s += t.pageXOffset || i.scrollLeft, o += t.pageYOffset || i.scrollTop), {
      left: s,
      top: o
    };
  }
  function dD() {
    return (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window).scrollY;
  }
  function I1() {
    return (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window).scrollX;
  }
  function O1(n) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : window;
    return n === e ? dD(e) : n.scrollTop;
  }
  function fD(n) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : window;
    return n === e ? I1(e) : n.scrollLeft;
  }
  function dw(n) {
    let e = n.ownerDocument, t = e ? e.defaultView : void 0;
    e || (e = n.document ? n.document : n, t = e.defaultView);
    const i = ["auto", "scroll"];
    let r = n.parentNode;
    for (; r && r.style && e.body !== r; ) {
      let {
        overflow: s,
        overflowX: o,
        overflowY: a
      } = r.style;
      if ([s, o, a].includes("scroll"))
        return r;
      if ({
        overflow: s,
        overflowX: o,
        overflowY: a
      } = t.getComputedStyle(r), i.includes(s) || i.includes(o) || i.includes(a) || r.clientHeight <= r.scrollHeight + 1 && (i.includes(a) || i.includes(s)) || r.clientWidth <= r.scrollWidth + 1 && (i.includes(o) || i.includes(s)))
        return r;
      r = r.parentNode;
    }
    return t;
  }
  function K7(n) {
    return n.scrollHeight - n.clientHeight;
  }
  function q7(n) {
    return n.scrollWidth - n.clientWidth;
  }
  function nf(n) {
    const e = n.ownerDocument, t = e.defaultView;
    let i = n.parentNode;
    for (; i && i.style && e.body !== i; ) {
      if (i.style.overflow !== "visible" && i.style.overflow !== "")
        return i;
      const r = al(i, t), s = ["scroll", "hidden", "auto"], o = r.getPropertyValue("overflow"), a = r.getPropertyValue("overflow-y"), l = r.getPropertyValue("overflow-x");
      if (s.includes(o) || s.includes(a) || s.includes(l))
        return i;
      i = i.parentNode;
    }
    return t;
  }
  function Cp(n, e) {
    let t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : window;
    if (n) {
      if (n === t)
        return e === "width" ? `${t.innerWidth}px` : e === "height" ? `${t.innerHeight}px` : void 0;
    } else return;
    const i = n.style[e];
    if (i !== "" && i !== void 0)
      return i;
    const r = al(n, t);
    if (r[e] !== "" && r[e] !== void 0)
      return r[e];
  }
  function L0e(n, e) {
    const {
      selectorText: t
    } = e;
    let i = !1;
    return e.type === CSSRule.STYLE_RULE && t && (n.msMatchesSelector ? i = n.msMatchesSelector(t) : n.matches && (i = n.matches(t))), i;
  }
  function al(n) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : window;
    return n.currentStyle || e.getComputedStyle(n);
  }
  function fn(n) {
    return n.offsetWidth;
  }
  function ti(n) {
    return n.offsetHeight;
  }
  function Sd(n) {
    return n.clientHeight || n.innerHeight;
  }
  function gD(n) {
    return n.clientWidth || n.innerWidth;
  }
  function H0e(n, e, t) {
    n.addEventListener(e, t, !1);
  }
  function $0e(n, e, t) {
    n.removeEventListener(e, t, !1);
  }
  function pD(n) {
    return n.selectionStart ? n.selectionStart : 0;
  }
  function X7(n) {
    return n.selectionEnd ? n.selectionEnd : 0;
  }
  function F0e() {
    let n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window;
    const e = n.document;
    let t = "";
    return n.getSelection ? t = n.getSelection().toString() : e.selection && e.selection.type !== "Control" && (t = e.selection.createRange().text), t;
  }
  function NP() {
    let n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window;
    n.getSelection && (n.getSelection().empty ? n.getSelection().empty() : n.getSelection().removeAllRanges && n.getSelection().removeAllRanges());
  }
  function ay(n, e, t) {
    if (t === void 0 && (t = e), n.setSelectionRange) {
      n.focus();
      try {
        n.setSelectionRange(e, t);
      } catch {
        const r = n.parentNode, s = r.style.display;
        r.style.display = "block", n.setSelectionRange(e, t), r.style.display = s;
      }
    }
  }
  let Qx;
  function B0e() {
    let n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : document;
    const e = n.createElement("div");
    e.style.height = "200px", e.style.width = "100%";
    const t = n.createElement("div");
    t.style.boxSizing = "content-box", t.style.height = "150px", t.style.left = "0px", t.style.overflow = "hidden", t.style.position = "absolute", t.style.top = "0px", t.style.width = "200px", t.style.visibility = "hidden", t.appendChild(e), (n.body || n.documentElement).appendChild(t);
    const i = e.offsetWidth;
    t.style.overflow = "scroll";
    let r = e.offsetWidth;
    return i === r && (r = t.clientWidth), (n.body || n.documentElement).removeChild(t), i - r;
  }
  function xi() {
    let n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : document;
    return Qx === void 0 && (Qx = B0e(n)), Qx;
  }
  function Z7(n) {
    return n.offsetWidth !== n.clientWidth;
  }
  function Q7(n) {
    return n.offsetHeight !== n.clientHeight;
  }
  function k1(n, e, t) {
    n.style.transform = `translate3d(${e},${t},0)`;
  }
  function V0e(n) {
    let e;
    return n.style.transform && (e = n.style.transform) !== "" ? ["transform", e] : -1;
  }
  function ly(n) {
    n.style.transform && n.style.transform !== "" && (n.style.transform = "");
  }
  function yv(n) {
    return n && (["INPUT", "SELECT", "TEXTAREA"].indexOf(n.nodeName) > -1 || n.contentEditable === "true");
  }
  function D1(n) {
    return yv(n) && n.hasAttribute("data-hot-input") === !1;
  }
  function W0e(n) {
    const e = n.ownerDocument.activeElement;
    D1(e) || n.select();
  }
  function mD(n) {
    return !n.parentNode;
  }
  function J7(n, e) {
    new IntersectionObserver((i, r) => {
      i.forEach((s) => {
        s.isIntersecting && n.offsetParent !== null && (e(), r.unobserve(n));
      });
    }, {
      root: n.ownerDocument.body
    }).observe(n);
  }
  function bD(n) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
    const i = n.ownerDocument, r = i.createRange(), s = i.defaultView.getSelection();
    ze(n, "contenteditable", !0), t && ze(n, ...xf()), e && ue(n, "invisibleSelection"), r.selectNodeContents(n), s.removeAllRanges(), s.addRange(r);
  }
  function vD(n) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
    const t = n.ownerDocument.defaultView.getSelection();
    n.hasAttribute("aria-hidden") && n.removeAttribute("aria-hidden"), t.removeAllRanges(), e && Ze(n, "invisibleSelection"), n.removeAttribute("contenteditable");
  }
  function e9(n, e) {
    let t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
    bD(n, t), e(), vD(n, t);
  }
  const j0e = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    HTML_CHARACTERS: Y7,
    addClass: ue,
    addEvent: H0e,
    clearTextSelection: NP,
    closest: Gu,
    closestDown: Fb,
    empty: ra,
    fastInnerHTML: Mf,
    fastInnerText: Yu,
    getCaretPosition: pD,
    getComputedStyle: al,
    getCssTransform: V0e,
    getFrameElement: j7,
    getMaximumScrollLeft: q7,
    getMaximumScrollTop: K7,
    getParent: V7,
    getParentWindow: ef,
    getScrollLeft: fD,
    getScrollTop: O1,
    getScrollableElement: dw,
    getScrollbarWidth: xi,
    getSelectionEndPosition: X7,
    getSelectionText: F0e,
    getStyle: Cp,
    getTrimmingContainer: nf,
    getWindowScrollLeft: I1,
    getWindowScrollTop: dD,
    hasAccessToParentWindow: N0e,
    hasClass: Ue,
    hasHorizontalScrollbar: Q7,
    hasVerticalScrollbar: Z7,
    index: z7,
    innerHeight: Sd,
    innerWidth: gD,
    isChildOf: Hu,
    isDetached: mD,
    isInput: yv,
    isOutsideInput: D1,
    isThisHotChild: W7,
    isVisible: tf,
    makeElementContentEditableAndSelectItsContent: bD,
    matchesCSSRules: L0e,
    observeVisibilityChangeOnce: J7,
    offset: _i,
    outerHeight: ti,
    outerWidth: fn,
    overlayContainsElement: lu,
    removeAttribute: Tf,
    removeClass: Ze,
    removeContentEditableFromElementAndDeselect: vD,
    removeEvent: $0e,
    removeTextNodes: hD,
    resetCssTransform: ly,
    runWithSelectedContendEditableElement: e9,
    selectElementIfAllowed: W0e,
    setAttribute: ze,
    setCaretPosition: ay,
    setOverlayPosition: k1
  }, Symbol.toStringTag, { value: "Module" }));
  function cn(n) {
    return typeof n == "function";
  }
  function t9(n) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 200, t = 0;
    const i = {
      lastCallThrottled: !0
    };
    let r = null;
    function s() {
      for (var o = arguments.length, a = new Array(o), l = 0; l < o; l++)
        a[l] = arguments[l];
      const c = Date.now();
      let u = !1;
      i.lastCallThrottled = !0, t || (t = c, u = !0);
      const h = e - (c - t);
      return u ? (i.lastCallThrottled = !1, n.apply(this, a)) : (r && clearTimeout(r), r = setTimeout(() => {
        i.lastCallThrottled = !1, n.apply(this, a), t = 0, r = void 0;
      }, h)), i;
    }
    return s;
  }
  function z0e(n) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 200, t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 10;
    const i = t9(n, e);
    let r = t;
    function s() {
      r = t;
    }
    function o() {
      for (var a = arguments.length, l = new Array(a), c = 0; c < a; c++)
        l[c] = arguments[c];
      return r ? (r -= 1, n.apply(this, l)) : i.apply(this, l);
    }
    return o.clearHits = s, o;
  }
  function N1(n) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 200, t = null, i;
    function r() {
      for (var s = arguments.length, o = new Array(s), a = 0; a < s; a++)
        o[a] = arguments[a];
      return t && clearTimeout(t), t = setTimeout(() => {
        i = n.apply(this, o);
      }, e), i;
    }
    return r;
  }
  function U0e() {
    for (var n = arguments.length, e = new Array(n), t = 0; t < n; t++)
      e[t] = arguments[t];
    const [i, ...r] = e;
    return function() {
      for (var o = arguments.length, a = new Array(o), l = 0; l < o; l++)
        a[l] = arguments[l];
      return li(r, (c, u) => u(c), i.apply(this, a));
    };
  }
  function wD(n) {
    for (var e = arguments.length, t = new Array(e > 1 ? e - 1 : 0), i = 1; i < e; i++)
      t[i - 1] = arguments[i];
    return function() {
      for (var s = arguments.length, o = new Array(s), a = 0; a < s; a++)
        o[a] = arguments[a];
      return n.apply(this, t.concat(o));
    };
  }
  function n9(n) {
    const e = n.length;
    function t(i) {
      return function() {
        for (var s = arguments.length, o = new Array(s), a = 0; a < s; a++)
          o[a] = arguments[a];
        const l = i.concat(o);
        let c;
        return l.length >= e ? c = n.apply(this, l) : c = t(l), c;
      };
    }
    return t([]);
  }
  function G0e(n) {
    const e = n.length;
    function t(i) {
      return function() {
        for (var s = arguments.length, o = new Array(s), a = 0; a < s; a++)
          o[a] = arguments[a];
        const l = i.concat(o.reverse());
        let c;
        return l.length >= e ? c = n.apply(this, l) : c = t(l), c;
      };
    }
    return t([]);
  }
  function P_(n, e, t, i, r, s, o, a) {
    return ke(a) ? n.call(e, t, i, r, s, o, a) : ke(o) ? n.call(e, t, i, r, s, o) : ke(s) ? n.call(e, t, i, r, s) : ke(r) ? n.call(e, t, i, r) : ke(i) ? n.call(e, t, i) : ke(t) ? n.call(e, t) : n.call(e);
  }
  const Y0e = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    curry: n9,
    curryRight: G0e,
    debounce: N1,
    fastCall: P_,
    isFunction: cn,
    partial: wD,
    pipe: U0e,
    throttle: t9,
    throttleAfterHits: z0e
  }, Symbol.toStringTag, { value: "Module" }));
  var K0e = pi, qB = vU, q0e = Gi, XB = wf, X0e = b1, ZB = K0e([].push), Z0e = function(n) {
    if (q0e(n)) return n;
    if (qB(n)) {
      for (var e = n.length, t = [], i = 0; i < e; i++) {
        var r = n[i];
        typeof r == "string" ? ZB(t, r) : (typeof r == "number" || XB(r) === "Number" || XB(r) === "String") && ZB(t, X0e(r));
      }
      var s = t.length, o = !0;
      return function(a, l) {
        if (o)
          return o = !1, l;
        if (qB(this)) return l;
        for (var c = 0; c < s; c++) if (t[c] === a) return l;
      };
    }
  }, Q0e = Yi, i9 = Up, r9 = m1, J0e = la, cy = pi, s9 = es, QB = Gi, JB = Sk, o9 = Nk, eCe = Z0e, tCe = Ck, nCe = String, $u = i9("JSON", "stringify"), l0 = cy(/./.exec), eV = cy("".charAt), iCe = cy("".charCodeAt), rCe = cy("".replace), sCe = cy(1 .toString), oCe = /[\uD800-\uDFFF]/g, tV = /^[\uD800-\uDBFF]$/, nV = /^[\uDC00-\uDFFF]$/, iV = !tCe || s9(function() {
    var n = i9("Symbol")("stringify detection");
    return $u([n]) !== "[null]" || $u({
      a: n
    }) !== "{}" || $u(Object(n)) !== "{}";
  }), rV = s9(function() {
    return $u("\uDF06\uD834") !== '"\\udf06\\ud834"' || $u("\uDEAD") !== '"\\udead"';
  }), aCe = function(n, e) {
    var t = o9(arguments), i = eCe(e);
    if (!(!QB(i) && (n === void 0 || JB(n))))
      return t[1] = function(r, s) {
        if (QB(i) && (s = J0e(i, this, nCe(r), s)), !JB(s)) return s;
      }, r9($u, null, t);
  }, lCe = function(n, e, t) {
    var i = eV(t, e - 1), r = eV(t, e + 1);
    return l0(tV, n) && !l0(nV, r) || l0(nV, n) && !l0(tV, i) ? "\\u" + sCe(iCe(n, 0), 16) : n;
  };
  $u && Q0e({
    target: "JSON",
    stat: !0,
    arity: 3,
    forced: iV || rV
  }, {
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    stringify: function(e, t, i) {
      var r = o9(arguments), s = r9(iV ? aCe : $u, null, r);
      return rV && typeof s == "string" ? rCe(s, oCe, lCe) : s;
    }
  });
  function Sp(n) {
    let e;
    return Array.isArray(n) ? e = n.length ? new Array(n.length).fill(null) : [] : (e = {}, lt(n, (t, i) => {
      i !== "__children" && (t && typeof t == "object" && !Array.isArray(t) ? e[i] = Sp(t) : Array.isArray(t) ? t.length && typeof t[0] == "object" && !Array.isArray(t[0]) ? e[i] = [Sp(t[0])] : e[i] = [] : e[i] = null);
    })), e;
  }
  function ua(n, e) {
    return e.prototype.constructor = e, n.prototype = new e(), n.prototype.constructor = n, n;
  }
  function ai(n, e, t) {
    const i = Array.isArray(t);
    return lt(e, (r, s) => {
      (i === !1 || t.includes(s)) && (n[s] = r);
    }), n;
  }
  function uy(n, e) {
    lt(e, (t, i) => {
      e[i] && typeof e[i] == "object" ? (n[i] || (Array.isArray(e[i]) ? n[i] = [] : Object.prototype.toString.call(e[i]) === "[object Date]" ? n[i] = e[i] : n[i] = {}), uy(n[i], e[i])) : n[i] = e[i];
    });
  }
  function mr(n) {
    return typeof n == "object" ? JSON.parse(JSON.stringify(n)) : n;
  }
  function sa(n) {
    const e = {};
    return lt(n, (t, i) => {
      e[i] = t;
    }), e;
  }
  function qt(n) {
    n.MIXINS || (n.MIXINS = []);
    for (var e = arguments.length, t = new Array(e > 1 ? e - 1 : 0), i = 1; i < e; i++)
      t[i - 1] = arguments[i];
    return z(t, (r) => {
      n.MIXINS.push(r.MIXIN_NAME), lt(r, (s, o) => {
        if (n.prototype[o] !== void 0)
          throw new Error(`Mixin conflict. Property '${o}' already exist and cannot be overwritten.`);
        if (typeof s == "function")
          n.prototype[o] = s;
        else {
          const a = function(u, h) {
            const d = `_${u}`, f = (g) => {
              let p = g;
              return (Array.isArray(p) || at(p)) && (p = mr(p)), p;
            };
            return function() {
              return this[d] === void 0 && (this[d] = f(h)), this[d];
            };
          }, l = function(u) {
            const h = `_${u}`;
            return function(d) {
              this[h] = d;
            };
          };
          Object.defineProperty(n.prototype, o, {
            get: a(o, s),
            set: l(o),
            configurable: !0
          });
        }
      });
    }), n;
  }
  function L1(n, e) {
    return JSON.stringify(n) === JSON.stringify(e);
  }
  function at(n) {
    return Object.prototype.toString.call(n) === "[object Object]";
  }
  function Sl(n, e, t, i) {
    i.value = t, i.writable = i.writable !== !1, i.enumerable = i.enumerable !== !1, i.configurable = i.configurable !== !1, Object.defineProperty(n, e, i);
  }
  function lt(n, e) {
    for (const t in n)
      if ((!n.hasOwnProperty || n.hasOwnProperty && Object.prototype.hasOwnProperty.call(n, t)) && e(n[t], t, n) === !1)
        break;
    return n;
  }
  function a9(n, e) {
    const t = e.split(".");
    let i = n;
    return lt(t, (r) => {
      if (i = i[r], i === void 0)
        return i = void 0, !1;
    }), i;
  }
  function vS(n, e, t) {
    const i = e.split(".");
    let r = n;
    i.forEach((s, o) => {
      o !== i.length - 1 ? (In(r, s) || (r[s] = {}), r = r[s]) : r[s] = t;
    });
  }
  function H1(n) {
    if (!at(n))
      return 0;
    const e = function(t) {
      let i = 0;
      return at(t) ? lt(t, (r, s) => {
        s !== "__children" && (i += e(r));
      }) : i += 1, i;
    };
    return e(n);
  }
  function eo(n) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "value";
    const t = `_${e}`, i = {
      _touched: !1,
      [t]: n,
      isTouched() {
        return this._touched;
      }
    };
    return Object.defineProperty(i, e, {
      get() {
        return this[t];
      },
      set(r) {
        this._touched = !0, this[t] = r;
      },
      enumerable: !0,
      configurable: !0
    }), i;
  }
  function In(n, e) {
    return Object.prototype.hasOwnProperty.call(n, e);
  }
  const cCe = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    clone: sa,
    createObjectPropListener: eo,
    deepClone: mr,
    deepExtend: uy,
    deepObjectSize: H1,
    defineGetter: Sl,
    duckSchema: Sp,
    extend: ai,
    getProperty: a9,
    hasOwnProperty: In,
    inherit: ua,
    isObject: at,
    isObjectEqual: L1,
    mixin: qt,
    objectEach: lt,
    setProperty: vS
  }, Symbol.toStringTag, { value: "Module" }));
  function $1(n) {
    return window.requestAnimationFrame(n);
  }
  function fw(n) {
    window.cancelAnimationFrame(n);
  }
  function yD() {
    return "ontouchstart" in window;
  }
  function l9() {
    return typeof window < "u";
  }
  let Vf;
  function c9(n) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return Vf || (typeof Intl == "object" ? Vf = new Intl.Collator(n, e).compare : typeof String.prototype.localeCompare == "function" ? Vf = (t, i) => `${t}`.localeCompare(i) : Vf = (t, i) => t === i ? 0 : t > i ? -1 : 1, Vf);
  }
  const uCe = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    cancelAnimationFrame: fw,
    getComparisonFunction: c9,
    isCSR: l9,
    isTouchSupported: yD,
    requestAnimationFrame: $1
  }, Symbol.toStringTag, { value: "Module" })), zs = (n) => {
    const e = {
      value: !1
    };
    return e.test = (t, i) => {
      e.value = n(t, i);
    }, e;
  }, Bc = {
    chrome: zs((n, e) => /Chrome/.test(n) && /Google/.test(e)),
    chromeWebKit: zs((n) => /CriOS/.test(n)),
    edge: zs((n) => /Edge/.test(n)),
    edgeWebKit: zs((n) => /EdgiOS/.test(n)),
    firefox: zs((n) => /Firefox/.test(n)),
    firefoxWebKit: zs((n) => /FxiOS/.test(n)),
    mobile: zs((n) => /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(n)),
    safari: zs((n, e) => /Safari/.test(n) && /Apple Computer/.test(e))
  }, Xp = {
    mac: zs((n) => /^Mac/.test(n)),
    win: zs((n) => /^Win/.test(n)),
    linux: zs((n) => /^Linux/.test(n)),
    ios: zs((n) => /iPhone|iPad|iPod/i.test(n))
  };
  function u9() {
    let {
      userAgent: n = navigator.userAgent,
      vendor: e = navigator.vendor
    } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    lt(Bc, (t) => {
      let {
        test: i
      } = t;
      return void i(n, e);
    });
  }
  function h9() {
    let {
      platform: n = navigator.platform
    } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    lt(Xp, (e) => {
      let {
        test: t
      } = e;
      return void t(n);
    });
  }
  l9() && (u9(), h9());
  function CD() {
    return Bc.chrome.value;
  }
  function d9() {
    return Bc.chromeWebKit.value;
  }
  function wS() {
    return Bc.firefox.value;
  }
  function f9() {
    return Bc.firefoxWebKit.value;
  }
  function SD() {
    return Bc.safari.value;
  }
  function g9() {
    return Bc.edge.value;
  }
  function hCe() {
    return Bc.edgeWebKit.value;
  }
  function fc() {
    return Bc.mobile.value;
  }
  function _D() {
    return Xp.ios.value;
  }
  function RD() {
    let {
      maxTouchPoints: n
    } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : navigator;
    return n > 2 && Xp.mac.value;
  }
  function LP() {
    return Xp.win.value;
  }
  function gw() {
    return Xp.mac.value;
  }
  function dCe() {
    return Xp.linux.value;
  }
  const fCe = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    isChrome: CD,
    isChromeWebKit: d9,
    isEdge: g9,
    isEdgeWebKit: hCe,
    isFirefox: wS,
    isFirefoxWebKit: f9,
    isIOS: _D,
    isIpadOS: RD,
    isLinuxOS: dCe,
    isMacOS: gw,
    isMobileBrowser: fc,
    isSafari: SD,
    isWindowsOS: LP,
    setBrowserMeta: u9,
    setPlatformMeta: h9
  }, Symbol.toStringTag, { value: "Module" })), He = {
    ALT: 18,
    ARROW_DOWN: 40,
    ARROW_LEFT: 37,
    ARROW_RIGHT: 39,
    ARROW_UP: 38,
    AUDIO_DOWN: wS() ? 182 : 174,
    AUDIO_MUTE: wS() ? 181 : 173,
    AUDIO_UP: wS() ? 183 : 175,
    BACKSPACE: 8,
    CAPS_LOCK: 20,
    COMMA: 188,
    COMMAND_LEFT: 91,
    COMMAND_RIGHT: 93,
    COMMAND_FIREFOX: 224,
    CONTROL: 17,
    DELETE: 46,
    END: 35,
    ENTER: 13,
    ESCAPE: 27,
    F1: 112,
    F2: 113,
    F3: 114,
    F4: 115,
    F5: 116,
    F6: 117,
    F7: 118,
    F8: 119,
    F9: 120,
    F10: 121,
    F11: 122,
    F12: 123,
    F13: 124,
    F14: 125,
    F15: 126,
    F16: 127,
    F17: 128,
    F18: 129,
    F19: 130,
    HOME: 36,
    INSERT: 45,
    MEDIA_NEXT: 176,
    MEDIA_PLAY_PAUSE: 179,
    MEDIA_PREV: 177,
    MEDIA_STOP: 178,
    NULL: 0,
    NUM_LOCK: 144,
    PAGE_DOWN: 34,
    PAGE_UP: 33,
    PAUSE: 19,
    PERIOD: 190,
    SCROLL_LOCK: 145,
    SHIFT: 16,
    SPACE: 32,
    TAB: 9,
    A: 65,
    C: 67,
    D: 68,
    F: 70,
    L: 76,
    O: 79,
    P: 80,
    S: 83,
    V: 86,
    X: 88,
    Y: 89,
    Z: 90
  }, gCe = [He.ALT, He.ARROW_DOWN, He.ARROW_LEFT, He.ARROW_RIGHT, He.ARROW_UP, He.AUDIO_DOWN, He.AUDIO_MUTE, He.AUDIO_UP, He.BACKSPACE, He.CAPS_LOCK, He.DELETE, He.END, He.ENTER, He.ESCAPE, He.F1, He.F2, He.F3, He.F4, He.F5, He.F6, He.F7, He.F8, He.F9, He.F10, He.F11, He.F12, He.F13, He.F14, He.F15, He.F16, He.F17, He.F18, He.F19, He.HOME, He.INSERT, He.MEDIA_NEXT, He.MEDIA_PLAY_PAUSE, He.MEDIA_PREV, He.MEDIA_STOP, He.NULL, He.NUM_LOCK, He.PAGE_DOWN, He.PAGE_UP, He.PAUSE, He.SCROLL_LOCK, He.SHIFT, He.TAB];
  function p9(n) {
    return n === 32 || // space
    n >= 48 && n <= 57 || // 0-9
    n >= 96 && n <= 111 || // numpad
    n >= 186 && n <= 192 || // ;=,-./`
    n >= 219 && n <= 222 || // []{}\|"'
    n >= 226 || // special chars (229 for Asian chars)
    n >= 65 && n <= 90;
  }
  function ED(n) {
    return gCe.includes(n);
  }
  function pCe(n) {
    const e = [];
    return gw() ? e.push(He.COMMAND_LEFT, He.COMMAND_RIGHT, He.COMMAND_FIREFOX) : e.push(He.CONTROL), e.includes(n);
  }
  function m9(n) {
    return [He.CONTROL, He.COMMAND_LEFT, He.COMMAND_RIGHT, He.COMMAND_FIREFOX].includes(n);
  }
  function Zp(n, e) {
    const t = e.split("|");
    let i = !1;
    return z(t, (r) => {
      if (n === He[r])
        return i = !0, !1;
    }), i;
  }
  const mCe = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    KEY_CODES: He,
    isCtrlKey: pCe,
    isCtrlMetaKey: m9,
    isFunctionKey: ED,
    isKey: Zp,
    isPrintableChar: p9
  }, Symbol.toStringTag, { value: "Module" }));
  function bo(n) {
    n.isImmediatePropagationEnabled = !1, n.cancelBubble = !0;
  }
  function wu(n) {
    return n.isImmediatePropagationEnabled === !1;
  }
  function Ku(n) {
    return n.button === 2;
  }
  function F1(n) {
    return n.button === 0;
  }
  function b9(n) {
    return n instanceof TouchEvent;
  }
  function v9(n, e) {
    const t = {
      x: n.offsetX,
      y: n.offsetY
    };
    let i = n.target;
    if (!(e instanceof HTMLElement) || i !== e && i.contains(e))
      return t;
    for (; i !== e; )
      t.x += i.offsetLeft, t.y += i.offsetTop, i = i.offsetParent;
    return t;
  }
  const bCe = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    isImmediatePropagationStopped: wu,
    isLeftClick: F1,
    isRightClick: Ku,
    isTouchEvent: b9,
    offsetRelativeTo: v9,
    stopImmediatePropagation: bo
  }, Symbol.toStringTag, { value: "Module" }));
  var w9 = {}, vCe = oU, wCe = Ak, yCe = Object.keys || function(e) {
    return vCe(e, wCe);
  }, CCe = aa, SCe = J4, _Ce = ch, RCe = Hc, ECe = h1, xCe = yCe;
  w9.f = CCe && !SCe ? Object.defineProperties : function(e, t) {
    RCe(e);
    for (var i = ECe(t), r = xCe(t), s = r.length, o = 0, a; s > o; ) _Ce.f(e, a = r[o++], i[a]);
    return e;
  };
  var TCe = Hc, MCe = w9, sV = Ak, ACe = Tk, PCe = PU, ICe = Ek, OCe = nU, oV = ">", aV = "<", HP = "prototype", $P = "script", y9 = OCe("IE_PROTO"), Jx = function() {
  }, C9 = function(n) {
    return aV + $P + oV + n + aV + "/" + $P + oV;
  }, lV = function(n) {
    n.write(C9("")), n.close();
    var e = n.parentWindow.Object;
    return n = null, e;
  }, kCe = function() {
    var n = ICe("iframe"), e = "java" + $P + ":", t;
    return n.style.display = "none", PCe.appendChild(n), n.src = String(e), t = n.contentWindow.document, t.open(), t.write(C9("document.F=Object")), t.close(), t.F;
  }, c0, yS = function() {
    try {
      c0 = new ActiveXObject("htmlfile");
    } catch {
    }
    yS = typeof document < "u" ? document.domain && c0 ? lV(c0) : kCe() : lV(c0);
    for (var n = sV.length; n--; ) delete yS[HP][sV[n]];
    return yS();
  };
  ACe[y9] = !0;
  var DCe = Object.create || function(e, t) {
    var i;
    return e !== null ? (Jx[HP] = TCe(e), i = new Jx(), Jx[HP] = null, i[y9] = e) : i = yS(), t === void 0 ? i : MCe.f(i, t);
  }, NCe = lh, LCe = DCe, HCe = ch.f, FP = NCe("unscopables"), BP = Array.prototype;
  BP[FP] === void 0 && HCe(BP, FP, {
    configurable: !0,
    value: LCe(null)
  });
  var xD = function(n) {
    BP[FP][n] = !0;
  }, $Ce = xD;
  $Ce("flatMap");
  function Yt() {
    ke(console) && console.warn(...arguments);
  }
  function TD() {
    ke(console) && console.error(...arguments);
  }
  function FCe(n, e, t) {
    return (e = BCe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function BCe(n) {
    var e = VCe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function VCe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  const Wf = [
    /* eslint-disable jsdoc/require-description-complete-sentence */
    /**
     * Fired after resetting a cell's meta. This happens when the {@link Core#updateSettings} method is called.
     *
     * @event Hooks#afterCellMetaReset
     */
    "afterCellMetaReset",
    /**
     * Fired after one or more cells has been changed. The changes are triggered in any situation when the
     * value is entered using an editor or changed using API (e.q [`setDataAtCell`](@/api/core.md#setdataatcell) method).
     *
     * __Note:__ For performance reasons, the `changes` array is null for `"loadData"` source.
     *
     * @event Hooks#afterChange
     * @param {Array[]} changes 2D array containing information about each of the edited cells `[[row, prop, oldVal, newVal], ...]`. `row` is a visual row index.
     * @param {string} [source] String that identifies source of hook call ([list of all available sources](@/guides/getting-started/events-and-hooks/events-and-hooks.md#definition-for-source-argument)).
     * @example
     * ::: only-for javascript
     * ```js
     * new Handsontable(element, {
     *   afterChange: (changes) => {
     *     changes?.forEach(([row, prop, oldValue, newValue]) => {
     *       // Some logic...
     *     });
     *   }
     * })
     * ```
     * :::
     *
     * ::: only-for react
     * ```jsx
     * <HotTable
     *   afterChange={(changes, source) => {
     *     changes?.forEach(([row, prop, oldValue, newValue]) => {
     *       // Some logic...
     *     });
     *   }}
     * />
     * ```
     * :::
     */
    "afterChange",
    /**
     * Fired each time user opens {@link ContextMenu} and after setting up the Context Menu's default options. These options are a collection
     * which user can select by setting an array of keys or an array of objects in {@link Options#contextMenu} option.
     *
     * @event Hooks#afterContextMenuDefaultOptions
     * @param {Array} predefinedItems An array of objects containing information about the pre-defined Context Menu items.
     */
    "afterContextMenuDefaultOptions",
    /**
     * Fired each time user opens {@link ContextMenu} plugin before setting up the Context Menu's items but after filtering these options by
     * user ([`contextMenu`](@/api/options.md#contextmenu) option). This hook can by helpful to determine if user use specified menu item or to set up
     * one of the menu item to by always visible.
     *
     * @event Hooks#beforeContextMenuSetItems
     * @param {object[]} menuItems An array of objects containing information about to generated Context Menu items.
     */
    "beforeContextMenuSetItems",
    /**
     * Fired by {@link DropdownMenu} plugin after setting up the Dropdown Menu's default options. These options are a
     * collection which user can select by setting an array of keys or an array of objects in {@link Options#dropdownMenu}
     * option.
     *
     * @event Hooks#afterDropdownMenuDefaultOptions
     * @param {object[]} predefinedItems An array of objects containing information about the pre-defined Context Menu items.
     */
    "afterDropdownMenuDefaultOptions",
    /**
     * Fired by {@link DropdownMenu} plugin before setting up the Dropdown Menu's items but after filtering these options
     * by user ([`dropdownMenu`](@/api/options.md#dropdownmenu) option). This hook can by helpful to determine if user use specified menu item or to set
     * up one of the menu item to by always visible.
     *
     * @event Hooks#beforeDropdownMenuSetItems
     * @param {object[]} menuItems An array of objects containing information about to generated Dropdown Menu items.
     */
    "beforeDropdownMenuSetItems",
    /**
     * Fired by {@link ContextMenu} plugin after hiding the Context Menu. This hook is fired when {@link Options#contextMenu}
     * option is enabled.
     *
     * @event Hooks#afterContextMenuHide
     * @param {object} context The Context Menu plugin instance.
     */
    "afterContextMenuHide",
    /**
     * Fired by {@link ContextMenu} plugin before opening the Context Menu. This hook is fired when {@link Options#contextMenu}
     * option is enabled.
     *
     * @event Hooks#beforeContextMenuShow
     * @param {object} context The Context Menu instance.
     */
    "beforeContextMenuShow",
    /**
     * Fired by {@link ContextMenu} plugin after opening the Context Menu. This hook is fired when {@link Options#contextMenu}
     * option is enabled.
     *
     * @event Hooks#afterContextMenuShow
     * @param {object} context The Context Menu plugin instance.
     */
    "afterContextMenuShow",
    /**
     * Fired by {@link CopyPaste} plugin after reaching the copy limit while copying data. This hook is fired when
     * {@link Options#copyPaste} option is enabled.
     *
     * @event Hooks#afterCopyLimit
     * @param {number} selectedRows Count of selected copyable rows.
     * @param {number} selectedColumns Count of selected copyable columns.
     * @param {number} copyRowsLimit Current copy rows limit.
     * @param {number} copyColumnsLimit Current copy columns limit.
     */
    "afterCopyLimit",
    /**
     * Fired before created a new column.
     *
     * @event Hooks#beforeCreateCol
     * @param {number} index Represents the visual index of first newly created column in the data source array.
     * @param {number} amount Number of newly created columns in the data source array.
     * @param {string} [source] String that identifies source of hook call
     *                          ([list of all available sources](@/guides/getting-started/events-and-hooks/events-and-hooks.md#definition-for-source-argument)).
     * @returns {*} If `false` then creating columns is cancelled.
     * @example
     * ::: only-for javascript
     * ```js
     * // Return `false` to cancel column inserting.
     * new Handsontable(element, {
     *   beforeCreateCol: function(data, coords) {
     *     return false;
     *   }
     * });
     * ```
     * :::
     *
     * ::: only-for react
     * ```jsx
     * // Return `false` to cancel column inserting.
     * <HotTable
     *   beforeCreateCol={(data, coords) => {
     *     return false;
     *   }}
     * />
     * ```
     * :::
     */
    "beforeCreateCol",
    /**
     * Fired after the order of columns has changed.
     * This hook is fired by changing column indexes of any type supported by the {@link IndexMapper}.
     *
     * @event Hooks#afterColumnSequenceChange
     * @param {'init'|'remove'|'insert'|'move'|'update'} [source] A string that indicates what caused the change to the order of columns.
     */
    "afterColumnSequenceChange",
    /**
     * Fired after created a new column.
     *
     * @event Hooks#afterCreateCol
     * @param {number} index Represents the visual index of first newly created column in the data source.
     * @param {number} amount Number of newly created columns in the data source.
     * @param {string} [source] String that identifies source of hook call
     *                          ([list of all available sources](@/guides/getting-started/events-and-hooks/events-and-hooks.md#definition-for-source-argument)).
     */
    "afterCreateCol",
    /**
     * Fired before created a new row.
     *
     * @event Hooks#beforeCreateRow
     * @param {number} index Represents the visual index of first newly created row in the data source array.
     * @param {number} amount Number of newly created rows in the data source array.
     * @param {string} [source] String that identifies source of hook call
     *                          ([list of all available sources](@/guides/getting-started/events-and-hooks/events-and-hooks.md#definition-for-source-argument)).
     * @returns {*|boolean} If false is returned the action is canceled.
     */
    "beforeCreateRow",
    /**
     * Fired after created a new row.
     *
     * @event Hooks#afterCreateRow
     * @param {number} index Represents the visual index of first newly created row in the data source array.
     * @param {number} amount Number of newly created rows in the data source array.
     * @param {string} [source] String that identifies source of hook call
     *                          ([list of all available sources](@/guides/getting-started/events-and-hooks/events-and-hooks.md#definition-for-source-argument)).
     */
    "afterCreateRow",
    /**
     * Fired after all selected cells are deselected.
     *
     * @event Hooks#afterDeselect
     */
    "afterDeselect",
    /**
     * Fired after destroying the Handsontable instance.
     *
     * @event Hooks#afterDestroy
     */
    "afterDestroy",
    /**
     * Hook fired after `keydown` event is handled.
     *
     * @event Hooks#afterDocumentKeyDown
     * @param {Event} event A native `keydown` event object.
     */
    "afterDocumentKeyDown",
    /**
     * Fired inside the Walkontable's selection `draw` method. Can be used to add additional class names to cells, depending on the current selection.
     *
     * @event Hooks#afterDrawSelection
     * @param {number} currentRow Row index of the currently processed cell.
     * @param {number} currentColumn Column index of the currently cell.
     * @param {number[]} cornersOfSelection Array of the current selection in a form of `[startRow, startColumn, endRow, endColumn]`.
     * @param {number|undefined} layerLevel Number indicating which layer of selection is currently processed.
     * @since 0.38.1
     * @returns {string|undefined} Can return a `String`, which will act as an additional `className` to be added to the currently processed cell.
     */
    "afterDrawSelection",
    /**
     * Fired inside the Walkontable's `refreshSelections` method. Can be used to remove additional class names from all cells in the table.
     *
     * @event Hooks#beforeRemoveCellClassNames
     * @since 0.38.1
     * @returns {string[]|undefined} Can return an `Array` of `String`s. Each of these strings will act like class names to be removed from all the cells in the table.
     */
    "beforeRemoveCellClassNames",
    /**
     * Fired after getting the cell settings.
     *
     * @event Hooks#afterGetCellMeta
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {object} cellProperties Object containing the cell properties.
     */
    "afterGetCellMeta",
    /**
     * Fired after retrieving information about a column header and appending it to the table header.
     *
     * @event Hooks#afterGetColHeader
     * @param {number} column Visual column index.
     * @param {HTMLTableCellElement} TH Header's TH element.
     * @param {number} [headerLevel=0] (Since 12.2.0) Header level index. Accepts positive (0 to n)
     *                                 and negative (-1 to -n) values. For positive values, 0 points to the
     *                                 topmost header. For negative values, -1 points to the bottom-most
     *                                 header (the header closest to the cells).
     */
    "afterGetColHeader",
    /**
     * Fired after retrieving information about a row header and appending it to the table header.
     *
     * @event Hooks#afterGetRowHeader
     * @param {number} row Visual row index.
     * @param {HTMLTableCellElement} TH Header's TH element.
     */
    "afterGetRowHeader",
    /**
     * Fired after the Handsontable instance is initiated.
     *
     * @event Hooks#afterInit
     */
    "afterInit",
    /**
     * Fired after Handsontable's [`data`](@/api/options.md#data)
     * gets modified by the [`loadData()`](@/api/core.md#loaddata) method
     * or the [`updateSettings()`](@/api/core.md#updatesettings) method.
     *
     * Read more:
     * - [Binding to data](@/guides/getting-started/binding-to-data/binding-to-data.md)
     * - [Saving data](@/guides/getting-started/saving-data/saving-data.md)
     *
     * @event Hooks#afterLoadData
     * @param {Array} sourceData An [array of arrays](@/guides/getting-started/binding-to-data/binding-to-data.md#array-of-arrays), or an [array of objects](@/guides/getting-started/binding-to-data/binding-to-data.md#array-of-objects), that contains Handsontable's data
     * @param {boolean} initialLoad A flag that indicates whether the data was loaded at Handsontable's initialization (`true`) or later (`false`)
     * @param {string} source The source of the call
     */
    "afterLoadData",
    /**
     * Fired after the [`updateData()`](@/api/core.md#updatedata) method
     * modifies Handsontable's [`data`](@/api/options.md#data).
     *
     * Read more:
     * - [Binding to data](@/guides/getting-started/binding-to-data/binding-to-data.md)
     * - [Saving data](@/guides/getting-started/saving-data/saving-data.md)
     *
     * @event Hooks#afterUpdateData
     * @since 11.1.0
     * @param {Array} sourceData An [array of arrays](@/guides/getting-started/binding-to-data/binding-to-data.md#array-of-arrays), or an [array of objects](@/guides/getting-started/binding-to-data/binding-to-data.md#array-of-objects), that contains Handsontable's data
     * @param {boolean} initialLoad A flag that indicates whether the data was loaded at Handsontable's initialization (`true`) or later (`false`)
     * @param {string} source The source of the call
     */
    "afterUpdateData",
    /**
     * Fired after a scroll event, which is identified as a momentum scroll (e.g. on an iPad).
     *
     * @event Hooks#afterMomentumScroll
     */
    "afterMomentumScroll",
    /**
     * Fired after a `mousedown` event is triggered on the cell corner (the drag handle).
     *
     * @event Hooks#afterOnCellCornerMouseDown
     * @param {Event} event `mousedown` event object.
     */
    "afterOnCellCornerMouseDown",
    /**
     * Fired after a `dblclick` event is triggered on the cell corner (the drag handle).
     *
     * @event Hooks#afterOnCellCornerDblClick
     * @param {Event} event `dblclick` event object.
     */
    "afterOnCellCornerDblClick",
    /**
     * Fired after clicking on a cell or row/column header. In case the row/column header was clicked, the coordinate
     * indexes are negative.
     *
     * For example clicking on the row header of cell (0, 0) results with `afterOnCellMouseDown` called
     * with coordinates `{row: 0, col: -1}`.
     *
     * @event Hooks#afterOnCellMouseDown
     * @param {Event} event `mousedown` event object.
     * @param {CellCoords} coords Coordinates object containing the visual row and visual column indexes of the clicked cell.
     * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.
     */
    "afterOnCellMouseDown",
    /**
     * Fired after clicking on a cell or row/column header. In case the row/column header was clicked, the coordinate
     * indexes are negative.
     *
     * For example clicking on the row header of cell (0, 0) results with `afterOnCellMouseUp` called
     * with coordinates `{row: 0, col: -1}`.
     *
     * @event Hooks#afterOnCellMouseUp
     * @param {Event} event `mouseup` event object.
     * @param {CellCoords} coords Coordinates object containing the visual row and visual column indexes of the clicked cell.
     * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.
     */
    "afterOnCellMouseUp",
    /**
     * Fired after clicking right mouse button on a cell or row/column header.
     *
     * For example clicking on the row header of cell (0, 0) results with `afterOnCellContextMenu` called
     * with coordinates `{row: 0, col: -1}`.
     *
     * @event Hooks#afterOnCellContextMenu
     * @since 4.1.0
     * @param {Event} event `contextmenu` event object.
     * @param {CellCoords} coords Coordinates object containing the visual row and visual column indexes of the clicked cell.
     * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.
     */
    "afterOnCellContextMenu",
    /**
     * Fired after hovering a cell or row/column header with the mouse cursor. In case the row/column header was
     * hovered, the index is negative.
     *
     * For example, hovering over the row header of cell (0, 0) results with `afterOnCellMouseOver` called
     * with coords `{row: 0, col: -1}`.
     *
     * @event Hooks#afterOnCellMouseOver
     * @param {Event} event `mouseover` event object.
     * @param {CellCoords} coords Hovered cell's visual coordinate object.
     * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.
     */
    "afterOnCellMouseOver",
    /**
     * Fired after leaving a cell or row/column header with the mouse cursor.
     *
     * @event Hooks#afterOnCellMouseOut
     * @param {Event} event `mouseout` event object.
     * @param {CellCoords} coords Leaved cell's visual coordinate object.
     * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.
     */
    "afterOnCellMouseOut",
    /**
     * Fired after one or more columns are removed.
     *
     * @event Hooks#afterRemoveCol
     * @param {number} index Visual index of starter column.
     * @param {number} amount An amount of removed columns.
     * @param {number[]} physicalColumns An array of physical columns removed from the data source.
     * @param {string} [source] String that identifies source of hook call
     *                          ([list of all available sources](@/guides/getting-started/events-and-hooks/events-and-hooks.md#definition-for-source-argument)).
     */
    "afterRemoveCol",
    /**
     * Fired after one or more rows are removed.
     *
     * @event Hooks#afterRemoveRow
     * @param {number} index Visual index of starter row.
     * @param {number} amount An amount of removed rows.
     * @param {number[]} physicalRows An array of physical rows removed from the data source.
     * @param {string} [source] String that identifies source of hook call
     *                          ([list of all available sources](@/guides/getting-started/events-and-hooks/events-and-hooks.md#definition-for-source-argument)).
     */
    "afterRemoveRow",
    /**
     * Fired before starting rendering the cell.
     *
     * @event Hooks#beforeRenderer
     * @param {HTMLTableCellElement} TD Currently rendered cell's TD element.
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {string|number} prop Column property name or a column index, if datasource is an array of arrays.
     * @param {*} value Value of the rendered cell.
     * @param {object} cellProperties Object containing the cell's properties.
     */
    "beforeRenderer",
    /**
     * Fired after finishing rendering the cell (after the renderer finishes).
     *
     * @event Hooks#afterRenderer
     * @param {HTMLTableCellElement} TD Currently rendered cell's TD element.
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {string|number} prop Column property name or a column index, if datasource is an array of arrays.
     * @param {*} value Value of the rendered cell.
     * @param {object} cellProperties Object containing the cell's properties.
     */
    "afterRenderer",
    /**
     * Fired after the order of rows has changed.
     * This hook is fired by changing row indexes of any type supported by the {@link IndexMapper}.
     *
     * @event Hooks#afterRowSequenceChange
     * @param {'init'|'remove'|'insert'|'move'|'update'} [source] A string that indicates what caused the change to the order of rows.
     */
    "afterRowSequenceChange",
    /**
     * Fired before the vertical viewport scroll. Triggered by the [`scrollViewportTo()`](@/api/core.md#scrollviewportto)
     * method or table internals.
     *
     * @since 14.0.0
     * @event Hooks#beforeViewportScrollVertically
     * @param {number} visualRow Visual row index.
     * @returns {number | boolean} Returns modified row index (or the same as passed in the method argument) to which
     * the viewport will be scrolled. If the returned value is `false`, the scrolling will be canceled.
     */
    "beforeViewportScrollVertically",
    /**
     * Fired before the horizontal viewport scroll. Triggered by the [`scrollViewportTo()`](@/api/core.md#scrollviewportto)
     * method or table internals.
     *
     * @since 14.0.0
     * @event Hooks#beforeViewportScrollHorizontally
     * @param {number} visualColumn Visual column index.
     * @returns {number | boolean} Returns modified column index (or the same as passed in the method argument) to which
     * the viewport will be scrolled. If the returned value is `false`, the scrolling will be canceled.
     */
    "beforeViewportScrollHorizontally",
    /**
     * Fired before the vertical or horizontal viewport scroll. Triggered by the [`scrollViewportTo()`](@/api/core.md#scrollviewportto)
     * method or table internals.
     *
     * @since 14.0.0
     * @event Hooks#beforeViewportScroll
     */
    "beforeViewportScroll",
    /**
     * Fired after the horizontal scroll event.
     *
     * @event Hooks#afterScrollHorizontally
     */
    "afterScrollHorizontally",
    /**
     * Fired after the vertical scroll event.
     *
     * @event Hooks#afterScrollVertically
     */
    "afterScrollVertically",
    /**
     * Fired after the vertical or horizontal scroll event.
     *
     * @since 14.0.0
     * @event Hooks#afterScroll
     */
    "afterScroll",
    /**
     * Fired after one or more cells are selected (e.g. during mouse move).
     *
     * @event Hooks#afterSelection
     * @param {number} row Selection start visual row index.
     * @param {number} column Selection start visual column index.
     * @param {number} row2 Selection end visual row index.
     * @param {number} column2 Selection end visual column index.
     * @param {object} preventScrolling A reference to the observable object with the `value` property.
     *                                  Property `preventScrolling.value` expects a boolean value that
     *                                  Handsontable uses to control scroll behavior after selection.
     * @param {number} selectionLayerLevel The number which indicates what selection layer is currently modified.
     * @example
     * ::: only-for javascript
     * ```js
     * new Handsontable(element, {
     *   afterSelection: (row, column, row2, column2, preventScrolling, selectionLayerLevel) => {
     *     // If set to `false` (default): when cell selection is outside the viewport,
     *     // Handsontable scrolls the viewport to cell selection's end corner.
     *     // If set to `true`: when cell selection is outside the viewport,
     *     // Handsontable doesn't scroll to cell selection's end corner.
     *     preventScrolling.value = true;
     *   }
     * })
     * ```
     * :::
     *
     * ::: only-for react
     * ```jsx
     * <HotTable
     *   afterSelection={(row, column, row2, column2, preventScrolling, selectionLayerLevel) => {
     *     // If set to `false` (default): when cell selection is outside the viewport,
     *     // Handsontable scrolls the viewport to cell selection's end corner.
     *     // If set to `true`: when cell selection is outside the viewport,
     *     // Handsontable doesn't scroll to cell selection's end corner.
     *     preventScrolling.value = true;
     *   }}
     * />
     * ```
     * :::
     */
    "afterSelection",
    /**
     * Fired after one or more cells are selected.
     *
     * The `prop` and `prop2` arguments represent the source object property name instead of the column number.
     *
     * @event Hooks#afterSelectionByProp
     * @param {number} row Selection start visual row index.
     * @param {string} prop Selection start data source object property name.
     * @param {number} row2 Selection end visual row index.
     * @param {string} prop2 Selection end data source object property name.
     * @param {object} preventScrolling A reference to the observable object with the `value` property.
     *                                  Property `preventScrolling.value` expects a boolean value that
     *                                  Handsontable uses to control scroll behavior after selection.
     * @param {number} selectionLayerLevel The number which indicates what selection layer is currently modified.
     * @example
     * ```js
     * ::: only-for javascript
     * new Handsontable(element, {
     *   afterSelectionByProp: (row, column, row2, column2, preventScrolling, selectionLayerLevel) => {
     *     // setting if prevent scrolling after selection
     *     preventScrolling.value = true;
     *   }
     * })
     * ```
     * :::
     *
     * ::: only-for react
     * ```jsx
     * <HotTable
     *   afterSelectionByProp={(row, column, row2, column2, preventScrolling, selectionLayerLevel) => {
     *     // setting if prevent scrolling after selection
     *     preventScrolling.value = true;
     *   }}
     * />
     * ```
     * :::
     */
    "afterSelectionByProp",
    /**
     * Fired after one or more cells are selected (e.g. on mouse up).
     *
     * @event Hooks#afterSelectionEnd
     * @param {number} row Selection start visual row index.
     * @param {number} column Selection start visual column index.
     * @param {number} row2 Selection end visual row index.
     * @param {number} column2 Selection end visual column index.
     * @param {number} selectionLayerLevel The number which indicates what selection layer is currently modified.
     */
    "afterSelectionEnd",
    /**
     * Fired after one or more cells are selected (e.g. on mouse up).
     *
     * The `prop` and `prop2` arguments represent the source object property name instead of the column number.
     *
     * @event Hooks#afterSelectionEndByProp
     * @param {number} row Selection start visual row index.
     * @param {string} prop Selection start data source object property index.
     * @param {number} row2 Selection end visual row index.
     * @param {string} prop2 Selection end data source object property index.
     * @param {number} selectionLayerLevel The number which indicates what selection layer is currently modified.
     */
    "afterSelectionEndByProp",
    /**
     * Fired after the focus position within a selected range is changed.
     *
     * @since 14.3.0
     * @event Hooks#afterSelectionFocusSet
     * @param {number} row The focus visual row index position.
     * @param {number} column The focus visual column index position.
     * @param {object} preventScrolling A reference to the observable object with the `value` property.
     *                                  Property `preventScrolling.value` expects a boolean value that
     *                                  Handsontable uses to control scroll behavior after selection.
     * @example
     * ```js
     * ::: only-for javascript
     * new Handsontable(element, {
     *   afterSelectionFocusSet: (row, column, preventScrolling) => {
     *     // If set to `false` (default): when focused cell selection is outside the viewport,
     *     // Handsontable scrolls the viewport to that cell.
     *     // If set to `true`: when focused cell selection is outside the viewport,
     *     // Handsontable doesn't scroll the viewport.
     *     preventScrolling.value = true;
     *   }
     * })
     * ```
     * :::
     *
     * ::: only-for react
     * ```jsx
     * <HotTable
     *   afterSelectionFocusSet={(row, column, preventScrolling) => {
     *     // If set to `false` (default): when focused cell selection is outside the viewport,
     *     // Handsontable scrolls the viewport to that cell.
     *     // If set to `true`: when focused cell selection is outside the viewport,
     *     // Handsontable doesn't scroll the viewport.
     *     preventScrolling.value = true;
     *   }}
     * />
     * ```
     * :::
     */
    "afterSelectionFocusSet",
    /**
     * Fired before one or more columns are selected (e.g. During mouse header click or {@link Core#selectColumns} API call).
     *
     * @since 14.0.0
     * @event Hooks#beforeSelectColumns
     * @param {CellCoords} from Selection start coords object.
     * @param {CellCoords} to Selection end coords object.
     * @param {CellCoords} highlight Selection cell focus coords object.
     * @example
     * ::: only-for javascript
     * ```js
     * new Handsontable(element, {
     *   beforeSelectColumns: (from, to, highlight) => {
     *     // Extend the column selection by one column left and one column right.
     *     from.col = Math.max(from.col - 1, 0);
     *     to.col = Math.min(to.col + 1, this.countCols() - 1);
     *   }
     * })
     * ```
     * :::
     *
     * ::: only-for react
     * ```jsx
     * <HotTable
     *   beforeSelectColumns={(from, to, highlight) => {
     *     // Extend the column selection by one column left and one column right.
     *     from.col = Math.max(from.col - 1, 0);
     *     to.col = Math.min(to.col + 1, this.countCols() - 1);
     *   }}
     * />
     * ```
     * :::
     */
    "beforeSelectColumns",
    /**
     * Fired after one or more columns are selected (e.g. during mouse header click or {@link Core#selectColumns} API call).
     *
     * @since 14.0.0
     * @event Hooks#afterSelectColumns
     * @param {CellCoords} from Selection start coords object.
     * @param {CellCoords} to Selection end coords object.
     * @param {CellCoords} highlight Selection cell focus coords object.
     */
    "afterSelectColumns",
    /**
     * Fired before one or more rows are selected (e.g. during mouse header click or {@link Core#selectRows} API call).
     *
     * @since 14.0.0
     * @event Hooks#beforeSelectRows
     * @param {CellCoords} from Selection start coords object.
     * @param {CellCoords} to Selection end coords object.
     * @param {CellCoords} highlight Selection cell focus coords object.
     * @example
     * ::: only-for javascript
     * ```js
     * new Handsontable(element, {
     *   beforeSelectRows: (from, to, highlight) => {
     *     // Extend the row selection by one row up and one row bottom more.
     *     from.row = Math.max(from.row - 1, 0);
     *     to.row = Math.min(to.row + 1, this.countRows() - 1);
     *   }
     * })
     * ```
     * :::
     *
     * ::: only-for react
     * ```jsx
     * <HotTable
     *   beforeSelectRows={(from, to, highlight) => {
     *     // Extend the row selection by one row up and one row bottom more.
     *     from.row = Math.max(from.row - 1, 0);
     *     to.row = Math.min(to.row + 1, this.countRows() - 1);
     *   }}
     * />
     * ```
     * :::
     */
    "beforeSelectRows",
    /**
     * Fired after one or more rows are selected (e.g. during mouse header click or {@link Core#selectRows} API call).
     *
     * @since 14.0.0
     * @event Hooks#afterSelectRows
     * @param {CellCoords} from Selection start coords object.
     * @param {CellCoords} to Selection end coords object.
     * @param {CellCoords} highlight Selection cell focus coords object.
     */
    "afterSelectRows",
    /**
     * Fired after cell meta is changed.
     *
     * @event Hooks#afterSetCellMeta
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {string} key The updated meta key.
     * @param {*} value The updated meta value.
     */
    "afterSetCellMeta",
    /**
     * Fired after cell meta is removed.
     *
     * @event Hooks#afterRemoveCellMeta
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {string} key The removed meta key.
     * @param {*} value Value which was under removed key of cell meta.
     */
    "afterRemoveCellMeta",
    /**
     * Fired after cell data was changed.
     *
     * @event Hooks#afterSetDataAtCell
     * @param {Array} changes An array of changes in format `[[row, column, oldValue, value], ...]`.
     * @param {string} [source] String that identifies source of hook call
     *                          ([list of all available sources](@/guides/getting-started/events-and-hooks/events-and-hooks.md#definition-for-source-argument)).
     */
    "afterSetDataAtCell",
    /**
     * Fired after cell data was changed.
     * Called only when [`setDataAtRowProp`](@/api/core.md#setdataatrowprop) was executed.
     *
     * @event Hooks#afterSetDataAtRowProp
     * @param {Array} changes An array of changes in format `[[row, prop, oldValue, value], ...]`.
     * @param {string} [source] String that identifies source of hook call
     *                          ([list of all available sources](@/guides/getting-started/events-and-hooks/events-and-hooks.md#definition-for-source-argument)).
     */
    "afterSetDataAtRowProp",
    /**
     * Fired after cell source data was changed.
     *
     * @event Hooks#afterSetSourceDataAtCell
     * @since 8.0.0
     * @param {Array} changes An array of changes in format `[[row, column, oldValue, value], ...]`.
     * @param {string} [source] String that identifies source of hook call.
     */
    "afterSetSourceDataAtCell",
    /**
     * Fired after calling the [`updateSettings`](@/api/core.md#updatesettings) method.
     *
     * @event Hooks#afterUpdateSettings
     * @param {object} newSettings New settings object.
     */
    "afterUpdateSettings",
    /**
     * @description
     * A plugin hook executed after validator function, only if validator function is defined.
     * Validation result is the first parameter. This can be used to determinate if validation passed successfully or not.
     *
     * __Returning false from the callback will mark the cell as invalid__.
     *
     * @event Hooks#afterValidate
     * @param {boolean} isValid `true` if valid, `false` if not.
     * @param {*} value The value in question.
     * @param {number} row Visual row index.
     * @param {string|number} prop Property name / visual column index.
     * @param {string} [source] String that identifies source of hook call
     *                          ([list of all available sources](@/guides/getting-started/events-and-hooks/events-and-hooks.md#definition-for-source-argument)).
     * @returns {undefined | boolean} If `false` the cell will be marked as invalid, `true` otherwise.
     */
    "afterValidate",
    /**
     * Fired before successful change of language (when proper language code was set).
     *
     * @event Hooks#beforeLanguageChange
     * @since 0.35.0
     * @param {string} languageCode New language code.
     */
    "beforeLanguageChange",
    /**
     * Fired after successful change of language (when proper language code was set).
     *
     * @event Hooks#afterLanguageChange
     * @since 0.35.0
     * @param {string} languageCode New language code.
     */
    "afterLanguageChange",
    /**
     * Fired by {@link Autofill} plugin before populating the data in the autofill feature. This hook is fired when
     * {@link Options#fillHandle} option is enabled.
     *
     * @event Hooks#beforeAutofill
     * @param {Array[]} selectionData Data the autofill operation will start from.
     * @param {CellRange} sourceRange The range values will be filled from.
     * @param {CellRange} targetRange The range new values will be filled into.
     * @param {string} direction Declares the direction of the autofill. Possible values: `up`, `down`, `left`, `right`.
     *
     * @returns {boolean|Array[]} If false, the operation is cancelled. If array of arrays, the returned data
     *                              will be passed into [`populateFromArray`](@/api/core.md#populatefromarray) instead of the default autofill
     *                              algorithm's result.
     */
    "beforeAutofill",
    /**
     * Fired by {@link Autofill} plugin after populating the data in the autofill feature. This hook is fired when
     * {@link Options#fillHandle} option is enabled.
     *
     * @event Hooks#afterAutofill
     * @since 8.0.0
     * @param {Array[]} fillData The data that was used to fill the `targetRange`. If `beforeAutofill` was used
     *                            and returned `[[]]`, this will be the same object that was returned from `beforeAutofill`.
     * @param {CellRange} sourceRange The range values will be filled from.
     * @param {CellRange} targetRange The range new values will be filled into.
     * @param {string} direction Declares the direction of the autofill. Possible values: `up`, `down`, `left`, `right`.
     */
    "afterAutofill",
    /**
     * Fired before aligning the cell contents.
     *
     * @event Hooks#beforeCellAlignment
     * @param {object} stateBefore An object with class names defining the cell alignment.
     * @param {CellRange[]} range An array of `CellRange` coordinates where the alignment will be applied.
     * @param {string} type Type of the alignment - either `horizontal` or `vertical`.
     * @param {string} alignmentClass String defining the alignment class added to the cell.
     * Possible values: `htLeft` , `htCenter`, `htRight`, `htJustify`, `htTop`, `htMiddle`, `htBottom`.
     */
    "beforeCellAlignment",
    /**
     * Fired before one or more cells are changed.
     *
     * Use this hook to silently alter the user's changes before Handsontable re-renders.
     *
     * To ignore the user's changes, use a nullified array or return `false`.
     *
     * @event Hooks#beforeChange
     * @param {Array[]} changes 2D array containing information about each of the edited cells `[[row, prop, oldVal, newVal], ...]`. `row` is a visual row index.
     * @param {string} [source] String that identifies source of hook call
     *                          ([list of all available sources](@/guides/getting-started/events-and-hooks/events-and-hooks.md#definition-for-source-argument)).
     * @returns {undefined | boolean} If `false` all changes were cancelled, `true` otherwise.
     * @example
     * ::: only-for javascript
     * ```js
     * // to alter a single change, overwrite the value with `changes[i][3]`
     * new Handsontable(element, {
     *   beforeChange: (changes, source) => {
     *     // [[row, prop, oldVal, newVal], ...]
     *     changes[0][3] = 10;
     *   }
     * });
     *
     * // to ignore a single change, set `changes[i]` to `null`
     * // or remove `changes[i]` from the array, by using `changes.splice(i, 1)`
     * new Handsontable(element, {
     *   beforeChange: (changes, source) => {
     *     // [[row, prop, oldVal, newVal], ...]
     *     changes[0] = null;
     *   }
     * });
     *
     * // to ignore all changes, return `false`
     * // or set the array's length to 0, by using `changes.length = 0`
     * new Handsontable(element, {
     *   beforeChange: (changes, source) => {
     *     // [[row, prop, oldVal, newVal], ...]
     *     return false;
     *   }
     * });
     * ```
     * :::
     *
     * ::: only-for react
     * ```jsx
     * // to alter a single change, overwrite the desired value with `changes[i][3]`
     * <HotTable
     *   beforeChange={(changes, source) => {
     *     // [[row, prop, oldVal, newVal], ...]
     *     changes[0][3] = 10;
     *   }}
     * />
     *
     * // to ignore a single change, set `changes[i]` to `null`
     * // or remove `changes[i]` from the array, by using changes.splice(i, 1).
     * <HotTable
     *   beforeChange={(changes, source) => {
     *     // [[row, prop, oldVal, newVal], ...]
     *     changes[0] = null;
     *   }}
     * />
     *
     * // to ignore all changes, return `false`
     * // or set the array's length to 0 (`changes.length = 0`)
     * <HotTable
     *   beforeChange={(changes, source) => {
     *     // [[row, prop, oldVal, newVal], ...]
     *     return false;
     *   }}
     * />
     * ```
     * :::
     */
    "beforeChange",
    /**
     * Fired right before rendering the changes.
     *
     * @event Hooks#beforeChangeRender
     * @param {Array[]} changes Array in form of `[row, prop, oldValue, newValue]`.
     * @param {string} [source] String that identifies source of hook call
     *                          ([list of all available sources](@/guides/getting-started/events-and-hooks/events-and-hooks.md#definition-for-source-argument)).
     */
    "beforeChangeRender",
    /**
     * Fired before drawing the borders.
     *
     * @event Hooks#beforeDrawBorders
     * @param {Array} corners Array specifying the current selection borders.
     * @param {string} borderClassName Specifies the border class name.
     */
    "beforeDrawBorders",
    /**
     * Fired before getting cell settings.
     *
     * @event Hooks#beforeGetCellMeta
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {object} cellProperties Object containing the cell's properties.
     */
    "beforeGetCellMeta",
    /**
     * Fired before cell meta is removed.
     *
     * @event Hooks#beforeRemoveCellMeta
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {string} key The removed meta key.
     * @param {*} value Value which is under removed key of cell meta.
     * @returns {*|boolean} If false is returned the action is canceled.
     */
    "beforeRemoveCellMeta",
    /**
     * Fired before the Handsontable instance is initiated.
     *
     * @event Hooks#beforeInit
     */
    "beforeInit",
    /**
     * Fired before the Walkontable instance is initiated.
     *
     * @event Hooks#beforeInitWalkontable
     * @param {object} walkontableConfig Walkontable configuration object.
     */
    "beforeInitWalkontable",
    /**
     * Fired before Handsontable's [`data`](@/api/options.md#data)
     * gets modified by the [`loadData()`](@/api/core.md#loaddata) method
     * or the [`updateSettings()`](@/api/core.md#updatesettings) method.
     *
     * Read more:
     * - [Binding to data](@/guides/getting-started/binding-to-data/binding-to-data.md)
     * - [Saving data](@/guides/getting-started/saving-data/saving-data.md)
     *
     * @event Hooks#beforeLoadData
     * @since 8.0.0
     * @param {Array} sourceData An [array of arrays](@/guides/getting-started/binding-to-data/binding-to-data.md#array-of-arrays), or an [array of objects](@/guides/getting-started/binding-to-data/binding-to-data.md#array-of-objects), that contains Handsontable's data
     * @param {boolean} initialLoad A flag that indicates whether the data was loaded at Handsontable's initialization (`true`) or later (`false`)
     * @param {string} source The source of the call
     * @returns {Array} The returned array will be used as Handsontable's new dataset.
     */
    "beforeLoadData",
    /**
     * Fired before the [`updateData()`](@/api/core.md#updatedata) method
     * modifies Handsontable's [`data`](@/api/options.md#data).
     *
     * Read more:
     * - [Binding to data](@/guides/getting-started/binding-to-data/binding-to-data.md)
     * - [Saving data](@/guides/getting-started/saving-data/saving-data.md)
     *
     * @event Hooks#beforeUpdateData
     * @since 11.1.0
     * @param {Array} sourceData An [array of arrays](@/guides/getting-started/binding-to-data/binding-to-data.md#array-of-arrays), or an [array of objects](@/guides/getting-started/binding-to-data/binding-to-data.md#array-of-objects), that contains Handsontable's data
     * @param {boolean} initialLoad A flag that indicates whether the data was loaded at Handsontable's initialization (`true`) or later (`false`)
     * @param {string} source The source of the call
     * @returns {Array} The returned array will be used as Handsontable's new dataset.
     */
    "beforeUpdateData",
    /**
     * Hook fired before `keydown` event is handled. It can be used to stop default key bindings.
     *
     * __Note__: To prevent default behavior you need to call `false` in your `beforeKeyDown` handler.
     *
     * @event Hooks#beforeKeyDown
     * @param {Event} event Original DOM event.
     */
    "beforeKeyDown",
    /**
     * Fired after the user clicked a cell, but before all the calculations related with it.
     *
     * @event Hooks#beforeOnCellMouseDown
     * @param {Event} event The `mousedown` event object.
     * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.
     * @param {HTMLTableCellElement} TD TD element.
     * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains
     *                            a boolean value that allows or disallows changing the selection for that particular area.
     */
    "beforeOnCellMouseDown",
    /**
     * Fired after the user clicked a cell.
     *
     * @event Hooks#beforeOnCellMouseUp
     * @param {Event} event The `mouseup` event object.
     * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.
     * @param {HTMLTableCellElement} TD TD element.
     */
    "beforeOnCellMouseUp",
    /**
     * Fired after the user clicked a cell, but before all the calculations related with it.
     *
     * @event Hooks#beforeOnCellContextMenu
     * @since 4.1.0
     * @param {Event} event The `contextmenu` event object.
     * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.
     * @param {HTMLTableCellElement} TD TD element.
     */
    "beforeOnCellContextMenu",
    /**
     * Fired after the user moved cursor over a cell, but before all the calculations related with it.
     *
     * @event Hooks#beforeOnCellMouseOver
     * @param {Event} event The `mouseover` event object.
     * @param {CellCoords} coords CellCoords object containing the visual coordinates of the clicked cell.
     * @param {HTMLTableCellElement} TD TD element.
     * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains
     *                            a boolean value that allows or disallows changing the selection for that particular area.
     */
    "beforeOnCellMouseOver",
    /**
     * Fired after the user moved cursor out from a cell, but before all the calculations related with it.
     *
     * @event Hooks#beforeOnCellMouseOut
     * @param {Event} event The `mouseout` event object.
     * @param {CellCoords} coords CellCoords object containing the visual coordinates of the leaved cell.
     * @param {HTMLTableCellElement} TD TD element.
     */
    "beforeOnCellMouseOut",
    /**
     * Fired before one or more columns are about to be removed.
     *
     * @event Hooks#beforeRemoveCol
     * @param {number} index Visual index of starter column.
     * @param {number} amount Amount of columns to be removed.
     * @param {number[]} physicalColumns An array of physical columns removed from the data source.
     * @param {string} [source] String that identifies source of hook call
     *                          ([list of all available sources](@/guides/getting-started/events-and-hooks/events-and-hooks.md#definition-for-source-argument)).
     * @returns {*|boolean} If false is returned the action is canceled.
     */
    "beforeRemoveCol",
    /**
     * Fired when one or more rows are about to be removed.
     *
     * @event Hooks#beforeRemoveRow
     * @param {number} index Visual index of starter row.
     * @param {number} amount Amount of rows to be removed.
     * @param {number[]} physicalRows An array of physical rows removed from the data source.
     * @param {string} [source] String that identifies source of hook call
     *                          ([list of all available sources](@/guides/getting-started/events-and-hooks/events-and-hooks.md#definition-for-source-argument)).
     * @returns {*|boolean} If false is returned the action is canceled.
     */
    "beforeRemoveRow",
    /**
     * Fired before Handsontable's view-rendering engine is rendered.
     *
     * __Note:__ In Handsontable 9.x and earlier, the `beforeViewRender` hook was named `beforeRender`.
     *
     * @event Hooks#beforeViewRender
     * @since 10.0.0
     * @param {boolean} isForced If set to `true`, the rendering gets triggered by a change of settings, a change of
     *                           data, or a logic that needs a full Handsontable render cycle.
     *                           If set to `false`, the rendering gets triggered by scrolling or moving the selection.
     * @param {object} skipRender Object with `skipRender` property, if it is set to `true ` the next rendering cycle will be skipped.
     */
    "beforeViewRender",
    /**
     * Fired after Handsontable's view-rendering engine is rendered,
     * but before redrawing the selection borders and before scroll syncing.
     *
     * __Note:__ In Handsontable 9.x and earlier, the `afterViewRender` hook was named `afterRender`.
     *
     * @event Hooks#afterViewRender
     * @since 10.0.0
     * @param {boolean} isForced If set to `true`, the rendering gets triggered by a change of settings, a change of
     *                           data, or a logic that needs a full Handsontable render cycle.
     *                           If set to `false`, the rendering gets triggered by scrolling or moving the selection.
     */
    "afterViewRender",
    /**
     * Fired before Handsontable's view-rendering engine updates the view.
     *
     * The `beforeRender` event is fired right after the Handsontable
     * business logic is executed and right before the rendering engine starts calling
     * the Core logic, renderers, cell meta objects etc. to update the view.
     *
     * @event Hooks#beforeRender
     * @param {boolean} isForced If set to `true`, the rendering gets triggered by a change of settings, a change of
     *                           data, or a logic that needs a full Handsontable render cycle.
     *                           If set to `false`, the rendering gets triggered by scrolling or moving the selection.
     */
    "beforeRender",
    /**
     * Fired after Handsontable's view-rendering engine updates the view.
     *
     * @event Hooks#afterRender
     * @param {boolean} isForced If set to `true`, the rendering gets triggered by a change of settings, a change of
     *                           data, or a logic that needs a full Handsontable render cycle.
     *                           If set to `false`, the rendering gets triggered by scrolling or moving the selection.
     */
    "afterRender",
    /**
     * When the focus position is moved to the next or previous row caused by the {@link Options#autoWrapRow} option
     * the hook is triggered.
     *
     * @since 14.0.0
     * @event Hooks#beforeRowWrap
     * @param {boolean} isWrapEnabled Tells whether the row wrapping is going to happen.
     * There may be situations where the option does not work even though it is enabled.
     * This is due to the priority of other options that may block the feature.
     * For example, when the {@link Options#minSpareCols} is defined, the {@link Options#autoWrapRow} option is not checked.
     * Thus, row wrapping is off.
     * @param {CellCoords} newCoords The new focus position. It is an object with keys `row` and `col`, where a value of `-1` indicates a header.
     * @param {boolean} isFlipped `true` if the row index was flipped, `false` otherwise.
     * Flipped index means that the user reached the last row and the focus is moved to the first row or vice versa.
     */
    "beforeRowWrap",
    /**
     * When the focus position is moved to the next or previous column caused by the {@link Options#autoWrapCol} option
     * the hook is triggered.
     *
     * @since 14.0.0
     * @event Hooks#beforeColumnWrap
     * @param {boolean} isWrapEnabled Tells whether the column wrapping is going to happen.
     * There may be situations where the option does not work even though it is enabled.
     * This is due to the priority of other options that may block the feature.
     * For example, when the {@link Options#minSpareRows} is defined, the {@link Options#autoWrapCol} option is not checked.
     * Thus, column wrapping is off.
     * @param {CellCoords} newCoords The new focus position. It is an object with keys `row` and `col`, where a value of `-1` indicates a header.
     * @param {boolean} isFlipped `true` if the column index was flipped, `false` otherwise.
     * Flipped index means that the user reached the last column and the focus is moved to the first column or vice versa.
     */
    "beforeColumnWrap",
    /**
     * Fired before cell meta is changed.
     *
     * @event Hooks#beforeSetCellMeta
     * @since 8.0.0
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {string} key The updated meta key.
     * @param {*} value The updated meta value.
     * @returns {boolean|undefined} If false is returned the action is canceled.
     */
    "beforeSetCellMeta",
    /**
     * Fired before setting focus selection.
     *
     * @since 14.3.0
     * @event Hooks#beforeSelectionFocusSet
     * @param {CellCoords} coords CellCoords instance.
     */
    "beforeSelectionFocusSet",
    /**
     * Fired before setting range is started but not finished yet.
     *
     * @event Hooks#beforeSetRangeStartOnly
     * @param {CellCoords} coords `CellCoords` instance.
     */
    "beforeSetRangeStartOnly",
    /**
     * Fired before setting range is started.
     *
     * @event Hooks#beforeSetRangeStart
     * @param {CellCoords} coords `CellCoords` instance.
     */
    "beforeSetRangeStart",
    /**
     * Fired before setting range is ended.
     *
     * @event Hooks#beforeSetRangeEnd
     * @param {CellCoords} coords `CellCoords` instance.
     */
    "beforeSetRangeEnd",
    /**
     * Fired before applying selection coordinates to the renderable coordinates for Walkontable (rendering engine).
     * It occurs even when cell coordinates remain unchanged and activates during cell selection and drag selection.
     * The behavior of Shift+Tab differs from Arrow Left when there's no further movement possible.
     *
     * @since 14.0.0
     * @event Hooks#beforeSelectionHighlightSet
     */
    "beforeSelectionHighlightSet",
    /**
     * Fired before the logic of handling a touch scroll, when user started scrolling on a touch-enabled device.
     *
     * @event Hooks#beforeTouchScroll
     */
    "beforeTouchScroll",
    /**
     * Fired before cell validation, only if validator function is defined. This can be used to manipulate the value
     * of changed cell before it is applied to the validator function.
     *
     * __Note:__ this will not affect values of changes. This will change value *ONLY* for validation.
     *
     * @event Hooks#beforeValidate
     * @param {*} value Value of the cell.
     * @param {number} row Visual row index.
     * @param {string|number} prop Property name / column index.
     * @param {string} [source] String that identifies source of hook call
     *                          ([list of all available sources](@/guides/getting-started/events-and-hooks/events-and-hooks.md#definition-for-source-argument)).
     */
    "beforeValidate",
    /**
     * Fired before cell value is rendered into the DOM (through renderer function). This can be used to manipulate the
     * value which is passed to the renderer without modifying the renderer itself.
     *
     * @event Hooks#beforeValueRender
     * @param {*} value Cell value to render.
     * @param {object} cellProperties An object containing the cell properties.
     */
    "beforeValueRender",
    /**
     * Fired after Handsontable instance is constructed (using `new` operator).
     *
     * @event Hooks#construct
     */
    "construct",
    /**
     * Fired after Handsontable instance is initiated but before table is rendered.
     *
     * @event Hooks#init
     */
    "init",
    /**
     * Fired when a column header index is about to be modified by a callback function.
     *
     * @event Hooks#modifyColHeader
     * @param {number} column Visual column header index.
     */
    "modifyColHeader",
    /**
     * Fired when a column width is about to be modified by a callback function.
     *
     * @event Hooks#modifyColWidth
     * @param {number} width Current column width.
     * @param {number} column Visual column index.
     */
    "modifyColWidth",
    /**
     * Fired when rendering the list of values in the multiple-selection component of the Filters dropdown.
     * The hook allows modifying the displayed values in that component.
     *
     * @since 14.2.0
     * @event Hooks#modifyFiltersMultiSelectValue
     * @param {object} item The item in the list of values.
     * @param {object} meta The cell properties object.
     */
    "modifyFiltersMultiSelectValue",
    /**
     * Fired when focusing a cell or a header element. Allows replacing the element to be focused by returning a
     * different HTML element.
     *
     * @since 14.0.0
     * @event Hooks#modifyFocusedElement
     * @param {number} row Row index.
     * @param {number} column Column index.
     * @param {HTMLElement|undefined} focusedElement The element to be focused. `null` for focusedElement is intended when focused cell is hidden.
     */
    "modifyFocusedElement",
    /**
     * Fired when a row header index is about to be modified by a callback function.
     *
     * @event Hooks#modifyRowHeader
     * @param {number} row Visual row header index.
     */
    "modifyRowHeader",
    /**
     * Fired when a row height is about to be modified by a callback function.
     *
     * @event Hooks#modifyRowHeight
     * @param {number} height Row height.
     * @param {number} row Visual row index.
     */
    "modifyRowHeight",
    /**
     * Fired when a row height is about to be modified by a callback function. The hook allows to change the row height
     * for the specified overlay type.
     *
     * @since 14.5.0
     * @event Hooks#modifyRowHeightByOverlayName
     * @param {number} height Row height.
     * @param {number} row Visual row index.
     * @param {'inline_start'|'top'|'top_inline_start_corner'|'bottom'|'bottom_inline_start_corner'|'master'} overlayName Overlay name.
     */
    "modifyRowHeightByOverlayName",
    /**
     * Fired when a data was retrieved or modified.
     *
     * @event Hooks#modifyData
     * @param {number} row Physical row index.
     * @param {number} column Visual column index.
     * @param {object} valueHolder Object which contains original value which can be modified by overwriting `.value` property.
     * @param {string} ioMode String which indicates for what operation hook is fired (`get` or `set`).
     */
    "modifyData",
    /**
     * Fired when a data was retrieved or modified from the source data set.
     *
     * @event Hooks#modifySourceData
     * @since 8.0.0
     * @param {number} row Physical row index.
     * @param {number} column Physical column index or property name.
     * @param {object} valueHolder Object which contains original value which can be modified by overwriting `.value` property.
     * @param {string} ioMode String which indicates for what operation hook is fired (`get` or `set`).
     */
    "modifySourceData",
    /**
     * Fired when a data was retrieved or modified.
     *
     * @event Hooks#modifyRowData
     * @param {number} row Physical row index.
     */
    "modifyRowData",
    /**
     * Used to modify the cell coordinates when using the [`getCell`](@/api/core.md#getcell) method, opening editor, getting value from the editor
     * and saving values from the closed editor.
     *
     * @event Hooks#modifyGetCellCoords
     * @since 0.36.0
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {boolean} topmost If set to `true`, it returns the TD element from the topmost overlay. For example,
     *                          if the wanted cell is in the range of fixed rows, it will return a TD element
     *                          from the `top` overlay.
     * @returns {undefined|number[]}
     */
    "modifyGetCellCoords",
    /**
     * Used to modify the cell coordinates when the table is activated (going into the listen mode).
     *
     * @event Hooks#modifyFocusOnTabNavigation
     * @since 14.0.0
     * @param {'from_above' | 'from_below'} tabActivationDir The browsers Tab navigation direction. Depending on
     * whether the user activated the table from the element above or below, another cell can be selected.
     * @param {CellCoords} visualCoords The coords that will be used to select a cell.
     */
    "modifyFocusOnTabNavigation",
    /**
     * Allows modify the visual row index that is used to retrieve the row header element (TH) before it's
     * highlighted (proper CSS class names are added). Modifying the visual row index allows building a custom
     * implementation of the nested headers feature or other features that require highlighting other DOM
     * elements than that the rendering engine, by default, would have highlighted.
     *
     * @event Hooks#beforeHighlightingRowHeader
     * @since 8.4.0
     * @param {number} row Visual row index.
     * @param {number} headerLevel Column header level (0 = most distant to the table).
     * @param {object} highlightMeta An object that contains additional information about processed selection.
     * @returns {number|undefined}
     */
    "beforeHighlightingRowHeader",
    /**
     * Allows modify the visual column index that is used to retrieve the column header element (TH) before it's
     * highlighted (proper CSS class names are added). Modifying the visual column index allows building a custom
     * implementation of the nested headers feature or other features that require highlighting other DOM
     * elements than that the rendering engine, by default, would have highlighted.
     *
     * @event Hooks#beforeHighlightingColumnHeader
     * @since 8.4.0
     * @param {number} column Visual column index.
     * @param {number} headerLevel Row header level (0 = most distant to the table).
     * @param {object} highlightMeta An object that contains additional information about processed selection.
     * @returns {number|undefined}
     */
    "beforeHighlightingColumnHeader",
    /**
     * Fired by {@link PersistentState} plugin, after loading value, saved under given key, from browser local storage.
     *
     * The `persistentStateLoad` hook is fired even when the {@link Options#persistentState} option is disabled.
     *
     * @event Hooks#persistentStateLoad
     * @param {string} key Key.
     * @param {object} valuePlaceholder Object containing the loaded value under `valuePlaceholder.value` (if no value have been saved, `value` key will be undefined).
     */
    "persistentStateLoad",
    /**
     * Fired by {@link PersistentState} plugin after resetting data from local storage. If no key is given, all values associated with table will be cleared.
     * This hook is fired when {@link Options#persistentState} option is enabled.
     *
     * @event Hooks#persistentStateReset
     * @param {string} [key] Key.
     */
    "persistentStateReset",
    /**
     * Fired by {@link PersistentState} plugin, after saving value under given key in browser local storage.
     *
     * The `persistentStateSave` hook is fired even when the {@link Options#persistentState} option is disabled.
     *
     * @event Hooks#persistentStateSave
     * @param {string} key Key.
     * @param {Mixed} value Value to save.
     */
    "persistentStateSave",
    /**
     * Fired by {@link ColumnSorting} and {@link MultiColumnSorting} plugins before sorting the column. If you return `false` value inside callback for hook, then sorting
     * will be not applied by the Handsontable (useful for server-side sorting).
     *
     * This hook is fired when {@link Options#columnSorting} or {@link Options#multiColumnSorting} option is enabled.
     *
     * @event Hooks#beforeColumnSort
     * @param {Array} currentSortConfig Current sort configuration (for all sorted columns).
     * @param {Array} destinationSortConfigs Destination sort configuration (for all sorted columns).
     * @returns {boolean | undefined} If `false` the column will not be sorted, `true` otherwise.
     */
    "beforeColumnSort",
    /**
     * Fired by {@link ColumnSorting} and {@link MultiColumnSorting} plugins after sorting the column. This hook is fired when {@link Options#columnSorting}
     * or {@link Options#multiColumnSorting} option is enabled.
     *
     * @event Hooks#afterColumnSort
     * @param {Array} currentSortConfig Current sort configuration (for all sorted columns).
     * @param {Array} destinationSortConfigs Destination sort configuration (for all sorted columns).
     */
    "afterColumnSort",
    /**
     * Fired by {@link Autofill} plugin after setting range of autofill. This hook is fired when {@link Options#fillHandle}
     * option is enabled.
     *
     * @event Hooks#modifyAutofillRange
     * @param {Array} startArea Array of visual coordinates of the starting point for the drag-down operation (`[startRow, startColumn, endRow, endColumn]`).
     * @param {Array} entireArea Array of visual coordinates of the entire area of the drag-down operation (`[startRow, startColumn, endRow, endColumn]`).
     */
    "modifyAutofillRange",
    /**
     * Fired to allow modifying the copyable range with a callback function.
     *
     * @event Hooks#modifyCopyableRange
     * @param {Array[]} copyableRanges Array of objects defining copyable cells.
     */
    "modifyCopyableRange",
    /**
     * Fired by {@link CopyPaste} plugin before copying the values to the clipboard and before clearing values of
     * the selected cells. This hook is fired when {@link Options#copyPaste} option is enabled.
     *
     * @event Hooks#beforeCut
     * @param {Array[]} data An array of arrays which contains data to cut.
     * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
     *                       which will be cut out.
     * @returns {*} If returns `false` then operation of the cutting out is canceled.
     * @example
     * ::: only-for javascript
     * ```js
     * // To disregard a single row, remove it from the array using data.splice(i, 1).
     * new Handsontable(element, {
     *   beforeCut: function(data, coords) {
     *     // data -> [[1, 2, 3], [4, 5, 6]]
     *     data.splice(0, 1);
     *     // data -> [[4, 5, 6]]
     *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]
     *   }
     * });
     * // To cancel a cutting action, just return `false`.
     * new Handsontable(element, {
     *   beforeCut: function(data, coords) {
     *     return false;
     *   }
     * });
     * ```
     * :::
     *
     * ::: only-for react
     * ```jsx
     * // To disregard a single row, remove it from the array using data.splice(i, 1).
     * <HotTable
     *   beforeCut={(data, coords) => {
     *     // data -> [[1, 2, 3], [4, 5, 6]]
     *     data.splice(0, 1);
     *     // data -> [[4, 5, 6]]
     *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]
     *   }}
     * />
     * // To cancel a cutting action, just return `false`.
     * <HotTable
     *   beforeCut={(data, coords) => {
     *     return false;
     *   }}
     * />
     * ```
     * :::
     */
    "beforeCut",
    /**
     * Fired by {@link CopyPaste} plugin after data was cut out from the table. This hook is fired when
     * {@link Options#copyPaste} option is enabled.
     *
     * @event Hooks#afterCut
     * @param {Array[]} data An array of arrays with the cut data.
     * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
     *                       which was cut out.
     */
    "afterCut",
    /**
     * Fired before values are copied to the clipboard.
     *
     * @event Hooks#beforeCopy
     * @param {Array[]} data An array of arrays which contains data to copied.
     * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
     *                         which will copied.
     * @param {{ columnHeadersCount: number }} copiedHeadersCount (Since 12.3.0) The number of copied column headers.
     * @returns {*} If returns `false` then copying is canceled.
     *
     * @example
     * ::: only-for javascript
     * ```js
     * // To disregard a single row, remove it from array using data.splice(i, 1).
     * ...
     * new Handsontable(document.getElementById('example'), {
     *   beforeCopy: (data, coords) => {
     *     // data -> [[1, 2, 3], [4, 5, 6]]
     *     data.splice(0, 1);
     *     // data -> [[4, 5, 6]]
     *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]
     *   }
     * });
     * ...
     *
     * // To cancel copying, return false from the callback.
     * ...
     * new Handsontable(document.getElementById('example'), {
     *   beforeCopy: (data, coords) => {
     *     return false;
     *   }
     * });
     * ...
     * ```
     * :::
     *
     * ::: only-for react
     * ```jsx
     * // To disregard a single row, remove it from array using data.splice(i, 1).
     * ...
     * <HotTable
     *   beforeCopy={(data, coords) => {
     *     // data -> [[1, 2, 3], [4, 5, 6]]
     *     data.splice(0, 1);
     *     // data -> [[4, 5, 6]]
     *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]
     *   }}
     * />
     * ...
     *
     * // To cancel copying, return false from the callback.
     * ...
     * <HotTable
     *   beforeCopy={(data, coords) => {
     *     return false;
     *   }}
     * />
     * ...
     * ```
     * :::
     */
    "beforeCopy",
    /**
     * Fired by {@link CopyPaste} plugin after data are pasted into table. This hook is fired when {@link Options#copyPaste}
     * option is enabled.
     *
     * @event Hooks#afterCopy
     * @param {Array[]} data An array of arrays which contains the copied data.
     * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
     *                         which was copied.
     * @param {{ columnHeadersCount: number }} copiedHeadersCount (Since 12.3.0) The number of copied column headers.
     */
    "afterCopy",
    /**
     * Fired by {@link CopyPaste} plugin before values are pasted into table. This hook is fired when
     * {@link Options#copyPaste} option is enabled.
     *
     * @event Hooks#beforePaste
     * @param {Array[]} data An array of arrays which contains data to paste.
     * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
     *                       that correspond to the previously selected area.
     * @returns {*} If returns `false` then pasting is canceled.
     * @example
     * ```js
     * ::: only-for javascript
     * // To disregard a single row, remove it from array using data.splice(i, 1).
     * new Handsontable(example, {
     *   beforePaste: (data, coords) => {
     *     // data -> [[1, 2, 3], [4, 5, 6]]
     *     data.splice(0, 1);
     *     // data -> [[4, 5, 6]]
     *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]
     *   }
     * });
     * // To cancel pasting, return false from the callback.
     * new Handsontable(example, {
     *   beforePaste: (data, coords) => {
     *     return false;
     *   }
     * });
     * ```
     * :::
     *
     * ::: only-for react
     * ```jsx
     * // To disregard a single row, remove it from array using data.splice(i, 1).
     * <HotTable
     *   beforePaste={(data, coords) => {
     *     // data -> [[1, 2, 3], [4, 5, 6]]
     *     data.splice(0, 1);
     *     // data -> [[4, 5, 6]]
     *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]
     *   }}
     * />
     * // To cancel pasting, return false from the callback.
     * <HotTable
     *   beforePaste={(data, coords) => {
     *     return false;
     *   }}
     * />
     * ```
     * :::
     */
    "beforePaste",
    /**
     * Fired by {@link CopyPaste} plugin after values are pasted into table. This hook is fired when
     * {@link Options#copyPaste} option is enabled.
     *
     * @event Hooks#afterPaste
     * @param {Array[]} data An array of arrays with the pasted data.
     * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
     *                       that correspond to the previously selected area.
     */
    "afterPaste",
    /**
     * Fired by the {@link ManualColumnFreeze} plugin, before freezing a column.
     *
     * @event Hooks#beforeColumnFreeze
     * @since 12.1.0
     * @param {number} column The visual index of the column that is going to freeze.
     * @param {boolean} freezePerformed If `true`: the column is going to freeze. If `false`: the column is not going to freeze (which might happen if the column is already frozen).
     * @returns {boolean|undefined} If `false`: the column is not going to freeze, and the `afterColumnFreeze` hook won't fire.
     */
    "beforeColumnFreeze",
    /**
     * Fired by the {@link ManualColumnFreeze} plugin, right after freezing a column.
     *
     * @event Hooks#afterColumnFreeze
     * @since 12.1.0
     * @param {number} column The visual index of the frozen column.
     * @param {boolean} freezePerformed If `true`: the column got successfully frozen. If `false`: the column didn't get frozen.
     */
    "afterColumnFreeze",
    /**
     * Fired by {@link ManualColumnMove} plugin before change order of the visual indexes. This hook is fired when
     * {@link Options#manualColumnMove} option is enabled.
     *
     * @event Hooks#beforeColumnMove
     * @param {Array} movedColumns Array of visual column indexes to be moved.
     * @param {number} finalIndex Visual column index, being a start index for the moved columns.
     *                            Points to where the elements will be placed after the moving action.
     *                            To check visualization of final index please take a look at
     *                            [documentation](@/guides/columns/column-moving/column-moving.md).
     * @param {number|undefined} dropIndex Visual column index, being a drop index for the moved columns.
     *                                     Points to where we are going to drop the moved elements. To check
     *                                     visualization of drop index please take a look at
     *                                     [documentation](@/guides/columns/column-moving/column-moving.md).
     *                                     It's `undefined` when `dragColumns` function wasn't called.
     * @param {boolean} movePossible Indicates if it's possible to move rows to the desired position.
     * @returns {undefined | boolean} If `false` the column will not be moved, `true` otherwise.
     */
    "beforeColumnMove",
    /**
     * Fired by {@link ManualColumnMove} plugin after changing order of the visual indexes.
     * This hook is fired when {@link Options#manualColumnMove} option is enabled.
     *
     * @event Hooks#afterColumnMove
     * @param {Array} movedColumns Array of visual column indexes to be moved.
     * @param {number} finalIndex Visual column index, being a start index for the moved columns.
     *                            Points to where the elements will be placed after the moving action.
     *                            To check visualization of final index please take a look at
     *                            [documentation](@/guides/columns/column-moving/column-moving.md).
     * @param {number|undefined} dropIndex Visual column index, being a drop index for the moved columns.
     *                                     Points to where we are going to drop the moved elements.
     *                                     To check visualization of drop index please take a look at
     *                                     [documentation](@/guides/columns/column-moving/column-moving.md).
     *                                     It's `undefined` when `dragColumns` function wasn't called.
     * @param {boolean} movePossible Indicates if it was possible to move columns to the desired position.
     * @param {boolean} orderChanged Indicates if order of columns was changed by move.
     */
    "afterColumnMove",
    /**
     * Fired by the {@link ManualColumnFreeze} plugin, before unfreezing a column.
     *
     * @event Hooks#beforeColumnUnfreeze
     * @since 12.1.0
     * @param {number} column The visual index of the column that is going to unfreeze.
     * @param {boolean} unfreezePerformed If `true`: the column is going to unfreeze. If `false`: the column is not going to unfreeze (which might happen if the column is already unfrozen).
     * @returns {boolean|undefined} If `false`: the column is not going to unfreeze, and the `afterColumnUnfreeze` hook won't fire.
     */
    "beforeColumnUnfreeze",
    /**
     * Fired by the {@link ManualColumnFreeze} plugin, right after unfreezing a column.
     *
     * @event Hooks#afterColumnUnfreeze
     * @since 12.1.0
     * @param {number} column The visual index of the unfrozen column.
     * @param {boolean} unfreezePerformed If `true`: the column got successfully unfrozen. If `false`: the column didn't get unfrozen.
     */
    "afterColumnUnfreeze",
    /**
     * Fired by {@link ManualRowMove} plugin before changing the order of the visual indexes. This hook is fired when
     * {@link Options#manualRowMove} option is enabled.
     *
     * @event Hooks#beforeRowMove
     * @param {Array} movedRows Array of visual row indexes to be moved.
     * @param {number} finalIndex Visual row index, being a start index for the moved rows.
     *                            Points to where the elements will be placed after the moving action.
     *                            To check visualization of final index please take a look at
     *                            [documentation](@/guides/rows/row-moving/row-moving.md).
     * @param {number|undefined} dropIndex Visual row index, being a drop index for the moved rows.
     *                                     Points to where we are going to drop the moved elements.
     *                                     To check visualization of drop index please take a look at
     *                                     [documentation](@/guides/rows/row-moving/row-moving.md).
     *                                     It's `undefined` when `dragRows` function wasn't called.
     * @param {boolean} movePossible Indicates if it's possible to move rows to the desired position.
     * @returns {*|boolean} If false is returned the action is canceled.
     */
    "beforeRowMove",
    /**
     * Fired by {@link ManualRowMove} plugin after changing the order of the visual indexes.
     * This hook is fired when {@link Options#manualRowMove} option is enabled.
     *
     * @event Hooks#afterRowMove
     * @param {Array} movedRows Array of visual row indexes to be moved.
     * @param {number} finalIndex Visual row index, being a start index for the moved rows.
     *                            Points to where the elements will be placed after the moving action.
     *                            To check visualization of final index please take a look at
     *                            [documentation](@/guides/rows/row-moving/row-moving.md).
     * @param {number|undefined} dropIndex Visual row index, being a drop index for the moved rows.
     *                                     Points to where we are going to drop the moved elements.
     *                                     To check visualization of drop index please take a look at
     *                                     [documentation](@/guides/rows/row-moving/row-moving.md).
     *                                     It's `undefined` when `dragRows` function wasn't called.
     * @param {boolean} movePossible Indicates if it was possible to move rows to the desired position.
     * @param {boolean} orderChanged Indicates if order of rows was changed by move.
     */
    "afterRowMove",
    /**
     * Fired by {@link ManualColumnResize} plugin before rendering the table with modified column sizes. This hook is
     * fired when {@link Options#manualColumnResize} option is enabled.
     *
     * @event Hooks#beforeColumnResize
     * @param {number} newSize Calculated new column width.
     * @param {number} column Visual index of the resized column.
     * @param {boolean} isDoubleClick Flag that determines whether there was a double-click.
     * @returns {number} Returns a new column size or `undefined`, if column size should be calculated automatically.
     */
    "beforeColumnResize",
    /**
     * Fired by {@link ManualColumnResize} plugin after rendering the table with modified column sizes. This hook is
     * fired when {@link Options#manualColumnResize} option is enabled.
     *
     * @event Hooks#afterColumnResize
     * @param {number} newSize Calculated new column width.
     * @param {number} column Visual index of the resized column.
     * @param {boolean} isDoubleClick Flag that determines whether there was a double-click.
     */
    "afterColumnResize",
    /**
     * Fired by {@link ManualRowResize} plugin before rendering the table with modified row sizes. This hook is
     * fired when {@link Options#manualRowResize} option is enabled.
     *
     * @event Hooks#beforeRowResize
     * @param {number} newSize Calculated new row height.
     * @param {number} row Visual index of the resized row.
     * @param {boolean} isDoubleClick Flag that determines whether there was a double-click.
     * @returns {number|undefined} Returns the new row size or `undefined` if row size should be calculated automatically.
     */
    "beforeRowResize",
    /**
     * Fired by {@link ManualRowResize} plugin after rendering the table with modified row sizes. This hook is
     * fired when {@link Options#manualRowResize} option is enabled.
     *
     * @event Hooks#afterRowResize
     * @param {number} newSize Calculated new row height.
     * @param {number} row Visual index of the resized row.
     * @param {boolean} isDoubleClick Flag that determines whether there was a double-click.
     */
    "afterRowResize",
    /**
     * Fired after getting the column header renderers.
     *
     * @event Hooks#afterGetColumnHeaderRenderers
     * @param {Function[]} renderers An array of the column header renderers.
     */
    "afterGetColumnHeaderRenderers",
    /**
     * Fired after getting the row header renderers.
     *
     * @event Hooks#afterGetRowHeaderRenderers
     * @param {Function[]} renderers An array of the row header renderers.
     */
    "afterGetRowHeaderRenderers",
    /**
     * Fired before applying stretched column width to column.
     *
     * @event Hooks#beforeStretchingColumnWidth
     * @param {number} stretchedWidth Calculated width.
     * @param {number} column Visual column index.
     * @returns {number|undefined} Returns new width which will be applied to the column element.
     */
    "beforeStretchingColumnWidth",
    /**
     * Fired by the [`Filters`](@/api/filters.md) plugin,
     * before a [column filter](@/guides/columns/column-filter/column-filter.md) gets applied.
     *
     * [`beforeFilter`](#beforefilter) takes two arguments: `conditionsStack` and `previousConditionsStack`, both are
     * arrays of objects.
     *
     * Each object represents one of your [column filters](@/api/filters.md#addcondition),
     * and consists of the following properties:
     *
     * | Property     | Possible values                                                         | Description                                                                                                              |
     * | ------------ | ----------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------ |
     * | `column`     | Number                                                                  | A visual index of the column to which the filter will be applied.                                                        |
     * | `conditions` | Array of objects                                                        | Each object represents one condition. For details, see [`addCondition()`](@/api/filters.md#addcondition).                |
     * | `operation`  | `'conjunction'` \| `'disjunction'` \| `'disjunctionWithExtraCondition'` | An operation to perform on your set of `conditions`. For details, see [`addCondition()`](@/api/filters.md#addcondition). |
     *
     * An example of the format of the `conditionsStack` argument:
     *
     * ```js
     * [
     *   {
     *     column: 2,
     *     conditions: [
     *       {name: 'begins_with', args: [['S']]}
     *     ],
     *     operation: 'conjunction'
     *   },
     *   {
     *     column: 4,
     *     conditions: [
     *       {name: 'not_empty', args: []}
     *     ],
     *     operation: 'conjunction'
     *   },
     * ]
     * ```
     *
     * To perform server-side filtering (i.e., to not apply filtering to Handsontable's UI),
     * set [`beforeFilter`](#beforefilter) to return `false`:
     *
     * ```js
     * new Handsontable(document.getElementById('example'), {
     *   beforeFilter: (conditionsStack) => {
     *     return false;
     *   }
     * });
     *```
     *
     * Read more:
     * - [Guides: Column filter](@/guides/columns/column-filter/column-filter.md)
     * - [Hooks: `afterFilter`](#afterfilter)
     * - [Options: `filters`](@/api/options.md#filters)
     * - [Plugins: `Filters`](@/api/filters.md)
     * – [Plugin methods: `addCondition()`](@/api/filters.md#addcondition)
     *
     * @event Hooks#beforeFilter
     * @param {object[]} conditionsStack An array of objects with your [column filters](@/api/filters.md#addcondition).
     * @param {object[]|null} previousConditionsStack An array of objects with your previous [column filters](@/api/filters.md#addcondition). It can also be `null` if there was no previous filters applied or the conditions did not change between performing the `filter` action.
     * @returns {boolean} To perform server-side filtering (i.e., to not apply filtering to Handsontable's UI), return `false`.
     */
    "beforeFilter",
    /**
     * Fired by the [`Filters`](@/api/filters.md) plugin,
     * after a [column filter](@/guides/columns/column-filter/column-filter.md) gets applied.
     *
     * [`afterFilter`](#afterfilter) takes one argument (`conditionsStack`), which is an array of objects.
     * Each object represents one of your [column filters](@/api/filters.md#addcondition),
     * and consists of the following properties:
     *
     * | Property     | Possible values                                                         | Description                                                                                                              |
     * | ------------ | ----------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------ |
     * | `column`     | Number                                                                  | A visual index of the column to which the filter was applied.                                                            |
     * | `conditions` | Array of objects                                                        | Each object represents one condition. For details, see [`addCondition()`](@/api/filters.md#addcondition).                |
     * | `operation`  | `'conjunction'` \| `'disjunction'` \| `'disjunctionWithExtraCondition'` | An operation to perform on your set of `conditions`. For details, see [`addCondition()`](@/api/filters.md#addcondition). |
     *
     * An example of the format of the `conditionsStack` argument:
     *
     * ```js
     * [
     *   {
     *     column: 2,
     *     conditions: [
     *       {name: 'begins_with', args: [['S']]}
     *     ],
     *     operation: 'conjunction'
     *   },
     *   {
     *     column: 4,
     *     conditions: [
     *       {name: 'not_empty', args: []}
     *     ],
     *     operation: 'conjunction'
     *   },
     * ]
     * ```
     *
     * Read more:
     * - [Guides: Column filter](@/guides/columns/column-filter/column-filter.md)
     * - [Hooks: `beforeFilter`](#beforefilter)
     * - [Options: `filters`](@/api/options.md#filters)
     * - [Plugins: `Filters`](@/api/filters.md)
     * – [Plugin methods: `addCondition()`](@/api/filters.md#addcondition)
     *
     * @event Hooks#afterFilter
     * @param {object[]} conditionsStack An array of objects with your [column filters](@/api/filters.md#addcondition).
     */
    "afterFilter",
    /**
     * Fired by the {@link Formulas} plugin, when any cell value changes.
     *
     * Returns an array of objects that contains:
     * - The addresses (`sheet`, `row`, `col`) and new values (`newValue`) of the changed cells.
     * - The addresses and new values of any cells that had to be recalculated (because their formulas depend on the cells that changed).
     *
     * This hook gets also fired on Handsontable's initialization, returning the addresses and values of all cells.
     *
     * Read more:
     * - [Guides: Formula calculation](@/guides/formulas/formula-calculation/formula-calculation.md)
     * - [HyperFormula documentation: `valuesUpdated`](https://hyperformula.handsontable.com/api/interfaces/listeners.html#valuesupdated)
     *
     * @since 9.0.0
     * @event Hooks#afterFormulasValuesUpdate
     * @param {Array} changes The addresses and new values of all the changed and recalculated cells.
     */
    "afterFormulasValuesUpdate",
    /**
     * Fired when a named expression is added to the Formulas' engine instance.
     *
     * @since 9.0.0
     * @event Hooks#afterNamedExpressionAdded
     * @param {string} namedExpressionName The name of the added expression.
     * @param {Array} changes The values and location of applied changes.
     */
    "afterNamedExpressionAdded",
    /**
     * Fired when a named expression is removed from the Formulas' engine instance.
     *
     * @since 9.0.0
     * @event Hooks#afterNamedExpressionRemoved
     * @param {string} namedExpressionName The name of the removed expression.
     * @param {Array} changes The values and location of applied changes.
     */
    "afterNamedExpressionRemoved",
    /**
     * Fired when a new sheet is added to the Formulas' engine instance.
     *
     * @since 9.0.0
     * @event Hooks#afterSheetAdded
     * @param {string} addedSheetDisplayName The name of the added sheet.
     */
    "afterSheetAdded",
    /**
     * Fired when a sheet in the Formulas' engine instance is renamed.
     *
     * @since 9.0.0
     * @event Hooks#afterSheetRenamed
     * @param {string} oldDisplayName The old name of the sheet.
     * @param {string} newDisplayName The new name of the sheet.
     */
    "afterSheetRenamed",
    /**
     * Fired when a sheet is removed from the Formulas' engine instance.
     *
     * @since 9.0.0
     * @event Hooks#afterSheetRemoved
     * @param {string} removedSheetDisplayName The removed sheet name.
     * @param {Array} changes The values and location of applied changes.
     */
    "afterSheetRemoved",
    /**
     * Fired while retrieving the column header height.
     *
     * @event Hooks#modifyColumnHeaderHeight
     */
    "modifyColumnHeaderHeight",
    /**
     * Fired while retrieving a column header's value.
     *
     * @since 12.3.0
     * @event Hooks#modifyColumnHeaderValue
     * @param {string} value A column header value.
     * @param {number} visualColumnIndex A visual column index.
     * @param {number} [headerLevel=0] Header level index. Accepts positive (`0` to `n`)
     *                                 and negative (`-1` to `-n`) values. For positive values, `0` points to the
     *                                 topmost header. For negative values, `-1` points to the bottom-most
     *                                 header (the header closest to the cells).
     * @returns {string} The column header value to be updated.
     */
    "modifyColumnHeaderValue",
    /**
     * Fired by {@link UndoRedo} plugin before the undo action. Contains information about the action that is being undone.
     * This hook is fired when {@link Options#undo} option is enabled.
     *
     * @event Hooks#beforeUndo
     * @param {object} action The action object. Contains information about the action being undone. The `actionType`
     *                        property of the object specifies the type of the action in a String format. (e.g. `'remove_row'`).
     * @returns {*|boolean} If false is returned the action is canceled.
     */
    "beforeUndo",
    /**
     * Fired by {@link UndoRedo} plugin before changing undo stack.
     *
     * @event Hooks#beforeUndoStackChange
     * @since 8.4.0
     * @param {Array} doneActions Stack of actions which may be undone.
     * @param {string} [source] String that identifies source of action
     *                          ([list of all available sources](@/guides/getting-started/events-and-hooks/events-and-hooks.md#definition-for-source-argument)).
     * @returns {*|boolean} If false is returned the action of changing undo stack is canceled.
     */
    "beforeUndoStackChange",
    /**
     * Fired by {@link UndoRedo} plugin after the undo action. Contains information about the action that is being undone.
     * This hook is fired when {@link Options#undo} option is enabled.
     *
     * @event Hooks#afterUndo
     * @param {object} action The action object. Contains information about the action being undone. The `actionType`
     *                        property of the object specifies the type of the action in a String format. (e.g. `'remove_row'`).
     */
    "afterUndo",
    /**
     * Fired by {@link UndoRedo} plugin after changing undo stack.
     *
     * @event Hooks#afterUndoStackChange
     * @since 8.4.0
     * @param {Array} doneActionsBefore Stack of actions which could be undone before performing new action.
     * @param {Array} doneActionsAfter Stack of actions which can be undone after performing new action.
     */
    "afterUndoStackChange",
    /**
     * Fired by {@link UndoRedo} plugin before the redo action. Contains information about the action that is being redone.
     * This hook is fired when {@link Options#undo} option is enabled.
     *
     * @event Hooks#beforeRedo
     * @param {object} action The action object. Contains information about the action being redone. The `actionType`
     *                        property of the object specifies the type of the action in a String format (e.g. `'remove_row'`).
     * @returns {*|boolean} If false is returned the action is canceled.
     */
    "beforeRedo",
    /**
     * Fired by {@link UndoRedo} plugin before changing redo stack.
     *
     * @event Hooks#beforeRedoStackChange
     * @since 8.4.0
     * @param {Array} undoneActions Stack of actions which may be redone.
     */
    "beforeRedoStackChange",
    /**
     * Fired by {@link UndoRedo} plugin after the redo action. Contains information about the action that is being redone.
     * This hook is fired when {@link Options#undo} option is enabled.
     *
     * @event Hooks#afterRedo
     * @param {object} action The action object. Contains information about the action being redone. The `actionType`
     *                        property of the object specifies the type of the action in a String format (e.g. `'remove_row'`).
     */
    "afterRedo",
    /**
     * Fired by {@link UndoRedo} plugin after changing redo stack.
     *
     * @event Hooks#afterRedoStackChange
     * @since 8.4.0
     * @param {Array} undoneActionsBefore Stack of actions which could be redone before performing new action.
     * @param {Array} undoneActionsAfter Stack of actions which can be redone after performing new action.
     */
    "afterRedoStackChange",
    /**
     * Fired while retrieving the row header width.
     *
     * @event Hooks#modifyRowHeaderWidth
     * @param {number} rowHeaderWidth Row header width.
     */
    "modifyRowHeaderWidth",
    /**
     * Fired when the focus of the selection is being modified (e.g. Moving the focus with the enter/tab keys).
     *
     * @since 14.3.0
     * @event Hooks#modifyTransformFocus
     * @param {CellCoords} delta Cell coords object declaring the delta of the new selection relative to the previous one.
     */
    "modifyTransformFocus",
    /**
     * Fired when the start of the selection is being modified (e.g. Moving the selection with the arrow keys).
     *
     * @event Hooks#modifyTransformStart
     * @param {CellCoords} delta Cell coords object declaring the delta of the new selection relative to the previous one.
     */
    "modifyTransformStart",
    /**
     * Fired when the end of the selection is being modified (e.g. Moving the selection with the arrow keys).
     *
     * @event Hooks#modifyTransformEnd
     * @param {CellCoords} delta Cell coords object declaring the delta of the new selection relative to the previous one.
     */
    "modifyTransformEnd",
    /**
     * Fired after the focus of the selection is being modified (e.g. Moving the focus with the enter/tab keys).
     *
     * @since 14.3.0
     * @event Hooks#afterModifyTransformFocus
     * @param {CellCoords} coords Coords of the freshly focused cell.
     * @param {number} rowTransformDir `-1` if trying to focus a cell with a negative row index. `0` otherwise.
     * @param {number} colTransformDir `-1` if trying to focus a cell with a negative column index. `0` otherwise.
     */
    "afterModifyTransformFocus",
    /**
     * Fired after the start of the selection is being modified (e.g. Moving the selection with the arrow keys).
     *
     * @event Hooks#afterModifyTransformStart
     * @param {CellCoords} coords Coords of the freshly selected cell.
     * @param {number} rowTransformDir `-1` if trying to select a cell with a negative row index. `0` otherwise.
     * @param {number} colTransformDir `-1` if trying to select a cell with a negative column index. `0` otherwise.
     */
    "afterModifyTransformStart",
    /**
     * Fired after the end of the selection is being modified (e.g. Moving the selection with the arrow keys).
     *
     * @event Hooks#afterModifyTransformEnd
     * @param {CellCoords} coords Visual coords of the freshly selected cell.
     * @param {number} rowTransformDir `-1` if trying to select a cell with a negative row index. `0` otherwise.
     * @param {number} colTransformDir `-1` if trying to select a cell with a negative column index. `0` otherwise.
     */
    "afterModifyTransformEnd",
    /**
     * Fired inside the `viewportRowCalculatorOverride` method. Allows modifying the row calculator parameters.
     *
     * @event Hooks#afterViewportRowCalculatorOverride
     * @param {object} calc The row calculator.
     */
    "afterViewportRowCalculatorOverride",
    /**
     * Fired inside the `viewportColumnCalculatorOverride` method. Allows modifying the row calculator parameters.
     *
     * @event Hooks#afterViewportColumnCalculatorOverride
     * @param {object} calc The row calculator.
     */
    "afterViewportColumnCalculatorOverride",
    /**
     * Fired after initializing all the plugins.
     * This hook should be added before Handsontable is initialized.
     *
     * @event Hooks#afterPluginsInitialized
     *
     * @example
     * ```js
     * Handsontable.hooks.add('afterPluginsInitialized', myCallback);
     * ```
     */
    "afterPluginsInitialized",
    /**
     * Fired by {@link HiddenRows} plugin before marking the rows as hidden. Fired only if the {@link Options#hiddenRows} option is enabled.
     * Returning `false` in the callback will prevent the hiding action from completing.
     *
     * @event Hooks#beforeHideRows
     * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical row indexes.
     * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical row indexes.
     * @param {boolean} actionPossible `true`, if provided row indexes are valid, `false` otherwise.
     * @returns {undefined|boolean} If the callback returns `false`, the hiding action will not be completed.
     */
    "beforeHideRows",
    /**
     * Fired by {@link HiddenRows} plugin after marking the rows as hidden. Fired only if the {@link Options#hiddenRows} option is enabled.
     *
     * @event Hooks#afterHideRows
     * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical row indexes.
     * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical row indexes.
     * @param {boolean} actionPossible `true`, if provided row indexes are valid, `false` otherwise.
     * @param {boolean} stateChanged `true`, if the action affected any non-hidden rows, `false` otherwise.
     */
    "afterHideRows",
    /**
     * Fired by {@link HiddenRows} plugin before marking the rows as not hidden. Fired only if the {@link Options#hiddenRows} option is enabled.
     * Returning `false` in the callback will prevent the row revealing action from completing.
     *
     * @event Hooks#beforeUnhideRows
     * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical row indexes.
     * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical row indexes.
     * @param {boolean} actionPossible `true`, if provided row indexes are valid, `false` otherwise.
     * @returns {undefined|boolean} If the callback returns `false`, the revealing action will not be completed.
     */
    "beforeUnhideRows",
    /**
     * Fired by {@link HiddenRows} plugin after marking the rows as not hidden. Fired only if the {@link Options#hiddenRows} option is enabled.
     *
     * @event Hooks#afterUnhideRows
     * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical row indexes.
     * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical row indexes.
     * @param {boolean} actionPossible `true`, if provided row indexes are valid, `false` otherwise.
     * @param {boolean} stateChanged `true`, if the action affected any hidden rows, `false` otherwise.
     */
    "afterUnhideRows",
    /**
     * Fired by {@link HiddenColumns} plugin before marking the columns as hidden. Fired only if the {@link Options#hiddenColumns} option is enabled.
     * Returning `false` in the callback will prevent the hiding action from completing.
     *
     * @event Hooks#beforeHideColumns
     * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical column indexes.
     * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical column indexes.
     * @param {boolean} actionPossible `true`, if the provided column indexes are valid, `false` otherwise.
     * @returns {undefined|boolean} If the callback returns `false`, the hiding action will not be completed.
     */
    "beforeHideColumns",
    /**
     * Fired by {@link HiddenColumns} plugin after marking the columns as hidden. Fired only if the {@link Options#hiddenColumns} option is enabled.
     *
     * @event Hooks#afterHideColumns
     * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical column indexes.
     * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical column indexes.
     * @param {boolean} actionPossible `true`, if the provided column indexes are valid, `false` otherwise.
     * @param {boolean} stateChanged `true`, if the action affected any non-hidden columns, `false` otherwise.
     */
    "afterHideColumns",
    /**
     * Fired by {@link HiddenColumns} plugin before marking the columns as not hidden. Fired only if the {@link Options#hiddenColumns} option is enabled.
     * Returning `false` in the callback will prevent the column revealing action from completing.
     *
     * @event Hooks#beforeUnhideColumns
     * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical column indexes.
     * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical column indexes.
     * @param {boolean} actionPossible `true`, if the provided column indexes are valid, `false` otherwise.
     * @returns {undefined|boolean} If the callback returns `false`, the hiding action will not be completed.
     */
    "beforeUnhideColumns",
    /**
     * Fired by {@link HiddenColumns} plugin after marking the columns as not hidden. Fired only if the {@link Options#hiddenColumns} option is enabled.
     *
     * @event Hooks#afterUnhideColumns
     * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical column indexes.
     * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical column indexes.
     * @param {boolean} actionPossible `true`, if the provided column indexes are valid, `false` otherwise.
     * @param {boolean} stateChanged `true`, if the action affected any hidden columns, `false` otherwise.
     */
    "afterUnhideColumns",
    /**
     * Fired by {@link TrimRows} plugin before trimming rows. This hook is fired when {@link Options#trimRows} option is enabled.
     *
     * @event Hooks#beforeTrimRow
     * @param {Array} currentTrimConfig Current trim configuration - a list of trimmed physical row indexes.
     * @param {Array} destinationTrimConfig Destination trim configuration - a list of trimmed physical row indexes.
     * @param {boolean} actionPossible `true`, if all of the row indexes are withing the bounds of the table, `false` otherwise.
     * @returns {undefined|boolean} If the callback returns `false`, the trimming action will not be completed.
     */
    "beforeTrimRow",
    /**
     * Fired by {@link TrimRows} plugin after trimming rows. This hook is fired when {@link Options#trimRows} option is enabled.
     *
     * @event Hooks#afterTrimRow
     * @param {Array} currentTrimConfig Current trim configuration - a list of trimmed physical row indexes.
     * @param {Array} destinationTrimConfig Destination trim configuration - a list of trimmed physical row indexes.
     * @param {boolean} actionPossible `true`, if all of the row indexes are withing the bounds of the table, `false` otherwise.
     * @param {boolean} stateChanged `true`, if the action affected any non-trimmed rows, `false` otherwise.
     * @returns {undefined|boolean} If the callback returns `false`, the trimming action will not be completed.
     */
    "afterTrimRow",
    /**
     * Fired by {@link TrimRows} plugin before untrimming rows. This hook is fired when {@link Options#trimRows} option is enabled.
     *
     * @event Hooks#beforeUntrimRow
     * @param {Array} currentTrimConfig Current trim configuration - a list of trimmed physical row indexes.
     * @param {Array} destinationTrimConfig Destination trim configuration - a list of trimmed physical row indexes.
     * @param {boolean} actionPossible `true`, if all of the row indexes are withing the bounds of the table, `false` otherwise.
     * @returns {undefined|boolean} If the callback returns `false`, the untrimming action will not be completed.
     */
    "beforeUntrimRow",
    /**
     * Fired by {@link TrimRows} plugin after untrimming rows. This hook is fired when {@link Options#trimRows} option is enabled.
     *
     * @event Hooks#afterUntrimRow
     * @param {Array} currentTrimConfig Current trim configuration - a list of trimmed physical row indexes.
     * @param {Array} destinationTrimConfig Destination trim configuration - a list of trimmed physical row indexes.
     * @param {boolean} actionPossible `true`, if all of the row indexes are withing the bounds of the table, `false` otherwise.
     * @param {boolean} stateChanged `true`, if the action affected any trimmed rows, `false` otherwise.
     * @returns {undefined|boolean} If the callback returns `false`, the untrimming action will not be completed.
     */
    "afterUntrimRow",
    /**
     * Fired by {@link DropdownMenu} plugin before opening the dropdown menu. This hook is fired when {@link Options#dropdownMenu}
     * option is enabled.
     *
     * @event Hooks#beforeDropdownMenuShow
     * @param {DropdownMenu} dropdownMenu The `DropdownMenu` instance.
     */
    "beforeDropdownMenuShow",
    /**
     * Fired by {@link DropdownMenu} plugin after opening the Dropdown Menu. This hook is fired when {@link Options#dropdownMenu}
     * option is enabled.
     *
     * @event Hooks#afterDropdownMenuShow
     * @param {DropdownMenu} dropdownMenu The `DropdownMenu` instance.
     */
    "afterDropdownMenuShow",
    /**
     * Fired by {@link DropdownMenu} plugin after hiding the Dropdown Menu. This hook is fired when {@link Options#dropdownMenu}
     * option is enabled.
     *
     * @event Hooks#afterDropdownMenuHide
     * @param {DropdownMenu} instance The `DropdownMenu` instance.
     */
    "afterDropdownMenuHide",
    /**
     * Fired by {@link NestedRows} plugin before adding a children to the `NestedRows` structure. This hook is fired when
     * {@link Options#nestedRows} option is enabled.
     *
     * @event Hooks#beforeAddChild
     * @param {object} parent The parent object.
     * @param {object|undefined} element The element added as a child. If `undefined`, a blank child was added.
     * @param {number|undefined} index The index within the parent where the new child was added. If `undefined`, the element was added as the last child.
     */
    "beforeAddChild",
    /**
     * Fired by {@link NestedRows} plugin after adding a children to the `NestedRows` structure. This hook is fired when
     * {@link Options#nestedRows} option is enabled.
     *
     * @event Hooks#afterAddChild
     * @param {object} parent The parent object.
     * @param {object|undefined} element The element added as a child. If `undefined`, a blank child was added.
     * @param {number|undefined} index The index within the parent where the new child was added. If `undefined`, the element was added as the last child.
     */
    "afterAddChild",
    /**
     * Fired by {@link NestedRows} plugin before detaching a child from its parent. This hook is fired when
     * {@link Options#nestedRows} option is enabled.
     *
     * @event Hooks#beforeDetachChild
     * @param {object} parent An object representing the parent from which the element is to be detached.
     * @param {object} element The detached element.
     */
    "beforeDetachChild",
    /**
     * Fired by {@link NestedRows} plugin after detaching a child from its parent. This hook is fired when
     * {@link Options#nestedRows} option is enabled.
     *
     * @event Hooks#afterDetachChild
     * @param {object} parent An object representing the parent from which the element was detached.
     * @param {object} element The detached element.
     * @param {number} finalElementPosition The final row index of the detached element.
     */
    "afterDetachChild",
    /**
     * Fired before the editor is opened and rendered.
     *
     * @since 14.2.0
     * @event Hooks#beforeBeginEditing
     * @param {number} row Visual row index of the edited cell.
     * @param {number} column Visual column index of the edited cell.
     * @param {*} initialValue The initial editor value.
     * @param {MouseEvent | KeyboardEvent} event The event which was responsible for opening the editor.
     * @param {boolean} fullEditMode `true` if the editor is opened in full edit mode, `false` otherwise.
     * Editor opened in full edit mode does not close after pressing Arrow keys.
     * @returns {boolean | undefined} If the callback returns `false,` the editor won't be opened after
     * the mouse double click or after pressing the Enter key. Returning `undefined` (or other value
     * than boolean) will result in default behavior, which disallows opening an editor for non-contiguous
     * selection (while pressing Ctrl/Cmd) and for multiple selected cells (while pressing SHIFT).
     * Returning `true` removes those restrictions.
     */
    "beforeBeginEditing",
    /**
     * Fired after the editor is opened and rendered.
     *
     * @event Hooks#afterBeginEditing
     * @param {number} row Visual row index of the edited cell.
     * @param {number} column Visual column index of the edited cell.
     */
    "afterBeginEditing",
    /**
     * Fired by {@link MergeCells} plugin before cell merging. This hook is fired when {@link Options#mergeCells}
     * option is enabled.
     *
     * @event Hooks#beforeMergeCells
     * @param {CellRange} cellRange Selection cell range.
     * @param {boolean} [auto=false] `true` if called automatically by the plugin.
     */
    "beforeMergeCells",
    /**
     * Fired by {@link MergeCells} plugin after cell merging. This hook is fired when {@link Options#mergeCells}
     * option is enabled.
     *
     * @event Hooks#afterMergeCells
     * @param {CellRange} cellRange Selection cell range.
     * @param {object} mergeParent The parent collection of the provided cell range.
     * @param {boolean} [auto=false] `true` if called automatically by the plugin.
     */
    "afterMergeCells",
    /**
     * Fired by {@link MergeCells} plugin before unmerging the cells. This hook is fired when {@link Options#mergeCells}
     * option is enabled.
     *
     * @event Hooks#beforeUnmergeCells
     * @param {CellRange} cellRange Selection cell range.
     * @param {boolean} [auto=false] `true` if called automatically by the plugin.
     */
    "beforeUnmergeCells",
    /**
     * Fired by {@link MergeCells} plugin after unmerging the cells. This hook is fired when {@link Options#mergeCells}
     * option is enabled.
     *
     * @event Hooks#afterUnmergeCells
     * @param {CellRange} cellRange Selection cell range.
     * @param {boolean} [auto=false] `true` if called automatically by the plugin.
     */
    "afterUnmergeCells",
    /**
     * Fired after the table was switched into listening mode. This allows Handsontable to capture keyboard events and
     * respond in the right way.
     *
     * @event Hooks#afterListen
     */
    "afterListen",
    /**
     * Fired after the table was switched off from the listening mode. This makes the Handsontable inert for any
     * keyboard events.
     *
     * @event Hooks#afterUnlisten
     */
    "afterUnlisten",
    /**
     * Fired after the window was resized or the size of the Handsontable root element was changed.
     *
     * @event Hooks#afterRefreshDimensions
     * @param {{ width: number, height: number }} previousDimensions Previous dimensions of the container.
     * @param {{ width: number, height: number }} currentDimensions Current dimensions of the container.
     * @param {boolean} stateChanged `true`, if the container was re-render, `false` otherwise.
     */
    "afterRefreshDimensions",
    /**
     * Cancellable hook, called after resizing a window or after detecting size change of the
     * Handsontable root element, but before redrawing a table.
     *
     * @event Hooks#beforeRefreshDimensions
     * @param {{ width: number, height: number }} previousDimensions Previous dimensions of the container.
     * @param {{ width: number, height: number }} currentDimensions Current dimensions of the container.
     * @param {boolean} actionPossible `true`, if current and previous dimensions are different, `false` otherwise.
     * @returns {undefined|boolean} If the callback returns `false`, the refresh action will not be completed.
     */
    "beforeRefreshDimensions",
    /**
     * Fired by {@link CollapsibleColumns} plugin before columns collapse. This hook is fired when {@link Options#collapsibleColumns} option is enabled.
     *
     * @event Hooks#beforeColumnCollapse
     * @since 8.0.0
     * @param {Array} currentCollapsedColumns Current collapsible configuration - a list of collapsible physical column indexes.
     * @param {Array} destinationCollapsedColumns Destination collapsible configuration - a list of collapsible physical column indexes.
     * @param {boolean} collapsePossible `true`, if all of the column indexes are withing the bounds of the collapsed sections, `false` otherwise.
     * @returns {undefined|boolean} If the callback returns `false`, the collapsing action will not be completed.
     */
    "beforeColumnCollapse",
    /**
     * Fired by {@link CollapsibleColumns} plugin before columns collapse. This hook is fired when {@link Options#collapsibleColumns} option is enabled.
     *
     * @event Hooks#afterColumnCollapse
     * @since 8.0.0
     * @param {Array} currentCollapsedColumns Current collapsible configuration - a list of collapsible physical column indexes.
     * @param {Array} destinationCollapsedColumns Destination collapsible configuration - a list of collapsible physical column indexes.
     * @param {boolean} collapsePossible `true`, if all of the column indexes are withing the bounds of the collapsed sections, `false` otherwise.
     * @param {boolean} successfullyCollapsed `true`, if the action affected any non-collapsible column, `false` otherwise.
     */
    "afterColumnCollapse",
    /**
     * Fired by {@link CollapsibleColumns} plugin before columns expand. This hook is fired when {@link Options#collapsibleColumns} option is enabled.
     *
     * @event Hooks#beforeColumnExpand
     * @since 8.0.0
     * @param {Array} currentCollapsedColumns Current collapsible configuration - a list of collapsible physical column indexes.
     * @param {Array} destinationCollapsedColumns Destination collapsible configuration - a list of collapsible physical column indexes.
     * @param {boolean} expandPossible `true`, if all of the column indexes are withing the bounds of the collapsed sections, `false` otherwise.
     * @returns {undefined|boolean} If the callback returns `false`, the expanding action will not be completed.
     */
    "beforeColumnExpand",
    /**
     * Fired by {@link CollapsibleColumns} plugin before columns expand. This hook is fired when {@link Options#collapsibleColumns} option is enabled.
     *
     * @event Hooks#afterColumnExpand
     * @since 8.0.0
     * @param {Array} currentCollapsedColumns Current collapsible configuration - a list of collapsible physical column indexes.
     * @param {Array} destinationCollapsedColumns Destination collapsible configuration - a list of collapsible physical column indexes.
     * @param {boolean} expandPossible `true`, if all of the column indexes are withing the bounds of the collapsed sections, `false` otherwise.
     * @param {boolean} successfullyExpanded `true`, if the action affected any non-collapsible column, `false` otherwise.
     */
    "afterColumnExpand",
    /**
     * Fired by {@link AutoColumnSize} plugin within SampleGenerator utility.
     *
     * @event Hooks#modifyAutoColumnSizeSeed
     * @since 8.4.0
     * @param {string|undefined} seed Seed ID, unique name to categorize samples.
     * @param {object} cellProperties Object containing the cell properties.
     * @param {*} cellValue Value of the cell.
     */
    "modifyAutoColumnSizeSeed"
  ], WCe = Kt`The plugin hook "[hookName]" was removed in Handsontable [removedInVersion].\x20
  Please consult release notes https://github.com/handsontable/handsontable/releases/tag/[removedInVersion] to\x20
  learn about the migration path.`, eT = /* @__PURE__ */ new Map([["modifyRow", "8.0.0"], ["modifyCol", "8.0.0"], ["unmodifyRow", "8.0.0"], ["unmodifyCol", "8.0.0"], ["skipLengthCache", "8.0.0"], ["hiddenColumn", "8.0.0"], ["hiddenRow", "8.0.0"]]), tT = /* @__PURE__ */ new Map([[]]), u0 = /* @__PURE__ */ new WeakMap();
  class Ie {
    static getSingleton() {
      return zCe();
    }
    /**
     * @type {object}
     */
    /**
     *
     */
    constructor() {
      FCe(this, "globalBucket", void 0), this.globalBucket = this.createEmptyBucket();
    }
    /**
     * Returns a new object with empty handlers related to every registered hook name.
     *
     * @returns {object} The empty bucket object.
     *
     * @example
     * ```js
     * Handsontable.hooks.createEmptyBucket();
     * // Results:
     * {
     * ...
     * afterCreateCol: [],
     * afterCreateRow: [],
     * beforeInit: [],
     * ...
     * }
     * ```
     */
    createEmptyBucket() {
      const e = /* @__PURE__ */ Object.create(null);
      return z(Wf, (t) => {
        e[t] = [], this.initOrderMap(e, t);
      }), e;
    }
    /**
     * Get hook bucket based on the context of the object or if argument is `undefined`, get the global hook bucket.
     *
     * @param {object} [context=null] A Handsontable instance.
     * @returns {object} Returns a global or Handsontable instance bucket.
     */
    getBucket() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
      return e ? (e.pluginHookBucket || (e.pluginHookBucket = this.createEmptyBucket()), e.pluginHookBucket) : this.globalBucket;
    }
    /**
     * Adds a listener (globally or locally) to a specified hook name.
     * If the `context` parameter is provided, the hook will be added only to the instance it references.
     * Otherwise, the callback will be used everytime the hook fires on any Handsontable instance.
     * You can provide an array of callback functions as the `callback` argument, this way they will all be fired
     * once the hook is triggered.
     *
     * @see Core#addHook
     * @param {string} key Hook name.
     * @param {Function|Array} callback Callback function or an array of functions.
     * @param {object} [context=null] The context for the hook callback to be added - a Handsontable instance or leave empty.
     * @param {number} [orderIndex] Order index of the callback.
     *                              If > 0, the callback will be added after the others, for example, with an index of 1, the callback will be added before the ones with an index of 2, 3, etc., but after the ones with an index of 0 and lower.
     *                              If < 0, the callback will be added before the others, for example, with an index of -1, the callback will be added after the ones with an index of -2, -3, etc., but before the ones with an index of 0 and higher.
     *                              If 0 or no order index is provided, the callback will be added between the "negative" and "positive" indexes.
     * @returns {Hooks} Instance of Hooks.
     *
     * @example
     * ```js
     * // single callback, added locally
     * Handsontable.hooks.add('beforeInit', myCallback, hotInstance);
     *
     * // single callback, added globally
     * Handsontable.hooks.add('beforeInit', myCallback);
     *
     * // multiple callbacks, added locally
     * Handsontable.hooks.add('beforeInit', [myCallback, anotherCallback], hotInstance);
     *
     * // multiple callbacks, added globally
     * Handsontable.hooks.add('beforeInit', [myCallback, anotherCallback]);
     * ```
     */
    add(e, t) {
      let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null, r = arguments.length > 3 ? arguments[3] : void 0;
      if (Array.isArray(t))
        z(t, (s) => this.add(e, s, i));
      else {
        eT.has(e) && Yt(lD(WCe, {
          hookName: e,
          removedInVersion: eT.get(e)
        })), tT.has(e) && Yt(tT.get(e));
        const s = this.getBucket(i);
        if (typeof s[e] > "u" && (this.register(e), s[e] = [], this.initOrderMap(s, e)), t.skip = !1, s[e].indexOf(t) === -1) {
          let o = !1;
          t.initialHook && z(s[e], (a, l) => {
            if (a.initialHook)
              return s[e][l] = t, o = !0, !1;
          }), o || s[e].push(t);
        }
        this.setCallbackOrderIndex(s, e, t, r), this.orderBucketByOrderIndex(s, e);
      }
      return this;
    }
    /**
     * Adds a listener to a specified hook. After the hook runs this listener will be automatically removed from the bucket.
     *
     * @see Core#addHookOnce
     * @param {string} key Hook/Event name.
     * @param {Function|Array} callback Callback function.
     * @param {object} [context=null] A Handsontable instance.
     * @param {number} [orderIndex] Order index of the callback.
     *                              If > 0, the callback will be added after the others, for example, with an index of 1, the callback will be added before the ones with an index of 2, 3, etc., but after the ones with an index of 0 and lower.
     *                              If < 0, the callback will be added before the others, for example, with an index of -1, the callback will be added after the ones with an index of -2, -3, etc., but before the ones with an index of 0 and higher.
     *                              If 0 or no order index is provided, the callback will be added between the "negative" and "positive" indexes.
     *
     * @example
     * ```js
     * Handsontable.hooks.once('beforeInit', myCallback, hotInstance);
     * ```
     */
    once(e, t) {
      let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null, r = arguments.length > 3 ? arguments[3] : void 0;
      Array.isArray(t) ? z(t, (s) => this.once(e, s, i)) : (t.runOnce = !0, this.add(e, t, i, r));
    }
    /**
     * Removes a listener from a hook with a given name. If the `context` argument is provided, it removes a listener from a local hook assigned to the given Handsontable instance.
     *
     * @see Core#removeHook
     * @param {string} key Hook/Event name.
     * @param {Function} callback Callback function (needs the be the function that was previously added to the hook).
     * @param {object} [context=null] Handsontable instance.
     * @returns {boolean} Returns `true` if hook was removed, `false` otherwise.
     *
     * @example
     * ```js
     * Handsontable.hooks.remove('beforeInit', myCallback);
     * ```
     */
    remove(e, t) {
      let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      const r = this.getBucket(i);
      return typeof r[e] < "u" && r[e].indexOf(t) >= 0 ? (t.skip = !0, !0) : !1;
    }
    /**
     * Checks whether there are any registered listeners for the provided hook name.
     * If the `context` parameter is provided, it only checks for listeners assigned to the given Handsontable instance.
     *
     * @param {string} key Hook name.
     * @param {object} [context=null] A Handsontable instance.
     * @returns {boolean} `true` for success, `false` otherwise.
     */
    has(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      const i = this.getBucket(t);
      return !!(i[e] !== void 0 && i[e].length);
    }
    /**
     * Runs all local and global callbacks assigned to the hook identified by the `key` parameter.
     * It returns either a return value from the last called callback or the first parameter (`p1`) passed to the `run` function.
     *
     * @see Core#runHooks
     * @param {object} context Handsontable instance.
     * @param {string} key Hook/Event name.
     * @param {*} [p1] Parameter to be passed as an argument to the callback function.
     * @param {*} [p2] Parameter to be passed as an argument to the callback function.
     * @param {*} [p3] Parameter to be passed as an argument to the callback function.
     * @param {*} [p4] Parameter to be passed as an argument to the callback function.
     * @param {*} [p5] Parameter to be passed as an argument to the callback function.
     * @param {*} [p6] Parameter to be passed as an argument to the callback function.
     * @returns {*} Either a return value from the last called callback or `p1`.
     *
     * @example
     * ```js
     * Handsontable.hooks.run(hot, 'beforeInit');
     * ```
     */
    run(e, t, i, r, s, o, a, l) {
      {
        const c = this.globalBucket[t], u = c ? c.length : 0;
        let h = 0;
        if (u)
          for (; h < u; ) {
            if (!c[h] || c[h].skip) {
              h += 1;
              continue;
            }
            const d = P_(c[h], e, i, r, s, o, a, l);
            d !== void 0 && (i = d), c[h] && c[h].runOnce && this.remove(t, c[h]), h += 1;
          }
      }
      {
        const c = this.getBucket(e)[t], u = c ? c.length : 0;
        let h = 0;
        if (u)
          for (; h < u; ) {
            if (!c[h] || c[h].skip) {
              h += 1;
              continue;
            }
            const d = P_(c[h], e, i, r, s, o, a, l);
            d !== void 0 && (i = d), c[h] && c[h].runOnce && this.remove(t, c[h], e), h += 1;
          }
      }
      return i;
    }
    /**
     * Destroy all listeners connected to the context. If no context is provided, the global listeners will be destroyed.
     *
     * @param {object} [context=null] A Handsontable instance.
     * @example
     * ```js
     * // destroy the global listeners
     * Handsontable.hooks.destroy();
     *
     * // destroy the local listeners
     * Handsontable.hooks.destroy(hotInstance);
     * ```
     */
    destroy() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
      lt(this.getBucket(e), (t, i, r) => r[i].length = 0);
    }
    /**
     * Registers a hook name (adds it to the list of the known hook names). Used by plugins.
     * It is not necessary to call register, but if you use it, your plugin hook will be used returned by
     * the `getRegistered` method. (which itself is used in the [demo](@/guides/getting-started/events-and-hooks/events-and-hooks.md)).
     *
     * @param {string} key The hook name.
     *
     * @example
     * ```js
     * Handsontable.hooks.register('myHook');
     * ```
     */
    register(e) {
      this.isRegistered(e) || Wf.push(e);
    }
    /**
     * Deregisters a hook name (removes it from the list of known hook names).
     *
     * @param {string} key The hook name.
     *
     * @example
     * ```js
     * Handsontable.hooks.deregister('myHook');
     * ```
     */
    deregister(e) {
      this.isRegistered(e) && Wf.splice(Wf.indexOf(e), 1);
    }
    /**
     * Returns a boolean value depending on if a hook by such name has been removed or deprecated.
     *
     * @param {string} hookName The hook name to check.
     * @returns {boolean} Returns `true` if the provided hook name was marked as deprecated or
     * removed from API, `false` otherwise.
     * @example
     * ```js
     * Handsontable.hooks.isDeprecated('skipLengthCache');
     *
     * // Results:
     * true
     * ```
     */
    isDeprecated(e) {
      return tT.has(e) || eT.has(e);
    }
    /**
     * Returns a boolean depending on if a hook by such name has been registered.
     *
     * @param {string} hookName The hook name to check.
     * @returns {boolean} `true` for success, `false` otherwise.
     * @example
     * ```js
     * Handsontable.hooks.isRegistered('beforeInit');
     *
     * // Results:
     * true
     * ```
     */
    isRegistered(e) {
      return Wf.indexOf(e) >= 0;
    }
    /**
     * Returns an array of registered hooks.
     *
     * @returns {Array} An array of registered hooks.
     *
     * @example
     * ```js
     * Handsontable.hooks.getRegistered();
     *
     * // Results:
     * [
     * ...
     *   'beforeInit',
     *   'beforeRender',
     *   'beforeSetRangeEnd',
     *   'beforeDrawBorders',
     *   'beforeChange',
     * ...
     * ]
     * ```
     */
    getRegistered() {
      return Wf;
    }
    /**
     * Sets the order index of the callback in the bucket object.
     *
     * @private
     * @param {object} bucket The bucket object.
     * @param {string} key Hook name.
     * @param {Function} callback Callback function.
     * @param {number|undefined} orderIndex Order index of the callback.
     */
    setCallbackOrderIndex(e, t, i, r) {
      const s = Number.isInteger(r) ? r : 0, o = this.getCallbackOrderMap(e, t);
      o.set(s, [...o.get(s) || [], i]);
    }
    /**
     * Reorders the callbacks in the bucket object by their order index.
     *
     * @private
     * @param {objcet} bucket The bucket object.
     * @param {string} key Hook name.
     */
    orderBucketByOrderIndex(e, t) {
      const i = this.getCallbackOrderMap(e, t);
      i === void 0 || i.size === 0 || i.size === 1 && i.has(0) || (e[t] = [...i].sort((r, s) => r[0] - s[0]).flatMap((r) => {
        let [, s] = r;
        return s;
      }));
    }
    /**
     * Extends the bucket object with the order property.
     *
     * @private
     * @param {object} bucket The bucket object.
     * @param {string} hook The hook name.
     */
    initOrderMap(e, t) {
      u0.has(e) || u0.set(e, []), u0.get(e)[t] = /* @__PURE__ */ new Map();
    }
    /**
     * Returns the order map for the provided hook.
     *
     * @private
     * @param {object} bucket The bucket object.
     * @param {string} hook The hook name.
     * @returns {Map<number, Array<Function>>} Returns the order map for the provided hook.
     */
    getCallbackOrderMap(e, t) {
      return u0.get(e)[t];
    }
  }
  const jCe = new Ie();
  function zCe() {
    return jCe;
  }
  const nT = /* @__PURE__ */ new Map();
  function ha() {
    let n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "common";
    nT.has(n) || nT.set(n, /* @__PURE__ */ new Map());
    const e = nT.get(n);
    function t(a, l) {
      e.set(a, l);
    }
    function i(a) {
      return e.get(a);
    }
    function r(a) {
      return e.has(a);
    }
    function s() {
      return [...e.keys()];
    }
    function o() {
      return [...e.values()];
    }
    return {
      register: t,
      getItem: i,
      hasItem: r,
      getNames: s,
      getValues: o
    };
  }
  const VP = /* @__PURE__ */ new WeakMap(), {
    register: UCe,
    getItem: S9,
    hasItem: _9,
    getNames: GCe,
    getValues: IUe
  } = ha("editors");
  function YCe(n) {
    const e = {}, t = n;
    this.getConstructor = function() {
      return n;
    }, this.getInstance = function(i) {
      return i.guid in e || (e[i.guid] = new t(i)), e[i.guid];
    }, Ie.getSingleton().add("afterDestroy", function() {
      e[this.guid] = null;
    });
  }
  function R9(n, e) {
    let t;
    if (typeof n == "function")
      VP.get(n) || Gr(null, n), t = VP.get(n);
    else if (typeof n == "string")
      t = S9(n);
    else
      throw Error('Only strings and functions can be passed as "editor" parameter');
    if (!t)
      throw Error(`No editor registered under name "${n}"`);
    return t.getInstance(e);
  }
  function I_(n) {
    if (typeof n == "function")
      return n;
    if (!_9(n))
      throw Error(`No registered editor found under "${n}" name`);
    return S9(n).getConstructor();
  }
  function Gr(n, e) {
    n && typeof n != "string" && (e = n, n = e.EDITOR_TYPE);
    const t = new YCe(e);
    typeof n == "string" && UCe(n, t), VP.set(e, t);
  }
  function KCe(n, e, t) {
    return (e = qCe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function qCe(n) {
    var e = XCe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function XCe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  let CS = 0;
  class lo {
    /**
     * @param {object} [context=null] An object to which event listeners will be stored.
     * @private
     */
    constructor() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
      KCe(this, "context", void 0), this.context = e || this, this.context.eventListeners || (this.context.eventListeners = []);
    }
    /**
     * Register specified listener (`eventName`) to the element.
     *
     * @param {Element} element Target element.
     * @param {string} eventName Event name.
     * @param {Function} callback Function which will be called after event occur.
     * @param {AddEventListenerOptions|boolean} [options] Listener options if object or useCapture if boolean.
     * @returns {Function} Returns function which you can easily call to remove that event.
     */
    addEventListener(e, t, i) {
      let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
      function s(o) {
        i.call(this, ZCe(o));
      }
      return this.context.eventListeners.push({
        element: e,
        event: t,
        callback: i,
        callbackProxy: s,
        options: r,
        eventManager: this
      }), e.addEventListener(t, s, r), CS += 1, () => {
        this.removeEventListener(e, t, i);
      };
    }
    /**
     * Remove the event listener previously registered.
     *
     * @param {Element} element Target element.
     * @param {string} eventName Event name.
     * @param {Function} callback Function to remove from the event target. It must be the same as during registration listener.
     * @param {boolean} [onlyOwnEvents] Whether whould remove only events registered using this instance of EventManager.
     */
    removeEventListener(e, t, i) {
      let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1, s = this.context.eventListeners.length, o;
      for (; s; )
        if (s -= 1, o = this.context.eventListeners[s], o.event === t && o.element === e) {
          if (i && i !== o.callback || r && o.eventManager !== this)
            continue;
          this.context.eventListeners.splice(s, 1), o.element.removeEventListener(o.event, o.callbackProxy, o.options), CS -= 1;
        }
    }
    /**
     * Clear all previously registered events.
     *
     * @private
     * @since 0.15.0-beta3
     * @param {boolean} [onlyOwnEvents] Whether whould remove only events registered using this instance of EventManager.
     */
    clearEvents() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
      if (!this.context)
        return;
      let t = this.context.eventListeners.length;
      for (; t; ) {
        t -= 1;
        const i = this.context.eventListeners[t];
        e && i.eventManager !== this || (this.context.eventListeners.splice(t, 1), i.element.removeEventListener(i.event, i.callbackProxy, i.options), CS -= 1);
      }
    }
    /**
     * Clear all previously registered events.
     */
    clear() {
      this.clearEvents();
    }
    /**
     * Destroy instance of EventManager, clearing all events of the context.
     */
    destroy() {
      this.clearEvents(), this.context = null;
    }
    /**
     * Destroy instance of EventManager, clearing only the own events.
     */
    destroyWithOwnEventsOnly() {
      this.clearEvents(!0), this.context = null;
    }
    /**
     * Trigger event at the specified target element.
     *
     * @param {Element} element Target element.
     * @param {string} eventName Event name.
     */
    fireEvent(e, t) {
      let i = e.document, r = e;
      i || (i = e.ownerDocument ? e.ownerDocument : e, r = i.defaultView);
      const s = {
        bubbles: !0,
        cancelable: t !== "mousemove",
        view: r,
        detail: 0,
        screenX: 0,
        screenY: 0,
        clientX: 1,
        clientY: 1,
        ctrlKey: !1,
        altKey: !1,
        shiftKey: !1,
        metaKey: !1,
        button: 0,
        relatedTarget: void 0
      };
      let o;
      i.createEvent ? (o = i.createEvent("MouseEvents"), o.initMouseEvent(t, s.bubbles, s.cancelable, s.view, s.detail, s.screenX, s.screenY, s.clientX, s.clientY, s.ctrlKey, s.altKey, s.shiftKey, s.metaKey, s.button, i.body.parentNode)) : o = i.createEventObject(), e.dispatchEvent ? e.dispatchEvent(o) : e.fireEvent(`on${t}`, o);
    }
  }
  function ZCe(n) {
    const e = n.stopImmediatePropagation;
    return n.stopImmediatePropagation = function() {
      e.apply(this), bo(this);
    }, n;
  }
  function QCe() {
    return CS;
  }
  function JCe(n, e) {
    eSe(n, e), e.add(n);
  }
  function eSe(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function Sh(n, e, t) {
    return (e = tSe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function tSe(n) {
    var e = nSe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function nSe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function cV(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var iT = /* @__PURE__ */ new WeakSet();
  class WP {
    /**
     * @param {Core} hotInstance The Handsontable instance.
     * @param {TableMeta} tableMeta The table meta instance.
     * @param {Selection} selection The selection instance.
     */
    constructor(e, t, i) {
      JCe(this, iT), Sh(this, "hot", void 0), Sh(this, "tableMeta", void 0), Sh(this, "selection", void 0), Sh(this, "eventManager", void 0), Sh(this, "destroyed", !1), Sh(this, "activeEditor", void 0), Sh(this, "cellProperties", void 0), this.hot = e, this.tableMeta = t, this.selection = i, this.eventManager = new lo(e), this.hot.addHook("afterDocumentKeyDown", (r) => cV(iT, this, iSe).call(this, r)), this.eventManager.addEventListener(this.hot.rootDocument.documentElement, "compositionstart", (r) => {
        !this.destroyed && this.hot.isListening() && this.openEditor("", r);
      }), this.hot.view._wt.update("onCellDblClick", (r, s, o) => cV(iT, this, rSe).call(this, r, s, o));
    }
    /**
     * Get active editor.
     *
     * @returns {BaseEditor}
     */
    getActiveEditor() {
      return this.activeEditor;
    }
    /**
     * Prepare text input to be displayed at given grid cell.
     */
    prepareEditor() {
      var e;
      if (this.activeEditor && this.activeEditor.isWaiting()) {
        this.closeEditor(!1, !1, (c) => {
          c && this.prepareEditor();
        });
        return;
      }
      const t = (e = this.hot.getSelectedRangeLast()) === null || e === void 0 ? void 0 : e.highlight;
      if (!t || t.isHeader())
        return;
      const {
        row: i,
        col: r
      } = t, s = this.hot.runHooks("modifyGetCellCoords", i, r);
      let o = i, a = r;
      if (Array.isArray(s) && ([o, a] = s), this.cellProperties = this.hot.getCellMeta(o, a), !this.isCellEditable()) {
        this.clearActiveEditor();
        return;
      }
      const l = this.hot.getCell(i, r, !0);
      if (l) {
        const c = this.hot.getCellEditor(this.cellProperties), u = this.hot.colToProp(a), h = this.hot.getSourceDataAtCell(this.hot.toPhysicalRow(o), a);
        this.activeEditor = R9(c, this.hot), this.activeEditor.prepare(i, r, u, l, h, this.cellProperties);
      }
    }
    /**
     * Check is editor is opened/showed.
     *
     * @returns {boolean}
     */
    isEditorOpened() {
      return this.activeEditor && this.activeEditor.isOpened();
    }
    /**
     * Open editor with initial value.
     *
     * @param {null|string} newInitialValue New value from which editor will start if handled property it's not the `null`.
     * @param {Event} event The event object.
     * @param {boolean} [enableFullEditMode=false] When true, an editor works in full editing mode. Mode disallows closing an editor
     *                                             when arrow keys are pressed.
     */
    openEditor(e, t) {
      let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
      if (!this.isCellEditable()) {
        this.clearActiveEditor();
        return;
      }
      const r = this.hot.getSelectedRangeLast();
      let s = this.hot.runHooks("beforeBeginEditing", r.highlight.row, r.highlight.col, e, t, i);
      if (t instanceof MouseEvent && typeof s != "boolean" && (s = this.hot.selection.getLayerLevel() === 0 && r.isSingle()), s === !1) {
        this.clearActiveEditor();
        return;
      }
      this.activeEditor || (this.hot.scrollToFocusedCell(), this.prepareEditor()), this.activeEditor && (i && this.activeEditor.enableFullEditMode(), this.activeEditor.beginEditing(e, t));
    }
    /**
     * Close editor, finish editing cell.
     *
     * @param {boolean} restoreOriginalValue If `true`, then closes editor without saving value from the editor into a cell.
     * @param {boolean} isCtrlPressed If `true`, then editor will save value to each cell in the last selected range.
     * @param {Function} callback The callback function, fired after editor closing.
     */
    closeEditor(e, t, i) {
      this.activeEditor ? this.activeEditor.finishEditing(e, t, i) : i && i(!1);
    }
    /**
     * Close editor and save changes.
     *
     * @param {boolean} isCtrlPressed If `true`, then editor will save value to each cell in the last selected range.
     */
    closeEditorAndSaveChanges(e) {
      this.closeEditor(!1, e);
    }
    /**
     * Close editor and restore original value.
     *
     * @param {boolean} isCtrlPressed Indication of whether the CTRL button is pressed.
     */
    closeEditorAndRestoreOriginalValue(e) {
      this.closeEditor(!0, e);
    }
    /**
     * Clears reference to an instance of the active editor.
     *
     * @private
     */
    clearActiveEditor() {
      this.activeEditor = void 0;
    }
    /**
     * Checks if the currently selected cell (pointed by selection highlight coords) is editable.
     * Editable cell is when:
     *   - the cell has defined an editor type;
     *   - the cell is not marked as read-only;
     *   - the cell is not hidden.
     *
     * @private
     * @returns {boolean}
     */
    isCellEditable() {
      const e = this.hot.getSelectedRangeLast();
      if (!e)
        return !1;
      const t = this.hot.getCellEditor(this.cellProperties), {
        row: i,
        col: r
      } = e.highlight, {
        rowIndexMapper: s,
        columnIndexMapper: o
      } = this.hot, a = s.isHidden(this.hot.toPhysicalRow(i)) || o.isHidden(this.hot.toPhysicalColumn(r));
      return !(this.cellProperties.readOnly || !t || a);
    }
    /**
     * Controls selection's behavior after clicking `Enter`.
     *
     * @private
     * @param {KeyboardEvent} event The keyboard event object.
     */
    moveSelectionAfterEnter(e) {
      const t = {
        ...typeof this.tableMeta.enterMoves == "function" ? this.tableMeta.enterMoves(e) : this.tableMeta.enterMoves
      };
      e.shiftKey && (t.row = -t.row, t.col = -t.col), this.hot.selection.isMultiple() ? this.selection.transformFocus(t.row, t.col) : this.selection.transformStart(t.row, t.col, !0);
    }
    /**
     * Destroy the instance.
     */
    destroy() {
      this.destroyed = !0, this.eventManager.destroy();
    }
  }
  function iSe(n) {
    const e = this.hot.getSelectedRangeLast();
    if (!this.hot.isListening() || !e || e.highlight.isHeader() || wu(n))
      return;
    const {
      keyCode: t
    } = n, i = (n.ctrlKey || n.metaKey) && !n.altKey;
    (!this.activeEditor || this.activeEditor && !this.activeEditor.isWaiting()) && !ED(t) && !m9(t) && !i && !this.isEditorOpened() && this.openEditor("", n);
  }
  function rSe(n, e) {
    e.isCell() && this.openEditor(null, n, !0);
  }
  const uV = /* @__PURE__ */ new WeakMap();
  WP.getInstance = function(n, e, t) {
    let i = uV.get(n);
    return i || (i = new WP(n, e, t), uV.set(n, i)), i;
  };
  function sSe(n, e) {
    E9(n, e), e.add(n);
  }
  function Mm(n, e, t) {
    E9(n, e), e.set(n, t);
  }
  function E9(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function Tn(n, e) {
    return n.get(nc(n, e));
  }
  function Am(n, e, t) {
    return n.set(nc(n, e), t), t;
  }
  function nc(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  const sp = Object.freeze({
    CELL: "cell",
    MIXED: "mixed"
  });
  var Ii = /* @__PURE__ */ new WeakMap(), h0 = /* @__PURE__ */ new WeakMap(), d0 = /* @__PURE__ */ new WeakMap(), f0 = /* @__PURE__ */ new WeakMap(), g0 = /* @__PURE__ */ new WeakMap(), hu = /* @__PURE__ */ new WeakSet();
  class oSe {
    constructor(e) {
      var t = this;
      sSe(this, hu), Mm(this, Ii, void 0), Mm(this, h0, void 0), Mm(this, d0, 1), Mm(this, f0, null), Mm(this, g0, /* @__PURE__ */ new Map());
      const i = e.getSettings();
      Am(Ii, this, e), Am(h0, this, i.imeFastEdit ? sp.MIXED : sp.CELL), Tn(Ii, this).addHook("afterUpdateSettings", function() {
        for (var r = arguments.length, s = new Array(r), o = 0; o < r; o++)
          s[o] = arguments[o];
        return nc(hu, t, lSe).call(t, ...s);
      }), Tn(Ii, this).addHook("afterSelection", function() {
        for (var r = arguments.length, s = new Array(r), o = 0; o < r; o++)
          s[o] = arguments[o];
        return nc(hu, t, hV).call(t, ...s);
      }), Tn(Ii, this).addHook("afterSelectionFocusSet", function() {
        for (var r = arguments.length, s = new Array(r), o = 0; o < r; o++)
          s[o] = arguments[o];
        return nc(hu, t, hV).call(t, ...s);
      }), Tn(Ii, this).addHook("afterSelectionEnd", function() {
        for (var r = arguments.length, s = new Array(r), o = 0; o < r; o++)
          s[o] = arguments[o];
        return nc(hu, t, aSe).call(t, ...s);
      });
    }
    /**
     * Get the current focus mode.
     *
     * @returns {'cell' | 'mixed'}
     */
    getFocusMode() {
      return Tn(h0, this);
    }
    /**
     * Set the focus mode.
     *
     * @param {'cell' | 'mixed'} focusMode The new focus mode.
     */
    setFocusMode(e) {
      Object.values(sp).includes(e) ? Am(h0, this, e) : Yt(`"${e}" is not a valid focus mode.`);
    }
    /**
     * Get the delay after which the focus will change from the cell elements to the active editor's `TEXTAREA`
     * element if the focus mode is set to 'mixed'.
     *
     * @returns {number} Delay in milliseconds.
     */
    getRefocusDelay() {
      return Tn(d0, this);
    }
    /**
     * Set the delay after which the focus will change from the cell elements to the active editor's `TEXTAREA`
     * element if the focus mode is set to 'mixed'.
     *
     * @param {number} delay Delay in milliseconds.
     */
    setRefocusDelay(e) {
      Am(d0, this, e);
    }
    /**
     * Set the function to be used as the "refocus element" getter. It should return a focusable HTML element.
     *
     * @param {Function} getRefocusElementFunction The refocus element getter.
     */
    setRefocusElementGetter(e) {
      Am(f0, this, e);
    }
    /**
     * Get the element to be used when refocusing the browser after a delay in case of the focus mode being 'mixed'.
     *
     * @returns {HTMLTextAreaElement|HTMLElement|undefined}
     */
    getRefocusElement() {
      if (typeof Tn(f0, this) == "function")
        return Tn(f0, this).call(this);
      var e;
      return (e = Tn(Ii, this).getActiveEditor()) === null || e === void 0 ? void 0 : e.TEXTAREA;
    }
    /**
     * Set the browser's focus to the highlighted cell of the last selection.
     *
     * @param {HTMLTableCellElement} [selectedCell] The highlighted cell/header element.
     */
    focusOnHighlightedCell(e) {
      const t = (i) => {
        var r, s;
        const o = (r = Tn(Ii, this).getSelectedRangeLast()) === null || r === void 0 ? void 0 : r.highlight;
        if (!o)
          return;
        let a = Tn(Ii, this).runHooks("modifyFocusedElement", o.row, o.col, i);
        a instanceof HTMLElement || (a = i), a && !((s = Tn(Ii, this).getActiveEditor()) !== null && s !== void 0 && s.isOpened()) && a.focus({
          preventScroll: !0
        });
      };
      e ? t(e) : nc(hu, this, MD).call(this, (i) => t(i));
    }
    /**
     * Set the focus to the active editor's `TEXTAREA` element after the provided delay. If no delay is provided, it
     * will be taken from the manager's configuration.
     *
     * @param {number} [delay] Delay in milliseconds.
     */
    refocusToEditorTextarea() {
      var e;
      let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : Tn(d0, this);
      const i = this.getRefocusElement();
      Tn(Ii, this).getSettings().imeFastEdit && !((e = Tn(Ii, this).getActiveEditor()) !== null && e !== void 0 && e.isOpened()) && i && (Tn(g0, this).has(t) || Tn(g0, this).set(t, N1(() => {
        i.select();
      }, t)), Tn(g0, this).get(t)());
    }
  }
  function MD(n) {
    var e;
    const t = (e = Tn(Ii, this).getSelectedRangeLast()) === null || e === void 0 ? void 0 : e.highlight;
    if (!t || !Tn(Ii, this).selection.isCellVisible(t)) {
      n(null);
      return;
    }
    const i = Tn(Ii, this).getCell(t.row, t.col, !0);
    i === null ? Tn(Ii, this).addHookOnce("afterScroll", () => {
      n(Tn(Ii, this).getCell(t.row, t.col, !0));
    }) : n(i);
  }
  function hV() {
    nc(hu, this, MD).call(this, (n) => {
      const {
        activeElement: e
      } = Tn(Ii, this).rootDocument;
      e && D1(e) && e.blur(), this.focusOnHighlightedCell(n);
    });
  }
  function aSe() {
    nc(hu, this, MD).call(this, (n) => {
      this.getFocusMode() === sp.MIXED && n.nodeName === "TD" && this.refocusToEditorTextarea();
    });
  }
  function lSe(n) {
    typeof n.imeFastEdit == "boolean" && this.setFocusMode(n.imeFastEdit ? sp.MIXED : sp.CELL);
  }
  var cSe = ml, uSe = wf, hSe = lh, dSe = hSe("match"), fSe = function(n) {
    var e;
    return cSe(n) && ((e = n[dSe]) !== void 0 ? !!e : uSe(n) === "RegExp");
  }, gSe = Hc, pSe = function() {
    var n = gSe(this), e = "";
    return n.hasIndices && (e += "d"), n.global && (e += "g"), n.ignoreCase && (e += "i"), n.multiline && (e += "m"), n.dotAll && (e += "s"), n.unicode && (e += "u"), n.unicodeSets && (e += "v"), n.sticky && (e += "y"), e;
  }, mSe = la, bSe = bl, vSe = d1, wSe = pSe, dV = RegExp.prototype, ySe = function(n) {
    var e = n.flags;
    return e === void 0 && !("flags" in dV) && !bSe(n, "flags") && vSe(dV, n) ? mSe(wSe, n) : e;
  }, AD = pi, CSe = Xw, SSe = Math.floor, rT = AD("".charAt), _Se = AD("".replace), sT = AD("".slice), RSe = /\$([$&'`]|\d{1,2}|<[^>]*>)/g, ESe = /\$([$&'`]|\d{1,2})/g, xSe = function(n, e, t, i, r, s) {
    var o = t + n.length, a = i.length, l = ESe;
    return r !== void 0 && (r = CSe(r), l = RSe), _Se(s, l, function(c, u) {
      var h;
      switch (rT(u, 0)) {
        case "$":
          return "$";
        case "&":
          return n;
        case "`":
          return sT(e, 0, t);
        case "'":
          return sT(e, o);
        case "<":
          h = r[sT(u, 1, -1)];
          break;
        default:
          var d = +u;
          if (d === 0) return c;
          if (d > a) {
            var f = SSe(d / 10);
            return f === 0 ? c : f <= a ? i[f - 1] === void 0 ? rT(u, 1) : i[f - 1] + rT(u, 1) : c;
          }
          h = i[d - 1];
      }
      return h === void 0 ? "" : h;
    });
  }, TSe = Yi, MSe = la, PD = pi, fV = Kw, ASe = Gi, PSe = u1, ISe = fSe, Pm = b1, OSe = p1, kSe = ySe, DSe = xSe, NSe = lh, LSe = NSe("replace"), HSe = TypeError, oT = PD("".indexOf);
  PD("".replace);
  var gV = PD("".slice), $Se = Math.max;
  TSe({
    target: "String",
    proto: !0
  }, {
    replaceAll: function(e, t) {
      var i = fV(this), r, s, o, a, l, c, u, h, d, f, g = 0, p = "";
      if (!PSe(e)) {
        if (r = ISe(e), r && (s = Pm(fV(kSe(e))), !~oT(s, "g")))
          throw new HSe("`.replaceAll` does not allow non-global regexes");
        if (o = OSe(e, LSe), o) return MSe(o, e, i, t);
      }
      for (a = Pm(i), l = Pm(e), c = ASe(t), c || (t = Pm(t)), u = l.length, h = $Se(1, u), d = oT(a, l); d !== -1; )
        f = c ? Pm(t(l, d, a)) : DSe(l, a, d, [], void 0, t), p += gV(a, g, d) + f, g = d + u, d = d + h > a.length ? -1 : oT(a, l, d + h);
      return g < a.length && (p += gV(a, g)), p;
    }
  });
  const x9 = {
    "&nbsp;": " ",
    "&amp;": "&",
    "&lt;": "<",
    "&gt;": ">"
  }, FSe = new RegExp(Object.keys(x9).map((n) => `(${n})`).join("|"), "gi");
  function BSe(n) {
    return (n && n.nodeName || "") === "TABLE";
  }
  function jP(n) {
    const e = n.hasColHeaders(), t = n.hasRowHeaders(), i = [e ? -1 : 0, t ? -1 : 0, n.countRows() - 1, n.countCols() - 1], r = n.getData(...i), s = r.length, o = s > 0 ? r[0].length : 0, a = ["<table>", "</table>"], l = e ? ["<thead>", "</thead>"] : [], c = ["<tbody>", "</tbody>"], u = t ? 1 : 0, h = e ? 1 : 0;
    for (let d = 0; d < s; d += 1) {
      const f = e && d === 0, g = [];
      for (let m = 0; m < o; m += 1) {
        const v = !f && t && m === 0;
        let y = "";
        if (f)
          y = `<th>${n.getColHeader(m - u)}</th>`;
        else if (v)
          y = `<th>${n.getRowHeader(d - h)}</th>`;
        else {
          const w = r[d][m], {
            hidden: R,
            rowspan: E,
            colspan: C
          } = n.getCellMeta(d - h, m - u);
          if (!R) {
            const T = [];
            if (E && T.push(`rowspan="${E}"`), C && T.push(`colspan="${C}"`), Wn(w))
              y = `<td ${T.join(" ")}></td>`;
            else {
              const P = w.toString().replace("<", "&lt;").replace(">", "&gt;").replace(/(<br(\s*|\/)>(\r\n|\n)?|\r\n|\n)/g, `<br>\r
`).replace(/\x20/gi, "&nbsp;").replace(/\t/gi, "&#9;");
              y = `<td ${T.join(" ")}>${P}</td>`;
            }
          }
        }
        g.push(y);
      }
      const p = ["<tr>", ...g, "</tr>"].join("");
      f ? l.splice(1, 0, p) : c.splice(-1, 0, p);
    }
    return a.splice(1, 0, l.join(""), c.join("")), a.join("");
  }
  function zP(n) {
    const e = n.length, t = ["<table>"];
    for (let i = 0; i < e; i += 1) {
      const r = n[i], s = r.length, o = [];
      i === 0 && t.push("<tbody>");
      for (let a = 0; a < s; a += 1) {
        const l = r[a], c = Wn(l) ? "" : l.toString().replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/(<br(\s*|\/)>(\r\n|\n)?|\r\n|\n)/g, `<br>\r
`).replace(/\x20{2,}/gi, (u) => `<span style="mso-spacerun: yes">${"&nbsp;".repeat(u.length - 1)} </span>`).replace(/\t/gi, "&#9;");
        o.push(`<td>${c}</td>`);
      }
      t.push("<tr>", ...o, "</tr>"), i + 1 === e && t.push("</tbody>");
    }
    return t.push("</table>"), t.join("");
  }
  function T9(n) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : document;
    const t = {}, i = e.createDocumentFragment(), r = e.createElement("div");
    i.appendChild(r);
    let s = n;
    if (typeof s == "string") {
      const w = s.replace(/<td\b[^>]*?>([\s\S]*?)<\/\s*td>/g, (R) => {
        const E = R.match(/<td\b[^>]*?>/g)[0], C = /<p.*?>/g, T = R.substring(E.length, R.lastIndexOf("<")).trim().replaceAll(/\n\s+/g, " ").replaceAll(C, `
`).replace(`
`, "").replaceAll(/<\/(.*)>\s+$/mg, "</$1>").replace(/(<(?!br)([^>]+)>)/gi, "").replaceAll(/^&nbsp;$/mg, "");
        return `${E}${T}</td>`;
      });
      r.insertAdjacentHTML("afterbegin", `${w}`), s = r.querySelector("table");
    }
    if (!s || !BSe(s))
      return;
    const o = r.querySelector('meta[name$="enerator"]'), a = s.querySelector("tbody th") !== null, l = s.querySelector("tr"), c = l ? Array.from(l.cells).reduce((w, R) => w + R.colSpan, 0) - (a ? 1 : 0) : 0, u = s.tFoot && Array.from(s.tFoot.rows) || [], h = [];
    let d = !1, f = 0, g = 0;
    if (s.tHead) {
      const w = Array.from(s.tHead.rows).filter((R) => {
        const E = R.querySelector("td") !== null;
        return E && h.push(R), !E;
      });
      f = w.length, d = f > 0, f > 1 ? t.nestedHeaders = Array.from(w).reduce((R, E) => {
        const C = Array.from(E.cells).reduce((T, P, x) => {
          if (a && x === 0)
            return T;
          const {
            colSpan: A,
            innerHTML: D
          } = P, B = A > 1 ? {
            label: D,
            colspan: A
          } : D;
          return T.push(B), T;
        }, []);
        return R.push(C), R;
      }, []) : d && (t.colHeaders = Array.from(w[0].children).reduce((R, E, C) => (a && C === 0 || R.push(E.innerHTML), R), []));
    }
    h.length && (t.fixedRowsTop = h.length), u.length && (t.fixedRowsBottom = u.length);
    const p = [...h, ...Array.from(s.tBodies).reduce((w, R) => (w.push(...Array.from(R.rows)), w), []), ...u];
    g = p.length;
    const m = new Array(g);
    for (let w = 0; w < g; w++)
      m[w] = new Array(c);
    const v = [], y = [];
    for (let w = 0; w < g; w++) {
      const R = p[w], E = Array.from(R.cells), C = E.length;
      for (let T = 0; T < C; T++) {
        const P = E[T], {
          nodeName: x,
          innerHTML: A,
          rowSpan: D,
          colSpan: B
        } = P, F = m[w].findIndex((W) => W === void 0);
        if (x === "TD") {
          if (D > 1 || B > 1) {
            for (let V = w; V < w + D; V++)
              if (V < g)
                for (let G = F; G < F + B; G++)
                  m[V][G] = null;
            const N = P.getAttribute("style");
            N && N.includes("mso-ignore:colspan") || v.push({
              col: F,
              row: w,
              rowspan: D,
              colspan: B
            });
          }
          let W = "";
          o && /excel/gi.test(o.content) ? W = A.replace(/[\r\n][\x20]{0,2}/g, " ").replace(/<br(\s*|\/)>[\r\n]?[\x20]{0,3}/gim, `\r
`) : W = A.replace(/<br(\s*|\/)>[\r\n]?/gim, `\r
`), m[w][F] = W.replace(FSe, (N) => x9[N]);
        } else
          y.push(A);
      }
    }
    return v.length && (t.mergeCells = v), y.length && (t.rowHeaders = y), m.length && (t.data = m), t;
  }
  const VSe = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    _dataToHTML: zP,
    htmlToGridSettings: T9,
    instanceToHTML: jP
  }, Symbol.toStringTag, { value: "Module" }));
  function sr(n) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    const t = typeof n;
    if (t === "number")
      return !isNaN(n) && isFinite(n);
    if (t === "string") {
      if (n.length === 0)
        return !1;
      if (n.length === 1)
        return /\d/.test(n);
      const i = Array.from(/* @__PURE__ */ new Set([".", ...e])).map((r) => `\\${r}`).join("|");
      return new RegExp(`^[+-]?(((${i})?\\d+((${i})\\d+)?(e[+-]?\\d+)?)|(0x[a-f\\d]+))$`, "i").test(n.trim());
    } else if (t === "object")
      return !!n && typeof n.valueOf() == "number" && !(n instanceof Date);
    return !1;
  }
  function M9(n) {
    return sr(n, [","]);
  }
  function $e(n, e, t) {
    let i = -1;
    for (typeof e == "function" ? (t = e, e = n) : i = n - 1; ++i <= e && t(i) !== !1; )
      ;
  }
  function UP(n, e, t) {
    let i = n + 1;
    for (typeof e == "function" && (t = e, e = 0); --i >= e && t(i) !== !1; )
      ;
  }
  function ID(n, e) {
    return e = parseInt(e.toString().replace("%", ""), 10), e = isNaN(e) ? 0 : e, parseInt(n * e / 100, 10);
  }
  function Gt(n, e, t) {
    return Math.min(n, e) === n ? e : Math.max(n, t) === n ? t : n;
  }
  const WSe = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    clamp: Gt,
    isNumeric: sr,
    isNumericLike: M9,
    rangeEach: $e,
    rangeEachReverse: UP,
    valueAccordingPercent: ID
  }, Symbol.toStringTag, { value: "Module" })), GP = "asc", jSe = "desc", pV = /* @__PURE__ */ new Map([[GP, [-1, 1]], [jSe, [1, -1]]]), zSe = (n) => `The priority '${n}' is already declared in a map.`, USe = (n) => `The priority '${n}' is not a number.`;
  function GSe() {
    let {
      errorPriorityExists: n,
      errorPriorityNaN: e
    } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    const t = /* @__PURE__ */ new Map();
    n = cn(n) ? n : zSe, e = cn(e) ? e : USe;
    function i(s, o) {
      if (!sr(s))
        throw new Error(e(s));
      if (t.has(s))
        throw new Error(n(s));
      t.set(s, o);
    }
    function r() {
      let s = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : GP;
      const [o, a] = pV.get(s) || pV.get(GP);
      return [...t].sort((l, c) => l[0] < c[0] ? o : a).map((l) => l[1]);
    }
    return {
      addItem: i,
      getItems: r
    };
  }
  const YSe = (n) => `The id '${n}' is already declared in a map.`;
  function B1() {
    let {
      errorIdExists: n
    } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    const e = /* @__PURE__ */ new Map();
    n = cn(n) ? n : YSe;
    function t(c, u) {
      if (l(c))
        throw new Error(n(c));
      e.set(c, u);
    }
    function i(c) {
      return e.delete(c);
    }
    function r() {
      e.clear();
    }
    function s(c) {
      const [u] = a().find((h) => {
        let [d, f] = h;
        return c === f ? d : !1;
      }) || [null];
      return u;
    }
    function o(c) {
      return e.get(c);
    }
    function a() {
      return [...e];
    }
    function l(c) {
      return e.has(c);
    }
    return {
      addItem: t,
      clear: r,
      getId: s,
      getItem: o,
      getItems: a,
      hasItem: l,
      removeItem: i
    };
  }
  const KSe = (n) => `'${n}' value is already declared in a unique set.`;
  function qSe() {
    let {
      errorItemExists: n
    } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    const e = /* @__PURE__ */ new Set();
    n = cn(n) ? n : KSe;
    function t(s) {
      if (e.has(s))
        throw new Error(n(s));
      e.add(s);
    }
    function i() {
      return [...e];
    }
    function r() {
      e.clear();
    }
    return {
      addItem: t,
      clear: r,
      getItems: i
    };
  }
  const OD = (n) => `There is already registered "${n}" plugin.`, XSe = (n) => `There is already registered plugin on priority "${n}".`, ZSe = (n) => `The priority "${n}" is not a number.`, A9 = GSe({
    errorPriorityExists: XSe,
    errorPriorityNaN: ZSe
  }), P9 = qSe({
    errorItemExists: OD
  }), YP = B1({
    errorIdExists: OD
  });
  function kD() {
    return [...A9.getItems(), ...P9.getItems()];
  }
  function hy(n) {
    const e = pr(n);
    return YP.getItem(e);
  }
  function QSe(n) {
    return !!hy(n);
  }
  function Mt(n, e, t) {
    [n, e, t] = e_e(n, e, t), hy(n) === void 0 && JSe(n, e, t);
  }
  function JSe(n, e, t) {
    const i = pr(n);
    if (YP.hasItem(i))
      throw new Error(OD(i));
    t === void 0 ? P9.addItem(i) : A9.addItem(t, i), YP.addItem(i, e);
  }
  function e_e(n, e, t) {
    return typeof n == "function" && (e = n, n = e.PLUGIN_KEY, t = e.PLUGIN_PRIORITY), [n, e, t];
  }
  const {
    register: t_e,
    getItem: n_e,
    hasItem: I9,
    getNames: i_e,
    getValues: OUe
  } = ha("renderers");
  function O_(n) {
    if (typeof n == "function")
      return n;
    if (!I9(n))
      throw Error(`No registered renderer found under "${n}" name`);
    return n_e(n);
  }
  function ss(n, e) {
    typeof n != "string" && (e = n, n = e.RENDERER_TYPE), t_e(n, e);
  }
  const {
    register: r_e,
    getItem: s_e,
    hasItem: O9,
    getNames: o_e,
    getValues: kUe
  } = ha("validators");
  function DD(n) {
    if (typeof n == "function")
      return n;
    if (!O9(n))
      throw Error(`No registered validator found under "${n}" name`);
    return s_e(n);
  }
  function vd(n, e) {
    typeof n != "string" && (e = n, n = e.VALIDATOR_TYPE), r_e(n, e);
  }
  var a_e = Yi, l_e = Xw, c_e = Jw, u_e = Qw, h_e = xD;
  a_e({
    target: "Array",
    proto: !0
  }, {
    at: function(e) {
      var t = l_e(this), i = c_e(t), r = u_e(e), s = r >= 0 ? r : i + r;
      return s < 0 || s >= i ? void 0 : t[s];
    }
  });
  h_e("at");
  var d_e = Yi, f_e = pi, g_e = Kw, p_e = Qw, m_e = b1, b_e = es, v_e = f_e("".charAt), w_e = b_e(function() {
    return "𠮷".at(-2) !== "\uD842";
  });
  d_e({
    target: "String",
    proto: !0,
    forced: w_e
  }, {
    at: function(e) {
      var t = m_e(g_e(this)), i = t.length, r = p_e(e), s = r >= 0 ? r : i + r;
      return s < 0 || s >= i ? void 0 : v_e(t, s);
    }
  });
  function Im(n, e, t) {
    return (e = y_e(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function y_e(n) {
    var e = C_e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function C_e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class S_e {
    constructor() {
      Im(this, "count", 0), Im(this, "startColumn", null), Im(this, "endColumn", null), Im(this, "startPosition", null), Im(this, "isVisibleInTrimmingContainer", !1);
    }
    /**
     * Initializes the calculation.
     */
    initialize() {
    }
    /**
     * Processes the column.
     *
     * @param {number} column The column index.
     * @param {ViewportColumnsCalculator} viewportCalculator The viewport calculator object.
     */
    process(e, t) {
      const {
        totalCalculatedWidth: i,
        zeroBasedScrollOffset: r,
        viewportWidth: s,
        columnWidth: o
      } = t, a = r > 0 ? s + 1 : s;
      i >= r && i + o <= r + a && ((this.startColumn === null || this.startColumn === void 0) && (this.startColumn = e), this.endColumn = e);
    }
    /**
     * Finalizes the calculation.
     *
     * @param {ViewportColumnsCalculator} viewportCalculator The viewport calculator object.
     */
    finalize(e) {
      var t;
      const {
        scrollOffset: i,
        viewportWidth: r,
        inlineStartOffset: s,
        zeroBasedScrollOffset: o,
        totalColumns: a,
        needReverse: l,
        startPositions: c,
        columnWidth: u
      } = e;
      if (this.endColumn === a - 1 && l)
        for (this.startColumn = this.endColumn; this.startColumn > 0; ) {
          const g = c[this.endColumn] + u - c[this.startColumn - 1];
          if (g <= r && (this.startColumn -= 1), g >= r)
            break;
        }
      this.startPosition = (t = c[this.startColumn]) !== null && t !== void 0 ? t : null;
      const h = o > 0 ? r + 1 : r, d = i + r - h, f = this.startColumn === null ? 0 : e.getColumnWidth(this.startColumn);
      // the table is to the left of the viewport
      d < -1 * s || i > c.at(-1) || // the table is to the right of the viewport
      -1 * i - r > -1 * f ? this.isVisibleInTrimmingContainer = !1 : this.isVisibleInTrimmingContainer = !0, a < this.endColumn && (this.endColumn = a - 1), this.startColumn !== null && (this.count = this.endColumn - this.startColumn + 1);
    }
  }
  function Om(n, e, t) {
    return (e = __e(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function __e(n) {
    var e = R_e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function R_e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class E_e {
    constructor() {
      Om(this, "count", 0), Om(this, "startRow", null), Om(this, "endRow", null), Om(this, "startPosition", null), Om(this, "isVisibleInTrimmingContainer", !1);
    }
    /**
     * Initializes the calculation.
     */
    initialize() {
    }
    /**
     * Processes the row.
     *
     * @param {number} row The row index.
     * @param {ViewportRowsCalculator} viewportCalculator The viewport calculator object.
     */
    process(e, t) {
      const {
        totalCalculatedHeight: i,
        zeroBasedScrollOffset: r,
        innerViewportHeight: s,
        rowHeight: o
      } = t;
      i >= r && i + o <= s && (this.startRow === null && (this.startRow = e), this.endRow = e);
    }
    /**
     * Finalizes the calculation.
     *
     * @param {ViewportRowsCalculator} viewportCalculator The viewport calculator object.
     */
    finalize(e) {
      var t;
      const {
        scrollOffset: i,
        viewportHeight: r,
        horizontalScrollbarHeight: s,
        totalRows: o,
        needReverse: a,
        startPositions: l,
        rowHeight: c
      } = e;
      if (this.endRow === o - 1 && a)
        for (this.startRow = this.endRow; this.startRow > 0; ) {
          const d = l[this.endRow] + c - l[this.startRow - 1];
          if (d <= r - s && (this.startRow -= 1), d >= r - s)
            break;
        }
      this.startPosition = (t = l[this.startRow]) !== null && t !== void 0 ? t : null;
      const u = i + r - s, h = this.startRow === null ? 0 : e.getRowHeight(this.startRow);
      u < h || i > l.at(-1) ? this.isVisibleInTrimmingContainer = !1 : this.isVisibleInTrimmingContainer = !0, o < this.endRow && (this.endRow = o - 1), this.startRow !== null && (this.count = this.endRow - this.startRow + 1);
    }
  }
  function km(n, e, t) {
    return (e = x_e(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function x_e(n) {
    var e = T_e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function T_e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class k9 {
    constructor() {
      km(this, "count", 0), km(this, "startColumn", null), km(this, "endColumn", null), km(this, "startPosition", null), km(this, "isVisibleInTrimmingContainer", !1);
    }
    /**
     * Initializes the calculation.
     */
    initialize() {
    }
    /**
     * Processes the column.
     *
     * @param {number} column The column index.
     * @param {ViewportColumnsCalculator} viewportCalculator The viewport calculator object.
     */
    process(e, t) {
      const {
        totalCalculatedWidth: i,
        zeroBasedScrollOffset: r,
        viewportWidth: s
      } = t;
      i <= r && (this.startColumn = e);
      const o = r > 0 ? s + 1 : s;
      i >= r && i <= r + o && (this.startColumn === null || this.startColumn === void 0) && (this.startColumn = e), this.endColumn = e;
    }
    /**
     * Finalizes the calculation.
     *
     * @param {ViewportColumnsCalculator} viewportCalculator The viewport calculator object.
     */
    finalize(e) {
      var t;
      const {
        scrollOffset: i,
        viewportWidth: r,
        inlineStartOffset: s,
        zeroBasedScrollOffset: o,
        totalColumns: a,
        needReverse: l,
        startPositions: c,
        columnWidth: u
      } = e;
      if (this.endColumn === a - 1 && l)
        for (this.startColumn = this.endColumn; this.startColumn > 0; ) {
          const f = c[this.endColumn] + u - c[this.startColumn - 1];
          if (this.startColumn -= 1, f > r)
            break;
        }
      this.startPosition = (t = c[this.startColumn]) !== null && t !== void 0 ? t : null;
      const h = o > 0 ? r + 1 : r;
      // the table is to the left of the viewport
      i + r - h < -1 * s || i > c.at(-1) + u || // the table is to the right of the viewport
      -1 * i - r > 0 ? this.isVisibleInTrimmingContainer = !1 : this.isVisibleInTrimmingContainer = !0, a < this.endColumn && (this.endColumn = a - 1), this.startColumn !== null && (this.count = this.endColumn - this.startColumn + 1);
    }
  }
  function Dm(n, e, t) {
    return (e = M_e(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function M_e(n) {
    var e = A_e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function A_e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class D9 {
    constructor() {
      Dm(this, "count", 0), Dm(this, "startRow", null), Dm(this, "endRow", null), Dm(this, "startPosition", null), Dm(this, "isVisibleInTrimmingContainer", !1);
    }
    /**
     * Initializes the calculation.
     */
    initialize() {
    }
    /**
     * Processes the row.
     *
     * @param {number} row The row index.
     * @param {ViewportRowsCalculator} viewportCalculator The viewport calculator object.
     */
    process(e, t) {
      const {
        totalCalculatedHeight: i,
        zeroBasedScrollOffset: r,
        innerViewportHeight: s
      } = t;
      i <= r && (this.startRow = e), i >= r && i <= s && this.startRow === null && (this.startRow = e), this.endRow = e;
    }
    /**
     * Finalizes the calculation.
     *
     * @param {ViewportRowsCalculator} viewportCalculator The viewport calculator object.
     */
    finalize(e) {
      var t;
      const {
        scrollOffset: i,
        viewportHeight: r,
        horizontalScrollbarHeight: s,
        totalRows: o,
        needReverse: a,
        startPositions: l,
        rowHeight: c
      } = e;
      if (this.endRow === o - 1 && a)
        for (this.startRow = this.endRow; this.startRow > 0; ) {
          const h = l[this.endRow] + c - l[this.startRow - 1];
          if (this.startRow -= 1, h >= r - s)
            break;
        }
      this.startPosition = (t = l[this.startRow]) !== null && t !== void 0 ? t : null, i + r - s < 0 || i > l.at(-1) + c ? this.isVisibleInTrimmingContainer = !1 : this.isVisibleInTrimmingContainer = !0, o < this.endRow && (this.endRow = o - 1), this.startRow !== null && (this.count = this.endRow - this.startRow + 1);
    }
  }
  function Nm(n, e, t) {
    return (e = P_e(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function P_e(n) {
    var e = I_e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function I_e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class O_e {
    constructor() {
      Nm(this, "count", 0), Nm(this, "startColumn", 0), Nm(this, "endColumn", 0), Nm(this, "startPosition", 0), Nm(this, "isVisibleInTrimmingContainer", !0);
    }
    /**
     * Initializes the calculation.
     *
     * @param {ViewportColumnsCalculator} viewportCalculator The viewport calculator object.
     */
    initialize(e) {
      let {
        totalColumns: t
      } = e;
      this.count = t, this.endColumn = this.count - 1;
    }
    /**
     * Processes the column.
     */
    process() {
    }
    /**
     * Finalizes the calculation.
     */
    finalize() {
    }
  }
  function Lm(n, e, t) {
    return (e = k_e(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function k_e(n) {
    var e = D_e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function D_e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class N_e {
    constructor() {
      Lm(this, "count", 0), Lm(this, "startRow", 0), Lm(this, "endRow", 0), Lm(this, "startPosition", 0), Lm(this, "isVisibleInTrimmingContainer", !0);
    }
    /**
     * Initializes the calculation.
     *
     * @param {ViewportRowsCalculator} viewportCalculator The viewport calculator object.
     */
    initialize(e) {
      let {
        totalRows: t
      } = e;
      this.count = t, this.endRow = this.count - 1;
    }
    /**
     * Processes the row.
     */
    process() {
    }
    /**
     * Finalizes the calculation.
     */
    finalize() {
    }
  }
  class L_e extends k9 {
    /**
     * Finalizes the calculation.
     *
     * @param {ViewportColumnsCalculator} viewportCalculator The viewport calculator object.
     */
    finalize(e) {
      var t;
      super.finalize(e);
      const {
        overrideFn: i,
        totalColumns: r,
        startPositions: s
      } = e;
      this.startColumn !== null && typeof i == "function" && i(this), this.startColumn < 0 && (this.startColumn = 0), this.startPosition = (t = s[this.startColumn]) !== null && t !== void 0 ? t : null, r < this.endColumn && (this.endColumn = r - 1), this.startColumn !== null && (this.count = this.endColumn - this.startColumn + 1);
    }
  }
  class H_e extends D9 {
    /**
     * Finalizes the calculation.
     *
     * @param {ViewportRowsCalculator} viewportCalculator The viewport calculator object.
     */
    finalize(e) {
      var t;
      super.finalize(e);
      const {
        overrideFn: i,
        totalRows: r,
        startPositions: s
      } = e;
      this.startRow !== null && typeof i == "function" && i(this), this.startRow < 0 && (this.startRow = 0), this.startPosition = (t = s[this.startRow]) !== null && t !== void 0 ? t : null, r < this.endRow && (this.endRow = r - 1), this.startRow !== null && (this.count = this.endRow - this.startRow + 1);
    }
  }
  function mV(n, e, t) {
    return (e = $_e(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function $_e(n) {
    var e = F_e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function F_e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class N9 {
    constructor(e) {
      mV(this, "calculationTypes", []), mV(this, "calculationResults", /* @__PURE__ */ new Map()), this.calculationTypes = e;
    }
    /**
     * Initializes all calculators (triggers all calculators before calculating the rows/columns sizes).
     *
     * @param {*} context The context object (rows or columns viewport calculator).
     */
    _initialize(e) {
      this.calculationTypes.forEach((t) => {
        let [i, r] = t;
        this.calculationResults.set(i, r), r.initialize(e);
      });
    }
    /**
     * Processes the row/column at the given index.
     *
     * @param {number} index The index of the row/column.
     * @param {*} context The context object (rows or columns viewport calculator).
     */
    _process(e, t) {
      this.calculationTypes.forEach((i) => {
        let [, r] = i;
        return r.process(e, t);
      });
    }
    /**
     * Finalizes all calculators (triggers all calculators after calculating the rows/columns sizes).
     *
     * @param {*} context The context object (rows or columns viewport calculator).
     */
    _finalize(e) {
      this.calculationTypes.forEach((t) => {
        let [, i] = t;
        return i.finalize(e);
      });
    }
    /**
     * Gets the results for the given calculator.
     *
     * @param {string} calculatorId The id of the calculator.
     * @returns {ColumnsCalculationType | RowsCalculationType}
     */
    getResultsFor(e) {
      return this.calculationResults.get(e);
    }
  }
  function Eo(n, e, t) {
    return (e = B_e(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function B_e(n) {
    var e = V_e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function V_e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  const V1 = 50;
  class W_e extends N9 {
    /**
     * @param {ViewportColumnsCalculatorOptions} options Object with all options specified for column viewport calculation.
     */
    constructor(e) {
      let {
        calculationTypes: t,
        viewportWidth: i,
        scrollOffset: r,
        totalColumns: s,
        columnWidthFn: o,
        overrideFn: a,
        inlineStartOffset: l
      } = e;
      super(t), Eo(this, "viewportWidth", 0), Eo(this, "scrollOffset", 0), Eo(this, "zeroBasedScrollOffset", 0), Eo(this, "totalColumns", 0), Eo(this, "columnWidthFn", null), Eo(this, "columnWidth", 0), Eo(this, "overrideFn", null), Eo(this, "inlineStartOffset", 0), Eo(this, "totalCalculatedWidth", 0), Eo(this, "startPositions", []), Eo(this, "needReverse", !0), this.viewportWidth = i, this.scrollOffset = r, this.zeroBasedScrollOffset = Math.max(r, 0), this.totalColumns = s, this.columnWidthFn = o, this.overrideFn = a, this.inlineStartOffset = l, this.calculate();
    }
    /**
     * Calculates viewport.
     */
    calculate() {
      this._initialize(this);
      for (let e = 0; e < this.totalColumns; e++)
        if (this.columnWidth = this.getColumnWidth(e), this._process(e, this), this.startPositions.push(this.totalCalculatedWidth), this.totalCalculatedWidth += this.columnWidth, this.totalCalculatedWidth >= this.zeroBasedScrollOffset + this.viewportWidth) {
          this.needReverse = !1;
          break;
        }
      this._finalize(this);
    }
    /**
     * Gets the column width at the specified column index.
     *
     * @param {number} column Column index.
     * @returns {number}
     */
    getColumnWidth(e) {
      const t = this.columnWidthFn(e);
      return isNaN(t) ? V1 : t;
    }
  }
  function Ds(n, e, t) {
    return (e = j_e(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function j_e(n) {
    var e = z_e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function z_e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  const L9 = 23;
  class U_e extends N9 {
    /**
     * @param {ViewportRowsCalculatorOptions} options Object with all options specified for row viewport calculation.
     */
    constructor(e) {
      let {
        calculationTypes: t,
        viewportHeight: i,
        scrollOffset: r,
        totalRows: s,
        rowHeightFn: o,
        overrideFn: a,
        horizontalScrollbarHeight: l
      } = e;
      super(t), Ds(this, "viewportHeight", 0), Ds(this, "scrollOffset", 0), Ds(this, "zeroBasedScrollOffset", 0), Ds(this, "totalRows", 0), Ds(this, "rowHeightFn", null), Ds(this, "rowHeight", 0), Ds(this, "overrideFn", null), Ds(this, "horizontalScrollbarHeight", 0), Ds(this, "innerViewportHeight", 0), Ds(this, "totalCalculatedHeight", 0), Ds(this, "startPositions", []), Ds(this, "needReverse", !0), this.viewportHeight = i, this.scrollOffset = r, this.zeroBasedScrollOffset = Math.max(r, 0), this.totalRows = s, this.rowHeightFn = o, this.overrideFn = a, this.horizontalScrollbarHeight = l ?? 0, this.innerViewportHeight = this.zeroBasedScrollOffset + this.viewportHeight - this.horizontalScrollbarHeight, this.calculate();
    }
    /**
     * Calculates viewport.
     */
    calculate() {
      this._initialize(this);
      for (let e = 0; e < this.totalRows; e++)
        if (this.rowHeight = this.getRowHeight(e), this._process(e, this), this.startPositions.push(this.totalCalculatedHeight), this.totalCalculatedHeight += this.rowHeight, this.totalCalculatedHeight >= this.innerViewportHeight) {
          this.needReverse = !1;
          break;
        }
      this._finalize(this);
    }
    /**
     * Gets the row height at the specified row index.
     *
     * @param {number} row Row index.
     * @returns {number}
     */
    getRowHeight(e) {
      const t = this.rowHeightFn(e);
      return isNaN(t) ? L9 : t;
    }
  }
  function G_e(n, e, t) {
    Y_e(n, e), e.set(n, t);
  }
  function Y_e(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function bV(n, e, t) {
    return (e = K_e(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function K_e(n) {
    var e = q_e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function q_e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function jf(n, e) {
    return n.get(H9(n, e));
  }
  function vV(n, e, t) {
    return n.set(H9(n, e), t), t;
  }
  function H9(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var Ml = /* @__PURE__ */ new WeakMap();
  class rf {
    constructor(e, t) {
      let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
      bV(this, "row", null), bV(this, "col", null), G_e(this, Ml, !1), vV(Ml, this, i), typeof e < "u" && typeof t < "u" && (this.row = e, this.col = t);
    }
    /**
     * Checks if the coordinates in your `CellCoords` instance are valid
     * in the context of given table parameters.
     *
     * The `row` index:
     * - Must be an integer.
     * - Must be higher than the number of column headers in the table.
     * - Must be lower than the total number of rows in the table.
     *
     * The `col` index:
     * - Must be an integer.
     * - Must be higher than the number of row headers in the table.
     * - Must be lower than the total number of columns in the table.
     *
     * @param {object} [tableParams] An object with a defined table size.
     * @param {number} [tableParams.countRows=0] The total number of rows.
     * @param {number} [tableParams.countCols=0] The total number of columns.
     * @param {number} [tableParams.countRowHeaders=0] A number of row headers.
     * @param {number} [tableParams.countColHeaders=0] A number of column headers.
     * @returns {boolean} `true`: The coordinates are valid.
     */
    isValid(e) {
      const {
        countRows: t,
        countCols: i,
        countRowHeaders: r,
        countColHeaders: s
      } = {
        countRows: 0,
        countCols: 0,
        countRowHeaders: 0,
        countColHeaders: 0,
        ...e
      };
      return !(!Number.isInteger(this.row) || !Number.isInteger(this.col) || this.row < -s || this.col < -r || this.row >= t || this.col >= i);
    }
    /**
     * Checks if another set of coordinates (`coords`)
     * is equal to the coordinates in your `CellCoords` instance.
     *
     * @param {CellCoords} coords Coordinates to check.
     * @returns {boolean}
     */
    isEqual(e) {
      return e === this ? !0 : this.row === e.row && this.col === e.col;
    }
    /**
     * Checks if the coordinates point to the headers range. If one of the axis (row or col) point to
     * the header (negative value) then method returns `true`.
     *
     * @returns {boolean}
     */
    isHeader() {
      return !this.isCell();
    }
    /**
     * Checks if the coordinates point to the cells range. If all axis (row and col) point to
     * the cell (positive value) then method returns `true`.
     *
     * @returns {boolean}
     */
    isCell() {
      return this.row >= 0 && this.col >= 0;
    }
    /**
     * Checks if the coordinates runs in RTL mode.
     *
     * @returns {boolean}
     */
    isRtl() {
      return jf(Ml, this);
    }
    /**
     * Checks if another set of coordinates (`testedCoords`)
     * is south-east of the coordinates in your `CellCoords` instance.
     *
     * @param {CellCoords} testedCoords Coordinates to check.
     * @returns {boolean}
     */
    isSouthEastOf(e) {
      return this.row >= e.row && (jf(Ml, this) ? this.col <= e.col : this.col >= e.col);
    }
    /**
     * Checks if another set of coordinates (`testedCoords`)
     * is north-west of the coordinates in your `CellCoords` instance.
     *
     * @param {CellCoords} testedCoords Coordinates to check.
     * @returns {boolean}
     */
    isNorthWestOf(e) {
      return this.row <= e.row && (jf(Ml, this) ? this.col >= e.col : this.col <= e.col);
    }
    /**
     * Checks if another set of coordinates (`testedCoords`)
     * is south-west of the coordinates in your `CellCoords` instance.
     *
     * @param {CellCoords} testedCoords Coordinates to check.
     * @returns {boolean}
     */
    isSouthWestOf(e) {
      return this.row >= e.row && (jf(Ml, this) ? this.col >= e.col : this.col <= e.col);
    }
    /**
     * Checks if another set of coordinates (`testedCoords`)
     * is north-east of the coordinates in your `CellCoords` instance.
     *
     * @param {CellCoords} testedCoords Coordinates to check.
     * @returns {boolean}
     */
    isNorthEastOf(e) {
      return this.row <= e.row && (jf(Ml, this) ? this.col <= e.col : this.col >= e.col);
    }
    /**
     * Normalizes the coordinates in your `CellCoords` instance to the nearest valid position.
     *
     * Coordinates that point to headers (negative values) are normalized to `0`.
     *
     * @returns {CellCoords}
     */
    normalize() {
      return this.row = this.row === null ? this.row : Math.max(this.row, 0), this.col = this.col === null ? this.col : Math.max(this.col, 0), this;
    }
    /**
     * Assigns the coordinates from another `CellCoords` instance (or compatible literal object)
     * to your `CellCoords` instance.
     *
     * @param {CellCoords | { row: number | undefined, col: number | undefined }} coords The CellCoords
     * instance or compatible literal object.
     * @returns {CellCoords}
     */
    assign(e) {
      return Number.isInteger(e == null ? void 0 : e.row) && (this.row = e.row), Number.isInteger(e == null ? void 0 : e.col) && (this.col = e.col), e instanceof rf && vV(Ml, this, e.isRtl()), this;
    }
    /**
     * Clones your `CellCoords` instance.
     *
     * @returns {CellCoords}
     */
    clone() {
      return new rf(this.row, this.col, jf(Ml, this));
    }
    /**
     * Converts your `CellCoords` instance into an object literal with `row` and `col` properties.
     *
     * @returns {{row: number, col: number}} An object literal with `row` and `col` properties.
     */
    toObject() {
      return {
        row: this.row,
        col: this.col
      };
    }
  }
  function X_e(n, e, t) {
    Z_e(n, e), e.set(n, t);
  }
  function Z_e(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function aT(n, e, t) {
    return (e = Q_e(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function Q_e(n) {
    var e = J_e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function J_e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function Ns(n, e) {
    return n.get($9(n, e));
  }
  function eRe(n, e, t) {
    return n.set($9(n, e), t), t;
  }
  function $9(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var $r = /* @__PURE__ */ new WeakMap();
  class dy {
    constructor(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : e, i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : e, r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
      aT(this, "highlight", null), aT(this, "from", null), aT(this, "to", null), X_e(this, $r, !1), this.highlight = e.clone(), this.from = t.clone(), this.to = i.clone(), eRe($r, this, r);
    }
    /**
     * Highlights cell selection at the `coords` coordinates.
     *
     * @param {CellCoords} coords Coordinates to use.
     * @returns {CellRange}
     */
    setHighlight(e) {
      return this.highlight = e.clone(), this;
    }
    /**
     * Sets the `coords` coordinates as the start of your range.
     *
     * @param {CellCoords} coords Coordinates to use.
     * @returns {CellRange}
     */
    setFrom(e) {
      return this.from = e.clone(), this;
    }
    /**
     * Sets the `coords` coordinates as the end of your range.
     *
     * @param {CellCoords} coords Coordinates to use.
     * @returns {CellRange}
     */
    setTo(e) {
      return this.to = e.clone(), this;
    }
    /**
     * Checks if the coordinates in your `CellRange` instance are valid
     * in the context of given table parameters.
     *
     * See the [`isValid()`](@/api/cellCoords.md#isvalid) method of the [`CellCoords`](@/api/cellCoords.md) class.
     *
     * @param {object} tableParams An object with a defined table size.
     * @param {number} tableParams.countRows The total number of rows.
     * @param {number} tableParams.countCols The total number of columns.
     * @param {number} tableParams.countRowHeaders A number of row headers.
     * @param {number} tableParams.countColHeaders A number of column headers.
     * @returns {boolean}
     */
    isValid(e) {
      return this.from.isValid(e) && this.to.isValid(e);
    }
    /**
     * Checks if your range is just a single cell or header.
     *
     * @returns {boolean}
     */
    isSingle() {
      return this.isSingleCell() || this.isSingleHeader();
    }
    /**
     * Checks if your range is just a single cell.
     *
     * @returns {boolean}
     */
    isSingleCell() {
      return this.from.row >= 0 && this.from.row === this.to.row && this.from.col >= 0 && this.from.col === this.to.col;
    }
    /**
     * Checks if your range is just a single header.
     *
     * @returns {boolean}
     */
    isSingleHeader() {
      return (this.from.row < 0 || this.from.col < 0) && this.from.row === this.to.row && this.from.col === this.to.col;
    }
    /**
     * Checks if your range covers only headers range (negative coordinates, without any cells).
     *
     * @returns {boolean}
     */
    isHeader() {
      return this.from.isHeader() && this.to.isHeader() ? !0 : this.from.col < 0 && this.to.col < 0 || this.from.row < 0 && this.to.row < 0;
    }
    /**
     * Checks if your range overlaps headers range (negative coordinates).
     *
     * @returns {boolean}
     */
    containsHeaders() {
      return this.from.isHeader() || this.to.isHeader();
    }
    /**
     * Returns the height of your range (as a number of rows, including row headers).
     *
     * @returns {number}
     */
    getOuterHeight() {
      return Math.max(this.from.row, this.to.row) - Math.min(this.from.row, this.to.row) + 1;
    }
    /**
     * Returns the width of your range (as a number of columns, including column headers).
     *
     * @returns {number}
     */
    getOuterWidth() {
      return Math.max(this.from.col, this.to.col) - Math.min(this.from.col, this.to.col) + 1;
    }
    /**
     * Returns the height of your range (as a number of rows, excluding row headers).
     *
     * @returns {number}
     */
    getHeight() {
      if (this.from.row < 0 && this.to.row < 0)
        return 0;
      const e = Math.max(this.from.row, 0), t = Math.max(this.to.row, 0);
      return Math.max(e, t) - Math.min(e, t) + 1;
    }
    /**
     * Returns the width of your range (as a number of columns, excluding column headers).
     *
     * @returns {number}
     */
    getWidth() {
      if (this.from.col < 0 && this.to.col < 0)
        return 0;
      const e = Math.max(this.from.col, 0), t = Math.max(this.to.col, 0);
      return Math.max(e, t) - Math.min(e, t) + 1;
    }
    /**
     * Returns the number of cells within your range (excluding column and row headers).
     *
     * @returns {number}
     */
    getCellsCount() {
      return this.getWidth() * this.getHeight();
    }
    /**
     * Checks if another set of coordinates (`cellCoords`)
     * is within the `from` and `to` coordinates of your range.
     *
     * @param {CellCoords} cellCoords Coordinates to check.
     * @returns {boolean}
     */
    includes(e) {
      const {
        row: t,
        col: i
      } = e, r = this.getOuterTopStartCorner(), s = this.getOuterBottomEndCorner();
      return r.row <= t && s.row >= t && r.col <= i && s.col >= i;
    }
    /**
     * Checks if another range (`cellRange`) is within your range.
     *
     * @param {CellRange} cellRange A range to check.
     * @returns {boolean}
     */
    includesRange(e) {
      return this.includes(e.getOuterTopStartCorner()) && this.includes(e.getOuterBottomEndCorner());
    }
    /**
     * Checks if another range (`cellRange`) is equal to your range.
     *
     * @param {CellRange} cellRange A range to check.
     * @returns {boolean}
     */
    isEqual(e) {
      return Math.min(this.from.row, this.to.row) === Math.min(e.from.row, e.to.row) && Math.max(this.from.row, this.to.row) === Math.max(e.from.row, e.to.row) && Math.min(this.from.col, this.to.col) === Math.min(e.from.col, e.to.col) && Math.max(this.from.col, this.to.col) === Math.max(e.from.col, e.to.col);
    }
    /**
     * Checks if another range (`cellRange`) overlaps your range.
     *
     * Range A overlaps range B if the intersection of A and B (or B and A) is not empty.
     *
     * @param {CellRange} cellRange A range to check.
     * @returns {boolean}
     */
    overlaps(e) {
      return e.isSouthEastOf(this.getOuterTopLeftCorner()) && e.isNorthWestOf(this.getOuterBottomRightCorner());
    }
    /**
     * Checks if coordinates point is south-east of your range.
     *
     * @param {CellCoords} cellCoords Coordinates to check.
     * @returns {boolean}
     */
    isSouthEastOf(e) {
      return this.getOuterTopLeftCorner().isSouthEastOf(e) || this.getOuterBottomRightCorner().isSouthEastOf(e);
    }
    /**
     * Checks if coordinates point is north-west of your range.
     *
     * @param {CellRange} cellCoords Coordinates to check.
     * @returns {boolean}
     */
    isNorthWestOf(e) {
      return this.getOuterTopLeftCorner().isNorthWestOf(e) || this.getOuterBottomRightCorner().isNorthWestOf(e);
    }
    /**
     * Checks if another range (`cellRange`) overlaps your range horizontally.
     *
     * For example: returns `true` if the last column of your range is `5`
     * and the first column of the `cellRange` range is `3`.
     *
     * @param {CellRange} cellRange A range to check.
     * @returns {boolean}
     */
    isOverlappingHorizontally(e) {
      return this.getOuterTopEndCorner().col >= e.getOuterTopStartCorner().col && this.getOuterTopEndCorner().col <= e.getOuterTopEndCorner().col || this.getOuterTopStartCorner().col <= e.getOuterTopEndCorner().col && this.getOuterTopStartCorner().col >= e.getOuterTopStartCorner().col;
    }
    /**
     * Checks if another range (`cellRange`) overlaps your range vertically.
     *
     * For example: returns `true` if the last row of your range is `5`
     * and the first row of the `cellRange` range is `3`.
     *
     * @param {CellRange} cellRange A range to check.
     * @returns {boolean}
     */
    isOverlappingVertically(e) {
      return this.getOuterBottomStartCorner().row >= e.getOuterTopRightCorner().row && this.getOuterBottomStartCorner().row <= e.getOuterBottomStartCorner().row || this.getOuterTopEndCorner().row <= e.getOuterBottomStartCorner().row && this.getOuterTopEndCorner().row >= e.getOuterTopRightCorner().row;
    }
    /**
     * Adds a cell to your range, at `cellCoords` coordinates.
     *
     * The `cellCoords` coordinates must exceed a corner of your range.
     *
     * @param {CellCoords} cellCoords A new cell's coordinates.
     * @returns {boolean}
     */
    expand(e) {
      const t = this.getOuterTopStartCorner(), i = this.getOuterBottomEndCorner();
      return e.row < t.row || e.col < t.col || e.row > i.row || e.col > i.col ? (this.from = this._createCellCoords(Math.min(t.row, e.row), Math.min(t.col, e.col)), this.to = this._createCellCoords(Math.max(i.row, e.row), Math.max(i.col, e.col)), !0) : !1;
    }
    /**
     * Expand your range with another range (`expandingRange`).
     *
     * @param {CellRange} expandingRange A new range.
     * @param {boolean} [changeDirection=true] If `true`, the direction of your range is changed to the direction
     * of the `expandingRange` range.
     * @returns {boolean}
     */
    expandByRange(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
      if (this.includesRange(e) || !this.overlaps(e))
        return !1;
      const i = this.getOuterTopStartCorner(), r = this.getOuterBottomEndCorner(), s = this.getDirection(), o = e.getOuterTopStartCorner(), a = e.getOuterBottomEndCorner(), l = Math.min(i.row, o.row), c = Math.min(i.col, o.col), u = Math.max(r.row, a.row), h = Math.max(r.col, a.col), d = this._createCellCoords(l, c), f = this._createCellCoords(u, h);
      return this.from = d, this.to = f, this.setDirection(s), t && (this.highlight.row === this.getOuterBottomRightCorner().row && this.getVerticalDirection() === "N-S" && this.flipDirectionVertically(), this.highlight.col === this.getOuterTopRightCorner().col && this.getHorizontalDirection() === "W-E" && this.flipDirectionHorizontally()), !0;
    }
    /**
     * Gets the direction of the selection.
     *
     * @returns {string} Returns one of the values: `'NW-SE'`, `'NE-SW'`, `'SE-NW'`, `'SW-NE'`.
     */
    getDirection() {
      if (this.from.isNorthWestOf(this.to))
        return "NW-SE";
      if (this.from.isNorthEastOf(this.to))
        return "NE-SW";
      if (this.from.isSouthEastOf(this.to))
        return "SE-NW";
      if (this.from.isSouthWestOf(this.to))
        return "SW-NE";
    }
    /**
     * Sets the direction of the selection.
     *
     * @param {string} direction One of the values: `'NW-SE'`, `'NE-SW'`, `'SE-NW'`, `'SW-NE'`.
     */
    setDirection(e) {
      switch (e) {
        case "NW-SE":
          [this.from, this.to] = [this.getOuterTopLeftCorner(), this.getOuterBottomRightCorner()];
          break;
        case "NE-SW":
          [this.from, this.to] = [this.getOuterTopRightCorner(), this.getOuterBottomLeftCorner()];
          break;
        case "SE-NW":
          [this.from, this.to] = [this.getOuterBottomRightCorner(), this.getOuterTopLeftCorner()];
          break;
        case "SW-NE":
          [this.from, this.to] = [this.getOuterBottomLeftCorner(), this.getOuterTopRightCorner()];
          break;
      }
    }
    /**
     * Gets the vertical direction of the selection.
     *
     * @returns {string} Returns one of the values: `N-S` (north->south), `S-N` (south->north).
     */
    getVerticalDirection() {
      return ["NE-SW", "NW-SE"].indexOf(this.getDirection()) > -1 ? "N-S" : "S-N";
    }
    /**
     * Gets the horizontal direction of the selection.
     *
     * @returns {string} Returns one of the values: `W-E` (west->east), `E-W` (east->west).
     */
    getHorizontalDirection() {
      return ["NW-SE", "SW-NE"].indexOf(this.getDirection()) > -1 ? "W-E" : "E-W";
    }
    /**
     * Flips the direction of your range vertically (e.g., `NW-SE` changes to `SW-NE`).
     */
    flipDirectionVertically() {
      switch (this.getDirection()) {
        case "NW-SE":
          this.setDirection("SW-NE");
          break;
        case "NE-SW":
          this.setDirection("SE-NW");
          break;
        case "SE-NW":
          this.setDirection("NE-SW");
          break;
        case "SW-NE":
          this.setDirection("NW-SE");
          break;
      }
    }
    /**
     * Flips the direction of your range horizontally (e.g., `NW-SE` changes to `NE-SW`).
     */
    flipDirectionHorizontally() {
      switch (this.getDirection()) {
        case "NW-SE":
          this.setDirection("NE-SW");
          break;
        case "NE-SW":
          this.setDirection("NW-SE");
          break;
        case "SE-NW":
          this.setDirection("SW-NE");
          break;
        case "SW-NE":
          this.setDirection("SE-NW");
          break;
      }
    }
    /**
     * Gets the top-left (in LTR) or top-right (in RTL) corner coordinates of your range.
     *
     * If the corner contains header coordinates (negative values),
     * the corner coordinates are normalized to `0`.
     *
     * @returns {CellCoords}
     */
    getTopStartCorner() {
      return this._createCellCoords(Math.min(this.from.row, this.to.row), Math.min(this.from.col, this.to.col)).normalize();
    }
    /**
     * Gets the top-left corner coordinates of your range,
     * both in the LTR and RTL layout direction.
     *
     * If the corner contains header coordinates (negative values),
     * the corner coordinates are normalized to `0`.
     *
     * @returns {CellCoords}
     */
    getTopLeftCorner() {
      return Ns($r, this) ? this.getTopEndCorner() : this.getTopStartCorner();
    }
    /**
     * Gets the bottom right (in LTR) or bottom left (in RTL) corner coordinates of your range.
     *
     * If the corner contains header coordinates (negative values),
     * the corner coordinates are normalized to `0`.
     *
     * @returns {CellCoords}
     */
    getBottomEndCorner() {
      return this._createCellCoords(Math.max(this.from.row, this.to.row), Math.max(this.from.col, this.to.col)).normalize();
    }
    /**
     * Gets the bottom right corner coordinates of your range,
     * both in the LTR and RTL layout direction.
     *
     * If the corner contains header coordinates (negative values),
     * the corner coordinates are normalized to `0`.
     *
     * @returns {CellCoords}
     */
    getBottomRightCorner() {
      return Ns($r, this) ? this.getBottomStartCorner() : this.getBottomEndCorner();
    }
    /**
     * Gets the top right (in LTR) or top left (in RTL) corner coordinates of your range.
     *
     * If the corner contains header coordinates (negative values),
     * the corner coordinates are normalized to `0`.
     *
     * @returns {CellCoords}
     */
    getTopEndCorner() {
      return this._createCellCoords(Math.min(this.from.row, this.to.row), Math.max(this.from.col, this.to.col)).normalize();
    }
    /**
     * Gets the top right corner coordinates of your range,
     * both in the LTR and RTL layout direction.
     *
     * If the corner contains header coordinates (negative values),
     * the corner coordinates are normalized to `0`.
     *
     * @returns {CellCoords}
     */
    getTopRightCorner() {
      return Ns($r, this) ? this.getTopStartCorner() : this.getTopEndCorner();
    }
    /**
     * Gets the bottom left (in LTR) or bottom right (in RTL) corner coordinates of your range.
     *
     * If the corner contains header coordinates (negative values),
     * the corner coordinates are normalized to `0`.
     *
     * @returns {CellCoords}
     */
    getBottomStartCorner() {
      return this._createCellCoords(Math.max(this.from.row, this.to.row), Math.min(this.from.col, this.to.col)).normalize();
    }
    /**
     * Gets the bottom left corner coordinates of your range,
     * both in the LTR and RTL layout direction.
     *
     * If the corner contains header coordinates (negative values),
     * the corner coordinates are normalized to `0`.
     *
     * @returns {CellCoords}
     */
    getBottomLeftCorner() {
      return Ns($r, this) ? this.getBottomEndCorner() : this.getBottomStartCorner();
    }
    /**
     * Gets the top left (in LTR) or top right (in RTL) corner coordinates of your range.
     *
     * If the corner contains header coordinates (negative values),
     * the top and start coordinates are pointed to that header.
     *
     * @returns {CellCoords}
     */
    getOuterTopStartCorner() {
      return this._createCellCoords(Math.min(this.from.row, this.to.row), Math.min(this.from.col, this.to.col));
    }
    /**
     * Gets the top left corner coordinates of your range,
     * both in the LTR and RTL layout direction.
     *
     * If the corner contains header coordinates (negative values),
     * the top and left coordinates are pointed to that header.
     *
     * @returns {CellCoords}
     */
    getOuterTopLeftCorner() {
      return Ns($r, this) ? this.getOuterTopEndCorner() : this.getOuterTopStartCorner();
    }
    /**
     * Gets the bottom right (in LTR) or bottom left (in RTL) corner coordinates of your range.
     *
     * If the corner contains header coordinates (negative values),
     * the top and start coordinates are pointed to that header.
     *
     * @returns {CellCoords}
     */
    getOuterBottomEndCorner() {
      return this._createCellCoords(Math.max(this.from.row, this.to.row), Math.max(this.from.col, this.to.col));
    }
    /**
     * Gets the bottom right corner coordinates of your range,
     * both in the LTR and RTL layout direction.
     *
     * If the corner contains header coordinates (negative values),
     * the top and left coordinates are pointed to that header.
     *
     * @returns {CellCoords}
     */
    getOuterBottomRightCorner() {
      return Ns($r, this) ? this.getOuterBottomStartCorner() : this.getOuterBottomEndCorner();
    }
    /**
     * Gets the top right (in LTR) or top left (in RTL) corner coordinates of your range.
     *
     * If the corner contains header coordinates (negative values),
     * the top and start coordinates are pointed to that header.
     *
     * @returns {CellCoords}
     */
    getOuterTopEndCorner() {
      return this._createCellCoords(Math.min(this.from.row, this.to.row), Math.max(this.from.col, this.to.col));
    }
    /**
     * Gets the top right corner coordinates of your range,
     * both in the LTR and RTL layout direction.
     *
     * If the corner contains header coordinates (negative values),
     * the top and left coordinates are pointed to that header.
     *
     * @returns {CellCoords}
     */
    getOuterTopRightCorner() {
      return Ns($r, this) ? this.getOuterTopStartCorner() : this.getOuterTopEndCorner();
    }
    /**
     * Gets the bottom left (in LTR) or bottom right (in RTL) corner coordinates of your range.
     *
     * If the corner contains header coordinates (negative values),
     * the top and start coordinates are pointed to that header.
     *
     * @returns {CellCoords}
     */
    getOuterBottomStartCorner() {
      return this._createCellCoords(Math.max(this.from.row, this.to.row), Math.min(this.from.col, this.to.col));
    }
    /**
     * Gets the bottom left corner coordinates of your range,
     * both in the LTR and RTL layout direction.
     *
     * If the corner contains header coordinates (negative values),
     * the top and left coordinates are pointed to that header.
     *
     * @returns {CellCoords}
     */
    getOuterBottomLeftCorner() {
      return Ns($r, this) ? this.getOuterBottomEndCorner() : this.getOuterBottomStartCorner();
    }
    /**
     * Checks if a set of coordinates (`coords`) matches one of the 4 corners of your range.
     *
     * @param {CellCoords} coords Coordinates to check.
     * @returns {boolean}
     */
    isCorner(e) {
      return e.isEqual(this.getOuterTopLeftCorner()) || e.isEqual(this.getOuterTopRightCorner()) || e.isEqual(this.getOuterBottomLeftCorner()) || e.isEqual(this.getOuterBottomRightCorner());
    }
    /**
     * Gets the coordinates of a range corner opposite to the provided `coords`.
     *
     * For example: if the `coords` coordinates match the bottom-right corner of your range,
     * the coordinates of the top-left corner of your range are returned.
     *
     * @param {CellCoords} coords Coordinates to check.
     * @returns {CellCoords}
     */
    getOppositeCorner(e) {
      if (!(e instanceof rf))
        return !1;
      if (e.isEqual(this.getOuterBottomEndCorner()))
        return this.getOuterTopStartCorner();
      if (e.isEqual(this.getOuterTopStartCorner()))
        return this.getOuterBottomEndCorner();
      if (e.isEqual(this.getOuterTopEndCorner()))
        return this.getOuterBottomStartCorner();
      if (e.isEqual(this.getOuterBottomStartCorner()))
        return this.getOuterTopEndCorner();
    }
    /**
     * Indicates which borders (top, right, bottom, left) are shared between
     * your `CellRange`instance and another `range` that's within your range.
     *
     * @param {CellRange} range A range to compare with.
     * @returns {Array<'top' | 'right' | 'bottom' | 'left'>}
     */
    getBordersSharedWith(e) {
      if (!this.includesRange(e))
        return [];
      const t = {
        top: Math.min(this.from.row, this.to.row),
        bottom: Math.max(this.from.row, this.to.row),
        left: Math.min(this.from.col, this.to.col),
        right: Math.max(this.from.col, this.to.col)
      }, i = {
        top: Math.min(e.from.row, e.to.row),
        bottom: Math.max(e.from.row, e.to.row),
        left: Math.min(e.from.col, e.to.col),
        right: Math.max(e.from.col, e.to.col)
      }, r = [];
      return t.top === i.top && r.push("top"), t.right === i.right && r.push(Ns($r, this) ? "left" : "right"), t.bottom === i.bottom && r.push("bottom"), t.left === i.left && r.push(Ns($r, this) ? "right" : "left"), r;
    }
    /**
     * Gets the coordinates of the inner cells of your range.
     *
     * @returns {CellCoords[]}
     */
    getInner() {
      const e = this.getOuterTopStartCorner(), t = this.getOuterBottomEndCorner(), i = [];
      for (let r = e.row; r <= t.row; r++)
        for (let s = e.col; s <= t.col; s++)
          !(this.from.row === r && this.from.col === s) && !(this.to.row === r && this.to.col === s) && i.push(this._createCellCoords(r, s));
      return i;
    }
    /**
     * Gets the coordinates of all cells of your range.
     *
     * @returns {CellCoords[]}
     */
    getAll() {
      const e = this.getOuterTopStartCorner(), t = this.getOuterBottomEndCorner(), i = [];
      for (let r = e.row; r <= t.row; r++)
        for (let s = e.col; s <= t.col; s++)
          e.row === r && e.col === s ? i.push(e) : t.row === r && t.col === s ? i.push(t) : i.push(this._createCellCoords(r, s));
      return i;
    }
    /**
     * Runs a callback function on all cells within your range.
     *
     * You can break the iteration by returning `false` in the callback function.
     *
     * @param {function(number, number): boolean} callback A callback function.
     */
    forAll(e) {
      const t = this.getOuterTopStartCorner(), i = this.getOuterBottomEndCorner();
      for (let r = t.row; r <= i.row; r++)
        for (let s = t.col; s <= i.col; s++)
          if (e(r, s) === !1)
            return;
    }
    /**
     * Clones your `CellRange` instance.
     *
     * @returns {CellRange}
     */
    clone() {
      return new dy(this.highlight, this.from, this.to, Ns($r, this));
    }
    /**
     * Converts your `CellRange` instance into an object literal with the following properties:
     *
     * - `from`
     *    - `row`
     *    - `col`
     * - `to`
     *    - `row`
     *    - `col`
     *
     * @returns {{from: {row: number, col: number}, to: {row: number, col: number}}} An object literal with `from` and `to` properties.
     */
    toObject() {
      return {
        from: this.from.toObject(),
        to: this.to.toObject()
      };
    }
    /**
     * Creates and returns a new instance of the `CellCoords` class.
     *
     * The new `CellCoords` instance automatically inherits the LTR/RTL flag
     * from your `CellRange` instance.
     *
     * @private
     * @param {number} row A row index.
     * @param {number} column A column index.
     * @returns {CellCoords}
     */
    _createCellCoords(e, t) {
      return new rf(e, t, Ns($r, this));
    }
  }
  function fa(n, e, t) {
    tRe(n, e), e.set(n, t);
  }
  function tRe(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function Fe(n, e) {
    return n.get(F9(n, e));
  }
  function Yc(n, e, t) {
    return n.set(F9(n, e), t), t;
  }
  function F9(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var Ls = /* @__PURE__ */ new WeakMap(), lT = /* @__PURE__ */ new WeakMap(), Ti = /* @__PURE__ */ new WeakMap(), zf = /* @__PURE__ */ new WeakMap(), p0 = /* @__PURE__ */ new WeakMap(), xo = /* @__PURE__ */ new WeakMap(), cT = /* @__PURE__ */ new WeakMap(), Hm = /* @__PURE__ */ new WeakMap(), _h = /* @__PURE__ */ new WeakMap(), ga = /* @__PURE__ */ new WeakMap();
  let B9 = class {
    /**
     * @param {FacadeGetter} facadeGetter Gets an instance facade.
     * @param {DomBindings} domBindings Bindings into dom.
     * @param {Settings} wtSettings The walkontable settings.
     * @param {EventManager} eventManager The walkontable event manager.
     * @param {Table} wtTable The table.
     * @param {SelectionManager} selectionManager Selections.
     * @param {Event} [parent=null] The main Event instance.
     */
    constructor(e, t, i, r, s, o) {
      let a = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      fa(this, Ls, void 0), fa(this, lT, void 0), fa(this, Ti, void 0), fa(this, zf, void 0), fa(this, p0, void 0), fa(this, xo, void 0), fa(this, cT, void 0), fa(this, Hm, void 0), fa(this, _h, [null, null]), fa(this, ga, [null, null]), Yc(Ls, this, i), Yc(lT, this, t), Yc(Ti, this, s), Yc(zf, this, o), Yc(p0, this, a), Yc(xo, this, r), Yc(cT, this, e), this.registerEvents();
    }
    /**
     * Adds listeners for mouse and touch events.
     *
     * @private
     */
    registerEvents() {
      Fe(xo, this).addEventListener(Fe(Ti, this).holder, "contextmenu", (i) => this.onContextMenu(i)), Fe(xo, this).addEventListener(Fe(Ti, this).TABLE, "mouseover", (i) => this.onMouseOver(i)), Fe(xo, this).addEventListener(Fe(Ti, this).TABLE, "mouseout", (i) => this.onMouseOut(i));
      const e = () => {
        Fe(xo, this).addEventListener(Fe(Ti, this).holder, "touchstart", (i) => this.onTouchStart(i)), Fe(xo, this).addEventListener(Fe(Ti, this).holder, "touchend", (i) => this.onTouchEnd(i)), this.momentumScrolling || (this.momentumScrolling = {}), Fe(xo, this).addEventListener(Fe(Ti, this).holder, "scroll", () => {
          clearTimeout(this.momentumScrolling._timeout), this.momentumScrolling.ongoing || Fe(Ls, this).getSetting("onBeforeTouchScroll"), this.momentumScrolling.ongoing = !0, this.momentumScrolling._timeout = setTimeout(() => {
            this.touchApplied || (this.momentumScrolling.ongoing = !1, Fe(Ls, this).getSetting("onAfterMomentumScroll"));
          }, 200);
        });
      }, t = () => {
        Fe(xo, this).addEventListener(Fe(Ti, this).holder, "mouseup", (i) => this.onMouseUp(i)), Fe(xo, this).addEventListener(Fe(Ti, this).holder, "mousedown", (i) => this.onMouseDown(i));
      };
      fc() ? e() : (yD() && e(), t());
    }
    /**
     * Checks if an element is already selected.
     *
     * @private
     * @param {Element} touchTarget An element to check.
     * @returns {boolean}
     */
    selectedCellWasTouched(e) {
      const i = this.parentCell(e).coords;
      if (Fe(Hm, this) && i) {
        const [r, s] = [i.row, Fe(Hm, this).from.row], [o, a] = [i.col, Fe(Hm, this).from.col];
        return r === s && o === a;
      }
      return !1;
    }
    /**
     * Gets closest TD or TH element.
     *
     * @private
     * @param {Element} elem An element from the traversing starts.
     * @returns {object} Contains coordinates and reference to TD or TH if it exists. Otherwise it's empty object.
     */
    parentCell(e) {
      const t = {}, i = Fe(Ti, this).TABLE, r = Fb(e, ["TD", "TH"], i);
      return r ? (t.coords = Fe(Ti, this).getCoords(r), t.TD = r) : Ue(e, "wtBorder") && Ue(e, "current") ? (t.coords = Fe(zf, this).getFocusSelection().cellRange.highlight, t.TD = Fe(Ti, this).getCell(t.coords)) : Ue(e, "wtBorder") && Ue(e, "area") && Fe(zf, this).getAreaSelection().cellRange && (t.coords = Fe(zf, this).getAreaSelection().cellRange.to, t.TD = Fe(Ti, this).getCell(t.coords)), t;
    }
    /**
     * OnMouseDown callback.
     *
     * @private
     * @param {MouseEvent} event The mouse event object.
     */
    onMouseDown(e) {
      const t = Fe(lT, this).rootDocument.activeElement, i = wD(V7, e.target), r = e.target;
      if (!["TD", "TH"].includes(t.nodeName) && (r === t || i(0) === t || i(1) === t))
        return;
      const s = this.parentCell(r);
      Ue(r, "corner") ? Fe(Ls, this).getSetting("onCellCornerMouseDown", e, r) : s.TD && Fe(Ls, this).has("onCellMouseDown") && this.callListener("onCellMouseDown", e, s.coords, s.TD), (e.button === 0 || this.touchApplied) && s.TD && (Fe(ga, this)[0] = s.TD, clearTimeout(Fe(_h, this)[0]), Fe(_h, this)[0] = setTimeout(() => {
        Fe(ga, this)[0] = null;
      }, 1e3));
    }
    /**
     * OnContextMenu callback.
     *
     * @private
     * @param {MouseEvent} event The mouse event object.
     */
    onContextMenu(e) {
      if (Fe(Ls, this).has("onCellContextMenu")) {
        const t = this.parentCell(e.target);
        t.TD && this.callListener("onCellContextMenu", e, t.coords, t.TD);
      }
    }
    /**
     * OnMouseOver callback.
     *
     * @private
     * @param {MouseEvent} event The mouse event object.
     */
    onMouseOver(e) {
      if (!Fe(Ls, this).has("onCellMouseOver"))
        return;
      const t = Fe(Ti, this).TABLE, i = Fb(e.target, ["TD", "TH"], t), r = Fe(p0, this) || this;
      i && i !== r.lastMouseOver && Hu(i, t) && (r.lastMouseOver = i, this.callListener("onCellMouseOver", e, Fe(Ti, this).getCoords(i), i));
    }
    /**
     * OnMouseOut callback.
     *
     * @private
     * @param {MouseEvent} event The mouse event object.
     */
    onMouseOut(e) {
      if (!Fe(Ls, this).has("onCellMouseOut"))
        return;
      const t = Fe(Ti, this).TABLE, i = Fb(e.target, ["TD", "TH"], t), r = Fb(e.relatedTarget, ["TD", "TH"], t), s = Fe(p0, this) || this;
      i && i !== r && Hu(i, t) && (this.callListener("onCellMouseOut", e, Fe(Ti, this).getCoords(i), i), r === null && (s.lastMouseOver = null));
    }
    /**
     * OnMouseUp callback.
     *
     * @private
     * @param {MouseEvent} event The mouse event object.
     */
    onMouseUp(e) {
      const t = this.parentCell(e.target);
      t.TD && Fe(Ls, this).has("onCellMouseUp") && this.callListener("onCellMouseUp", e, t.coords, t.TD), !(e.button !== 0 && !this.touchApplied) && (t.TD === Fe(ga, this)[0] && t.TD === Fe(ga, this)[1] ? (Ue(e.target, "corner") ? this.callListener("onCellCornerDblClick", e, t.coords, t.TD) : this.callListener("onCellDblClick", e, t.coords, t.TD), Fe(ga, this)[0] = null, Fe(ga, this)[1] = null) : t.TD === Fe(ga, this)[0] && (Fe(ga, this)[1] = t.TD, clearTimeout(Fe(_h, this)[1]), Fe(_h, this)[1] = setTimeout(() => {
        Fe(ga, this)[1] = null;
      }, 500)));
    }
    /**
     * OnTouchStart callback. Simulates mousedown event.
     *
     * @private
     * @param {MouseEvent} event The mouse event object.
     */
    onTouchStart(e) {
      Yc(Hm, this, Fe(zf, this).getFocusSelection().cellRange), this.touchApplied = !0, this.onMouseDown(e);
    }
    /**
     * OnTouchEnd callback. Simulates mouseup event.
     *
     * @private
     * @param {MouseEvent} event The mouse event object.
     */
    onTouchEnd(e) {
      var t;
      const i = e.target, r = (t = this.parentCell(i)) === null || t === void 0 ? void 0 : t.coords, s = ke(r) && r.row >= 0 && r.col >= 0;
      if (e.cancelable && s && Fe(Ls, this).getSetting("isDataViewInstance")) {
        const a = ["A", "BUTTON", "INPUT"];
        _D() && (d9() || f9()) && this.selectedCellWasTouched(i) && !a.includes(i.tagName) ? e.preventDefault() : this.selectedCellWasTouched(i) || e.preventDefault();
      }
      this.onMouseUp(e), this.touchApplied = !1;
    }
    /**
     * Call listener with backward compatibility.
     *
     * @private
     * @param {string} name Name of listener.
     * @param {MouseEvent} event The event object.
     * @param {CellCoords} coords Coordinates.
     * @param {HTMLElement} target Event target.
     */
    callListener(e, t, i, r) {
      const s = Fe(Ls, this).getSettingPure(e);
      s && s(t, i, r, Fe(cT, this).call(this));
    }
    /**
     * Clears double-click timeouts and destroys the internal eventManager instance.
     */
    destroy() {
      clearTimeout(Fe(_h, this)[0]), clearTimeout(Fe(_h, this)[1]), Fe(xo, this).destroy();
    }
  };
  function uT(n, e, t) {
    return (e = nRe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function nRe(n) {
    var e = iRe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function iRe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class rRe {
    /**
     * @param {number} offset The scroll horizontal offset.
     * @param {number} total The total width of the table.
     * @param {number} countTH The number of rendered row headers.
     */
    constructor(e, t, i) {
      uT(this, "offset", void 0), uT(this, "total", void 0), uT(this, "countTH", void 0), this.offset = e, this.total = t, this.countTH = i;
    }
    /**
     * @param {number} index The visual column index.
     * @returns {number}
     */
    offsetted(e) {
      return e + this.offset;
    }
    /**
     * @param {number} index The visual column index.
     * @returns {number}
     */
    unOffsetted(e) {
      return e - this.offset;
    }
    /**
     * @param {number} index The visual column index.
     * @returns {number}
     */
    renderedToSource(e) {
      return this.offsetted(e);
    }
    /**
     * @param {number} index The visual column index.
     * @returns {number}
     */
    sourceToRendered(e) {
      return this.unOffsetted(e);
    }
    /**
     * @param {number} index The visual column index.
     * @returns {number}
     */
    offsettedTH(e) {
      return e - this.countTH;
    }
    /**
     * @param {number} index The visual column index.
     * @returns {number}
     */
    unOffsettedTH(e) {
      return e + this.countTH;
    }
    /**
     * @param {number} index The visual column index.
     * @returns {number}
     */
    visibleRowHeadedColumnToSourceColumn(e) {
      return this.renderedToSource(this.offsettedTH(e));
    }
    /**
     * @param {number} index The visual column index.
     * @returns {number}
     */
    sourceColumnToVisibleRowHeadedColumn(e) {
      return this.unOffsettedTH(this.sourceToRendered(e));
    }
  }
  function hT(n, e, t) {
    return (e = sRe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function sRe(n) {
    var e = oRe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function oRe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class aRe {
    /**
     * @param {number} offset The scroll vertical offset.
     * @param {number} total The total height of the table.
     * @param {number} countTH The number of rendered column headers.
     */
    constructor(e, t, i) {
      hT(this, "offset", void 0), hT(this, "total", void 0), hT(this, "countTH", void 0), this.offset = e, this.total = t, this.countTH = i;
    }
    /**
     * @param {number} index The visual row index.
     * @returns {number}
     */
    offsetted(e) {
      return e + this.offset;
    }
    /**
     * @param {number} index The visual row index.
     * @returns {number}
     */
    unOffsetted(e) {
      return e - this.offset;
    }
    /**
     * @param {number} index The visual row index.
     * @returns {number}
     */
    renderedToSource(e) {
      return this.offsetted(e);
    }
    /**
     * @param {number} index The visual row index.
     * @returns {number}
     */
    sourceToRendered(e) {
      return this.unOffsetted(e);
    }
    /**
     * @param {number} index The visual row index.
     * @returns {number}
     */
    offsettedTH(e) {
      return e - this.countTH;
    }
    /**
     * @param {number} index The visual row index.
     * @returns {number}
     */
    unOffsettedTH(e) {
      return e + this.countTH;
    }
    /**
     * @param {number} index The visual row index.
     * @returns {number}
     */
    visibleColHeadedRowToSourceRow(e) {
      return this.renderedToSource(this.offsettedTH(e));
    }
    /**
     * @param {number} index The visual row index.
     * @returns {number}
     */
    sourceRowToVisibleColHeadedRow(e) {
      return this.unOffsettedTH(this.sourceToRendered(e));
    }
  }
  const lRe = 0, k_ = 1, D_ = 2;
  function m0(n, e, t) {
    return (e = cRe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function cRe(n) {
    var e = uRe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function uRe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class wV {
    constructor() {
      m0(this, "currentSize", 0), m0(this, "nextSize", 0), m0(this, "currentOffset", 0), m0(this, "nextOffset", 0);
    }
    /**
     * Sets new size of the rendered DOM elements.
     *
     * @param {number} size The size.
     */
    setSize(e) {
      this.currentSize = this.nextSize, this.nextSize = e;
    }
    /**
     * Sets new offset.
     *
     * @param {number} offset The offset.
     */
    setOffset(e) {
      this.currentOffset = this.nextOffset, this.nextOffset = e;
    }
  }
  function dT(n, e, t) {
    return (e = hRe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function hRe(n) {
    var e = dRe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function dRe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class fRe {
    constructor() {
      dT(this, "size", new wV()), dT(this, "workingSpace", lRe), dT(this, "sharedSize", null);
    }
    /**
     * Sets the size for rendered elements. It can be a size for rows, cells or size for row
     * headers etc.
     *
     * @param {number} size The size.
     */
    setSize(e) {
      this.size.setSize(e);
    }
    /**
     * Sets the offset for rendered elements. The offset describes the shift between 0 and
     * the first rendered element according to the scroll position.
     *
     * @param {number} offset The offset.
     */
    setOffset(e) {
      this.size.setOffset(e);
    }
    /**
     * Returns ViewSize instance.
     *
     * @returns {ViewSize}
     */
    getViewSize() {
      return this.size;
    }
    /**
     * Checks if this ViewSizeSet is sharing the size with another instance.
     *
     * @returns {boolean}
     */
    isShared() {
      return this.sharedSize instanceof wV;
    }
    /**
     * Checks what working space describes this size instance.
     *
     * @param {number} workingSpace The number which describes the type of the working space (see constants.js).
     * @returns {boolean}
     */
    isPlaceOn(e) {
      return this.workingSpace === e;
    }
    /**
     * Appends the ViewSizeSet instance to this instance that turns it into a shared mode.
     *
     * @param {ViewSizeSet} viewSize The instance of the ViewSizeSet class.
     */
    append(e) {
      this.workingSpace = k_, e.workingSpace = D_, this.sharedSize = e.getViewSize();
    }
    /**
     * Prepends the ViewSize instance to this instance that turns it into a shared mode.
     *
     * @param {ViewSizeSet} viewSize The instance of the ViewSizeSet class.
     */
    prepend(e) {
      this.workingSpace = D_, e.workingSpace = k_, this.sharedSize = e.getViewSize();
    }
  }
  function Uf(n, e, t) {
    return (e = gRe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function gRe(n) {
    var e = pRe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function pRe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class V9 {
    constructor(e, t, i) {
      Uf(this, "rootNode", void 0), Uf(this, "nodesPool", void 0), Uf(this, "sizeSet", new fRe()), Uf(this, "childNodeType", void 0), Uf(this, "visualIndex", 0), Uf(this, "collectedNodes", []), this.rootNode = e, this.nodesPool = t, this.childNodeType = i.toUpperCase();
    }
    /**
     * Sets the size for rendered elements. It can be a size for rows, cells or size for row
     * headers etc. It depends for what table renderer this instance was created.
     *
     * @param {number} size The size.
     * @returns {OrderView}
     */
    setSize(e) {
      return this.sizeSet.setSize(e), this;
    }
    /**
     * Sets the offset for rendered elements. The offset describes the shift between 0 and
     * the first rendered element according to the scroll position.
     *
     * @param {number} offset The offset.
     * @returns {OrderView}
     */
    setOffset(e) {
      return this.sizeSet.setOffset(e), this;
    }
    /**
     * Checks if this instance of the view shares the root node with another instance. This happens only once when
     * a row (TR) as a root node is managed by two OrderView instances. If this happens another DOM injection
     * algorithm is performed to achieve consistent order.
     *
     * @returns {boolean}
     */
    isSharedViewSet() {
      return this.sizeSet.isShared();
    }
    /**
     * Returns rendered DOM element based on visual index.
     *
     * @param {number} visualIndex The visual index.
     * @returns {HTMLElement}
     */
    getNode(e) {
      return e < this.collectedNodes.length ? this.collectedNodes[e] : null;
    }
    /**
     * Returns currently processed DOM element.
     *
     * @returns {HTMLElement}
     */
    getCurrentNode() {
      const e = this.collectedNodes.length;
      return e > 0 ? this.collectedNodes[e - 1] : null;
    }
    /**
     * Returns rendered child count for this instance.
     *
     * @returns {number}
     */
    getRenderedChildCount() {
      const {
        rootNode: e,
        sizeSet: t
      } = this;
      let i = 0;
      if (this.isSharedViewSet()) {
        let r = e.firstElementChild;
        for (; r; ) {
          if (r.tagName === this.childNodeType)
            i += 1;
          else if (t.isPlaceOn(k_))
            break;
          r = r.nextElementSibling;
        }
      } else
        i = e.childElementCount;
      return i;
    }
    /**
     * Setups and prepares all necessary properties and start the rendering process.
     * This method has to be called only once (at the start) for the render cycle.
     */
    start() {
      this.collectedNodes.length = 0, this.visualIndex = 0;
      const {
        rootNode: e,
        sizeSet: t
      } = this, i = this.isSharedViewSet(), {
        nextSize: r
      } = t.getViewSize();
      let s = this.getRenderedChildCount();
      for (; s < r; ) {
        const a = this.nodesPool();
        !i || i && t.isPlaceOn(D_) ? e.appendChild(a) : e.insertBefore(a, e.firstChild), s += 1;
      }
      const o = i && t.isPlaceOn(k_);
      for (; s > r; )
        e.removeChild(o ? e.firstChild : e.lastChild), s -= 1;
    }
    /**
     * Renders the DOM element based on visual index (which is calculated internally).
     * This method has to be called as many times as the size count is met (to cover all previously rendered DOM elements).
     */
    render() {
      const {
        rootNode: e,
        sizeSet: t
      } = this;
      let i = this.visualIndex;
      this.isSharedViewSet() && t.isPlaceOn(D_) && (i += t.sharedSize.nextSize);
      let r = e.childNodes[i];
      if (r.tagName !== this.childNodeType) {
        const s = this.nodesPool();
        e.replaceChild(s, r), r = s;
      }
      this.collectedNodes.push(r), this.visualIndex += 1;
    }
    /**
     * Ends the render process.
     * This method has to be called only once (at the end) for the render cycle.
     */
    end() {
    }
  }
  class W9 extends V9 {
    /**
     * The method results in merging external order view into the current order. This happens only for order views which
     * operate on the same root node.
     *
     * In the table, there is only one scenario when this happens. TR root element
     * has a common root node with cells order view and row headers order view. Both classes have to share
     * information about their order sizes to make proper diff calculations.
     *
     * @param {OrderView} orderView The order view to merging with. The view will be added at the beginning of the list.
     * @returns {SharedOrderView}
     */
    prependView(e) {
      return this.sizeSet.prepend(e.sizeSet), e.sizeSet.append(this.sizeSet), this;
    }
    /**
     * The method results in merging external order view into the current order. This happens only for order views which
     * operate on the same root node.
     *
     * In the table, there is only one scenario when this happens. TR root element
     * has a common root node with cells order view and row headers order view. Both classes have to share
     * information about their order sizes to make proper diff calculations.
     *
     * @param {OrderView} orderView The order view to merging with. The view will be added at the end of the list.
     * @returns {SharedOrderView}
     */
    appendView(e) {
      return this.sizeSet.append(e.sizeSet), e.sizeSet.prepend(this.sizeSet), this;
    }
  }
  function mRe(n, e, t) {
    return (e = bRe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function bRe(n) {
    var e = vRe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function vRe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class wRe {
    constructor(e) {
      mRe(this, "nodeType", void 0), this.nodeType = e.toUpperCase();
    }
    /**
     * Set document owner for this instance.
     *
     * @param {HTMLDocument} rootDocument The document window owner.
     */
    setRootDocument(e) {
      this.rootDocument = e;
    }
    /**
     * Obtains an element. The returned elements in the feature can be cached.
     *
     * @returns {HTMLElement}
     */
    obtain() {
      return this.rootDocument.createElement(this.nodeType);
    }
  }
  function $m(n, e, t) {
    return (e = yRe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function yRe(n) {
    var e = CRe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function CRe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class fy {
    constructor(e, t) {
      $m(this, "nodesPool", null), $m(this, "nodeType", void 0), $m(this, "rootNode", void 0), $m(this, "table", null), $m(this, "renderedNodes", 0), this.nodesPool = typeof e == "string" ? new wRe(e) : null, this.nodeType = e, this.rootNode = t;
    }
    /**
     * Sets the table renderer instance to the current renderer.
     *
     * @param {TableRenderer} table The TableRenderer instance.
     */
    setTable(e) {
      this.nodesPool && this.nodesPool.setRootDocument(e.rootDocument), this.table = e;
    }
    /**
     * Adjusts the number of rendered nodes.
     */
    adjust() {
    }
    /**
     * Renders the contents to the elements.
     */
    render() {
    }
  }
  function yV(n, e, t) {
    return (e = SRe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function SRe(n) {
    var e = _Re(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function _Re(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class RRe extends fy {
    constructor() {
      super("TH"), yV(this, "orderViews", /* @__PURE__ */ new WeakMap()), yV(this, "sourceRowIndex", 0);
    }
    /**
     * Obtains the instance of the SharedOrderView class which is responsible for rendering the nodes to the root node.
     *
     * @param {HTMLTableRowElement} rootNode The TR element, which is root element for row headers (TH).
     * @returns {SharedOrderView}
     */
    obtainOrderView(e) {
      let t;
      return this.orderViews.has(e) ? t = this.orderViews.get(e) : (t = new W9(e, (i) => this.nodesPool.obtain(this.sourceRowIndex, i), this.nodeType), this.orderViews.set(e, t)), t;
    }
    /**
     * Renders the cells.
     */
    render() {
      const {
        rowsToRender: e,
        rowHeaderFunctions: t,
        rowHeadersCount: i,
        rows: r,
        cells: s
      } = this.table;
      for (let o = 0; o < e; o++) {
        const a = this.table.renderedRowToSource(o), l = r.getRenderedNode(o);
        this.sourceRowIndex = a;
        const c = this.obtainOrderView(l), u = s.obtainOrderView(l);
        c.appendView(u).setSize(i).setOffset(this.table.renderedColumnToSource(0)).start();
        for (let h = 0; h < i; h++) {
          c.render();
          const d = c.getCurrentNode();
          d.className = "", d.removeAttribute("style"), Tf(d, [new RegExp("aria-(.*)"), new RegExp("role")]), this.table.isAriaEnabled() && ze(d, [g0e(), _0e(), cD(h + 1), qp(-1)]), t[h](a, d, h);
        }
        c.end();
      }
    }
  }
  class ERe extends fy {
    constructor(e) {
      super(null, e);
    }
    /**
     * Adjusts the number of the rendered elements.
     */
    adjust() {
      const {
        columnHeadersCount: e,
        rowHeadersCount: t
      } = this.table;
      let i = this.rootNode.firstChild;
      if (e) {
        const {
          columnsToRender: r
        } = this.table, s = r + t;
        for (let a = 0, l = e; a < l; a++) {
          for (i = this.rootNode.childNodes[a], i || (i = this.table.rootDocument.createElement("tr"), this.rootNode.appendChild(i)), this.renderedNodes = i.childNodes.length; this.renderedNodes < s; )
            i.appendChild(this.table.rootDocument.createElement("th")), this.renderedNodes += 1;
          for (; this.renderedNodes > s; )
            i.removeChild(i.lastChild), this.renderedNodes -= 1;
        }
        const o = this.rootNode.childNodes.length;
        if (o > e)
          for (let a = e; a < o; a++)
            this.rootNode.removeChild(this.rootNode.lastChild);
      } else i && ra(i);
    }
    /**
     * Renders the TH elements.
     */
    render() {
      const {
        columnHeadersCount: e
      } = this.table;
      this.table.isAriaEnabled() && ze(this.rootNode, [N7()]);
      for (let t = 0; t < e; t += 1) {
        const {
          columnHeaderFunctions: i,
          columnsToRender: r,
          rowHeadersCount: s
        } = this.table, o = this.rootNode.childNodes[t];
        this.table.isAriaEnabled() && ze(o, [DP(), F7(t + 1)]);
        for (let a = -1 * s; a < r; a += 1) {
          const l = this.table.renderedColumnToSource(a), c = o.childNodes[a + s];
          c.className = "", c.removeAttribute("style"), Tf(c, [new RegExp("aria-(.*)"), new RegExp("role")]), this.table.isAriaEnabled() && ze(c, [cD(a + 1 + this.table.rowHeadersCount), qp(-1), p0e(), ...a >= 0 ? [S0e()] : [
            // Adding `role=row` to the corner headers to prevent
            // https://github.com/handsontable/dev-handsontable/issues/1574
            DP()
          ]]), i[t](l, c, t);
        }
      }
    }
  }
  let CV = !1;
  class xRe extends fy {
    constructor(e) {
      super(null, e);
    }
    /**
     * Adjusts the number of the rendered elements.
     */
    adjust() {
      const {
        columnsToRender: e,
        rowHeadersCount: t
      } = this.table, i = e + t;
      for (; this.renderedNodes < i; )
        this.rootNode.appendChild(this.table.rootDocument.createElement("col")), this.renderedNodes += 1;
      for (; this.renderedNodes > i; )
        this.rootNode.removeChild(this.rootNode.lastChild), this.renderedNodes -= 1;
    }
    /**
     * Renders the col group elements.
     */
    render() {
      this.adjust();
      const {
        columnsToRender: e,
        rowHeadersCount: t
      } = this.table;
      !CV && e > 1e3 && (CV = !0, Yt(Kt`Performance tip: Handsontable rendered more than 1000 visible columns.\x20
        Consider limiting the number of rendered columns by specifying the table width and/or\x20
        turning off the "renderAllColumns" option.`));
      for (let r = 0; r < t; r++) {
        const s = this.table.renderedColumnToSource(r), o = this.table.columnUtils.getHeaderWidth(s);
        this.rootNode.childNodes[r].style.width = `${o}px`;
      }
      for (let r = 0; r < e; r++) {
        const s = this.table.renderedColumnToSource(r), o = this.table.columnUtils.getStretchedColumnWidth(s);
        this.rootNode.childNodes[r + t].style.width = `${o}px`;
      }
      const i = this.rootNode.firstChild;
      i && ue(i, "rowHeader");
    }
  }
  function TRe(n, e, t) {
    return (e = MRe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function MRe(n) {
    var e = ARe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function ARe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  const b0 = {
    rowEven: "ht__row_even",
    rowOdd: "ht__row_odd"
  };
  let SV = !1;
  class PRe extends fy {
    constructor(e) {
      super("TR", e), TRe(this, "orderView", void 0), this.orderView = new V9(e, (t) => this.nodesPool.obtain(t), this.nodeType);
    }
    /**
     * Returns currently rendered node.
     *
     * @param {string} visualIndex Visual index of the rendered node (it always goeas from 0 to N).
     * @returns {HTMLTableRowElement}
     */
    getRenderedNode(e) {
      return this.orderView.getNode(e);
    }
    /**
     * Renders the cells.
     */
    render() {
      const {
        rowsToRender: e
      } = this.table;
      !SV && e > 1e3 && (SV = !0, Yt(Kt`Performance tip: Handsontable rendered more than 1000 visible rows.\x20
        Consider limiting the number of rendered rows by specifying the table height and/or\x20
        turning off the "renderAllRows" option.`)), this.table.isAriaEnabled() && ze(this.rootNode, [N7()]), this.orderView.setSize(e).setOffset(this.table.renderedRowToSource(0)).start();
      for (let r = 0; r < e; r++) {
        this.orderView.render();
        const s = this.orderView.getCurrentNode(), o = this.table.renderedRowToSource(r);
        if (this.table.isAriaEnabled()) {
          var t, i;
          ze(s, [
            DP(),
            // `aria-rowindex` is incremented by both tbody and thead rows.
            F7(o + ((t = (i = this.table.rowUtils) === null || i === void 0 || (i = i.dataAccessObject) === null || i === void 0 ? void 0 : i.columnHeaders.length) !== null && t !== void 0 ? t : 0) + 1)
          ]);
        }
        Ze(s, [b0.rowEven, b0.rowOdd]), (o + 1) % 2 === 0 ? ue(s, b0.rowEven) : ue(s, b0.rowOdd);
      }
      this.orderView.end();
    }
  }
  function _V(n, e, t) {
    return (e = IRe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function IRe(n) {
    var e = ORe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function ORe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class kRe extends fy {
    constructor() {
      super("TD"), _V(this, "orderViews", /* @__PURE__ */ new WeakMap()), _V(this, "sourceRowIndex", 0);
    }
    /**
     * Obtains the instance of the SharedOrderView class which is responsible for rendering the nodes to the root node.
     *
     * @param {HTMLTableRowElement} rootNode The TR element, which is root element for cells (TD).
     * @returns {SharedOrderView}
     */
    obtainOrderView(e) {
      let t;
      return this.orderViews.has(e) ? t = this.orderViews.get(e) : (t = new W9(e, (i) => this.nodesPool.obtain(this.sourceRowIndex, i), this.nodeType), this.orderViews.set(e, t)), t;
    }
    /**
     * Renders the cells.
     */
    render() {
      const {
        rowsToRender: e,
        columnsToRender: t,
        rows: i,
        rowHeaders: r
      } = this.table;
      for (let a = 0; a < e; a++) {
        const l = this.table.renderedRowToSource(a), c = i.getRenderedNode(a);
        this.sourceRowIndex = l;
        const u = this.obtainOrderView(c), h = r.obtainOrderView(c);
        u.prependView(h).setSize(t).setOffset(this.table.renderedColumnToSource(0)).start();
        for (let d = 0; d < t; d++) {
          u.render();
          const f = u.getCurrentNode(), g = this.table.renderedColumnToSource(d);
          if (Ue(f, "hide") || (f.className = ""), f.removeAttribute("style"), f.removeAttribute("dir"), Tf(f, [new RegExp("aria-(.*)"), new RegExp("role")]), this.table.cellRenderer(l, g, f), this.table.isAriaEnabled()) {
            var s, o;
            ze(f, [
              ...f.hasAttribute("role") ? [] : [f0e()],
              qp(-1),
              // `aria-colindex` is incremented by both tbody and thead rows.
              cD(g + ((s = (o = this.table.rowUtils) === null || o === void 0 || (o = o.dataAccessObject) === null || o === void 0 ? void 0 : o.rowHeaders.length) !== null && s !== void 0 ? s : 0) + 1)
            ]);
          }
        }
        u.end();
      }
    }
  }
  function vi(n, e, t) {
    return (e = DRe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function DRe(n) {
    var e = NRe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function NRe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class LRe {
    constructor(e) {
      let {
        cellRenderer: t
      } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      vi(this, "rootNode", void 0), vi(this, "rootDocument", void 0), vi(this, "rowHeaders", null), vi(this, "columnHeaders", null), vi(this, "colGroup", null), vi(this, "rows", null), vi(this, "cells", null), vi(this, "rowFilter", null), vi(this, "columnFilter", null), vi(this, "rowUtils", null), vi(this, "columnUtils", null), vi(this, "rowsToRender", 0), vi(this, "columnsToRender", 0), vi(this, "rowHeaderFunctions", []), vi(this, "rowHeadersCount", 0), vi(this, "columnHeaderFunctions", []), vi(this, "columnHeadersCount", 0), vi(this, "cellRenderer", void 0), vi(this, "activeOverlayName", void 0), this.rootNode = e, this.rootDocument = this.rootNode.ownerDocument, this.cellRenderer = t;
    }
    /**
     * Sets the overlay that is currently rendered. If `null` is provided, the master overlay is set.
     *
     * @param {'inline_start'|'top'|'top_inline_start_corner'|'bottom'|'bottom_inline_start_corner'|'master'} overlayName The overlay name.
     */
    setActiveOverlayName(e) {
      this.activeOverlayName = e;
    }
    /**
     * Set row and column util classes.
     *
     * @param {RowUtils} rowUtils RowUtils instance which provides useful methods related to row sizes.
     * @param {ColumnUtils} columnUtils ColumnUtils instance which provides useful methods related to row sizes.
     */
    setAxisUtils(e, t) {
      this.rowUtils = e, this.columnUtils = t;
    }
    /**
     * Sets viewport size of the table.
     *
     * @param {number} rowsCount An amount of rows to render.
     * @param {number} columnsCount An amount of columns to render.
     */
    setViewportSize(e, t) {
      this.rowsToRender = e, this.columnsToRender = t;
    }
    /**
     * Sets row and column filter instances.
     *
     * @param {RowFilter} rowFilter Row filter instance which contains all necessary information about row index transformation.
     * @param {ColumnFilter} columnFilter Column filter instance which contains all necessary information about row
     * index transformation.
     */
    setFilters(e, t) {
      this.rowFilter = e, this.columnFilter = t;
    }
    /**
     * Sets row and column header functions.
     *
     * @param {Function[]} rowHeaders Row header functions. Factories for creating content for row headers.
     * @param {Function[]} columnHeaders Column header functions. Factories for creating content for column headers.
     */
    setHeaderContentRenderers(e, t) {
      this.rowHeaderFunctions = e, this.rowHeadersCount = e.length, this.columnHeaderFunctions = t, this.columnHeadersCount = t.length;
    }
    /**
     * Sets table renderers.
     *
     * @param {renderers} renderers The renderer units.
     * @param {RowHeadersRenderer} renderers.rowHeaders Row headers renderer.
     * @param {ColumnHeadersRenderer} renderers.columnHeaders Column headers renderer.
     * @param {ColGroupRenderer} renderers.colGroup Col group renderer.
     * @param {RowsRenderer} renderers.rows Rows renderer.
     * @param {CellsRenderer} renderers.cells Cells renderer.
     */
    setRenderers() {
      let {
        rowHeaders: e,
        columnHeaders: t,
        colGroup: i,
        rows: r,
        cells: s
      } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      e.setTable(this), t.setTable(this), i.setTable(this), r.setTable(this), s.setTable(this), this.rowHeaders = e, this.columnHeaders = t, this.colGroup = i, this.rows = r, this.cells = s;
    }
    /**
     * Transforms visual/rendered row index to source index.
     *
     * @param {number} rowIndex Rendered index.
     * @returns {number}
     */
    renderedRowToSource(e) {
      return this.rowFilter.renderedToSource(e);
    }
    /**
     * Transforms visual/rendered column index to source index.
     *
     * @param {number} columnIndex Rendered index.
     * @returns {number}
     */
    renderedColumnToSource(e) {
      return this.columnFilter.renderedToSource(e);
    }
    /**
     * Returns `true` if the accessibility-related ARIA tags should be added to the table, `false` otherwise.
     *
     * @returns {boolean}
     */
    isAriaEnabled() {
      return this.rowUtils.wtSettings.getSetting("ariaTags");
    }
    /**
     * Renders the table.
     */
    render() {
      this.colGroup.adjust(), this.columnHeaders.adjust(), this.rows.adjust(), this.rowHeaders.adjust(), this.columnHeaders.render(), this.rows.render(), this.rowHeaders.render(), this.cells.render(), this.columnUtils.calculateWidths(), this.colGroup.render();
      const {
        rowsToRender: e,
        rows: t
      } = this;
      for (let i = 0; i < e; i++) {
        const r = t.getRenderedNode(i);
        if (r.firstChild) {
          const s = this.renderedRowToSource(i), o = this.rowUtils.getHeightByOverlayName(s, this.activeOverlayName);
          o ? r.firstChild.style.height = `${o - 1}px` : r.firstChild.style.height = "";
        }
      }
    }
  }
  class HRe {
    constructor() {
      let {
        TABLE: e,
        THEAD: t,
        COLGROUP: i,
        TBODY: r,
        rowUtils: s,
        columnUtils: o,
        cellRenderer: a
      } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      this.renderer = new LRe(e, {
        cellRenderer: a
      }), this.renderer.setRenderers({
        rowHeaders: new RRe(),
        columnHeaders: new ERe(t),
        colGroup: new xRe(i),
        rows: new PRe(r),
        cells: new kRe()
      }), this.renderer.setAxisUtils(s, o);
    }
    /**
     * Sets the overlay that is currently rendered. If `null` is provided, the master overlay is set.
     *
     * @param {'inline_start'|'top'|'top_inline_start_corner'|'bottom'|'bottom_inline_start_corner'|'master'} overlayName The overlay name.
     * @returns {Renderer}
     */
    setActiveOverlayName(e) {
      return this.renderer.setActiveOverlayName(e), this;
    }
    /**
     * Sets filter calculators for newly calculated row and column position. The filters are used to transform visual
     * indexes (0 to N) to source indexes provided by Handsontable.
     *
     * @param {RowFilter} rowFilter The row filter instance.
     * @param {ColumnFilter} columnFilter The column filter instance.
     * @returns {Renderer}
     */
    setFilters(e, t) {
      return this.renderer.setFilters(e, t), this;
    }
    /**
     * Sets the viewport size of the rendered table.
     *
     * @param {number} rowsCount An amount of rows to render.
     * @param {number} columnsCount An amount of columns to render.
     * @returns {Renderer}
     */
    setViewportSize(e, t) {
      return this.renderer.setViewportSize(e, t), this;
    }
    /**
     * Sets row and column header functions.
     *
     * @param {Function[]} rowHeaders Row header functions. Factories for creating content for row headers.
     * @param {Function[]} columnHeaders Column header functions. Factories for creating content for column headers.
     * @returns {Renderer}
     */
    setHeaderContentRenderers(e, t) {
      return this.renderer.setHeaderContentRenderers(e, t), this;
    }
    /**
     * Adjusts the table (preparing for render).
     */
    adjust() {
      this.renderer.adjust();
    }
    /**
     * Renders the table.
     */
    render() {
      this.renderer.render();
    }
  }
  function Fm(n, e, t) {
    $Re(n, e), e.set(n, t);
  }
  function $Re(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function v0(n, e, t) {
    return (e = FRe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function FRe(n) {
    var e = BRe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function BRe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function Zi(n, e) {
    return n.get(j9(n, e));
  }
  function Bm(n, e, t) {
    return n.set(j9(n, e), t), t;
  }
  function j9(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var w0 = /* @__PURE__ */ new WeakMap(), Gf = /* @__PURE__ */ new WeakMap(), Vm = /* @__PURE__ */ new WeakMap(), y0 = /* @__PURE__ */ new WeakMap(), Rh = /* @__PURE__ */ new WeakMap();
  class VRe {
    /**
     * @param {ColumnStretchingOptions} options Object with all options specified for column viewport calculation.
     */
    constructor(e) {
      let {
        totalColumns: t,
        stretchMode: i,
        stretchingColumnWidthFn: r,
        columnWidthFn: s
      } = e;
      v0(this, "stretchAllRatio", 0), v0(this, "stretchLastWidth", 0), v0(this, "stretchAllColumnsWidth", []), Fm(this, w0, 0), v0(this, "needVerifyLastColumnWidth", !0), Fm(this, Gf, () => 0), Fm(this, Vm, (o) => o), Fm(this, y0, (o) => o), Fm(this, Rh, () => "none"), Bm(Gf, this, t), Bm(Rh, this, i), Bm(Vm, this, r ?? Zi(Vm, this)), Bm(y0, this, s ?? Zi(y0, this));
    }
    /**
     * Recalculate columns stretching.
     *
     * @param {number} totalWidth The total width of the table.
     */
    refreshStretching(e) {
      if (Zi(Rh, this).call(this) === "none")
        return;
      this.stretchAllRatio = 0, this.stretchAllColumnsWidth = [], this.needVerifyLastColumnWidth = !0, this.stretchLastWidth = 0, Bm(w0, this, e);
      let t = 0;
      for (let r = 0; r < Zi(Gf, this).call(this); r++) {
        const s = this._getColumnWidth(r), o = Zi(Vm, this).call(this, void 0, r);
        typeof o == "number" ? e -= o : t += s;
      }
      const i = e - t;
      if (Zi(Rh, this).call(this) === "all" && i > 0)
        this.stretchAllRatio = e / t, this.stretchAllColumnsWidth = [], this.needVerifyLastColumnWidth = !0;
      else if (Zi(Rh, this).call(this) === "last" && e !== 1 / 0) {
        const r = this._getColumnWidth(Zi(Gf, this).call(this) - 1), s = i + r;
        this.stretchLastWidth = s >= 0 ? s : r;
      }
    }
    /**
     * Get stretched column width based on stretchH (all or last) setting passed in handsontable instance.
     *
     * @param {number} column The visual column index.
     * @param {number} baseWidth The default column width.
     * @returns {number|null}
     */
    getStretchedColumnWidth(e, t) {
      let i = null;
      return Zi(Rh, this).call(this) === "all" && this.stretchAllRatio !== 0 ? i = this._getStretchedAllColumnWidth(e, t) : Zi(Rh, this).call(this) === "last" && this.stretchLastWidth !== 0 && (i = this._getStretchedLastColumnWidth(e)), i;
    }
    /**
     * @param {number} column The visual column index.
     * @param {number} baseWidth The default column width.
     * @returns {number}
     * @private
     */
    _getStretchedAllColumnWidth(e, t) {
      let i = 0;
      if (!this.stretchAllColumnsWidth[e]) {
        const r = Math.round(t * this.stretchAllRatio), s = Zi(Vm, this).call(this, r, e);
        s === void 0 ? this.stretchAllColumnsWidth[e] = r : this.stretchAllColumnsWidth[e] = isNaN(s) ? this._getColumnWidth(e) : s;
      }
      if (this.stretchAllColumnsWidth.length === Zi(Gf, this).call(this) && this.needVerifyLastColumnWidth) {
        this.needVerifyLastColumnWidth = !1;
        for (let r = 0; r < this.stretchAllColumnsWidth.length; r++)
          i += this.stretchAllColumnsWidth[r];
        i !== Zi(w0, this) && (this.stretchAllColumnsWidth[this.stretchAllColumnsWidth.length - 1] += Zi(w0, this) - i);
      }
      return this.stretchAllColumnsWidth[e];
    }
    /**
     * @param {number} column The visual column index.
     * @returns {number|null}
     * @private
     */
    _getStretchedLastColumnWidth(e) {
      return e === Zi(Gf, this).call(this) - 1 ? this.stretchLastWidth : null;
    }
    /**
     * @param {number} column The visual column index.
     * @returns {number}
     * @private
     */
    _getColumnWidth(e) {
      let t = Zi(y0, this).call(this, e);
      return isNaN(t) && (t = V1), t;
    }
  }
  function C0(n, e, t) {
    return (e = WRe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function WRe(n) {
    var e = jRe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function jRe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class zRe {
    /**
     * @param {TableDao} dataAccessObject The table Data Access Object.
     * @param {Settings} wtSettings The walkontable settings.
     */
    constructor(e, t) {
      C0(this, "dataAccessObject", void 0), C0(this, "wtSettings", void 0), C0(this, "headerWidths", /* @__PURE__ */ new Map()), C0(this, "stretching", void 0), this.dataAccessObject = e, this.wtSettings = t, this.stretching = new VRe({
        totalColumns: () => this.wtSettings.getSetting("totalColumns"),
        stretchMode: () => this.wtSettings.getSetting("stretchH"),
        stretchingColumnWidthFn: (i, r) => this.wtSettings.getSetting("onBeforeStretchingColumnWidth", i, r),
        columnWidthFn: (i) => this.dataAccessObject.wtTable.getColumnWidth(i)
      });
    }
    /**
     * Returns column width based on passed source index.
     *
     * @param {number} sourceIndex Column source index.
     * @returns {number}
     */
    getWidth(e) {
      return this.wtSettings.getSetting("columnWidth", e) || this.wtSettings.getSetting("defaultColumnWidth");
    }
    /**
     * Returns stretched column width based on passed source index.
     *
     * @param {number} sourceIndex Column source index.
     * @returns {number}
     */
    getStretchedColumnWidth(e) {
      let t = this.getWidth(e);
      const i = this.stretching.getStretchedColumnWidth(e, t);
      return i && (t = i), t;
    }
    /**
     * Returns column header height based on passed header level.
     *
     * @param {number} level Column header level.
     * @returns {number}
     */
    getHeaderHeight(e) {
      let t = this.wtSettings.getSetting("defaultRowHeight");
      const i = this.dataAccessObject.wtViewport.oversizedColumnHeaders[e];
      return i !== void 0 && (t = t ? Math.max(t, i) : i), t;
    }
    /**
     * Returns column header width based on passed source index.
     *
     * @param {number} sourceIndex Column source index.
     * @returns {number}
     */
    getHeaderWidth(e) {
      return this.headerWidths.get(this.dataAccessObject.wtTable.columnFilter.sourceToRendered(e));
    }
    /**
     * Refreshes the stretching column width by recalculating the widths of the columns.
     */
    refreshStretching() {
      const {
        wtTable: e,
        wtViewport: t,
        cloneSource: i
      } = this.dataAccessObject, r = i ? i.wtTable.holder : e.holder, s = r.offsetHeight < r.scrollHeight ? xi() : 0;
      this.stretching.refreshStretching(t.getViewportWidth() - s);
    }
    /**
     * Calculates column header widths that can be retrieved from the cache.
     */
    calculateWidths() {
      const {
        wtSettings: e
      } = this;
      let t = e.getSetting("rowHeaderWidth");
      if (this.refreshStretching(), t = e.getSetting("onModifyRowHeaderWidth", t), t != null) {
        const i = e.getSetting("rowHeaders").length, r = e.getSetting("defaultColumnWidth");
        for (let s = 0; s < i; s++) {
          let o = Array.isArray(t) ? t[s] : t;
          o = o ?? r, this.headerWidths.set(s, o);
        }
      }
    }
  }
  function RV(n, e, t) {
    return (e = URe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function URe(n) {
    var e = GRe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function GRe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class YRe {
    /**
     * @param {TableDao} dataAccessObject The table Data Access Object.
     * @param {Settings} wtSettings The walkontable settings.
     */
    constructor(e, t) {
      RV(this, "dataAccessObject", void 0), RV(this, "wtSettings", void 0), this.dataAccessObject = e, this.wtSettings = t;
    }
    /**
     * Returns row height based on passed source index.
     *
     * @param {number} sourceIndex Row source index.
     * @returns {number}
     */
    getHeight(e) {
      let t = this.wtSettings.getSetting("rowHeight", e);
      const i = this.dataAccessObject.wtViewport.oversizedRows[e];
      return i !== void 0 && (t = t === void 0 ? i : Math.max(t, i)), t;
    }
    /**
     * Returns row height based on passed source index for the specified overlay type.
     *
     * @param {number} sourceIndex Row source index.
     * @param {'inline_start'|'top'|'top_inline_start_corner'|'bottom'|'bottom_inline_start_corner'|'master'} overlayName The overlay name.
     * @returns {number}
     */
    getHeightByOverlayName(e, t) {
      let i = this.wtSettings.getSetting("rowHeightByOverlayName", e, t);
      const r = this.dataAccessObject.wtViewport.oversizedRows[e];
      return r !== void 0 && (i = i === void 0 ? r : Math.max(i, r)), i;
    }
  }
  function pa(n, e, t) {
    return (e = KRe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function KRe(n) {
    var e = qRe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function qRe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  let Qp = class {
    /**
     *
     * @abstract
     * @param {TableDao} dataAccessObject The data access object.
     * @param {FacadeGetter} facadeGetter Function which return proper facade.
     * @param {DomBindings} domBindings Bindings into DOM.
     * @param {Settings} wtSettings The Walkontable settings.
     * @param {'master'|CLONE_TYPES_ENUM} name Overlay name.
     */
    constructor(e, t, i, r, s) {
      pa(this, "wtSettings", null), pa(this, "domBindings", void 0), pa(this, "TBODY", null), pa(this, "THEAD", null), pa(this, "COLGROUP", null), pa(this, "hasTableHeight", !0), pa(this, "hasTableWidth", !0), pa(this, "isTableVisible", !1), pa(this, "tableOffset", 0), pa(this, "holderOffset", 0), this.domBindings = i, this.isMaster = s === "master", this.name = s, this.dataAccessObject = e, this.facadeGetter = t, this.wtSettings = r, this.instance = this.dataAccessObject.wot, this.wot = this.dataAccessObject.wot, this.TABLE = i.rootTable, hD(this.TABLE), this.spreader = this.createSpreader(this.TABLE), this.hider = this.createHider(this.spreader), this.holder = this.createHolder(this.hider), this.wtRootElement = this.holder.parentNode, this.isMaster && this.alignOverlaysWithTrimmingContainer(), this.fixTableDomTree(), this.rowFilter = null, this.columnFilter = null, this.correctHeaderWidth = !1;
      const o = this.wtSettings.getSettingPure("rowHeaderWidth");
      this.wtSettings.update("rowHeaderWidth", () => this._modifyRowHeaderWidth(o)), this.rowUtils = new YRe(this.dataAccessObject, this.wtSettings), this.columnUtils = new zRe(this.dataAccessObject, this.wtSettings), this.tableRenderer = new HRe({
        // TODO refactoring, It can be passed through IOC.
        TABLE: this.TABLE,
        THEAD: this.THEAD,
        COLGROUP: this.COLGROUP,
        TBODY: this.TBODY,
        rowUtils: this.rowUtils,
        columnUtils: this.columnUtils,
        cellRenderer: this.wtSettings.getSettingPure("cellRenderer")
      });
    }
    /**
     * Returns a boolean that is true if this Table represents a specific overlay, identified by the overlay name.
     * For MasterTable, it returns false.
     *
     * @param {string} overlayTypeName The overlay type.
     * @returns {boolean}
     */
    is(e) {
      return this.name === e;
    }
    /**
     *
     */
    fixTableDomTree() {
      const e = this.domBindings.rootDocument;
      this.TBODY = this.TABLE.querySelector("tbody"), this.TBODY || (this.TBODY = e.createElement("tbody"), this.TABLE.appendChild(this.TBODY)), this.THEAD = this.TABLE.querySelector("thead"), this.THEAD || (this.THEAD = e.createElement("thead"), this.TABLE.insertBefore(this.THEAD, this.TBODY)), this.COLGROUP = this.TABLE.querySelector("colgroup"), this.COLGROUP || (this.COLGROUP = e.createElement("colgroup"), this.TABLE.insertBefore(this.COLGROUP, this.THEAD));
    }
    /**
     * @param {HTMLTableElement} table An element to process.
     * @returns {HTMLElement}
     */
    createSpreader(e) {
      const t = e.parentNode;
      let i;
      return (!t || t.nodeType !== Node.ELEMENT_NODE || !Ue(t, "wtHolder")) && (i = this.domBindings.rootDocument.createElement("div"), i.className = "wtSpreader", t && t.insertBefore(i, e), i.appendChild(e)), i.style.position = "relative", this.wtSettings.getSetting("ariaTags") && ze(i, [Ka()]), i;
    }
    /**
     * @param {HTMLElement} spreader An element to the hider element is injected.
     * @returns {HTMLElement}
     */
    createHider(e) {
      const t = e.parentNode;
      let i;
      return (!t || t.nodeType !== Node.ELEMENT_NODE || !Ue(t, "wtHolder")) && (i = this.domBindings.rootDocument.createElement("div"), i.className = "wtHider", t && t.insertBefore(i, e), i.appendChild(e)), this.wtSettings.getSetting("ariaTags") && ze(i, [Ka()]), i;
    }
    /**
     *
     * @param {HTMLElement} hider An element to the holder element is injected.
     * @returns {HTMLElement}
     */
    createHolder(e) {
      const t = e.parentNode;
      let i;
      return (!t || t.nodeType !== Node.ELEMENT_NODE || !Ue(t, "wtHolder")) && (i = this.domBindings.rootDocument.createElement("div"), i.style.position = "relative", i.className = "wtHolder", t && t.insertBefore(i, e), this.isMaster && (i.parentNode.className += "ht_master handsontable", i.parentNode.setAttribute("dir", this.wtSettings.getSettingPure("rtlMode") ? "rtl" : "ltr"), this.wtSettings.getSetting("ariaTags") && ze(i.parentNode, [Ka()])), i.appendChild(e)), this.wtSettings.getSetting("ariaTags") && ze(i, [Ka()]), i;
    }
    /**
     * Redraws the table.
     *
     * @param {boolean} [fastDraw=false] If TRUE, will try to avoid full redraw and only update the border positions.
     *                                   If FALSE or UNDEFINED, will perform a full redraw.
     * @returns {Table}
     */
    draw() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
      const {
        wtSettings: t
      } = this, {
        wtOverlays: i,
        wtViewport: r
      } = this.dataAccessObject, s = t.getSetting("totalRows"), o = t.getSetting("totalColumns"), a = t.getSetting("rowHeaders"), l = a.length, c = t.getSetting("columnHeaders"), u = c.length;
      let h = e;
      if (this.isMaster && (i.beforeDraw(), this.holderOffset = _i(this.holder), h = r.createCalculators(h), l && !t.getSetting("fixedColumnsStart"))) {
        const f = i.inlineStartOverlay.getScrollPosition(), g = this.correctHeaderWidth;
        this.correctHeaderWidth = f !== 0, g !== this.correctHeaderWidth && (h = !1);
      }
      if (h)
        this.isMaster && i.refresh(!0);
      else {
        this.isMaster ? this.tableOffset = _i(this.TABLE) : this.tableOffset = this.dataAccessObject.parentTableOffset;
        const f = s > 0 ? this.getFirstRenderedRow() : 0, g = o > 0 ? this.getFirstRenderedColumn() : 0;
        this.rowFilter = new aRe(f, s, u), this.columnFilter = new rRe(g, o, l);
        let p = !0;
        if (this.isMaster) {
          this.alignOverlaysWithTrimmingContainer();
          const m = {};
          this.wtSettings.getSetting("beforeDraw", !0, m), p = m.skipRender !== !0;
        }
        if (p) {
          this.tableRenderer.setHeaderContentRenderers(a, c), (this.is(Wa) || this.is(Fu)) && this.tableRenderer.setHeaderContentRenderers(a, []), this.resetOversizedRows(), this.tableRenderer.setActiveOverlayName(this.name).setViewportSize(this.getRenderedRowsCount(), this.getRenderedColumnsCount()).setFilters(this.rowFilter, this.columnFilter).render();
          let m;
          if (this.isMaster && (m = this.dataAccessObject.workspaceWidth, r.containerWidth = null, this.markOversizedColumnHeaders()), this.adjustColumnHeaderHeights(), (this.isMaster || this.is(Wa)) && this.markOversizedRows(), this.isMaster) {
            this.wtSettings.getSetting("externalRowCalculator") || r.createVisibleCalculators(), i.refresh(!1), i.applyToDOM();
            const v = fn(this.hider), y = fn(this.TABLE);
            v !== 0 && y !== v && (this.columnUtils.calculateWidths(), this.tableRenderer.renderer.colGroup.render()), m !== r.getWorkspaceWidth() && (r.containerWidth = null, this.columnUtils.calculateWidths(), this.tableRenderer.renderer.colGroup.render()), this.wtSettings.getSetting("onDraw", !0);
          } else this.is(Wa) && this.dataAccessObject.cloneSource.wtOverlays.adjustElementsSize();
        }
      }
      let d = !1;
      return this.isMaster && (d = i.topOverlay.resetFixedPosition(), i.bottomOverlay.clone && (d = i.bottomOverlay.resetFixedPosition() || d), d = i.inlineStartOverlay.resetFixedPosition() || d, i.topInlineStartCornerOverlay && i.topInlineStartCornerOverlay.resetFixedPosition(), i.bottomInlineStartCornerOverlay && i.bottomInlineStartCornerOverlay.clone && i.bottomInlineStartCornerOverlay.resetFixedPosition()), d ? (i.refreshAll(), i.adjustElementsSize()) : this.dataAccessObject.selectionManager.setActiveOverlay(this.facadeGetter()).render(h), this.isMaster && i.afterDraw(), this.dataAccessObject.drawn = !0, this;
    }
    /**
     * @param {number} col The visual column index.
     */
    markIfOversizedColumnHeader(e) {
      const t = this.columnFilter.renderedToSource(e);
      let i = this.wtSettings.getSetting("columnHeaders").length;
      const r = this.wtSettings.getSetting("defaultRowHeight");
      let s, o, a;
      const l = this.wtSettings.getSetting("columnHeaderHeight") || [];
      for (; i; )
        i -= 1, s = this.getColumnHeaderHeight(i), o = this.getColumnHeader(t, i), o && (a = Sd(o), (!s && r < a || s < a) && (this.dataAccessObject.wtViewport.oversizedColumnHeaders[i] = a), Array.isArray(l) ? l[i] !== null && l[i] !== void 0 && (this.dataAccessObject.wtViewport.oversizedColumnHeaders[i] = l[i]) : isNaN(l) || (this.dataAccessObject.wtViewport.oversizedColumnHeaders[i] = l), this.dataAccessObject.wtViewport.oversizedColumnHeaders[i] < (l[i] || l) && (this.dataAccessObject.wtViewport.oversizedColumnHeaders[i] = l[i] || l));
    }
    /**
     *
     */
    adjustColumnHeaderHeights() {
      const {
        wtSettings: e
      } = this, t = this.THEAD.childNodes, i = this.dataAccessObject.wtViewport.oversizedColumnHeaders, r = e.getSetting("columnHeaders");
      for (let s = 0, o = r.length; s < o; s++)
        if (i[s]) {
          if (!t[s] || t[s].childNodes.length === 0)
            return;
          t[s].childNodes[0].style.height = `${i[s]}px`;
        }
    }
    /**
     * Resets cache of row heights. The cache should be cached for each render cycle in a case
     * when new cell values have content which increases/decreases cell height.
     */
    resetOversizedRows() {
      const {
        wtSettings: e
      } = this, {
        wtViewport: t
      } = this.dataAccessObject;
      if (!(!this.isMaster && !this.is(Wa)) && !e.getSetting("externalRowCalculator")) {
        const i = this.getRenderedRowsCount();
        for (let r = 0; r < i; r++) {
          const s = this.rowFilter.renderedToSource(r);
          t.oversizedRows && t.oversizedRows[s] && (t.oversizedRows[s] = void 0);
        }
      }
    }
    /**
     * Get cell element at coords.
     * Negative coords.row or coords.col are used to retrieve header cells. If there are multiple header levels, the
     * negative value corresponds to the distance from the working area. For example, when there are 3 levels of column
     * headers, coords.col=-1 corresponds to the most inner header element, while coords.col=-3 corresponds to the
     * outmost header element.
     *
     * In case an element for the coords is not rendered, the method returns an error code.
     * To produce the error code, the input parameters are validated in the order in which they
     * are given. Thus, if both the row and the column coords are out of the rendered bounds,
     * the method returns the error code for the row.
     *
     * @param {CellCoords} coords The cell coordinates.
     * @returns {HTMLElement|number} HTMLElement on success or Number one of the exit codes on error:
     *  -1 row before viewport
     *  -2 row after viewport
     *  -3 column before viewport
     *  -4 column after viewport.
     */
    getCell(e) {
      let t = e.row, i = e.col;
      const r = this.wtSettings.getSetting("onModifyGetCellCoords", t, i);
      if (r && Array.isArray(r) && ([t, i] = r), this.isRowBeforeRenderedRows(t))
        return -1;
      if (this.isRowAfterRenderedRows(t))
        return -2;
      if (this.isColumnBeforeRenderedColumns(i))
        return -3;
      if (this.isColumnAfterRenderedColumns(i))
        return -4;
      const s = this.getRow(t);
      if (!s && t >= 0)
        throw new Error("TR was expected to be rendered but is not");
      const o = s.childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(i)];
      if (!o && i >= 0)
        throw new Error("TD or TH was expected to be rendered but is not");
      return o;
    }
    /**
     * Get the DOM element of the row with the provided index.
     *
     * @param {number} rowIndex Row index.
     * @returns {HTMLTableRowElement|boolean} Return the row's DOM element or `false` if the row with the provided
     * index doesn't exist.
     */
    getRow(e) {
      let t = null, i = null;
      if (e < 0) {
        var r;
        t = (r = this.rowFilter) === null || r === void 0 ? void 0 : r.sourceRowToVisibleColHeadedRow(e), i = this.THEAD;
      } else {
        var s;
        t = (s = this.rowFilter) === null || s === void 0 ? void 0 : s.sourceToRendered(e), i = this.TBODY;
      }
      return t !== void 0 && i !== void 0 ? i.childNodes.length < t + 1 ? !1 : i.childNodes[t] : !1;
    }
    /**
     * GetColumnHeader.
     *
     * @param {number} col Column index.
     * @param {number} [level=0] Header level (0 = most distant to the table).
     * @returns {object} HTMLElement on success or undefined on error.
     */
    getColumnHeader(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      const i = this.THEAD.childNodes[t];
      return i == null ? void 0 : i.childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(e)];
    }
    /**
     * Gets all columns headers (TH elements) from the table.
     *
     * @param {number} column A source column index.
     * @returns {HTMLTableCellElement[]}
     */
    getColumnHeaders(e) {
      const t = [], i = this.columnFilter.sourceColumnToVisibleRowHeadedColumn(e);
      return this.THEAD.childNodes.forEach((r) => {
        const s = r.childNodes[i];
        s && t.push(s);
      }), t;
    }
    /**
     * GetRowHeader.
     *
     * @param {number} row Row index.
     * @param {number} [level=0] Header level (0 = most distant to the table).
     * @returns {HTMLElement} HTMLElement on success or Number one of the exit codes on error: `null table doesn't have
     *   row headers`.
     */
    getRowHeader(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      const i = this.wtSettings.getSetting("rowHeaders").length;
      if (t >= i)
        return;
      const r = this.rowFilter.sourceToRendered(e), s = r < 0 ? this.rowFilter.sourceRowToVisibleColHeadedRow(e) : r, a = (r < 0 ? this.THEAD : this.TBODY).childNodes[s];
      return a == null ? void 0 : a.childNodes[t];
    }
    /**
     * Gets all rows headers (TH elements) from the table.
     *
     * @param {number} row A source row index.
     * @returns {HTMLTableCellElement[]}
     */
    getRowHeaders(e) {
      const t = [], i = this.wtSettings.getSetting("rowHeaders").length;
      for (let r = 0; r < i; r++) {
        const s = this.TBODY.childNodes[this.rowFilter.sourceToRendered(e)], o = s == null ? void 0 : s.childNodes[r];
        o && t.push(o);
      }
      return t;
    }
    /**
     * Returns cell coords object for a given TD (or a child element of a TD element).
     *
     * @param {HTMLTableCellElement} TD A cell DOM element (or a child of one).
     * @returns {CellCoords|null} The coordinates of the provided TD element (or the closest TD element) or null, if the
     *   provided element is not applicable.
     */
    getCoords(e) {
      let t = e;
      if (t.nodeName !== "TD" && t.nodeName !== "TH" && (t = Gu(t, ["TD", "TH"])), t === null)
        return null;
      const i = t.parentNode, r = i.parentNode;
      let s = z7(i), o = t.cellIndex;
      return lu(af, t, this.wtRootElement) || lu(sf, t, this.wtRootElement) ? r.nodeName === "THEAD" && (s -= r.childNodes.length) : lu(Fu, t, this.wtRootElement) || lu(Wa, t, this.wtRootElement) ? s = this.wtSettings.getSetting("totalRows") - r.childNodes.length + s : r === this.THEAD ? s = this.rowFilter.visibleColHeadedRowToSourceRow(s) : s = this.rowFilter.renderedToSource(s), lu(af, t, this.wtRootElement) || lu(of, t, this.wtRootElement) || lu(Fu, t, this.wtRootElement) ? o = this.columnFilter.offsettedTH(o) : o = this.columnFilter.visibleRowHeadedColumnToSourceColumn(o), this.wot.createCellCoords(s, o);
    }
    /**
     * Check if any of the rendered rows is higher than expected, and if so, cache them.
     */
    markOversizedRows() {
      if (this.wtSettings.getSetting("externalRowCalculator"))
        return;
      let e = this.TBODY.childNodes.length;
      const t = e * this.wtSettings.getSetting("defaultRowHeight"), i = Sd(this.TBODY) - 1;
      let r, s, o, a, l;
      if (!(t === i && !this.wtSettings.getSetting("fixedRowsBottom")))
        for (; e; )
          e -= 1, o = this.rowFilter.renderedToSource(e), r = this.getRowHeight(o), a = this.getTrForRow(o), l = a.querySelector("th"), l ? s = Sd(l) : s = Sd(a) - 1, (!r && this.wtSettings.getSetting("defaultRowHeight") < s || r < s) && (s += 1, this.dataAccessObject.wtViewport.oversizedRows[o] = s);
    }
    /**
     * @param {number} row The visual row index.
     * @returns {HTMLTableElement}
     */
    getTrForRow(e) {
      return this.TBODY.childNodes[this.rowFilter.sourceToRendered(e)];
    }
    /**
     * Checks if the column index (negative value from -1 to N) is rendered.
     *
     * @param {number} column The column index (negative value from -1 to N).
     * @returns {boolean}
     */
    isColumnHeaderRendered(e) {
      if (e >= 0)
        return !1;
      const i = this.wtSettings.getSetting("rowHeaders").length;
      return Math.abs(e) <= i;
    }
    /**
     * Checks if the row index (negative value from -1 to N) is rendered.
     *
     * @param {number} row The row index (negative value from -1 to N).
     * @returns {boolean}
     */
    isRowHeaderRendered(e) {
      if (e >= 0)
        return !1;
      const i = this.wtSettings.getSetting("columnHeaders").length;
      return Math.abs(e) <= i;
    }
    /* eslint-disable jsdoc/require-description-complete-sentence */
    /**
     * Check if the given row index is lower than the index of the first row that
     * is currently rendered and return TRUE in that case, or FALSE otherwise.
     *
     * Negative row index is used to check the columns' headers.
     *
     *  Headers
     *           +--------------+                                     │
     *       -3  │    │    │    │                                     │
     *           +--------------+                                     │
     *       -2  │    │    │    │                                     │ TRUE
     *           +--------------+                                     │
     *       -1  │    │    │    │                                     │
     *  Cells  +==================+                                   │
     *        0  ┇    ┇    ┇    ┇ <--- For fixedRowsTop: 1            │
     *           +--------------+      the master overlay do       ---+ first rendered row (index 1)
     *        1  │ A2 │ B2 │ C2 │      not render the first row.      │
     *           +--------------+                                     │ FALSE
     *        2  │ A3 │ B3 │ C3 │                                     │
     *           +--------------+                                  ---+ last rendered row
     *                                                                │
     *                                                                │ FALSE
     *
     * @param {number} row The visual row index.
     * @memberof Table#
     * @function isRowBeforeRenderedRows
     * @returns {boolean}
     */
    /* eslint-enable jsdoc/require-description-complete-sentence */
    isRowBeforeRenderedRows(e) {
      const t = this.getFirstRenderedRow();
      return e < 0 && t <= 0 ? !this.isRowHeaderRendered(e) : e < t;
    }
    /* eslint-disable jsdoc/require-description-complete-sentence */
    /**
     * Check if the given column index is greater than the index of the last column that
     * is currently rendered and return TRUE in that case, or FALSE otherwise.
     *
     * The negative row index is used to check the columns' headers. However,
     * keep in mind that for negative indexes, the method always returns FALSE as
     * it is not possible to render headers partially. The "after" index can not be
     * lower than -1.
     *
     *  Headers
     *           +--------------+                                     │
     *       -3  │    │    │    │                                     │
     *           +--------------+                                     │
     *       -2  │    │    │    │                                     │ FALSE
     *           +--------------+                                     │
     *       -1  │    │    │    │                                     │
     *  Cells  +==================+                                   │
     *        0  ┇    ┇    ┇    ┇ <--- For fixedRowsTop: 1            │
     *           +--------------+      the master overlay do       ---+ first rendered row (index 1)
     *        1  │ A2 │ B2 │ C2 │      not render the first rows      │
     *           +--------------+                                     │ FALSE
     *        2  │ A3 │ B3 │ C3 │                                     │
     *           +--------------+                                  ---+ last rendered row
     *                                                                │
     *                                                                │ TRUE
     *
     * @param {number} row The visual row index.
     * @memberof Table#
     * @function isRowAfterRenderedRows
     * @returns {boolean}
     */
    /* eslint-enable jsdoc/require-description-complete-sentence */
    isRowAfterRenderedRows(e) {
      return e > this.getLastRenderedRow();
    }
    /* eslint-disable jsdoc/require-description-complete-sentence */
    /**
     * Check if the given column index is lower than the index of the first column that
     * is currently rendered and return TRUE in that case, or FALSE otherwise.
     *
     * Negative column index is used to check the rows' headers.
     *
     *                            For fixedColumnsStart: 1 the master overlay
     *                            do not render this first columns.
     *  Headers    -3   -2   -1    |
     *           +----+----+----║┄ ┄ +------+------+
     *           │    │    │    ║    │  B1  │  C1  │
     *           +--------------║┄ ┄ --------------│
     *           │    │    │    ║    │  B2  │  C2  │
     *           +--------------║┄ ┄ --------------│
     *           │    │    │    ║    │  B3  │  C3  │
     *           +----+----+----║┄ ┄ +------+------+
     *                               ╷             ╷
     *      -------------------------+-------------+---------------->
     *          TRUE             first    FALSE   last         FALSE
     *                           rendered         rendered
     *                           column           column
     *
     * @param {number} column The visual column index.
     * @memberof Table#
     * @function isColumnBeforeRenderedColumns
     * @returns {boolean}
     */
    /* eslint-enable jsdoc/require-description-complete-sentence */
    isColumnBeforeRenderedColumns(e) {
      const t = this.getFirstRenderedColumn();
      return e < 0 && t <= 0 ? !this.isColumnHeaderRendered(e) : e < t;
    }
    /* eslint-disable jsdoc/require-description-complete-sentence */
    /**
     * Check if the given column index is greater than the index of the last column that
     * is currently rendered and return TRUE in that case, or FALSE otherwise.
     *
     * The negative column index is used to check the rows' headers. However,
     * keep in mind that for negative indexes, the method always returns FALSE as
     * it is not possible to render headers partially. The "after" index can not be
     * lower than -1.
     *
     *                            For fixedColumnsStart: 1 the master overlay
     *                            do not render this first columns.
     *  Headers    -3   -2   -1    |
     *           +----+----+----║┄ ┄ +------+------+
     *           │    │    │    ║    │  B1  │  C1  │
     *           +--------------║┄ ┄ --------------│
     *           │    │    │    ║    │  B2  │  C2  │
     *           +--------------║┄ ┄ --------------│
     *           │    │    │    ║    │  B3  │  C3  │
     *           +----+----+----║┄ ┄ +------+------+
     *                               ╷             ╷
     *      -------------------------+-------------+---------------->
     *          FALSE             first    FALSE   last         TRUE
     *                           rendered         rendered
     *                           column           column
     *
     * @param {number} column The visual column index.
     * @memberof Table#
     * @function isColumnAfterRenderedColumns
     * @returns {boolean}
     */
    /* eslint-enable jsdoc/require-description-complete-sentence */
    isColumnAfterRenderedColumns(e) {
      return this.columnFilter && e > this.getLastRenderedColumn();
    }
    isColumnAfterViewport(e) {
      return this.columnFilter && e > this.getLastVisibleColumn();
    }
    isRowAfterViewport(e) {
      return this.rowFilter && e > this.getLastVisibleRow();
    }
    isColumnBeforeViewport(e) {
      return this.columnFilter && this.columnFilter.sourceToRendered(e) < 0 && e >= 0;
    }
    isLastRowFullyVisible() {
      return this.getLastVisibleRow() === this.getLastRenderedRow();
    }
    isLastColumnFullyVisible() {
      return this.getLastVisibleColumn() === this.getLastRenderedColumn();
    }
    allRowsInViewport() {
      return this.wtSettings.getSetting("totalRows") === this.getVisibleRowsCount();
    }
    allColumnsInViewport() {
      return this.wtSettings.getSetting("totalColumns") === this.getVisibleColumnsCount();
    }
    /**
     * Checks if any of the row's cells content exceeds its initial height, and if so, returns the oversized height.
     *
     * @param {number} sourceRow The physical row index.
     * @returns {number}
     */
    getRowHeight(e) {
      return this.rowUtils.getHeight(e);
    }
    /**
     * @param {number} level The column level.
     * @returns {number}
     */
    getColumnHeaderHeight(e) {
      return this.columnUtils.getHeaderHeight(e);
    }
    /**
     * @param {number} sourceColumn The physical column index.
     * @returns {number}
     */
    getColumnWidth(e) {
      return this.columnUtils.getWidth(e);
    }
    /**
     * @param {number} sourceColumn The physical column index.
     * @returns {number}
     */
    getStretchedColumnWidth(e) {
      return this.columnUtils.getStretchedColumnWidth(e);
    }
    /**
     * Checks if the table has defined size. It returns `true` when the table has width and height
     * set bigger than `0px`.
     *
     * @returns {boolean}
     */
    hasDefinedSize() {
      return this.hasTableHeight && this.hasTableWidth;
    }
    /**
     * Gets table's width. The returned width is the width of the rendered cells that fit in the
     * current viewport. The value may change depends on the viewport position (scroll position).
     *
     * @returns {number}
     */
    getWidth() {
      return fn(this.TABLE);
    }
    /**
     * Gets table's height. The returned height is the height of the rendered cells that fit in the
     * current viewport. The value may change depends on the viewport position (scroll position).
     *
     * @returns {number}
     */
    getHeight() {
      return ti(this.TABLE);
    }
    /**
     * Gets table's total width. The returned width is the width of all rendered cells (including headers)
     * that can be displayed in the table.
     *
     * @returns {number}
     */
    getTotalWidth() {
      const e = fn(this.hider);
      return e !== 0 ? e : this.getWidth();
    }
    /**
     * Gets table's total height. The returned height is the height of all rendered cells (including headers)
     * that can be displayed in the table.
     *
     * @returns {number}
     */
    getTotalHeight() {
      const e = ti(this.hider);
      return e !== 0 ? e : this.getHeight();
    }
    /**
     * Checks if the table is visible. It returns `true` when the holder element (or its parents)
     * has CSS 'display' property different than 'none'.
     *
     * @returns {boolean}
     */
    isVisible() {
      return tf(this.TABLE);
    }
    /**
     * Modify row header widths provided by user in class contructor.
     *
     * @private
     * @param {Function} rowHeaderWidthFactory The function which can provide default width values for rows..
     * @returns {number}
     */
    _modifyRowHeaderWidth(e) {
      let t = cn(e) ? e() : null;
      return Array.isArray(t) ? (t = [...t], t[t.length - 1] = this._correctRowHeaderWidth(t[t.length - 1])) : t = this._correctRowHeaderWidth(t), t;
    }
    /**
     * Correct row header width if necessary.
     *
     * @private
     * @param {number} width The width to process.
     * @returns {number}
     */
    _correctRowHeaderWidth(e) {
      let t = e;
      return typeof e != "number" && (t = this.wtSettings.getSetting("defaultColumnWidth")), this.correctHeaderWidth && (t += 1), t;
    }
  };
  const XRe = "stickyRowsBottom", ND = {
    /**
     * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.
     *
     * @returns {number}
     * @this Table
     */
    getFirstRenderedRow() {
      const n = this.wtSettings.getSetting("totalRows"), e = this.wtSettings.getSetting("fixedRowsBottom"), t = n - e;
      return n === 0 || e === 0 ? -1 : t < 0 ? 0 : t;
    },
    /**
     * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.
     * Assumes that all rendered rows are fully visible.
     *
     * @returns {number}
     * @this Table
     */
    getFirstVisibleRow() {
      return this.getFirstRenderedRow();
    },
    /**
     * Get the source index of the first row partially visible in the viewport. If no rows are partially visible, returns an error code: -1.
     * Assumes that all rendered rows are fully visible.
     *
     * @returns {number}
     * @this Table
     */
    getFirstPartiallyVisibleRow() {
      return this.getFirstRenderedRow();
    },
    /**
     * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.
     *
     * @returns {number}
     * @this Table
     */
    getLastRenderedRow() {
      return this.wtSettings.getSetting("totalRows") - 1;
    },
    /**
     * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.
     * Assumes that all rendered rows are fully visible.
     *
     * @returns {number}
     * @this Table
     */
    getLastVisibleRow() {
      return this.getLastRenderedRow();
    },
    /**
     * Get the source index of the last row partially visible in the viewport. If no rows are partially visible, returns an error code: -1.
     * Assumes that all rendered rows are fully visible.
     *
     * @returns {number}
     * @this Table
     */
    getLastPartiallyVisibleRow() {
      return this.getLastRenderedRow();
    },
    /**
     * Get the number of rendered rows.
     *
     * @returns {number}
     * @this Table
     */
    getRenderedRowsCount() {
      const n = this.wtSettings.getSetting("totalRows");
      return Math.min(this.wtSettings.getSetting("fixedRowsBottom"), n);
    },
    /**
     * Get the number of fully visible rows in the viewport.
     * Assumes that all rendered rows are fully visible.
     *
     * @returns {number}
     * @this Table
     */
    getVisibleRowsCount() {
      return this.getRenderedRowsCount();
    },
    /**
     * Get the number of rendered column headers.
     *
     * @returns {number}
     * @this Table
     */
    getColumnHeadersCount() {
      return 0;
    }
  };
  Sl(ND, "MIXIN_NAME", XRe, {
    writable: !1,
    enumerable: !1
  });
  const ZRe = "stickyColumnsStart", W1 = {
    /**
     * Get the source index of the first rendered column. If no columns are rendered, returns an error code: -1.
     *
     * @returns {number}
     * @this Table
     */
    getFirstRenderedColumn() {
      return this.wtSettings.getSetting("totalColumns") === 0 ? -1 : 0;
    },
    /**
     * Get the source index of the first column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.
     * Assumes that all rendered columns are fully visible.
     *
     * @returns {number}
     * @this Table
     */
    getFirstVisibleColumn() {
      return this.getFirstRenderedColumn();
    },
    /**
     * Get the source index of the first column partially visible in the viewport. If no columns are partially visible, returns an error code: -1.
     * Assumes that all rendered columns are fully visible.
     *
     * @returns {number}
     * @this Table
     */
    getFirstPartiallyVisibleColumn() {
      return this.getFirstRenderedColumn();
    },
    /**
     * Get the source index of the last rendered column. If no columns are rendered, returns an error code: -1.
     *
     * @returns {number}
     * @this Table
     */
    getLastRenderedColumn() {
      return this.getRenderedColumnsCount() - 1;
    },
    /**
     * Get the source index of the last column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.
     * Assumes that all rendered columns are fully visible.
     *
     * @returns {number}
     * @this Table
     */
    getLastVisibleColumn() {
      return this.getLastRenderedColumn();
    },
    /**
     * Get the source index of the last column partially visible in the viewport. If no columns are partially visible, returns an error code: -1.
     * Assumes that all rendered columns are fully visible.
     *
     * @returns {number}
     * @this Table
     */
    getLastPartiallyVisibleColumn() {
      return this.getLastRenderedColumn();
    },
    /**
     * Get the number of rendered columns.
     *
     * @returns {number}
     * @this Table
     */
    getRenderedColumnsCount() {
      const n = this.wtSettings.getSetting("totalColumns");
      return Math.min(this.wtSettings.getSetting("fixedColumnsStart"), n);
    },
    /**
     * Get the number of fully visible columns in the viewport.
     * Assumes that all rendered columns are fully visible.
     *
     * @returns {number}
     * @this Table
     */
    getVisibleColumnsCount() {
      return this.getRenderedColumnsCount();
    },
    /**
     * Get the number of rendered row headers.
     *
     * @returns {number}
     * @this Table
     */
    getRowHeadersCount() {
      return this.dataAccessObject.rowHeaders.length;
    }
  };
  Sl(W1, "MIXIN_NAME", ZRe, {
    writable: !1,
    enumerable: !1
  });
  class LD extends Qp {
    /**
     * @param {TableDao} dataAccessObject The data access object.
     * @param {FacadeGetter} facadeGetter Function which return proper facade.
     * @param {DomBindings} domBindings Bindings into DOM.
     * @param {Settings} wtSettings The Walkontable settings.
     */
    constructor(e, t, i, r) {
      super(e, t, i, r, Fu);
    }
  }
  qt(LD, ND);
  qt(LD, W1);
  const sf = "top", Wa = "bottom", of = "inline_start", af = "top_inline_start_corner", Fu = "bottom_inline_start_corner", z9 = [sf, Wa, of, af, Fu], QRe = /* @__PURE__ */ new Map([[sf, `ht_clone_${sf}`], [Wa, `ht_clone_${Wa}`], [of, `ht_clone_${of} ht_clone_left`], [af, `ht_clone_${af} ht_clone_top_left_corner`], [Fu, `ht_clone_${Fu} ht_clone_bottom_left_corner`]]);
  function JRe(n, e) {
    e1e(n, e), e.add(n);
  }
  function e1e(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function t1e(n, e, t) {
    return (e = n1e(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function n1e(n) {
    var e = i1e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function i1e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function S0(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var Wm = /* @__PURE__ */ new WeakSet();
  class r1e {
    /**
     * @param {ScrollDao} dataAccessObject Tha data access object.
     */
    constructor(e) {
      JRe(this, Wm), t1e(this, "dataAccessObject", void 0), this.dataAccessObject = e;
    }
    /**
     * Scrolls viewport to a cell.
     *
     * @param {CellCoords} coords The cell coordinates.
     * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.
     * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right of the table.
     * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom of the table.
     * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left of the table.
     * @returns {boolean}
     */
    scrollViewport(e, t, i, r, s) {
      const o = this.scrollViewportHorizontally(e.col, i, s), a = this.scrollViewportVertically(e.row, t, r);
      return o || a;
    }
    /**
     * Scrolls viewport to a column.
     *
     * @param {number} column Visual column index.
     * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right of the table.
     * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left of the table.
     * @returns {boolean}
     */
    scrollViewportHorizontally(e, t, i) {
      const {
        drawn: r,
        totalColumns: s
      } = this.dataAccessObject;
      if (!r || !Number.isInteger(e) || e < 0 || e > s)
        return !1;
      const o = t === void 0 && i === void 0, {
        fixedColumnsStart: a,
        inlineStartOverlay: l
      } = this.dataAccessObject;
      if (o && e < a || (e = this.dataAccessObject.wtSettings.getSetting("onBeforeViewportScrollHorizontally", e), !Number.isInteger(e) || e < 0 || e > s))
        return !1;
      const c = this.getFirstVisibleColumn(), u = this.getLastVisibleColumn();
      let h = !1;
      return (o && (e < c || e > u) || !o) && (h = l.scrollTo(e, o ? e >= this.getLastPartiallyVisibleColumn() : t)), h;
    }
    /**
     * Scrolls viewport to a row.
     *
     * @param {number} row Visual row index.
     * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.
     * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom of the table.
     * @returns {boolean}
     */
    scrollViewportVertically(e, t, i) {
      const {
        drawn: r,
        totalRows: s
      } = this.dataAccessObject;
      if (!r || !Number.isInteger(e) || e < 0 || e > s)
        return !1;
      const o = t === void 0 && i === void 0, {
        fixedRowsBottom: a,
        fixedRowsTop: l,
        topOverlay: c
      } = this.dataAccessObject;
      if (o && (e < l || e > s - a - 1) || (e = this.dataAccessObject.wtSettings.getSetting("onBeforeViewportScrollVertically", e), !Number.isInteger(e) || e < 0 || e > s))
        return !1;
      const u = this.getFirstVisibleRow(), h = this.getLastVisibleRow();
      let d = !1;
      return (o && (e < u || e > h) || !o) && (d = c.scrollTo(e, o ? e >= this.getLastPartiallyVisibleRow() : i)), d;
    }
    /**
     * Get first visible row based on virtual dom and how table is visible in browser window viewport.
     *
     * @returns {number}
     */
    getFirstVisibleRow() {
      return this.dataAccessObject.wtTable.getFirstVisibleRow();
    }
    /**
     * Get last visible row based on virtual dom and how table is visible in browser window viewport.
     *
     * @returns {number}
     */
    getLastVisibleRow() {
      return S0(Wm, this, xV).call(this, this.dataAccessObject.wtTable.getLastVisibleRow());
    }
    /**
     * Get first partially visible row based on virtual dom and how table is visible in browser window viewport.
     *
     * @returns {number}
     */
    getFirstPartiallyVisibleRow() {
      return this.dataAccessObject.wtTable.getFirstPartiallyVisibleRow();
    }
    /**
     * Get last visible row based on virtual dom and how table is visible in browser window viewport.
     *
     * @returns {number}
     */
    getLastPartiallyVisibleRow() {
      return S0(Wm, this, xV).call(this, this.dataAccessObject.wtTable.getLastPartiallyVisibleRow());
    }
    /**
     * Get first visible column based on virtual dom and how table is visible in browser window viewport.
     *
     * @returns {number}
     */
    getFirstVisibleColumn() {
      return this.dataAccessObject.wtTable.getFirstVisibleColumn();
    }
    /**
     * Get last visible column based on virtual dom and how table is visible in browser window viewport.
     *
     * @returns {number}
     */
    getLastVisibleColumn() {
      return S0(Wm, this, EV).call(this, this.dataAccessObject.wtTable.getLastVisibleColumn());
    }
    /**
     * Get first partially visible column based on virtual dom and how table is visible in browser window viewport.
     *
     * @returns {number}
     */
    getFirstPartiallyVisibleColumn() {
      return this.dataAccessObject.wtTable.getFirstPartiallyVisibleColumn();
    }
    /**
     * Get last partially visible column based on virtual dom and how table is visible in browser window viewport.
     *
     * @returns {number}
     */
    getLastPartiallyVisibleColumn() {
      return S0(Wm, this, EV).call(this, this.dataAccessObject.wtTable.getLastPartiallyVisibleColumn());
    }
  }
  function EV(n) {
    const {
      wtSettings: e,
      inlineStartOverlay: t,
      wtTable: i,
      wtViewport: r,
      totalColumns: s,
      rootWindow: o
    } = this.dataAccessObject;
    if (t.mainTableScrollableElement === o) {
      const a = e.getSetting("rtlMode");
      let l = null;
      if (a) {
        const u = i.TABLE.getBoundingClientRect(), d = this.dataAccessObject.rootWindow.document.documentElement.offsetWidth;
        l = Math.abs(u.right - d);
      } else
        l = _i(i.wtRootElement).left;
      const c = Math.abs(fD(o, o));
      if (l > c) {
        const u = gD(o);
        let h = r.getRowHeaderWidth();
        for (let d = 1; d <= s; d++)
          if (h += t.sumCellSizes(d - 1, d), l + h - c >= u) {
            n = d - 2;
            break;
          }
      }
    }
    return n;
  }
  function xV(n) {
    const {
      topOverlay: e,
      wtTable: t,
      wtViewport: i,
      totalRows: r,
      rootWindow: s
    } = this.dataAccessObject;
    if (e.mainTableScrollableElement === s) {
      const o = _i(t.wtRootElement), a = O1(s, s);
      if (o.top > a) {
        const l = Sd(s);
        let c = i.getColumnHeaderHeight();
        for (let u = 1; u <= r; u++)
          if (c += e.sumCellSizes(u - 1, u), o.top + c - a >= l) {
            n = u - 2;
            break;
          }
      }
    }
    return n;
  }
  function To(n, e, t) {
    return (e = s1e(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function s1e(n) {
    var e = o1e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function o1e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class HD {
    get eventManager() {
      return new lo(this);
    }
    /**
     * @param {HTMLTableElement} table Main table.
     * @param {Settings} settings The Walkontable settings.
     */
    constructor(e, t) {
      To(this, "wtTable", void 0), To(this, "wtScroll", void 0), To(this, "wtViewport", void 0), To(this, "wtOverlays", void 0), To(this, "selectionManager", void 0), To(this, "wtEvent", void 0), To(this, "guid", `wt_${oD()}`), To(this, "drawInterrupted", !1), To(this, "drawn", !1), To(this, "domBindings", void 0), To(this, "wtSettings", void 0), this.domBindings = {
        rootTable: e,
        rootDocument: e.ownerDocument,
        rootWindow: e.ownerDocument.defaultView
      }, this.wtSettings = t, this.wtScroll = new r1e(this.createScrollDao());
    }
    findOriginalHeaders() {
      const e = [];
      if (this.wtTable.THEAD.childNodes.length && this.wtTable.THEAD.childNodes[0].childNodes.length) {
        for (let t = 0, i = this.wtTable.THEAD.childNodes[0].childNodes.length; t < i; t++)
          e.push(this.wtTable.THEAD.childNodes[0].childNodes[t].innerHTML);
        this.wtSettings.getSetting("columnHeaders").length || this.wtSettings.update("columnHeaders", [function(t, i) {
          Yu(i, e[t]);
        }]);
      }
    }
    /**
     * Creates and returns the CellCoords object.
     *
     * @param {*} row The row index.
     * @param {*} column The column index.
     * @returns {CellCoords}
     */
    createCellCoords(e, t) {
      return new rf(e, t, this.wtSettings.getSetting("rtlMode"));
    }
    /**
     * Creates and returns the CellRange object.
     *
     * @param {CellCoords} highlight The highlight coordinates.
     * @param {CellCoords} from The from coordinates.
     * @param {CellCoords} to The to coordinates.
     * @returns {CellRange}
     */
    createCellRange(e, t, i) {
      return new dy(e, t, i, this.wtSettings.getSetting("rtlMode"));
    }
    /**
     * Force rerender of Walkontable.
     *
     * @param {boolean} [fastDraw=false] When `true`, try to refresh only the positions of borders without rerendering
     *                                   the data. It will only work if Table.draw() does not force
     *                                   rendering anyway.
     * @returns {Walkontable}
     */
    draw() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
      return this.drawInterrupted = !1, this.wtTable.isVisible() ? this.wtTable.draw(e) : this.drawInterrupted = !0, this;
    }
    /**
     * Returns the TD at coords. If topmost is set to true, returns TD from the topmost overlay layer,
     * if not set or set to false, returns TD from the master table.
     *
     * @param {CellCoords} coords The cell coordinates.
     * @param {boolean} [topmost=false] If set to `true`, it returns the TD element from the topmost overlay. For example,
     *                                  if the wanted cell is in the range of fixed rows, it will return a TD element
     *                                  from the top overlay.
     * @returns {HTMLElement}
     */
    getCell(e) {
      if (!(arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1))
        return this.wtTable.getCell(e);
      const i = this.wtSettings.getSetting("totalRows"), r = this.wtSettings.getSetting("fixedRowsTop"), s = this.wtSettings.getSetting("fixedRowsBottom"), o = this.wtSettings.getSetting("fixedColumnsStart");
      if (e.row < r && e.col < o)
        return this.wtOverlays.topInlineStartCornerOverlay.clone.wtTable.getCell(e);
      if (e.row < r)
        return this.wtOverlays.topOverlay.clone.wtTable.getCell(e);
      if (e.col < o && e.row >= i - s) {
        if (this.wtOverlays.bottomInlineStartCornerOverlay && this.wtOverlays.bottomInlineStartCornerOverlay.clone)
          return this.wtOverlays.bottomInlineStartCornerOverlay.clone.wtTable.getCell(e);
      } else {
        if (e.col < o)
          return this.wtOverlays.inlineStartOverlay.clone.wtTable.getCell(e);
        if (e.row < i && e.row >= i - s && this.wtOverlays.bottomOverlay && this.wtOverlays.bottomOverlay.clone)
          return this.wtOverlays.bottomOverlay.clone.wtTable.getCell(e);
      }
      return this.wtTable.getCell(e);
    }
    /**
     * Scrolls the viewport to a cell (rerenders if needed).
     *
     * @param {CellCoords} coords The cell coordinates to scroll to.
     * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.
     * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right of the table.
     * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom of the table.
     * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left of the table.
     * @returns {boolean}
     */
    scrollViewport(e, t, i, r, s) {
      return e.col < 0 || e.row < 0 ? !1 : this.wtScroll.scrollViewport(e, t, i, r, s);
    }
    /**
     * Scrolls the viewport to a column (rerenders if needed).
     *
     * @param {number} column Visual column index.
     * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right of the table.
     * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left of the table.
     * @returns {boolean}
     */
    scrollViewportHorizontally(e, t, i) {
      return e < 0 ? !1 : this.wtScroll.scrollViewportHorizontally(e, t, i);
    }
    /**
     * Scrolls the viewport to a row (rerenders if needed).
     *
     * @param {number} row Visual row index.
     * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.
     * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom of the table.
     * @returns {boolean}
     */
    scrollViewportVertically(e, t, i) {
      return e < 0 ? !1 : this.wtScroll.scrollViewportVertically(e, t, i);
    }
    /**
     * @returns {Array}
     */
    getViewport() {
      return [this.wtTable.getFirstVisibleRow(), this.wtTable.getFirstVisibleColumn(), this.wtTable.getLastVisibleRow(), this.wtTable.getLastVisibleColumn()];
    }
    /**
     * Destroy instance.
     */
    destroy() {
      this.wtOverlays.destroy(), this.wtEvent.destroy();
    }
    /**
     * Create data access object for scroll.
     *
     * @protected
     * @returns {ScrollDao}
     */
    createScrollDao() {
      const e = this;
      return {
        get drawn() {
          return e.drawn;
        },
        get topOverlay() {
          return e.wtOverlays.topOverlay;
        },
        get inlineStartOverlay() {
          return e.wtOverlays.inlineStartOverlay;
        },
        get wtTable() {
          return e.wtTable;
        },
        get wtViewport() {
          return e.wtViewport;
        },
        get wtSettings() {
          return e.wtSettings;
        },
        get rootWindow() {
          return e.domBindings.rootWindow;
        },
        // TODO refactoring, consider about using injecting wtSettings into scroll (it'll enables remove dao layer)
        get totalRows() {
          return e.wtSettings.getSetting("totalRows");
        },
        get totalColumns() {
          return e.wtSettings.getSetting("totalColumns");
        },
        get fixedRowsTop() {
          return e.wtSettings.getSetting("fixedRowsTop");
        },
        get fixedRowsBottom() {
          return e.wtSettings.getSetting("fixedRowsBottom");
        },
        get fixedColumnsStart() {
          return e.wtSettings.getSetting("fixedColumnsStart");
        }
      };
    }
    // TODO refactoring: it will be much better to not use DAO objects. They are needed for now to provide
    // dynamically access to related objects
    /**
     * Create data access object for wtTable.
     *
     * @protected
     * @returns {TableDao}
     */
    getTableDao() {
      const e = this;
      return {
        get wot() {
          return e;
        },
        get parentTableOffset() {
          return e.cloneSource.wtTable.tableOffset;
        },
        get cloneSource() {
          return e.cloneSource;
        },
        get workspaceWidth() {
          return e.wtViewport.getWorkspaceWidth();
        },
        get wtViewport() {
          return e.wtViewport;
        },
        get wtOverlays() {
          return e.wtOverlays;
        },
        get selectionManager() {
          return e.selectionManager;
        },
        get drawn() {
          return e.drawn;
        },
        set drawn(t) {
          e.drawn = t;
        },
        get wtTable() {
          return e.wtTable;
        },
        get startColumnRendered() {
          return e.wtViewport.columnsRenderCalculator.startColumn;
        },
        get startColumnVisible() {
          return e.wtViewport.columnsVisibleCalculator.startColumn;
        },
        get startColumnPartiallyVisible() {
          return e.wtViewport.columnsPartiallyVisibleCalculator.startColumn;
        },
        get endColumnRendered() {
          return e.wtViewport.columnsRenderCalculator.endColumn;
        },
        get endColumnVisible() {
          return e.wtViewport.columnsVisibleCalculator.endColumn;
        },
        get endColumnPartiallyVisible() {
          return e.wtViewport.columnsPartiallyVisibleCalculator.endColumn;
        },
        get countColumnsRendered() {
          return e.wtViewport.columnsRenderCalculator.count;
        },
        get countColumnsVisible() {
          return e.wtViewport.columnsVisibleCalculator.count;
        },
        get startRowRendered() {
          return e.wtViewport.rowsRenderCalculator.startRow;
        },
        get startRowVisible() {
          return e.wtViewport.rowsVisibleCalculator.startRow;
        },
        get startRowPartiallyVisible() {
          return e.wtViewport.rowsPartiallyVisibleCalculator.startRow;
        },
        get endRowRendered() {
          return e.wtViewport.rowsRenderCalculator.endRow;
        },
        get endRowVisible() {
          return e.wtViewport.rowsVisibleCalculator.endRow;
        },
        get endRowPartiallyVisible() {
          return e.wtViewport.rowsPartiallyVisibleCalculator.endRow;
        },
        get countRowsRendered() {
          return e.wtViewport.rowsRenderCalculator.count;
        },
        get countRowsVisible() {
          return e.wtViewport.rowsVisibleCalculator.count;
        },
        get columnHeaders() {
          return e.wtSettings.getSetting("columnHeaders");
        },
        get rowHeaders() {
          return e.wtSettings.getSetting("rowHeaders");
        }
      };
    }
  }
  function TV(n, e, t) {
    return (e = a1e(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function a1e(n) {
    var e = l1e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function l1e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class c1e extends HD {
    /**
     * @param {HTMLTableElement} table Main table.
     * @param {SettingsPure|Settings} settings The Walkontable settings.
     * @param {WalkontableCloneOptions} clone Clone data.
     */
    constructor(e, t, i) {
      super(e, t), TV(this, "cloneSource", void 0), TV(this, "cloneOverlay", void 0);
      const r = this.wtSettings.getSetting("facade", this);
      this.cloneSource = i.source, this.cloneOverlay = i.overlay, this.wtTable = this.cloneOverlay.createTable(this.getTableDao(), r, this.domBindings, this.wtSettings), this.wtViewport = i.viewport, this.selectionManager = i.selectionManager, this.wtEvent = new B9(r, this.domBindings, this.wtSettings, this.eventManager, this.wtTable, this.selectionManager, i.event), this.findOriginalHeaders();
    }
  }
  function u1e(n, e, t) {
    return (e = h1e(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function h1e(n) {
    var e = d1e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function d1e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class gy {
    /**
     * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.
     * @param {FacadeGetter} facadeGetter Function which return proper facade.
     * @param {CLONE_TYPES_ENUM} type The overlay type name (clone name).
     * @param {Settings} wtSettings The Walkontable settings.
     * @param {DomBindings} domBindings Dom elements bound to the current instance.
     */
    constructor(e, t, i, r, s) {
      u1e(this, "wtSettings", null), Sl(this, "wot", e, {
        writable: !1
      }), this.domBindings = s, this.facadeGetter = t, this.wtSettings = r;
      const {
        TABLE: o,
        hider: a,
        spreader: l,
        holder: c,
        wtRootElement: u
      } = this.wot.wtTable;
      this.instance = this.wot, this.type = i, this.mainTableScrollableElement = null, this.TABLE = o, this.hider = a, this.spreader = l, this.holder = c, this.wtRootElement = u, this.trimmingContainer = nf(this.hider.parentNode.parentNode), this.needFullRender = this.shouldBeRendered(), this.clone = this.makeClone();
    }
    /**
     * Checks if the overlay rendering state has changed.
     *
     * @returns {boolean}
     */
    hasRenderingStateChanged() {
      return this.needFullRender !== this.shouldBeRendered();
    }
    /**
     * Updates internal state with an information about the need of full rendering of the overlay in the next draw cycles.
     *
     * If the state is changed to render the overlay, the `needFullRender` property is set to `true` which means that
     * the overlay will be fully rendered in the current draw cycle. If the state is changed to not render the overlay,
     * the `needFullRender` property is set to `false` which means that the overlay will be fully rendered in the
     * current draw cycle but it will not be rendered in the next draw cycles.
     *
     * @param {'before' | 'after'} drawPhase The phase of the rendering process.
     */
    updateStateOfRendering(e) {
      e === "before" && this.shouldBeRendered() ? this.needFullRender = !0 : e === "after" && !this.shouldBeRendered() && (this.needFullRender = !1);
    }
    /**
     * Checks if overlay should be fully rendered.
     *
     * @returns {boolean}
     */
    shouldBeRendered() {
      return !0;
    }
    /**
     * Update the trimming container.
     */
    updateTrimmingContainer() {
      this.trimmingContainer = nf(this.hider.parentNode.parentNode);
    }
    /**
     * Update the main scrollable element.
     */
    updateMainScrollableElement() {
      const {
        wtTable: e
      } = this.wot, {
        rootWindow: t
      } = this.domBindings;
      t.getComputedStyle(e.wtRootElement.parentNode).getPropertyValue("overflow") === "hidden" ? this.mainTableScrollableElement = this.wot.wtTable.holder : this.mainTableScrollableElement = dw(e.TABLE);
    }
    /**
     * Calculates coordinates of the provided element, relative to the root Handsontable element.
     * NOTE: The element needs to be a child of the overlay in order for the method to work correctly.
     *
     * @param {HTMLElement} element The cell element to calculate the position for.
     * @param {number} rowIndex Visual row index.
     * @param {number} columnIndex Visual column index.
     * @returns {{top: number, start: number}|undefined}
     */
    getRelativeCellPosition(e, t, i) {
      if (this.clone.wtTable.holder.contains(e) === !1) {
        Yt(`The provided element is not a child of the ${this.type} overlay`);
        return;
      }
      const r = this.mainTableScrollableElement === this.domBindings.rootWindow, s = i < this.wtSettings.getSetting("fixedColumnsStart"), o = t < this.wtSettings.getSetting("fixedRowsTop"), a = t >= this.wtSettings.getSetting("totalRows") - this.wtSettings.getSetting("fixedRowsBottom"), l = this.clone.wtTable.spreader, c = {
        start: this.getRelativeStartPosition(l),
        top: l.offsetTop
      }, u = {
        start: this.getRelativeStartPosition(e),
        top: e.offsetTop
      };
      let h = null;
      return r ? h = this.getRelativeCellPositionWithinWindow(o, s, u, c) : h = this.getRelativeCellPositionWithinHolder(o, a, s, u, c), h;
    }
    /**
     * Get inline start value depending of direction.
     *
     * @param {HTMLElement} el Element.
     * @returns {number}
     */
    getRelativeStartPosition(e) {
      return this.isRtl() ? e.offsetParent.offsetWidth - e.offsetLeft - e.offsetWidth : e.offsetLeft;
    }
    /**
     * Calculates coordinates of the provided element, relative to the root Handsontable element within a table with window
     * as a scrollable element.
     *
     * @private
     * @param {boolean} onFixedRowTop `true` if the coordinates point to a place within the top fixed rows.
     * @param {boolean} onFixedColumn `true` if the coordinates point to a place within the fixed columns.
     * @param {number} elementOffset Offset position of the cell element.
     * @param {number} spreaderOffset Offset position of the spreader element.
     * @returns {{top: number, left: number}}
     */
    getRelativeCellPositionWithinWindow(e, t, i, r) {
      const s = this.wot.wtTable.wtRootElement.getBoundingClientRect();
      let o = 0, a = 0;
      if (!t)
        o = r.start;
      else {
        let l = s.left;
        this.isRtl() && (l = this.domBindings.rootWindow.innerWidth - (s.left + s.width + xi())), o = l <= 0 ? -1 * l : 0;
      }
      return e ? a = this.clone.wtTable.TABLE.getBoundingClientRect().top - s.top : a = r.top, {
        start: i.start + o,
        top: i.top + a
      };
    }
    /**
     * Calculates coordinates of the provided element, relative to the root Handsontable element within a table with window
     * as a scrollable element.
     *
     * @private
     * @param {boolean} onFixedRowTop `true` if the coordinates point to a place within the top fixed rows.
     * @param {boolean} onFixedRowBottom `true` if the coordinates point to a place within the bottom fixed rows.
     * @param {boolean} onFixedColumn `true` if the coordinates point to a place within the fixed columns.
     * @param {number} elementOffset Offset position of the cell element.
     * @param {number} spreaderOffset Offset position of the spreader element.
     * @returns {{top: number, left: number}}
     */
    getRelativeCellPositionWithinHolder(e, t, i, r, s) {
      const o = {
        horizontal: this.wot.wtOverlays.inlineStartOverlay.getScrollPosition(),
        vertical: this.wot.wtOverlays.topOverlay.getScrollPosition()
      };
      let a = 0, l = 0;
      if (i || (a = o.horizontal - s.start), t) {
        const c = this.wot.wtTable.wtRootElement.getBoundingClientRect();
        l = this.clone.wtTable.TABLE.getBoundingClientRect().top * -1 + c.top;
      } else e || (l = o.vertical - s.top);
      return {
        start: r.start - a,
        top: r.top - l
      };
    }
    /**
     * Make a clone of table for overlay.
     *
     * @returns {Clone}
     */
    makeClone() {
      if (z9.indexOf(this.type) === -1)
        throw new Error(`Clone type "${this.type}" is not supported.`);
      const {
        wtTable: e,
        wtSettings: t
      } = this.wot, {
        rootDocument: i,
        rootWindow: r
      } = this.domBindings, s = i.createElement("div"), o = i.createElement("table"), a = e.wtRootElement.parentNode;
      s.className = `${QRe.get(this.type)} handsontable`, s.setAttribute("dir", this.isRtl() ? "rtl" : "ltr"), s.style.position = "absolute", s.style.top = 0, s.style.overflow = "visible", this.isRtl() ? s.style.right = 0 : s.style.left = 0, t.getSetting("ariaTags") && ze(s, [Ka()]), o.className = e.TABLE.className, e.TABLE.getAttribute("role") && o.setAttribute("role", e.TABLE.getAttribute("role")), s.appendChild(o), a.appendChild(s);
      const c = this.wtSettings.getSetting("preventOverflow");
      return c === !0 || c === "horizontal" && this.type === sf || c === "vertical" && this.type === of ? this.mainTableScrollableElement = r : r.getComputedStyle(a).getPropertyValue("overflow") === "hidden" ? this.mainTableScrollableElement = e.holder : this.mainTableScrollableElement = dw(e.TABLE), new c1e(o, this.wtSettings, {
        // todo ioc factory
        source: this.wot,
        overlay: this,
        viewport: this.wot.wtViewport,
        // todo ioc , or factor func if used only here
        event: this.wot.wtEvent,
        // todo ioc , or factory func if used only here
        selectionManager: this.wot.selectionManager
        // todo ioc , or factory func if used only here
      });
    }
    /**
     * Refresh/Redraw overlay.
     *
     * @param {boolean} [fastDraw=false] When `true`, try to refresh only the positions of borders without rerendering
     *                                   the data. It will only work if Table.draw() does not force
     *                                   rendering anyway.
     */
    refresh() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
      this.needFullRender && this.clone.draw(e);
    }
    /**
     * Reset overlay styles to initial values.
     */
    reset() {
      const e = this.clone.wtTable.holder, t = this.clone.wtTable.hider, i = e.style, r = t.style, s = e.parentNode.style;
      [i, r, s].forEach((o) => {
        o.width = "", o.height = "";
      });
    }
    /**
     * Determine if Walkontable is running in RTL mode.
     *
     * @returns {boolean}
     */
    isRtl() {
      return this.wtSettings.getSetting("rtlMode");
    }
    /**
     * Destroy overlay instance.
     */
    destroy() {
      this.clone.eventManager.destroy();
    }
  }
  class f1e extends gy {
    /**
     * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.
     * @param {FacadeGetter} facadeGetter Function which return proper facade.
     * @param {Settings} wtSettings The Walkontable settings.
     * @param {DomBindings} domBindings Dom elements bound to the current instance.
     * @param {BottomOverlay} bottomOverlay The instance of the Top overlay.
     * @param {InlineStartOverlay} inlineStartOverlay The instance of the InlineStart overlay.
     */
    constructor(e, t, i, r, s, o) {
      super(e, t, Fu, i, r), this.bottomOverlay = s, this.inlineStartOverlay = o;
    }
    /**
     * Factory method to create a subclass of `Table` that is relevant to this overlay.
     *
     * @see Table#constructor
     * @param {...*} args Parameters that will be forwarded to the `Table` constructor.
     * @returns {BottomInlineStartCornerOverlayTable}
     */
    createTable() {
      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++)
        t[i] = arguments[i];
      return new LD(...t);
    }
    /**
     * Checks if overlay should be fully rendered.
     *
     * @returns {boolean}
     */
    shouldBeRendered() {
      return this.wtSettings.getSetting("shouldRenderBottomOverlay") && this.wtSettings.getSetting("shouldRenderInlineStartOverlay");
    }
    /**
     * Updates the corner overlay position.
     *
     * @returns {boolean}
     */
    resetFixedPosition() {
      const {
        wot: e
      } = this;
      if (this.updateTrimmingContainer(), !e.wtTable.holder.parentNode)
        return !1;
      const t = this.clone.wtTable.holder.parentNode;
      if (t.style.top = "", this.trimmingContainer === this.domBindings.rootWindow) {
        const s = this.inlineStartOverlay.getOverlayOffset(), o = this.bottomOverlay.getOverlayOffset();
        t.style[this.isRtl() ? "right" : "left"] = `${s}px`, t.style.bottom = `${o}px`;
      } else
        ly(t), this.repositionOverlay();
      let i = ti(this.clone.wtTable.TABLE);
      const r = fn(this.clone.wtTable.TABLE);
      return this.wot.wtTable.hasDefinedSize() || (i = 0), t.style.height = `${i}px`, t.style.width = `${r}px`, !1;
    }
    /**
     * Reposition the overlay.
     */
    repositionOverlay() {
      const {
        wtTable: e,
        wtViewport: t
      } = this.wot, {
        rootDocument: i
      } = this.domBindings, r = this.clone.wtTable.holder.parentNode;
      let s = 0;
      t.hasVerticalScroll() || (s += t.getWorkspaceHeight() - e.getTotalHeight()), t.hasVerticalScroll() && t.hasHorizontalScroll() && (s += xi(i)), r.style.bottom = `${s}px`;
    }
  }
  const g1e = "calculatedColumns", j1 = {
    /**
     * Get the source index of the first rendered column. If no columns are rendered, returns an error code: -1.
     *
     * @returns {number}
     * @this Table
     */
    getFirstRenderedColumn() {
      const n = this.dataAccessObject.startColumnRendered;
      return n === null ? -1 : n;
    },
    /**
     * Get the source index of the first column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.
     *
     * @returns {number}
     * @this Table
     */
    getFirstVisibleColumn() {
      const n = this.dataAccessObject.startColumnVisible;
      return n === null ? -1 : n;
    },
    /**
     * Get the source index of the first column partially visible in the viewport. If no columns are partially visible, returns an error code: -1.
     *
     * @returns {number}
     * @this Table
     */
    getFirstPartiallyVisibleColumn() {
      const n = this.dataAccessObject.startColumnPartiallyVisible;
      return n === null ? -1 : n;
    },
    /**
     * Get the source index of the last rendered column. If no columns are rendered, returns an error code: -1.
     *
     * @returns {number}
     * @this Table
     */
    getLastRenderedColumn() {
      const n = this.dataAccessObject.endColumnRendered;
      return n === null ? -1 : n;
    },
    /**
     * Get the source index of the last column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.
     *
     * @returns {number}
     * @this Table
     */
    getLastVisibleColumn() {
      const n = this.dataAccessObject.endColumnVisible;
      return n === null ? -1 : n;
    },
    /**
     * Get the source index of the last column partially visible in the viewport. If no columns are partially visible, returns an error code: -1.
     *
     * @returns {number}
     * @this Table
     */
    getLastPartiallyVisibleColumn() {
      const n = this.dataAccessObject.endColumnPartiallyVisible;
      return n === null ? -1 : n;
    },
    /**
     * Get the number of rendered columns.
     *
     * @returns {number}
     * @this Table
     */
    getRenderedColumnsCount() {
      return this.dataAccessObject.countColumnsRendered;
    },
    /**
     * Get the number of fully visible columns in the viewport.
     *
     * @returns {number}
     * @this Table
     */
    getVisibleColumnsCount() {
      return this.dataAccessObject.countColumnsVisible;
    },
    /**
     * Get the number of rendered row headers.
     *
     * @returns {number}
     * @this Table
     */
    getRowHeadersCount() {
      return this.dataAccessObject.rowHeaders.length;
    }
  };
  Sl(j1, "MIXIN_NAME", g1e, {
    writable: !1,
    enumerable: !1
  });
  class $D extends Qp {
    /**
     * @param {TableDao} dataAccessObject The data access object.
     * @param {FacadeGetter} facadeGetter Function which return proper facade.
     * @param {DomBindings} domBindings Bindings into DOM.
     * @param {Settings} wtSettings The Walkontable settings.
     */
    constructor(e, t, i, r) {
      super(e, t, i, r, Wa);
    }
  }
  qt($D, ND);
  qt($D, j1);
  function p1e(n, e, t) {
    return (e = m1e(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function m1e(n) {
    var e = b1e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function b1e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class v1e extends gy {
    /**
     * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.
     * @param {FacadeGetter} facadeGetter Function which return proper facade.
     * @param {Settings} wtSettings The Walkontable settings.
     * @param {DomBindings} domBindings Dom elements bound to the current instance.
     */
    constructor(e, t, i, r) {
      super(e, t, Wa, i, r), p1e(this, "cachedFixedRowsBottom", -1), this.cachedFixedRowsBottom = this.wtSettings.getSetting("fixedRowsBottom");
    }
    /**
     * Factory method to create a subclass of `Table` that is relevant to this overlay.
     *
     * @see Table#constructor
     * @param {...*} args Parameters that will be forwarded to the `Table` constructor.
     * @returns {BottomOverlayTable}
     */
    createTable() {
      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++)
        t[i] = arguments[i];
      return new $D(...t);
    }
    /**
     * Checks if overlay should be fully rendered.
     *
     * @returns {boolean}
     */
    shouldBeRendered() {
      return this.wtSettings.getSetting("shouldRenderBottomOverlay");
    }
    /**
     * Updates the top overlay position.
     *
     * @returns {boolean}
     */
    resetFixedPosition() {
      if (!this.needFullRender || !this.shouldBeRendered() || !this.wot.wtTable.holder.parentNode)
        return !1;
      const {
        rootWindow: e
      } = this.domBindings, t = this.clone.wtTable.holder.parentNode;
      t.style.top = "";
      let i = 0;
      const r = this.wtSettings.getSetting("preventOverflow");
      this.trimmingContainer === e && (!r || r !== "vertical") ? (i = this.getOverlayOffset(), t.style.bottom = `${i}px`) : (i = this.getScrollPosition(), this.repositionOverlay());
      const s = this.adjustHeaderBordersPosition(i);
      return this.adjustElementsSize(), s;
    }
    /**
     * Updates the bottom overlay position.
     */
    repositionOverlay() {
      const {
        wtTable: e,
        wtViewport: t
      } = this.wot, {
        rootDocument: i
      } = this.domBindings, r = this.clone.wtTable.holder.parentNode;
      let s = 0;
      t.hasVerticalScroll() || (s += t.getWorkspaceHeight() - e.getTotalHeight()), t.hasVerticalScroll() && t.hasHorizontalScroll() && (s += xi(i)), r.style.bottom = `${s}px`;
    }
    /**
     * Sets the main overlay's vertical scroll position.
     *
     * @param {number} pos The scroll position.
     * @returns {boolean}
     */
    setScrollPosition(e) {
      const {
        rootWindow: t
      } = this.domBindings;
      let i = !1;
      return this.mainTableScrollableElement === t ? (t.scrollTo(I1(t), e), i = !0) : this.mainTableScrollableElement.scrollTop !== e && (this.mainTableScrollableElement.scrollTop = e, i = !0), i;
    }
    /**
     * Triggers onScroll hook callback.
     */
    onScroll() {
      this.wtSettings.getSetting("onScrollHorizontally");
    }
    /**
     * Calculates total sum cells height.
     *
     * @param {number} from Row index which calculates started from.
     * @param {number} to Row index where calculation is finished.
     * @returns {number} Height sum.
     */
    sumCellSizes(e, t) {
      const {
        wtTable: i,
        wtSettings: r
      } = this.wot, s = r.getSetting("defaultRowHeight");
      let o = e, a = 0;
      for (; o < t; ) {
        const l = i.getRowHeight(o);
        a += l === void 0 ? s : l, o += 1;
      }
      return a;
    }
    /**
     * Adjust overlay root element, children and master table element sizes (width, height).
     */
    adjustElementsSize() {
      this.updateTrimmingContainer(), this.needFullRender && (this.adjustRootElementSize(), this.adjustRootChildrenSize());
    }
    /**
     * Adjust overlay root element size (width and height).
     */
    adjustRootElementSize() {
      const {
        wtTable: e,
        wtViewport: t
      } = this.wot, {
        rootDocument: i,
        rootWindow: r
      } = this.domBindings, s = xi(i), a = this.clone.wtTable.holder.parentNode.style, l = this.wtSettings.getSetting("preventOverflow");
      if (this.trimmingContainer !== r || l === "horizontal") {
        let u = t.getWorkspaceWidth();
        this.wot.wtOverlays.hasScrollbarRight && (u -= s), u = Math.min(u, e.wtRootElement.scrollWidth), a.width = `${u}px`;
      } else
        a.width = "";
      this.clone.wtTable.holder.style.width = a.width;
      let c = ti(this.clone.wtTable.TABLE);
      this.wot.wtTable.hasDefinedSize() || (c = 0), a.height = `${c}px`;
    }
    /**
     * Adjust overlay root childs size.
     */
    adjustRootChildrenSize() {
      const {
        holder: e
      } = this.clone.wtTable;
      this.clone.wtTable.hider.style.width = this.hider.style.width, e.style.width = e.parentNode.style.width, e.style.height = e.parentNode.style.height;
    }
    /**
     * Adjust the overlay dimensions and position.
     */
    applyToDOM() {
      const e = this.wtSettings.getSetting("totalRows");
      if (typeof this.wot.wtViewport.rowsRenderCalculator.startPosition == "number")
        this.spreader.style.top = `${this.wot.wtViewport.rowsRenderCalculator.startPosition}px`;
      else if (e === 0)
        this.spreader.style.top = "0";
      else
        throw new Error("Incorrect value of the rowsRenderCalculator");
      this.spreader.style.bottom = "", this.needFullRender && this.syncOverlayOffset();
    }
    /**
     * Synchronize calculated left position to an element.
     */
    syncOverlayOffset() {
      const e = this.isRtl() ? "right" : "left", {
        spreader: t
      } = this.clone.wtTable;
      typeof this.wot.wtViewport.columnsRenderCalculator.startPosition == "number" ? t.style[e] = `${this.wot.wtViewport.columnsRenderCalculator.startPosition}px` : t.style[e] = "";
    }
    /**
     * Scrolls vertically to a row.
     *
     * @param {number} sourceRow Row index which you want to scroll to.
     * @param {boolean} [bottomEdge=false] If `true`, scrolls according to the bottom edge (top edge is by default).
     */
    scrollTo(e, t) {
      let i = this.getTableParentOffset();
      const s = (this.wot.cloneSource ? this.wot.cloneSource : this.wot).wtTable.holder;
      let o = 0;
      t && s.offsetHeight !== s.clientHeight && (o = xi(this.domBindings.rootDocument)), t ? (i += this.sumCellSizes(0, e + 1), i -= this.wot.wtViewport.getViewportHeight(), i += 1) : i += this.sumCellSizes(this.wtSettings.getSetting("fixedRowsBottom"), e), i += o, this.setScrollPosition(i);
    }
    /**
     * Gets table parent top position.
     *
     * @returns {number}
     */
    getTableParentOffset() {
      return this.mainTableScrollableElement === this.domBindings.rootWindow ? this.wot.wtTable.holderOffset.top : 0;
    }
    /**
     * Gets the main overlay's vertical scroll position.
     *
     * @returns {number} Main table's vertical scroll position.
     */
    getScrollPosition() {
      return O1(this.mainTableScrollableElement, this.domBindings.rootWindow);
    }
    /**
     * Gets the main overlay's vertical overlay offset.
     *
     * @returns {number} Main table's vertical overlay offset.
     */
    getOverlayOffset() {
      const {
        rootWindow: e
      } = this.domBindings, t = this.wtSettings.getSetting("preventOverflow");
      let i = 0;
      if (this.trimmingContainer === e && (!t || t !== "vertical")) {
        const r = this.wot.wtTable.getTotalHeight(), s = this.clone.wtTable.getTotalHeight(), o = r - s, a = this.domBindings.rootDocument.documentElement.clientHeight;
        i = Math.max(this.getTableParentOffset() - this.getScrollPosition() - a + r, 0), i > o && (i = 0);
      }
      return i;
    }
    /**
     * Adds css classes to hide the header border's header (cell-selection border hiding issue).
     *
     * @param {number} position Header Y position if trimming container is window or scroll top if not.
     * @returns {boolean}
     */
    adjustHeaderBordersPosition(e) {
      const t = this.wtSettings.getSetting("fixedRowsBottom"), i = this.cachedFixedRowsBottom !== t, r = this.wtSettings.getSetting("columnHeaders");
      let s = !1;
      if ((i || t === 0) && r.length > 0) {
        const o = this.wot.wtTable.holder.parentNode, a = Ue(o, "innerBorderBottom");
        this.cachedFixedRowsBottom = this.wtSettings.getSetting("fixedRowsBottom"), e || this.wtSettings.getSetting("totalRows") === 0 ? (ue(o, "innerBorderBottom"), s = !a) : (Ze(o, "innerBorderBottom"), s = a);
      }
      return s;
    }
  }
  const w1e = "calculatedRows", FD = {
    /**
     * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.
     *
     * @returns {number}
     * @this Table
     */
    getFirstRenderedRow() {
      const n = this.dataAccessObject.startRowRendered;
      return n === null ? -1 : n;
    },
    /**
     * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.
     *
     * @returns {number}
     * @this Table
     */
    getFirstVisibleRow() {
      const n = this.dataAccessObject.startRowVisible;
      return n === null ? -1 : n;
    },
    /**
     * Get the source index of the first row partially visible in the viewport. If no rows are partially visible, returns an error code: -1.
     *
     * @returns {number}
     * @this Table
     */
    getFirstPartiallyVisibleRow() {
      const n = this.dataAccessObject.startRowPartiallyVisible;
      return n === null ? -1 : n;
    },
    /**
     * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.
     *
     * @returns {number}
     * @this Table
     */
    getLastRenderedRow() {
      const n = this.dataAccessObject.endRowRendered;
      return n === null ? -1 : n;
    },
    /**
     * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.
     *
     * @returns {number}
     * @this Table
     */
    getLastVisibleRow() {
      const n = this.dataAccessObject.endRowVisible;
      return n === null ? -1 : n;
    },
    /**
     * Get the source index of the last row partially visible in the viewport. If no rows are partially visible, returns an error code: -1.
     *
     * @returns {number}
     * @this Table
     */
    getLastPartiallyVisibleRow() {
      const n = this.dataAccessObject.endRowPartiallyVisible;
      return n === null ? -1 : n;
    },
    /**
     * Get the number of rendered rows.
     *
     * @returns {number}
     * @this Table
     */
    getRenderedRowsCount() {
      return this.dataAccessObject.countRowsRendered;
    },
    /**
     * Get the number of fully visible rows in the viewport.
     *
     * @returns {number}
     * @this Table
     */
    getVisibleRowsCount() {
      return this.dataAccessObject.countRowsVisible;
    },
    /**
     * Get the number of rendered column headers.
     *
     * @returns {number}
     * @this Table
     */
    getColumnHeadersCount() {
      return this.dataAccessObject.columnHeaders.length;
    }
  };
  Sl(FD, "MIXIN_NAME", w1e, {
    writable: !1,
    enumerable: !1
  });
  class BD extends Qp {
    /**
     * @param {TableDao} dataAccessObject The data access object.
     * @param {FacadeGetter} facadeGetter Function which return proper facade.
     * @param {DomBindings} domBindings Bindings into DOM.
     * @param {Settings} wtSettings The Walkontable settings.
     */
    constructor(e, t, i, r) {
      super(e, t, i, r, of);
    }
  }
  qt(BD, FD);
  qt(BD, W1);
  const y1e = "localHooks", Ki = {
    /**
     * Internal hooks storage.
     */
    _localHooks: /* @__PURE__ */ Object.create(null),
    /**
     * Add hook to the collection.
     *
     * @param {string} key The hook name.
     * @param {Function} callback The hook callback.
     * @returns {object}
     */
    addLocalHook(n, e) {
      return this._localHooks[n] || (this._localHooks[n] = []), this._localHooks[n].push(e), this;
    },
    /**
     * Run hooks.
     *
     * @param {string} key The name of the hook to run.
     * @param {*} [arg1] An additional parameter passed to the callback function.
     * @param {*} [arg2] An additional parameter passed to the callback function.
     * @param {*} [arg3] An additional parameter passed to the callback function.
     * @param {*} [arg4] An additional parameter passed to the callback function.
     * @param {*} [arg5] An additional parameter passed to the callback function.
     * @param {*} [arg6] An additional parameter passed to the callback function.
     */
    runLocalHooks(n, e, t, i, r, s, o) {
      if (this._localHooks[n]) {
        const a = this._localHooks[n].length;
        for (let l = 0; l < a; l++)
          P_(this._localHooks[n][l], this, e, t, i, r, s, o);
      }
    },
    /**
     * Clear all added hooks.
     *
     * @returns {object}
     */
    clearLocalHooks() {
      return this._localHooks = {}, this;
    }
  };
  Sl(Ki, "MIXIN_NAME", y1e, {
    writable: !1,
    enumerable: !1
  });
  let U9 = class {
    /**
     * @param {object} settings The selection settings object. @todo type.
     * @param {CellRange} cellRange The cell range instance.
     */
    constructor(e, t) {
      this.settings = e, this.cellRange = t || null;
    }
    /**
     * Checks if selection is empty.
     *
     * @returns {boolean}
     */
    isEmpty() {
      return this.cellRange === null;
    }
    /**
     * Adds a cell coords to the selection.
     *
     * @param {CellCoords} coords The cell coordinates to add.
     * @returns {Selection}
     */
    add(e) {
      return this.isEmpty() ? this.cellRange = this.settings.createCellRange(e) : this.cellRange.expand(e), this;
    }
    /**
     * If selection range from or to property equals oldCoords, replace it with newCoords. Return boolean
     * information about success.
     *
     * @param {CellCoords} oldCoords An old cell coordinates to replace.
     * @param {CellCoords} newCoords The new cell coordinates.
     * @returns {boolean}
     */
    replace(e, t) {
      if (!this.isEmpty()) {
        if (this.cellRange.from.isEqual(e))
          return this.cellRange.from = t, !0;
        if (this.cellRange.to.isEqual(e))
          return this.cellRange.to = t, !0;
      }
      return !1;
    }
    /**
     * Clears selection.
     *
     * @returns {Selection}
     */
    clear() {
      return this.cellRange = null, this;
    }
    /**
     * Returns the top left (or top right in RTL) and bottom right (or bottom left in RTL) selection coordinates.
     *
     * @returns {number[]} Returns array of coordinates for example `[1, 1, 5, 5]`.
     */
    getCorners() {
      const e = this.cellRange.getOuterTopStartCorner(), t = this.cellRange.getOuterBottomEndCorner();
      return [e.row, e.col, t.row, t.col];
    }
    /**
     * Destroys the instance.
     */
    destroy() {
      this.runLocalHooks("destroy");
    }
  };
  qt(U9, Ki);
  const G9 = "active-header", VD = "header", WD = "area", jD = "focus", C1e = "fill", S1e = "row", _1e = "column", R1e = "custom-selection", zD = Object.freeze({
    width: "6px",
    height: "6px",
    borderWidth: "1px",
    borderStyle: "solid",
    borderColor: "#FFF"
  });
  var E1e = xD;
  E1e("flat");
  function x1e(n, e) {
    Y9(n, e), e.add(n);
  }
  function MV(n, e, t) {
    Y9(n, e), e.set(n, t);
  }
  function Y9(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function ni(n, e) {
    return n.get(Cv(n, e));
  }
  function AV(n, e, t) {
    return n.set(Cv(n, e), t), t;
  }
  function Cv(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var Mo = /* @__PURE__ */ new WeakMap(), jr = /* @__PURE__ */ new WeakMap(), _0 = /* @__PURE__ */ new WeakSet();
  class T1e {
    constructor() {
      x1e(this, _0), MV(this, Mo, void 0), MV(this, jr, void 0);
    }
    /**
     * Sets the Walkontable instance that will be taking into account while scanning the table.
     *
     * @param {Walkontable} activeOverlaysWot The Walkontable instance.
     * @returns {SelectionScanner}
     */
    setActiveOverlay(e) {
      return AV(jr, this, e), this;
    }
    /**
     * Sets the Selection instance to process.
     *
     * @param {Selection} selection The Selection instance.
     * @returns {SelectionScanner}
     */
    setActiveSelection(e) {
      return AV(Mo, this, e), this;
    }
    /**
     * Scans the rendered table with selection and returns elements that intersects
     * with selection coordinates.
     *
     * @returns {HTMLTableElement[]}
     */
    scan() {
      const e = ni(Mo, this).settings.selectionType, t = /* @__PURE__ */ new Set();
      return e === "active-header" ? (this.scanColumnsInHeadersRange((i) => t.add(i)), this.scanRowsInHeadersRange((i) => t.add(i))) : e === "area" ? this.scanCellsRange((i) => t.add(i)) : e === "focus" ? (this.scanColumnsInHeadersRange((i) => t.add(i)), this.scanRowsInHeadersRange((i) => t.add(i)), this.scanCellsRange((i) => t.add(i))) : e === "fill" ? this.scanCellsRange((i) => t.add(i)) : e === "header" ? (this.scanColumnsInHeadersRange((i) => t.add(i)), this.scanRowsInHeadersRange((i) => t.add(i))) : e === "row" ? (this.scanRowsInHeadersRange((i) => t.add(i)), this.scanRowsInCellsRange((i) => t.add(i))) : e === "column" && (this.scanColumnsInHeadersRange((i) => t.add(i)), this.scanColumnsInCellsRange((i) => t.add(i))), t;
    }
    /**
     * Scans the table (only rendered headers) and collect all column headers (TH) that match
     * the coordinates passed in the Selection instance.
     *
     * @param {function(HTMLTableElement): void} callback The callback function to trigger.
     */
    scanColumnsInHeadersRange(e) {
      const [t, i, r, s] = ni(Mo, this).getCorners(), {
        wtTable: o
      } = ni(jr, this), a = o.getRenderedColumnsCount(), l = o.getColumnHeadersCount();
      let c = 0;
      for (let u = -o.getRowHeadersCount(); u < a; u++) {
        const h = o.columnFilter.renderedToSource(u);
        if (!(h < i || h > s)) {
          for (let d = -l; d < 0; d++) {
            if (d < t || d > r)
              continue;
            const f = d + l;
            let g = o.getColumnHeader(h, f);
            const p = ni(jr, this).getSetting("onBeforeHighlightingColumnHeader", h, f, {
              selectionType: ni(Mo, this).settings.selectionType,
              columnCursor: c,
              selectionWidth: s - i + 1
            });
            p !== null && (p !== h && (g = o.getColumnHeader(p, f)), e(g));
          }
          c += 1;
        }
      }
    }
    /**
     * Scans the table (only rendered headers) and collect all row headers (TH) that match
     * the coordinates passed in the Selection instance.
     *
     * @param {function(HTMLTableElement): void} callback The callback function to trigger.
     */
    scanRowsInHeadersRange(e) {
      const [t, i, r, s] = ni(Mo, this).getCorners(), {
        wtTable: o
      } = ni(jr, this), a = o.getRenderedRowsCount(), l = o.getRowHeadersCount();
      let c = 0;
      for (let u = -o.getColumnHeadersCount(); u < a; u++) {
        const h = o.rowFilter.renderedToSource(u);
        if (!(h < t || h > r)) {
          for (let d = -l; d < 0; d++) {
            if (d < i || d > s)
              continue;
            const f = d + l;
            let g = o.getRowHeader(h, f);
            const p = ni(jr, this).getSetting("onBeforeHighlightingRowHeader", h, f, {
              selectionType: ni(Mo, this).settings.selectionType,
              rowCursor: c,
              selectionHeight: r - t + 1
            });
            p !== null && (p !== h && (g = o.getRowHeader(p, f)), e(g));
          }
          c += 1;
        }
      }
    }
    /**
     * Scans the table (only rendered cells) and collect all cells (TR) that match
     * the coordinates passed in the Selection instance.
     *
     * @param {function(HTMLTableElement): void} callback The callback function to trigger.
     */
    scanCellsRange(e) {
      const [t, i, r, s] = ni(Mo, this).getCorners(), {
        wtTable: o
      } = ni(jr, this);
      Cv(_0, this, fT).call(this, (a, l) => {
        if (a >= t && a <= r && l >= i && l <= s) {
          const c = o.getCell(ni(jr, this).createCellCoords(a, l)), u = ni(jr, this).getSetting("onAfterDrawSelection", a, l, ni(Mo, this).settings.layerLevel);
          typeof u == "string" && ue(c, u), e(c);
        }
      });
    }
    /**
     * Scans the table (only rendered cells) and collects all cells (TR) that match the coordinates
     * passed in the Selection instance but only for the X axis (rows).
     *
     * @param {function(HTMLTableElement): void} callback The callback function to trigger.
     */
    scanRowsInCellsRange(e) {
      const [t, , i] = ni(Mo, this).getCorners(), {
        wtTable: r
      } = ni(jr, this);
      Cv(_0, this, fT).call(this, (s, o) => {
        if (s >= t && s <= i) {
          const a = r.getCell(ni(jr, this).createCellCoords(s, o));
          e(a);
        }
      });
    }
    /**
     * Scans the table (only rendered cells) and collects all cells (TR) that match the coordinates
     * passed in the Selection instance but only for the Y axis (columns).
     *
     * @param {function(HTMLTableElement): void} callback The callback function to trigger.
     */
    scanColumnsInCellsRange(e) {
      const [, t, , i] = ni(Mo, this).getCorners(), {
        wtTable: r
      } = ni(jr, this);
      Cv(_0, this, fT).call(this, (s, o) => {
        if (o >= t && o <= i) {
          const a = r.getCell(ni(jr, this).createCellCoords(s, o));
          e(a);
        }
      });
    }
  }
  function fT(n) {
    const {
      wtTable: e
    } = ni(jr, this), t = e.getRenderedRowsCount(), i = e.getRenderedColumnsCount();
    for (let r = 0; r < t; r += 1) {
      const s = e.rowFilter.renderedToSource(r);
      for (let o = 0; o < i; o += 1)
        n(s, e.columnFilter.renderedToSource(o));
    }
  }
  class PV {
    // TODO As this is an internal class, should be designed for using {Walkontable}. It uses the facade,
    // TODO Con. Because the class is created on place where the instance reference comes from external origin.
    // TODO Imho, the discrimination for handling both, facade and non-facade should be handled.
    /**
     * @param {WalkontableFacade} wotInstance The Walkontable instance.
     * @param {object} settings The border settings.
     */
    constructor(e, t) {
      t && (this.eventManager = e.eventManager, this.instance = e, this.wot = e, this.settings = t, this.mouseDown = !1, this.main = null, this.top = null, this.bottom = null, this.start = null, this.end = null, this.topStyle = null, this.bottomStyle = null, this.startStyle = null, this.endStyle = null, this.cornerDefaultStyle = zD, this.cornerCenterPointOffset = -(parseInt(this.cornerDefaultStyle.width, 10) / 2), this.corner = null, this.cornerStyle = null, this.createBorders(t), this.registerListeners());
    }
    /**
     * Register all necessary events.
     */
    registerListeners() {
      const e = this.wot.rootDocument.body;
      this.eventManager.addEventListener(e, "mousedown", () => this.onMouseDown()), this.eventManager.addEventListener(e, "mouseup", () => this.onMouseUp());
      for (let t = 0, i = this.main.childNodes.length; t < i; t++) {
        const r = this.main.childNodes[t];
        this.eventManager.addEventListener(r, "mouseenter", (s) => this.onMouseEnter(s, this.main.childNodes[t]));
      }
    }
    /**
     * Mouse down listener.
     *
     * @private
     */
    onMouseDown() {
      this.mouseDown = !0;
    }
    /**
     * Mouse up listener.
     *
     * @private
     */
    onMouseUp() {
      this.mouseDown = !1;
    }
    /**
     * Mouse enter listener for fragment selection functionality.
     *
     * @private
     * @param {Event} event Dom event.
     * @param {HTMLElement} parentElement Part of border element.
     */
    onMouseEnter(e, t) {
      if (!this.mouseDown || !this.wot.getSetting("hideBorderOnMouseDownOver"))
        return;
      e.preventDefault(), bo(e);
      const i = this, r = this.wot.rootDocument.body, s = t.getBoundingClientRect();
      t.style.display = "none";
      function o(l) {
        if (l.clientY < Math.floor(s.top) || l.clientY > Math.ceil(s.top + s.height) || l.clientX < Math.floor(s.left) || l.clientX > Math.ceil(s.left + s.width))
          return !0;
      }
      function a(l) {
        o(l) && (i.eventManager.removeEventListener(r, "mousemove", a), t.style.display = "block");
      }
      this.eventManager.addEventListener(r, "mousemove", a);
    }
    /**
     * Create border elements.
     *
     * @param {object} settings The border settings.
     */
    createBorders(e) {
      const {
        rootDocument: t
      } = this.wot;
      this.main = t.createElement("div");
      const i = ["top", "start", "bottom", "end", "corner"];
      let r = this.main.style;
      r.position = "absolute", r.top = 0, r.left = 0;
      for (let a = 0; a < 5; a++) {
        const l = i[a], c = t.createElement("div");
        c.className = `wtBorder ${this.settings.className || ""}`, this.settings[l] && this.settings[l].hide && (c.className += " hidden"), r = c.style, r.backgroundColor = this.settings[l] && this.settings[l].color ? this.settings[l].color : e.border.color, r.height = this.settings[l] && this.settings[l].width ? `${this.settings[l].width}px` : `${e.border.width}px`, r.width = this.settings[l] && this.settings[l].width ? `${this.settings[l].width}px` : `${e.border.width}px`, this.main.appendChild(c);
      }
      this.top = this.main.childNodes[0], this.start = this.main.childNodes[1], this.bottom = this.main.childNodes[2], this.end = this.main.childNodes[3], this.topStyle = this.top.style, this.startStyle = this.start.style, this.bottomStyle = this.bottom.style, this.endStyle = this.end.style, this.corner = this.main.childNodes[4], this.corner.className += " corner", this.cornerStyle = this.corner.style, this.cornerStyle.width = this.cornerDefaultStyle.width, this.cornerStyle.height = this.cornerDefaultStyle.height, this.cornerStyle.border = [this.cornerDefaultStyle.borderWidth, this.cornerDefaultStyle.borderStyle, this.cornerDefaultStyle.borderColor].join(" "), fc() && this.instance.getSetting("isDataViewInstance") && this.createMultipleSelectorHandles(), this.disappear();
      const {
        wtTable: s
      } = this.wot;
      let o = s.bordersHolder;
      o || (o = t.createElement("div"), o.className = "htBorders", s.bordersHolder = o, s.spreader.appendChild(o)), o.appendChild(this.main);
    }
    /**
     * Create multiple selector handler for mobile devices.
     */
    createMultipleSelectorHandles() {
      const {
        rootDocument: e
      } = this.wot;
      this.selectionHandles = {
        top: e.createElement("DIV"),
        topHitArea: e.createElement("DIV"),
        bottom: e.createElement("DIV"),
        bottomHitArea: e.createElement("DIV")
      };
      const t = 10, i = 40;
      this.selectionHandles.top.className = "topSelectionHandle topLeftSelectionHandle", this.selectionHandles.topHitArea.className = "topSelectionHandle-HitArea topLeftSelectionHandle-HitArea", this.selectionHandles.bottom.className = "bottomSelectionHandle bottomRightSelectionHandle", this.selectionHandles.bottomHitArea.className = "bottomSelectionHandle-HitArea bottomRightSelectionHandle-HitArea", this.selectionHandles.styles = {
        top: this.selectionHandles.top.style,
        topHitArea: this.selectionHandles.topHitArea.style,
        bottom: this.selectionHandles.bottom.style,
        bottomHitArea: this.selectionHandles.bottomHitArea.style
      };
      const r = {
        position: "absolute",
        height: `${i}px`,
        width: `${i}px`,
        "border-radius": `${parseInt(i / 1.5, 10)}px`
      };
      lt(r, (o, a) => {
        this.selectionHandles.styles.bottomHitArea[a] = o, this.selectionHandles.styles.topHitArea[a] = o;
      });
      const s = {
        position: "absolute",
        height: `${t}px`,
        width: `${t}px`,
        "border-radius": `${parseInt(t / 1.5, 10)}px`,
        background: "#F5F5FF",
        border: "1px solid #4285c8"
      };
      lt(s, (o, a) => {
        this.selectionHandles.styles.bottom[a] = o, this.selectionHandles.styles.top[a] = o;
      }), this.main.appendChild(this.selectionHandles.top), this.main.appendChild(this.selectionHandles.bottom), this.main.appendChild(this.selectionHandles.topHitArea), this.main.appendChild(this.selectionHandles.bottomHitArea);
    }
    /**
     * @param {number} row The visual row index.
     * @param {number} col The visual column index.
     * @returns {boolean}
     */
    isPartRange(e, t) {
      const i = this.wot.selectionManager.getAreaSelection();
      return !!(i.cellRange && (e !== i.cellRange.to.row || t !== i.cellRange.to.col));
    }
    /**
     * @param {number} row The visual row index.
     * @param {number} col The visual column index.
     * @param {number} top The top position of the handler.
     * @param {number} left The left position of the handler.
     * @param {number} width The width of the handler.
     * @param {number} height The height of the handler.
     */
    updateMultipleSelectionHandlesPosition(e, t, i, r, s, o) {
      const l = this.wot.wtSettings.getSetting("rtlMode") ? "right" : "left", {
        top: c,
        topHitArea: u,
        bottom: h,
        bottomHitArea: d
      } = this.selectionHandles.styles, f = parseInt(c.borderWidth, 10), g = parseInt(c.width, 10), p = parseInt(u.width, 10), m = this.wot.wtTable.getWidth(), v = this.wot.wtTable.getHeight();
      c.top = `${parseInt(i - g - 1, 10)}px`, c[l] = `${parseInt(r - g - 1, 10)}px`, u.top = `${parseInt(i - p / 4 * 3, 10)}px`, u[l] = `${parseInt(r - p / 4 * 3, 10)}px`;
      const y = Math.min(parseInt(r + s, 10), m - g - f * 2), w = Math.min(parseInt(r + s - p / 4, 10), m - p - f * 2);
      h[l] = `${y}px`, d[l] = `${w}px`;
      const R = Math.min(parseInt(i + o, 10), v - g - f * 2), E = Math.min(parseInt(i + o - p / 4, 10), v - p - f * 2);
      h.top = `${R}px`, d.top = `${E}px`, this.settings.border.cornerVisible && this.settings.border.cornerVisible() ? (c.display = "block", u.display = "block", this.isPartRange(e, t) ? (h.display = "none", d.display = "none") : (h.display = "block", d.display = "block")) : (c.display = "none", h.display = "none", u.display = "none", d.display = "none"), e === this.wot.wtSettings.getSetting("fixedRowsTop") || t === this.wot.wtSettings.getSetting("fixedColumnsStart") ? (c.zIndex = "9999", u.zIndex = "9999") : (c.zIndex = "", u.zIndex = "");
    }
    /**
     * Show border around one or many cells.
     *
     * @param {Array} corners The corner coordinates.
     */
    appear(e) {
      if (this.disabled)
        return;
      const {
        wtTable: t,
        rootDocument: i,
        rootWindow: r
      } = this.wot;
      let s, o, a, l, c, u;
      const h = t.getRenderedRowsCount();
      for (let G = 0; G < h; G += 1) {
        const U = t.rowFilter.renderedToSource(G);
        if (U >= e[0] && U <= e[2]) {
          s = U, c = e[0];
          break;
        }
      }
      for (let G = h - 1; G >= 0; G -= 1) {
        const U = t.rowFilter.renderedToSource(G);
        if (U >= e[0] && U <= e[2]) {
          o = U;
          break;
        }
      }
      const d = t.getRenderedColumnsCount();
      for (let G = 0; G < d; G += 1) {
        const U = t.columnFilter.renderedToSource(G);
        if (U >= e[1] && U <= e[3]) {
          a = U, u = e[1];
          break;
        }
      }
      for (let G = d - 1; G >= 0; G -= 1) {
        const U = t.columnFilter.renderedToSource(G);
        if (U >= e[1] && U <= e[3]) {
          l = U;
          break;
        }
      }
      if (s === void 0 || a === void 0) {
        this.disappear();
        return;
      }
      let f = t.getCell(this.wot.createCellCoords(s, a));
      const g = s !== o || a !== l, p = g ? t.getCell(this.wot.createCellCoords(o, l)) : f, m = _i(f), v = g ? _i(p) : m, y = _i(t.TABLE), w = fn(t.TABLE), R = m.top, E = m.left, C = this.wot.wtSettings.getSetting("rtlMode");
      let T = 0, P = 0;
      if (C) {
        const G = fn(f), U = r.innerWidth - y.left - w;
        P = E + G - v.left, T = r.innerWidth - E - G - U - 1;
      } else
        P = v.left + fn(p) - E, T = E - y.left - 1;
      if (this.isEntireColumnSelected(s, o)) {
        const G = this.getDimensionsFromHeader("columns", a, l, c, y);
        let U = null;
        G && ([U, T, P] = G), U && (f = U);
      }
      let x = R - y.top - 1, A = v.top + ti(p) - R;
      if (this.isEntireRowSelected(a, l)) {
        const G = this.getDimensionsFromHeader("rows", s, o, u, y);
        let U = null;
        G && ([U, x, A] = G), U && (f = U);
      }
      const D = al(f, r);
      parseInt(D.borderTopWidth, 10) > 0 && (x += 1, A = A > 0 ? A - 1 : 0), parseInt(D[C ? "borderRightWidth" : "borderLeftWidth"], 10) > 0 && (T += 1, P = P > 0 ? P - 1 : 0);
      const B = C ? "right" : "left";
      this.topStyle.top = `${x}px`, this.topStyle[B] = `${T}px`, this.topStyle.width = `${P}px`, this.topStyle.display = "block", this.startStyle.top = `${x}px`, this.startStyle[B] = `${T}px`, this.startStyle.height = `${A}px`, this.startStyle.display = "block";
      const F = Math.floor(this.settings.border.width / 2);
      this.bottomStyle.top = `${x + A - F}px`, this.bottomStyle[B] = `${T}px`, this.bottomStyle.width = `${P}px`, this.bottomStyle.display = "block", this.endStyle.top = `${x}px`, this.endStyle[B] = `${T + P - F}px`, this.endStyle.height = `${A + 1}px`, this.endStyle.display = "block";
      let W = this.settings.border.cornerVisible;
      W = typeof W == "function" ? W(this.settings.layerLevel) : W;
      const N = this.wot.getSetting("onModifyGetCellCoords", o, l);
      let [O, V] = [o, l];
      if (N && Array.isArray(N) && ([, , O, V] = N), fc() || !W || this.isPartRange(O, V))
        this.cornerStyle.display = "none";
      else {
        this.cornerStyle.top = `${x + A + this.cornerCenterPointOffset - 1}px`, this.cornerStyle[B] = `${T + P + this.cornerCenterPointOffset - 1}px`, this.cornerStyle.borderRightWidth = this.cornerDefaultStyle.borderWidth, this.cornerStyle.width = this.cornerDefaultStyle.width, this.cornerStyle.display = "none";
        let G = nf(t.TABLE);
        const U = G === r;
        U && (G = i.documentElement);
        const se = parseInt(this.cornerDefaultStyle.width, 10) / 2, b = parseInt(this.cornerDefaultStyle.height, 10) / 2;
        if (l === this.wot.getSetting("totalColumns") - 1) {
          const S = U ? p.getBoundingClientRect().left : p.offsetLeft;
          let _ = !1, I = 0;
          C ? (I = S - parseInt(this.cornerDefaultStyle.width, 10) / 2, _ = I < 0) : (I = S + fn(p) + parseInt(this.cornerDefaultStyle.width, 10) / 2, _ = I >= gD(G)), _ && (this.cornerStyle[B] = `${Math.floor(T + P + this.cornerCenterPointOffset - se)}px`, this.cornerStyle[C ? "borderLeftWidth" : "borderRightWidth"] = 0);
        }
        o === this.wot.getSetting("totalRows") - 1 && (U ? p.getBoundingClientRect().top : p.offsetTop) + ti(p) + parseInt(this.cornerDefaultStyle.height, 10) / 2 >= Sd(G) && (this.cornerStyle.top = `${Math.floor(x + A + this.cornerCenterPointOffset - b)}px`, this.cornerStyle.borderBottomWidth = 0), this.cornerStyle.display = "block";
      }
      fc() && this.instance.getSetting("isDataViewInstance") && this.updateMultipleSelectionHandlesPosition(o, l, x, T, P, A);
    }
    /**
     * Check whether an entire column of cells is selected.
     *
     * @private
     * @param {number} startRowIndex Start row index.
     * @param {number} endRowIndex End row index.
     * @returns {boolean}
     */
    isEntireColumnSelected(e, t) {
      return e === this.wot.wtTable.getFirstRenderedRow() && t === this.wot.wtTable.getLastRenderedRow();
    }
    /**
     * Check whether an entire row of cells is selected.
     *
     * @private
     * @param {number} startColumnIndex Start column index.
     * @param {number} endColumnIndex End column index.
     * @returns {boolean}
     */
    isEntireRowSelected(e, t) {
      return e === this.wot.wtTable.getFirstRenderedColumn() && t === this.wot.wtTable.getLastRenderedColumn();
    }
    /**
     * Get left/top index and width/height depending on the `direction` provided.
     *
     * @private
     * @param {string} direction `rows` or `columns`, defines if an entire column or row is selected.
     * @param {number} fromIndex Start index of the selection.
     * @param {number} toIndex End index of the selection.
     * @param {number} headerIndex The header index as negative value.
     * @param {number} containerOffset Offset of the container.
     * @returns {Array|boolean} Returns an array of [headerElement, left, width] or [headerElement, top, height], depending on `direction` (`false` in case of an error getting the headers).
     */
    getDimensionsFromHeader(e, t, i, r, s) {
      const {
        wtTable: o
      } = this.wot, a = o.wtRootElement.parentNode;
      let l = null, c = null, u = null, h = null, d = null, f = null, g = null, p = null;
      switch (e) {
        case "rows":
          l = function() {
            return o.getRowHeader(...arguments);
          }, c = function() {
            return ti(...arguments);
          }, u = "ht__selection--rows", f = "top";
          break;
        case "columns":
          l = function() {
            return o.getColumnHeader(...arguments);
          }, c = function() {
            return fn(...arguments);
          }, u = "ht__selection--columns", f = "left";
          break;
      }
      if (a.classList.contains(u)) {
        const m = this.wot.getSetting("columnHeaders").length;
        if (g = l(t, m - r), p = l(i, m - r), !g || !p)
          return !1;
        const v = _i(g), y = _i(p);
        return g && p && (h = v[f] - s[f] - 1, d = y[f] + c(p) - v[f]), [g, h, d];
      }
      return !1;
    }
    /**
     * Change border style.
     *
     * @private
     * @param {string} borderElement Coordinate where add/remove border: top, bottom, start, end.
     * @param {object} border The border object descriptor.
     */
    changeBorderStyle(e, t) {
      const i = this[e].style, r = t[e];
      !r || r.hide ? ue(this[e], "hidden") : (Ue(this[e], "hidden") && Ze(this[e], "hidden"), i.backgroundColor = r.color, (e === "top" || e === "bottom") && (i.height = `${r.width}px`), (e === "start" || e === "end") && (i.width = `${r.width}px`));
    }
    /**
     * Change border style to default.
     *
     * @private
     * @param {string} position The position type ("top", "bottom", "start", "end") to change.
     */
    changeBorderToDefaultStyle(e) {
      const t = {
        width: 1,
        color: "#000"
      }, i = this[e].style;
      i.backgroundColor = t.color, i.width = `${t.width}px`, i.height = `${t.width}px`;
    }
    /**
     * Toggle class 'hidden' to element.
     *
     * @private
     * @param {string} borderElement Coordinate where add/remove border: top, bottom, start, end.
     * @param {boolean} [remove] Defines type of the action to perform.
     */
    toggleHiddenClass(e, t) {
      this.changeBorderToDefaultStyle(e), t ? ue(this[e], "hidden") : Ze(this[e], "hidden");
    }
    /**
     * Hide border.
     */
    disappear() {
      this.topStyle.display = "none", this.bottomStyle.display = "none", this.startStyle.display = "none", this.endStyle.display = "none", this.cornerStyle.display = "none", fc() && this.instance.getSetting("isDataViewInstance") && (this.selectionHandles.styles.top.display = "none", this.selectionHandles.styles.topHitArea.display = "none", this.selectionHandles.styles.bottom.display = "none", this.selectionHandles.styles.bottomHitArea.display = "none");
    }
    /**
     * Cleans up all the DOM state related to a Border instance. Call this prior to deleting a Border instance.
     */
    destroy() {
      this.eventManager.destroyWithOwnEventsOnly(), this.main.parentNode.removeChild(this.main);
    }
  }
  function M1e(n, e) {
    K9(n, e), e.add(n);
  }
  function Yf(n, e, t) {
    K9(n, e), e.set(n, t);
  }
  function K9(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function ft(n, e) {
    return n.get(UD(n, e));
  }
  function IV(n, e, t) {
    return n.set(UD(n, e), t), t;
  }
  function UD(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var tr = /* @__PURE__ */ new WeakMap(), Yr = /* @__PURE__ */ new WeakMap(), gT = /* @__PURE__ */ new WeakMap(), Bb = /* @__PURE__ */ new WeakMap(), pT = /* @__PURE__ */ new WeakMap(), Eh = /* @__PURE__ */ new WeakMap(), OV = /* @__PURE__ */ new WeakSet();
  class A1e {
    constructor(e) {
      M1e(this, OV), Yf(this, tr, void 0), Yf(this, Yr, void 0), Yf(this, gT, new T1e()), Yf(this, Bb, /* @__PURE__ */ new WeakMap()), Yf(this, pT, /* @__PURE__ */ new WeakSet()), Yf(this, Eh, /* @__PURE__ */ new Map()), IV(Yr, this, e);
    }
    /**
     * Sets the active Walkontable instance.
     *
     * @param {Walkontable} activeWot The overlays or master Walkontable instance.
     * @returns {SelectionManager}
     */
    setActiveOverlay(e) {
      return IV(tr, this, e), ft(gT, this).setActiveOverlay(ft(tr, this)), ft(Bb, this).has(ft(tr, this)) || ft(Bb, this).set(ft(tr, this), /* @__PURE__ */ new Set()), this;
    }
    /**
     * Gets the Selection instance of the "focus" type.
     *
     * @returns {Selection|null}
     */
    getFocusSelection() {
      return ft(Yr, this) !== null ? ft(Yr, this).getFocus() : null;
    }
    /**
     * Gets the Selection instance of the "area" type.
     *
     * @returns {Selection|null}
     */
    getAreaSelection() {
      return ft(Yr, this) !== null ? ft(Yr, this).createLayeredArea() : null;
    }
    /**
     * Gets the Border instance associated with Selection instance.
     *
     * @param {Selection} selection The selection instance.
     * @returns {Border|null} Returns the Border instance (new for each overlay Walkontable instance).
     */
    getBorderInstance(e) {
      if (!e.settings.border)
        return null;
      if (ft(Eh, this).has(e)) {
        const i = ft(Eh, this).get(e);
        if (i.has(ft(tr, this)))
          return i.get(ft(tr, this));
        const r = new PV(ft(tr, this), e.settings);
        return i.set(ft(tr, this), r), r;
      }
      const t = new PV(ft(tr, this), e.settings);
      return ft(Eh, this).set(e, /* @__PURE__ */ new Map([[ft(tr, this), t]])), t;
    }
    /**
     * Gets all Border instances associated with Selection instance for all overlays.
     *
     * @param {Selection} selection The selection instance.
     * @returns {Border[]}
     */
    getBorderInstances(e) {
      var t, i;
      return Array.from((t = (i = ft(Eh, this).get(e)) === null || i === void 0 ? void 0 : i.values()) !== null && t !== void 0 ? t : []);
    }
    /**
     * Destroys the Border instance associated with Selection instance.
     *
     * @param {Selection} selection The selection instance.
     */
    destroyBorders(e) {
      ft(Eh, this).get(e).forEach((t) => t.destroy()), ft(Eh, this).delete(e);
    }
    /**
     * Renders all the selections (add CSS classes to cells and draw borders).
     *
     * @param {boolean} fastDraw Indicates the render cycle type (fast/slow).
     */
    render(e) {
      if (ft(Yr, this) === null)
        return;
      e && UD(OV, this, P1e).call(this);
      const t = Array.from(ft(Yr, this)), i = /* @__PURE__ */ new Map(), r = /* @__PURE__ */ new Map();
      for (let s = 0; s < t.length; s++) {
        const o = t[s], {
          className: a,
          headerAttributes: l,
          createLayers: c,
          selectionType: u
        } = o.settings;
        ft(pT, this).has(o) || (ft(pT, this).add(o), o.addLocalHook("destroy", () => this.destroyBorders(o)));
        const h = this.getBorderInstance(o);
        if (o.isEmpty()) {
          h == null || h.disappear();
          continue;
        }
        a && ft(gT, this).setActiveSelection(o).scan().forEach((g) => {
          if (i.has(g)) {
            const p = i.get(g);
            p.has(a) && c === !0 ? p.set(a, p.get(a) + 1) : p.set(a, 1);
          } else
            i.set(g, /* @__PURE__ */ new Map([[a, 1]]));
          l && (r.has(g) || r.set(g, []), g.nodeName === "TH" && r.get(g).push(...l));
        });
        const d = o.getCorners();
        ft(tr, this).getSetting("onBeforeDrawBorders", d, u), h == null || h.appear(d);
      }
      i.forEach((s, o) => {
        var a;
        const l = Array.from(s).map((c) => {
          let [u, h] = c;
          return h === 1 ? u : [u, ...Array.from({
            length: h - 1
          }, (d, f) => `${u}-${f + 1}`)];
        }).flat();
        l.forEach((c) => ft(Bb, this).get(ft(tr, this)).add(c)), ue(o, l), o.nodeName === "TD" && Array.isArray((a = ft(Yr, this).options) === null || a === void 0 ? void 0 : a.cellAttributes) && ze(o, ft(Yr, this).options.cellAttributes);
      }), Array.from(r.keys()).forEach((s) => {
        ze(s, [...r.get(s)]);
      });
    }
  }
  function P1e() {
    const n = ft(Bb, this).get(ft(tr, this)), e = ft(tr, this).wtSettings.getSetting("onBeforeRemoveCellClassNames");
    if (Array.isArray(e))
      for (let t = 0; t < e.length; t++)
        n.add(e[t]);
    n.forEach((t) => {
      var i, r;
      const s = ft(tr, this).wtTable.TABLE.querySelectorAll(`.${t}`);
      let o = [];
      Array.isArray((i = ft(Yr, this).options) === null || i === void 0 ? void 0 : i.cellAttributes) && (o = ft(Yr, this).options.cellAttributes.map((a) => a[0])), Array.isArray((r = ft(Yr, this).options) === null || r === void 0 ? void 0 : r.headerAttributes) && (o = [...o, ...ft(Yr, this).options.headerAttributes.map((a) => a[0])]);
      for (let a = 0, l = s.length; a < l; a++)
        Ze(s[a], t), Tf(s[a], o);
    }), n.clear();
  }
  class I1e extends gy {
    /**
     * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.
     * @param {FacadeGetter} facadeGetter Function which return proper facade.
     * @param {Settings} wtSettings The Walkontable settings.
     * @param {DomBindings} domBindings Dom elements bound to the current instance.
     */
    constructor(e, t, i, r) {
      super(e, t, of, i, r);
    }
    /**
     * Factory method to create a subclass of `Table` that is relevant to this overlay.
     *
     * @see Table#constructor
     * @param {...*} args Parameters that will be forwarded to the `Table` constructor.
     * @returns {InlineStartOverlayTable}
     */
    createTable() {
      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++)
        t[i] = arguments[i];
      return new BD(...t);
    }
    /**
     * Checks if overlay should be fully rendered.
     *
     * @returns {boolean}
     */
    shouldBeRendered() {
      return this.wtSettings.getSetting("shouldRenderInlineStartOverlay");
    }
    /**
     * Updates the left overlay position.
     *
     * @returns {boolean}
     */
    resetFixedPosition() {
      const {
        wtTable: e
      } = this.wot;
      if (!this.needFullRender || !this.shouldBeRendered() || !e.holder.parentNode)
        return !1;
      const {
        rootWindow: t
      } = this.domBindings, i = this.clone.wtTable.holder.parentNode, r = this.wtSettings.getSetting("preventOverflow");
      let s = 0;
      this.trimmingContainer === t && (!r || r !== "horizontal") ? (s = this.getOverlayOffset() * (this.isRtl() ? -1 : 1), k1(i, `${s}px`, "0px")) : (s = this.getScrollPosition(), ly(i));
      const o = this.adjustHeaderBordersPosition(s);
      return this.adjustElementsSize(), o;
    }
    /**
     * Sets the main overlay's horizontal scroll position.
     *
     * @param {number} pos The scroll position.
     * @returns {boolean}
     */
    setScrollPosition(e) {
      const {
        rootWindow: t
      } = this.domBindings;
      let i = !1;
      return this.isRtl() && (e = -e), this.mainTableScrollableElement === t && t.scrollX !== e ? (t.scrollTo(e, dD(t)), i = !0) : this.mainTableScrollableElement.scrollLeft !== e && (this.mainTableScrollableElement.scrollLeft = e, i = !0), i;
    }
    /**
     * Triggers onScroll hook callback.
     */
    onScroll() {
      this.wtSettings.getSetting("onScrollVertically");
    }
    /**
     * Calculates total sum cells width.
     *
     * @param {number} from Column index which calculates started from.
     * @param {number} to Column index where calculation is finished.
     * @returns {number} Width sum.
     */
    sumCellSizes(e, t) {
      const i = this.wtSettings.getSetting("defaultColumnWidth");
      let r = e, s = 0;
      for (; r < t; )
        s += this.wot.wtTable.getStretchedColumnWidth(r) || i, r += 1;
      return s;
    }
    /**
     * Adjust overlay root element, children and master table element sizes (width, height).
     */
    adjustElementsSize() {
      this.updateTrimmingContainer(), this.needFullRender && (this.adjustRootElementSize(), this.adjustRootChildrenSize());
    }
    /**
     * Adjust overlay root element size (width and height).
     */
    adjustRootElementSize() {
      const {
        wtTable: e
      } = this.wot, {
        rootDocument: t,
        rootWindow: i
      } = this.domBindings, r = xi(t), o = this.clone.wtTable.holder.parentNode.style, a = this.wtSettings.getSetting("preventOverflow");
      if (this.trimmingContainer !== i || a === "vertical") {
        let c = this.wot.wtViewport.getWorkspaceHeight();
        this.wot.wtOverlays.hasScrollbarBottom && (c -= r), c = Math.min(c, e.wtRootElement.scrollHeight), o.height = `${c}px`;
      } else
        o.height = "";
      this.clone.wtTable.holder.style.height = o.height;
      const l = fn(this.clone.wtTable.TABLE);
      o.width = `${l}px`;
    }
    /**
     * Adjust overlay root childs size.
     */
    adjustRootChildrenSize() {
      const {
        holder: e
      } = this.clone.wtTable, t = this.wot.selectionManager.getFocusSelection() ? parseInt(zD.width, 10) / 2 : 0;
      this.clone.wtTable.hider.style.height = this.hider.style.height, e.style.height = e.parentNode.style.height, e.style.width = `${parseInt(e.parentNode.style.width, 10) + t}px`;
    }
    /**
     * Adjust the overlay dimensions and position.
     */
    applyToDOM() {
      const e = this.wtSettings.getSetting("totalColumns"), t = this.isRtl() ? "right" : "left";
      if (typeof this.wot.wtViewport.columnsRenderCalculator.startPosition == "number")
        this.spreader.style[t] = `${this.wot.wtViewport.columnsRenderCalculator.startPosition}px`;
      else if (e === 0)
        this.spreader.style[t] = "0";
      else
        throw new Error("Incorrect value of the columnsRenderCalculator");
      this.isRtl() ? this.spreader.style.left = "" : this.spreader.style.right = "", this.needFullRender && this.syncOverlayOffset();
    }
    /**
     * Synchronize calculated top position to an element.
     */
    syncOverlayOffset() {
      typeof this.wot.wtViewport.rowsRenderCalculator.startPosition == "number" ? this.clone.wtTable.spreader.style.top = `${this.wot.wtViewport.rowsRenderCalculator.startPosition}px` : this.clone.wtTable.spreader.style.top = "";
    }
    /**
     * Scrolls horizontally to a column at the left edge of the viewport.
     *
     * @param {number} sourceCol  Column index which you want to scroll to.
     * @param {boolean} [beyondRendered]  If `true`, scrolls according to the right
     *                                    edge (left edge is by default).
     * @returns {boolean}
     */
    scrollTo(e, t) {
      const {
        wtSettings: i
      } = this, r = i.getSetting("rowHeaders"), s = i.getSetting("fixedColumnsStart"), a = (this.wot.cloneSource ? this.wot.cloneSource : this.wot).wtTable.holder, l = s === 0 && r.length > 0 && !Ue(a.parentNode, "innerBorderInlineStart") ? 1 : 0;
      let c = this.getTableParentOffset(), u = 0;
      if (t) {
        const h = this.wot.wtTable.getColumnWidth(e), d = this.wot.wtViewport.getViewportWidth();
        h > d && (t = !1);
      }
      return t && a.offsetWidth !== a.clientWidth && (u = xi(this.domBindings.rootDocument)), t ? (c += this.sumCellSizes(0, e + 1), c -= this.wot.wtViewport.getViewportWidth(), c += l) : c += this.sumCellSizes(this.wtSettings.getSetting("fixedColumnsStart"), e), c += u, q7(this.mainTableScrollableElement) === c - l && l > 0 && this.wot.wtOverlays.expandHiderHorizontallyBy(l), this.setScrollPosition(c);
    }
    /**
     * Gets table parent left position.
     *
     * @returns {number}
     */
    getTableParentOffset() {
      const e = this.wtSettings.getSetting("preventOverflow");
      let t = 0;
      return !e && this.trimmingContainer === this.domBindings.rootWindow && (t = this.wot.wtTable.holderOffset.left), t;
    }
    /**
     * Gets the main overlay's horizontal scroll position.
     *
     * @returns {number} Main table's horizontal scroll position.
     */
    getScrollPosition() {
      return Math.abs(fD(this.mainTableScrollableElement, this.domBindings.rootWindow));
    }
    /**
     * Gets the main overlay's horizontal overlay offset.
     *
     * @returns {number} Main table's horizontal overlay offset.
     */
    getOverlayOffset() {
      const {
        rootWindow: e
      } = this.domBindings, t = this.wtSettings.getSetting("preventOverflow");
      let i = 0;
      if (this.trimmingContainer === e && (!t || t !== "horizontal")) {
        this.isRtl() ? i = Math.abs(Math.min(this.getTableParentOffset() - this.getScrollPosition(), 0)) : i = Math.max(this.getScrollPosition() - this.getTableParentOffset(), 0);
        const r = this.wot.wtTable.getTotalWidth(), s = this.clone.wtTable.getTotalWidth(), o = r - s;
        i > o && (i = 0);
      }
      return i;
    }
    /**
     * Adds css classes to hide the header border's header (cell-selection border hiding issue).
     *
     * @param {number} position Header X position if trimming container is window or scroll top if not.
     * @returns {boolean}
     */
    adjustHeaderBordersPosition(e) {
      const {
        wtSettings: t
      } = this, i = this.wot.wtTable.holder.parentNode, r = t.getSetting("rowHeaders"), s = t.getSetting("fixedColumnsStart"), o = t.getSetting("totalRows"), a = t.getSetting("preventOverflow") === "vertical";
      o ? Ze(i, "emptyRows") : ue(i, "emptyRows");
      let l = !1;
      if (!a) {
        if (s && !r.length)
          ue(i, "innerBorderLeft innerBorderInlineStart");
        else if (!s && r.length) {
          const c = Ue(i, "innerBorderInlineStart");
          e ? (ue(i, "innerBorderLeft innerBorderInlineStart"), l = !c) : (Ze(i, "innerBorderLeft innerBorderInlineStart"), l = c);
        }
      }
      return l;
    }
  }
  const O1e = "stickyRowsTop", GD = {
    /**
     * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.
     *
     * @returns {number}
     * @this Table
     */
    getFirstRenderedRow() {
      return this.wtSettings.getSetting("totalRows") === 0 ? -1 : 0;
    },
    /**
     * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.
     * Assumes that all rendered rows are fully visible.
     *
     * @returns {number}
     * @this Table
     */
    getFirstVisibleRow() {
      return this.getFirstRenderedRow();
    },
    /**
     * Get the source index of the first row partially visible in the viewport. If no rows are partially visible, returns an error code: -1.
     * Assumes that all rendered rows are fully visible.
     *
     * @returns {number}
     * @this Table
     */
    getFirstPartiallyVisibleRow() {
      return this.getFirstRenderedRow();
    },
    /**
     * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.
     *
     * @returns {number}
     * @this Table
     */
    getLastRenderedRow() {
      return this.getRenderedRowsCount() - 1;
    },
    /**
     * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.
     * Assumes that all rendered rows are fully visible.
     *
     * @returns {number}
     * @this Table
     */
    getLastVisibleRow() {
      return this.getLastRenderedRow();
    },
    /**
     * Get the source index of the last row partially visible in the viewport. If no rows are partially visible, returns an error code: -1.
     * Assumes that all rendered rows are fully visible.
     *
     * @returns {number}
     * @this Table
     */
    getLastPartiallyVisibleRow() {
      return this.getLastRenderedRow();
    },
    /**
     * Get the number of rendered rows.
     *
     * @returns {number}
     * @this Table
     */
    getRenderedRowsCount() {
      const n = this.wtSettings.getSetting("totalRows");
      return Math.min(this.wtSettings.getSetting("fixedRowsTop"), n);
    },
    /**
     * Get the number of fully visible rows in the viewport.
     * Assumes that all rendered rows are fully visible.
     *
     * @returns {number}
     * @this Table
     */
    getVisibleRowsCount() {
      return this.getRenderedRowsCount();
    },
    /**
     * Get the number of rendered column headers.
     *
     * @returns {number}
     * @this Table
     */
    getColumnHeadersCount() {
      return this.dataAccessObject.columnHeaders.length;
    }
  };
  Sl(GD, "MIXIN_NAME", O1e, {
    writable: !1,
    enumerable: !1
  });
  class YD extends Qp {
    /**
     * @param {TableDao} dataAccessObject The data access object.
     * @param {FacadeGetter} facadeGetter Function which return proper facade.
     * @param {DomBindings} domBindings Bindings into DOM.
     * @param {Settings} wtSettings The Walkontable settings.
     */
    constructor(e, t, i, r) {
      super(e, t, i, r, af);
    }
  }
  qt(YD, GD);
  qt(YD, W1);
  function kV(n, e, t) {
    return (e = k1e(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function k1e(n) {
    var e = D1e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function D1e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class N1e extends gy {
    /**
     * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.
     * @param {FacadeGetter} facadeGetter Function which return proper facade.
     * @param {Settings} wtSettings The Walkontable settings.
     * @param {DomBindings} domBindings Dom elements bound to the current instance.
     * @param {TopOverlay} topOverlay The instance of the Top overlay.
     * @param {InlineStartOverlay} inlineStartOverlay The instance of the InlineStart overlay.
     */
    constructor(e, t, i, r, s, o) {
      super(e, t, af, i, r), kV(this, "topOverlay", void 0), kV(this, "inlineStartOverlay", void 0), this.topOverlay = s, this.inlineStartOverlay = o;
    }
    /**
     * Factory method to create a subclass of `Table` that is relevant to this overlay.
     *
     * @see Table#constructor
     * @param {...*} args Parameters that will be forwarded to the `Table` constructor.
     * @returns {TopInlineStartCornerOverlayTable}
     */
    createTable() {
      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++)
        t[i] = arguments[i];
      return new YD(...t);
    }
    /**
     * Checks if overlay should be fully rendered.
     *
     * @returns {boolean}
     */
    shouldBeRendered() {
      return this.wtSettings.getSetting("shouldRenderTopOverlay") && this.wtSettings.getSetting("shouldRenderInlineStartOverlay");
    }
    /**
     * Updates the corner overlay position.
     *
     * @returns {boolean}
     */
    resetFixedPosition() {
      if (this.updateTrimmingContainer(), !this.wot.wtTable.holder.parentNode)
        return !1;
      const e = this.clone.wtTable.holder.parentNode;
      if (this.trimmingContainer === this.domBindings.rootWindow) {
        const r = this.inlineStartOverlay.getOverlayOffset() * (this.isRtl() ? -1 : 1), s = this.topOverlay.getOverlayOffset();
        k1(e, `${r}px`, `${s}px`);
      } else
        ly(e);
      let t = ti(this.clone.wtTable.TABLE);
      const i = fn(this.clone.wtTable.TABLE);
      return this.wot.wtTable.hasDefinedSize() || (t = 0), e.style.height = `${t}px`, e.style.width = `${i}px`, !1;
    }
  }
  class KD extends Qp {
    /**
     * @param {TableDao} dataAccessObject The data access object.
     * @param {FacadeGetter} facadeGetter Function which return proper facade.
     * @param {DomBindings} domBindings Bindings into DOM.
     * @param {Settings} wtSettings The Walkontable settings.
     */
    constructor(e, t, i, r) {
      super(e, t, i, r, sf);
    }
  }
  qt(KD, GD);
  qt(KD, j1);
  function L1e(n, e, t) {
    return (e = H1e(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function H1e(n) {
    var e = $1e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function $1e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class F1e extends gy {
    /**
     * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.
     * @param {FacadeGetter} facadeGetter Function which return proper facade.
     * @param {Settings} wtSettings The Walkontable settings.
     * @param {DomBindings} domBindings Dom elements bound to the current instance.
     */
    constructor(e, t, i, r) {
      super(e, t, sf, i, r), L1e(this, "cachedFixedRowsTop", -1), this.cachedFixedRowsTop = this.wtSettings.getSetting("fixedRowsTop");
    }
    /**
     * Factory method to create a subclass of `Table` that is relevant to this overlay.
     *
     * @see Table#constructor
     * @param {...*} args Parameters that will be forwarded to the `Table` constructor.
     * @returns {TopOverlayTable}
     */
    createTable() {
      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++)
        t[i] = arguments[i];
      return new KD(...t);
    }
    /**
     * Checks if overlay should be fully rendered.
     *
     * @returns {boolean}
     */
    shouldBeRendered() {
      return this.wtSettings.getSetting("shouldRenderTopOverlay");
    }
    /**
     * Updates the top overlay position.
     *
     * @returns {boolean}
     */
    resetFixedPosition() {
      if (!this.needFullRender || !this.shouldBeRendered() || !this.wot.wtTable.holder.parentNode)
        return !1;
      const e = this.clone.wtTable.holder.parentNode, {
        rootWindow: t
      } = this.domBindings, i = this.wtSettings.getSetting("preventOverflow");
      let r = 0, s = !1;
      if (this.trimmingContainer === t && (!i || i !== "vertical")) {
        const {
          wtTable: a
        } = this.wot, l = a.hider.getBoundingClientRect(), c = Math.ceil(l.bottom), u = e.offsetHeight;
        s = c === u, r = this.getOverlayOffset(), k1(e, "0px", `${r}px`);
      } else
        r = this.getScrollPosition(), ly(e);
      const o = this.adjustHeaderBordersPosition(r, s);
      return this.adjustElementsSize(), o;
    }
    /**
     * Sets the main overlay's vertical scroll position.
     *
     * @param {number} pos The scroll position.
     * @returns {boolean}
     */
    setScrollPosition(e) {
      const t = this.domBindings.rootWindow;
      let i = !1;
      return this.mainTableScrollableElement === t && t.scrollY !== e ? (t.scrollTo(I1(t), e), i = !0) : this.mainTableScrollableElement.scrollTop !== e && (this.mainTableScrollableElement.scrollTop = e, i = !0), i;
    }
    /**
     * Triggers onScroll hook callback.
     */
    onScroll() {
      this.wtSettings.getSetting("onScrollHorizontally");
    }
    /**
     * Calculates total sum cells height.
     *
     * @param {number} from Row index which calculates started from.
     * @param {number} to Row index where calculation is finished.
     * @returns {number} Height sum.
     */
    sumCellSizes(e, t) {
      const i = this.wtSettings.getSetting("defaultRowHeight");
      let r = e, s = 0;
      for (; r < t; ) {
        const o = this.wot.wtTable.getRowHeight(r);
        s += o === void 0 ? i : o, r += 1;
      }
      return s;
    }
    /**
     * Adjust overlay root element, children and master table element sizes (width, height).
     */
    adjustElementsSize() {
      this.updateTrimmingContainer(), this.needFullRender && (this.adjustRootElementSize(), this.adjustRootChildrenSize());
    }
    /**
     * Adjust overlay root element size (width and height).
     */
    adjustRootElementSize() {
      const {
        wtTable: e
      } = this.wot, {
        rootDocument: t,
        rootWindow: i
      } = this.domBindings, r = xi(t), o = this.clone.wtTable.holder.parentNode.style, a = this.wtSettings.getSetting("preventOverflow");
      if (this.trimmingContainer !== i || a === "horizontal") {
        let c = this.wot.wtViewport.getWorkspaceWidth();
        this.wot.wtOverlays.hasScrollbarRight && (c -= r), c = Math.min(c, e.wtRootElement.scrollWidth), o.width = `${c}px`;
      } else
        o.width = "";
      this.clone.wtTable.holder.style.width = o.width;
      let l = ti(this.clone.wtTable.TABLE);
      this.wot.wtTable.hasDefinedSize() || (l = 0), o.height = `${l}px`;
    }
    /**
     * Adjust overlay root childs size.
     */
    adjustRootChildrenSize() {
      const {
        holder: e
      } = this.clone.wtTable, t = this.wot.selectionManager.getFocusSelection() ? parseInt(zD.height, 10) / 2 : 0;
      this.clone.wtTable.hider.style.width = this.hider.style.width, e.style.width = e.parentNode.style.width, e.style.height = `${parseInt(e.parentNode.style.height, 10) + t}px`;
    }
    /**
     * Adjust the overlay dimensions and position.
     */
    applyToDOM() {
      const e = this.wtSettings.getSetting("totalRows");
      if (typeof this.wot.wtViewport.rowsRenderCalculator.startPosition == "number")
        this.spreader.style.top = `${this.wot.wtViewport.rowsRenderCalculator.startPosition}px`;
      else if (e === 0)
        this.spreader.style.top = "0";
      else
        throw new Error("Incorrect value of the rowsRenderCalculator");
      this.spreader.style.bottom = "", this.needFullRender && this.syncOverlayOffset();
    }
    /**
     * Synchronize calculated left position to an element.
     */
    syncOverlayOffset() {
      const e = this.isRtl() ? "right" : "left", {
        spreader: t
      } = this.clone.wtTable;
      typeof this.wot.wtViewport.columnsRenderCalculator.startPosition == "number" ? t.style[e] = `${this.wot.wtViewport.columnsRenderCalculator.startPosition}px` : t.style[e] = "";
    }
    /**
     * Scrolls vertically to a row.
     *
     * @param {number} sourceRow Row index which you want to scroll to.
     * @param {boolean} [bottomEdge] If `true`, scrolls according to the bottom edge (top edge is by default).
     * @returns {boolean}
     */
    scrollTo(e, t) {
      const {
        wot: i,
        wtSettings: r
      } = this, o = (i.cloneSource ? i.cloneSource : i).wtTable.holder, a = r.getSetting("columnHeaders"), c = r.getSetting("fixedRowsTop") === 0 && a.length > 0 && !Ue(o.parentNode, "innerBorderTop") ? 1 : 0;
      let u = this.getTableParentOffset(), h = 0;
      if (t) {
        const d = this.wot.wtTable.getRowHeight(e), f = this.wot.wtViewport.getViewportHeight();
        d > f && (t = !1);
      }
      if (t && o.offsetHeight !== o.clientHeight && (h = xi(this.domBindings.rootDocument)), t) {
        const d = r.getSetting("fixedRowsBottom"), f = r.getSetting("totalRows");
        u += this.sumCellSizes(0, e + 1), u -= i.wtViewport.getViewportHeight() - this.sumCellSizes(f - d, f), u += 1, u += c;
      } else
        u += this.sumCellSizes(r.getSetting("fixedRowsTop"), e);
      return u += h, K7(this.mainTableScrollableElement) === u - c && c > 0 && this.wot.wtOverlays.expandHiderVerticallyBy(c), this.setScrollPosition(u);
    }
    /**
     * Gets table parent top position.
     *
     * @returns {number}
     */
    getTableParentOffset() {
      return this.mainTableScrollableElement === this.domBindings.rootWindow ? this.wot.wtTable.holderOffset.top : 0;
    }
    /**
     * Gets the main overlay's vertical scroll position.
     *
     * @returns {number} Main table's vertical scroll position.
     */
    getScrollPosition() {
      return O1(this.mainTableScrollableElement, this.domBindings.rootWindow);
    }
    /**
     * Gets the main overlay's vertical overlay offset.
     *
     * @returns {number} Main table's vertical overlay offset.
     */
    getOverlayOffset() {
      const {
        rootWindow: e
      } = this.domBindings, t = this.wtSettings.getSetting("preventOverflow");
      let i = 0;
      if (this.trimmingContainer === e && (!t || t !== "vertical")) {
        const r = this.wot.wtTable.getTotalHeight(), s = this.clone.wtTable.getTotalHeight(), o = r - s;
        i = Math.max(this.getScrollPosition() - this.getTableParentOffset(), 0), i > o && (i = 0);
      }
      return i;
    }
    /**
     * Adds css classes to hide the header border's header (cell-selection border hiding issue).
     *
     * @param {number} position Header Y position if trimming container is window or scroll top if not.
     * @param {boolean} [skipInnerBorderAdjusting=false] If `true` the inner border adjusting will be skipped.
     * @returns {boolean}
     */
    adjustHeaderBordersPosition(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
      const {
        wtSettings: i
      } = this, r = this.wot.wtTable.holder.parentNode, s = i.getSetting("totalColumns"), o = i.getSetting("preventOverflow") === "horizontal";
      s ? Ze(r, "emptyColumns") : ue(r, "emptyColumns");
      let a = !1;
      if (!t && !o) {
        const l = i.getSetting("fixedRowsTop"), c = this.cachedFixedRowsTop !== l, u = i.getSetting("columnHeaders");
        if ((c || l === 0) && u.length > 0) {
          const h = Ue(r, "innerBorderTop");
          this.cachedFixedRowsTop = i.getSetting("fixedRowsTop"), e || i.getSetting("totalRows") === 0 ? (ue(r, "innerBorderTop"), a = !h) : (Ze(r, "innerBorderTop"), a = h);
        }
      }
      return a;
    }
  }
  function R0(n, e, t) {
    B1e(n, e), e.set(n, t);
  }
  function B1e(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function Al(n, e, t) {
    return (e = V1e(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function V1e(n) {
    var e = W1e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function W1e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function xh(n, e, t) {
    return n.set(q9(n, e), t), t;
  }
  function Pl(n, e) {
    return n.get(q9(n, e));
  }
  function q9(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var Kf = /* @__PURE__ */ new WeakMap(), E0 = /* @__PURE__ */ new WeakMap(), qf = /* @__PURE__ */ new WeakMap(), x0 = /* @__PURE__ */ new WeakMap();
  class j1e {
    /**
     * @param {Walkontable} wotInstance The Walkontable instance. @todo refactoring remove.
     * @param {FacadeGetter} facadeGetter Function which return proper facade.
     * @param {DomBindings} domBindings Bindings into DOM.
     * @param {Settings} wtSettings The Walkontable settings.
     * @param {EventManager} eventManager The walkontable event manager.
     * @param {MasterTable} wtTable The master table.
     */
    constructor(e, t, i, r, s, o) {
      Al(this, "wot", null), R0(this, Kf, []), Al(this, "topOverlay", null), Al(this, "bottomOverlay", null), Al(this, "inlineStartOverlay", null), Al(this, "topInlineStartCornerOverlay", null), Al(this, "bottomInlineStartCornerOverlay", null), Al(this, "browserLineHeight", void 0), Al(this, "wtSettings", null), R0(this, E0, !1), R0(this, qf, 0), R0(this, x0, null), Al(this, "resizeObserver", new ResizeObserver((u) => {
        $1(() => {
          !Array.isArray(u) || !u.length || (xh(qf, this, Pl(qf, this) + 1), Pl(qf, this) === 100 && (Yt("The ResizeObserver callback was fired too many times in direct succession.\nThis may be due to an infinite loop caused by setting a dynamic height/width (for example, with the `dvh` units) to a Handsontable container's parent. \nThe observer will be disconnected."), this.resizeObserver.disconnect()), Pl(x0, this) !== null && clearTimeout(Pl(x0, this)), xh(x0, this, setTimeout(() => {
            xh(qf, this, 0);
          }, 100)), this.wtSettings.getSetting("onContainerElementResize"));
        });
      })), this.wot = e, this.wtSettings = r, this.domBindings = i, this.facadeGetter = t, this.wtTable = o;
      const {
        rootDocument: a,
        rootWindow: l
      } = this.domBindings;
      this.instance = this.wot, this.eventManager = s, this.scrollbarSize = xi(a);
      const c = l.getComputedStyle(o.wtRootElement.parentNode).getPropertyValue("overflow") === "hidden";
      this.scrollableElement = c ? o.holder : dw(o.TABLE), this.initOverlays(), this.hasScrollbarBottom = !1, this.hasScrollbarRight = !1, this.destroyed = !1, this.keyPressed = !1, this.spreaderLastSize = {
        width: null,
        height: null
      }, this.verticalScrolling = !1, this.horizontalScrolling = !1, this.initBrowserLineHeight(), this.registerListeners(), this.lastScrollX = l.scrollX, this.lastScrollY = l.scrollY;
    }
    /**
     * Get the list of references to all overlays.
     *
     * @param {boolean} [includeMaster = false] If set to `true`, the list will contain the master table as the last
     * element.
     * @returns {(TopOverlay|TopInlineStartCornerOverlay|InlineStartOverlay|BottomOverlay|BottomInlineStartCornerOverlay)[]}
     */
    getOverlays() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
      const t = [...Pl(Kf, this)];
      return e && t.push(this.wtTable), t;
    }
    /**
     * Retrieve browser line height and apply its value to `browserLineHeight`.
     *
     * @private
     */
    initBrowserLineHeight() {
      const {
        rootWindow: e,
        rootDocument: t
      } = this.domBindings, i = e.getComputedStyle(t.body), r = parseInt(i.lineHeight, 10), s = parseInt(i.fontSize, 10) * 1.2;
      this.browserLineHeight = r || s;
    }
    /**
     * Prepare overlays based on user settings.
     *
     * @private
     */
    initOverlays() {
      const e = [this.wot, this.facadeGetter, this.wtSettings, this.domBindings];
      this.topOverlay = new F1e(...e), this.bottomOverlay = new v1e(...e), this.inlineStartOverlay = new I1e(...e), this.topInlineStartCornerOverlay = new N1e(...e, this.topOverlay, this.inlineStartOverlay), this.bottomInlineStartCornerOverlay = new f1e(...e, this.bottomOverlay, this.inlineStartOverlay), xh(Kf, this, [this.topOverlay, this.bottomOverlay, this.inlineStartOverlay, this.topInlineStartCornerOverlay, this.bottomInlineStartCornerOverlay]);
    }
    /**
     * Runs logic for the overlays before the table is drawn.
     */
    beforeDraw() {
      xh(E0, this, Pl(Kf, this).reduce((e, t) => t.hasRenderingStateChanged() || e, !1)), Pl(Kf, this).forEach((e) => e.updateStateOfRendering("before"));
    }
    /**
     * Runs logic for the overlays after the table is drawn.
     */
    afterDraw() {
      this.syncScrollWithMaster(), Pl(Kf, this).forEach((e) => {
        const t = e.hasRenderingStateChanged();
        e.updateStateOfRendering("after"), t && !e.needFullRender && e.reset();
      });
    }
    /**
     * Refresh and redraw table.
     */
    refreshAll() {
      if (this.wot.drawn) {
        if (!this.wtTable.holder.parentNode) {
          this.destroy();
          return;
        }
        this.wot.draw(!0), this.verticalScrolling && this.inlineStartOverlay.onScroll(), this.horizontalScrolling && this.topOverlay.onScroll(), this.verticalScrolling = !1, this.horizontalScrolling = !1;
      }
    }
    /**
     * Register all necessary event listeners.
     */
    registerListeners() {
      const {
        rootDocument: e,
        rootWindow: t
      } = this.domBindings, {
        mainTableScrollableElement: i
      } = this.topOverlay, {
        mainTableScrollableElement: r
      } = this.inlineStartOverlay;
      this.eventManager.addEventListener(e.documentElement, "keydown", (h) => this.onKeyDown(h)), this.eventManager.addEventListener(e.documentElement, "keyup", () => this.onKeyUp()), this.eventManager.addEventListener(e, "visibilitychange", () => this.onKeyUp()), this.eventManager.addEventListener(i, "scroll", (h) => this.onTableScroll(h), {
        passive: !0
      }), i !== r && this.eventManager.addEventListener(r, "scroll", (h) => this.onTableScroll(h), {
        passive: !0
      });
      const s = t.devicePixelRatio && t.devicePixelRatio > 1, o = this.scrollableElement === t, a = this.wtSettings.getSetting("preventWheel"), l = {
        passive: o
      };
      (a || s || !CD()) && this.eventManager.addEventListener(this.wtTable.wtRootElement, "wheel", (h) => this.onCloneWheel(h, a), l), [this.topOverlay, this.bottomOverlay, this.inlineStartOverlay, this.topInlineStartCornerOverlay, this.bottomInlineStartCornerOverlay].forEach((h) => {
        if (h && h.needFullRender) {
          const {
            holder: d
          } = h.clone.wtTable;
          this.eventManager.addEventListener(d, "wheel", (f) => this.onCloneWheel(f, a), l);
        }
      });
      let u;
      this.eventManager.addEventListener(t, "resize", () => {
        clearTimeout(u), u = setTimeout(() => {
          this.wtSettings.getSetting("onWindowResize"), xh(qf, this, 0);
        }, 200);
      }), o || this.resizeObserver.observe(this.wtTable.wtRootElement.parentElement);
    }
    /**
     * Deregister all previously registered listeners.
     */
    deregisterListeners() {
      this.eventManager.clearEvents(!0);
    }
    /**
     * Scroll listener.
     *
     * @param {Event} event The mouse event object.
     */
    onTableScroll(e) {
      const t = this.domBindings.rootWindow, i = this.inlineStartOverlay.mainTableScrollableElement, r = this.topOverlay.mainTableScrollableElement, s = e.target;
      this.keyPressed && (r !== t && s !== t && !e.target.contains(r) || i !== t && s !== t && !e.target.contains(i)) || this.syncScrollPositions(e);
    }
    /**
     * Wheel listener for cloned overlays.
     *
     * @param {Event} event The mouse event object.
     * @param {boolean} preventDefault If `true`, the `preventDefault` will be called on event object.
     */
    onCloneWheel(e, t) {
      const {
        rootWindow: i
      } = this.domBindings, r = this.inlineStartOverlay.mainTableScrollableElement, s = this.topOverlay.mainTableScrollableElement, o = e.target, a = s !== i && o !== i && !o.contains(s), l = r !== i && o !== i && !o.contains(r);
      if (this.keyPressed && (a || l) || this.scrollableElement === i)
        return;
      const c = this.translateMouseWheelToScroll(e);
      (t || this.scrollableElement !== i && c) && e.preventDefault();
    }
    /**
     * Key down listener.
     *
     * @param {Event} event The keyboard event object.
     */
    onKeyDown(e) {
      this.keyPressed = Zp(e.keyCode, "ARROW_UP|ARROW_RIGHT|ARROW_DOWN|ARROW_LEFT");
    }
    /**
     * Key up listener.
     */
    onKeyUp() {
      this.keyPressed = !1;
    }
    /**
     * Translate wheel event into scroll event and sync scroll overlays position.
     *
     * @private
     * @param {Event} event The mouse event object.
     * @returns {boolean}
     */
    translateMouseWheelToScroll(e) {
      let t = isNaN(e.deltaY) ? -1 * e.wheelDeltaY : e.deltaY, i = isNaN(e.deltaX) ? -1 * e.wheelDeltaX : e.deltaX;
      e.deltaMode === 1 && (i += i * this.browserLineHeight, t += t * this.browserLineHeight);
      const r = this.scrollVertically(t), s = this.scrollHorizontally(i);
      return r || s;
    }
    /**
     * Scrolls main scrollable element horizontally.
     *
     * @param {number} delta Relative value to scroll.
     * @returns {boolean}
     */
    scrollVertically(e) {
      const t = this.scrollableElement.scrollTop;
      return this.scrollableElement.scrollTop += e, t !== this.scrollableElement.scrollTop;
    }
    /**
     * Scrolls main scrollable element horizontally.
     *
     * @param {number} delta Relative value to scroll.
     * @returns {boolean}
     */
    scrollHorizontally(e) {
      const t = this.scrollableElement.scrollLeft;
      return this.scrollableElement.scrollLeft += e, t !== this.scrollableElement.scrollLeft;
    }
    /**
     * Synchronize scroll position between master table and overlay table.
     *
     * @private
     */
    syncScrollPositions() {
      if (this.destroyed)
        return;
      const {
        rootWindow: e
      } = this.domBindings, t = this.topOverlay.clone.wtTable.holder, i = this.inlineStartOverlay.clone.wtTable.holder, [r, s] = [this.scrollableElement.scrollLeft, this.scrollableElement.scrollTop];
      if (this.horizontalScrolling = t.scrollLeft !== r || this.lastScrollX !== e.scrollX, this.verticalScrolling = i.scrollTop !== s || this.lastScrollY !== e.scrollY, this.lastScrollX = e.scrollX, this.lastScrollY = e.scrollY, this.horizontalScrolling) {
        t.scrollLeft = r;
        const o = this.bottomOverlay.needFullRender ? this.bottomOverlay.clone.wtTable.holder : null;
        o && (o.scrollLeft = r);
      }
      this.verticalScrolling && (i.scrollTop = s), this.refreshAll();
    }
    /**
     * Synchronize overlay scrollbars with the master scrollbar.
     */
    syncScrollWithMaster() {
      if (!Pl(E0, this))
        return;
      const e = this.topOverlay.mainTableScrollableElement, {
        scrollLeft: t,
        scrollTop: i
      } = e;
      this.topOverlay.needFullRender && (this.topOverlay.clone.wtTable.holder.scrollLeft = t), this.bottomOverlay.needFullRender && (this.bottomOverlay.clone.wtTable.holder.scrollLeft = t), this.inlineStartOverlay.needFullRender && (this.inlineStartOverlay.clone.wtTable.holder.scrollTop = i), xh(E0, this, !1);
    }
    /**
     * Update the main scrollable elements for all the overlays.
     */
    updateMainScrollableElements() {
      this.deregisterListeners(), this.inlineStartOverlay.updateMainScrollableElement(), this.topOverlay.updateMainScrollableElement(), this.bottomOverlay.needFullRender && this.bottomOverlay.updateMainScrollableElement();
      const {
        wtTable: e
      } = this, {
        rootWindow: t
      } = this.domBindings;
      t.getComputedStyle(e.wtRootElement.parentNode).getPropertyValue("overflow") === "hidden" ? this.scrollableElement = e.holder : this.scrollableElement = dw(e.TABLE), this.registerListeners();
    }
    /**
     *
     */
    destroy() {
      this.resizeObserver.disconnect(), this.eventManager.destroy(), this.topOverlay.destroy(), this.bottomOverlay.clone && this.bottomOverlay.destroy(), this.inlineStartOverlay.destroy(), this.topInlineStartCornerOverlay && this.topInlineStartCornerOverlay.destroy(), this.bottomInlineStartCornerOverlay && this.bottomInlineStartCornerOverlay.clone && this.bottomInlineStartCornerOverlay.destroy(), this.destroyed = !0;
    }
    /**
     * @param {boolean} [fastDraw=false] When `true`, try to refresh only the positions of borders without rerendering
     *                                   the data. It will only work if Table.draw() does not force
     *                                   rendering anyway.
     */
    refresh() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
      this.updateLastSpreaderSize() && this.adjustElementsSize(), this.bottomOverlay.clone && this.bottomOverlay.refresh(e), this.inlineStartOverlay.refresh(e), this.topOverlay.refresh(e), this.topInlineStartCornerOverlay && this.topInlineStartCornerOverlay.refresh(e), this.bottomInlineStartCornerOverlay && this.bottomInlineStartCornerOverlay.clone && this.bottomInlineStartCornerOverlay.refresh(e);
    }
    /**
     * Update the last cached spreader size with the current size.
     *
     * @returns {boolean} `true` if the lastSpreaderSize cache was updated, `false` otherwise.
     */
    updateLastSpreaderSize() {
      const e = this.wtTable.spreader, t = e.clientWidth, i = e.clientHeight, r = t !== this.spreaderLastSize.width || i !== this.spreaderLastSize.height;
      return r && (this.spreaderLastSize.width = t, this.spreaderLastSize.height = i), r;
    }
    /**
     * Adjust overlays elements size and master table size.
     */
    adjustElementsSize() {
      const {
        wtViewport: e
      } = this.wot, {
        wtTable: t
      } = this, {
        rootWindow: i
      } = this.domBindings, r = this.scrollableElement === i, s = this.wtSettings.getSetting("totalColumns"), o = this.wtSettings.getSetting("totalRows"), a = e.getRowHeaderWidth(), c = e.getColumnHeaderHeight() + this.topOverlay.sumCellSizes(0, o) + 1, u = a + this.inlineStartOverlay.sumCellSizes(0, s), d = t.hider.style, f = () => r ? !1 : this.scrollableElement.scrollTop > Math.max(0, c - t.holder.clientHeight), g = () => r ? !1 : this.scrollableElement.scrollLeft > Math.max(0, u - t.holder.clientWidth), p = f() ? 1 : 0, m = g() ? 1 : 0;
      if (d.width = `${u + m}px`, d.height = `${c + p}px`, this.scrollbarSize > 0) {
        const {
          scrollHeight: v,
          scrollWidth: y
        } = t.wtRootElement, {
          scrollHeight: w,
          scrollWidth: R
        } = t.holder;
        this.hasScrollbarRight = v < w, this.hasScrollbarBottom = y < R, this.hasScrollbarRight && t.hider.scrollWidth + this.scrollbarSize > y ? this.hasScrollbarBottom = !0 : this.hasScrollbarBottom && t.hider.scrollHeight + this.scrollbarSize > v && (this.hasScrollbarRight = !0);
      }
      this.topOverlay.adjustElementsSize(), this.inlineStartOverlay.adjustElementsSize(), this.bottomOverlay.adjustElementsSize();
    }
    /**
     * Expand the hider vertically element by the provided delta value.
     *
     * @param {number} heightDelta The delta value to expand the hider element by.
     */
    expandHiderVerticallyBy(e) {
      const {
        wtTable: t
      } = this;
      t.hider.style.height = `${parseInt(t.hider.style.height, 10) + e}px`;
    }
    /**
     * Expand the hider horizontally element by the provided delta value.
     *
     * @param {number} widthDelta The delta value to expand the hider element by.
     */
    expandHiderHorizontallyBy(e) {
      const {
        wtTable: t
      } = this;
      t.hider.style.width = `${parseInt(t.hider.style.width, 10) + e}px`;
    }
    /**
     *
     */
    applyToDOM() {
      this.wtTable.isVisible() && (this.topOverlay.applyToDOM(), this.bottomOverlay.clone && this.bottomOverlay.applyToDOM(), this.inlineStartOverlay.applyToDOM());
    }
    /**
     * Get the parent overlay of the provided element.
     *
     * @param {HTMLElement} element An element to process.
     * @returns {object|null}
     */
    getParentOverlay(e) {
      if (!e)
        return null;
      const t = [this.topOverlay, this.inlineStartOverlay, this.bottomOverlay, this.topInlineStartCornerOverlay, this.bottomInlineStartCornerOverlay];
      let i = null;
      return z(t, (r) => {
        r && r.clone && r.clone.wtTable.TABLE.contains(e) && (i = r.clone);
      }), i;
    }
    /**
     * Synchronize the class names between the main overlay table and the tables on the other overlays.
     *
     */
    syncOverlayTableClassNames() {
      const e = this.wtTable.TABLE, t = [this.topOverlay, this.inlineStartOverlay, this.bottomOverlay, this.topInlineStartCornerOverlay, this.bottomInlineStartCornerOverlay];
      z(t, (i) => {
        i && (i.clone.wtTable.TABLE.className = e.className);
      });
    }
  }
  function DV(n, e, t) {
    return (e = z1e(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function z1e(n) {
    var e = U1e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function U1e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class G1e {
    /**
     * @param {SettingsPure} settings The user defined settings.
     */
    constructor(e) {
      DV(this, "settings", {}), DV(this, "defaults", Object.freeze(this.getDefaults())), lt(this.defaults, (t, i) => {
        if (e[i] !== void 0)
          this.settings[i] = e[i];
        else {
          if (t === void 0)
            throw new Error(`A required setting "${i}" was not provided`);
          this.settings[i] = t;
        }
      });
    }
    /**
     * Generate defaults for a settings.
     * Void 0 means it is required, null means it can be empty.
     *
     * @private
     * @returns {SettingsPure}
     */
    getDefaults() {
      return {
        facade: void 0,
        table: void 0,
        // Determines whether the Walkontable instance is used as dataset viewer. When its instance is used as
        // a context menu, autocomplete list, etc, the returned value is `false`.
        isDataViewInstance: !0,
        // presentation mode
        externalRowCalculator: !1,
        stretchH: "none",
        // values: all, last, none
        currentRowClassName: null,
        currentColumnClassName: null,
        preventOverflow() {
          return !1;
        },
        preventWheel: !1,
        // data source
        data: void 0,
        freezeOverlays: !1,
        // Number of renderable columns for the left overlay.
        fixedColumnsStart: 0,
        // Number of renderable rows for the top overlay.
        fixedRowsTop: 0,
        // Number of renderable rows for the bottom overlay.
        fixedRowsBottom: 0,
        // Enable the inline start overlay when conditions are met (left for LTR and right for RTL document mode).
        shouldRenderInlineStartOverlay: () => this.getSetting("fixedColumnsStart") > 0 || this.getSetting("rowHeaders").length > 0,
        // Enable the top overlay when conditions are met.
        shouldRenderTopOverlay: () => this.getSetting("fixedRowsTop") > 0 || this.getSetting("columnHeaders").length > 0,
        // Enable the bottom overlay when conditions are met.
        shouldRenderBottomOverlay: () => this.getSetting("fixedRowsBottom") > 0,
        minSpareRows: 0,
        // this must be array of functions: [function (row, TH) {}]
        rowHeaders() {
          return [];
        },
        // this must be array of functions: [function (column, TH) {}]
        columnHeaders() {
          return [];
        },
        totalRows: void 0,
        totalColumns: void 0,
        cellRenderer: (e, t, i) => {
          const r = this.getSetting("data", e, t);
          Yu(i, r ?? "");
        },
        // columnWidth: 50,
        columnWidth() {
        },
        rowHeight() {
        },
        rowHeightByOverlayName() {
        },
        defaultRowHeight: 23,
        defaultColumnWidth: 50,
        selections: null,
        hideBorderOnMouseDownOver: !1,
        viewportRowCalculatorOverride: null,
        viewportColumnCalculatorOverride: null,
        // callbacks
        onCellMouseDown: null,
        onCellContextMenu: null,
        onCellMouseOver: null,
        onCellMouseOut: null,
        onCellMouseUp: null,
        // onCellMouseOut: null,
        onCellDblClick: null,
        onCellCornerMouseDown: null,
        onCellCornerDblClick: null,
        beforeDraw: null,
        onDraw: null,
        onBeforeRemoveCellClassNames: null,
        onAfterDrawSelection: null,
        onBeforeDrawBorders: null,
        // viewport scroll hooks
        onBeforeViewportScrollHorizontally: (e) => e,
        onBeforeViewportScrollVertically: (e) => e,
        // native scroll hooks
        onScrollHorizontally: null,
        onScrollVertically: null,
        //
        onBeforeTouchScroll: null,
        onAfterMomentumScroll: null,
        onBeforeStretchingColumnWidth: (e) => e,
        onModifyRowHeaderWidth: null,
        onModifyGetCellCoords: null,
        onBeforeHighlightingRowHeader: (e) => e,
        onBeforeHighlightingColumnHeader: (e) => e,
        onWindowResize: null,
        onContainerElementResize: null,
        renderAllColumns: !1,
        renderAllRows: !1,
        groups: !1,
        rowHeaderWidth: null,
        columnHeaderHeight: null,
        headerClassName: null,
        rtlMode: !1,
        ariaTags: !0
      };
    }
    /**
     * Update settings.
     *
     * @param {object|string} settings The singular settings to update or if passed as object to merge with.
     * @param {*} value The value to set if the first argument is passed as string.
     * @returns {Settings}
     */
    update(e, t) {
      return t === void 0 ? lt(e, (i, r) => {
        this.settings[r] = i;
      }) : this.settings[e] = t, this;
    }
    /**
     * Get setting by name.
     *
     * @param {$Keys<SettingsPure>} key The settings key to retrieve.
     * @param {*} [param1] Additional parameter passed to the options defined as function.
     * @param {*} [param2] Additional parameter passed to the options defined as function.
     * @param {*} [param3] Additional parameter passed to the options defined as function.
     * @param {*} [param4] Additional parameter passed to the options defined as function.
     * @returns {*}
     */
    getSetting(e, t, i, r, s) {
      return typeof this.settings[e] == "function" ? this.settings[e](t, i, r, s) : t !== void 0 && Array.isArray(this.settings[e]) ? this.settings[e][t] : this.settings[e];
    }
    /**
     * Get a setting value without any evaluation.
     *
     * @param {string} key The settings key to retrieve.
     * @returns {*}
     */
    getSettingPure(e) {
      return this.settings[e];
    }
    /**
     * Checks if setting exists.
     *
     * @param {boolean} key The settings key to check.
     * @returns {boolean}
     */
    has(e) {
      return !!this.settings[e];
    }
  }
  class qD extends Qp {
    /**
     * @param {TableDao} dataAccessObject The data access object.
     * @param {FacadeGetter} facadeGetter Function which return proper facade.
     * @param {DomBindings} domBindings Bindings into DOM.
     * @param {Settings} wtSettings The Walkontable settings.
     */
    constructor(e, t, i, r) {
      super(e, t, i, r, "master");
    }
    alignOverlaysWithTrimmingContainer() {
      const e = nf(this.wtRootElement), {
        rootWindow: t
      } = this.domBindings;
      if (e === t)
        this.wtSettings.getSetting("preventOverflow") || (this.holder.style.overflow = "visible", this.wtRootElement.style.overflow = "visible");
      else {
        const i = e.parentElement, r = Cp(e, "height", t), s = Cp(e, "overflow", t), o = this.holder.style, {
          scrollWidth: a,
          scrollHeight: l
        } = e;
        let c = e.offsetWidth, u = e.offsetHeight;
        if (i && ["auto", "hidden", "scroll"].includes(s)) {
          const d = e.cloneNode(!1);
          d.style.overflow = "auto", d.style.position = "absolute", e.nextElementSibling ? i.insertBefore(d, e.nextElementSibling) : i.appendChild(d);
          const f = parseInt(al(d, t).height, 10);
          i.removeChild(d), f === 0 && (u = 0);
        }
        u = Math.min(u, l), o.height = r === "auto" ? "auto" : `${u}px`, c = Math.min(c, a), o.width = `${c}px`, o.overflow = "", this.hasTableHeight = o.height === "auto" ? !0 : u > 0, this.hasTableWidth = c > 0;
      }
      this.isTableVisible = tf(this.TABLE);
    }
    markOversizedColumnHeaders() {
      const {
        wtSettings: e
      } = this, {
        wtViewport: t
      } = this.dataAccessObject, i = "master", s = e.getSetting("columnHeaders").length;
      if (s && !t.hasOversizedColumnHeadersMarked[i]) {
        const a = e.getSetting("rowHeaders").length, l = this.getRenderedColumnsCount();
        for (let c = 0; c < s; c++)
          for (let u = -1 * a; u < l; u++)
            this.markIfOversizedColumnHeader(u);
        t.hasOversizedColumnHeadersMarked[i] = !0;
      }
    }
  }
  qt(qD, FD);
  qt(qD, j1);
  class Y1e {
    /**
     * @param {ViewportDao} dataAccessObject The Walkontable instance.
     * @param {DomBindings} domBindings Bindings into DOM.
     * @param {Settings} wtSettings The Walkontable settings.
     * @param {EventManager} eventManager The instance event manager.
     * @param {Table} wtTable The table.
     */
    constructor(e, t, i, r, s) {
      this.dataAccessObject = e, this.wot = e.wot, this.instance = this.wot, this.domBindings = t, this.wtSettings = i, this.wtTable = s, this.oversizedRows = [], this.oversizedColumnHeaders = [], this.hasOversizedColumnHeadersMarked = {}, this.clientHeight = 0, this.containerWidth = NaN, this.rowHeaderWidth = NaN, this.rowsVisibleCalculator = null, this.columnsVisibleCalculator = null, this.rowsCalculatorTypes = /* @__PURE__ */ new Map([["rendered", () => this.wtSettings.getSetting("renderAllRows") ? new N_e() : new H_e()], ["fullyVisible", () => new E_e()], ["partiallyVisible", () => new D9()]]), this.columnsCalculatorTypes = /* @__PURE__ */ new Map([["rendered", () => this.wtSettings.getSetting("renderAllColumns") ? new O_e() : new L_e()], ["fullyVisible", () => new S_e()], ["partiallyVisible", () => new k9()]]), this.eventManager = r, this.eventManager.addEventListener(this.domBindings.rootWindow, "resize", () => {
        this.clientHeight = this.getWorkspaceHeight();
      });
    }
    /**
     * @returns {number}
     */
    getWorkspaceHeight() {
      const e = this.domBindings.rootDocument, t = this.dataAccessObject.topOverlayTrimmingContainer;
      let i = 0;
      return t === this.domBindings.rootWindow ? i = e.documentElement.clientHeight : i = ti(t) > 0 && t.clientHeight > 0 ? t.clientHeight : 1 / 0, i;
    }
    getWorkspaceWidth() {
      const {
        wtSettings: e
      } = this, {
        rootDocument: t,
        rootWindow: i
      } = this.domBindings, r = this.dataAccessObject.inlineStartOverlayTrimmingContainer, s = t.documentElement.offsetWidth, o = e.getSetting("totalColumns"), a = e.getSetting("preventOverflow"), l = e.getSetting("rtlMode"), c = this.wtTable.TABLE.getBoundingClientRect(), u = l ? c.right - s : c.left, h = s - u;
      let d, f;
      if (a)
        return fn(this.wtTable.wtRootElement);
      if (e.getSetting("freezeOverlays") ? d = Math.min(h, s) : d = Math.min(this.getContainerFillWidth(), h, s), r === i && o > 0 && this.sumColumnWidths(0, o - 1) > d)
        return t.documentElement.clientWidth;
      if (r !== i && (f = Cp(this.dataAccessObject.inlineStartOverlayTrimmingContainer, "overflow", i), f === "scroll" || f === "hidden" || f === "auto"))
        return Math.max(d, r.clientWidth);
      const g = e.getSetting("stretchH");
      return g === "none" || !g ? Math.max(d, fn(this.wtTable.TABLE)) : d;
    }
    /**
     * Checks if viewport has vertical scroll.
     *
     * @returns {boolean}
     */
    hasVerticalScroll() {
      return this.wtTable.hider.offsetHeight > this.getWorkspaceHeight();
    }
    /**
     * Checks if viewport has horizontal scroll.
     *
     * @returns {boolean}
     */
    hasHorizontalScroll() {
      return this.wtTable.hider.offsetWidth > this.getWorkspaceWidth();
    }
    /**
     * @param {number} from The visual column index from the width sum is start calculated.
     * @param {number} length The length of the column to traverse.
     * @returns {number}
     */
    sumColumnWidths(e, t) {
      let i = 0, r = e;
      for (; r < t; )
        i += this.wtTable.getColumnWidth(r), r += 1;
      return i;
    }
    /**
     * @returns {number}
     */
    getContainerFillWidth() {
      if (this.containerWidth)
        return this.containerWidth;
      const e = this.wtTable.holder, t = this.domBindings.rootDocument.createElement("div");
      t.style.width = "100%", t.style.height = "1px", e.appendChild(t);
      const i = t.offsetWidth;
      return this.containerWidth = i, e.removeChild(t), i;
    }
    /**
     * @returns {number}
     */
    getWorkspaceOffset() {
      return _i(this.wtTable.TABLE);
    }
    /**
     * @returns {number}
     */
    getColumnHeaderHeight() {
      return this.wtSettings.getSetting("columnHeaders").length ? isNaN(this.columnHeaderHeight) && (this.columnHeaderHeight = ti(this.wtTable.THEAD)) : this.columnHeaderHeight = 0, this.columnHeaderHeight;
    }
    /**
     * @returns {number}
     */
    getViewportHeight() {
      let e = this.getWorkspaceHeight();
      if (e === 1 / 0)
        return e;
      const t = this.getColumnHeaderHeight();
      return t > 0 && (e -= t), e;
    }
    /**
     * @returns {number}
     */
    getRowHeaderWidth() {
      const e = this.wtSettings.getSetting("rowHeaderWidth"), t = this.wtSettings.getSetting("rowHeaders");
      if (e) {
        this.rowHeaderWidth = 0;
        for (let i = 0, r = t.length; i < r; i++)
          this.rowHeaderWidth += e[i] || e;
      }
      if (isNaN(this.rowHeaderWidth))
        if (t.length) {
          let i = this.wtTable.TABLE.querySelector("TH");
          this.rowHeaderWidth = 0;
          for (let r = 0, s = t.length; r < s; r++)
            i ? (this.rowHeaderWidth += fn(i), i = i.nextSibling) : this.rowHeaderWidth += 50;
        } else
          this.rowHeaderWidth = 0;
      return this.rowHeaderWidth = this.wtSettings.getSetting("onModifyRowHeaderWidth", this.rowHeaderWidth) || this.rowHeaderWidth, this.rowHeaderWidth;
    }
    /**
     * @returns {number}
     */
    getViewportWidth() {
      const e = this.getWorkspaceWidth();
      if (e === 1 / 0)
        return e;
      const t = this.getRowHeaderWidth();
      return t > 0 ? e - t : e;
    }
    /**
     * Creates rows calculators. The type of the calculations can be chosen from the list:
     *  - 'rendered' Calculates rows that should be rendered within the current table's viewport;
     *  - 'fullyVisible' Calculates rows that are fully visible (used mostly for scrolling purposes);
     *  - 'partiallyVisible' Calculates rows that are partially visible (used mostly for scrolling purposes).
     *
     * @param {'rendered' | 'fullyVisible' | 'partiallyVisible'} calculatorTypes The list of the calculation types.
     * @returns {ViewportRowsCalculator}
     */
    createRowsCalculator() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ["rendered", "fullyVisible", "partiallyVisible"];
      const {
        wtSettings: t,
        wtTable: i
      } = this;
      let r = this.getViewportHeight(), s, o;
      this.rowHeaderWidth = NaN;
      let a = this.dataAccessObject.topScrollPosition - this.dataAccessObject.topParentOffset;
      const l = t.getSetting("fixedRowsTop"), c = t.getSetting("fixedRowsBottom"), u = t.getSetting("totalRows");
      return l && a >= 0 && (o = this.dataAccessObject.topOverlay.sumCellSizes(0, l), a += o, r -= o), c && this.dataAccessObject.bottomOverlay.clone && (o = this.dataAccessObject.bottomOverlay.sumCellSizes(u - c, u), r -= o), i.holder.clientHeight === i.holder.offsetHeight ? s = 0 : s = xi(this.domBindings.rootDocument), new U_e({
        calculationTypes: e.map((h) => [h, this.rowsCalculatorTypes.get(h)()]),
        viewportHeight: r,
        scrollOffset: a,
        totalRows: t.getSetting("totalRows"),
        rowHeightFn: (h) => i.getRowHeight(h),
        overrideFn: t.getSettingPure("viewportRowCalculatorOverride"),
        horizontalScrollbarHeight: s
      });
    }
    /**
     * Creates columns calculators. The type of the calculations can be chosen from the list:
     *  - 'rendered' Calculates columns that should be rendered within the current table's viewport;
     *  - 'fullyVisible' Calculates columns that are fully visible (used mostly for scrolling purposes);
     *  - 'partiallyVisible' Calculates columns that are partially visible (used mostly for scrolling purposes).
     *
     * @param {'rendered' | 'fullyVisible' | 'partiallyVisible'} calculatorTypes The list of the calculation types.
     * @returns {ViewportColumnsCalculator}
     */
    createColumnsCalculator() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ["rendered", "fullyVisible", "partiallyVisible"];
      const {
        wtSettings: t,
        wtTable: i
      } = this;
      let r = this.getViewportWidth(), s = Math.abs(this.dataAccessObject.inlineStartScrollPosition) - this.dataAccessObject.inlineStartParentOffset;
      this.columnHeaderHeight = NaN;
      const o = t.getSetting("fixedColumnsStart");
      if (o && s >= 0) {
        const a = this.dataAccessObject.inlineStartOverlay.sumCellSizes(0, o);
        s += a, r -= a;
      }
      return i.holder.clientWidth !== i.holder.offsetWidth && (r -= xi(this.domBindings.rootDocument)), new W_e({
        calculationTypes: e.map((a) => [a, this.columnsCalculatorTypes.get(a)()]),
        viewportWidth: r,
        scrollOffset: s,
        totalColumns: t.getSetting("totalColumns"),
        columnWidthFn: (a) => i.getColumnWidth(a),
        overrideFn: t.getSettingPure("viewportColumnCalculatorOverride"),
        inlineStartOffset: this.dataAccessObject.inlineStartParentOffset
      });
    }
    /**
     * Creates rowsRenderCalculator and columnsRenderCalculator (before draw, to determine what rows and
     * cols should be rendered).
     *
     * @param {boolean} fastDraw If `true`, will try to avoid full redraw and only update the border positions.
     *                           If `false` or `undefined`, will perform a full redraw.
     * @returns {boolean} The fastDraw value, possibly modified.
     */
    createCalculators() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
      const {
        wtSettings: t
      } = this, i = this.createRowsCalculator(), r = this.createColumnsCalculator();
      if (e && !t.getSetting("renderAllRows")) {
        const s = i.getResultsFor("fullyVisible");
        e = this.areAllProposedVisibleRowsAlreadyRendered(s);
      }
      if (e && !t.getSetting("renderAllColumns")) {
        const s = r.getResultsFor("fullyVisible");
        e = this.areAllProposedVisibleColumnsAlreadyRendered(s);
      }
      return e || (this.rowsRenderCalculator = i.getResultsFor("rendered"), this.columnsRenderCalculator = r.getResultsFor("rendered")), this.rowsVisibleCalculator = i.getResultsFor("fullyVisible"), this.columnsVisibleCalculator = r.getResultsFor("fullyVisible"), this.rowsPartiallyVisibleCalculator = i.getResultsFor("partiallyVisible"), this.columnsPartiallyVisibleCalculator = r.getResultsFor("partiallyVisible"), e;
    }
    /**
     * Creates rows and columns calculators (after draw, to determine what are
     * the actually fully visible and partially visible rows and columns).
     */
    createVisibleCalculators() {
      const e = this.createRowsCalculator(["fullyVisible", "partiallyVisible"]), t = this.createColumnsCalculator(["fullyVisible", "partiallyVisible"]);
      this.rowsVisibleCalculator = e.getResultsFor("fullyVisible"), this.columnsVisibleCalculator = t.getResultsFor("fullyVisible"), this.rowsPartiallyVisibleCalculator = e.getResultsFor("partiallyVisible"), this.columnsPartiallyVisibleCalculator = t.getResultsFor("partiallyVisible");
    }
    /**
     * Returns information whether proposedRowsVisibleCalculator viewport
     * is contained inside rows rendered in previous draw (cached in rowsRenderCalculator).
     *
     * @param {ViewportRowsCalculator} proposedRowsVisibleCalculator The instance of the viewport calculator to compare with.
     * @returns {boolean} Returns `true` if all proposed visible rows are already rendered (meaning: redraw is not needed).
     *                    Returns `false` if at least one proposed visible row is not already rendered (meaning: redraw is needed).
     */
    areAllProposedVisibleRowsAlreadyRendered(e) {
      if (!this.rowsVisibleCalculator)
        return !1;
      let {
        startRow: t,
        endRow: i
      } = e;
      if (t === null && i === null) {
        if (!e.isVisibleInTrimmingContainer)
          return !0;
        t = this.rowsPartiallyVisibleCalculator.startRow, i = this.rowsPartiallyVisibleCalculator.endRow;
      }
      const {
        startRow: r,
        endRow: s
      } = this.rowsRenderCalculator;
      return t < r || t === r && t > 0 ? !1 : !(i > s || i === s && i < this.wtSettings.getSetting("totalRows") - 1);
    }
    /**
     * Returns information whether proposedColumnsVisibleCalculator viewport
     * is contained inside column rendered in previous draw (cached in columnsRenderCalculator).
     *
     * @param {ViewportRowsCalculator} proposedColumnsVisibleCalculator The instance of the viewport calculator to compare with.
     * @returns {boolean} Returns `true` if all proposed visible columns are already rendered (meaning: redraw is not needed).
     *                    Returns `false` if at least one proposed visible column is not already rendered (meaning: redraw is needed).
     */
    areAllProposedVisibleColumnsAlreadyRendered(e) {
      if (!this.columnsVisibleCalculator)
        return !1;
      let {
        startColumn: t,
        endColumn: i
      } = e;
      if (t === null && i === null) {
        if (!e.isVisibleInTrimmingContainer)
          return !0;
        t = this.columnsPartiallyVisibleCalculator.startColumn, i = this.columnsPartiallyVisibleCalculator.endColumn;
      }
      const {
        startColumn: r,
        endColumn: s
      } = this.columnsRenderCalculator;
      return t < r || t === r && t > 0 ? !1 : !(i > s || i === s && i < this.wtSettings.getSetting("totalColumns") - 1);
    }
    /**
     * Resets values in keys of the hasOversizedColumnHeadersMarked object after updateSettings.
     */
    resetHasOversizedColumnHeadersMarked() {
      lt(this.hasOversizedColumnHeadersMarked, (e, t, i) => {
        i[t] = void 0;
      });
    }
  }
  class K1e extends HD {
    /**
     * @param {HTMLTableElement} table Main table.
     * @param {SettingsPure} settings The Walkontable settings.
     */
    constructor(e, t) {
      super(e, new G1e(t));
      const i = this.wtSettings.getSetting("facade", this);
      this.wtTable = new qD(this.getTableDao(), i, this.domBindings, this.wtSettings), this.wtViewport = new Y1e(this.getViewportDao(), this.domBindings, this.wtSettings, this.eventManager, this.wtTable), this.selectionManager = new A1e(this.wtSettings.getSetting("selections")), this.wtEvent = new B9(i, this.domBindings, this.wtSettings, this.eventManager, this.wtTable, this.selectionManager), this.wtOverlays = new j1e(
        // TODO create DAO and remove reference to the Walkontable instance.
        this,
        i,
        this.domBindings,
        this.wtSettings,
        this.eventManager,
        this.wtTable
      ), this.exportSettingsAsClassNames(), this.findOriginalHeaders();
    }
    /**
     * Export settings as class names added to the parent element of the table.
     */
    exportSettingsAsClassNames() {
      const e = {
        rowHeaders: "htRowHeaders",
        columnHeaders: "htColumnHeaders"
      }, t = [], i = [];
      lt(e, (r, s) => {
        this.wtSettings.getSetting(s).length && i.push(r), t.push(r);
      }), Ze(this.wtTable.wtRootElement.parentNode, t), ue(this.wtTable.wtRootElement.parentNode, i);
    }
    /**
     * Gets the overlay instance by its name.
     *
     * @param {'inline_start'|'top'|'top_inline_start_corner'|'bottom'|'bottom_inline_start_corner'} overlayName The overlay name.
     * @returns {Overlay | null}
     */
    getOverlayByName(e) {
      var t;
      if (!z9.includes(e))
        return null;
      const i = e.replace(/_([a-z])/g, (r) => r[1].toUpperCase());
      return (t = this.wtOverlays[`${i}Overlay`]) !== null && t !== void 0 ? t : null;
    }
    /**
     * @returns {ViewportDao}
     */
    getViewportDao() {
      const e = this;
      return {
        get wot() {
          return e;
        },
        get topOverlayTrimmingContainer() {
          return e.wtOverlays.topOverlay.trimmingContainer;
        },
        get inlineStartOverlayTrimmingContainer() {
          return e.wtOverlays.inlineStartOverlay.trimmingContainer;
        },
        get topScrollPosition() {
          return e.wtOverlays.topOverlay.getScrollPosition();
        },
        get topParentOffset() {
          return e.wtOverlays.topOverlay.getTableParentOffset();
        },
        get inlineStartScrollPosition() {
          return e.wtOverlays.inlineStartOverlay.getScrollPosition();
        },
        get inlineStartParentOffset() {
          return e.wtOverlays.inlineStartOverlay.getTableParentOffset();
        },
        get topOverlay() {
          return e.wtOverlays.topOverlay;
        },
        get inlineStartOverlay() {
          return e.wtOverlays.inlineStartOverlay;
        },
        get bottomOverlay() {
          return e.wtOverlays.bottomOverlay;
        }
      };
    }
  }
  class XD {
    /**
     * @param {SettingsPure|Walkontable} settingsOrInstance The Walkontable settings.
     */
    constructor(e) {
      e instanceof HD ? this._wot = e : this._initFromSettings(e);
    }
    _initFromSettings(e) {
      e.facade = (t) => {
        const i = new XD(t);
        return () => i;
      }, this._wot = new K1e(e.table, e);
    }
    get guid() {
      return this._wot.guid;
    }
    get rootDocument() {
      return this._wot.domBindings.rootDocument;
    }
    get rootWindow() {
      return this._wot.domBindings.rootWindow;
    }
    get wtSettings() {
      return this._wot.wtSettings;
    }
    get cloneSource() {
      return this._wot.cloneSource;
    }
    get cloneOverlay() {
      return this._wot.cloneOverlay;
    }
    get selectionManager() {
      return this._wot.selectionManager;
    }
    get wtViewport() {
      return this._wot.wtViewport;
    }
    get wtOverlays() {
      return this._wot.wtOverlays;
    }
    get wtTable() {
      return this._wot.wtTable;
    }
    get wtEvent() {
      return this._wot.wtEvent;
    }
    get wtScroll() {
      return this._wot.wtScroll;
    }
    get drawn() {
      return this._wot.drawn;
    }
    set drawn(e) {
      this._wot.drawn = e;
    }
    get drawInterrupted() {
      return this._wot.drawInterrupted;
    }
    set drawInterrupted(e) {
      this._wot.drawInterrupted = e;
    }
    get lastMouseOver() {
      return this._wot.lastMouseOver;
    }
    set lastMouseOver(e) {
      this._wot.lastMouseOver = e;
    }
    get momentumScrolling() {
      return this._wot.momentumScrolling;
    }
    set momentumScrolling(e) {
      this._wot.momentumScrolling = e;
    }
    get touchApplied() {
      return this._wot.touchApplied;
    }
    set touchApplied(e) {
      this._wot.touchApplied = e;
    }
    get domBindings() {
      return this._wot.domBindings;
    }
    get eventListeners() {
      return this._wot.eventListeners;
    }
    set eventListeners(e) {
      this._wot.eventListeners = e;
    }
    get eventManager() {
      return this._wot.eventManager;
    }
    createCellCoords(e, t) {
      return this._wot.createCellCoords(e, t);
    }
    createCellRange(e, t, i) {
      return this._wot.createCellRange(e, t, i);
    }
    draw() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
      return this._wot.draw(e), this;
    }
    getCell(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
      return this._wot.getCell(e, t);
    }
    scrollViewport(e, t, i, r, s) {
      return this._wot.scrollViewport(e, t, i, r, s);
    }
    scrollViewportHorizontally(e, t, i) {
      return this._wot.scrollViewportHorizontally(e, t, i);
    }
    scrollViewportVertically(e, t, i) {
      return this._wot.scrollViewportVertically(e, t, i);
    }
    getViewport() {
      return this._wot.getViewport();
    }
    getOverlayName() {
      return this._wot.cloneOverlay ? this._wot.cloneOverlay.type : "master";
    }
    getOverlayByName(e) {
      return this._wot.getOverlayByName(e);
    }
    exportSettingsAsClassNames() {
      return this._wot.exportSettingsAsClassNames();
    }
    update(e, t) {
      return this._wot.wtSettings.update(e, t), this;
    }
    getSetting(e, t, i, r, s) {
      return this._wot.wtSettings.getSetting(e, t, i, r, s);
    }
    hasSetting(e) {
      return this._wot.wtSettings.hasSetting(e);
    }
    destroy() {
      this._wot.destroy();
    }
  }
  function NV(n) {
    let {
      isShiftKey: e,
      isLeftClick: t,
      isRightClick: i,
      coords: r,
      selection: s,
      controller: o,
      cellCoordsFactory: a
    } = n;
    const l = s.isSelected() ? s.getSelectedRange().current() : null, c = s.isSelectedByCorner(), u = s.isSelectedByRowHeader();
    if (s.markSource("mouse"), e && l)
      r.row >= 0 && r.col >= 0 && !o.cell ? s.setRangeEnd(r) : (c || u) && r.row >= 0 && r.col >= 0 && !o.cell ? s.setRangeEnd(a(r.row, r.col)) : c && r.row < 0 && !o.column ? s.setRangeEnd(a(l.to.row, r.col)) : u && r.col < 0 && !o.row ? s.setRangeEnd(a(r.row, l.to.col)) : (!c && !u && r.col < 0 || c && r.col < 0) && !o.row ? s.selectRows(Math.max(l.from.row, 0), r.row, r.col) : (!c && !u && r.row < 0 || u && r.row < 0) && !o.column && s.selectColumns(Math.max(l.from.col, 0), r.col, r.row);
    else {
      const h = !s.inInSelection(r), d = t || i && h;
      r.row < 0 && r.col >= 0 && !o.column ? d && s.selectColumns(r.col, r.col, r.row) : r.col < 0 && r.row >= 0 && !o.row ? d && s.selectRows(r.row, r.row, r.col) : r.col >= 0 && r.row >= 0 && !o.cell ? d && s.setRangeStart(r) : r.col < 0 && r.row < 0 && s.selectAll(!0, !0, {
        disableHeadersHighlight: !0,
        focusPosition: {
          row: 0,
          col: 0
        }
      });
    }
    s.markEndSource();
  }
  function q1e(n) {
    let {
      isLeftClick: e,
      coords: t,
      selection: i,
      controller: r,
      cellCoordsFactory: s
    } = n;
    if (!e)
      return;
    const o = i.isSelectedByRowHeader(), a = i.isSelectedByColumnHeader(), l = i.tableProps.countCols(), c = i.tableProps.countRows();
    i.markSource("mouse"), a && !r.column ? i.setRangeEnd(s(c - 1, t.col)) : o && !r.row ? i.setRangeEnd(s(t.row, l - 1)) : r.cell || i.setRangeEnd(t), i.markEndSource();
  }
  const X1e = /* @__PURE__ */ new Map([["mousedown", NV], ["mouseover", q1e], ["touchstart", NV]]);
  function LV(n, e) {
    let {
      coords: t,
      selection: i,
      controller: r,
      cellCoordsFactory: s
    } = e;
    X1e.get(n.type)({
      coords: t,
      selection: i,
      controller: r,
      cellCoordsFactory: s,
      isShiftKey: n.shiftKey,
      isLeftClick: F1(n) || n.type === "touchstart",
      isRightClick: Ku(n)
    });
  }
  const X9 = /* @__PURE__ */ new WeakMap(), ZD = Symbol("rootInstance");
  function Z1e(n) {
    X9.set(n, !0);
  }
  function Q1e(n) {
    return n === ZD;
  }
  function SS(n) {
    return X9.has(n);
  }
  function J1e(n, e) {
    Z9(n, e), e.add(n);
  }
  function Th(n, e, t) {
    Z9(n, e), e.set(n, t);
  }
  function Z9(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function Kc(n, e, t) {
    return (e = eEe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function eEe(n) {
    var e = tEe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function tEe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function Mi(n, e) {
    return n.get(pw(n, e));
  }
  function Hs(n, e, t) {
    return n.set(pw(n, e), t), t;
  }
  function pw(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var mT = /* @__PURE__ */ new WeakMap(), T0 = /* @__PURE__ */ new WeakMap(), M0 = /* @__PURE__ */ new WeakMap(), Il = /* @__PURE__ */ new WeakMap(), Ao = /* @__PURE__ */ new WeakMap(), bT = /* @__PURE__ */ new WeakMap(), vT = /* @__PURE__ */ new WeakMap(), _S = /* @__PURE__ */ new WeakSet();
  class nEe {
    /**
     * @param {Hanstontable} hotInstance Instance of {@link Handsontable}.
     */
    constructor(e) {
      J1e(this, _S), Kc(this, "hot", void 0), Kc(this, "eventManager", void 0), Kc(this, "settings", void 0), Kc(this, "THEAD", void 0), Kc(this, "TBODY", void 0), Kc(this, "_wt", void 0), Kc(this, "activeWt", void 0), Th(this, mT, 0), Th(this, T0, 0), Kc(this, "postponedAdjustElementsSize", !1), Th(this, M0, !1), Th(this, Il, void 0), Th(this, Ao, void 0), Th(this, bT, 0), Th(this, vT, 0), this.hot = e, this.eventManager = new lo(this.hot), this.settings = this.hot.getSettings(), this.createElements(), this.registerEvents(), this.initializeWalkontable();
    }
    /**
     * Renders WalkontableUI.
     */
    render() {
      this.hot.isRenderSuspended() || (this.hot.runHooks("beforeRender", this.hot.forceFullRender), this.postponedAdjustElementsSize && (this.postponedAdjustElementsSize = !1, this.adjustElementsSize(!0)), this._wt.draw(!this.hot.forceFullRender), this.hot.runHooks("afterRender", this.hot.forceFullRender), this.hot.forceFullRender = !1, this.hot.renderCall = !1);
    }
    /**
     * Adjust overlays elements size and master table size.
     */
    adjustElementsSize() {
      this.hot.isRenderSuspended() ? this.postponedAdjustElementsSize = !0 : this._wt.wtOverlays.adjustElementsSize();
    }
    /**
     * Returns td object given coordinates.
     *
     * @param {CellCoords} coords Renderable cell coordinates.
     * @param {boolean} topmost Indicates whether the cell should be calculated from the topmost.
     * @returns {HTMLTableCellElement|null}
     */
    getCellAtCoords(e, t) {
      const i = this._wt.getCell(e, t);
      return i < 0 ? null : i;
    }
    /**
     * Scroll viewport to a cell.
     *
     * @param {CellCoords} coords Renderable cell coordinates.
     * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.
     * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right side of the table.
     * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom side of the table.
     * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left side of the table.
     * @returns {boolean}
     */
    scrollViewport(e, t, i, r, s) {
      return this._wt.scrollViewport(e, t, i, r, s);
    }
    /**
     * Scroll viewport to a column.
     *
     * @param {number} column Renderable column index.
     * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right side of the table.
     * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left side of the table.
     * @returns {boolean}
     */
    scrollViewportHorizontally(e, t, i) {
      return this._wt.scrollViewportHorizontally(e, t, i);
    }
    /**
     * Scroll viewport to a row.
     *
     * @param {number} row Renderable row index.
     * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.
     * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom side of the table.
     * @returns {boolean}
     */
    scrollViewportVertically(e, t, i) {
      return this._wt.scrollViewportVertically(e, t, i);
    }
    /**
     * Prepares DOMElements and adds correct className to the root element.
     *
     * @private
     */
    createElements() {
      const {
        rootElement: e,
        rootDocument: t
      } = this.hot, i = e.getAttribute("style");
      i && e.setAttribute("data-originalstyle", i), ue(e, "handsontable"), Hs(Ao, this, t.createElement("TABLE")), ue(Mi(Ao, this), "htCore"), this.hot.getSettings().tableClassName && ue(Mi(Ao, this), this.hot.getSettings().tableClassName), this.settings.ariaTags && (ze(Mi(Ao, this), [Ka()]), ze(e, [d0e(), $7(-1), P1(this.hot.countCols()), x0e()])), this.THEAD = t.createElement("THEAD"), Mi(Ao, this).appendChild(this.THEAD), this.TBODY = t.createElement("TBODY"), Mi(Ao, this).appendChild(this.TBODY), this.hot.table = Mi(Ao, this), this.hot.container.insertBefore(Mi(Ao, this), this.hot.container.firstChild);
    }
    /**
     * Attaches necessary listeners.
     *
     * @private
     */
    registerEvents() {
      const {
        rootElement: e,
        rootDocument: t,
        selection: i,
        rootWindow: r
      } = this.hot, s = t.documentElement;
      this.eventManager.addEventListener(e, "mousedown", (a) => {
        Hs(M0, this, !0), this.isTextSelectionAllowed(a.target) || (NP(r), a.preventDefault(), r.focus());
      }), this.eventManager.addEventListener(e, "mouseup", () => {
        Hs(M0, this, !1);
      }), this.eventManager.addEventListener(e, "mousemove", (a) => {
        Mi(M0, this) && !this.isTextSelectionAllowed(a.target) && (this.settings.fragmentSelection && NP(r), a.preventDefault());
      }), this.eventManager.addEventListener(s, "keyup", (a) => {
        i.isInProgress() && !a.shiftKey && i.finish();
      }), this.eventManager.addEventListener(s, "mouseup", (a) => {
        i.isInProgress() && F1(a) && i.finish(), Hs(Il, this, !1);
        const l = D1(t.activeElement);
        yv(t.activeElement) && !l || (l || !i.isSelected() && !i.isSelectedByAnyHeader() && !e.contains(a.target) && !Ku(a)) && this.hot.unlisten();
      }), this.eventManager.addEventListener(s, "contextmenu", (a) => {
        i.isInProgress() && Ku(a) && (i.finish(), Hs(Il, this, !1));
      }), this.eventManager.addEventListener(s, "touchend", () => {
        i.isInProgress() && i.finish(), Hs(Il, this, !1);
      }), this.eventManager.addEventListener(s, "mousedown", (a) => {
        const l = a.target, c = a.x || a.clientX, u = a.y || a.clientY;
        let h = a.target;
        if (Mi(Il, this) || !e || !this.hot.view)
          return;
        const {
          holder: d
        } = this._wt.wtTable;
        if (h === d) {
          const g = xi(t);
          if (t.elementFromPoint(c + g, u) !== d || t.elementFromPoint(c, u + g) !== d)
            return;
        } else
          for (; h !== s; ) {
            if (h === null) {
              if (a.isTargetWebComponent)
                break;
              return;
            }
            if (h === e)
              return;
            h = h.parentNode;
          }
        (typeof this.settings.outsideClickDeselects == "function" ? this.settings.outsideClickDeselects(l) : this.settings.outsideClickDeselects) ? this.hot.deselectCell() : this.hot.destroyEditor(!1, !1);
      });
      let o = ef(r);
      for (; o !== null; )
        this.eventManager.addEventListener(o.document.documentElement, "click", () => {
          this.hot.unlisten();
        }), o = ef(o);
      this.eventManager.addEventListener(Mi(Ao, this), "selectstart", (a) => {
        this.settings.fragmentSelection || yv(a.target) || a.preventDefault();
      });
    }
    /**
     * Translate renderable cell coordinates to visual coordinates.
     *
     * @param {CellCoords} coords The cell coordinates.
     * @returns {CellCoords}
     */
    translateFromRenderableToVisualCoords(e) {
      let {
        row: t,
        col: i
      } = e;
      return this.hot._createCellCoords(...this.translateFromRenderableToVisualIndex(t, i));
    }
    /**
     * Translate renderable row and column indexes to visual row and column indexes.
     *
     * @param {number} renderableRow Renderable row index.
     * @param {number} renderableColumn Renderable columnIndex.
     * @returns {number[]}
     */
    translateFromRenderableToVisualIndex(e, t) {
      let i = e >= 0 ? this.hot.rowIndexMapper.getVisualFromRenderableIndex(e) : e, r = t >= 0 ? this.hot.columnIndexMapper.getVisualFromRenderableIndex(t) : t;
      return i === null && (i = e), r === null && (r = t), [i, r];
    }
    /**
     * Returns the number of renderable indexes.
     *
     * @private
     * @param {IndexMapper} indexMapper The IndexMapper instance for specific axis.
     * @param {number} maxElements Maximum number of elements (rows or columns).
     *
     * @returns {number|*}
     */
    countRenderableIndexes(e, t) {
      const i = Math.min(e.getNotTrimmedIndexesLength(), t), r = e.getNearestNotHiddenIndex(i - 1, -1);
      return r === null ? 0 : e.getRenderableFromVisualIndex(r) + 1;
    }
    /**
     * Returns the number of renderable columns.
     *
     * @returns {number}
     */
    countRenderableColumns() {
      return this.countRenderableIndexes(this.hot.columnIndexMapper, this.settings.maxCols);
    }
    /**
     * Returns the number of renderable rows.
     *
     * @returns {number}
     */
    countRenderableRows() {
      return this.countRenderableIndexes(this.hot.rowIndexMapper, this.settings.maxRows);
    }
    /**
     * Returns number of not hidden row indexes counting from the passed starting index.
     * The counting direction can be controlled by `incrementBy` argument.
     *
     * @param {number} visualIndex The visual index from which the counting begins.
     * @param {number} incrementBy If `-1` then counting is backwards or forward when `1`.
     * @returns {number}
     */
    countNotHiddenRowIndexes(e, t) {
      return this.countNotHiddenIndexes(e, t, this.hot.rowIndexMapper, this.countRenderableRows());
    }
    /**
     * Returns number of not hidden column indexes counting from the passed starting index.
     * The counting direction can be controlled by `incrementBy` argument.
     *
     * @param {number} visualIndex The visual index from which the counting begins.
     * @param {number} incrementBy If `-1` then counting is backwards or forward when `1`.
     * @returns {number}
     */
    countNotHiddenColumnIndexes(e, t) {
      return this.countNotHiddenIndexes(e, t, this.hot.columnIndexMapper, this.countRenderableColumns());
    }
    /**
     * Returns number of not hidden indexes counting from the passed starting index.
     * The counting direction can be controlled by `incrementBy` argument.
     *
     * @param {number} visualIndex The visual index from which the counting begins.
     * @param {number} incrementBy If `-1` then counting is backwards or forward when `1`.
     * @param {IndexMapper} indexMapper The IndexMapper instance for specific axis.
     * @param {number} renderableIndexesCount Total count of renderable indexes for specific axis.
     * @returns {number}
     */
    countNotHiddenIndexes(e, t, i, r) {
      if (isNaN(e) || e < 0)
        return 0;
      const s = i.getNearestNotHiddenIndex(e, t), o = i.getRenderableFromVisualIndex(s);
      if (!Number.isInteger(o))
        return 0;
      let a = 0;
      return t < 0 ? a = o + 1 : t > 0 && (a = r - o), a;
    }
    /**
     * The function returns the number of not hidden column indexes that fit between the first and
     * last fixed column in the left (or right in RTL mode) overlay.
     *
     * @returns {number}
     */
    countNotHiddenFixedColumnsStart() {
      const e = this.hot.countCols(), t = Math.min(parseInt(this.settings.fixedColumnsStart, 10), e) - 1;
      return this.countNotHiddenColumnIndexes(t, -1);
    }
    /**
     * The function returns the number of not hidden row indexes that fit between the first and
     * last fixed row in the top overlay.
     *
     * @returns {number}
     */
    countNotHiddenFixedRowsTop() {
      const e = this.hot.countRows(), t = Math.min(parseInt(this.settings.fixedRowsTop, 10), e) - 1;
      return this.countNotHiddenRowIndexes(t, -1);
    }
    /**
     * The function returns the number of not hidden row indexes that fit between the first and
     * last fixed row in the bottom overlay.
     *
     * @returns {number}
     */
    countNotHiddenFixedRowsBottom() {
      const e = this.hot.countRows(), t = Math.max(e - parseInt(this.settings.fixedRowsBottom, 10), 0);
      return this.countNotHiddenRowIndexes(t, 1);
    }
    /**
     * The function returns the number of renderable column indexes within the passed range of the visual indexes.
     *
     * @param {number} columnStart The column visual start index.
     * @param {number} columnEnd The column visual end index.
     * @returns {number}
     */
    countRenderableColumnsInRange(e, t) {
      let i = 0;
      for (let r = e; r <= t; r++)
        this.hot.columnIndexMapper.getRenderableFromVisualIndex(r) !== null && (i += 1);
      return i;
    }
    /**
     * The function returns the number of renderable row indexes within the passed range of the visual indexes.
     *
     * @param {number} rowStart The row visual start index.
     * @param {number} rowEnd The row visual end index.
     * @returns {number}
     */
    countRenderableRowsInRange(e, t) {
      let i = 0;
      for (let r = e; r <= t; r++)
        this.hot.rowIndexMapper.getRenderableFromVisualIndex(r) !== null && (i += 1);
      return i;
    }
    /**
     * Checks if at least one cell than belongs to the main table is not covered by the top, left or
     * bottom overlay.
     *
     * @returns {boolean}
     */
    isMainTableNotFullyCoveredByOverlays() {
      const e = this.countNotHiddenFixedRowsTop() + this.countNotHiddenFixedRowsBottom(), t = this.countNotHiddenFixedColumnsStart();
      return this.hot.countRenderedRows() > e && this.hot.countRenderedCols() > t;
    }
    /**
     * Defines default configuration and initializes WalkOnTable instance.
     *
     * @private
     */
    initializeWalkontable() {
      const e = {
        ariaTags: this.settings.ariaTags,
        rtlMode: this.hot.isRtl(),
        externalRowCalculator: this.hot.getPlugin("autoRowSize") && this.hot.getPlugin("autoRowSize").isEnabled(),
        table: Mi(Ao, this),
        isDataViewInstance: () => SS(this.hot),
        preventOverflow: () => this.settings.preventOverflow,
        preventWheel: () => this.settings.preventWheel,
        stretchH: () => this.settings.stretchH,
        data: (s, o) => this.hot.getDataAtCell(...this.translateFromRenderableToVisualIndex(s, o)),
        totalRows: () => this.countRenderableRows(),
        totalColumns: () => this.countRenderableColumns(),
        // Number of renderable columns for the left overlay.
        fixedColumnsStart: () => this.countNotHiddenFixedColumnsStart(),
        // Number of renderable rows for the top overlay.
        fixedRowsTop: () => this.countNotHiddenFixedRowsTop(),
        // Number of renderable rows for the bottom overlay.
        fixedRowsBottom: () => this.countNotHiddenFixedRowsBottom(),
        // Enable the inline start overlay when conditions are met.
        shouldRenderInlineStartOverlay: () => this.settings.fixedColumnsStart > 0 || e.rowHeaders().length > 0,
        // Enable the top overlay when conditions are met.
        shouldRenderTopOverlay: () => this.settings.fixedRowsTop > 0 || e.columnHeaders().length > 0,
        // Enable the bottom overlay when conditions are met.
        shouldRenderBottomOverlay: () => this.settings.fixedRowsBottom > 0,
        minSpareRows: () => this.settings.minSpareRows,
        renderAllRows: this.settings.renderAllRows,
        renderAllColumns: this.settings.renderAllColumns,
        rowHeaders: () => {
          const s = [];
          return this.hot.hasRowHeaders() && s.push((o, a) => {
            const l = o >= 0 ? this.hot.rowIndexMapper.getVisualFromRenderableIndex(o) : o;
            this.appendRowHeader(l, a);
          }), this.hot.runHooks("afterGetRowHeaderRenderers", s), Hs(T0, this, s.length), this.hot.getSettings().ariaTags && pw(_S, this, Q9).call(this) === this.hot.countCols() && pw(_S, this, iEe).call(this, Mi(T0, this)), s;
        },
        columnHeaders: () => {
          const s = [];
          return this.hot.hasColHeaders() && s.push((o, a) => {
            const l = o >= 0 ? this.hot.columnIndexMapper.getVisualFromRenderableIndex(o) : o;
            this.appendColHeader(l, a);
          }), this.hot.runHooks("afterGetColumnHeaderRenderers", s), Hs(mT, this, s.length), s;
        },
        columnWidth: (s) => {
          const o = this.hot.columnIndexMapper.getVisualFromRenderableIndex(s);
          return this.hot.getColWidth(o === null ? s : o);
        },
        rowHeight: (s) => {
          const o = this.hot.rowIndexMapper.getVisualFromRenderableIndex(s);
          return this.hot.getRowHeight(o === null ? s : o);
        },
        rowHeightByOverlayName: (s, o) => {
          const a = this.hot.rowIndexMapper.getVisualFromRenderableIndex(s), l = a === null ? s : a;
          return this.hot.runHooks("modifyRowHeightByOverlayName", this.hot.getRowHeight(l), l, o);
        },
        cellRenderer: (s, o, a) => {
          const [l, c] = this.translateFromRenderableToVisualIndex(s, o), u = this.hot.runHooks("modifyGetCellCoords", l, c);
          let h = l, d = c;
          Array.isArray(u) && ([h, d] = u);
          const f = this.hot.getCellMeta(h, d), g = this.hot.colToProp(d);
          let p = this.hot.getDataAtRowProp(h, g);
          this.hot.hasHook("beforeValueRender") && (p = this.hot.runHooks("beforeValueRender", p, f)), this.hot.runHooks("beforeRenderer", a, l, c, g, p, f), this.hot.getCellRenderer(f)(this.hot, a, l, c, g, p, f), this.hot.runHooks("afterRenderer", a, l, c, g, p, f);
        },
        selections: this.hot.selection.highlight,
        hideBorderOnMouseDownOver: () => this.settings.fragmentSelection,
        onWindowResize: () => {
          this.hot && !this.hot.isDestroyed && this.hot.refreshDimensions();
        },
        onContainerElementResize: () => {
          this.hot && !this.hot.isDestroyed && tf(this.hot.rootElement) && this.hot.refreshDimensions();
        },
        onCellMouseDown: (s, o, a, l) => {
          const c = this.translateFromRenderableToVisualCoords(o), u = {
            row: !1,
            column: !1,
            cell: !1
          };
          this.hot.listen(), this.activeWt = l, Hs(Il, this, !0), this.hot.runHooks("beforeOnCellMouseDown", s, c, a, u), !wu(s) && (LV(s, {
            coords: c,
            selection: this.hot.selection,
            controller: u,
            cellCoordsFactory: (h, d) => this.hot._createCellCoords(h, d)
          }), this.hot.runHooks("afterOnCellMouseDown", s, c, a), this.activeWt = this._wt);
        },
        onCellContextMenu: (s, o, a, l) => {
          const c = this.translateFromRenderableToVisualCoords(o);
          this.activeWt = l, Hs(Il, this, !1), this.hot.selection.isInProgress() && this.hot.selection.finish(), this.hot.runHooks("beforeOnCellContextMenu", s, c, a), !wu(s) && (this.hot.runHooks("afterOnCellContextMenu", s, c, a), this.activeWt = this._wt);
        },
        onCellMouseOut: (s, o, a, l) => {
          const c = this.translateFromRenderableToVisualCoords(o);
          this.activeWt = l, this.hot.runHooks("beforeOnCellMouseOut", s, c, a), !wu(s) && (this.hot.runHooks("afterOnCellMouseOut", s, c, a), this.activeWt = this._wt);
        },
        onCellMouseOver: (s, o, a, l) => {
          const c = this.translateFromRenderableToVisualCoords(o), u = {
            row: !1,
            column: !1,
            cell: !1
          };
          this.activeWt = l, this.hot.runHooks("beforeOnCellMouseOver", s, c, a, u), !wu(s) && (Mi(Il, this) && LV(s, {
            coords: c,
            selection: this.hot.selection,
            controller: u,
            cellCoordsFactory: (h, d) => this.hot._createCellCoords(h, d)
          }), this.hot.runHooks("afterOnCellMouseOver", s, c, a), this.activeWt = this._wt);
        },
        onCellMouseUp: (s, o, a, l) => {
          const c = this.translateFromRenderableToVisualCoords(o);
          this.activeWt = l, this.hot.runHooks("beforeOnCellMouseUp", s, c, a), !(wu(s) || this.hot.isDestroyed) && (this.hot.runHooks("afterOnCellMouseUp", s, c, a), this.activeWt = this._wt);
        },
        onCellCornerMouseDown: (s) => {
          s.preventDefault(), this.hot.runHooks("afterOnCellCornerMouseDown", s);
        },
        onCellCornerDblClick: (s) => {
          s.preventDefault(), this.hot.runHooks("afterOnCellCornerDblClick", s);
        },
        beforeDraw: (s, o) => this.beforeRender(s, o),
        onDraw: (s) => this.afterRender(s),
        onBeforeViewportScrollVertically: (s) => {
          const o = this.hot.rowIndexMapper, a = s < 0;
          let l = s;
          return !a && (l = o.getVisualFromRenderableIndex(s), l === null) ? s : (l = this.hot.runHooks("beforeViewportScrollVertically", l), this.hot.runHooks("beforeViewportScroll"), a ? l : o.getRenderableFromVisualIndex(l));
        },
        onBeforeViewportScrollHorizontally: (s) => {
          const o = this.hot.columnIndexMapper, a = s < 0;
          let l = s;
          return !a && (l = o.getVisualFromRenderableIndex(s), l === null) ? s : (l = this.hot.runHooks("beforeViewportScrollHorizontally", l), this.hot.runHooks("beforeViewportScroll"), a ? l : o.getRenderableFromVisualIndex(l));
        },
        onScrollVertically: () => {
          this.hot.runHooks("afterScrollVertically"), this.hot.runHooks("afterScroll");
        },
        onScrollHorizontally: () => {
          this.hot.runHooks("afterScrollHorizontally"), this.hot.runHooks("afterScroll");
        },
        onBeforeRemoveCellClassNames: () => this.hot.runHooks("beforeRemoveCellClassNames"),
        onBeforeHighlightingRowHeader: (s, o, a) => {
          const l = this.hot.rowIndexMapper, c = s < 0;
          let u = s;
          c || (u = l.getVisualFromRenderableIndex(s));
          const h = this.hot.runHooks("beforeHighlightingRowHeader", u, o, a);
          return c ? h : l.getRenderableFromVisualIndex(l.getNearestNotHiddenIndex(h, 1));
        },
        onBeforeHighlightingColumnHeader: (s, o, a) => {
          const l = this.hot.columnIndexMapper, c = s < 0;
          let u = s;
          c || (u = l.getVisualFromRenderableIndex(s));
          const h = this.hot.runHooks("beforeHighlightingColumnHeader", u, o, a);
          return c ? h : l.getRenderableFromVisualIndex(l.getNearestNotHiddenIndex(h, 1));
        },
        onAfterDrawSelection: (s, o, a) => {
          let l;
          const [c, u] = this.translateFromRenderableToVisualIndex(s, o), h = this.hot.selection.getSelectedRange();
          if (h.size() > 0) {
            const f = h.peekByIndex(a ?? 0);
            l = [f.from.row, f.from.col, f.to.row, f.to.col];
          }
          return this.hot.runHooks("afterDrawSelection", c, u, l, a);
        },
        onBeforeDrawBorders: (s, o) => {
          const [a, l, c, u] = s, h = [this.hot.rowIndexMapper.getVisualFromRenderableIndex(a), this.hot.columnIndexMapper.getVisualFromRenderableIndex(l), this.hot.rowIndexMapper.getVisualFromRenderableIndex(c), this.hot.columnIndexMapper.getVisualFromRenderableIndex(u)];
          return this.hot.runHooks("beforeDrawBorders", h, o);
        },
        onBeforeTouchScroll: () => this.hot.runHooks("beforeTouchScroll"),
        onAfterMomentumScroll: () => this.hot.runHooks("afterMomentumScroll"),
        onBeforeStretchingColumnWidth: (s, o) => {
          const a = this.hot.columnIndexMapper.getVisualFromRenderableIndex(o);
          return this.hot.runHooks("beforeStretchingColumnWidth", s, a);
        },
        onModifyRowHeaderWidth: (s) => this.hot.runHooks("modifyRowHeaderWidth", s),
        onModifyGetCellCoords: (s, o, a) => {
          const l = this.hot.rowIndexMapper, c = this.hot.columnIndexMapper, u = o >= 0 ? c.getVisualFromRenderableIndex(o) : o, h = s >= 0 ? l.getVisualFromRenderableIndex(s) : s, d = this.hot.runHooks("modifyGetCellCoords", h, u, a);
          if (Array.isArray(d)) {
            const [f, g, p, m] = d;
            return [f >= 0 ? l.getRenderableFromVisualIndex(l.getNearestNotHiddenIndex(f, 1)) : f, g >= 0 ? c.getRenderableFromVisualIndex(c.getNearestNotHiddenIndex(g, 1)) : g, p >= 0 ? l.getRenderableFromVisualIndex(l.getNearestNotHiddenIndex(p, -1)) : p, m >= 0 ? c.getRenderableFromVisualIndex(c.getNearestNotHiddenIndex(m, -1)) : m];
          }
        },
        viewportRowCalculatorOverride: (s) => {
          let o = this.settings.viewportRowRenderingOffset;
          if (o === "auto" && this.settings.fixedRowsTop && (o = 10), o > 0 || o === "auto") {
            const a = this.countRenderableRows(), l = s.startRow, c = s.endRow;
            if (typeof o == "number")
              s.startRow = Math.max(l - o, 0), s.endRow = Math.min(c + o, a - 1);
            else if (o === "auto") {
              const u = Math.ceil(c / a * 12);
              s.startRow = Math.max(l - u, 0), s.endRow = Math.min(c + u, a - 1);
            }
          }
          this.hot.runHooks("afterViewportRowCalculatorOverride", s);
        },
        viewportColumnCalculatorOverride: (s) => {
          let o = this.settings.viewportColumnRenderingOffset;
          if (o === "auto" && this.settings.fixedColumnsStart && (o = 10), o > 0 || o === "auto") {
            const a = this.countRenderableColumns(), l = s.startColumn, c = s.endColumn;
            if (typeof o == "number" && (s.startColumn = Math.max(l - o, 0), s.endColumn = Math.min(c + o, a - 1)), o === "auto") {
              const u = Math.ceil(c / a * 6);
              s.startColumn = Math.max(l - u, 0), s.endColumn = Math.min(c + u, a - 1);
            }
          }
          this.hot.runHooks("afterViewportColumnCalculatorOverride", s);
        },
        rowHeaderWidth: () => this.settings.rowHeaderWidth,
        columnHeaderHeight: () => {
          const s = this.hot.runHooks("modifyColumnHeaderHeight");
          return this.settings.columnHeaderHeight || s;
        }
      };
      this.hot.runHooks("beforeInitWalkontable", e), this._wt = new XD(e), this.activeWt = this._wt;
      const t = this._wt.wtTable.spreader, {
        width: i,
        height: r
      } = this.hot.rootElement.getBoundingClientRect();
      this.setLastSize(i, r), this.eventManager.addEventListener(t, "mousedown", (s) => {
        s.target === t && s.which === 3 && s.stopPropagation();
      }), this.eventManager.addEventListener(t, "contextmenu", (s) => {
        s.target === t && s.which === 3 && s.stopPropagation();
      }), this.eventManager.addEventListener(this.hot.rootDocument.documentElement, "click", () => {
        this.settings.observeDOMVisibility && this._wt.drawInterrupted && (this.hot.forceFullRender = !0, this.render());
      });
    }
    /**
     * Checks if it's possible to create text selection in element.
     *
     * @private
     * @param {HTMLElement} el The element to check.
     * @returns {boolean}
     */
    isTextSelectionAllowed(e) {
      if (yv(e))
        return !0;
      const t = Hu(e, this._wt.wtTable.spreader);
      return !!(this.settings.fragmentSelection === !0 && t || this.settings.fragmentSelection === "cell" && this.isSelectedOnlyCell() && t || !this.settings.fragmentSelection && this.isCellEdited() && this.isSelectedOnlyCell());
    }
    /**
     * Checks if user's been called mousedown.
     *
     * @private
     * @returns {boolean}
     */
    isMouseDown() {
      return Mi(Il, this);
    }
    /**
     * Check if selected only one cell.
     *
     * @private
     * @returns {boolean}
     */
    isSelectedOnlyCell() {
      var e, t;
      return (e = (t = this.hot.getSelectedRangeLast()) === null || t === void 0 ? void 0 : t.isSingleCell()) !== null && e !== void 0 ? e : !1;
    }
    /**
     * Checks if active cell is editing.
     *
     * @private
     * @returns {boolean}
     */
    isCellEdited() {
      const e = this.hot.getActiveEditor();
      return e && e.isOpened();
    }
    /**
     * `beforeDraw` callback.
     *
     * @private
     * @param {boolean} force If `true` rendering was triggered by a change of settings or data or `false` if
     *                        rendering was triggered by scrolling or moving selection.
     * @param {object} skipRender Object with `skipRender` property, if it is set to `true ` the next rendering
     *                            cycle will be skipped.
     */
    beforeRender(e, t) {
      e && this.hot.runHooks("beforeViewRender", this.hot.forceFullRender, t);
    }
    /**
     * `afterRender` callback.
     *
     * @private
     * @param {boolean} force If `true` rendering was triggered by a change of settings or data or `false` if
     *                        rendering was triggered by scrolling or moving selection.
     */
    afterRender(e) {
      e && this.hot.runHooks("afterViewRender", this.hot.forceFullRender);
    }
    /**
     * Append row header to a TH element.
     *
     * @private
     * @param {number} visualRowIndex The visual row index.
     * @param {HTMLTableHeaderCellElement} TH The table header element.
     */
    appendRowHeader(e, t) {
      if (t.firstChild) {
        const i = t.firstChild;
        if (!Ue(i, "relative")) {
          ra(t), this.appendRowHeader(e, t);
          return;
        }
        this.updateCellHeader(i.querySelector(".rowHeader"), e, this.hot.getRowHeader);
      } else {
        const {
          rootDocument: i,
          getRowHeader: r
        } = this.hot, s = i.createElement("div"), o = i.createElement("span");
        s.className = "relative", o.className = "rowHeader", this.updateCellHeader(o, e, r), s.appendChild(o), t.appendChild(s);
      }
      this.hot.runHooks("afterGetRowHeader", e, t);
    }
    /**
     * Append column header to a TH element.
     *
     * @private
     * @param {number} visualColumnIndex Visual column index.
     * @param {HTMLTableCellElement} TH The table header element.
     * @param {Function} [label] The function that returns the header label.
     * @param {number} [headerLevel=0] The index of header level counting from the top (positive
     *                                 values counting from 0 to N).
     */
    appendColHeader(e, t) {
      let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.hot.getColHeader, r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
      const s = () => {
        const o = e >= 0 ? this.hot.getColumnMeta(e).headerClassName : null;
        return o ? o.split(" ") : [];
      };
      if (t.firstChild) {
        const o = t.firstChild;
        Ue(o, "relative") ? (this.updateCellHeader(o.querySelector(".colHeader"), e, i, r), o.className = "", ue(o, ["relative", ...s()])) : (ra(t), this.appendColHeader(e, t, i, r));
      } else {
        const {
          rootDocument: o
        } = this.hot, a = o.createElement("div"), l = o.createElement("span"), c = s();
        a.classList.add("relative", ...c), l.className = "colHeader", this.settings.ariaTags && (ze(a, ...Ka()), ze(l, ...Ka())), this.updateCellHeader(l, e, i, r), a.appendChild(l), t.appendChild(a);
      }
      this.hot.runHooks("afterGetColHeader", e, t, r);
    }
    /**
     * Updates header cell content.
     *
     * @private
     * @param {HTMLElement} element Element to update.
     * @param {number} index Row index or column index.
     * @param {Function} content Function which should be returns content for this cell.
     * @param {number} [headerLevel=0] The index of header level counting from the top (positive
     *                                 values counting from 0 to N).
     */
    updateCellHeader(e, t, i) {
      let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0, s = t;
      const o = this._wt.wtOverlays.getParentOverlay(e) || this._wt;
      e.parentNode && (Ue(e, "colHeader") ? s = o.wtTable.columnFilter.sourceToRendered(t) : Ue(e, "rowHeader") && (s = o.wtTable.rowFilter.sourceToRendered(t))), s > -1 ? Mf(e, i(t, r)) : (Yu(e, " "), ue(e, "cornerHeader"));
    }
    /**
     * Given a element's left (or right in RTL mode) position relative to the viewport, returns maximum
     * element width until the right (or left) edge of the viewport (before scrollbar).
     *
     * @private
     * @param {number} inlineOffset The left (or right in RTL mode) offset.
     * @returns {number}
     */
    maximumVisibleElementWidth(e) {
      const i = this._wt.wtViewport.getWorkspaceWidth() - e;
      return i > 0 ? i : 0;
    }
    /**
     * Given a element's top position relative to the viewport, returns maximum element height until the bottom
     * edge of the viewport (before scrollbar).
     *
     * @private
     * @param {number} topOffset The top offset.
     * @returns {number}
     */
    maximumVisibleElementHeight(e) {
      const i = this._wt.wtViewport.getWorkspaceHeight() - e;
      return i > 0 ? i : 0;
    }
    /**
     * Sets new dimensions of the container.
     *
     * @param {number} width The table width.
     * @param {number} height The table height.
     */
    setLastSize(e, t) {
      Hs(bT, this, e), Hs(vT, this, t);
    }
    /**
     * Returns cached dimensions.
     *
     * @returns {object}
     */
    getLastSize() {
      return {
        width: Mi(bT, this),
        height: Mi(vT, this)
      };
    }
    /**
     * Returns the first rendered row in the DOM (usually is not visible in the table's viewport).
     *
     * @returns {number | null}
     */
    getFirstRenderedVisibleRow() {
      return this._wt.wtViewport.rowsRenderCalculator ? this.hot.rowIndexMapper.getNearestNotHiddenIndex(this._wt.wtTable.getFirstRenderedRow(), 1) : null;
    }
    /**
     * Returns the last rendered row in the DOM (usually is not visible in the table's viewport).
     *
     * @returns {number | null}
     */
    getLastRenderedVisibleRow() {
      return this._wt.wtViewport.rowsRenderCalculator ? this.hot.rowIndexMapper.getNearestNotHiddenIndex(this._wt.wtTable.getLastRenderedRow(), -1) : null;
    }
    /**
     * Returns the first rendered column in the DOM (usually is not visible in the table's viewport).
     *
     * @returns {number | null}
     */
    getFirstRenderedVisibleColumn() {
      return this._wt.wtViewport.columnsRenderCalculator ? this.hot.columnIndexMapper.getNearestNotHiddenIndex(this._wt.wtTable.getFirstRenderedColumn(), 1) : null;
    }
    /**
     * Returns the last rendered column in the DOM (usually is not visible in the table's viewport).
     *
     * @returns {number | null}
     */
    getLastRenderedVisibleColumn() {
      return this._wt.wtViewport.columnsRenderCalculator ? this.hot.columnIndexMapper.getNearestNotHiddenIndex(this._wt.wtTable.getLastRenderedColumn(), -1) : null;
    }
    /**
     * Returns the first fully visible row in the table viewport. When the table has overlays the method returns
     * the first row of the master table that is not overlapped by overlay.
     *
     * @returns {number}
     */
    getFirstFullyVisibleRow() {
      return this.hot.rowIndexMapper.getVisualFromRenderableIndex(this._wt.wtScroll.getFirstVisibleRow());
    }
    /**
     * Returns the last fully visible row in the table viewport. When the table has overlays the method returns
     * the first row of the master table that is not overlapped by overlay.
     *
     * @returns {number}
     */
    getLastFullyVisibleRow() {
      return this.hot.rowIndexMapper.getVisualFromRenderableIndex(this._wt.wtScroll.getLastVisibleRow());
    }
    /**
     * Returns the first fully visible column in the table viewport. When the table has overlays the method returns
     * the first row of the master table that is not overlapped by overlay.
     *
     * @returns {number}
     */
    getFirstFullyVisibleColumn() {
      return this.hot.columnIndexMapper.getVisualFromRenderableIndex(this._wt.wtScroll.getFirstVisibleColumn());
    }
    /**
     * Returns the last fully visible column in the table viewport. When the table has overlays the method returns
     * the first row of the master table that is not overlapped by overlay.
     *
     * @returns {number}
     */
    getLastFullyVisibleColumn() {
      return this.hot.columnIndexMapper.getVisualFromRenderableIndex(this._wt.wtScroll.getLastVisibleColumn());
    }
    /**
     * Returns the first partially visible row in the table viewport. When the table has overlays the method returns
     * the first row of the master table that is not overlapped by overlay.
     *
     * @returns {number}
     */
    getFirstPartiallyVisibleRow() {
      return this.hot.rowIndexMapper.getVisualFromRenderableIndex(this._wt.wtScroll.getFirstPartiallyVisibleRow());
    }
    /**
     * Returns the last partially visible row in the table viewport. When the table has overlays the method returns
     * the first row of the master table that is not overlapped by overlay.
     *
     * @returns {number}
     */
    getLastPartiallyVisibleRow() {
      return this.hot.rowIndexMapper.getVisualFromRenderableIndex(this._wt.wtScroll.getLastPartiallyVisibleRow());
    }
    /**
     * Returns the first partially visible column in the table viewport. When the table has overlays the method returns
     * the first row of the master table that is not overlapped by overlay.
     *
     * @returns {number}
     */
    getFirstPartiallyVisibleColumn() {
      return this.hot.columnIndexMapper.getVisualFromRenderableIndex(this._wt.wtScroll.getFirstPartiallyVisibleColumn());
    }
    /**
     * Returns the last partially visible column in the table viewport. When the table has overlays the method returns
     * the first row of the master table that is not overlapped by overlay.
     *
     * @returns {number}
     */
    getLastPartiallyVisibleColumn() {
      return this.hot.columnIndexMapper.getVisualFromRenderableIndex(this._wt.wtScroll.getLastPartiallyVisibleColumn());
    }
    /**
     * Returns the total count of the rendered column headers.
     *
     * @returns {number}
     */
    getColumnHeadersCount() {
      return Mi(mT, this);
    }
    /**
     * Returns the total count of the rendered row headers.
     *
     * @returns {number}
     */
    getRowHeadersCount() {
      return Mi(T0, this);
    }
    /**
     * Returns the table's viewport width. When the table has defined the size of the container,
     * and the columns do not fill the entire viewport, the viewport width is equal to the sum of
     * the columns' widths.
     *
     * @returns {number}
     */
    getViewportWidth() {
      return this._wt.wtViewport.getViewportWidth();
    }
    /**
     * Returns the table's total width including the scrollbar width.
     *
     * @returns {number}
     */
    getWorkspaceWidth() {
      return this._wt.wtViewport.getWorkspaceWidth();
    }
    /**
     * Returns the table's viewport height. When the table has defined the size of the container,
     * and the rows do not fill the entire viewport, the viewport height is equal to the sum of
     * the rows' heights.
     *
     * @returns {number}
     */
    getViewportHeight() {
      return this._wt.wtViewport.getViewportHeight();
    }
    /**
     * Returns the table's total height including the scrollbar height.
     *
     * @returns {number}
     */
    getWorkspaceHeight() {
      return this._wt.wtViewport.getWorkspaceHeight();
    }
    /**
     * Checks to what overlay the provided element belongs.
     *
     * @param {HTMLElement} element The DOM element to check.
     * @returns {'master'|'inline_start'|'top'|'top_inline_start_corner'|'bottom'|'bottom_inline_start_corner'}
     */
    getElementOverlayName(e) {
      var t;
      return ((t = this._wt.wtOverlays.getParentOverlay(e)) !== null && t !== void 0 ? t : this._wt).wtTable.name;
    }
    /**
     * Gets the overlay instance by its name.
     *
     * @param {'inline_start'|'top'|'top_inline_start_corner'|'bottom'|'bottom_inline_start_corner'} overlayName The overlay name.
     * @returns {Overlay | null}
     */
    getOverlayByName(e) {
      return this._wt.getOverlayByName(e);
    }
    /**
     * Checks if the table is visible or not.
     *
     * @returns {boolean}
     */
    isVisible() {
      return this._wt.wtTable.isVisible();
    }
    /**
     * Destroys internal WalkOnTable's instance. Detaches all of the bonded listeners.
     *
     * @private
     */
    destroy() {
      this._wt.destroy(), this.eventManager.destroy();
    }
  }
  function Q9() {
    return parseInt(this.hot.rootElement.getAttribute(P1()[0]), 10);
  }
  function iEe(n) {
    const e = pw(_S, this, Q9).call(this) + n;
    ze(this.hot.rootElement, ...P1(e));
  }
  const J9 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ", KP = J9.length;
  function z1(n) {
    let e = n + 1, t = "", i;
    for (; e > 0; )
      i = (e - 1) % KP, t = String.fromCharCode(65 + i) + t, e = parseInt((e - i) / KP, 10);
    return t;
  }
  function rEe(n) {
    let e = 0;
    if (n)
      for (let t = 0, i = n.length - 1; t < n.length; t += 1, i -= 1)
        e += KP ** i * (J9.indexOf(n[t]) + 1);
    return e -= 1, e;
  }
  function sEe() {
    let n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 100, e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 4;
    const t = [];
    let i, r;
    for (i = 0; i < n; i++) {
      const s = [];
      for (r = 0; r < e; r++)
        s.push(z1(r) + (i + 1));
      t.push(s);
    }
    return t;
  }
  function oEe() {
    let n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 100, e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 4;
    const t = [];
    let i, r;
    for (i = 0; i < n; i++) {
      const s = {};
      for (r = 0; r < e; r++)
        s[`prop${r}`] = z1(r) + (i + 1);
      t.push(s);
    }
    return t;
  }
  function aEe(n, e) {
    const t = [];
    let i;
    for (let r = 0; r < n; r++) {
      i = [];
      for (let s = 0; s < e; s++)
        i.push("");
      t.push(i);
    }
    return t;
  }
  function QD(n) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, t = n;
    const i = [];
    return (!Array.isArray(n) || !Array.isArray(n[0])) && (t = [n]), t.forEach((r, s) => {
      Array.isArray(r) ? r.forEach((o, a) => {
        i.push([s + e, a, o]);
      }) : Object.keys(r).forEach((o) => {
        i.push([s + e, o, r[o]]);
      });
    }), i;
  }
  function JD(n) {
    let e = 0;
    return Array.isArray(n) && (n[0] && Array.isArray(n[0]) ? e = n[0].length : n[0] && at(n[0]) && (e = H1(n[0]))), e;
  }
  function eG(n) {
    return !!(Array.isArray(n) && n.length && n.every((e) => Array.isArray(e)));
  }
  function tG(n) {
    return !!(Array.isArray(n) && n.length && n.every((e) => typeof e == "object" && !Array.isArray(e) && e !== null));
  }
  const lEe = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    countFirstRowKeys: JD,
    createEmptySpreadsheetData: aEe,
    createSpreadsheetData: sEe,
    createSpreadsheetObjectData: oEe,
    dataRowToChangesArray: QD,
    isArrayOfArrays: eG,
    isArrayOfObjects: tG,
    spreadsheetColumnIndex: rEe,
    spreadsheetColumnLabel: z1
  }, Symbol.toStringTag, { value: "Module" }));
  function jm(n, e, t) {
    return (e = cEe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function cEe(n) {
    var e = uEe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function uEe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class hEe {
    constructor(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      jm(this, "hot", void 0), jm(this, "data", void 0), jm(this, "dataType", "array"), jm(this, "colToProp", () => {
      }), jm(this, "propToCol", () => {
      }), this.hot = e, this.data = t;
    }
    /**
     * Run the `modifyRowData` hook and return either the modified or the source data for the provided row.
     *
     * @private
     * @param {number} rowIndex Row index.
     * @returns {Array|object} Source or modified row of data.
     */
    modifyRowData(e) {
      let t;
      return this.hot.hasHook("modifyRowData") && (t = this.hot.runHooks("modifyRowData", e)), t !== void 0 && !Number.isInteger(t) ? t : this.data[e];
    }
    /**
     * Get all data.
     *
     * @param {boolean} [toArray=false] If `true` return source data as an array of arrays even when source data was provided
     *                                  in another format.
     * @returns {Array}
     */
    getData() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
      return !this.data || this.data.length === 0 ? this.data : this.getByRange(null, null, e);
    }
    /**
     * Set new data source.
     *
     * @param {Array} data The new data.
     */
    setData(e) {
      this.data = e;
    }
    /**
     * Returns array of column values from the data source. `column` is the index of the row in the data source.
     *
     * @param {number} column Visual column index.
     * @returns {Array}
     */
    getAtColumn(e) {
      const t = [];
      return z(this.data, (i, r) => {
        const s = this.getAtCell(r, e);
        t.push(s);
      }), t;
    }
    /**
     * Returns a single row of the data or a subset of its columns. If a column range or `toArray` arguments are provided, it
     * operates only on the columns declared by the `columns` setting or the data schema.
     *
     * @param {number} row Physical row index.
     * @param {number} [startColumn] Starting index for the column range (optional).
     * @param {number} [endColumn] Ending index for the column range (optional).
     * @param {boolean} [toArray=false] `true` if the returned value should be forced to be presented as an array.
     * @returns {Array|object}
     */
    getAtRow(e, t, i) {
      let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
      const s = t === void 0 && i === void 0, {
        dataDotNotation: o
      } = this.hot.getSettings();
      let a = null, l = null;
      if (a = this.modifyRowData(e), Array.isArray(a))
        l = [], s ? a.forEach((c, u) => {
          l[u] = this.getAtPhysicalCell(e, u, a);
        }) : $e(t, i, (c) => {
          l[c - t] = this.getAtPhysicalCell(e, c, a);
        });
      else if (at(a) || cn(a))
        if (r ? l = [] : l = {}, !s || r) {
          const u = this.countFirstRowKeys() - 1;
          $e(0, u, (h) => {
            const d = this.colToProp(h);
            if (h >= (t || 0) && h <= (i || u) && !Number.isInteger(d)) {
              const f = this.getAtPhysicalCell(e, d, a);
              r ? l.push(f) : o ? vS(l, d, f) : l[d] = f;
            }
          });
        } else
          lt(a, (c, u) => {
            const h = this.getAtPhysicalCell(e, u, a);
            o ? vS(l, u, h) : l[u] = h;
          });
      return l;
    }
    /**
     * Set the provided value in the source data set at the provided coordinates.
     *
     * @param {number} row Physical row index.
     * @param {number|string} column Property name / physical column index.
     * @param {*} value The value to be set at the provided coordinates.
     */
    setAtCell(e, t, i) {
      if (!(e >= this.countRows() || t >= this.countFirstRowKeys())) {
        if (this.hot.hasHook("modifySourceData")) {
          const r = eo(i);
          this.hot.runHooks("modifySourceData", e, t, r, "set"), r.isTouched() && (i = r.value);
        }
        Number.isInteger(t) ? this.data[e][t] = i : vS(this.data[e], t, i);
      }
    }
    /**
     * Get data from the source data set using the physical indexes.
     *
     * @private
     * @param {number} row Physical row index.
     * @param {string|number|Function} column Physical column index / property / function.
     * @param {Array|object} dataRow A representation of a data row.
     * @returns {*} Value at the provided coordinates.
     */
    getAtPhysicalCell(e, t, i) {
      let r = null;
      if (i)
        if (typeof t == "string") {
          const {
            dataDotNotation: s
          } = this.hot.getSettings();
          r = s ? a9(i, t) : i[t];
        } else typeof t == "function" ? r = t(i) : r = i[t];
      if (this.hot.hasHook("modifySourceData")) {
        const s = eo(r);
        this.hot.runHooks("modifySourceData", e, t, s, "get"), s.isTouched() && (r = s.value);
      }
      return r;
    }
    /**
     * Returns a single value from the data.
     *
     * @param {number} row Physical row index.
     * @param {number} columnOrProp Visual column index or property.
     * @returns {*}
     */
    getAtCell(e, t) {
      const i = this.modifyRowData(e);
      return this.getAtPhysicalCell(e, this.colToProp(t), i);
    }
    /**
     * Returns source data by passed range.
     *
     * @param {object} [start] Object with physical `row` and `col` keys (or visual column index, if data type is an array of objects).
     * @param {object} [end] Object with physical `row` and `col` keys (or visual column index, if data type is an array of objects).
     * @param {boolean} [toArray=false] If `true` return source data as an array of arrays even when source data was provided
     *                                  in another format.
     * @returns {Array}
     */
    getByRange() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null, t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, r = !1, s = null, o = null, a = null, l = null;
      e === null || t === null ? (r = !0, s = 0, a = this.countRows() - 1) : (s = Math.min(e.row, t.row), o = Math.min(e.col, t.col), a = Math.max(e.row, t.row), l = Math.max(e.col, t.col));
      const c = [];
      return $e(s, a, (u) => {
        c.push(r ? this.getAtRow(u, void 0, void 0, i) : this.getAtRow(u, o, l, i));
      }), c;
    }
    /**
     * Count number of rows.
     *
     * @returns {number}
     */
    countRows() {
      if (this.hot.hasHook("modifySourceLength")) {
        const e = this.hot.runHooks("modifySourceLength");
        if (Number.isInteger(e))
          return e;
      }
      return this.data.length;
    }
    /**
     * Count number of columns.
     *
     * @returns {number}
     */
    countFirstRowKeys() {
      return JD(this.data);
    }
    /**
     * Destroy instance.
     */
    destroy() {
      this.data = null, this.hot = null;
    }
  }
  function HV(n, e, t) {
    return (e = dEe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function dEe(n) {
    var e = fEe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function fEe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class Af {
    constructor() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
      HV(this, "indexedValues", []), HV(this, "initValueOrFn", void 0), this.initValueOrFn = e;
    }
    /**
     * Get full list of values for particular indexes.
     *
     * @returns {Array}
     */
    getValues() {
      return this.indexedValues;
    }
    /**
     * Get value for the particular index.
     *
     * @param {number} index Index for which value is got.
     * @returns {*}
     */
    getValueAtIndex(e) {
      const t = this.indexedValues;
      if (e < t.length)
        return t[e];
    }
    /**
     * Set new values for particular indexes.
     *
     * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.
     *
     * @param {Array} values List of set values.
     */
    setValues(e) {
      this.indexedValues = e.slice(), this.runLocalHooks("change");
    }
    /**
     * Set new value for the particular index.
     *
     * @param {number} index The index.
     * @param {*} value The value to save.
     *
     * Note: Please keep in mind that it is not possible to set value beyond the map (not respecting already set
     * map's size). Please use the `setValues` method when you would like to extend the map.
     * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.
     *
     * @returns {boolean}
     */
    setValueAtIndex(e, t) {
      return e < this.indexedValues.length ? (this.indexedValues[e] = t, this.runLocalHooks("change"), !0) : !1;
    }
    /**
     * Clear all values to the defaults.
     */
    clear() {
      this.setDefaultValues();
    }
    /**
     * Get length of the index map.
     *
     * @returns {number}
     */
    getLength() {
      return this.getValues().length;
    }
    /**
     * Set default values for elements from `0` to `n`, where `n` is equal to the handled variable.
     *
     * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.
     *
     * @private
     * @param {number} [length] Length of list.
     */
    setDefaultValues() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.indexedValues.length;
      this.indexedValues.length = 0, cn(this.initValueOrFn) ? $e(e - 1, (t) => this.indexedValues.push(this.initValueOrFn(t))) : $e(e - 1, () => this.indexedValues.push(this.initValueOrFn)), this.runLocalHooks("change");
    }
    /**
     * Initialize list with default values for particular indexes.
     *
     * @private
     * @param {number} length New length of indexed list.
     * @returns {IndexMap}
     */
    init(e) {
      return this.setDefaultValues(e), this.runLocalHooks("init"), this;
    }
    /**
     * Add values to the list.
     *
     * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.
     *
     * @private
     */
    insert() {
      this.runLocalHooks("change");
    }
    /**
     * Remove values from the list.
     *
     * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.
     *
     * @private
     */
    remove() {
      this.runLocalHooks("change");
    }
    /**
     * Destroys the Map instance.
     */
    destroy() {
      this.clearLocalHooks(), this.indexedValues = null, this.initValueOrFn = null;
    }
  }
  qt(Af, Ki);
  function eN(n, e, t, i) {
    const r = t.length ? t[0] : void 0;
    return [...n.slice(0, r), ...t.map((s, o) => cn(i) ? i(s, o) : i), ...r === void 0 ? [] : n.slice(r)];
  }
  function tN(n, e) {
    return xc(n, (t, i) => e.includes(i) === !1);
  }
  class uh extends Af {
    /**
     * Add values to list and reorganize.
     *
     * @private
     * @param {number} insertionIndex Position inside the list.
     * @param {Array} insertedIndexes List of inserted indexes.
     */
    insert(e, t) {
      this.indexedValues = eN(this.indexedValues, e, t, this.initValueOrFn), super.insert(e, t);
    }
    /**
     * Remove values from the list and reorganize.
     *
     * @private
     * @param {Array} removedIndexes List of removed indexes.
     */
    remove(e) {
      this.indexedValues = tN(this.indexedValues, e), super.remove(e);
    }
  }
  class U1 extends uh {
    constructor() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
      super(e);
    }
    /**
     * Get physical indexes which are hidden.
     *
     * Note: Indexes marked as hidden are included in a {@link DataMap}, but aren't rendered.
     *
     * @returns {Array}
     */
    getHiddenIndexes() {
      return li(this.getValues(), (e, t, i) => (t && e.push(i), e), []);
    }
  }
  function nN(n, e, t) {
    return [...n.slice(0, e), ...t, ...n.slice(e)];
  }
  function mw(n, e) {
    return xc(n, (t) => e.includes(t) === !1);
  }
  function iN(n, e) {
    return mt(n, (t) => t - e.filter((i) => i < t).length);
  }
  function rN(n, e) {
    const t = e[0], i = e.length;
    return mt(n, (r) => r >= t ? r + i : r);
  }
  function gEe(n, e, t) {
    return (e = pEe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function pEe(n) {
    var e = mEe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function mEe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class G1 extends Af {
    constructor() {
      super(...arguments), gEe(this, "orderOfIndexes", []);
    }
    /**
     * Get full list of ordered values for particular indexes.
     *
     * @returns {Array}
     */
    getValues() {
      return this.orderOfIndexes.map((e) => this.indexedValues[e]);
    }
    /**
     * Set new values for particular indexes. Entries are linked and stored in a certain order.
     *
     * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.
     *
     * @param {Array} values List of set values.
     */
    setValues(e) {
      this.orderOfIndexes = [...Array(e.length).keys()], super.setValues(e);
    }
    /**
     * Set value at index and add it to the linked list of entries. Entries are stored in a certain order.
     *
     * Note: Value will be added at the end of the queue.
     *
     * @param {number} index The index.
     * @param {*} value The value to save.
     * @param {number} position Position to which entry will be added.
     *
     * @returns {boolean}
     */
    setValueAtIndex(e, t) {
      let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.orderOfIndexes.length;
      return e < this.indexedValues.length ? (this.indexedValues[e] = t, this.orderOfIndexes.includes(e) === !1 && this.orderOfIndexes.splice(i, 0, e), this.runLocalHooks("change"), !0) : !1;
    }
    /**
     * Clear value for particular index.
     *
     * @param {number} physicalIndex Physical index.
     */
    clearValue(e) {
      this.orderOfIndexes = mw(this.orderOfIndexes, [e]), cn(this.initValueOrFn) ? super.setValueAtIndex(e, this.initValueOrFn(e)) : super.setValueAtIndex(e, this.initValueOrFn);
    }
    /**
     * Get length of the index map.
     *
     * @returns {number}
     */
    getLength() {
      return this.orderOfIndexes.length;
    }
    /**
     * Set default values for elements from `0` to `n`, where `n` is equal to the handled variable.
     *
     * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.
     *
     * @private
     * @param {number} [length] Length of list.
     */
    setDefaultValues() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.indexedValues.length;
      this.orderOfIndexes.length = 0, super.setDefaultValues(e);
    }
    /**
     * Add values to list and reorganize. It updates list of indexes related to ordered values.
     *
     * @private
     * @param {number} insertionIndex Position inside the list.
     * @param {Array} insertedIndexes List of inserted indexes.
     */
    insert(e, t) {
      this.indexedValues = eN(this.indexedValues, e, t, this.initValueOrFn), this.orderOfIndexes = rN(this.orderOfIndexes, t), super.insert(e, t);
    }
    /**
     * Remove values from the list and reorganize. It updates list of indexes related to ordered values.
     *
     * @private
     * @param {Array} removedIndexes List of removed indexes.
     */
    remove(e) {
      this.indexedValues = tN(this.indexedValues, e), this.orderOfIndexes = mw(this.orderOfIndexes, e), this.orderOfIndexes = iN(this.orderOfIndexes, e), super.remove(e);
    }
    /**
     * Get every entry containing index and value, respecting order of indexes.
     *
     * @returns {Array}
     */
    getEntries() {
      return this.orderOfIndexes.map((e) => [e, this.getValueAtIndex(e)]);
    }
  }
  class py extends uh {
    constructor() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
      super(e);
    }
    /**
     * Get physical indexes which are trimmed.
     *
     * Note: Indexes marked as trimmed aren't included in a {@link DataMap} and aren't rendered.
     *
     * @returns {Array}
     */
    getTrimmedIndexes() {
      return li(this.getValues(), (e, t, i) => (t && e.push(i), e), []);
    }
  }
  const $V = /* @__PURE__ */ new Map([["indexesSequence", {
    getListWithInsertedItems: nN,
    getListWithRemovedItems: mw
  }], ["physicallyIndexed", {
    getListWithInsertedItems: eN,
    getListWithRemovedItems: tN
  }]]), nG = (n) => {
    if ($V.has(n) === !1)
      throw new Error(`Alter strategy with ID '${n}' does not exist.`);
    return $V.get(n);
  };
  class iG extends Af {
    constructor() {
      super((e) => e);
    }
    /**
     * Add values to list and reorganize.
     *
     * @private
     * @param {number} insertionIndex Position inside the list.
     * @param {Array} insertedIndexes List of inserted indexes.
     */
    insert(e, t) {
      const i = rN(this.indexedValues, t);
      this.indexedValues = nN(i, e, t), super.insert(e, t);
    }
    /**
     * Remove values from the list and reorganize.
     *
     * @private
     * @param {Array} removedIndexes List of removed indexes.
     */
    remove(e) {
      const t = mw(this.indexedValues, e);
      this.indexedValues = iN(t, e), super.remove(e);
    }
  }
  const FV = /* @__PURE__ */ new Map([["hiding", U1], ["index", Af], ["linkedPhysicalIndexToValue", G1], ["physicalIndexToValue", uh], ["trimming", py]]);
  function bEe(n) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
    if (!FV.has(n))
      throw new Error(`The provided map type ("${n}") does not exist.`);
    return new (FV.get(n))(e);
  }
  function vEe(n, e, t) {
    return (e = wEe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function wEe(n) {
    var e = yEe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function yEe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  let qP = 0;
  class sN {
    constructor() {
      vEe(this, "collection", /* @__PURE__ */ new Map());
    }
    /**
     * Register custom index map.
     *
     * @param {string} uniqueName Unique name of the index map.
     * @param {IndexMap} indexMap Index map containing miscellaneous (i.e. Meta data, indexes sequence), updated after remove and insert data actions.
     */
    register(e, t) {
      this.collection.has(e) === !1 && (this.collection.set(e, t), t.addLocalHook("change", () => this.runLocalHooks("change", t)), qP += 1);
    }
    /**
     * Unregister custom index map.
     *
     * @param {string} name Name of the index map.
     */
    unregister(e) {
      const t = this.collection.get(e);
      ke(t) && (t.destroy(), this.collection.delete(e), this.runLocalHooks("change", t), qP -= 1);
    }
    /**
     * Unregisters and destroys all collected index map instances.
     */
    unregisterAll() {
      this.collection.forEach((e, t) => this.unregister(t)), this.collection.clear();
    }
    /**
     * Get index map for the provided name.
     *
     * @param {string} [name] Name of the index map.
     * @returns {Array|IndexMap}
     */
    get(e) {
      return dn(e) ? Array.from(this.collection.values()) : this.collection.get(e);
    }
    /**
     * Get collection size.
     *
     * @returns {number}
     */
    getLength() {
      return this.collection.size;
    }
    /**
     * Remove some indexes and corresponding mappings and update values of the others within all collection's index maps.
     *
     * @private
     * @param {Array} removedIndexes List of removed indexes.
     */
    removeFromEvery(e) {
      this.collection.forEach((t) => {
        t.remove(e);
      });
    }
    /**
     * Insert new indexes and corresponding mapping and update values of the others all collection's index maps.
     *
     * @private
     * @param {number} insertionIndex Position inside the actual list.
     * @param {Array} insertedIndexes List of inserted indexes.
     */
    insertToEvery(e, t) {
      this.collection.forEach((i) => {
        i.insert(e, t);
      });
    }
    /**
     * Set default values to index maps within collection.
     *
     * @param {number} length Destination length for all stored maps.
     */
    initEvery(e) {
      this.collection.forEach((t) => {
        t.init(e);
      });
    }
  }
  qt(sN, Ki);
  function CEe() {
    return qP;
  }
  function wT(n, e, t) {
    return (e = SEe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function SEe(n) {
    var e = _Ee(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function _Ee(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class BV extends sN {
    constructor(e, t) {
      super(), wT(this, "mergedValuesCache", []), wT(this, "aggregationFunction", void 0), wT(this, "fallbackValue", void 0), this.aggregationFunction = e, this.fallbackValue = t;
    }
    /**
     * Get merged values for all indexes.
     *
     * @param {boolean} [readFromCache=true] Determine if read results from the cache.
     * @returns {Array}
     */
    getMergedValues() {
      if ((arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0) === !0)
        return this.mergedValuesCache;
      if (this.getLength() === 0)
        return [];
      const t = mt(this.get(), (s) => s.getValues()), i = [], r = ke(t[0]) && t[0].length || 0;
      for (let s = 0; s < r; s += 1) {
        const o = [];
        for (let a = 0; a < this.getLength(); a += 1)
          o.push(t[a][s]);
        i.push(o);
      }
      return mt(i, this.aggregationFunction);
    }
    /**
     * Get merged value for particular index.
     *
     * @param {number} index Index for which we calculate single result.
     * @param {boolean} [readFromCache=true] Determine if read results from the cache.
     * @returns {*}
     */
    getMergedValueAtIndex(e, t) {
      const i = this.getMergedValues(t)[e];
      return ke(i) ? i : this.fallbackValue;
    }
    /**
     * Rebuild cache for the collection.
     */
    updateCache() {
      this.mergedValuesCache = this.getMergedValues(!1);
    }
  }
  function REe(n, e, t) {
    EEe(n, e), e.set(n, t);
  }
  function EEe(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function xEe(n, e, t) {
    return n.set(rG(n, e), t), t;
  }
  function TEe(n, e) {
    return n.get(rG(n, e));
  }
  function rG(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var yT = /* @__PURE__ */ new WeakMap();
  class sG {
    constructor() {
      REe(this, yT, []);
    }
    /**
     * Subscribes to the observer.
     *
     * @param {Function} callback A function that will be called when the new changes will appear.
     * @returns {ChangesObserver}
     */
    subscribe(e) {
      return this.addLocalHook("change", e), this._write(TEe(yT, this)), this;
    }
    /**
     * Unsubscribes all subscriptions. After the method call, the observer would not produce
     * any new events.
     *
     * @returns {ChangesObserver}
     */
    unsubscribe() {
      return this.runLocalHooks("unsubscribe"), this.clearLocalHooks(), this;
    }
    /**
     * The write method is executed by the ChangesObservable module. The module produces all
     * changes events that are distributed further by the observer.
     *
     * @private
     * @param {object} changes The chunk of changes produced by the ChangesObservable module.
     * @returns {ChangesObserver}
     */
    _write(e) {
      return e.length > 0 && this.runLocalHooks("change", e), this;
    }
    /**
     * The write method is executed by the ChangesObservable module. The module produces initial
     * changes that will be used to notify new subscribers.
     *
     * @private
     * @param {object} initialChanges The chunk of changes produced by the ChangesObservable module.
     */
    _writeInitialChanges(e) {
      xEe(yT, this, e);
    }
  }
  qt(sG, Ki);
  function VV(n, e) {
    const t = [];
    let i = 0, r = 0;
    for (; i < n.length && r < e.length; i++, r++)
      n[i] !== e[r] && t.push({
        op: "replace",
        index: r,
        oldValue: n[i],
        newValue: e[r]
      });
    for (; i < e.length; i++)
      t.push({
        op: "insert",
        index: i,
        oldValue: void 0,
        newValue: e[i]
      });
    for (; r < n.length; r++)
      t.push({
        op: "remove",
        index: r,
        oldValue: n[r],
        newValue: void 0
      });
    return t;
  }
  function zm(n, e, t) {
    MEe(n, e), e.set(n, t);
  }
  function MEe(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function $s(n, e) {
    return n.get(oG(n, e));
  }
  function A0(n, e, t) {
    return n.set(oG(n, e), t), t;
  }
  function oG(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var P0 = /* @__PURE__ */ new WeakMap(), Um = /* @__PURE__ */ new WeakMap(), I0 = /* @__PURE__ */ new WeakMap(), O0 = /* @__PURE__ */ new WeakMap(), k0 = /* @__PURE__ */ new WeakMap();
  class AEe {
    constructor() {
      let {
        initialIndexValue: e
      } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      zm(this, P0, /* @__PURE__ */ new Set()), zm(this, Um, []), zm(this, I0, []), zm(this, O0, !1), zm(this, k0, !1), A0(k0, this, e ?? !1);
    }
    /* eslint-disable jsdoc/require-description-complete-sentence */
    /**
     * Creates and returns a new instance of the ChangesObserver object. The resource
     * allows subscribing to the index changes that during the code running may change.
     * Changes are emitted as an array of the index change. Each change is represented
     * separately as an object with `op`, `index`, `oldValue`, and `newValue` props.
     *
     * For example:
     * ```
     * [
     *   { op: 'replace', index: 1, oldValue: false, newValue: true },
     *   { op: 'replace', index: 3, oldValue: false, newValue: true },
     *   { op: 'insert', index: 4, oldValue: false, newValue: true },
     * ]
     * // or when the new index map changes have less indexes
     * [
     *   { op: 'replace', index: 1, oldValue: false, newValue: true },
     *   { op: 'remove', index: 4, oldValue: false, newValue: true },
     * ]
     * ```
     *
     * @returns {ChangesObserver}
     */
    /* eslint-enable jsdoc/require-description-complete-sentence */
    createObserver() {
      const e = new sG();
      return $s(P0, this).add(e), e.addLocalHook("unsubscribe", () => {
        $s(P0, this).delete(e);
      }), e._writeInitialChanges(VV($s(Um, this), $s(I0, this))), e;
    }
    /**
     * The method is an entry point for triggering new index map changes. Emitting the
     * changes triggers comparing algorithm which compares last saved state with a new
     * state. When there are some differences, the changes are sent to all subscribers.
     *
     * @param {Array} indexesState An array with index map state.
     */
    emit(e) {
      let t = $s(I0, this);
      (!$s(O0, this) || $s(Um, this).length !== e.length) && (e.length === 0 ? e = new Array(t.length).fill($s(k0, this)) : A0(Um, this, new Array(e.length).fill($s(k0, this))), $s(O0, this) || (A0(O0, this, !0), t = $s(Um, this)));
      const i = VV(t, e);
      $s(P0, this).forEach((r) => r._write(i)), A0(I0, this, e);
    }
  }
  function wr(n, e, t) {
    return (e = PEe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function PEe(n) {
    var e = IEe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function IEe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class XP {
    constructor() {
      wr(this, "indexesSequence", new iG()), wr(this, "trimmingMapsCollection", new BV((e) => e.some((t) => t === !0), !1)), wr(this, "hidingMapsCollection", new BV((e) => e.some((t) => t === !0), !1)), wr(this, "variousMapsCollection", new sN()), wr(this, "hidingChangesObservable", new AEe({
        initialIndexValue: !1
      })), wr(this, "notTrimmedIndexesCache", []), wr(this, "notHiddenIndexesCache", []), wr(this, "isBatched", !1), wr(this, "indexesSequenceChanged", !1), wr(this, "indexesChangeSource", void 0), wr(this, "trimmedIndexesChanged", !1), wr(this, "hiddenIndexesChanged", !1), wr(this, "renderablePhysicalIndexesCache", []), wr(this, "fromPhysicalToVisualIndexesCache", /* @__PURE__ */ new Map()), wr(this, "fromVisualToRenderableIndexesCache", /* @__PURE__ */ new Map()), this.indexesSequence.addLocalHook("change", () => {
        this.indexesSequenceChanged = !0, this.updateCache(), this.runLocalHooks("indexesSequenceChange", this.indexesChangeSource), this.runLocalHooks("change", this.indexesSequence, null);
      }), this.trimmingMapsCollection.addLocalHook("change", (e) => {
        this.trimmedIndexesChanged = !0, this.updateCache(), this.runLocalHooks("change", e, this.trimmingMapsCollection);
      }), this.hidingMapsCollection.addLocalHook("change", (e) => {
        this.hiddenIndexesChanged = !0, this.updateCache(), this.runLocalHooks("change", e, this.hidingMapsCollection);
      }), this.variousMapsCollection.addLocalHook("change", (e) => {
        this.runLocalHooks("change", e, this.variousMapsCollection);
      });
    }
    /**
     * Suspends the cache update for this map. The method is helpful to group multiple
     * operations, which affects the cache. In this case, the cache will be updated once after
     * calling the `resumeOperations` method.
     */
    suspendOperations() {
      this.isBatched = !0;
    }
    /**
     * Resumes the cache update for this map. It recalculates the cache and restores the
     * default behavior where each map modification updates the cache.
     */
    resumeOperations() {
      this.isBatched = !1, this.updateCache();
    }
    /**
     * It creates and returns the new instance of the ChangesObserver object. The object
     * allows listening to the index changes that happen while the Handsontable is running.
     *
     * @param {string} indexMapType The index map type which we want to observe.
     *                              Currently, only the 'hiding' index map types are observable.
     * @returns {ChangesObserver}
     */
    createChangesObserver(e) {
      if (e !== "hiding")
        throw new Error(`Unsupported index map type "${e}".`);
      return this.hidingChangesObservable.createObserver();
    }
    /**
     * Creates and registers a new `IndexMap` for a specified `IndexMapper` instance.
     *
     * @param {string} indexName A unique index name.
     * @param {string} mapType The index map type (e.g., "hiding", "trimming", "physicalIndexToValue").
     * @param {*} [initValueOrFn] The initial value for the index map.
     * @returns {IndexMap}
     */
    createAndRegisterIndexMap(e, t, i) {
      return this.registerMap(e, bEe(t, i));
    }
    /**
     * Register map which provide some index mappings. Type of map determining to which collection it will be added.
     *
     * @param {string} uniqueName Name of the index map. It should be unique.
     * @param {IndexMap} indexMap Registered index map updated on items removal and insertion.
     * @returns {IndexMap}
     */
    registerMap(e, t) {
      if (this.trimmingMapsCollection.get(e) || this.hidingMapsCollection.get(e) || this.variousMapsCollection.get(e))
        throw Error(`Map with name "${e}" has been already registered.`);
      t instanceof py ? this.trimmingMapsCollection.register(e, t) : t instanceof U1 ? this.hidingMapsCollection.register(e, t) : this.variousMapsCollection.register(e, t);
      const i = this.getNumberOfIndexes();
      return i > 0 && t.init(i), t;
    }
    /**
     * Unregister a map with given name.
     *
     * @param {string} name Name of the index map.
     */
    unregisterMap(e) {
      this.trimmingMapsCollection.unregister(e), this.hidingMapsCollection.unregister(e), this.variousMapsCollection.unregister(e);
    }
    /**
     * Unregisters all collected index map instances from all map collection types.
     */
    unregisterAll() {
      this.trimmingMapsCollection.unregisterAll(), this.hidingMapsCollection.unregisterAll(), this.variousMapsCollection.unregisterAll();
    }
    /**
     * Get a physical index corresponding to the given visual index.
     *
     * @param {number} visualIndex Visual index.
     * @returns {number|null} Returns translated index mapped by passed visual index.
     */
    getPhysicalFromVisualIndex(e) {
      const t = this.notTrimmedIndexesCache[e];
      return ke(t) ? t : null;
    }
    /**
     * Get a physical index corresponding to the given renderable index.
     *
     * @param {number} renderableIndex Renderable index.
     * @returns {null|number}
     */
    getPhysicalFromRenderableIndex(e) {
      const t = this.renderablePhysicalIndexesCache[e];
      return ke(t) ? t : null;
    }
    /**
     * Get a visual index corresponding to the given physical index.
     *
     * @param {number} physicalIndex Physical index to search.
     * @returns {number|null} Returns a visual index of the index mapper.
     */
    getVisualFromPhysicalIndex(e) {
      const t = this.fromPhysicalToVisualIndexesCache.get(e);
      return ke(t) ? t : null;
    }
    /**
     * Get a visual index corresponding to the given renderable index.
     *
     * @param {number} renderableIndex Renderable index.
     * @returns {null|number}
     */
    getVisualFromRenderableIndex(e) {
      return this.getVisualFromPhysicalIndex(this.getPhysicalFromRenderableIndex(e));
    }
    /**
     * Get a renderable index corresponding to the given visual index.
     *
     * @param {number} visualIndex Visual index.
     * @returns {null|number}
     */
    getRenderableFromVisualIndex(e) {
      const t = this.fromVisualToRenderableIndexesCache.get(e);
      return ke(t) ? t : null;
    }
    /**
     * Search for the nearest not-hidden row or column.
     *
     * @param {number} fromVisualIndex The visual index of the row or column from which the search starts.<br><br>
     * If the row or column from which the search starts is not hidden, the method simply returns the `fromVisualIndex` number.
     * @param {number} searchDirection The search direction.<br><br>`1`: search from `fromVisualIndex` to the end of the dataset.<br><br>
     * `-1`: search from `fromVisualIndex` to the beginning of the dataset (i.e., to the row or column at visual index `0`).
     * @param {boolean} searchAlsoOtherWayAround `true`: if a search in a first direction failed, try the opposite direction.<br><br>
     * `false`: search in one direction only.
     *
     * @returns {number|null} A visual index of a row or column, or `null`.
     */
    getNearestNotHiddenIndex(e, t) {
      let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
      if (this.getPhysicalFromVisualIndex(e) === null)
        return null;
      if (this.fromVisualToRenderableIndexesCache.has(e))
        return e;
      const s = Array.from(this.fromVisualToRenderableIndexesCache.keys());
      let o = -1;
      return t > 0 ? o = s.findIndex((a) => a > e) : o = s.reverse().findIndex((a) => a < e), o === -1 ? i ? this.getNearestNotHiddenIndex(e, -t, !1) : null : s[o];
    }
    /**
     * Set default values for all indexes in registered index maps.
     *
     * @param {number} [length] Destination length for all stored index maps.
     */
    initToLength() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getNumberOfIndexes();
      this.notTrimmedIndexesCache = [...new Array(e).keys()], this.notHiddenIndexesCache = [...new Array(e).keys()], this.suspendOperations(), this.indexesChangeSource = "init", this.indexesSequence.init(e), this.indexesChangeSource = void 0, this.trimmingMapsCollection.initEvery(e), this.resumeOperations(), this.suspendOperations(), this.hidingMapsCollection.initEvery(e), this.variousMapsCollection.initEvery(e), this.resumeOperations(), this.runLocalHooks("init");
    }
    /**
     * Trim/extend the mappers to fit the desired length.
     *
     * @param {number} length New mapper length.
     */
    fitToLength(e) {
      const t = this.getNumberOfIndexes();
      if (e < t) {
        const i = [...Array(this.getNumberOfIndexes() - e).keys()].map((r) => r + e);
        this.removeIndexes(i);
      } else
        this.insertIndexes(t, e - t);
    }
    /**
     * Get sequence of indexes.
     *
     * @returns {Array} Physical indexes.
     */
    getIndexesSequence() {
      return this.indexesSequence.getValues();
    }
    /**
     * Set completely new indexes sequence.
     *
     * @param {Array} indexes Physical indexes.
     */
    setIndexesSequence(e) {
      this.indexesChangeSource === void 0 && (this.indexesChangeSource = "update"), this.indexesSequence.setValues(e), this.indexesChangeSource === "update" && (this.indexesChangeSource = void 0);
    }
    /**
     * Get all NOT trimmed indexes.
     *
     * Note: Indexes marked as trimmed aren't included in a {@link DataMap} and aren't rendered.
     *
     * @param {boolean} [readFromCache=true] Determine if read indexes from cache.
     * @returns {Array} List of physical indexes. Index of this native array is a "visual index",
     * value of this native array is a "physical index".
     */
    getNotTrimmedIndexes() {
      return (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0) === !0 ? this.notTrimmedIndexesCache : this.getIndexesSequence().filter((i) => this.isTrimmed(i) === !1);
    }
    /**
     * Get length of all NOT trimmed indexes.
     *
     * Note: Indexes marked as trimmed aren't included in a {@link DataMap} and aren't rendered.
     *
     * @returns {number}
     */
    getNotTrimmedIndexesLength() {
      return this.getNotTrimmedIndexes().length;
    }
    /**
     * Get all NOT hidden indexes.
     *
     * Note: Indexes marked as hidden are included in a {@link DataMap}, but aren't rendered.
     *
     * @param {boolean} [readFromCache=true] Determine if read indexes from cache.
     * @returns {Array} List of physical indexes. Please keep in mind that index of this native array IS NOT a "visual index".
     */
    getNotHiddenIndexes() {
      return (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0) === !0 ? this.notHiddenIndexesCache : this.getIndexesSequence().filter((i) => this.isHidden(i) === !1);
    }
    /**
     * Get length of all NOT hidden indexes.
     *
     * Note: Indexes marked as hidden are included in a {@link DataMap}, but aren't rendered.
     *
     * @returns {number}
     */
    getNotHiddenIndexesLength() {
      return this.getNotHiddenIndexes().length;
    }
    /**
     * Get list of physical indexes (respecting the sequence of indexes) which may be rendered (when they are in a viewport).
     *
     * @param {boolean} [readFromCache=true] Determine if read indexes from cache.
     * @returns {Array} List of physical indexes. Index of this native array is a "renderable index",
     * value of this native array is a "physical index".
     */
    getRenderableIndexes() {
      return (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0) === !0 ? this.renderablePhysicalIndexesCache : this.getNotTrimmedIndexes().filter((i) => this.isHidden(i) === !1);
    }
    /**
     * Get length of all NOT trimmed and NOT hidden indexes.
     *
     * @returns {number}
     */
    getRenderableIndexesLength() {
      return this.getRenderableIndexes().length;
    }
    /**
     * Get number of all indexes.
     *
     * @returns {number}
     */
    getNumberOfIndexes() {
      return this.getIndexesSequence().length;
    }
    /**
     * Move indexes in the index mapper.
     *
     * @param {number|Array} movedIndexes Visual index(es) to move.
     * @param {number} finalIndex Visual index being a start index for the moved elements.
     */
    moveIndexes(e, t) {
      typeof e == "number" && (e = [e]);
      const i = mt(e, (c) => this.getPhysicalFromVisualIndex(c)), r = this.getNotTrimmedIndexesLength(), s = e.length, o = mw(this.getIndexesSequence(), i), a = o.filter((c) => this.isTrimmed(c) === !1);
      let l = o.indexOf(a[a.length - 1]) + 1;
      if (t + s < r) {
        const c = a[t];
        l = o.indexOf(c);
      }
      this.indexesChangeSource = "move", this.setIndexesSequence(nN(o, l, i)), this.indexesChangeSource = void 0;
    }
    /**
     * Get whether index is trimmed. Index marked as trimmed isn't included in a {@link DataMap} and isn't rendered.
     *
     * @param {number} physicalIndex Physical index.
     * @returns {boolean}
     */
    isTrimmed(e) {
      return this.trimmingMapsCollection.getMergedValueAtIndex(e);
    }
    /**
     * Get whether index is hidden. Index marked as hidden is included in a {@link DataMap}, but isn't rendered.
     *
     * @param {number} physicalIndex Physical index.
     * @returns {boolean}
     */
    isHidden(e) {
      return this.hidingMapsCollection.getMergedValueAtIndex(e);
    }
    /**
     * Insert new indexes and corresponding mapping and update values of the others, for all stored index maps.
     *
     * @private
     * @param {number} firstInsertedVisualIndex First inserted visual index.
     * @param {number} amountOfIndexes Amount of inserted indexes.
     */
    insertIndexes(e, t) {
      const i = this.getNotTrimmedIndexes()[e], r = ke(i) ? i : this.getNumberOfIndexes(), s = this.getIndexesSequence().includes(i) ? this.getIndexesSequence().indexOf(i) : this.getNumberOfIndexes(), o = mt(new Array(t).fill(r), (a, l) => a + l);
      this.suspendOperations(), this.indexesChangeSource = "insert", this.indexesSequence.insert(s, o), this.indexesChangeSource = void 0, this.trimmingMapsCollection.insertToEvery(s, o), this.hidingMapsCollection.insertToEvery(s, o), this.variousMapsCollection.insertToEvery(s, o), this.resumeOperations();
    }
    /**
     * Remove some indexes and corresponding mappings and update values of the others, for all stored index maps.
     *
     * @private
     * @param {Array} removedIndexes List of removed indexes.
     */
    removeIndexes(e) {
      this.suspendOperations(), this.indexesChangeSource = "remove", this.indexesSequence.remove(e), this.indexesChangeSource = void 0, this.trimmingMapsCollection.removeFromEvery(e), this.hidingMapsCollection.removeFromEvery(e), this.variousMapsCollection.removeFromEvery(e), this.resumeOperations();
    }
    /**
     * Rebuild cache for some indexes. Every action on indexes sequence or indexes skipped in the process of rendering
     * by default reset cache, thus batching some index maps actions is recommended.
     *
     * @private
     * @param {boolean} [force=false] Determine if force cache update.
     */
    updateCache() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
      const t = this.indexesSequenceChanged || this.trimmedIndexesChanged || this.hiddenIndexesChanged;
      (e === !0 || this.isBatched === !1 && t === !0) && (this.trimmingMapsCollection.updateCache(), this.hidingMapsCollection.updateCache(), this.notTrimmedIndexesCache = this.getNotTrimmedIndexes(!1), this.notHiddenIndexesCache = this.getNotHiddenIndexes(!1), this.renderablePhysicalIndexesCache = this.getRenderableIndexes(!1), this.cacheFromPhysicalToVisualIndexes(), this.cacheFromVisualToRenderableIndexes(), this.hiddenIndexesChanged && this.hidingChangesObservable.emit(this.hidingMapsCollection.getMergedValues()), this.runLocalHooks("cacheUpdated", {
        indexesSequenceChanged: this.indexesSequenceChanged,
        trimmedIndexesChanged: this.trimmedIndexesChanged,
        hiddenIndexesChanged: this.hiddenIndexesChanged
      }), this.indexesSequenceChanged = !1, this.trimmedIndexesChanged = !1, this.hiddenIndexesChanged = !1);
    }
    /**
     * Update cache for translations from physical to visual indexes.
     *
     * @private
     */
    cacheFromPhysicalToVisualIndexes() {
      const e = this.getNotTrimmedIndexesLength();
      this.fromPhysicalToVisualIndexesCache.clear();
      for (let t = 0; t < e; t += 1) {
        const i = this.getPhysicalFromVisualIndex(t);
        this.fromPhysicalToVisualIndexesCache.set(i, t);
      }
    }
    /**
     * Update cache for translations from visual to renderable indexes.
     *
     * @private
     */
    cacheFromVisualToRenderableIndexes() {
      const e = this.getRenderableIndexesLength();
      this.fromVisualToRenderableIndexesCache.clear();
      for (let t = 0; t < e; t += 1) {
        const i = this.getPhysicalFromRenderableIndex(t), r = this.getVisualFromPhysicalIndex(i);
        this.fromVisualToRenderableIndexesCache.set(r, t);
      }
    }
  }
  qt(XP, Ki);
  function OEe(n, e) {
    return lt(e, (t, i) => {
      dn(n[i]) && (n[i] = t);
    }), n;
  }
  function aG(n) {
    const t = /^([a-zA-Z]{2})-([a-zA-Z]{2})$/.exec(n);
    return t ? `${t[1].toLowerCase()}-${t[2].toUpperCase()}` : n;
  }
  function lG(n) {
    ke(n) && TD(Kt`Language with code "${n}" was not found. You should register particular language\x20
    before using it. Read more about this issue at: https://docs.handsontable.com/i18n/missing-language-code.`);
  }
  function kEe(n, e) {
    return Array.isArray(n) && Number.isInteger(e) ? n[e] : n;
  }
  const {
    register: DEe,
    getValues: NEe
  } = ha("phraseFormatters");
  function LEe(n, e) {
    DEe(n, e);
  }
  function HEe() {
    return NEe();
  }
  LEe("pluralize", kEe);
  const cG = "ContextMenu:items", it = cG, oN = `${it}.noItems`, aN = `${it}.insertRowAbove`, lN = `${it}.insertRowBelow`, cN = `${it}.insertColumnOnTheLeft`, uN = `${it}.insertColumnOnTheRight`, hN = `${it}.removeRow`, dN = `${it}.removeColumn`, fN = `${it}.undo`, gN = `${it}.redo`, N_ = `${it}.readOnly`, pN = `${it}.clearColumn`, mN = `${it}.copy`, bN = `${it}.copyWithHeaders`, vN = `${it}.copyWithGroupHeaders`, wN = `${it}.copyHeadersOnly`, yN = `${it}.cut`, CN = `${it}.freezeColumn`, SN = `${it}.unfreezeColumn`, _N = `${it}.mergeCells`, RN = `${it}.unmergeCells`, EN = `${it}.addComment`, xN = `${it}.editComment`, TN = `${it}.removeComment`, MN = `${it}.readOnlyComment`, AN = `${it}.align`, L_ = `${it}.align.left`, H_ = `${it}.align.center`, $_ = `${it}.align.right`, F_ = `${it}.align.justify`, B_ = `${it}.align.top`, V_ = `${it}.align.middle`, W_ = `${it}.align.bottom`, PN = `${it}.borders`, IN = `${it}.borders.top`, ON = `${it}.borders.right`, kN = `${it}.borders.bottom`, DN = `${it}.borders.left`, NN = `${it}.borders.remove`, LN = `${it}.nestedHeaders.insertChildRow`, HN = `${it}.nestedHeaders.detachFromParent`, $N = `${it}.hideColumn`, FN = `${it}.showColumn`, BN = `${it}.hideRow`, VN = `${it}.showRow`, Nr = "Filters:", Un = `${Nr}conditions`, Y1 = `${Un}.none`, WN = `${Un}.isEmpty`, jN = `${Un}.isNotEmpty`, zN = `${Un}.isEqualTo`, UN = `${Un}.isNotEqualTo`, GN = `${Un}.beginsWith`, YN = `${Un}.endsWith`, KN = `${Un}.contains`, qN = `${Un}.doesNotContain`, $Ee = `${Un}.byValue`, XN = `${Un}.greaterThan`, ZN = `${Un}.greaterThanOrEqualTo`, QN = `${Un}.lessThan`, JN = `${Un}.lessThanOrEqualTo`, eL = `${Un}.isBetween`, tL = `${Un}.isNotBetween`, nL = `${Un}.after`, iL = `${Un}.before`, rL = `${Un}.today`, sL = `${Un}.tomorrow`, oL = `${Un}.yesterday`, aL = `${Nr}labels.filterByCondition`, lL = `${Nr}labels.filterByValue`, cL = `${Nr}labels.conjunction`, K1 = `${Nr}labels.disjunction`, j_ = `${Nr}values.blankCells`, uL = `${Nr}buttons.selectAll`, hL = `${Nr}buttons.clear`, dL = `${Nr}buttons.ok`, fL = `${Nr}buttons.cancel`, gL = `${Nr}buttons.placeholder.search`, pL = `${Nr}buttons.placeholder.value`, mL = `${Nr}buttons.placeholder.secondValue`, bL = "CheckboxRenderer:", vL = `${bL}checked`, wL = `${bL}unchecked`, FEe = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    CHECKBOX_CHECKED: vL,
    CHECKBOX_RENDERER_NAMESPACE: bL,
    CHECKBOX_UNCHECKED: wL,
    CONTEXTMENU_ITEMS_ADD_COMMENT: EN,
    CONTEXTMENU_ITEMS_ALIGNMENT: AN,
    CONTEXTMENU_ITEMS_ALIGNMENT_BOTTOM: W_,
    CONTEXTMENU_ITEMS_ALIGNMENT_CENTER: H_,
    CONTEXTMENU_ITEMS_ALIGNMENT_JUSTIFY: F_,
    CONTEXTMENU_ITEMS_ALIGNMENT_LEFT: L_,
    CONTEXTMENU_ITEMS_ALIGNMENT_MIDDLE: V_,
    CONTEXTMENU_ITEMS_ALIGNMENT_RIGHT: $_,
    CONTEXTMENU_ITEMS_ALIGNMENT_TOP: B_,
    CONTEXTMENU_ITEMS_BORDERS: PN,
    CONTEXTMENU_ITEMS_BORDERS_BOTTOM: kN,
    CONTEXTMENU_ITEMS_BORDERS_LEFT: DN,
    CONTEXTMENU_ITEMS_BORDERS_RIGHT: ON,
    CONTEXTMENU_ITEMS_BORDERS_TOP: IN,
    CONTEXTMENU_ITEMS_CLEAR_COLUMN: pN,
    CONTEXTMENU_ITEMS_COPY: mN,
    CONTEXTMENU_ITEMS_COPY_COLUMN_HEADERS_ONLY: wN,
    CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_GROUP_HEADERS: vN,
    CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_HEADERS: bN,
    CONTEXTMENU_ITEMS_CUT: yN,
    CONTEXTMENU_ITEMS_EDIT_COMMENT: xN,
    CONTEXTMENU_ITEMS_FREEZE_COLUMN: CN,
    CONTEXTMENU_ITEMS_HIDE_COLUMN: $N,
    CONTEXTMENU_ITEMS_HIDE_ROW: BN,
    CONTEXTMENU_ITEMS_INSERT_LEFT: cN,
    CONTEXTMENU_ITEMS_INSERT_RIGHT: uN,
    CONTEXTMENU_ITEMS_MERGE_CELLS: _N,
    CONTEXTMENU_ITEMS_NESTED_ROWS_DETACH_CHILD: HN,
    CONTEXTMENU_ITEMS_NESTED_ROWS_INSERT_CHILD: LN,
    CONTEXTMENU_ITEMS_NO_ITEMS: oN,
    CONTEXTMENU_ITEMS_READ_ONLY: N_,
    CONTEXTMENU_ITEMS_READ_ONLY_COMMENT: MN,
    CONTEXTMENU_ITEMS_REDO: gN,
    CONTEXTMENU_ITEMS_REMOVE_BORDERS: NN,
    CONTEXTMENU_ITEMS_REMOVE_COLUMN: dN,
    CONTEXTMENU_ITEMS_REMOVE_COMMENT: TN,
    CONTEXTMENU_ITEMS_REMOVE_ROW: hN,
    CONTEXTMENU_ITEMS_ROW_ABOVE: aN,
    CONTEXTMENU_ITEMS_ROW_BELOW: lN,
    CONTEXTMENU_ITEMS_SHOW_COLUMN: FN,
    CONTEXTMENU_ITEMS_SHOW_ROW: VN,
    CONTEXTMENU_ITEMS_UNDO: fN,
    CONTEXTMENU_ITEMS_UNFREEZE_COLUMN: SN,
    CONTEXTMENU_ITEMS_UNMERGE_CELLS: RN,
    CONTEXT_MENU_ITEMS_NAMESPACE: cG,
    FILTERS_BUTTONS_CANCEL: fL,
    FILTERS_BUTTONS_CLEAR: hL,
    FILTERS_BUTTONS_OK: dL,
    FILTERS_BUTTONS_PLACEHOLDER_SEARCH: gL,
    FILTERS_BUTTONS_PLACEHOLDER_SECOND_VALUE: mL,
    FILTERS_BUTTONS_PLACEHOLDER_VALUE: pL,
    FILTERS_BUTTONS_SELECT_ALL: uL,
    FILTERS_CONDITIONS_AFTER: nL,
    FILTERS_CONDITIONS_BEFORE: iL,
    FILTERS_CONDITIONS_BEGINS_WITH: GN,
    FILTERS_CONDITIONS_BETWEEN: eL,
    FILTERS_CONDITIONS_BY_VALUE: $Ee,
    FILTERS_CONDITIONS_CONTAINS: KN,
    FILTERS_CONDITIONS_EMPTY: WN,
    FILTERS_CONDITIONS_ENDS_WITH: YN,
    FILTERS_CONDITIONS_EQUAL: zN,
    FILTERS_CONDITIONS_GREATER_THAN: XN,
    FILTERS_CONDITIONS_GREATER_THAN_OR_EQUAL: ZN,
    FILTERS_CONDITIONS_LESS_THAN: QN,
    FILTERS_CONDITIONS_LESS_THAN_OR_EQUAL: JN,
    FILTERS_CONDITIONS_NAMESPACE: Un,
    FILTERS_CONDITIONS_NONE: Y1,
    FILTERS_CONDITIONS_NOT_BETWEEN: tL,
    FILTERS_CONDITIONS_NOT_CONTAIN: qN,
    FILTERS_CONDITIONS_NOT_EMPTY: jN,
    FILTERS_CONDITIONS_NOT_EQUAL: UN,
    FILTERS_CONDITIONS_TODAY: rL,
    FILTERS_CONDITIONS_TOMORROW: sL,
    FILTERS_CONDITIONS_YESTERDAY: oL,
    FILTERS_DIVS_FILTER_BY_CONDITION: aL,
    FILTERS_DIVS_FILTER_BY_VALUE: lL,
    FILTERS_LABELS_CONJUNCTION: cL,
    FILTERS_LABELS_DISJUNCTION: K1,
    FILTERS_NAMESPACE: Nr,
    FILTERS_VALUES_BLANK_CELLS: j_
  }, Symbol.toStringTag, { value: "Module" }));
  /**
   * @preserve
   * Authors: Handsoncode
   * Last updated: Nov 15, 2017
   *
   * Description: Definition file for English - United States language-country.
   */
  const uG = {
    languageCode: "en-US",
    [oN]: "No available options",
    [aN]: "Insert row above",
    [lN]: "Insert row below",
    [cN]: "Insert column left",
    [uN]: "Insert column right",
    [hN]: ["Remove row", "Remove rows"],
    [dN]: ["Remove column", "Remove columns"],
    [fN]: "Undo",
    [gN]: "Redo",
    [N_]: "Read only",
    [pN]: "Clear column",
    [AN]: "Alignment",
    [L_]: "Left",
    [H_]: "Center",
    [$_]: "Right",
    [F_]: "Justify",
    [B_]: "Top",
    [V_]: "Middle",
    [W_]: "Bottom",
    [CN]: "Freeze column",
    [SN]: "Unfreeze column",
    [PN]: "Borders",
    [IN]: "Top",
    [ON]: "Right",
    [kN]: "Bottom",
    [DN]: "Left",
    [NN]: "Remove border(s)",
    [EN]: "Add comment",
    [xN]: "Edit comment",
    [TN]: "Delete comment",
    [MN]: "Read-only comment",
    [_N]: "Merge cells",
    [RN]: "Unmerge cells",
    [mN]: "Copy",
    [bN]: ["Copy with header", "Copy with headers"],
    [vN]: ["Copy with group header", "Copy with group headers"],
    [wN]: ["Copy header only", "Copy headers only"],
    [yN]: "Cut",
    [LN]: "Insert child row",
    [HN]: "Detach from parent",
    [$N]: ["Hide column", "Hide columns"],
    [FN]: ["Show column", "Show columns"],
    [BN]: ["Hide row", "Hide rows"],
    [VN]: ["Show row", "Show rows"],
    [Y1]: "None",
    [WN]: "Is empty",
    [jN]: "Is not empty",
    [zN]: "Is equal to",
    [UN]: "Is not equal to",
    [GN]: "Begins with",
    [YN]: "Ends with",
    [KN]: "Contains",
    [qN]: "Does not contain",
    [XN]: "Greater than",
    [ZN]: "Greater than or equal to",
    [QN]: "Less than",
    [JN]: "Less than or equal to",
    [eL]: "Is between",
    [tL]: "Is not between",
    [nL]: "After",
    [iL]: "Before",
    [rL]: "Today",
    [sL]: "Tomorrow",
    [oL]: "Yesterday",
    [j_]: "Blank cells",
    [aL]: "Filter by condition",
    [lL]: "Filter by value",
    [cL]: "And",
    [K1]: "Or",
    [uL]: "Select all",
    [hL]: "Clear",
    [dL]: "OK",
    [fL]: "Cancel",
    [gL]: "Search",
    [pL]: "Value",
    [mL]: "Second value",
    [vL]: "Checked",
    [wL]: "Unchecked"
  }, BEe = FEe, ZP = uG.languageCode, {
    register: VEe,
    getItem: hG,
    hasItem: WEe,
    getValues: jEe
  } = ha("languagesDictionaries");
  dG(uG);
  function dG(n, e) {
    let t = n, i = e;
    return at(n) && (i = n, t = i.languageCode), zEe(t, i), VEe(t, mr(i)), mr(i);
  }
  function zEe(n, e) {
    n !== ZP && OEe(e, hG(ZP));
  }
  function fG(n) {
    return yL(n) ? mr(hG(n)) : null;
  }
  function yL(n) {
    return WEe(n);
  }
  function UEe() {
    return jEe();
  }
  function gG(n, e, t) {
    const i = fG(n);
    if (i === null)
      return null;
    const r = i[e];
    if (dn(r))
      return null;
    const s = GEe(r, t);
    return Array.isArray(s) ? s[0] : s;
  }
  function GEe(n, e) {
    let t = n;
    return z(HEe(), (i) => {
      t = i(n, e);
    }), t;
  }
  function YEe(n) {
    let e = aG(n);
    return yL(e) || (e = ZP, lG(n)), e;
  }
  function KEe(n, e, t) {
    return (e = qEe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function qEe(n) {
    var e = XEe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function XEe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class Vc extends U9 {
    constructor(e, t) {
      super(e, null), KEe(this, "visualCellRange", null), this.visualCellRange = t || null, this.commit();
    }
    /**
     * Adds a cell coords to the selection.
     *
     * @param {CellCoords} coords Visual coordinates of a cell.
     * @returns {VisualSelection}
     */
    add(e) {
      return this.visualCellRange === null ? this.visualCellRange = this.settings.createCellRange(e) : this.visualCellRange.expand(e), this;
    }
    /**
     * Clears visual and renderable selection.
     *
     * @returns {VisualSelection}
     */
    clear() {
      return this.visualCellRange = null, super.clear();
    }
    /**
     * Trims the passed cell range object by removing all coordinates that points to the hidden rows
     * or columns. The result is a new cell range object that points only to the visible indexes or `null`.
     *
     * @private
     * @param {CellRange} cellRange Cells range object to be trimmed.
     * @returns {CellRange} Visual non-hidden cells range coordinates.
     */
    trimToVisibleCellsRangeOnly(e) {
      let {
        from: t,
        to: i
      } = e, r = this.getNearestNotHiddenCoords(t, 1), s = this.getNearestNotHiddenCoords(i, -1);
      return r === null || s === null ? null : ((r.row > s.row || r.col > s.col) && (r = t, s = i), this.settings.createCellRange(r, r, s));
    }
    /**
     * Gets nearest coordinates that points to the visible row and column indexes. If there are no visible
     * rows and/or columns the `null` value is returned.
     *
     * @private
     * @param {CellCoords} coords The coords object as starting point for finding the nearest visible coordinates.
     * @param {1|-1} rowSearchDirection The search direction. For value 1, it means searching from top to bottom for
     *                                  rows and from left to right for columns. For -1, it is the other way around.
     * @param {1|-1} columnSearchDirection The same as above but for rows.
     * @returns {CellCoords|null} Visual cell coordinates.
     */
    getNearestNotHiddenCoords(e, t) {
      let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : t;
      const r = this.getNearestNotHiddenIndex(this.settings.rowIndexMapper, e.row, t);
      if (r === null)
        return null;
      const s = this.getNearestNotHiddenIndex(this.settings.columnIndexMapper, e.col, i);
      return s === null ? null : this.settings.createCellCoords(r, s);
    }
    /**
     * Gets nearest visual index. If there are no visible rows or columns the `null` value is returned.
     *
     * @private
     * @param {IndexMapper} indexMapper The IndexMapper instance for specific axis.
     * @param {number} visualIndex The index as starting point for finding the nearest visible index.
     * @param {1|-1} searchDirection The search direction. For value 1, it means searching from top to bottom for
     *                               rows and from left to right for columns. For -1, it is the other way around.
     * @returns {number|null} Visual row/column index.
     */
    getNearestNotHiddenIndex(e, t, i) {
      return t < 0 ? t : e.getNearestNotHiddenIndex(t, i);
    }
    /**
     * Override internally stored visual indexes added by the Selection's `add` function. It should be executed
     * at the end of process of adding visual selection coordinates.
     *
     * @returns {VisualSelection}
     */
    commit() {
      if (this.visualCellRange === null)
        return this;
      const e = this.trimToVisibleCellsRangeOnly(this.visualCellRange);
      return e === null ? this.cellRange = null : this.cellRange = this.createRenderableCellRange(e.from, e.to), this;
    }
    /**
     * Some selection may be a part of broader cell range. This function sync coordinates of current selection
     * and the broader cell range when needed (current selection can't be presented visually).
     *
     * @param {CellRange} broaderCellRange Visual range. Actual cell range may be contained in the broader cell range.
     * When there is no way to represent some cell range visually we try to find range containing just the first visible cell.
     *
     * Warn: Please keep in mind that this function may change coordinates of the handled broader range.
     *
     * @returns {VisualSelection}
     */
    syncWith(e) {
      const t = e.from.clone().normalize(), i = e.getVerticalDirection() === "N-S" ? 1 : -1, r = e.getHorizontalDirection() === "W-E" ? 1 : -1, s = this.settings.visualToRenderableCoords(this.visualCellRange.highlight);
      let o = null;
      if ((s === null || s.col === null || s.row === null) && (o = this.getNearestNotHiddenCoords(t, i, r)), o !== null && e.overlaps(o)) {
        const a = e.highlight.clone();
        if (a.row >= 0 && (a.row = o.row), a.col >= 0 && (a.col = o.col), this.cellRange === null) {
          const l = this.settings.visualToRenderableCoords(a);
          this.cellRange = this.settings.createCellRange(l);
        }
        e.setHighlight(a);
      }
      return this.settings.selectionType === "focus" && s !== null && o === null && e.setHighlight(this.visualCellRange.highlight), this;
    }
    /**
     * Returns the top left (TL) and bottom right (BR) selection coordinates (renderable indexes).
     * The method overwrites the original method to support header selection for hidden cells.
     * To make the header selection working, the CellCoords and CellRange have to support not
     * complete coordinates (`null` values for example, `row: null`, `col: 2`).
     *
     * @returns {Array} Returns array of coordinates for example `[1, 1, 5, 5]`.
     */
    getCorners() {
      const {
        from: e,
        to: t
      } = this.cellRange;
      return [Math.min(e.row, t.row), Math.min(e.col, t.col), Math.max(e.row, t.row), Math.max(e.col, t.col)];
    }
    /**
     * Returns the top left (or top right in RTL) and bottom right (or bottom left in RTL) selection
     * coordinates (visual indexes).
     *
     * @returns {Array} Returns array of coordinates for example `[1, 1, 5, 5]`.
     */
    getVisualCorners() {
      const e = this.settings.renderableToVisualCoords(this.cellRange.getTopStartCorner()), t = this.settings.renderableToVisualCoords(this.cellRange.getBottomEndCorner());
      return [e.row, e.col, t.row, t.col];
    }
    /**
     * Creates a new CellRange object based on visual coordinates which before object creation are
     * translated to renderable indexes.
     *
     * @param {CellCoords} visualFromCoords The CellCoords object which contains coordinates that
     *                                      points to the beginning of the selection.
     * @param {CellCoords} visualToCoords The CellCoords object which contains coordinates that
     *                                    points to the end of the selection.
     * @returns {CellRange|null}
     */
    createRenderableCellRange(e, t) {
      const i = this.settings.visualToRenderableCoords(e), r = this.settings.visualToRenderableCoords(t);
      return i.row === null || i.col === null || r.row === null || r.col === null ? null : this.settings.createCellRange(i, i, r);
    }
  }
  function CT(n) {
    let {
      activeHeaderClassName: e,
      ...t
    } = n;
    return new Vc({
      className: e,
      ...t,
      selectionType: G9
    });
  }
  function ZEe(n) {
    let {
      areaCornerVisible: e,
      ...t
    } = n;
    return new Vc({
      className: "area",
      createLayers: !0,
      border: {
        width: 1,
        color: "#4b89ff",
        cornerVisible: e
      },
      ...t,
      selectionType: WD
    });
  }
  function QEe(n) {
    let {
      ...e
    } = n;
    return new Vc({
      className: "highlight",
      ...e,
      selectionType: WD
    });
  }
  function JEe(n) {
    let {
      columnClassName: e,
      ...t
    } = n;
    return new Vc({
      className: e,
      ...t,
      selectionType: _1e
    });
  }
  function exe(n) {
    let {
      cellCornerVisible: e,
      ...t
    } = n;
    return new Vc({
      className: "current",
      headerAttributes: [uD()],
      border: {
        width: 2,
        color: "#4b89ff",
        cornerVisible: e
      },
      ...t,
      selectionType: jD
    });
  }
  function txe(n) {
    let {
      border: e,
      visualCellRange: t,
      ...i
    } = n;
    return new Vc({
      ...e,
      ...i,
      selectionType: R1e
    }, t);
  }
  function nxe(n) {
    let {
      ...e
    } = n;
    return new Vc({
      className: "fill",
      border: {
        width: 1,
        color: "#ff0000"
      },
      ...e,
      selectionType: C1e
    });
  }
  function WV(n) {
    let {
      headerClassName: e,
      ...t
    } = n;
    return new Vc({
      className: e,
      ...t,
      selectionType: VD
    });
  }
  function ixe(n) {
    let {
      rowClassName: e,
      ...t
    } = n;
    return new Vc({
      className: e,
      ...t,
      selectionType: S1e
    });
  }
  function rxe(n, e) {
    sxe(n, e), e.add(n);
  }
  function sxe(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function Fr(n, e, t) {
    return (e = oxe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function oxe(n) {
    var e = axe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function axe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function Ol(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var ma = /* @__PURE__ */ new WeakSet();
  class lxe {
    constructor(e) {
      rxe(this, ma), Fr(this, "options", void 0), Fr(this, "layerLevel", 0), Fr(this, "focus", void 0), Fr(this, "fill", void 0), Fr(this, "layeredAreas", /* @__PURE__ */ new Map()), Fr(this, "areas", /* @__PURE__ */ new Map()), Fr(this, "rowHeaders", /* @__PURE__ */ new Map()), Fr(this, "columnHeaders", /* @__PURE__ */ new Map()), Fr(this, "activeRowHeaders", /* @__PURE__ */ new Map()), Fr(this, "activeColumnHeaders", /* @__PURE__ */ new Map()), Fr(this, "activeCornerHeaders", /* @__PURE__ */ new Map()), Fr(this, "rowHighlights", /* @__PURE__ */ new Map()), Fr(this, "columnHighlights", /* @__PURE__ */ new Map()), Fr(this, "customSelections", []), this.options = e, this.focus = exe(e), this.fill = nxe(e);
    }
    /**
     * Check if highlight cell rendering is disabled for specified highlight type.
     *
     * @param {string} highlightType Highlight type. Possible values are: `cell`, `area`, `fill` or `header`.
     * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.
     * @returns {boolean}
     */
    isEnabledFor(e, t) {
      let i = e;
      e === jD && (i = "current");
      let r = this.options.disabledCellSelection(t.row, t.col);
      return typeof r == "string" && (r = [r]), r === !1 || Array.isArray(r) && !r.includes(i);
    }
    /**
     * Set a new layer level to make access to the desire `area` and `header` highlights.
     *
     * @param {number} [level=0] Layer level to use.
     * @returns {Highlight}
     */
    useLayerLevel() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
      return this.layerLevel = e, this;
    }
    /**
     * Get Walkontable Selection instance created for controlling highlight of the currently
     * focused cell (or header).
     *
     * @returns {Selection}
     */
    getFocus() {
      return this.focus;
    }
    /**
     * Get Walkontable Selection instance created for controlling highlight of the autofill functionality.
     *
     * @returns {Selection}
     */
    getFill() {
      return this.fill;
    }
    /**
     * Creates (if not exist in the cache) Walkontable Selection instance created for controlling
     * `area` highlights.
     *
     * @returns {Selection}
     */
    createLayeredArea() {
      return Ol(ma, this, kl).call(this, this.layeredAreas, ZEe);
    }
    /**
     * Get all Walkontable Selection instances which describes the state of the visual highlight of the cells.
     *
     * @returns {Selection[]}
     */
    getLayeredAreas() {
      return [...this.layeredAreas.values()];
    }
    /**
     * Creates (if not exist in the cache) Walkontable Selection instance created for controlling
     * `highlight` highlights.
     *
     * @returns {Selection}
     */
    createArea() {
      return Ol(ma, this, kl).call(this, this.areas, QEe);
    }
    /**
     * Get all Walkontable Selection instances which describes the state of the visual highlight of the cells.
     *
     * @returns {Selection[]}
     */
    getAreas() {
      return [...this.areas.values()];
    }
    /**
     * Creates (if not exist in the cache) Walkontable Selection instance created for controlling
     * header highlight for rows.
     *
     * @returns {Selection}
     */
    createRowHeader() {
      return Ol(ma, this, kl).call(this, this.rowHeaders, WV);
    }
    /**
     * Get all Walkontable Selection instances which describes the state of the visual highlight of the headers.
     *
     * @returns {Selection[]}
     */
    getRowHeaders() {
      return [...this.rowHeaders.values()];
    }
    /**
     * Creates (if not exist in the cache) Walkontable Selection instance created for controlling
     * header highlight for columns.
     *
     * @returns {Selection}
     */
    createColumnHeader() {
      return Ol(ma, this, kl).call(this, this.columnHeaders, WV);
    }
    /**
     * Get all Walkontable Selection instances which describes the state of the visual highlight of the headers.
     *
     * @returns {Selection[]}
     */
    getColumnHeaders() {
      return [...this.columnHeaders.values()];
    }
    /**
     * Creates (if not exist in the cache) Walkontable Selection instance created for controlling
     * highlight for active row headers.
     *
     * @returns {Selection}
     */
    createActiveRowHeader() {
      return Ol(ma, this, kl).call(this, this.activeRowHeaders, CT);
    }
    /**
     * Get all Walkontable Selection instances which describes the state of the visual highlight of the active headers.
     *
     * @returns {Selection[]}
     */
    getActiveRowHeaders() {
      return [...this.activeRowHeaders.values()];
    }
    /**
     * Creates (if not exist in the cache) Walkontable Selection instance created for controlling
     * highlight for active column headers.
     *
     * @returns {Selection}
     */
    createActiveColumnHeader() {
      return Ol(ma, this, kl).call(this, this.activeColumnHeaders, CT);
    }
    /**
     * Get all Walkontable Selection instances which describes the state of the visual highlight of the active headers.
     *
     * @returns {Selection[]}
     */
    getActiveColumnHeaders() {
      return [...this.activeColumnHeaders.values()];
    }
    /**
     * Creates (if not exist in the cache) Walkontable Selection instance created for controlling
     * highlight for the headers corner.
     *
     * @returns {Selection}
     */
    createActiveCornerHeader() {
      return Ol(ma, this, kl).call(this, this.activeCornerHeaders, CT);
    }
    /**
     * Get all Walkontable Selection instances which describes the state of the visual highlight of the headers corner.
     *
     * @returns {Selection[]}
     */
    getActiveCornerHeaders() {
      return [...this.activeCornerHeaders.values()];
    }
    /**
     * Creates (if not exist in the cache) Walkontable Selection instance created for controlling
     * highlight cells in a row.
     *
     * @returns {Selection}
     */
    createRowHighlight() {
      return Ol(ma, this, kl).call(this, this.rowHighlights, ixe);
    }
    /**
     * Get all Walkontable Selection instances which describes the state of the rows highlighting.
     *
     * @returns {Selection[]}
     */
    getRowHighlights() {
      return [...this.rowHighlights.values()];
    }
    /**
     * Creates (if not exist in the cache) Walkontable Selection instance created for controlling
     * highlight cells in a column.
     *
     * @returns {Selection}
     */
    createColumnHighlight() {
      return Ol(ma, this, kl).call(this, this.columnHighlights, JEe);
    }
    /**
     * Get all Walkontable Selection instances which describes the state of the columns highlighting.
     *
     * @returns {Selection[]}
     */
    getColumnHighlights() {
      return [...this.columnHighlights.values()];
    }
    /**
     * Get Walkontable Selection instance created for controlling highlight of the custom selection functionality.
     *
     * @returns {Selection}
     */
    getCustomSelections() {
      return [...this.customSelections.values()];
    }
    /**
     * Add selection to the custom selection instance. The new selection are added to the end of the selection collection.
     *
     * @param {object} selectionInstance The selection instance.
     */
    addCustomSelection(e) {
      this.customSelections.push(txe({
        ...this.options,
        ...e
      }));
    }
    /**
     * Perform cleaning visual highlights for the whole table.
     */
    clear() {
      this.focus.clear(), this.fill.clear(), z(this.areas.values(), (e) => void e.clear()), z(this.layeredAreas.values(), (e) => void e.clear()), z(this.rowHeaders.values(), (e) => void e.clear()), z(this.columnHeaders.values(), (e) => void e.clear()), z(this.activeRowHeaders.values(), (e) => void e.clear()), z(this.activeColumnHeaders.values(), (e) => void e.clear()), z(this.activeCornerHeaders.values(), (e) => void e.clear()), z(this.rowHighlights.values(), (e) => void e.clear()), z(this.columnHighlights.values(), (e) => void e.clear());
    }
    /**
     * This object can be iterate over using `for of` syntax or using internal `arrayEach` helper.
     *
     * @returns {Selection[]}
     */
    [Symbol.iterator]() {
      return [this.focus, this.fill, ...this.areas.values(), ...this.layeredAreas.values(), ...this.rowHeaders.values(), ...this.columnHeaders.values(), ...this.activeRowHeaders.values(), ...this.activeColumnHeaders.values(), ...this.activeCornerHeaders.values(), ...this.rowHighlights.values(), ...this.columnHighlights.values(), ...this.customSelections][Symbol.iterator]();
    }
  }
  function kl(n, e) {
    const t = this.layerLevel;
    if (n.has(t))
      return n.get(t);
    const i = e({
      layerLevel: t,
      ...this.options
    });
    return n.set(t, i), i;
  }
  function jV(n, e, t) {
    return (e = cxe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function cxe(n) {
    var e = uxe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function uxe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class hxe {
    constructor(e) {
      jV(this, "ranges", []), jV(this, "createCellRange", void 0), this.createCellRange = e;
    }
    /**
     * Check if selected range is empty.
     *
     * @returns {boolean}
     */
    isEmpty() {
      return this.size() === 0;
    }
    /**
     * Set coordinates to the class instance. It clears all previously added coordinates and push `coords`
     * to the collection.
     *
     * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.
     * @returns {SelectionRange}
     */
    set(e) {
      return this.clear(), this.ranges.push(this.createCellRange(e)), this;
    }
    /**
     * Add coordinates to the class instance. The new coordinates are added to the end of the range collection.
     *
     * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.
     * @returns {SelectionRange}
     */
    add(e) {
      return this.ranges.push(this.createCellRange(e)), this;
    }
    /**
     * Removes from the stack the last added coordinates.
     *
     * @returns {SelectionRange}
     */
    pop() {
      return this.ranges.pop(), this;
    }
    /**
     * Get last added coordinates from ranges, it returns a CellRange instance.
     *
     * @returns {CellRange|undefined}
     */
    current() {
      return this.peekByIndex(this.size() - 1);
    }
    /**
     * Get previously added coordinates from ranges, it returns a CellRange instance.
     *
     * @returns {CellRange|undefined}
     */
    previous() {
      return this.peekByIndex(this.size() - 2);
    }
    /**
     * Returns `true` if coords is within selection coords. This method iterates through all selection layers to check if
     * the coords object is within selection range.
     *
     * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.
     * @returns {boolean}
     */
    includes(e) {
      return this.ranges.some((t) => t.includes(e));
    }
    /**
     * Clear collection.
     *
     * @returns {SelectionRange}
     */
    clear() {
      return this.ranges.length = 0, this;
    }
    /**
     * Get count of added all coordinates added to the selection.
     *
     * @returns {number}
     */
    size() {
      return this.ranges.length;
    }
    /**
     * Peek the coordinates based on the index where that coordinate resides in the collection.
     *
     * @param {number} [index=0] An index where the coordinate will be retrieved from. The index '0' gets the
     * latest range.
     * @returns {CellRange|undefined}
     */
    peekByIndex() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, t;
      return e >= 0 && e < this.size() && (t = this.ranges[e]), t;
    }
    [Symbol.iterator]() {
      return this.ranges[Symbol.iterator]();
    }
  }
  function dxe(n, e) {
    pG(n, e), e.add(n);
  }
  function ST(n, e, t) {
    pG(n, e), e.set(n, t);
  }
  function pG(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function At(n, e) {
    return n.get(ui(n, e));
  }
  function D0(n, e, t) {
    return n.set(ui(n, e), t), t;
  }
  function ui(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var N0 = /* @__PURE__ */ new WeakMap(), mn = /* @__PURE__ */ new WeakMap(), Qo = /* @__PURE__ */ new WeakMap(), yi = /* @__PURE__ */ new WeakSet();
  class QP {
    constructor(e, t) {
      dxe(this, yi), ST(this, N0, void 0), ST(this, mn, void 0), ST(this, Qo, {
        x: 0,
        y: 0
      }), D0(N0, this, e), D0(mn, this, t);
    }
    /**
     * Selects cell relative to the current cell (if possible).
     *
     * @param {number} rowDelta Rows number to move, value can be passed as negative number.
     * @param {number} colDelta Columns number to move, value can be passed as negative number.
     * @param {boolean} [createMissingRecords=false] If `true` the new rows/columns will be created if necessary. Otherwise, row/column will
     *                        be created according to `minSpareRows/minSpareCols` settings of Handsontable.
     * @returns {CellCoords} Visual coordinates after transformation.
     */
    transformStart(e, t) {
      let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
      const r = At(mn, this).createCellCoords(e, t);
      let s = At(N0, this).current().highlight;
      const o = At(mn, this).visualToRenderableCoords(s);
      let a = 0, l = 0;
      if (this.runLocalHooks("beforeTransformStart", r), o.row !== null && o.col !== null) {
        const {
          width: c,
          height: u
        } = ui(yi, this, mG).call(this), {
          row: h,
          col: d
        } = ui(yi, this, UV).call(this, s), f = At(mn, this).fixedRowsBottom(), g = At(mn, this).minSpareRows(), p = At(mn, this).minSpareCols(), m = At(mn, this).autoWrapRow(), v = At(mn, this).autoWrapCol(), y = At(mn, this).createCellCoords(h + r.row, d + r.col);
        if (y.row >= u) {
          const E = eo(i && g > 0 && f === 0), C = y.col + 1, T = At(mn, this).createCellCoords(y.row - u, C >= c ? C - c : C);
          this.runLocalHooks("beforeColumnWrap", E, ui(yi, this, Xf).call(this, T), C >= c), E.value ? this.runLocalHooks("insertRowRequire", At(mn, this).countRenderableRows()) : v && y.assign(T);
        } else if (y.row < 0) {
          const E = eo(v), C = y.col - 1, T = At(mn, this).createCellCoords(u + y.row, C < 0 ? c + C : C);
          this.runLocalHooks("beforeColumnWrap", E, ui(yi, this, Xf).call(this, T), C < 0), v && y.assign(T);
        }
        if (y.col >= c) {
          const E = eo(i && p > 0), C = y.row + 1, T = At(mn, this).createCellCoords(C >= u ? C - u : C, y.col - c);
          this.runLocalHooks("beforeRowWrap", E, ui(yi, this, Xf).call(this, T), C >= u), E.value ? this.runLocalHooks("insertColRequire", At(mn, this).countRenderableColumns()) : m && y.assign(T);
        } else if (y.col < 0) {
          const E = eo(m), C = y.row - 1, T = At(mn, this).createCellCoords(C < 0 ? u + C : C, c + y.col);
          this.runLocalHooks("beforeRowWrap", E, ui(yi, this, Xf).call(this, T), C < 0), m && y.assign(T);
        }
        const {
          rowDir: w,
          colDir: R
        } = ui(yi, this, zV).call(this, y);
        a = w, l = R, s = ui(yi, this, Xf).call(this, y);
      }
      return this.runLocalHooks("afterTransformStart", s, a, l), s;
    }
    /**
     * Sets selection end cell relative to the current selection end cell (if possible).
     *
     * @param {number} rowDelta Rows number to move, value can be passed as negative number.
     * @param {number} colDelta Columns number to move, value can be passed as negative number.
     * @returns {CellCoords} Visual coordinates after transformation.
     */
    transformEnd(e, t) {
      const i = At(mn, this).createCellCoords(e, t), r = At(N0, this).current(), s = At(mn, this).visualToRenderableCoords(r.highlight), o = ui(yi, this, _T).call(this, r.to.row, r.from.row), a = ui(yi, this, RT).call(this, r.to.col, r.from.col), l = r.to.clone();
      let c = 0, u = 0;
      if (this.runLocalHooks("beforeTransformEnd", i), s.row !== null && s.col !== null && o !== null && a !== null) {
        const {
          row: h,
          col: d
        } = ui(yi, this, UV).call(this, r.highlight), f = At(mn, this).createCellCoords(o + i.row, a + i.col), g = r.getTopStartCorner(), p = r.getTopEndCorner(), m = r.getBottomEndCorner();
        if (i.col < 0 && a >= d && f.col < d) {
          const R = f.col - d;
          f.col = ui(yi, this, RT).call(this, g.col, p.col) + R;
        } else if (i.col > 0 && a <= d && f.col > d) {
          const R = ui(yi, this, RT).call(this, p.col, g.col), E = Math.max(f.col - R, 1);
          f.col = R + E;
        }
        if (i.row < 0 && o >= h && f.row < h) {
          const R = f.row - h;
          f.row = ui(yi, this, _T).call(this, g.row, m.row) + R;
        } else if (i.row > 0 && o <= h && f.row > h) {
          const R = ui(yi, this, _T).call(this, m.row, g.row), E = Math.max(f.row - R, 1);
          f.row = R + E;
        }
        const {
          rowDir: v,
          colDir: y
        } = ui(yi, this, zV).call(this, f);
        c = v, u = y;
        const w = ui(yi, this, Xf).call(this, f);
        i.row === 0 && i.col !== 0 ? l.col = w.col : i.row !== 0 && i.col === 0 ? l.row = w.row : (l.row = w.row, l.col = w.col);
      }
      return this.runLocalHooks("afterTransformEnd", l, c, u), l;
    }
    /**
     * Sets the additional offset in table size that may occur when the `navigableHeaders` option
     * is enabled.
     *
     * @param {{x: number, y: number}} offset Offset as x and y properties.
     */
    setOffsetSize(e) {
      let {
        x: t,
        y: i
      } = e;
      D0(Qo, this, {
        x: t,
        y: i
      });
    }
    /**
     * Resets the offset size to the default values.
     */
    resetOffsetSize() {
      D0(Qo, this, {
        x: 0,
        y: 0
      });
    }
  }
  function zV(n) {
    const {
      width: e,
      height: t
    } = ui(yi, this, mG).call(this);
    let i = 0, r = 0;
    return n.row < 0 ? (i = -1, n.row = 0) : n.row > 0 && n.row >= t && (i = 1, n.row = t - 1), n.col < 0 ? (r = -1, n.col = 0) : n.col > 0 && n.col >= e && (r = 1, n.col = e - 1), {
      rowDir: i,
      colDir: r
    };
  }
  function mG() {
    return {
      width: At(Qo, this).x + At(mn, this).countRenderableColumns(),
      height: At(Qo, this).y + At(mn, this).countRenderableRows()
    };
  }
  function _T(n, e) {
    const t = At(mn, this).findFirstNonHiddenRenderableRow(n, e);
    return t === null ? null : At(Qo, this).y + t;
  }
  function RT(n, e) {
    const t = At(mn, this).findFirstNonHiddenRenderableColumn(n, e);
    return t === null ? null : At(Qo, this).x + t;
  }
  function UV(n) {
    const {
      row: e,
      col: t
    } = At(mn, this).visualToRenderableCoords(n);
    if (e === null || t === null)
      throw new Error("Renderable coords are not visible.");
    return At(mn, this).createCellCoords(At(Qo, this).y + e, At(Qo, this).x + t);
  }
  function Xf(n) {
    const e = n.clone();
    return e.col = n.col - At(Qo, this).x, e.row = n.row - At(Qo, this).y, At(mn, this).renderableToVisualCoords(e);
  }
  qt(QP, Ki);
  const q1 = 0, X1 = 1, bG = 2, CL = 3, fxe = [CL, bG], gxe = [["number"], ["number", "string"], ["number", "undefined"], ["number", "string", "undefined"]], ET = Symbol("root"), GV = Symbol("child");
  function _p(n) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ET;
    if (e !== ET && e !== GV)
      throw new Error("The second argument is used internally only and cannot be overwritten.");
    const t = Array.isArray(n), i = e === ET;
    let r = q1;
    if (t) {
      const s = n[0];
      n.length === 0 ? r = X1 : i && s instanceof dy ? r = CL : i && Array.isArray(s) ? r = _p(s, GV) : n.length >= 2 && n.length <= 4 && !n.some((a, l) => !gxe[l].includes(typeof a)) && (r = bG);
    }
    return r;
  }
  function bw(n) {
    let {
      createCellCoords: e,
      createCellRange: t,
      keepDirection: i = !1,
      propToCol: r
    } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (!fxe.includes(n))
      throw new Error("Unsupported selection ranges schema type was provided.");
    return function(s) {
      const o = n === CL;
      let a = o ? s.from.row : s[0], l = o ? s.from.col : s[1], c = o ? s.to.row : s[2], u = o ? s.to.col : s[3];
      if (typeof r == "function" && (typeof l == "string" && (l = r(l)), typeof u == "string" && (u = r(u))), dn(c) && (c = a), dn(u) && (u = l), !i) {
        const f = a, g = l, p = c, m = u;
        a = Math.min(f, p), l = Math.min(g, m), c = Math.max(f, p), u = Math.max(g, m);
      }
      const h = e(a, l), d = e(c, u);
      return t(h, h, d);
    };
  }
  function pxe(n) {
    const e = _p(n.getSelected());
    if (e === q1 || e === X1)
      return [];
    const t = bw(e, {
      createCellCoords: n._createCellCoords.bind(n),
      createCellRange: n._createCellRange.bind(n)
    }), i = /* @__PURE__ */ new Set();
    z(n.getSelected(), (o) => {
      const {
        from: a,
        to: l
      } = t(o), c = Math.max(a.col, 0), u = l.col - c + 1;
      z(Array.from(new Array(u), (h, d) => c + d), (h) => {
        i.has(h) || i.add(h);
      });
    });
    const r = Array.from(i).sort((o, a) => o - a);
    return li(r, (o, a, l, c) => (l !== 0 && a === c[l - 1] + 1 ? o[o.length - 1][1] += 1 : o.push([a, 1]), o), []);
  }
  function mxe(n) {
    const e = _p(n.getSelected());
    if (e === q1 || e === X1)
      return [];
    const t = bw(e, {
      createCellCoords: n._createCellCoords.bind(n),
      createCellRange: n._createCellRange.bind(n)
    }), i = /* @__PURE__ */ new Set();
    z(n.getSelected(), (o) => {
      const {
        from: a,
        to: l
      } = t(o), c = Math.max(a.row, 0), u = l.row - c + 1;
      z(Array.from(new Array(u), (h, d) => c + d), (h) => {
        i.has(h) || i.add(h);
      });
    });
    const r = Array.from(i).sort((o, a) => o - a);
    return li(r, (o, a, l, c) => (l !== 0 && a === c[l - 1] + 1 ? o[o.length - 1][1] += 1 : o.push([a, 1]), o), []);
  }
  function Zf(n, e, t) {
    bxe(n, e), e.set(n, t);
  }
  function bxe(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function Mh(n, e, t) {
    return (e = vxe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function vxe(n) {
    var e = wxe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function wxe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function yn(n, e) {
    return n.get(vG(n, e));
  }
  function ba(n, e, t) {
    return n.set(vG(n, e), t), t;
  }
  function vG(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var Qi = /* @__PURE__ */ new WeakMap(), Ah = /* @__PURE__ */ new WeakMap(), L0 = /* @__PURE__ */ new WeakMap(), Gm = /* @__PURE__ */ new WeakMap(), H0 = /* @__PURE__ */ new WeakMap(), Ym = /* @__PURE__ */ new WeakMap();
  class wG {
    constructor(e, t) {
      var i = this;
      Mh(this, "settings", void 0), Mh(this, "tableProps", void 0), Mh(this, "inProgress", !1), Mh(this, "selectedRange", new hxe((r, s, o) => this.tableProps.createCellRange(r, s, o))), Mh(this, "highlight", void 0), Zf(this, Qi, void 0), Zf(this, Ah, void 0), Mh(this, "selectedByRowHeader", /* @__PURE__ */ new Set()), Mh(this, "selectedByColumnHeader", /* @__PURE__ */ new Set()), Zf(this, L0, !1), Zf(this, Gm, !1), Zf(this, H0, "unknown"), Zf(this, Ym, -1), this.settings = e, this.tableProps = t, this.highlight = new lxe({
        headerClassName: e.currentHeaderClassName,
        activeHeaderClassName: e.activeHeaderClassName,
        rowClassName: e.currentRowClassName,
        columnClassName: e.currentColClassName,
        cellAttributes: [uD()],
        rowIndexMapper: this.tableProps.rowIndexMapper,
        columnIndexMapper: this.tableProps.columnIndexMapper,
        disabledCellSelection: (r, s) => this.tableProps.isDisabledCellSelection(r, s),
        cellCornerVisible: function() {
          return i.isCellCornerVisible(...arguments);
        },
        areaCornerVisible: function() {
          return i.isAreaCornerVisible(...arguments);
        },
        visualToRenderableCoords: (r) => this.tableProps.visualToRenderableCoords(r),
        renderableToVisualCoords: (r) => this.tableProps.renderableToVisualCoords(r),
        createCellCoords: (r, s) => this.tableProps.createCellCoords(r, s),
        createCellRange: (r, s, o) => this.tableProps.createCellRange(r, s, o)
      }), ba(Qi, this, new QP(this.selectedRange, {
        rowIndexMapper: this.tableProps.rowIndexMapper,
        columnIndexMapper: this.tableProps.columnIndexMapper,
        countRenderableRows: () => this.tableProps.countRenderableRows(),
        countRenderableColumns: () => this.tableProps.countRenderableColumns(),
        visualToRenderableCoords: (r) => this.tableProps.visualToRenderableCoords(r),
        renderableToVisualCoords: (r) => this.tableProps.renderableToVisualCoords(r),
        findFirstNonHiddenRenderableRow: function() {
          return i.tableProps.findFirstNonHiddenRenderableRow(...arguments);
        },
        findFirstNonHiddenRenderableColumn: function() {
          return i.tableProps.findFirstNonHiddenRenderableColumn(...arguments);
        },
        createCellCoords: (r, s) => this.tableProps.createCellCoords(r, s),
        fixedRowsBottom: () => e.fixedRowsBottom,
        minSpareRows: () => e.minSpareRows,
        minSpareCols: () => e.minSpareCols,
        autoWrapRow: () => e.autoWrapRow,
        autoWrapCol: () => e.autoWrapCol
      })), ba(Ah, this, new QP(this.selectedRange, {
        rowIndexMapper: this.tableProps.rowIndexMapper,
        columnIndexMapper: this.tableProps.columnIndexMapper,
        countRenderableRows: () => {
          const r = this.selectedRange.current();
          return this.tableProps.countRenderableRowsInRange(0, r.getOuterBottomEndCorner().row);
        },
        countRenderableColumns: () => {
          const r = this.selectedRange.current();
          return this.tableProps.countRenderableColumnsInRange(0, r.getOuterBottomEndCorner().col);
        },
        visualToRenderableCoords: (r) => this.tableProps.visualToRenderableCoords(r),
        renderableToVisualCoords: (r) => this.tableProps.renderableToVisualCoords(r),
        findFirstNonHiddenRenderableRow: function() {
          return i.tableProps.findFirstNonHiddenRenderableRow(...arguments);
        },
        findFirstNonHiddenRenderableColumn: function() {
          return i.tableProps.findFirstNonHiddenRenderableColumn(...arguments);
        },
        createCellCoords: (r, s) => this.tableProps.createCellCoords(r, s),
        fixedRowsBottom: () => 0,
        minSpareRows: () => 0,
        minSpareCols: () => 0,
        autoWrapRow: () => !0,
        autoWrapCol: () => !0
      })), yn(Qi, this).addLocalHook("beforeTransformStart", function() {
        for (var r = arguments.length, s = new Array(r), o = 0; o < r; o++)
          s[o] = arguments[o];
        return i.runLocalHooks("beforeModifyTransformStart", ...s);
      }), yn(Qi, this).addLocalHook("afterTransformStart", function() {
        for (var r = arguments.length, s = new Array(r), o = 0; o < r; o++)
          s[o] = arguments[o];
        return i.runLocalHooks("afterModifyTransformStart", ...s);
      }), yn(Qi, this).addLocalHook("beforeTransformEnd", function() {
        for (var r = arguments.length, s = new Array(r), o = 0; o < r; o++)
          s[o] = arguments[o];
        return i.runLocalHooks("beforeModifyTransformEnd", ...s);
      }), yn(Qi, this).addLocalHook("afterTransformEnd", function() {
        for (var r = arguments.length, s = new Array(r), o = 0; o < r; o++)
          s[o] = arguments[o];
        return i.runLocalHooks("afterModifyTransformEnd", ...s);
      }), yn(Qi, this).addLocalHook("insertRowRequire", function() {
        for (var r = arguments.length, s = new Array(r), o = 0; o < r; o++)
          s[o] = arguments[o];
        return i.runLocalHooks("insertRowRequire", ...s);
      }), yn(Qi, this).addLocalHook("insertColRequire", function() {
        for (var r = arguments.length, s = new Array(r), o = 0; o < r; o++)
          s[o] = arguments[o];
        return i.runLocalHooks("insertColRequire", ...s);
      }), yn(Qi, this).addLocalHook("beforeRowWrap", function() {
        for (var r = arguments.length, s = new Array(r), o = 0; o < r; o++)
          s[o] = arguments[o];
        return i.runLocalHooks("beforeRowWrap", ...s);
      }), yn(Qi, this).addLocalHook("beforeColumnWrap", function() {
        for (var r = arguments.length, s = new Array(r), o = 0; o < r; o++)
          s[o] = arguments[o];
        return i.runLocalHooks("beforeColumnWrap", ...s);
      }), yn(Ah, this).addLocalHook("beforeTransformStart", function() {
        for (var r = arguments.length, s = new Array(r), o = 0; o < r; o++)
          s[o] = arguments[o];
        return i.runLocalHooks("beforeModifyTransformFocus", ...s);
      }), yn(Ah, this).addLocalHook("afterTransformStart", function() {
        for (var r = arguments.length, s = new Array(r), o = 0; o < r; o++)
          s[o] = arguments[o];
        return i.runLocalHooks("afterModifyTransformFocus", ...s);
      });
    }
    /**
     * Get data layer for current selection.
     *
     * @returns {SelectionRange}
     */
    getSelectedRange() {
      return this.selectedRange;
    }
    /**
     * Marks the source of the selection. It can be one of the following values: `mouse`, or any other string.
     *
     * @param {'mouse' | 'unknown' | string} sourceName The source name.
     */
    markSource(e) {
      ba(H0, this, e);
    }
    /**
     * Marks end of the selection source. It restores the selection source to default value which is 'unknown'.
     */
    markEndSource() {
      ba(H0, this, "unknown");
    }
    /**
     * Returns the source of the selection.
     *
     * @returns {'mouse' | 'unknown' | string}
     */
    getSelectionSource() {
      return yn(H0, this);
    }
    /**
     * Set the number of expected layers. The method is not obligatory to call. It is used mostly internally
     * to determine when the last selection layer of non-contiguous is applied, thus the viewport scroll is triggered.
     *
     * @param {number} layersCount The number of expected layers.
     */
    setExpectedLayers(e) {
      ba(Ym, this, e);
    }
    /**
     * Indicate that selection process began. It sets internally `.inProgress` property to `true`.
     */
    begin() {
      this.inProgress = !0;
    }
    /**
     * Indicate that selection process finished. It sets internally `.inProgress` property to `false`.
     */
    finish() {
      this.runLocalHooks("afterSelectionFinished", Array.from(this.selectedRange)), this.inProgress = !1, ba(Ym, this, -1);
    }
    /**
     * Check if the process of selecting the cell/cells is in progress.
     *
     * @returns {boolean}
     */
    isInProgress() {
      return this.inProgress;
    }
    /**
     * Starts selection range on given coordinate object.
     *
     * @param {CellCoords} coords Visual coords.
     * @param {boolean} [multipleSelection] If `true`, selection will be worked in 'multiple' mode. This option works
     *                                      only when 'selectionMode' is set as 'multiple'. If the argument is not defined
     *                                      the default trigger will be used.
     * @param {boolean} [fragment=false] If `true`, the selection will be treated as a partial selection where the
     *                                   `setRangeEnd` method won't be called on every `setRangeStart` call.
     * @param {CellCoords} [highlightCoords] If set, allows changing the coordinates of the highlight/focus cell.
     */
    setRangeStart(e, t) {
      let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : e;
      const s = this.settings.selectionMode === "multiple", o = dn(t) ? this.tableProps.getShortcutManager().isCtrlPressed() : t, a = e.clone();
      ba(L0, this, !1), this.runLocalHooks(`beforeSetRangeStart${i ? "Only" : ""}`, a), (!s || s && !o && dn(t)) && this.selectedRange.clear(), this.selectedRange.add(a).current().setHighlight(r.clone()), this.getLayerLevel() === 0 && (this.selectedByRowHeader.clear(), this.selectedByColumnHeader.clear()), i || this.setRangeEnd(e);
    }
    /**
     * Starts selection range on given coordinate object.
     *
     * @param {CellCoords} coords Visual coords.
     * @param {boolean} [multipleSelection] If `true`, selection will be worked in 'multiple' mode. This option works
     *                                      only when 'selectionMode' is set as 'multiple'. If the argument is not defined
     *                                      the default trigger will be used.
     * @param {CellCoords} [highlightCoords] If set, allows changing the coordinates of the highlight/focus cell.
     */
    setRangeStartOnly(e, t) {
      let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : e;
      this.setRangeStart(e, t, !0, i);
    }
    /**
     * Ends selection range on given coordinate object.
     *
     * @param {CellCoords} coords Visual coords.
     */
    setRangeEnd(e) {
      if (this.selectedRange.isEmpty())
        return;
      const t = e.clone(), i = this.tableProps.countRows(), r = this.tableProps.countCols(), s = this.selectedRange.current().clone().setTo(e).isSingleHeader();
      if ((i > 0 || r > 0) && (i === 0 && t.col < 0 && !s || r === 0 && t.row < 0 && !s))
        return;
      this.runLocalHooks("beforeSetRangeEnd", t), this.begin();
      const o = this.selectedRange.current();
      if (this.settings.navigableHeaders || o.highlight.normalize(), this.settings.selectionMode === "single")
        o.setFrom(o.highlight), o.setTo(o.highlight);
      else {
        const l = o.getHorizontalDirection(), c = o.getVerticalDirection(), u = this.isMultiple();
        o.setTo(t), u && (l !== o.getHorizontalDirection() || o.getWidth() === 1 && !o.includes(o.highlight)) && o.from.assign({
          col: o.highlight.col
        }), u && (c !== o.getVerticalDirection() || o.getHeight() === 1 && !o.includes(o.highlight)) && o.from.assign({
          row: o.highlight.row
        });
      }
      i > 0 && r > 0 && (!this.settings.navigableHeaders || this.settings.navigableHeaders && !o.isSingleHeader()) && o.to.normalize(), this.runLocalHooks("beforeHighlightSet"), this.setRangeFocus(this.selectedRange.current().highlight), this.applyAndCommit();
      const a = yn(Ym, this) === -1 || this.selectedRange.size() === yn(Ym, this);
      this.runLocalHooks("afterSetRangeEnd", e, a);
    }
    /**
     * Applies and commits the selection to all layers (using the Walkontable Selection API) based on the selection (CellRanges)
     * collected in the `selectedRange` module.
     *
     * @param {CellRange} [cellRange] The cell range to apply. If not provided, the current selection is used.
     * @param {number} [layerLevel] The layer level to apply. If not provided, the current layer level is used.
     */
    applyAndCommit() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.selectedRange.current(), t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.getLayerLevel();
      const i = this.tableProps.countRows(), r = this.tableProps.countCols();
      t < this.highlight.layerLevel && (z(this.highlight.getAreas(), (g) => void g.clear()), z(this.highlight.getLayeredAreas(), (g) => void g.clear()), z(this.highlight.getRowHeaders(), (g) => void g.clear()), z(this.highlight.getColumnHeaders(), (g) => void g.clear()), z(this.highlight.getActiveRowHeaders(), (g) => void g.clear()), z(this.highlight.getActiveColumnHeaders(), (g) => void g.clear()), z(this.highlight.getActiveCornerHeaders(), (g) => void g.clear()), z(this.highlight.getRowHighlights(), (g) => void g.clear()), z(this.highlight.getColumnHighlights(), (g) => void g.clear())), this.highlight.useLayerLevel(t);
      const s = this.highlight.createArea(), o = this.highlight.createLayeredArea(), a = this.highlight.createRowHeader(), l = this.highlight.createColumnHeader(), c = this.highlight.createActiveRowHeader(), u = this.highlight.createActiveColumnHeader(), h = this.highlight.createActiveCornerHeader(), d = this.highlight.createRowHighlight(), f = this.highlight.createColumnHighlight();
      if (s.clear(), o.clear(), a.clear(), l.clear(), c.clear(), u.clear(), h.clear(), d.clear(), f.clear(), this.highlight.isEnabledFor(WD, e.highlight) && (this.isMultiple() || t >= 1) && (s.add(e.from).add(e.to).commit(), o.add(e.from).add(e.to).commit(), t === 1)) {
        const g = this.selectedRange.previous();
        this.highlight.useLayerLevel(t - 1), this.highlight.createArea().add(g.from).commit().syncWith(g), this.highlight.createLayeredArea().add(g.from).commit().syncWith(g), this.highlight.useLayerLevel(t);
      }
      if (this.highlight.isEnabledFor(VD, e.highlight)) {
        if (!e.isSingleHeader()) {
          const m = this.tableProps.createCellCoords(Math.max(e.from.row, 0), -1), v = this.tableProps.createCellCoords(e.to.row, -1), y = this.tableProps.createCellCoords(-1, Math.max(e.from.col, 0)), w = this.tableProps.createCellCoords(-1, e.to.col);
          this.settings.selectionMode === "single" ? (a.add(m).commit(), l.add(y).commit(), d.add(m).commit(), f.add(y).commit()) : (a.add(m).add(v).commit(), l.add(y).add(w).commit(), d.add(m).add(v).commit(), f.add(y).add(w).commit());
        }
        const g = !yn(Gm, this) && this.isEntireRowSelected() && (r > 0 && r === e.getWidth() || r === 0 && this.isSelectedByRowHeader()), p = !yn(Gm, this) && this.isEntireColumnSelected() && (i > 0 && i === e.getHeight() || i === 0 && this.isSelectedByColumnHeader());
        g && c.add(this.tableProps.createCellCoords(Math.max(e.from.row, 0), Math.min(-this.tableProps.countRowHeaders(), -1))).add(this.tableProps.createCellCoords(Math.max(e.to.row, 0), -1)).commit(), p && u.add(this.tableProps.createCellCoords(Math.min(-this.tableProps.countColHeaders(), -1), Math.max(e.from.col, 0))).add(this.tableProps.createCellCoords(-1, Math.max(e.to.col, 0))).commit(), g && p && h.add(this.tableProps.createCellCoords(-this.tableProps.countColHeaders(), -this.tableProps.countRowHeaders())).add(this.tableProps.createCellCoords(-1, -1)).commit();
      }
    }
    /**
     * Sets the selection focus position at the specified coordinates.
     *
     * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.
     */
    setRangeFocus(e) {
      if (this.selectedRange.isEmpty())
        return;
      const t = this.selectedRange.current();
      this.inProgress || this.runLocalHooks("beforeSetFocus", e);
      const i = this.highlight.getFocus();
      i.clear(), t.setHighlight(e), this.inProgress || this.runLocalHooks("beforeHighlightSet"), this.highlight.isEnabledFor(jD, t.highlight) && i.add(t.highlight).commit().syncWith(t), this.inProgress || (ba(L0, this, !0), this.runLocalHooks("afterSetFocus", t.highlight));
    }
    /**
     * Selects cell relative to the current cell (if possible).
     *
     * @param {number} rowDelta Rows number to move, value can be passed as negative number.
     * @param {number} colDelta Columns number to move, value can be passed as negative number.
     * @param {boolean} [createMissingRecords=false] If `true` the new rows/columns will be created if necessary.
     * Otherwise, row/column will be created according to `minSpareRows/minSpareCols` settings of Handsontable.
     */
    transformStart(e, t) {
      let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
      this.settings.navigableHeaders ? yn(Qi, this).setOffsetSize({
        x: this.tableProps.countRowHeaders(),
        y: this.tableProps.countColHeaders()
      }) : yn(Qi, this).resetOffsetSize(), this.setRangeStart(yn(Qi, this).transformStart(e, t, i));
    }
    /**
     * Sets selection end cell relative to the current selection end cell (if possible).
     *
     * @param {number} rowDelta Rows number to move, value can be passed as negative number.
     * @param {number} colDelta Columns number to move, value can be passed as negative number.
     */
    transformEnd(e, t) {
      this.settings.navigableHeaders ? yn(Qi, this).setOffsetSize({
        x: this.tableProps.countRowHeaders(),
        y: this.tableProps.countColHeaders()
      }) : yn(Qi, this).resetOffsetSize(), this.setRangeEnd(yn(Qi, this).transformEnd(e, t));
    }
    /**
     * Transforms the focus cell selection relative to the current focus position.
     *
     * @param {number} rowDelta Rows number to move, value can be passed as negative number.
     * @param {number} colDelta Columns number to move, value can be passed as negative number.
     */
    transformFocus(e, t) {
      const i = this.selectedRange.current(), {
        row: r,
        col: s
      } = i.getOuterTopStartCorner(), o = this.tableProps.countRenderableColumnsInRange(0, s - 1), a = this.tableProps.countRenderableRowsInRange(0, r - 1);
      i.highlight.isHeader() ? yn(Ah, this).setOffsetSize({
        x: s < 0 ? Math.abs(s) : -o,
        y: r < 0 ? Math.abs(r) : -a
      }) : yn(Ah, this).setOffsetSize({
        x: s < 0 ? 0 : -o,
        y: r < 0 ? 0 : -a
      });
      const l = yn(Ah, this).transformStart(e, t);
      this.setRangeFocus(l.normalize());
    }
    /**
     * Transforms the last selection layer down or up by the index count.
     *
     * @param {number} visualRowIndex Visual row index from which the selection will be shifted.
     * @param {number} amount The number of rows to shift the selection.
     */
    shiftRows(e, t) {
      if (!this.isSelected())
        return;
      const i = this.selectedRange.current();
      if (this.isSelectedByCorner())
        this.selectAll(!0, !0, {
          disableHeadersHighlight: !0
        });
      else if (this.isSelectedByColumnHeader() || i.getOuterTopStartCorner().row >= e) {
        const {
          from: r,
          to: s,
          highlight: o
        } = i, a = this.tableProps.countRows(), l = this.isSelectedByRowHeader(), c = this.isSelectedByColumnHeader(), u = c ? -1 : 0, h = c ? 0 : t;
        this.getSelectedRange().pop();
        const d = this.tableProps.createCellCoords(Gt(r.row + h, u, a - 1), r.col), f = this.tableProps.createCellCoords(Gt(s.row + t, u, a - 1), s.col);
        this.markSource("shift"), o.row >= e ? this.setRangeStartOnly(d, !0, this.tableProps.createCellCoords(Gt(o.row + t, 0, a - 1), o.col)) : this.setRangeStartOnly(d, !0), l && this.selectedByRowHeader.add(this.getLayerLevel()), c && this.selectedByColumnHeader.add(this.getLayerLevel()), this.setRangeEnd(f), this.markEndSource();
      }
    }
    /**
     * Transforms the last selection layer left or right by the index count.
     *
     * @param {number} visualColumnIndex Visual column index from which the selection will be shifted.
     * @param {number} amount The number of columns to shift the selection.
     */
    shiftColumns(e, t) {
      if (!this.isSelected())
        return;
      const i = this.selectedRange.current();
      if (this.isSelectedByCorner())
        this.selectAll(!0, !0, {
          disableHeadersHighlight: !0
        });
      else if (this.isSelectedByRowHeader() || i.getOuterTopStartCorner().col >= e) {
        const {
          from: r,
          to: s,
          highlight: o
        } = i, a = this.tableProps.countCols(), l = this.isSelectedByRowHeader(), c = this.isSelectedByColumnHeader(), u = l ? -1 : 0, h = l ? 0 : t;
        this.getSelectedRange().pop();
        const d = this.tableProps.createCellCoords(r.row, Gt(r.col + h, u, a - 1)), f = this.tableProps.createCellCoords(s.row, Gt(s.col + t, u, a - 1));
        this.markSource("shift"), o.col >= e ? this.setRangeStartOnly(d, !0, this.tableProps.createCellCoords(o.row, Gt(o.col + t, 0, a - 1))) : this.setRangeStartOnly(d, !0), l && this.selectedByRowHeader.add(this.getLayerLevel()), c && this.selectedByColumnHeader.add(this.getLayerLevel()), this.setRangeEnd(f), this.markEndSource();
      }
    }
    /**
     * Returns currently used layer level.
     *
     * @returns {number} Returns layer level starting from 0. If no selection was added to the table -1 is returned.
     */
    getLayerLevel() {
      return this.selectedRange.size() - 1;
    }
    /**
     * Returns `true` if currently there is a selection on the screen, `false` otherwise.
     *
     * @returns {boolean}
     */
    isSelected() {
      return !this.selectedRange.isEmpty();
    }
    /**
     * Returns information if we have a multi-selection. This method check multi-selection only on the latest layer of
     * the selection.
     *
     * @returns {boolean}
     */
    isMultiple() {
      if (!this.isSelected())
        return !1;
      const e = eo(!this.selectedRange.current().isSingle());
      return this.runLocalHooks("afterIsMultipleSelection", e), e.value;
    }
    /**
     * Checks if the last selection involves changing the focus cell position only.
     *
     * @returns {boolean}
     */
    isFocusSelectionChanged() {
      return this.isSelected() && yn(L0, this);
    }
    /**
     * Returns `true` if the selection was applied by clicking to the row header. If the `layerLevel`
     * argument is passed then only that layer will be checked. Otherwise, it checks if any row header
     * was clicked on any selection layer level.
     *
     * @param {number} [layerLevel=this.getLayerLevel()] Selection layer level to check.
     * @returns {boolean}
     */
    isSelectedByRowHeader() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getLayerLevel();
      return !this.isSelectedByCorner(e) && (e === -1 ? this.selectedByRowHeader.size > 0 : this.selectedByRowHeader.has(e));
    }
    /**
     * Returns `true` if the selection consists of entire rows (including their headers). If the `layerLevel`
     * argument is passed then only that layer will be checked. Otherwise, it checks the selection for all layers.
     *
     * @param {number} [layerLevel=this.getLayerLevel()] Selection layer level to check.
     * @returns {boolean}
     */
    isEntireRowSelected() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getLayerLevel();
      const t = (r) => {
        const {
          col: s
        } = r.getOuterTopStartCorner(), o = this.tableProps.countRowHeaders(), a = this.tableProps.countCols();
        return (o > 0 && s < 0 || o === 0) && r.getWidth() === a;
      };
      if (e === -1)
        return Array.from(this.selectedRange).some((r) => t(r));
      const i = this.selectedRange.peekByIndex(e);
      return i ? t(i) : !1;
    }
    /**
     * Returns `true` if the selection was applied by clicking to the column header. If the `layerLevel`
     * argument is passed then only that layer will be checked. Otherwise, it checks if any column header
     * was clicked on any selection layer level.
     *
     * @param {number} [layerLevel=this.getLayerLevel()] Selection layer level to check.
     * @returns {boolean}
     */
    isSelectedByColumnHeader() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getLayerLevel();
      return !this.isSelectedByCorner() && (e === -1 ? this.selectedByColumnHeader.size > 0 : this.selectedByColumnHeader.has(e));
    }
    /**
     * Returns `true` if the selection consists of entire columns (including their headers). If the `layerLevel`
     * argument is passed then only that layer will be checked. Otherwise, it checks the selection for all layers.
     *
     * @param {number} [layerLevel=this.getLayerLevel()] Selection layer level to check.
     * @returns {boolean}
     */
    isEntireColumnSelected() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getLayerLevel();
      const t = (r) => {
        const {
          row: s
        } = r.getOuterTopStartCorner(), o = this.tableProps.countColHeaders(), a = this.tableProps.countRows();
        return (o > 0 && s < 0 || o === 0) && r.getHeight() === a;
      };
      if (e === -1)
        return Array.from(this.selectedRange).some((r) => t(r));
      const i = this.selectedRange.peekByIndex(e);
      return i ? t(i) : !1;
    }
    /**
     * Returns `true` if the selection was applied by clicking on the row or column header on any layer level.
     *
     * @returns {boolean}
     */
    isSelectedByAnyHeader() {
      return this.isSelectedByRowHeader(-1) || this.isSelectedByColumnHeader(-1) || this.isSelectedByCorner();
    }
    /**
     * Returns `true` if the selection was applied by clicking on the left-top corner overlay.
     *
     * @returns {boolean}
     */
    isSelectedByCorner() {
      return this.selectedByColumnHeader.has(this.getLayerLevel()) && this.selectedByRowHeader.has(this.getLayerLevel());
    }
    /**
     * Returns `true` if coords is within selection coords. This method iterates through all selection layers to check if
     * the coords object is within selection range.
     *
     * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.
     * @returns {boolean}
     */
    inInSelection(e) {
      return this.selectedRange.includes(e);
    }
    /**
     * Returns `true` if the cell corner should be visible.
     *
     * @private
     * @returns {boolean} `true` if the corner element has to be visible, `false` otherwise.
     */
    isCellCornerVisible() {
      return this.settings.fillHandle && !this.tableProps.isEditorOpened() && !this.isMultiple();
    }
    /**
     * Returns `true` if the cell coordinates are visible (renderable).
     *
     * @private
     * @param {CellCoords} coords The cell coordinates to check.
     * @returns {boolean}
     */
    isCellVisible(e) {
      const t = this.tableProps.visualToRenderableCoords(e);
      return t.row !== null && t.col !== null;
    }
    /**
     * Returns `true` if the area corner should be visible.
     *
     * @param {number} layerLevel The layer level.
     * @returns {boolean} `true` if the corner element has to be visible, `false` otherwise.
     */
    isAreaCornerVisible(e) {
      return Number.isInteger(e) && e !== this.getLayerLevel() ? !1 : this.settings.fillHandle && !this.tableProps.isEditorOpened() && this.isMultiple();
    }
    /**
     * Clear the selection by resetting the collected ranges and highlights.
     */
    clear() {
      this.selectedRange.clear(), this.highlight.clear();
    }
    /**
     * Deselects all selected cells.
     */
    deselect() {
      this.isSelected() && (this.inProgress = !1, this.clear(), this.runLocalHooks("afterDeselect"));
    }
    /**
     * Selects all cells and headers.
     *
     * @param {boolean} [includeRowHeaders=false] `true` If the selection should include the row headers,
     * `false` otherwise.
     * @param {boolean} [includeColumnHeaders=false] `true` If the selection should include the column
     * headers, `false` otherwise.
     * @param {object} [options] Additional object with options.
     * @param {{row: number, col: number} | boolean} [options.focusPosition] The argument allows changing the cell/header
     * focus position. The value takes an object with a `row` and `col` properties from -N to N, where
     * negative values point to the headers and positive values point to the cell range. If `false`, the focus
     * position won't be changed.
     * @param {boolean} [options.disableHeadersHighlight] If `true`, disables highlighting the headers even when
     * the logical coordinates points on them.
     */
    selectAll() {
      var e;
      let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
        focusPosition: !1,
        disableHeadersHighlight: !1
      };
      const s = this.tableProps.countRows(), o = this.tableProps.countCols(), a = this.tableProps.countRowHeaders(), l = this.tableProps.countColHeaders(), c = i ? -l : 0, u = t ? -a : 0;
      if (c === 0 && u === 0 && (s === 0 || o === 0))
        return;
      let h = (e = this.getSelectedRange().current()) === null || e === void 0 ? void 0 : e.highlight;
      const {
        focusPosition: d,
        disableHeadersHighlight: f
      } = r;
      ba(Gm, this, f), d && Number.isInteger(d == null ? void 0 : d.row) && Number.isInteger(d == null ? void 0 : d.col) && (h = this.tableProps.createCellCoords(Gt(d.row, c, s - 1), Gt(d.col, u, o - 1)));
      const g = this.tableProps.createCellCoords(c, u), p = this.tableProps.createCellCoords(s - 1, o - 1);
      this.clear(), this.setRangeStartOnly(g, void 0, h), u < 0 && this.selectedByRowHeader.add(this.getLayerLevel()), c < 0 && this.selectedByColumnHeader.add(this.getLayerLevel()), this.setRangeEnd(p), this.finish(), ba(Gm, this, !1);
    }
    /**
     * Make multiple, non-contiguous selection specified by `row` and `column` values or a range of cells
     * finishing at `endRow`, `endColumn`. The method supports two input formats, first as an array of arrays such
     * as `[[rowStart, columnStart, rowEnd, columnEnd]]` and second format as an array of CellRange objects.
     * If the passed ranges have another format the exception will be thrown.
     *
     * @param {Array[]|CellRange[]} selectionRanges The coordinates which define what the cells should be selected.
     * @returns {boolean} Returns `true` if selection was successful, `false` otherwise.
     */
    selectCells(e) {
      var t = this;
      const i = _p(e);
      if (i === X1)
        return !1;
      if (i === q1)
        throw new Error(Kt`Unsupported format of the selection ranges was passed. To select cells pass\x20
        the coordinates as an array of arrays ([[rowStart, columnStart/columnPropStart, rowEnd,\x20
        columnEnd/columnPropEnd]]) or as an array of CellRange objects.`);
      const r = bw(i, {
        createCellCoords: function() {
          return t.tableProps.createCellCoords(...arguments);
        },
        createCellRange: function() {
          return t.tableProps.createCellRange(...arguments);
        },
        propToCol: (l) => this.tableProps.propToCol(l),
        keepDirection: !0
      }), s = this.settings.navigableHeaders, o = {
        countRows: this.tableProps.countRows(),
        countCols: this.tableProps.countCols(),
        countRowHeaders: s ? this.tableProps.countRowHeaders() : 0,
        countColHeaders: s ? this.tableProps.countColHeaders() : 0
      }, a = !e.some((l) => {
        const c = r(l), u = c.isValid(o);
        return !(u && !c.containsHeaders() || u && c.containsHeaders() && c.isSingleHeader());
      });
      return a && (this.clear(), this.setExpectedLayers(e.length), z(e, (l) => {
        const {
          from: c,
          to: u
        } = r(l);
        this.setRangeStartOnly(c.clone(), !1), this.setRangeEnd(u.clone());
      }), this.finish()), a;
    }
    /**
     * Select column specified by `startColumn` visual index or column property or a range of columns finishing at
     * `endColumn`.
     *
     * @param {number|string} startColumn Visual column index or column property from which the selection starts.
     * @param {number|string} [endColumn] Visual column index or column property from to the selection finishes.
     * @param {number | { row: number, col: number }} [focusPosition=0] The argument allows changing the cell/header focus
     * position. The value can take visual row index from -N to N, where negative values point to the headers and positive
     * values point to the cell range. An object with `row` and `col` properties also can be passed to change the focus
     * position horizontally.
     * @returns {boolean} Returns `true` if selection was successful, `false` otherwise.
     */
    selectColumns(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : e, i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
      const r = typeof e == "string" ? this.tableProps.propToCol(e) : e, s = typeof t == "string" ? this.tableProps.propToCol(t) : t, o = this.tableProps.countRows(), a = this.tableProps.countCols(), l = this.tableProps.countColHeaders(), c = l === 0 ? 0 : -l, u = this.tableProps.createCellCoords(c, r), h = this.tableProps.createCellCoords(o - 1, s), d = this.tableProps.createCellRange(u, u, h).isValid({
        countRows: o,
        countCols: a,
        countRowHeaders: 0,
        countColHeaders: l
      });
      if (d) {
        let f = 0, g = 0;
        Number.isInteger(i == null ? void 0 : i.row) && Number.isInteger(i == null ? void 0 : i.col) ? (f = Gt(i.row, c, o - 1), g = Gt(i.col, Math.min(r, s), Math.max(r, s))) : (f = Gt(i, c, o - 1), g = r);
        const p = this.tableProps.createCellCoords(f, g), m = l === 0 ? 0 : Gt(p.row, c, -1), v = o - 1, y = this.tableProps.createCellCoords(m, r), w = this.tableProps.createCellCoords(v, s);
        this.runLocalHooks("beforeSelectColumns", y, w, p), y.row = m, w.row = v, this.setRangeStartOnly(y, void 0, p), this.selectedByColumnHeader.add(this.getLayerLevel()), this.setRangeEnd(w), this.runLocalHooks("afterSelectColumns", y, w, p), this.finish();
      }
      return d;
    }
    /**
     * Select row specified by `startRow` visual index or a range of rows finishing at `endRow`.
     *
     * @param {number} startRow Visual row index from which the selection starts.
     * @param {number} [endRow] Visual row index from to the selection finishes.
     * @param {number | { row: number, col: number }} [focusPosition=0] The argument allows changing the cell/header focus
     * position. The value can take visual row index from -N to N, where negative values point to the headers and positive
     * values point to the cell range. An object with `row` and `col` properties also can be passed to change the focus
     * position horizontally.
     * @returns {boolean} Returns `true` if selection was successful, `false` otherwise.
     */
    selectRows(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : e, i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
      const r = this.tableProps.countRows(), s = this.tableProps.countCols(), o = this.tableProps.countRowHeaders(), a = o === 0 ? 0 : -o, l = this.tableProps.createCellCoords(e, a), c = this.tableProps.createCellCoords(t, s - 1), u = this.tableProps.createCellRange(l, l, c).isValid({
        countRows: r,
        countCols: s,
        countRowHeaders: o,
        countColHeaders: 0
      });
      if (u) {
        let h = 0, d = 0;
        Number.isInteger(i == null ? void 0 : i.row) && Number.isInteger(i == null ? void 0 : i.col) ? (h = Gt(i.row, Math.min(e, t), Math.max(e, t)), d = Gt(i.col, a, s - 1)) : (h = e, d = Gt(i, a, s - 1));
        const f = this.tableProps.createCellCoords(h, d), g = o === 0 ? 0 : Gt(f.col, a, -1), p = s - 1, m = this.tableProps.createCellCoords(e, g), v = this.tableProps.createCellCoords(t, p);
        this.runLocalHooks("beforeSelectRows", m, v, f), m.col = g, v.col = p, this.setRangeStartOnly(m, void 0, f), this.selectedByRowHeader.add(this.getLayerLevel()), this.setRangeEnd(v), this.runLocalHooks("afterSelectRows", m, v, f), this.finish();
      }
      return u;
    }
    /**
     * Refreshes the whole selection by clearing, reapplying and committing the renderable selection (Walkontable Selection API)
     * by using already added visual ranges.
     */
    refresh() {
      if (!this.isSelected())
        return;
      const e = this.tableProps.countRows(), t = this.tableProps.countCols();
      if (e === 0 || t === 0) {
        this.deselect();
        return;
      }
      const i = this.selectedRange.peekByIndex(this.selectedRange.size() - 1), {
        from: r,
        to: s,
        highlight: o
      } = i;
      this.clear(), o.assign({
        row: Gt(o.row, -1 / 0, e - 1),
        col: Gt(o.col, -1 / 0, t - 1)
      }), r.assign({
        row: Gt(r.row, -1 / 0, e - 1),
        col: Gt(r.col, -1 / 0, t - 1)
      }), s.assign({
        row: Gt(s.row, 0, e - 1),
        col: Gt(s.col, 0, t - 1)
      }), this.selectedRange.ranges.push(i), this.highlight.getFocus().add(o).commit().syncWith(i), this.applyAndCommit(i);
    }
    /**
     * Refreshes the whole selection by recommitting (recalculating visual indexes to renderable ones) the renderable selection
     * that was already added.
     */
    commit() {
      if (this.highlight.getCustomSelections().forEach((r) => {
        r.commit();
      }), !this.isSelected())
        return;
      const t = this.highlight.getFocus(), i = this.getLayerLevel();
      t.commit().syncWith(this.selectedRange.current());
      for (let r = 0; r < this.selectedRange.size(); r += 1) {
        this.highlight.useLayerLevel(r);
        const s = this.highlight.createArea(), o = this.highlight.createLayeredArea(), a = this.highlight.createRowHeader(), l = this.highlight.createColumnHeader(), c = this.highlight.createActiveRowHeader(), u = this.highlight.createActiveColumnHeader(), h = this.highlight.createActiveCornerHeader(), d = this.highlight.createRowHighlight(), f = this.highlight.createColumnHighlight();
        s.commit(), o.commit(), a.commit(), l.commit(), c.commit(), u.commit(), h.commit(), d.commit(), f.commit();
      }
      this.highlight.useLayerLevel(i);
    }
  }
  qt(wG, Ki);
  const YV = /^(\r\n|\n\r|\r|\n)/, yxe = /^[^\t\r\n]+/, KV = /^\t/;
  function Cxe(n) {
    const e = [[""]];
    if (n.length === 0)
      return e;
    let t = 0, i = 0, r;
    for (; n.length > 0 && r !== n.length; )
      if (r = n.length, n.match(KV))
        n = n.replace(KV, ""), t += 1, e[i][t] = "";
      else if (n.match(YV))
        n = n.replace(YV, ""), t = 0, i += 1, e[i] = [""];
      else {
        let s = "";
        if (n.startsWith('"')) {
          let o = 0, a = !0;
          for (; a; ) {
            const l = n.slice(0, 1);
            l === '"' && (o += 1), s += l, n = n.slice(1), (n.length === 0 || n.match(/^[\t\r\n]/) && o % 2 === 0) && (a = !1);
          }
          s = s.replace(/^"/, "").replace(/"$/, "").replace(/["]*/g, (l) => new Array(Math.floor(l.length / 2)).fill('"').join(""));
        } else {
          const o = n.match(yxe);
          s = o ? o[0] : "", n = n.slice(s.length);
        }
        e[i][t] = s;
      }
    return e;
  }
  function Sv(n) {
    let e, t, i, r, s = "", o;
    for (e = 0, t = n.length; e < t; e += 1) {
      for (r = n[e].length, i = 0; i < r; i += 1)
        i > 0 && (s += "	"), o = n[e][i], typeof o == "string" ? o.indexOf(`
`) > -1 ? s += `"${o.replace(/"/g, '""')}"` : s += o : o == null ? s += "" : s += o;
      e !== t - 1 && (s += `
`);
    }
    return s;
  }
  function Ph(n, e, t) {
    return (e = Sxe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function Sxe(n) {
    var e = _xe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function _xe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class Ug {
    /**
     * @type {number}
     */
    static get DESTINATION_RENDERER() {
      return 1;
    }
    /**
     * @type {number}
     */
    static get DESTINATION_CLIPBOARD_GENERATOR() {
      return 2;
    }
    /**
     * Instance of {@link Handsontable}.
     *
     * @private
     * @type {Handsontable}
     */
    /**
     * @param {object} hotInstance Instance of Handsontable.
     * @param {Array} data Array of arrays or array of objects containing data.
     * @param {MetaManager} metaManager The meta manager instance.
     */
    constructor(e, t, i) {
      Ph(this, "hot", void 0), Ph(this, "metaManager", void 0), Ph(this, "tableMeta", void 0), Ph(this, "dataSource", void 0), Ph(this, "duckSchema", void 0), Ph(this, "colToPropCache", void 0), Ph(this, "propToColCache", void 0), this.hot = e, this.metaManager = i, this.tableMeta = i.getTableMeta(), this.dataSource = t, this.duckSchema = this.createDuckSchema(), this.createMap();
    }
    /**
     * Generates cache for property to and from column addressation.
     */
    createMap() {
      const e = this.getSchema();
      if (typeof e > "u")
        throw new Error("trying to create `columns` definition but you didn't provide `schema` nor `data`");
      const t = this.tableMeta.columns;
      let i;
      if (this.colToPropCache = [], this.propToColCache = /* @__PURE__ */ new Map(), t) {
        let r = 0, s = 0, o = !1;
        if (typeof t == "function") {
          const a = H1(e);
          r = a > 0 ? a : this.countFirstRowKeys(), o = !0;
        } else {
          const a = this.tableMeta.maxCols;
          r = Math.min(a, t.length);
        }
        for (i = 0; i < r; i++) {
          const a = o ? t(i) : t[i];
          if (at(a)) {
            if (typeof a.data < "u") {
              const l = o ? s : i;
              this.colToPropCache[l] = a.data, this.propToColCache.set(a.data, l);
            }
            s += 1;
          }
        }
      } else
        this.recursiveDuckColumns(e);
    }
    /**
     * Get the amount of physical columns in the first data row.
     *
     * @returns {number} Amount of physical columns in the first data row.
     */
    countFirstRowKeys() {
      return JD(this.dataSource);
    }
    /**
     * Generates columns' translation cache.
     *
     * @param {object} schema An object to generate schema from.
     * @param {number} lastCol The column index.
     * @param {number} parent The property cache for recursive calls.
     * @returns {number}
     */
    recursiveDuckColumns(e, t, i) {
      let r = t, s = i, o;
      return typeof r > "u" && (r = 0, s = ""), typeof e == "object" && !Array.isArray(e) && lt(e, (a, l) => {
        a === null ? (o = s + l, this.colToPropCache.push(o), this.propToColCache.set(o, r), r += 1) : r = this.recursiveDuckColumns(a, r, `${l}.`);
      }), r;
    }
    /**
     * Returns property name that corresponds with the given column index.
     *
     * @param {string|number} column Visual column index or another passed argument.
     * @returns {string|number} Column property, physical column index or passed argument.
     */
    colToProp(e) {
      if (Number.isInteger(e) === !1)
        return e;
      const t = this.hot.toPhysicalColumn(e);
      return t === null ? e : this.colToPropCache && ke(this.colToPropCache[t]) ? this.colToPropCache[t] : t;
    }
    /**
     * Translates property into visual column index.
     *
     * @param {string|number} prop Column property which may be also a physical column index.
     * @returns {string|number} Visual column index or passed argument.
     */
    propToCol(e) {
      const t = this.propToColCache.get(e);
      if (ke(t))
        return this.hot.toVisualColumn(t);
      const i = this.hot.toVisualColumn(e);
      return i === null ? e : i;
    }
    /**
     * Returns data's schema.
     *
     * @returns {object}
     */
    getSchema() {
      const e = this.tableMeta.dataSchema;
      return e ? typeof e == "function" ? e() : e : this.duckSchema;
    }
    /**
     * Creates the duck schema based on the current dataset.
     *
     * @returns {Array|object}
     */
    createDuckSchema() {
      return this.dataSource && this.dataSource[0] ? Sp(this.dataSource[0]) : {};
    }
    /**
     * Refresh the data schema.
     */
    refreshDuckSchema() {
      this.duckSchema = this.createDuckSchema();
    }
    /**
     * Creates row at the bottom of the data array.
     *
     * @param {number} [index] Physical index of the row before which the new row will be inserted.
     * @param {number} [amount=1] An amount of rows to add.
     * @param {object} [options] Additional options for created rows.
     * @param {string} [options.source] Source of method call.
     * @param {'above'|'below'} [options.mode] Sets where the row is inserted: above or below the passed index.
     * @fires Hooks#afterCreateRow
     * @returns {number} Returns number of created rows.
     */
    createRow(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, {
        source: i,
        mode: r = "above"
      } = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      const s = this.hot.countSourceRows();
      let o = s, a = 0, l = e;
      if ((typeof l != "number" || l >= s) && (l = s), l < this.hot.countRows() && (o = this.hot.toPhysicalRow(l)), this.hot.runHooks("beforeCreateRow", l, t, i) === !1 || o === null)
        return {
          delta: 0
        };
      const u = this.tableMeta.maxRows, h = this.getSchema().length, d = [];
      for (; a < t && s + a < u; ) {
        let g = null;
        this.hot.dataType === "array" ? this.tableMeta.dataSchema ? g = mr(this.getSchema()) : (g = [], $e(h - 1, () => g.push(null))) : this.hot.dataType === "function" ? g = this.tableMeta.dataSchema(l + a) : (g = {}, uy(g, this.getSchema())), d.push(g), a += 1;
      }
      this.hot.rowIndexMapper.insertIndexes(l, a), r === "below" && (o = Math.min(o + 1, s)), this.spliceData(o, 0, d);
      const f = this.hot.toVisualRow(o);
      return this.hot.countSourceRows() === d.length && this.hot.columnIndexMapper.initToLength(this.hot.getInitialColumnCount()), a > 0 && (e == null ? this.metaManager.createRow(null, a) : i !== "auto" && this.metaManager.createRow(o, t)), this.hot.runHooks("afterCreateRow", f, a, i), this.hot.forceFullRender = !0, {
        delta: a,
        startPhysicalIndex: o
      };
    }
    /**
     * Creates column at the right of the data array.
     *
     * @param {number} [index] Visual index of the column before which the new column will be inserted.
     * @param {number} [amount=1] An amount of columns to add.
     * @param {object} [options] Additional options for created columns.
     * @param {string} [options.source] Source of method call.
     * @param {'start'|'end'} [options.mode] Sets where the column is inserted: at the start (left in [LTR](@/api/options.md#layoutdirection), right in [RTL](@/api/options.md#layoutdirection)) or at the end (right in LTR, left in LTR)
     * the passed index.
     * @fires Hooks#afterCreateCol
     * @returns {number} Returns number of created columns.
     */
    createCol(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, {
        source: i,
        mode: r = "start"
      } = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      if (!this.hot.isColumnModificationAllowed())
        throw new Error("Cannot create new column. When data source in an object, you can only have as much columns as defined in first data row, data schema or in the 'columns' setting.If you want to be able to add new columns, you have to use array datasource.");
      const s = this.dataSource, o = this.tableMeta.maxCols, a = this.hot.countSourceCols();
      let l = e;
      if ((typeof l != "number" || l >= a) && (l = a), this.hot.runHooks("beforeCreateCol", l, t, i) === !1)
        return {
          delta: 0
        };
      let u = a;
      l < this.hot.countCols() && (u = this.hot.toPhysicalColumn(l));
      const h = this.hot.countSourceRows();
      let d = this.hot.countCols(), f = 0, g = u;
      r === "end" && (g = Math.min(g + 1, a));
      const p = g;
      for (; f < t && d < o; ) {
        if (typeof l != "number" || l >= d)
          if (h > 0)
            for (let v = 0; v < h; v += 1)
              typeof s[v] > "u" && (s[v] = []), s[v].push(null);
          else
            s.push([null]);
        else
          for (let v = 0; v < h; v++)
            s[v].splice(g, 0, null);
        f += 1, g += 1, d += 1;
      }
      this.hot.columnIndexMapper.insertIndexes(l, f), f > 0 && (e == null ? this.metaManager.createColumn(null, f) : i !== "auto" && this.metaManager.createColumn(p, t));
      const m = this.hot.toVisualColumn(p);
      return this.hot.runHooks("afterCreateCol", m, f, i), this.hot.forceFullRender = !0, this.refreshDuckSchema(), {
        delta: f,
        startPhysicalIndex: p
      };
    }
    /**
     * Removes row from the data array.
     *
     * @fires Hooks#beforeRemoveRow
     * @fires Hooks#afterRemoveRow
     * @param {number} [index] Visual index of the row to be removed. If not provided, the last row will be removed.
     * @param {number} [amount=1] Amount of the rows to be removed. If not provided, one row will be removed.
     * @param {string} [source] Source of method call.
     * @returns {boolean} Returns `false` when action was cancelled, otherwise `true`.
     */
    removeRow(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, i = arguments.length > 2 ? arguments[2] : void 0, r = Number.isInteger(e) ? e : -t;
      const s = this.visualRowsToPhysical(r, t), o = this.hot.countSourceRows();
      if (r = (o + r) % o, this.hot.runHooks("beforeRemoveRow", r, s.length, s, i) === !1)
        return !1;
      const l = s.length;
      if (this.filterData(r, l, s), r < this.hot.countRows()) {
        this.hot.rowIndexMapper.removeIndexes(s);
        const u = ke(this.tableMeta.columns) || ke(this.tableMeta.dataSchema);
        this.hot.rowIndexMapper.getNotTrimmedIndexesLength() === 0 && u === !1 && this.hot.columnIndexMapper.setIndexesSequence([]);
      }
      return s.slice(0).sort((u, h) => h - u).forEach((u) => {
        this.metaManager.removeRow(u, 1);
      }), this.hot.runHooks("afterRemoveRow", r, l, s, i), this.hot.forceFullRender = !0, !0;
    }
    /**
     * Removes column from the data array.
     *
     * @fires Hooks#beforeRemoveCol
     * @fires Hooks#afterRemoveCol
     * @param {number} [index] Visual index of the column to be removed. If not provided, the last column will be removed.
     * @param {number} [amount=1] Amount of the columns to be removed. If not provided, one column will be removed.
     * @param {string} [source] Source of method call.
     * @returns {boolean} Returns `false` when action was cancelled, otherwise `true`.
     */
    removeCol(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, i = arguments.length > 2 ? arguments[2] : void 0;
      if (this.hot.dataType === "object" || this.tableMeta.columns)
        throw new Error("cannot remove column with object data source or columns option specified");
      let r = typeof e != "number" ? -t : e;
      r = (this.hot.countCols() + r) % this.hot.countCols();
      const s = this.visualColumnsToPhysical(r, t), o = s.slice(0).sort((h, d) => d - h);
      if (this.hot.runHooks("beforeRemoveCol", r, t, s, i) === !1)
        return !1;
      let l = !0;
      const c = o.length, u = this.dataSource;
      for (let h = 0; h < c; h++)
        l && s[0] !== s[h] - h && (l = !1);
      if (l)
        for (let h = 0, d = this.hot.countSourceRows(); h < d; h++)
          u[h].splice(s[0], t), h === 0 && this.metaManager.removeColumn(s[0], t);
      else
        for (let h = 0, d = this.hot.countSourceRows(); h < d; h++)
          for (let f = 0; f < c; f++)
            u[h].splice(o[f], 1), h === 0 && this.metaManager.removeColumn(o[f], 1);
      return r < this.hot.countCols() && (this.hot.columnIndexMapper.removeIndexes(s), this.hot.columnIndexMapper.getNotTrimmedIndexesLength() === 0 && this.hot.rowIndexMapper.setIndexesSequence([])), this.hot.runHooks("afterRemoveCol", r, t, s, i), this.hot.forceFullRender = !0, this.refreshDuckSchema(), !0;
    }
    /**
     * Add/Removes data from the column.
     *
     * @param {number} col Physical index of column in which do you want to do splice.
     * @param {number} index Index at which to start changing the array. If negative, will begin that many elements from the end.
     * @param {number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed.
     * @param {Array} [elements] The new columns to add.
     * @returns {Array} Returns removed portion of columns.
     */
    spliceCol(e, t, i) {
      const r = this.hot.getDataAtCol(e), s = r.slice(t, t + i), o = r.slice(t + i);
      for (var a = arguments.length, l = new Array(a > 3 ? a - 3 : 0), c = 3; c < a; c++)
        l[c - 3] = arguments[c];
      AP(l, o);
      let u = 0;
      for (; u < i; )
        l.push(null), u += 1;
      return P7(l), this.hot.populateFromArray(t, e, l, null, null, "spliceCol"), s;
    }
    /**
     * Add/Removes data from the row.
     *
     * @param {number} row Physical index of row in which do you want to do splice.
     * @param {number} index Index at which to start changing the array. If negative, will begin that many elements from the end.
     * @param {number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed.
     * @param {Array} [elements] The new rows to add.
     * @returns {Array} Returns removed portion of rows.
     */
    spliceRow(e, t, i) {
      const r = this.hot.getSourceDataAtRow(e), s = r.slice(t, t + i), o = r.slice(t + i);
      for (var a = arguments.length, l = new Array(a > 3 ? a - 3 : 0), c = 3; c < a; c++)
        l[c - 3] = arguments[c];
      AP(l, o);
      let u = 0;
      for (; u < i; )
        l.push(null), u += 1;
      return this.hot.populateFromArray(e, t, [l], null, null, "spliceRow"), s;
    }
    /**
     * Add/remove row(s) to/from the data source.
     *
     * @param {number} index Physical index of the element to add/remove.
     * @param {number} deleteCount Number of rows to remove.
     * @param {Array<object>} elements Row elements to be added.
     */
    spliceData(e, t, i) {
      if (this.hot.runHooks("beforeDataSplice", e, t, i) !== !1) {
        const s = [...this.dataSource.slice(0, e), ...i, ...this.dataSource.slice(e)];
        this.dataSource.length = 0, s.forEach((o) => this.dataSource.push(o));
      }
    }
    /**
     * Filter unwanted data elements from the data source.
     *
     * @param {number} index Visual index of the element to remove.
     * @param {number} amount Number of rows to add/remove.
     * @param {number} physicalRows Physical row indexes.
     */
    filterData(e, t, i) {
      let r = this.hot.runHooks("filterData", e, t, i);
      Array.isArray(r) === !1 && (r = this.dataSource.filter((s, o) => i.indexOf(o) === -1)), this.dataSource.length = 0, Array.prototype.push.apply(this.dataSource, r);
    }
    /**
     * Returns single value from the data array.
     *
     * @param {number} row Visual row index.
     * @param {number} prop The column property.
     * @returns {*}
     */
    get(e, t) {
      const i = this.hot.toPhysicalRow(e);
      let r = this.dataSource[i];
      const s = this.hot.runHooks("modifyRowData", i);
      r = isNaN(s) ? s : r;
      const {
        dataDotNotation: o
      } = this.hot.getSettings();
      let a = null;
      if (r && r.hasOwnProperty && In(r, t))
        a = r[t];
      else if (o && typeof t == "string" && t.indexOf(".") > -1) {
        let l = r;
        if (!l)
          return null;
        const c = t.split(".");
        for (let u = 0, h = c.length; u < h; u++)
          if (l = l[c[u]], typeof l > "u")
            return null;
        a = l;
      } else typeof t == "function" && (a = t(this.dataSource.slice(i, i + 1)[0]));
      if (this.hot.hasHook("modifyData")) {
        const l = eo(a);
        this.hot.runHooks("modifyData", i, this.propToCol(t), l, "get"), l.isTouched() && (a = l.value);
      }
      return a;
    }
    /**
     * Returns single value from the data array (intended for clipboard copy to an external application).
     *
     * @param {number} row Physical row index.
     * @param {number} prop The column property.
     * @returns {string}
     */
    getCopyable(e, t) {
      return this.hot.getCellMeta(e, this.propToCol(t)).copyable ? this.get(e, t) : "";
    }
    /**
     * Saves single value to the data array.
     *
     * @param {number} row Visual row index.
     * @param {number} prop The column property.
     * @param {string} value The value to set.
     */
    set(e, t, i) {
      const r = this.hot.toPhysicalRow(e);
      let s = i, o = this.dataSource[r];
      const a = this.hot.runHooks("modifyRowData", r);
      if (o = isNaN(a) ? a : o, this.hot.hasHook("modifyData")) {
        const c = eo(s);
        this.hot.runHooks("modifyData", r, this.propToCol(t), c, "set"), c.isTouched() && (s = c.value);
      }
      const {
        dataDotNotation: l
      } = this.hot.getSettings();
      if (o && o.hasOwnProperty && In(o, t))
        o[t] = s;
      else if (l && typeof t == "string" && t.indexOf(".") > -1) {
        let c = o, u = 0, h;
        const d = t.split(".");
        for (u = 0, h = d.length - 1; u < h; u++)
          typeof c[d[u]] > "u" && (c[d[u]] = {}), c = c[d[u]];
        c[d[u]] = s;
      } else typeof t == "function" ? t(this.dataSource.slice(r, r + 1)[0], s) : o[t] = s;
    }
    /**
     * This ridiculous piece of code maps rows Id that are present in table data to those displayed for user.
     * The trick is, the physical row id (stored in settings.data) is not necessary the same
     * as the visual (displayed) row id (e.g. When sorting is applied).
     *
     * @param {number} index Visual row index.
     * @param {number} amount An amount of rows to translate.
     * @returns {number}
     */
    visualRowsToPhysical(e, t) {
      const i = this.hot.countSourceRows(), r = [];
      let s = (i + e) % i, o = t, a;
      for (; s < i && o; )
        a = this.hot.toPhysicalRow(s), r.push(a), o -= 1, s += 1;
      return r;
    }
    /**
     *
     * @param {number} index Visual column index.
     * @param {number} amount An amount of rows to translate.
     * @returns {Array}
     */
    visualColumnsToPhysical(e, t) {
      const i = this.hot.countCols(), r = [];
      let s = (i + e) % i, o = t;
      for (; s < i && o; ) {
        const a = this.hot.toPhysicalColumn(s);
        r.push(a), o -= 1, s += 1;
      }
      return r;
    }
    /**
     * Clears the data array.
     */
    clear() {
      for (let e = 0; e < this.hot.countSourceRows(); e++)
        for (let t = 0; t < this.hot.countCols(); t++)
          this.set(e, this.colToProp(t), "");
    }
    /**
     * Get data length.
     *
     * @returns {number}
     */
    getLength() {
      const e = this.tableMeta.maxRows;
      let t;
      e < 0 || e === 0 ? t = 0 : t = e || 1 / 0;
      const i = this.hot.rowIndexMapper.getNotTrimmedIndexesLength();
      return Math.min(i, t);
    }
    /**
     * Returns the data array.
     *
     * @returns {Array}
     */
    getAll() {
      const e = {
        row: 0,
        col: 0
      }, t = {
        row: Math.max(this.hot.countRows() - 1, 0),
        col: Math.max(this.hot.countCols() - 1, 0)
      };
      return e.row - t.row === 0 && !this.hot.countSourceRows() ? [] : this.getRange(e, t, Ug.DESTINATION_RENDERER);
    }
    /**
     * Count the number of columns cached in the `colToProp` cache.
     *
     * @returns {number} Amount of cached columns.
     */
    countCachedColumns() {
      return this.colToPropCache.length;
    }
    /**
     * Returns data range as array.
     *
     * @param {object} [start] Start selection position. Visual indexes.
     * @param {object} [end] End selection position. Visual indexes.
     * @param {number} destination Destination of datamap.get.
     * @returns {Array}
     */
    getRange(e, t, i) {
      const r = [];
      let s, o, a;
      const l = this.tableMeta.maxRows, c = this.tableMeta.maxCols;
      if (l === 0 || c === 0)
        return [];
      const u = i === Ug.DESTINATION_CLIPBOARD_GENERATOR ? this.getCopyable : this.get, h = Math.min(Math.max(l - 1, 0), Math.max(e.row, t.row)), d = Math.min(Math.max(c - 1, 0), Math.max(e.col, t.col));
      for (s = Math.min(e.row, t.row); s <= h; s++) {
        a = [];
        const f = s >= 0 ? this.hot.toPhysicalRow(s) : s;
        for (o = Math.min(e.col, t.col); o <= d && f !== null; o++)
          a.push(u.call(this, s, this.colToProp(o)));
        f !== null && r.push(a);
      }
      return r;
    }
    /**
     * Return data as text (tab separated columns).
     *
     * @param {object} [start] Start selection position. Visual indexes.
     * @param {object} [end] End selection position. Visual indexes.
     * @returns {string}
     */
    getText(e, t) {
      return Sv(this.getRange(e, t, Ug.DESTINATION_RENDERER));
    }
    /**
     * Return data as copyable text (tab separated columns intended for clipboard copy to an external application).
     *
     * @param {object} [start] Start selection position. Visual indexes.
     * @param {object} [end] End selection position. Visual indexes.
     * @returns {string}
     */
    getCopyableText(e, t) {
      return Sv(this.getRange(e, t, Ug.DESTINATION_CLIPBOARD_GENERATOR));
    }
    /**
     * Destroy instance.
     */
    destroy() {
      this.hot = null, this.metaManager = null, this.dataSource = null, this.duckSchema = null, this.colToPropCache.length = 0, this.propToColCache.clear(), this.propToColCache = void 0;
    }
  }
  const {
    register: Rxe,
    getItem: Exe,
    hasItem: yG,
    getNames: xxe,
    getValues: HUe
  } = ha("cellTypes");
  function SL(n) {
    if (!yG(n))
      throw Error(`You declared cell type "${n}" as a string that is not mapped to a known object.
                 Cell type must be an object or a string mapped to an object registered by
                 "Handsontable.cellTypes.registerCellType" method`);
    return Exe(n);
  }
  function Ws(n, e) {
    typeof n != "string" && (e = n, n = e.CELL_TYPE);
    const {
      editor: t,
      renderer: i,
      validator: r
    } = e;
    t && Gr(n, t), i && ss(n, i), r && vd(n, r), Rxe(n, e);
  }
  function Txe(n, e) {
    var t;
    return n === "CELL_TYPE" ? !1 : ((t = e._automaticallyAssignedMetaProps) === null || t === void 0 ? void 0 : t.has(n)) || !In(e, n);
  }
  function Z1(n, e) {
    let t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : n;
    const i = typeof e.type == "string" ? SL(e.type) : e.type;
    if (n._automaticallyAssignedMetaProps && lt(e, (s, o) => void n._automaticallyAssignedMetaProps.delete(o)), !at(i))
      return;
    t === n && !n._automaticallyAssignedMetaProps && (n._automaticallyAssignedMetaProps = /* @__PURE__ */ new Set());
    const r = {};
    lt(i, (s, o) => {
      if (Txe(o, t)) {
        var a;
        r[o] = s, (a = n._automaticallyAssignedMetaProps) === null || a === void 0 || a.add(o);
      }
    }), ai(n, r);
  }
  function Mxe(n) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    function t() {
    }
    ua(t, n);
    for (let i = 0; i < e.length; i++)
      t.prototype[e[i]] = void 0;
    return t;
  }
  function RS(n) {
    return Number.isInteger(n) && n >= 0;
  }
  function ES(n, e) {
    if (!n())
      throw new Error(`Assertion failed: ${e}`);
  }
  function $0(n) {
    return n == null;
  }
  const CG = () => ({
    /* eslint-disable jsdoc/require-description-complete-sentence */
    /**
     * Information on which of the meta properties were added automatically.
     * For example: setting the `renderer` property directly won't extend the `_automaticallyAssignedMetaProps`
     * entry, but setting a `type` will modify it to `Set(3) {'renderer', 'editor', 'validator', ...}`.
     *
     * @private
     * @type {Set}
     * @default undefined
     */
    _automaticallyAssignedMetaProps: void 0,
    /**
     * The `activeHeaderClassName` option lets you add a CSS class name
     * to every currently-active, currently-selected header (when a whole column or row is selected).
     *
     * Read more:
     * - [`currentRowClassName`](#currentRowClassName)
     * - [`currentColClassName`](#currentColClassName)
     * - [`currentHeaderClassName`](#currentHeaderClassName)
     * - [`invalidCellClassName`](#invalidCellClassName)
     * - [`readOnlyCellClassName`](#readOnlyCellClassName)
     * - [`commentedCellClassName`](#commentedCellClassName)
     * - [`noWordWrapClassName`](#noWordWrapClassName)
     * - [`TableClassName`](#TableClassName)
     * - [`className`](#className)
     *
     * @memberof Options#
     * @type {string}
     * @since 0.38.2
     * @default 'ht__active_highlight'
     * @category Core
     *
     * @example
     * ```js
     * // add an `ht__active_highlight` CSS class name
     * // to every currently-active, currently-selected header
     * activeHeaderClassName: 'ht__active_highlight',
     * ```
     */
    activeHeaderClassName: "ht__active_highlight",
    /**
     * The `allowEmpty` option determines whether Handsontable accepts the following values:
     * - `null`
     * - `undefined`
     * - `''`
     *
     * You can set the `allowEmpty` option to one of the following:
     *
     * | Setting          | Description                                                                                                                          |
     * | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------ |
     * | `true` (default) | - Accept `null`, `undefined` and `''` values<br>- Mark cells that contain `null`, `undefined` or `''` values as `valid`              |
     * | `false`          | - Don't accept `null`, `undefined` and `''` values<br>- Mark cells that contain `null`, `undefined` or `''` values with as `invalid` |
     *
     * ::: tip
     * To use the [`allowEmpty`](#allowempty) option, you need to set the [`validator`](#validator) option (or the [`type`](#type) option).
     * :::
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * // allow empty values in each cell of the entire grid
     * allowEmpty: true,
     *
     * // or
     * columns: [
     *   {
     *     type: 'date',
     *     dateFormat: 'DD/MM/YYYY',
     *     // allow empty values in each cell of the 'date' column
     *     allowEmpty: true
     *   }
     * ],
     * ```
     */
    allowEmpty: !0,
    /**
     * The `allowHtml` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type/autocomplete-cell-type.md)
     * and [`dropdown`](@/guides/cell-types/dropdown-cell-type/dropdown-cell-type.md) cells' [`source`](#source) data
     * is treated as HTML.
     *
     * You can set the `allowHtml` option to one of the following:
     *
     * | Setting           | Description                                         |
     * | ----------------- | --------------------------------------------------- |
     * | `false` (default) | The [`source`](#source) data is not treated as HTML |
     * | `true`            | The [`source`](#source) data is treated as HTML     |
     *
     * __Warning:__ Setting the `allowHtml` option to `true` can cause serious XSS vulnerabilities.
     *
     * Read more:
     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type/autocomplete-cell-type.md)
     * - [Dropdown cell type](@/guides/cell-types/dropdown-cell-type/dropdown-cell-type.md)
     * - [`source`](#source)
     *
     * @memberof Options#
     * @type {boolean}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *   // set the `type` of each cell in this column to `autocomplete`
     *   type: 'autocomplete',
     *   // set options available in every `autocomplete` cell of this column
     *   source: ['<strong>foo</strong>', '<strong>bar</strong>']
     *   // use HTML in the `source` list
     *   allowHtml: true,
     *   },
     * ],
     * ```
     */
    allowHtml: !1,
    /**
     * If set to `true`, the `allowInsertColumn` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu/context-menu.md):
     * - **Insert column left**
     * - **Insert column right**
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * // hide the 'Insert column left' and 'Insert column right' menu items from the context menu
     * allowInsertColumn: false,
     * ```
     */
    allowInsertColumn: !0,
    /**
     * If set to `true`, the `allowInsertRow` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu/context-menu.md):
     * - **Insert row above**
     * - **Insert row below**
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * // hide the 'Insert row above' and 'Insert row below' menu items from the context menu
     * allowInsertRow: false,
     * ```
     */
    allowInsertRow: !0,
    /**
     * The `allowInvalid` option determines whether Handsontable accepts values
     * that were marked as `invalid` by the [cell validator](@/guides/cell-functions/cell-validator/cell-validator.md).
     *
     * You can set the `allowInvalid` option to one of the following:
     *
     * | Setting          | Description                                                                                                                                                                        |
     * | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `true` (default) | - Accept `invalid` values<br>- Allow the user to close the [cell editor](@/guides/cell-functions/cell-editor/cell-editor.md) with `invalid` values<br>- Save `invalid` values into the data source                   |
     * | `false`          | - Don't accept `invalid` values<br>- Don't allow the user to close the [cell editor](@/guides/cell-functions/cell-editor/cell-editor.md) with `invalid` values<br>- Don't save `invalid` values into the data source |
     *
     * Setting the `allowInvalid` option to `false` can be useful when used with the [Autocomplete strict mode](@/guides/cell-types/autocomplete-cell-type/autocomplete-cell-type.md#autocomplete-strict-mode).
     *
     * Read more:
     * - [Cell validator](@/guides/cell-functions/cell-validator/cell-validator.md)
     * - [Cell editor](@/guides/cell-functions/cell-editor/cell-editor.md)
     * - [Autocomplete strict mode](@/guides/cell-types/autocomplete-cell-type/autocomplete-cell-type.md#autocomplete-strict-mode)
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * // don't accept `invalid` values
     * // don't allow the user to close the cell editor
     * // don't save `invalid` values into the data source
     * allowInvalid: false,
     * ```
     */
    allowInvalid: !0,
    /**
     * If set to `true`, the `allowRemoveColumn` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu/context-menu.md):
     * - **Remove column**
     *
     * Read more:
     * - [Context menu](@/guides/accessories-and-menus/context-menu/context-menu.md)
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * // hide the 'Remove column' menu item from the context menu
     * allowRemoveColumn: false,
     * ```
     */
    allowRemoveColumn: !0,
    /**
     * If set to `true`, the `allowRemoveRow` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu/context-menu.md):
     * - **Remove row**
     *
     * Read more:
     * - [Context menu](@/guides/accessories-and-menus/context-menu/context-menu.md)
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * // hide the 'Remove row' menu item from the context menu
     * allowRemoveRow: false,
     * ```
     */
    allowRemoveRow: !0,
    /**
     * If set to `true`, the accessibility-related ARIA tags will be added to the table. If set to `false`, they
     * will be omitted.
     * Defaults to `true`.
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     * @since 14.0.0
     */
    ariaTags: !0,
    /**
     * The `autoColumnSize` option configures the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin.
     *
     * You can set the `autoColumnSize` option to one of the following:
     *
     * | Setting   | Description                                                                                  |
     * | --------- | -------------------------------------------------------------------------------------------- |
     * | `false`   | Disable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin                               |
     * | `true`    | Enable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin with the default configuration |
     * | An object | Enable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin and modify the plugin options  |
     *
     * If you set the `autoColumnSize` option to an object, you can set the following [`AutoColumnSize`](@/api/autoColumnSize.md) plugin options:
     *
     * | Property                | Possible values                 | Description                                                                                                    |
     * | ----------------------- | ------------------------------- | -------------------------------------------------------------------------------------------------------------- |
     * | `syncLimit`             | A number \| A percentage string | The number/percentage of columns to keep in sync<br>(default: `50`)                                            |
     * | `useHeaders`            | `true` \| `false`               | When calculating column widths:<br>`true`: use column headers<br>`false`: don't use column headers          |
     * | `samplingRatio`         | A number                        | The number of samples of the same length to be used in column width calculations                               |
     * | `allowSampleDuplicates` | `true` \| `false`               | When calculating column widths:<br>`true`: Allow duplicate samples<br>`false`: Don't allow duplicate samples |
     *
     * By default, the `autoColumnSize` option is set to `undefined`,
     * but the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin acts as enabled.
     * To disable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin completely,
     * set the `autoColumnSize` option to `false`.
     *
     * Using the [`colWidths`](#colWidths) option forcibly disables the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin.
     *
     * Read more:
     * - [Plugins: `AutoColumnSize`](@/api/autoColumnSize.md)
     *
     * @memberof Options#
     * @type {object|boolean}
     * @default undefined
     * @category AutoColumnSize
     *
     * @example
     * ```js
     * autoColumnSize: {
     *   // keep 40% of columns in sync (the rest of columns: async)
     *   syncLimit: '40%',
     *   // when calculating column widths, use column headers
     *   useHeaders: true,
     *   // when calculating column widths, use 10 samples of the same length
     *   samplingRatio: 10,
     *   // when calculating column widths, allow duplicate samples
     *   allowSampleDuplicates: true
     * },
     * ```
     */
    autoColumnSize: void 0,
    /**
     * The `autoRowSize` option configures the [`AutoRowSize`](@/api/autoRowSize.md) plugin.
     *
     * You can set the `autoRowSize` option to one of the following:
     *
     * | Setting   | Description                                                                            |
     * | --------- | -------------------------------------------------------------------------------------- |
     * | `false`   | Disable the [`AutoRowSize`](@/api/autoRowSize.md) plugin                               |
     * | `true`    | Enable the [`AutoRowSize`](@/api/autoRowSize.md) plugin with the default configuration |
     * | An object | Enable the [`AutoRowSize`](@/api/autoRowSize.md) plugin and modify the plugin options  |
     *
     * To give Handsontable's scrollbar a proper size, set the `autoRowSize` option to `true`.
     *
     * If you set the `autoRowSize` option to an object, you can set the following [`AutoRowSize`](@/api/autoRowSize.md) plugin options:
     *
     * | Property    | Possible values                 | Description                                                       |
     * | ----------- | ------------------------------- | ----------------------------------------------------------------- |
     * | `syncLimit` | A number \| A percentage string | The number/percentage of rows to keep in sync<br>(default: `500`) |
     *
     * Using the [`rowHeights`](#rowHeights) option forcibly disables the [`AutoRowSize`](@/api/autoRowSize.md) plugin.
     *
     * Read more:
     * - [Plugins: `AutoRowSize`](@/api/autoRowSize.md)
     *
     * @memberof Options#
     * @type {object|boolean}
     * @default undefined
     * @category AutoRowSize
     *
     * @example
     * ```js
     * autoRowSize: {
     *   // keep 40% of rows in sync (the rest of rows: async)
     *   syncLimit: '40%'
     * },
     * ```
     */
    autoRowSize: void 0,
    /**
     * | Setting           | Description                                                                                                                                                                                                                                  |
     * | ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `false` (default) | When you select a bottom-most cell, pressing <kbd>**↓**</kbd> doesn't do anything.<br><br>When you select a top-most cell, pressing <kbd>**↑**</kbd> doesn't do anything.                                                                    |
     * | `true`            | When you select a bottom-most cell, pressing <kbd>**↓**</kbd> takes you to the top-most cell of the next column.<br><br>When you select a top-most cell, pressing <kbd>**↑**</kbd> takes you to the bottom-most cell of the previous column. |
     *
     * @memberof Options#
     * @type {boolean}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * // when you select a bottom-most cell, pressing ⬇ doesn't do anything
     * // when you select a top-most cell, pressing ⬆ doesn't do anything
     * autoWrapCol: false, // default setting
     *
     * // when you select a bottom-most cell, pressing ⬇ takes you to the top-most cell of the next column
     * // when you select a top-most cell, pressing ⬆ takes you to the bottom-most cell of the previous column
     * autoWrapCol: true,
     * ```
     */
    autoWrapCol: !1,
    /**
     * | Setting           | Description                                                                                                                                                                                                                                                                                                        |
     * | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
     * | `false` (default) | When you select the first cell of a row, pressing <kbd>**←**</kbd>* (or <kbd>**Shift**</kbd>+<kbd>**Tab**</kbd>\*\*) doesn't do anything.<br><br>When you select the last cell of a row, pressing <kbd>**→**</kbd>* (or <kbd>**Tab**</kbd>**) doesn't do anything.                                                  |
     * | `true`            | When you select the first cell of a row, pressing <kbd>**←**</kbd>* (or <kbd>**Shift**</kbd>+<kbd>**Tab**</kbd>\*\*) takes you to the last cell of the row above.<br><br>When you select the last cell of a row, pressing <kbd>**→**</kbd>* (or <kbd>**Tab**</kbd>**) takes you to the first cell of the row below. |
     *
     * \* The exact key depends on your [`layoutDirection`](#layoutdirection) configuration.<br>
     * \*\* Unless [`tabNavigation`](#tabnavigation) is set to `false`.
     *
     * @memberof Options#
     * @type {boolean}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * // when you select the first cell of a row, pressing ⬅ (or Shift+Tab) doesn't do anything
     * // when you select the last cell of a row, pressing ➡ (or Tab) doesn't do anything
     * autoWrapRow: false, // default setting
     *
     * // when you select the first cell of a row, pressing ⬅ (or Shift+Tab) takes you to the last cell of the row above
     * // when you select the last cell of a row, pressing ➡ (or Tab) takes you to the first cell of the row below
     * autoWrapRow: true,
     * ```
     */
    autoWrapRow: !1,
    /**
     * @description
     * The `bindRowsWithHeaders` option configures the [`BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md) plugin.
     *
     * You can set the `bindRowsWithHeaders` option to one of the following:
     *
     * | Setting | Description                                                                  |
     * | ------- | ---------------------------------------------------------------------------- |
     * | `false` | Disable the the [`BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md) plugin |
     * | `true`  | Enable the the [`BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md) plugin  |
     *
     * Read more:
     * - [Plugins: `BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md)
     *
     * @memberof Options#
     * @type {boolean|string}
     * @default undefined
     * @category BindRowsWithHeaders
     *
     * @example
     * ```js
     * // enable the `BindRowsWithHeaders` plugin
     * bindRowsWithHeaders: true
     * ```
     */
    bindRowsWithHeaders: void 0,
    /**
     * The `cell` option lets you apply [configuration options](@/guides/getting-started/configuration-options/configuration-options.md) to individual cells.
     *
     * The `cell` option overwrites the [top-level grid options](@/guides/getting-started/configuration-options/configuration-options.md#set-grid-options),
     * and the [`columns`](#columns) options.
     *
     * Read more:
     * - [Configuration options: Setting cell options](@/guides/getting-started/configuration-options/configuration-options.md#set-cell-options)
     * - [`columns`](#columns)
     *
     * @memberof Options#
     * @type {Array[]}
     * @default []
     * @category Core
     *
     * @example
     * ```js
     * // set the `cell` option to an array of objects
     * cell: [
     *   // make the cell with coordinates (0, 0) read-only
     *   {
     *     row: 0,
     *     col: 0,
     *     readOnly: true
     *   }
     * ],
     * ```
     */
    cell: [],
    /**
     * @description
     * The `cells` option lets you apply any other [configuration options](@/guides/getting-started/configuration-options/configuration-options.md) to
     * individual grid elements (columns, rows, cells), based on any logic you implement.
     *
     * The `cells` option overwrites all other options (including options set by [`columns`](#columns) and [`cell`](#cell)).
     * It takes the following parameters:
     *
     * | Parameter | Required | Type             | Description                                                                                                                                                                                                                                                                                                                             |
     * | --------- | -------- | ---------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `row`     | Yes      | Number           | A physical row index                                                                                                                                                                                                                                                                                                                    |
     * | `column`  | Yes      | Number           | A physical column index                                                                                                                                                                                                                                                                                                                 |
     * | `prop`    | No       | String \| Number | If [`data`](#data) is set to an [array of arrays](@/guides/getting-started/binding-to-data/binding-to-data.md#array-of-arrays), `prop` is the same number as `column`.<br><br>If [`data`](#data) is set to an [array of objects](@/guides/getting-started/binding-to-data/binding-to-data.md#array-of-objects), `prop` is a property name for the column's data object. |
     *
     * Read more:
     * - [Configuration options: Implementing custom logic](@/guides/getting-started/configuration-options/configuration-options.md#implement-custom-logic)
     * - [Configuration options: Setting row options](@/guides/getting-started/configuration-options/configuration-options.md#set-row-options)
     * - [`columns`](#columns)
     * - [`cell`](#cell)
     *
     * @memberof Options#
     * @type {Function}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // set the `cells` option to your custom function
     * cells(row, column, prop) {
     *   const cellProperties = { readOnly: false };
     *   const visualRowIndex = this.instance.toVisualRow(row);
     *   const visualColIndex = this.instance.toVisualColumn(column);
     *
     *   if (visualRowIndex === 0 && visualColIndex === 0) {
     *     cellProperties.readOnly = true;
     *   }
     *
     *   return cellProperties;
     * },
     * ```
     */
    cells: void 0,
    /**
     * The `checkedTemplate` option lets you configure what value
     * a checked [`checkbox`](@/guides/cell-types/checkbox-cell-type/checkbox-cell-type.md) cell has.
     *
     * You can set the `checkedTemplate` option to one of the following:
     *
     * | Setting          | Description                                                                                                                                                                              |
     * | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `true` (default) | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type/checkbox-cell-type.md) cell is checked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns `true`                  |
     * | A string         | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type/checkbox-cell-type.md) cell is checked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns a string of your choice |
     *
     * Read more:
     * - [Checkbox cell type: Checkbox template](@/guides/cell-types/checkbox-cell-type/checkbox-cell-type.md#checkbox-template)
     * - [`getDataAtCell()`](@/api/core.md#getDataAtCell)
     * - [`uncheckedTemplate`](#uncheckedTemplate)
     *
     * @memberof Options#
     * @type {boolean|string|number}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *     // set the `type` of each cell in this column to `checkbox`
     *     // when checked, the cell's value is `true`
     *     // when unchecked, the cell's value is `false`
     *     type: 'checkbox',
     *   },
     *   {
     *     // set the `type` of each cell in this column to `checkbox`
     *     type: 'checkbox',
     *     // when checked, the cell's value is `'Yes'`
     *     checkedTemplate: 'Yes',
     *     // when unchecked, the cell's value is `'No'`
     *     uncheckedTemplate: 'No'
     *  }
     * ],
     * ```
     */
    checkedTemplate: void 0,
    /**
     * The `className` option lets you add CSS class names to every currently-selected element.
     *
     * You can set the `className` option to one of the following:
     *
     * | Setting             | Description                                                      |
     * | ------------------- | ---------------------------------------------------------------- |
     * | A string            | Add a single CSS class name to every currently-selected element  |
     * | An array of strings | Add multiple CSS class names to every currently-selected element |
     *
     * ::: tip
     * Don't change the `className` metadata of the [column summary](@/guides/columns/column-summary/column-summary.md) row.
     * To style the summary row, use the class name assigned automatically by the [`ColumnSummary`](@/api/columnSummary.md) plugin: `columnSummaryResult`.
     * :::
     *
     * To apply different CSS class names on different levels, use Handsontable's [cascading configuration](@/guides/getting-started/configuration-options/configuration-options.md#cascading-configuration).
     *
     * Read more:
     * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options/configuration-options.md#cascading-configuration)
     * - [`currentRowClassName`](#currentRowClassName)
     * - [`currentColClassName`](#currentColClassName)
     * - [`currentHeaderClassName`](#currentHeaderClassName)
     * - [`activeHeaderClassName`](#activeHeaderClassName)
     * - [`invalidCellClassName`](#invalidCellClassName)
     * - [`placeholderCellClassName`](#placeholderCellClassName)
     * - [`commentedCellClassName`](#commentedCellClassName)
     * - [`noWordWrapClassName`](#noWordWrapClassName)
     * - [`readOnlyCellClassName`](#readOnlyCellClassName)
     * - [`TableClassName`](#TableClassName)
     *
     * @memberof Options#
     * @type {string|string[]}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // add a `your-class-name` CSS class name
     * // to every currently-selected element
     * className: 'your-class-name',
     *
     * // add `first-class-name` and `second-class-name` CSS class names
     * // to every currently-selected element
     * className: ['first-class-name', 'second-class-name'],
     * ```
     */
    className: void 0,
    /**
     * The `colHeaders` option configures your grid's column headers.
     *
     * You can set the `colHeaders` option to one of the following:
     *
     * | Setting  | Description                                                          |
     * | -------- | -------------------------------------------------------------------- |
     * | `true`   | Enable the default column headers ('A', 'B', 'C', ...)               |
     * | `false`  | Disable column headers                                               |
     * | An array | Define your own column headers (e.g. `['One', 'Two', 'Three', ...]`) |
     * | A function | Define your own column headers, using a function                     |
     *
     * Read more:
     * - [Column header](@/guides/columns/column-header/column-header.md)
     *
     * @memberof Options#
     * @type {boolean|string[]|Function}
     * @default null
     * @category Core
     *
     * @example
     * ```js
     * // enable the default column headers
     * colHeaders: true,
     *
     * // set your own column headers
     * colHeaders: ['One', 'Two', 'Three'],
     *
     * // set your own column headers, using a function
     * colHeaders: function(visualColumnIndex) {
     *   return `${visualColumnIndex} + : AB`;
     * },
     * ```
     */
    colHeaders: null,
    /**
     * @description
     * The `collapsibleColumns` option configures the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin.
     *
     * You can set the `collapsibleColumns` option to one of the following:
     *
     * | Setting              | Description                                                                                       |
     * | -------------------- | ------------------------------------------------------------------------------------------------- |
     * | `false`              | Disable the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin                            |
     * | `true`               | Enable the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin                             |
     * | An array of objects  | Enable the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin for selected column headers |
     *
     * Read more:
     * - [Plugins: `CollapsibleColumns`](@/api/collapsibleColumns.md)
     *
     * @memberof Options#
     * @type {boolean|object[]}
     * @default undefined
     * @category CollapsibleColumns
     *
     * @example
     * ```js
     * // enable column collapsing for all headers
     * collapsibleColumns: true,
     *
     * // enable column collapsing for selected headers
     * collapsibleColumns: [
     *   {row: -4, col: 1, collapsible: true},
     *   {row: -3, col: 5, collapsible: true}
     * ],
     * ```
     */
    collapsibleColumns: void 0,
    /**
     * @description
     * The `columnHeaderHeight` option configures the height of column headers.
     *
     * You can set the `columnHeaderHeight` option to one of the following:
     *
     * | Setting  | Description                                         |
     * | -------- | --------------------------------------------------- |
     * | A number | Set the same height for every column header         |
     * | An array | Set different heights for individual column headers |
     *
     * @memberof Options#
     * @type {number|number[]}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // set the same height for every column header
     * columnHeaderHeight: 25,
     *
     * // set different heights for individual column headers
     * columnHeaderHeight: [25, 30, 55],
     * ```
     */
    columnHeaderHeight: void 0,
    /**
     * @description
     * The `columns` option lets you apply any other [configuration options](@/guides/getting-started/configuration-options/configuration-options.md) to individual columns (or ranges of columns).
     *
     * You can set the `columns` option to one of the following:
     * - An array of objects (each object represents one column)
     * - A function that returns an array of objects
     *
     * The `columns` option overwrites the [top-level grid options](@/guides/getting-started/configuration-options/configuration-options.md#set-grid-options).
     *
     * When you use `columns`, the [`startCols`](#startCols), [`minCols`](#minCols), and [`maxCols`](#maxCols) options are ignored.
     *
     * Read more:
     * - [Configuration options: Setting column options](@/guides/getting-started/configuration-options/configuration-options.md#set-column-options)
     * - [`startCols`](#startCols)
     * - [`minCols`](#minCols)
     * - [`maxCols`](#maxCols)
     * - [`data`](#data)
     *
     * @memberof Options#
     * @type {object[]|Function}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // set the `columns` option to an array of objects
     * // each object represents one column
     * columns: [
     *   {
     *     // column options for the first (by physical index) column
     *     type: 'numeric',
     *     numericFormat: {
     *       pattern: '0,0.00 $'
     *     }
     *   },
     *   {
     *     // column options for the second (by physical index) column
     *     type: 'text',
     *     readOnly: true
     *   }
     * ],
     *
     * // or set the `columns` option to a function, based on physical indexes
     * columns(index) {
     *   return {
     *     type: index > 0 ? 'numeric' : 'text',
     *     readOnly: index < 1
     *   }
     * }
     * ```
     */
    columns: void 0,
    /**
     * @description
     * The `columnSorting` option configures the [`ColumnSorting`](@/api/columnSorting.md) plugin.
     *
     * You can set the `columnSorting` option to one of the following:
     *
     * | Setting    | Description                                                                                                                            |
     * | ---------- | -------------------------------------------------------------------------------------------------------------------------------------- |
     * | `true`     | Enable the [`ColumnSorting`](@/api/columnSorting.md) plugin with the default configuration                                             |
     * | `false`    | Disable the [`ColumnSorting`](@/api/columnSorting.md) plugin                                                                           |
     * | An object  | - Enable the [`ColumnSorting`](@/api/columnSorting.md) plugin<br>- Modify the [`ColumnSorting`](@/api/columnSorting.md) plugin options |
     *
     * If you set the `columnSorting` option to an object,
     * you can set the following [`ColumnSorting`](@/api/columnSorting.md) plugin options:
     *
     * | Option                   | Possible settings                                                                                                                                |
     * | ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------ |
     * | `indicator`              | `true`: Display the arrow icon in the column header, to indicate a sortable column<br>`false`: Don't display the arrow icon in the column header  |
     * | `headerAction`           | `true`: Enable clicking on the column header to sort the column<br>`false`: Disable clicking on the column header to sort the column             |
     * | `sortEmptyCells`         | `true`: Sort empty cells as well<br>`false`: Place empty cells at the end                                                                        |
     * | `compareFunctionFactory` | A [custom compare function](@/guides/rows/rows-sorting/rows-sorting.md#add-a-custom-comparator)                                                                |
     *
     * If you set the `columnSorting` option to an object,
     * you can also sort individual columns at Handsontable's initialization.
     * In the `columnSorting` object, add an object named `initialConfig`,
     * with the following properties:
     *
     * | Option      | Possible settings   | Description                                                      |
     * | ----------- | ------------------- | ---------------------------------------------------------------- |
     * | `column`    | A number            | The index of the column that you want to sort at initialization  |
     * | `sortOrder` | `'asc'` \| `'desc'` | The sorting order:<br>`'asc'`: ascending<br>`'desc'`: descending |
     *
     * Read more:
     * - [Rows sorting](@/guides/rows/rows-sorting/rows-sorting.md)
     * - [Rows sorting: Custom compare functions](@/guides/rows/rows-sorting/rows-sorting.md#add-a-custom-comparator)
     * - [`multiColumnSorting`](#multiColumnSorting)
     *
     * @memberof Options#
     * @type {boolean|object}
     * @default undefined
     * @category ColumnSorting
     *
     * @example
     * ```js
     * // enable the `ColumnSorting` plugin
     * columnSorting: true
     *
     * // enable the `ColumnSorting` plugin with custom configuration
     * columnSorting: {
     *   // sort empty cells as well
     *   sortEmptyCells: true,
     *   // display the arrow icon in the column header
     *   indicator: true,
     *   // disable clicking on the column header to sort the column
     *   headerAction: false,
     *   // add a custom compare function
     *   compareFunctionFactory(sortOrder, columnMeta) {
     *     return function(value, nextValue) {
     *       // some value comparisons which will return -1, 0 or 1...
     *     }
     *   }
     * }
     *
     * // enable the `ColumnSorting` plugin
     * columnSorting: {
     *   // at initialization, sort column 1 in ascending order
     *   initialConfig: {
     *     column: 1,
     *     sortOrder: 'asc'
     *   },
     *   // at initialization, sort column 2 in descending order
     *   initialConfig: {
     *     column: 2,
     *     sortOrder: 'desc'
     *   }
     * }
     * ```
     */
    columnSorting: void 0,
    /**
     * @description
     * The `columnSummary` option configures the [`ColumnSummary`](@/api/columnSummary.md) plugin.
     *
     * You can set the `columnSummary` option to an array of objects.
     * Each object configures a single column summary, using the following properties:
     *
     * | Property                 | Possible values                                                         | Description                                                                                                                  |
     * | ------------------------ | ----------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- |
     * | `sourceColumn`           | A number                                                                | [Column to summarize](@/guides/columns/column-summary/column-summary.md#step-2-select-cells-that-you-want-to-summarize)                     |
     * | `ranges`                 | An array                                                                | [Ranges of rows to summarize](@/guides/columns/column-summary/column-summary.md#step-2-select-cells-that-you-want-to-summarize)             |
     * | `type`                   | `'sum'` \| `'min'` \| `'max'` \| `'count'` \| `'average'` \| `'custom'` | [Summary function](@/guides/columns/column-summary/column-summary.md#step-3-calculate-your-summary)                                         |
     * | `destinationRow`         | A number                                                                | [Destination cell's row coordinate](@/guides/columns/column-summary/column-summary.md#step-4-provide-the-destination-cell-s-coordinates)    |
     * | `destinationColumn`      | A number                                                                | [Destination cell's column coordinate](@/guides/columns/column-summary/column-summary.md#step-4-provide-the-destination-cell-s-coordinates) |
     * | `forceNumeric`           | `true`  \| `false`                                                      | [Treat non-numerics as numerics](@/guides/columns/column-summary/column-summary.md#force-numeric-values)                                  |
     * | `reversedRowCoords`      | `true`  \| `false`                                                      | [Reverse row coordinates](@/guides/columns/column-summary/column-summary.md#step-5-make-room-for-the-destination-cell)                      |
     * | `suppressDataTypeErrors` | `true`  \| `false`                                                      | [Suppress data type errors](@/guides/columns/column-summary/column-summary.md#throw-data-type-errors)                                    |
     * | `readOnly`               | `true`  \| `false`                                                      | Make summary cell read-only                                                                                                  |
     * | `roundFloat`             | `true`  \| `false`  \| A number                                         | [Round summary result](@/guides/columns/column-summary/column-summary.md#round-a-column-summary-result)                                  |
     * | `customFunction`         | A function                                                              | [Custom summary function](@/guides/columns/column-summary/column-summary.md#implement-a-custom-summary-function)                         |
     *
     * Read more:
     * - [Column summary](@/guides/columns/column-summary/column-summary.md)
     * - [Plugins: `ColumnSummary`](@/api/columnSummary.md)
     *
     * @memberof Options#
     * @type {object[]|Function}
     * @default undefined
     * @category ColumnSummary
     *
     * @example
     * ```js
     * columnSummary: [
     *   {
     *     sourceColumn: 0,
     *     ranges: [
     *       [0, 2], [4], [6, 8]
     *     ],
     *     type: 'custom',
     *     destinationRow: 4,
     *     destinationColumn: 1,
     *     forceNumeric: true,
     *     reversedRowCoords: true,
     *     suppressDataTypeErrors: false,
     *     readOnly: true,
     *     roundFloat: false,
     *     customFunction(endpoint) {
     *        return 100;
     *     }
     *   }
     * ],
     * ```
     */
    columnSummary: void 0,
    /**
     * The `colWidths` option sets columns' widths, in pixels.
     *
     * The default column width is 50px. To change it, set the `colWidths` option to one of the following:
     *
     * | Setting     | Description                                                                                          | Example                                                           |
     * | ----------- | ---------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------- |
     * | A number    | Set the same width for every column                                                                  | `colWidths: 100`                                                  |
     * | A string    | Set the same width for every column                                                                  | `colWidths: '100px'`                                              |
     * | An array    | Set widths separately for each column                                                                | `colWidths: [100, 120, undefined]`                                |
     * | A function  | Set column widths dynamically,<br>on each render                                                     | `colWidths(visualColumnIndex) { return visualColumnIndex * 10; }` |
     * | `undefined` | Used by the [modifyColWidth](@/api/hooks.md#modifyColWidth) hook,<br>to detect column width changes. | `colWidths: undefined`                                            |
     *
     * Setting `colWidths` even for a single column disables the {@link AutoColumnSize} plugin
     * for all columns. For this reason, if you use `colWidths`, we recommend you set a width for each one
     * of your columns. Otherwise, every column with an undefined width defaults back to 50px,
     * which may cut longer columns names.
     *
     * Read more:
     * - [Column width](@/guides/columns/column-width/column-width.md)
     * - [Hooks: `modifyColWidth`](@/api/hooks.md#modifyColWidth)
     * - [`autoColumnSize`](#autoColumnSize)
     *
     * @memberof Options#
     * @type {number|number[]|string|string[]|Array<undefined>|Function}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // set every column's width to 100px
     * colWidths: 100,
     *
     * // set every column's width to 100px
     * colWidths: '100px',
     *
     * // set the first (by visual index) column's width to 100
     * // set the second (by visual index) column's width to 120
     * // set the third (by visual index) column's width to `undefined`, so that it defaults to 50px
     * // set any other column's width to the default 50px (note that longer cell values and column names can get cut)
     * colWidths: [100, 120, undefined],
     *
     * // set each column's width individually, using a function
     * colWidths(visualColumnIndex) {
     *   return visualColumnIndex * 10;
     * },
     * ```
     */
    colWidths: void 0,
    /**
     * The `commentedCellClassName` option lets you add a CSS class name to cells
     * that have comments.
     *
     * Read more:
     * - [Comments](@/guides/cell-features/comments/comments.md)
     * - [`comments`](#comments)
     * - [`readOnlyCellClassName`](#readOnlyCellClassName)
     * - [`currentRowClassName`](#currentRowClassName)
     * - [`currentHeaderClassName`](#currentHeaderClassName)
     * - [`activeHeaderClassName`](#activeHeaderClassName)
     * - [`invalidCellClassName`](#invalidCellClassName)
     * - [`placeholderCellClassName`](#placeholderCellClassName)
     * - [`readOnlyCellClassName`](#readOnlyCellClassName)
     * - [`noWordWrapClassName`](#noWordWrapClassName)
     * - [`TableClassName`](#TableClassName)
     * - [`className`](#className)
     *
     * @memberof Options#
     * @type {string}
     * @default 'htCommentCell'
     * @category Core
     *
     * @example
     * ```js
     * // add a `has-comment` CSS class name
     * // to each cell that has a comment
     * commentedCellClassName: 'has-comment',
     * ```
     */
    commentedCellClassName: "htCommentCell",
    /**
     * @description
     * The `comments` option configures the [`Comments`](@/api/comments.md) plugin.
     *
     * You can set the `comments` option to one of the following:
     *
     * | Setting   | Description                                                                                                                                                                           |
     * | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `true`    | - Enable the [`Comments`](@/api/comments.md) plugin<br>- Add comment menu items to the [context menu](@/guides/accessories-and-menus/context-menu/context-menu.md)                                 |
     * | `false`   | Disable the [`Comments`](@/api/comments.md) plugin                                                                                                                                    |
     * | An object | - Enable the [`Comments`](@/api/comments.md) plugin<br>- Add comment menu items to the [context menu](@/guides/accessories-and-menus/context-menu/context-menu.md)<br>- Configure comment settings |
     *
     * If you set the `comments` option to an object, you can configure the following comment options:
     *
     * | Option         | Possible settings           | Description                                         |
     * | -------------- | --------------------------- | --------------------------------------------------- |
     * | `displayDelay` | A number (default: `250`)   | Display comments after a delay (in milliseconds)    |
     * | `readOnly`     | `true` \| `false` (default) | `true`: Make comments read-only                     |
     * | `style`        | An object                   | Set comment boxes' `width` and `height` (in pixels) |
     *
     * Read more:
     * - [Comments](@/guides/cell-features/comments/comments.md)
     * - [Context menu](@/guides/accessories-and-menus/context-menu/context-menu.md)
     * - [`width`](#width)
     * - [`height`](#height)
     * - [`readOnly`](#readOnly)
     * - [`commentedCellClassName`](#commentedCellClassName)
     *
     * @memberof Options#
     * @type {boolean|object[]}
     * @default false
     * @category Comments
     *
     * @example
     * ```js
     * // enable the `Comments` plugin
     * comments: true,
     *
     * // enable the `Comments` plugin
     * // and configure its settings
     * comments: {
     *   // display all comments with a 1-second delay
     *   displayDelay: 1000,
     *   // make all comments read-only
     *   readOnly: true,
     *   // set the default size of all comment boxes
     *   style: {
     *     width: 300,
     *     height: 100
     *   }
     * }
     * ```
     */
    comments: !1,
    /**
     * @description
     * The `contextMenu` option configures the [`ContextMenu`](@/api/contextMenu.md) plugin.
     *
     * You can set the `contextMenu` option to one of the following:
     *
     * | Setting   | Description                                                                                                                                                                                             |
     * | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `false`   | Disable the [`ContextMenu`](@/api/contextMenu.md) plugin                                                                                                                                                |
     * | `true`    | - Enable the [`ContextMenu`](@/api/contextMenu.md) plugin<br>- Use the [default context menu options](@/guides/accessories-and-menus/context-menu/context-menu.md#context-menu-with-default-options)                 |
     * | An array  | - Enable the [`ContextMenu`](@/api/contextMenu.md) plugin<br>- Modify [individual context menu options](@/guides/accessories-and-menus/context-menu/context-menu.md#context-menu-with-specific-options)              |
     * | An object | - Enable the [`ContextMenu`](@/api/contextMenu.md) plugin<br>- Apply a [custom context menu configuration](@/guides/accessories-and-menus/context-menu/context-menu.md#context-menu-with-a-fully-custom-configuration) |
     *
     * Read more:
     * - [Context menu](@/guides/accessories-and-menus/context-menu/context-menu.md)
     * - [Context menu: Context menu with default options](@/guides/accessories-and-menus/context-menu/context-menu.md#context-menu-with-default-options)
     * - [Context menu: Context menu with specific options](@/guides/accessories-and-menus/context-menu/context-menu.md#context-menu-with-specific-options)
     * - [Context menu: Context menu with fully custom configuration options](@/guides/accessories-and-menus/context-menu/context-menu.md#context-menu-with-a-fully-custom-configuration)
     * - [Plugins: `ContextMenu`](@/api/contextMenu.md)
     *
     * @memberof Options#
     * @type {boolean|string[]|object}
     * @default undefined
     * @category ContextMenu
     *
     * @example
     * ```js
     * // enable the `ContextMenu` plugin
     * // use the default context menu options
     * contextMenu: true,
     *
     * // enable the `ContextMenu` plugin
     * // and modify individual context menu options
     * contextMenu: ['row_above', 'row_below', '---------', 'undo', 'redo'],
     *
     * // enable the `ContextMenu` plugin
     * // and apply a custom context menu configuration
     * contextMenu: {
     *   items: {
     *     'option1': {
     *       name: 'Option 1'
     *     },
     *     'option2': {
     *       name: 'Option 2',
     *       submenu: {
     *         items: [
     *           {
     *             key: 'option2:suboption1',
     *             name: 'Suboption 1',
     *             callback: function(key, options) {
     *               ...
     *             }
     *           },
     *           ...
     *         ]
     *       }
     *     }
     *   }
     * },
     * ```
     */
    contextMenu: void 0,
    /**
     * @description
     * The `copyable` option determines whether a cell's value can be copied to the clipboard or not.
     *
     * You can set the `copyable` option to one of the following:
     *
     * | Setting                                                                                                        | Description                                                                                                            |
     * | -------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------- |
     * | `true` (default)                                                                                               | - On pressing <kbd>**Ctrl**</kbd>/<kbd>**Cmd**</kbd>+<kbd>**C**</kbd>, add the cell's value to the clipboard         |
     * | `false`<br>(default for the [`password`](@/guides/cell-types/password-cell-type/password-cell-type.md) [cell type](#type))        | - On pressing <kbd>**Ctrl**</kbd>/<kbd>**Cmd**</kbd>+<kbd>**C**</kbd>, add an empty string (`""`) to the clipboard   |
     *
     * Read more:
     * - [Clipboard](@/guides/cell-features/clipboard/clipboard.md)
     * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options/configuration-options.md#cascading-configuration)
     * - [Password cell type](@/guides/cell-types/password-cell-type/password-cell-type.md)
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * // enable copying for each cell of the entire grid
     * copyable: true,
     *
     * // enable copying for individual columns
     * columns: [
     *   {
     *     // enable copying for each cell of this column
     *     copyable: true
     *   },
     *   {
     *     // disable copying for each cell of this column
     *     copyable: false
     *   }
     * ]
     *
     * // enable copying for specific cells
     * cell: [
     *   {
     *     col: 0,
     *     row: 0,
     *     // disable copying for cell (0, 0)
     *     copyable: false,
     *   }
     * ],
     * ```
     */
    copyable: !0,
    /**
     * The `copyPaste` option configures the [`CopyPaste`](@/api/copyPaste.md) plugin.
     *
     * You can set the `copyPaste` option to one of the following:
     *
     * | Setting           | Description                                                                                                            |
     * | ----------------- | ---------------------------------------------------------------------------------------------------------------------- |
     * | `true` (default)  | Enable the [`CopyPaste`](@/api/copyPaste.md) plugin with the default configuration                                     |
     * | `false`           | Disable the [`CopyPaste`](@/api/copyPaste.md) plugin                                                                   |
     * | An object         | - Enable the [`CopyPaste`](@/api/copyPaste.md) plugin<br>- Modify the [`CopyPaste`](@/api/copyPaste.md) plugin options |
     *
     * ##### copyPaste: Additional options
     *
     * If you set the `copyPaste` option to an object, you can set the following `CopyPaste` plugin options:
     *
     * | Option                   | Possible settings                                  | Description                                                                                                                                                                                         |
     * | ------------------------ | -------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `columnsLimit`           | A number (default: `Infinity`)                     | The maximum number of columns that can be copied                                                                                                                                                    |
     * | `rowsLimit`              | A number (default: `Infinity`)                     | The maximum number of columns that can be copied                                                                                                                                                    |
     * | `pasteMode`              | `'overwrite'` \| `'shift_down'` \| `'shift_right'` | When pasting:<br>`'overwrite'`: overwrite the currently-selected cells<br>`'shift_down'`: move the currently-selected cells down<br>`'shift_right'`: move the currently-selected cells to the right |
     * | `copyColumnHeaders`      | Boolean (default: `false`)                         | `true`: add a context menu option for copying cells along with their nearest column headers                                                                                                         |
     * | `copyColumnGroupHeaders` | Boolean (default: `false`)                         | `true`: add a context menu option for copying cells along with all their related columns headers                                                                                                    |
     * | `copyColumnHeadersOnly`  | Boolean (default: `false`)                         | `true`: add a context menu option for copying column headers nearest to the selected cells (without copying cells)                                                                    |
     * | `uiContainer`            | An HTML element                                    | The UI container for the secondary focusable element                                                                                                                                                |
     *
     * Read more:
     * - [Plugins: `CopyPaste`](@/api/copyPaste.md)
     * - [Guides: Clipboard](@/guides/cell-features/clipboard/clipboard.md)
     *
     * @memberof Options#
     * @type {object|boolean}
     * @default true
     * @category CopyPaste
     *
     * @example
     * ```js
     * // enable the plugin with the default configuration
     * copyPaste: true // set by default
     *
     * // disable the plugin
     * copyPaste: false,
     *
     * // enable the plugin with a custom configuration
     * copyPaste: {
     *   // set a maximum number of columns that can be copied
     *   columnsLimit: 25,
     *
     *   // set a maximum number of rows that can be copied
     *   rowsLimit: 50,
     *
     *   // set the paste behavior
     *   pasteMode: 'shift_down',
     *
     *   // add the option to copy cells along with their nearest column headers
     *   copyColumnHeaders: true,
     *
     *   // add the option to copy cells along with all their related columns headers
     *   copyColumnGroupHeaders: true,
     *
     *   // add the option to copy just column headers (without copying cells)
     *   copyColumnHeadersOnly: true,
     *
     *   // set a UI container
     *   uiContainer: document.body,
     * },
     * ```
     */
    copyPaste: !0,
    /**
     * The `correctFormat` option configures whether incorrectly-formatted times and dates are amended or not.
     *
     * When the user enters dates and times, Handsontable can automatically adjust their format
     * to match the [`dateFormat`](#dateFormat) and [`timeFormat`](@/guides/cell-types/time-cell-type/time-cell-type.md) settings.
     *
     * You can set the `correctFormat` option to one of the following:
     *
     * | Setting           | Description                                                                                                                                               |
     * | ----------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `false` (default) | Don't correct the format of the entered date or time (treat the entered date or time as invalid)                                                          |
     * | `true`            | Correct the format of the entered date or time to match the [`dateFormat`](#dateFormat) or [`timeFormat`](@/guides/cell-types/time-cell-type/time-cell-type.md) settings |
     *
     * Read more:
     * - [Date cell type](@/guides/cell-types/date-cell-type/date-cell-type.md)
     * - [Time cell type](@/guides/cell-types/time-cell-type/time-cell-type.md)
     * - [`dateFormat`](#dateFormat)
     *
     * @memberof Options#
     * @type {boolean}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *   // set the `type` of each cell in this column to `date`
     *   type: 'date',
     *   // for every `date` cell of this column, set the date format to `YYYY-MM-DD`
     *   dateFormat: 'YYYY-MM-DD',
     *   // enforce the `YYYY-MM-DD` date format
     *   correctFormat: true
     *   },
     *
     *   {
     *   // set the `type` of each cell in this column to `time`
     *   type: 'time',
     *   // for every `time` cell of this column, set the time format to `h:mm:ss a`
     *   timeFormat: 'h:mm:ss a',
     *   // enforce the `h:mm:ss a` time format
     *   correctFormat: true
     *   },
     * ],
     * ```
     */
    correctFormat: !1,
    /**
     * The `currentColClassName` option lets you add a CSS class name
     * to each cell of the currently-visible, currently-selected columns.
     *
     * Read more:
     * - [`currentRowClassName`](#currentRowClassName)
     * - [`currentHeaderClassName`](#currentHeaderClassName)
     * - [`activeHeaderClassName`](#activeHeaderClassName)
     * - [`invalidCellClassName`](#invalidCellClassName)
     * - [`placeholderCellClassName`](#placeholderCellClassName)
     * - [`readOnlyCellClassName`](#readOnlyCellClassName)
     * - [`commentedCellClassName`](#commentedCellClassName)
     * - [`noWordWrapClassName`](#noWordWrapClassName)
     * - [`TableClassName`](#TableClassName)
     * - [`className`](#className)
     *
     * @memberof Options#
     * @type {string}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // add a `your-class-name` CSS class name
     * // to each cell of the currently-visible, currently-selected columns
     * currentColClassName: 'your-class-name',
     * ```
     */
    currentColClassName: void 0,
    /**
     * The `currentHeaderClassName` option lets you add a CSS class name
     * to every currently-visible, currently-selected header.
     *
     * Read more:
     * - [`currentRowClassName`](#currentRowClassName)
     * - [`currentColClassName`](#currentColClassName)
     * - [`activeHeaderClassName`](#activeHeaderClassName)
     * - [`invalidCellClassName`](#invalidCellClassName)
     * - [`readOnlyCellClassName`](#readOnlyCellClassName)
     * - [`commentedCellClassName`](#commentedCellClassName)
     * - [`noWordWrapClassName`](#noWordWrapClassName)
     * - [`TableClassName`](#TableClassName)
     * - [`className`](#className)
     *
     * @memberof Options#
     * @type {string}
     * @default 'ht__highlight'
     * @category Core
     *
     * @example
     * ```js
     * // add an `ht__highlight` CSS class name
     * // to every currently-visible, currently-selected header
     * currentHeaderClassName: 'ht__highlight',
     * ```
     */
    currentHeaderClassName: "ht__highlight",
    /**
     * The `currentRowClassName` option lets you add a CSS class name
     * to each cell of the currently-visible, currently-selected rows.
     *
     * Read more:
     * - [`currentColClassName`](#currentColClassName)
     * - [`currentHeaderClassName`](#currentHeaderClassName)
     * - [`activeHeaderClassName`](#activeHeaderClassName)
     * - [`invalidCellClassName`](#invalidCellClassName)
     * - [`placeholderCellClassName`](#placeholderCellClassName)
     * - [`readOnlyCellClassName`](#readOnlyCellClassName)
     * - [`commentedCellClassName`](#commentedCellClassName)
     * - [`noWordWrapClassName`](#noWordWrapClassName)
     * - [`TableClassName`](#TableClassName)
     * - [`className`](#className)
     *
     * @memberof Options#
     * @type {string}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // add a `your-class-name` CSS class name
     * // to each cell of the currently-visible, currently-selected rows
     * currentRowClassName: 'your-class-name',
     * ```
     */
    currentRowClassName: void 0,
    /**
     * @description
     * The `customBorders` option configures the [`CustomBorders`](@/api/customBorders.md) plugin.
     *
     * To enable the [`CustomBorders`](@/api/customBorders.md) plugin
     * (and add its menu items to the [context menu](@/guides/accessories-and-menus/context-menu/context-menu.md)),
     * set the `customBorders` option to `true`.
     *
     * To enable the [`CustomBorders`](@/api/customBorders.md) plugin
     * and add a predefined border around a particular cell,
     * set the `customBorders` option to an array of objects.
     * Each object represents a border configuration for one cell, and has the following properties:
     *
     * | Property | Sub-properties     | Types                              | Description                                                       |
     * | -------- | ------------------ | ---------------------------------- | ----------------------------------------------------------------- |
     * | `row`    | -                  | `row`: Number                      | The cell's row coordinate.                                        |
     * | `col`    | -                  | `col`: Number                      | The cell's column coordinate.                                     |
     * | `start`  | `width`<br>`color` | `width`: Number<br>`color`: String | If the [layout direction](@/guides/internationalization/layout-direction/layout-direction.md) is LTR (default): `start` sets the width (`width`) and color (`color`) of the left-hand border.<br><br>If the [layout direction](@/guides/internationalization/layout-direction/layout-direction.md) is RTL: `start` sets the width (`width`) and color (`color`) of the right-hand border. |
     * | `end`    | `width`<br>`color` | `width`: Number<br>`color`: String | If the [layout direction](@/guides/internationalization/layout-direction/layout-direction.md) is LTR (default): `end` sets the width (`width`) and color (`color`) of the right-hand border.<br><br>If the [layout direction](@/guides/internationalization/layout-direction/layout-direction.md) is RTL: `end` sets the width (`width`) and color (`color`) of the left-hand border. |
     * | `top`    | `width`<br>`color` | `width`: Number<br>`color`: String | Sets the width (`width`) and color (`color`) of the top border. |
     * | `bottom` | `width`<br>`color` | `width`: Number<br>`color`: String | Sets the width (`width`) and color (`color`) of the bottom border. |
     *
     * To enable the [`CustomBorders`](@/api/customBorders.md) plugin
     * and add a predefined border around a range of cells,
     * set the `customBorders` option to an array of objects.
     * Each object represents a border configuration for a single range of cells, and has the following properties:
     *
     * | Property | Sub-properties                               | Types                                                            | Description                                                                                  |
     * | -------- | -------------------------------------------- | ---------------------------------------------------------------- | -------------------------------------------------------------------------------------------- |
     * | `range`  | `from` {`row`, `col`}<br>`to` {`row`, `col`} | `from`: Object<br>`to`: Object<br>`row`: Number<br>`col`: Number | If the [layout direction](@/guides/internationalization/layout-direction/layout-direction.md) is LTR (default):<br>- `from` selects the range's top-left corner.<br>- `to` selects the range's bottom-right corner.<br><br>If the [layout direction](@/guides/internationalization/layout-direction/layout-direction.md) is RTL: <br>- `from` selects the range's top-right corner.<br>- `to` selects the range's bottom-left corner. |
     * | `start`  | `width`<br>`color` | `width`: Number<br>`color`: String | If the [layout direction](@/guides/internationalization/layout-direction/layout-direction.md) is LTR (default): `start` sets the width (`width`) and color (`color`) of the left-hand border.<br><br>If the [layout direction](@/guides/internationalization/layout-direction/layout-direction.md) is RTL: `start` sets the width (`width`) and color (`color`) of the right-hand border. |
     * | `end`    | `width`<br>`color` | `width`: Number<br>`color`: String | If the [layout direction](@/guides/internationalization/layout-direction/layout-direction.md) is LTR (default): `end` sets the width (`width`) and color (`color`) of the right-hand border.<br><br>If the [layout direction](@/guides/internationalization/layout-direction/layout-direction.md) is RTL: `end` sets the width (`width`) and color (`color`) of the left-hand border. |
     * | `top`    | `width`<br>`color`                           | `width`: Number<br>`color`: String                               | Sets the width (`width`) and color (`color`) of the top border. |
     * | `bottom` | `width`<br>`color`                           | `width`: Number<br>`color`: String                               | Sets the width (`width`) and color (`color`) of the bottom border. |
     *
     * Read more:
     * - [Formatting cells: Custom cell borders](@/guides/cell-features/formatting-cells/formatting-cells.md#custom-cell-borders)
     * - [Context menu](@/guides/accessories-and-menus/context-menu/context-menu.md)
     * - [Plugins: `CustomBorders`](@/api/customBorders.md)
     * - [Layout direction](@/guides/internationalization/layout-direction/layout-direction.md)
     * - [`layoutDirection`](#layoutDirection)
     *
     * @memberof Options#
     * @type {boolean|object[]}
     * @default false
     * @category CustomBorders
     *
     * @example
     * ```js
     * // enable the `CustomBorders` plugin
     * customBorders: true,
     *
     * // enable the `CustomBorders` plugin
     * // and add a predefined border for a particular cell
     * customBorders: [
     *   // add an object with a border configuration for one cell
     *   {
     *     // set the cell's row coordinate
     *     row: 2,
     *     // set the cell's column coordinate
     *     col: 2,
     *     // set the left/right border's width and color
     *     start: {
     *       width: 2,
     *       color: 'red'
     *     },
     *     // set the right/left border's width and color
     *     end: {
     *       width: 1,
     *       color: 'green'
     *     },
     *     // set the top border's width and color
     *     top: '',
     *     // set the bottom border's width and color
     *     bottom: ''
     *   }
     * ],
     *
     * // enable the `CustomBorders` plugin
     * // and add a predefined border for a range of cells
     * customBorders: [
     *   // add an object with a border configuration for one range of cells
     *   {
     *     // select a range of cells
     *     range: {
     *       // set the range's top-left corner
     *       from: {
     *         row: 1,
     *         col: 1
     *       },
     *       // set the range's bottom-right corner
     *       to: {
     *         row: 3,
     *         col: 4
     *       }
     *     },
     *     // set the left/right border's width and color
     *     start: {
     *       width: 2,
     *       color: 'red'
     *     },
     *     // set the right/left border's width and color
     *     end: {},
     *     // set the top border's width and color
     *     top: {},
     *     // set the bottom border's width and color
     *     bottom: {}
     *   }
     * ],
     * ```
     */
    customBorders: !1,
    /**
     * @description
     * The `data` option sets the initial [data](@/guides/getting-started/binding-to-data/binding-to-data.md) of your Handsontable instance.
     *
     * Handsontable's data is bound to your source data by reference (i.e. when you edit Handsontable's data, your source data alters as well).
     *
     * You can set the `data` option:
     * - Either to an [array of arrays](@/guides/getting-started/binding-to-data/binding-to-data.md#array-of-arrays).
     * - Or to an [array of objects](@/guides/getting-started/binding-to-data/binding-to-data.md#array-of-objects).
     *
     * If you don't set the `data` option (or set it to `null`), Handsontable renders as an empty 5x5 grid by default.
     *
     * Read more:
     * - [Binding to data](@/guides/getting-started/binding-to-data/binding-to-data.md)
     * - [`dataSchema`](#dataSchema)
     * - [`startRows`](#startRows)
     * - [`startCols`](#startCols)
     *
     * @memberof Options#
     * @type {Array[]|object[]}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // as an array of arrays
     * data: [
     *   ['A', 'B', 'C'],
     *   ['D', 'E', 'F'],
     *   ['G', 'H', 'J']
     * ]
     *
     * // as an array of objects
     * data: [
     *   {id: 1, name: 'Ted Right'},
     *   {id: 2, name: 'Frank Honest'},
     *   {id: 3, name: 'Joan Well'},
     *   {id: 4, name: 'Gail Polite'},
     *   {id: 5, name: 'Michael Fair'},
     * ]
     * ```
     */
    data: void 0,
    /**
     * @description
     * If `true`, Handsontable will interpret the dots in the columns mapping as a nested object path. If your dataset contains
     * the dots in the object keys and you don't want Handsontable to interpret them as a nested object path, set this option to `false`.
     *
     * The option only works when defined in the global table settings.
     *
     * @since 14.4.0
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * // All dots are interpreted as nested object paths
     * dataDotNotation: true,
     * data: [
     *   { id: 1, name: { first: 'Ted', last: 'Right' }, user: { address: '1234 Any Street' } },
     * ],
     * columns={[
     *   { data: 'name.first' },
     *   { data: 'user.address' },
     * ]},
     * ```
     * ```js
     * // All dots are interpreted as simple object keys
     * dataDotNotation: false,
     * data: [
     *   { id: 1, 'name.first': 'Ted', 'user.address': '1234 Any Street' },
     * ],
     * columns={[
     *   { data: 'name.first' },
     *   { data: 'user.address' },
     * ]},
     * ```
     */
    dataDotNotation: !0,
    /**
     * @description
     * When the [`data`](#data) option is set to an [array of objects](@/guides/getting-started/binding-to-data/binding-to-data.md#array-of-objects)
     * (or is empty), the `dataSchema` option defines the structure of new rows.
     *
     * Using the `dataSchema` option, you can start out with an empty grid.
     *
     * You can set the `dataSchema` option to one of the following:
     * - An object
     * - A function
     *
     * Read more:
     * - [Binding to data: Array of objects with custom data schema](@/guides/getting-started/binding-to-data/binding-to-data.md#array-of-objects-with-custom-data-schema)
     * - [Binding to data: Function data source and schema](@/guides/getting-started/binding-to-data/binding-to-data.md#function-data-source-and-schema)
     * - [`data`](#data)
     *
     * @memberof Options#
     * @type {object|Function}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // with `dataSchema`, you can start with an empty grid
     * data: null,
     * dataSchema: {id: null, name: {first: null, last: null}, address: null},
     * colHeaders: ['ID', 'First Name', 'Last Name', 'Address'],
     * columns: [
     *   {data: 'id'},
     *   {data: 'name.first'},
     *   {data: 'name.last'},
     *   {data: 'address'}
     * ],
     * startRows: 5,
     * minSpareRows: 1
     * ```
     */
    dataSchema: void 0,
    /**
     * The `dateFormat` option configures the date format accepted by [`date`](@/guides/cell-types/date-cell-type/date-cell-type.md) cells.
     *
     * You can set the `dateFormat` option to a string with a proper date format. The default value is: `'DD/MM/YYYY'`.
     *
     * To automatically correct dates whose format doesn't match the `dateFormat` setting, use the [`correctFormat`](#correctFormat) option.
     *
     * Read more:
     * - [Date cell type](@/guides/cell-types/date-cell-type/date-cell-type.md)
     * - [`correctFormat`](#correctFormat)
     * - [`defaultDate`](#defaultDate)
     *
     * @memberof Options#
     * @type {string}
     * @default 'DD/MM/YYYY'
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *   // set the `type` of each cell in this column to `date`
     *   type: 'date',
     *   // for every `date` cell of this column, set the date format to `YYYY-MM-DD`
     *   dateFormat: 'YYYY-MM-DD',
     *   },
     * ],
     * ```
     */
    dateFormat: "DD/MM/YYYY",
    /**
     * The `timeFormat` option configures the time format accepted by [`time`](@/guides/cell-types/time-cell-type/time-cell-type.md) cells.
     *
     * You can set the `timeFormat` option to a string with a proper time format. The default value is: `'h:mm:ss a'`.
     *
     * To automatically correct times whose format doesn't match the `timeFormat` setting, use the [`correctFormat`](#correctFormat) option.
     *
     * Read more:
     * - [Time cell type](@/guides/cell-types/time-cell-type/time-cell-type.md)
     * - [`correctFormat`](#correctFormat)
     *
     * @memberof Options#
     * @type {string}
     * @default 'h:mm:ss a'
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *   // set the `type` of each cell in this column to `time`
     *   type: 'time',
     *   // for every `time` cell of this column, set the time format to `h:mm:ss a`
     *   timeFormat: 'h:mm:ss a',
     *   },
     * ],
     * ```
     */
    timeFormat: "h:mm:ss a",
    /**
     * The `datePickerConfig` option configures the `date` [cell editor](@/guides/cell-functions/cell-editor/cell-editor.md)'s date picker, which uses an external dependency: [Pikaday](https://github.com/Pikaday/Pikaday/tree/1.8.2).
     *
     * You can set the `datePickerConfig` option to an object with any of the available [Pikaday options](https://github.com/Pikaday/Pikaday/tree/1.8.2#configuration),
     * except for the following, which are always overwritten by the `date` [cell editor](@/guides/cell-functions/cell-editor/cell-editor.md):
     * - `bound`
     * - `container`
     * - `field`
     * - `trigger`
     *
     * If the `datePickerConfig` option is not defined, the `date` [cell editor](@/guides/cell-functions/cell-editor/cell-editor.md) overwrites the following [Pikaday options](https://github.com/Pikaday/Pikaday/tree/1.8.2#configuration) as well:
     *
     * | Pikaday option       | Handsontable's setting |
     * | -------------------- | ---------------------- |
     * | `format`             | `'DD/MM/YYYY'`         |
     * | `reposition`         | `false`                |
     *
     * Read more:
     * - [`editor`](#editor)
     * - [`dateFormat`](#dateFormat)
     * - [Cell editor](@/guides/cell-functions/cell-editor/cell-editor.md)
     * - [All Pikaday options &#8594;](https://github.com/Pikaday/Pikaday/tree/1.8.2#configuration)
     *
     * @memberof Options#
     * @type {object}
     * @default undefined
     * @category Core
     */
    datePickerConfig: void 0,
    /**
     * The `defaultDate` option configures the date displayed
     * in empty [`date`](@/guides/cell-types/date-cell-type/date-cell-type.md) cells.
     *
     * You can set the `defaultDate` option to a string.
     *
     * Read more:
     * - [Date cell type](@/guides/cell-types/date-cell-type/date-cell-type.md)
     * - [`dateFormat`](#dateFormat)
     *
     * @memberof Options#
     * @type {string}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *     // set the `type` of each cell in this column to `date`
     *     type: 'date',
     *     // in every empty `date` cell of this column, display `2015-02-02`
     *     defaultDate: '2015-02-02'
     *   }
     * ],
     * ```
     */
    defaultDate: void 0,
    /**
     * @description
     * The `disableVisualSelection` option configures how
     * [selection](@/guides/cell-features/selection/selection.md) is shown.
     *
     * You can set the `disableVisualSelection` option to one of the following:
     *
     * | Setting           | Description                                                                                         |
     * | ----------------- | --------------------------------------------------------------------------------------------------- |
     * | `false` (default) | - Show single-cell selection<br>- Show range selection<br>- Show header selection                   |
     * | `true`            | - Don't show single-cell selection<br>- Don't show range selection<br>- Don't show header selection |
     * | `'current'`       | - Don't show single-cell selection<br>- Show range selection<br>- Show header selection             |
     * | `'area'`          | - Show single-cell selection<br>- Don't show range selection<br>- Show header selection             |
     * | `'header'`        | - Show single-cell selection<br>- Show range selection<br>- Don't show header selection             |
     * | An array          | A combination of `'current'`, `'area'`, and/or `'header'`                                           |
     *
     * Read more:
     * - [Selection](@/guides/cell-features/selection/selection.md)
     *
     * @memberof Options#
     * @type {boolean|string|string[]}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * // don't show single-cell selection
     * // don't show range selection
     * // don't show header selection
     * disableVisualSelection: true,
     *
     * // don't show single-cell selection
     * // show range selection
     * // show header selection
     * disableVisualSelection: 'current',
     *
     * // don't show single-cell selection
     * // don't show range selection
     * // show header selection
     * disableVisualSelection: ['current', 'area'],
     * ```
     */
    disableVisualSelection: !1,
    /**
     * @description
     * The `dragToScroll` option configures the [`DragToScroll`](@/api/dragToScroll.md) plugin.
     *
     * You can set the `dragToScroll` option to one of the following:
     *
     * | Setting          | Description                                                                 |
     * | ---------------- | --------------------------------------------------------------------------- |
     * | `true` (default) | When selection reaches the edge of the grid's viewport, scroll the viewport |
     * | `false`          | Don't scroll the viewport                                                   |
     *
     * Read more:
     * - [Plugins: `DragToScroll`](@/api/dragToScroll.md)
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category DragToScroll
     *
     * @example
     * ```js
     * // when selection reaches the edge of the grid's viewport, scroll the viewport
     * dragToScroll: true,
     * ```
     */
    dragToScroll: !0,
    /**
     * The `dropdownMenu` option configures the [`DropdownMenu`](@/api/dropdownMenu.md) plugin.
     *
     * You can set the `dropdownMenu` option to one of the following:
     *
     * | Setting   | Description                                                                                                                                                                                  |
     * | --------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `false`   | Disable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin                                                                                                                                   |
     * | `true`    | - Enable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin<br>- Use the [default context menu options](@/guides/accessories-and-menus/context-menu/context-menu.md#context-menu-with-default-options)    |
     * | An array  | - Enable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin<br>- Modify [individual context menu options](@/guides/accessories-and-menus/context-menu/context-menu.md#context-menu-with-specific-options) |
     * | An object | - Enable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin<br>- Apply a custom dropdown menu configuration                                                                                  |
     *
     * Read more:
     * - [Context menu](@/guides/accessories-and-menus/context-menu/context-menu.md)
     * - [Plugins: `DropdownMenu`](@/api/dropdownMenu.md)
     *
     * @memberof Options#
     * @type {boolean|object|string[]}
     * @default undefined
     * @category DropdownMenu
     *
     * @example
     * ```js
     * // enable the `DropdownMenu` plugin
     * // use the default context menu options
     * dropdownMenu: true,
     *
     * // enable the `DropdownMenu` plugin
     * // and modify individual context menu options
     * dropdownMenu: ['---------', 'undo', 'redo'],
     *
     * // enable the `DropdownMenu` plugin
     * // and apply a custom dropdown menu configuration
     * dropdownMenu: {
     *   items: {
     *     'option1': {
     *       name: 'Option 1'
     *     },
     *     'option2': {
     *       name: 'Option 2',
     *       submenu: {
     *         items: [
     *           {
     *             key: 'option2:suboption1',
     *             name: 'Suboption 1',
     *             callback(key, options) {
     *               ...
     *             }
     *           },
     *           ...
     *         ]
     *       }
     *     }
     *   }
     * },
     * ```
     */
    dropdownMenu: void 0,
    /**
     * The `editor` option sets a [cell editor](@/guides/cell-functions/cell-editor/cell-editor.md) for a cell.
     *
     * You can set the `editor` option to one of the following [cell editor aliases](@/guides/cell-functions/cell-editor/cell-editor.md):
     *
     * | Alias               | Cell editor function                                                       |
     * | ------------------- | -------------------------------------------------------------------------- |
     * | A custom alias      | Your [custom cell editor](@/guides/cell-functions/cell-editor/cell-editor.md) function |
     * | `'autocomplete'`    | `AutocompleteEditor`                                                       |
     * | `'base'`            | `BaseEditor`                                                               |
     * | `'checkbox'`        | `CheckboxEditor`                                                           |
     * | `'date'`            | `DateEditor`                                                               |
     * | `'dropdown'`        | `DropdownEditor`                                                           |
     * | `'handsontable'`    | `HandsontableEditor`                                                       |
     * | `'numeric'`         | `NumericEditor`                                                            |
     * | `'password'`        | `PasswordEditor`                                                           |
     * | `'select'`          | `SelectEditor`                                                             |
     * | `'text'`            | `TextEditor`                                                               |
     * | `'time'`            | `TimeEditor`                                                               |
     *
     * To disable editing cells through cell editors,
     * set the `editor` option to `false`.
     * You'll still be able to change cells' content through Handsontable's API
     * or through plugins (e.g. [`CopyPaste`](@/api/copyPaste.md)), though.
     *
     * To set the [`editor`](#editor), [`renderer`](#renderer), and [`validator`](#validator)
     * options all at once, use the [`type`](#type) option.
     *
     * Read more:
     * - [Cell editor](@/guides/cell-functions/cell-editor/cell-editor.md)
     * - [Cell type](@/guides/cell-types/cell-type/cell-type.md)
     * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options/configuration-options.md#cascading-configuration)
     * - [`type`](#type)
     *
     * @memberof Options#
     * @type {string|Function|boolean}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // use the `numeric` editor for each cell of the entire grid
     * editor: 'numeric',
     *
     * // apply the `editor` option to individual columns
     * columns: [
     *   {
     *     // use the `autocomplete` editor for each cell of this column
     *     editor: 'autocomplete'
     *   },
     *   {
     *     // disable editing cells through cell editors for each cell of this column
     *     editor: false
     *   }
     * ]
     * ```
     */
    editor: void 0,
    /**
     * The `enterBeginsEditing` option configures the action of the <kbd>**Enter**</kbd> key.
     *
     * You can set the `enterBeginsEditing` option to one of the following:
     *
     * | Setting          | Description                                                                                                                                                                                               |
     * | ---------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `true` (default) | - On pressing <kbd>**Enter**</kbd> once, enter the editing mode of the active cell<br>- On pressing <kbd>**Enter**</kbd> twice, move to another cell,<br>as configured by the [`enterMoves`](#enterMoves) setting |
     * | `false`          | - On pressing <kbd>**Enter**</kbd> once, move to another cell,<br>as configured by the [`enterMoves`](#enterMoves) setting                                                                                    |
     *
     * Read more:
     * - [`enterMoves`](#enterMoves)
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * // press Enter once to start editing
     * // press Enter twice to move to another cell
     * enterBeginsEditing: true,
     *
     * // press Enter once to move to another cell
     * enterBeginsEditing: false,
     * ```
     */
    enterBeginsEditing: !0,
    /**
     * The `enterMoves` option configures the action of the <kbd>**Enter**</kbd> key.
     *
     * If the [`enterBeginsEditing`](#enterBeginsEditing) option is set to `true`,
     * the `enterMoves` setting applies to the **second** pressing of the <kbd>**Enter**</kbd> key.
     *
     * If the [`enterBeginsEditing`](#enterBeginsEditing) option is set to `false`,
     * the `enterMoves` setting applies to the **first** pressing of the <kbd>**Enter**</kbd> key.
     *
     * You can set the `enterMoves` option to an object with the following properties
     * (or to a function that returns such an object):
     *
     * | Property | Type   | Description                                                                                                                                              |
     * | -------- | ------ | -------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `col`    | Number | - On pressing <kbd>**Enter**</kbd>, move selection `col` columns right<br>- On pressing <kbd>**Shift**</kbd>+<kbd>**Enter**</kbd>, move selection `col` columns left |
     * | `row`    | Number | - On pressing <kbd>**Enter**</kbd>, move selection `row` rows down<br>- On pressing <kbd>**Shift**</kbd>+<kbd>**Enter**</kbd>, move selection `row` rows up          |
     *
     * Read more:
     * - [`enterBeginsEditing`](#enterBeginsEditing)
     *
     * @memberof Options#
     * @type {object|Function}
     * @default {col: 0, row: 1}
     * @category Core
     *
     * @example
     * ```js
     * // on pressing Enter, move selection 1 column right and 1 row down
     * // on pressing Shift+Enter, move selection 1 column left and 1 row up
     * enterMoves: {col: 1, row: 1},
     *
     * // the same setting, as a function
     * // `event` is a DOM Event object received on pressing Enter
     * // you can use it to check whether the user pressed Enter or Shift+Enter
     * enterMoves(event) {
     *   return {col: 1, row: 1};
     * },
     * ```
     */
    enterMoves: {
      col: 0,
      row: 1
    },
    /**
     * The `fillHandle` option configures the [Autofill](@/api/autofill.md) plugin.
     *
     * You can set the `fillHandle` option to one the following:
     *
     * | Setting        | Description                                                                |
     * | -------------- | -------------------------------------------------------------------------- |
     * | `true`         | - Enable autofill in all directions<br>- Add the fill handle               |
     * | `false`        | Disable autofill                                                           |
     * | `'vertical'`   | - Enable vertical autofill<br>- Add the fill handle                        |
     * | `'horizontal'` | - Enable horizontal autofill<br>- Add the fill handle                      |
     * | An object      | - Enable autofill<br>- Add the fill handle<br>- Configure autofill options |
     *
     * If you set the `fillHandle` option to an object, you can configure the following autofill options:
     *
     * | Option          | Possible settings              | Description                                                                                               |
     * | --------------- | ------------------------------ | --------------------------------------------------------------------------------------------------------- |
     * | `autoInsertRow` | `true` (default) \| `false`    | `true`: When you reach the grid's bottom, add new rows<br>`false`: When you reach the grid's bottom, stop |
     * | `direction`     | `'vertical'` \| `'horizontal'` | `'vertical'`: Enable vertical autofill<br>`'horizontal'`: Enable horizontal autofill                      |
     *
     * Read more:
     * - [AutoFill values](@/guides/cell-features/autofill-values/autofill-values.md)
     *
     * @memberof Options#
     * @type {boolean|string|object}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * // enable autofill in all directions
     * // with `autoInsertRow` enabled
     * fillHandle: true,
     *
     * // enable vertical autofill
     * // with `autoInsertRow` enabled
     * fillHandle: 'vertical',
     *
     * // enable horizontal autofill
     * // with `autoInsertRow` enabled
     * fillHandle: 'horizontal',
     *
     * // enable autofill in all directions
     * // with `autoInsertRow` disabled
     * fillHandle: {
     *   autoInsertRow: false,
     * },
     *
     * // enable vertical autofill
     * // with `autoInsertRow` disabled
     * fillHandle: {
     *   autoInsertRow: false,
     *   direction: 'vertical'
     * },
     * ```
     */
    fillHandle: {
      autoInsertRow: !1
    },
    /**
     * The `filter` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type/autocomplete-cell-type.md) cells'
     * lists are updated by the end user's input.
     *
     * You can set the `filter` option to one of the following:
     *
     * | Setting          | Description                                                                                                           |
     * | ---------------- | --------------------------------------------------------------------------------------------------------------------- |
     * | `true` (default) | When the end user types into the input area, only options matching the input are displayed                            |
     * | `false`          | When the end user types into the input area, all options are displayed<br>(options matching the input are put in bold |
     *
     * Read more:
     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type/autocomplete-cell-type.md)
     * - [`source`](#source)
     * - [`filteringCaseSensitive`](#filteringCaseSensitive)
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * columns: [{
     *   // set the `type` of each cell in this column to `autocomplete`
     *   type: 'autocomplete',
     *   // set options available in every `autocomplete` cell of this column
     *   source: ['A', 'B', 'C'],
     *   // when the end user types in `A`, display only the A option
     *   // when the end user types in `B`, display only the B option
     *   // when the end user types in `C`, display only the C option
     *   filter: true
     * }],
     * ```
     */
    filter: !0,
    /**
     * The `filteringCaseSensitive` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type/autocomplete-cell-type.md) cells'
     * input is case-sensitive.
     *
     * You can set the `filteringCaseSensitive` option to one of the following:
     *
     * | Setting           | Description                                                                                        |
     * | ----------------- | -------------------------------------------------------------------------------------------------- |
     * | `false` (default) | [`autocomplete`](@/guides/cell-types/autocomplete-cell-type/autocomplete-cell-type.md) cells' input is not case-sensitive |
     * | `true`            | [`autocomplete`](@/guides/cell-types/autocomplete-cell-type/autocomplete-cell-type.md) cells' input is case-sensitive     |
     *
     * Read more:
     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type/autocomplete-cell-type.md)
     * - [`source`](#source)
     * - [`filter`](#filter)
     *
     * @memberof Options#
     * @type {boolean}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *     type: 'autocomplete',
     *     source: [ ... ],
     *     // match case while searching autocomplete options
     *     filteringCaseSensitive: true
     *   }
     * ],
     * ```
     */
    filteringCaseSensitive: !1,
    /**
     * The `filters` option configures the [`Filters`](@/api/filters.md) plugin.
     *
     * You can set the `filters` option to one of the following:
     *
     * | Setting | Description                                      |
     * | ------- | ------------------------------------------------ |
     * | `false` | Disable the [`Filters`](@/api/filters.md) plugin |
     * | `true`  | Enable the [`Filters`](@/api/filters.md) plugin  |
     *
     * Read more:
     * - [Column filter](@/guides/columns/column-filter/column-filter.md)
     * - [Plugins: `Filters`](@/api/filters.md)
     * - [`dropdownMenu`](#dropdownMenu)
     *
     * @memberof Options#
     * @type {boolean}
     * @default undefined
     * @category Filters
     *
     * @example
     * ```js
     * // enable the `Filters` plugin
     * filters: true,
     * ```
     */
    filters: void 0,
    /**
     * `fixedColumnsLeft` is a legacy option.
     *
     * If your grid's [layout direction](@/guides/internationalization/layout-direction/layout-direction.md) is LTR (default), `fixedColumnsLeft` acts like the [`fixedColumnsStart`](#fixedColumnsStart) option.
     *
     * If your grid's [layout direction](@/guides/internationalization/layout-direction/layout-direction.md) is RTL, using `fixedColumnsLeft` throws an error.
     *
     * Use [`fixedColumnsStart`](#fixedColumnsStart), which works in any layout direction.
     *
     * Read more:
     * - [`fixedColumnsStart`](#fixedcolumnsstart)
     *
     * @memberof Options#
     * @type {number}
     * @default 0
     * @category Core
     *
     * @example
     * ```js
     * // freeze the first 3 columns from the left
     * fixedColumnsLeft: 3,
     * ```
     */
    fixedColumnsLeft: 0,
    /**
     * If your grid's [layout direction](@/guides/internationalization/layout-direction/layout-direction.md) is LTR (default), the `fixedColumnsStart` option sets the number of [frozen columns](@/guides/columns/column-freezing/column-freezing.md) at the left-hand edge of the grid.
     *
     * If your grid's [layout direction](@/guides/internationalization/layout-direction/layout-direction.md) is RTL, the `fixedColumnsStart` option sets the number of [frozen columns](@/guides/columns/column-freezing/column-freezing.md) at the right-hand edge of the grid.
     *
     * Read more:
     * - [Column freezing](@/guides/columns/column-freezing/column-freezing.md)
     * - [Layout direction](@/guides/internationalization/layout-direction/layout-direction.md)
     * - [`fixedColumnsLeft`](#fixedcolumnsleft)
     * - [`layoutDirection`](#layoutDirection)
     *
     * @memberof Options#
     * @type {number}
     * @default 0
     * @category Core
     *
     * @example
     * ```js
     * // when `layoutDirection` is set to `inherit` (default)
     * // freeze the first 3 columns from the left or from the right
     * // depending on your HTML document's `dir` attribute
     * layoutDirection: 'inherit',
     * fixedColumnsStart: 3,
     *
     * // when `layoutDirection` is set to `rtl`
     * // freeze the first 3 columns from the right
     * // regardless of your HTML document's `dir` attribute
     * layoutDirection: 'rtl',
     * fixedColumnsStart: 3,
     *
     * // when `layoutDirection` is set to `ltr`
     * // freeze the first 3 columns from the left
     * // regardless of your HTML document's `dir` attribute
     * layoutDirection: 'ltr',
     * fixedColumnsStart: 3,
     * ```
     */
    fixedColumnsStart: 0,
    /**
     * The `fixedRowsBottom` option sets the number of [frozen rows](@/guides/rows/row-freezing/row-freezing.md)
     * at the bottom of the grid.
     *
     * Read more:
     * - [Row freezing](@/guides/rows/row-freezing/row-freezing.md)
     *
     * @memberof Options#
     * @type {number}
     * @default 0
     * @category Core
     *
     * @example
     * ```js
     * // freeze the bottom 3 rows
     * fixedRowsBottom: 3,
     * ```
     */
    fixedRowsBottom: 0,
    /**
     * The `fixedRowsTop` option sets the number of [frozen rows](@/guides/rows/row-freezing/row-freezing.md) at the top of the grid.
     *
     * Read more:
     * - [Row freezing](@/guides/rows/row-freezing/row-freezing.md)
     *
     * @memberof Options#
     * @type {number}
     * @default 0
     * @category Core
     *
     * @example
     * ```js
     * // freeze the top 3 rows
     * fixedRowsTop: 3,
     * ```
     */
    fixedRowsTop: 0,
    /**
     * The `formulas` option configures the [`Formulas`](@/api/formulas.md) plugin.
     *
     * The [`Formulas`](@/api/formulas.md) plugin uses the [HyperFormula](https://handsontable.github.io/hyperformula/) calculation engine.
     * To install [HyperFormula](https://handsontable.github.io/hyperformula/), read the following:
     * - [Formula calculation: Initialization methods](@/guides/formulas/formula-calculation/formula-calculation.md#initialization-methods)
     *
     * You can set the `formulas` option to an object with the following properties:
     *
     * | Property    | Possible values                                                                                                                                                                                                        |
     * | ----------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `engine`    | `HyperFormula` \|<br>A [HyperFormula](https://handsontable.github.io/hyperformula/) instance \|<br>A [HyperFormula configuration](https://handsontable.github.io/hyperformula/api/interfaces/configparams.html) object |
     * | `sheetId`   | A number                                                                                                                                                                                                               |
     * | `sheetName` | A string                                                                                                                                                                                                               |
     *
     * Read more:
     * - [Plugins: `Formulas`](@/api/formulas.md)
     * - [Formula calculation](@/guides/formulas/formula-calculation/formula-calculation.md)
     * - [HyperFormula documentation: Client-side installation](https://handsontable.github.io/hyperformula/guide/client-side-installation)
     * - [HyperFormula documentation: Configuration options](https://handsontable.github.io/hyperformula/api/interfaces/configparams.html)
     *
     * @memberof Options#
     * @type {object}
     * @default undefined
     * @category Formulas
     *
     * @example
     * ```js
     * // either add the `HyperFormula` class
     * formulas: {
     *   // set `engine` to `HyperFormula`
     *   engine: HyperFormula,
     *   sheetId: 1,
     *   sheetName: 'Sheet 1'
     * }
     *
     * // or, add a HyperFormula instance
     * // initialized with the `'internal-use-in-handsontable'` license key
     * const hyperformulaInstance = HyperFormula.buildEmpty({
     *   licenseKey: 'internal-use-in-handsontable',
     * });
     *
     * formulas: {
     *   // set `engine` to a HyperFormula instance
     *   engine: hyperformulaInstance,
     *   sheetId: 1,
     *   sheetName: 'Sheet 1'
     * }
     *
     * // or, add a HyperFormula configuration object
     * formulas: {
     *   // set `engine` to a HyperFormula configuration object
     *   engine: {
     *     hyperformula: HyperFormula // or `engine: hyperformulaInstance`
     *     leapYear1900: false,       // this option comes from HyperFormula
     *     // add more HyperFormula configuration options
     *   },
     *   sheetId: 1,
     *   sheetName: 'Sheet 1'
     * }
     *
     * // use the same HyperFormula instance in multiple Handsontable instances
     *
     * // a Handsontable instance `hot1`
     * formulas: {
     *   engine: HyperFormula,
     *   sheetId: 1,
     *   sheetName: 'Sheet 1'
     * }
     *
     * // a Handsontable instance `hot2`
     * formulas: {
     *   engine: hot1.getPlugin('formulas').engine,
     *   sheetId: 1,
     *   sheetName: 'Sheet 1'
     * }
     * ```
     */
    formulas: void 0,
    /**
     * The `fragmentSelection` option configures text selection settings.
     *
     * You can set the `fragmentSelection` option to one of the following:
     *
     * | Setting           | Description                                        |
     * | ----------------- | ------------------------------------------------- |
     * | `false` (default) | Disable text selection                            |
     * | `true`            | Enable text selection in multiple cells at a time |
     * | `'cell'`          | Enable text selection in one cell at a time       |
     *
     * @memberof Options#
     * @type {boolean|string}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * // enable text selection in multiple cells at a time
     * fragmentSelection: true,
     *
     * // enable text selection in one cell a time
     * fragmentSelection: 'cell',
     * ```
     */
    fragmentSelection: !1,
    /**
     * The `headerClassName` option allows adding one or more class names to the column headers' inner `div` element.
     * It can be used to align the labels in the column headers to left, center or right by setting this option to
     * `htLeft`, `htCenter`, or `htRight` respectively.
     *
     * @since 14.5.0
     * @memberof Options#
     * @type {string}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // Adding class names to all column headers
     * headerClassName: 'htRight my-class',
     *
     * columns: [
     *  {
     *    // Adding class names to the column header of a single column
     *    headerClassName: 'htRight my-class',
     *  }
     * ]
     * ```
     */
    headerClassName: void 0,
    /**
     * The `height` option configures the height of your grid.
     *
     * You can set `height` option to one of the following:
     *
     * | Setting                                                                    | Example                    |
     * | -------------------------------------------------------------------------- | -------------------------- |
     * | A number of pixels                                                         | `height: 500`              |
     * | A string with a [CSS unit](https://www.w3schools.com/cssref/css_units.asp) | `height: '75vw'`           |
     * | A function that returns a valid number or string                           | `height() { return 500; }` |
     *
     * Read more:
     * - [Grid size](@/guides/getting-started/grid-size/grid-size.md)
     *
     * @memberof Options#
     * @type {number|string|Function}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // set the grid's height to 500px
     * height: 500,
     *
     * // set the grid's height to 75vh
     * height: '75vh',
     *
     * // set the grid's height to 500px, using a function
     * height() {
     *   return 500;
     * },
     * ```
     */
    height: void 0,
    /**
     * The `hiddenColumns` option configures the [`HiddenColumns`](@/api/hiddenColumns.md) plugin.
     *
     * You can set the `hiddenColumns` option to one of the following:
     *
     * | Setting   | Description                                                                                  |
     * | --------- | -------------------------------------------------------------------------------------------- |
     * | `false`   | Disable the [`HiddenColumns`](@/api/hiddenColumns.md) plugin                                 |
     * | `true`    | Enable the [`HiddenColumns`](@/api/hiddenColumns.md) plugin with the default plugin options  |
     * | An object | - Enable the [`HiddenColumns`](@/api/hiddenColumns.md) plugin<br>- Modify the plugin options |
     *
     * If you set the `hiddenColumns` to an object, you can set the following [`HiddenColumns`](@/api/hiddenColumns.md) plugin options:
     *
     * | Property           | Possible values     | Description                                                                                                                                             |
     * | ------------------ | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `columns`          | An array of indexes | An array of indexes of columns that are hidden at initialization                                                                                        |
     * | `copyPasteEnabled` | `true` \| `false`   | `true`: when copying or pasting data, take hidden columns into account<br>`false`: when copying or pasting data, don't take hidden columns into account |
     * | `indicators`       | `true` \| `false`   | `true`: display UI markers to indicate the presence of hidden columns<br>`false`: display UI markers                                                    |
     *
     * Read more:
     * - [Plugins: `HiddenColumns`](@/api/hiddenColumns.md)
     * - [Column hiding](@/guides/columns/column-hiding/column-hiding.md)
     *
     * @memberof Options#
     * @type {boolean|object}
     * @default undefined
     * @category HiddenColumns
     *
     * @example
     * ```js
     * // enable the `HiddenColumns` plugin
     * hiddenColumns: true,
     *
     * // enable `HiddenColumns` plugin, and modify the plugin options
     * hiddenColumns: {
     *   // set columns that are hidden by default
     *   columns: [5, 10, 15],
     *   // when copying or pasting data, take hidden columns into account
     *   copyPasteEnabled: true,
     *   // show where hidden columns are
     *   indicators: true
     * }
     * ```
     */
    hiddenColumns: void 0,
    /**
     * The `hiddenRows` option configures the [`HiddenRows`](@/api/hiddenRows.md) plugin.
     *
     * You can set the `hiddenRows` option to one of the following:
     *
     * | Setting   | Description                                                                            |
     * | --------- | -------------------------------------------------------------------------------------- |
     * | `false`   | Disable the [`HiddenRows`](@/api/hiddenRows.md) plugin                                 |
     * | `true`    | Enable the [`HiddenRows`](@/api/hiddenRows.md) plugin with the default plugin options  |
     * | An object | - Enable the [`HiddenRows`](@/api/hiddenRows.md) plugin<br>- Modify the plugin options |
     *
     * If you set the `hiddenRows` to an object, you can set the following [`HiddenRows`](@/api/hiddenRows.md) plugin options:
     *
     * | Property           | Possible values     | Description                                                                                                                                       |
     * | ------------------ | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `rows   `          | An array of indexes | An array of indexes of rows that are hidden at initialization                                                                                     |
     * | `copyPasteEnabled` | `true` \| `false`   | `true`: when copying or pasting data, take hidden rows into account<br>`false`: when copying or pasting data, don't take hidden rows into account |
     * | `indicators`       | `true` \| `false`   | `true`: display UI markers to indicate the presence of hidden rows<br>`false`: display UI markers                                                 |
     *
     * Read more:
     * - [Plugins: `HiddenRows`](@/api/hiddenRows.md)
     * - [Row hiding](@/guides/rows/row-hiding/row-hiding.md)
     *
     * @memberof Options#
     * @type {boolean|object}
     * @default undefined
     * @category HiddenRows
     *
     * @example
     * ```js
     * // enable the `HiddenRows` plugin
     * hiddenRows: true,
     *
     * // enable `HiddenRows` plugin, and modify the plugin options
     * hiddenRows: {
     *   // set rows that are hidden by default
     *   rows: [5, 10, 15],
     *   // when copying or pasting data, take hidden rows into account
     *   copyPasteEnabled: true,
     *   // show where hidden rows are
     *   indicators: true
     * }
     * ```
     */
    hiddenRows: void 0,
    /**
     * The `invalidCellClassName` option lets you add a CSS class name to cells
     * that were marked as `invalid` by the [cell validator](@/guides/cell-functions/cell-validator/cell-validator.md).
     *
     * Read more:
     * - [Cell validator](@/guides/cell-functions/cell-validator/cell-validator.md)
     * - [`currentRowClassName`](#currentRowClassName)
     * - [`currentHeaderClassName`](#currentHeaderClassName)
     * - [`activeHeaderClassName`](#activeHeaderClassName)
     * - [`currentColClassName`](#currentColClassName)
     * - [`readOnlyCellClassName`](#readOnlyCellClassName)
     * - [`commentedCellClassName`](#commentedCellClassName)
     * - [`noWordWrapClassName`](#noWordWrapClassName)
     * - [`TableClassName`](#TableClassName)
     * - [`className`](#className)
     *
     * @memberof Options#
     * @type {string}
     * @default 'htInvalid'
     * @category Core
     *
     * @example
     * ```js
     * // add a `highlight-error` CSS class name
     * // to every `invalid` cell`
     * invalidCellClassName: 'highlight-error',
     * ```
     */
    invalidCellClassName: "htInvalid",
    /**
     * The `imeFastEdit` option allows using the "fast edit" feature for the IME users. It's disabled by default
     * because of its incompatibility with some of the accessibility features.
     *
     * Enabling this option can make a negative impact on how some screen readers handle reading the table cells.
     *
     * @since 14.0.0
     * @memberof Options#
     * @type {boolean}
     * @category Core
     */
    imeFastEdit: !1,
    /**
     * The `isEmptyCol` option lets you define your own custom method
     * for checking if a column at a given visual index is empty.
     *
     * The `isEmptyCol` setting overwrites the built-in [`isEmptyCol`](@/api/core.md#isEmptyCol) method.
     *
     * @memberof Options#
     * @type {Function}
     * @param {number} col Visual column index.
     * @returns {boolean}
     * @category Core
     *
     * @example
     * ```js
     * // overwrite the built-in `isEmptyCol` method
     * isEmptyCol(visualColumnIndex) {
     *    // your custom method
     *    ...
     * },
     * ```
     */
    isEmptyCol(n) {
      let e, t, i;
      for (e = 0, t = this.countRows(); e < t; e++)
        if (i = this.getDataAtCell(e, n), Wn(i) === !1)
          return !1;
      return !0;
    },
    /**
     * The `isEmptyRow` option lets you define your own custom method
     * for checking if a row at a given visual index is empty.
     *
     * The `isEmptyRow` setting overwrites the built-in [`isEmptyRow`](@/api/core.md#isEmptyRow) method.
     *
     * @memberof Options#
     * @type {Function}
     * @param {number} row Visual row index.
     * @returns {boolean}
     * @category Core
     *
     * @example
     * ```js
     * // overwrite the built-in `isEmptyRow` method
     * isEmptyRow(visualRowIndex) {
     *    // your custom method
     *    ...
     * },
     * ```
     */
    isEmptyRow(n) {
      let e, t, i, r;
      for (e = 0, t = this.countCols(); e < t; e++)
        if (i = this.getDataAtCell(n, e), Wn(i) === !1)
          return typeof i == "object" ? (r = this.getCellMeta(n, e), L1(this.getSchema()[r.prop], i)) : !1;
      return !0;
    },
    /**
     * @description
     * The `label` option configures [`checkbox`](@/guides/cell-types/checkbox-cell-type/checkbox-cell-type.md) cells` labels.
     *
     * You can set the `label` option to an object with the following properties:
     *
     * | Property    | Possible values                   | Description                                                                                                                                                                                                             |
     * | ----------- | --------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `position`  | `'after'` (default) \| `'before'` | `'after'`: place the label to the right of the checkbox<br>`'before'`: place the label to the left of the checkbox                                                                                                      |
     * | `value`     | A string \| A function            | The label's text                                                                                                                                                                                                        |
     * | `separated` | `false` (default) \| `true`       | `false`: don't separate the label from the checkbox<br>`true`: separate the label from the checkbox                                                                                                                     |
     * | `property`  | A string                          | - A [`data`](#data) object property name that's used as the label's text <br>- Works only when the [`data`](#data) option is set to an [array of objects](@/guides/getting-started/binding-to-data/binding-to-data.md#array-of-objects) |
     *
     * Read more:
     * - [Checkbox cell type: Checkbox labels](@/guides/cell-types/checkbox-cell-type/checkbox-cell-type.md#checkbox-labels)
     *
     * @memberof Options#
     * @type {object}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * columns: [{
     *   type: 'checkbox',
     *   // add 'My label:' after the checkbox
     *   label: { position: 'after', value: 'My label: ', separated: true }
     * }],
     * ```
     */
    label: void 0,
    /**
     * The `language` option configures Handsontable's [language](@/guides/internationalization/language/language.md) settings.
     *
     * You can set the `language` option to one of the following:
     *
     * | Setting             | Description                 |
     * | ------------------- | --------------------------- |
     * | `'en-US'` (default) | English - United States     |
     * | `'ar-AR'`           | Arabic - Global<br><br>To properly render this language, set the [layout direction](@/guides/internationalization/layout-direction/layout-direction.md) to RTL. |
     * | `'cs-CZ'`           | Czech - Czech Republic      |
     * | `'de-CH'`           | German - Switzerland        |
     * | `'de-DE'`           | German - Germany            |
     * | `'es-MX'`           | Spanish - Mexico            |
     * | `'fr-FR'`           | French - France             |
     * | `'hr-HR'`           | Croatian - Croatia          |
     * | `'it-IT'`           | Italian - Italy             |
     * | `'ja-JP'`           | Japanese - Japan            |
     * | `'ko-KR'`           | Korean - Korea              |
     * | `'lv-LV'`           | Latvian - Latvia            |
     * | `'nb-NO'`           | Norwegian (Bokmål) - Norway |
     * | `'nl-NL'`           | Dutch - Netherlands         |
     * | `'pl-PL'`           | Polish - Poland             |
     * | `'pt-BR'`           | Portuguese - Brazil         |
     * | `'ru-RU'`           | Russian - Russia            |
     * | `'sr-SP'`           | Serbian (Latin) - Serbia    |
     * | `'zh-CN'`           | Chinese - China             |
     * | `'zh-TW'`           | Chinese - Taiwan            |
     *
     * Read more:
     * - [Language](@/guides/internationalization/language/language.md)
     * - [`locale`](#locale)
     * - [`layoutDirection`](#layoutdirection)
     *
     * @memberof Options#
     * @type {string}
     * @default 'en-US'
     * @category Core
     *
     * @example
     * ```js
     * // set Handsontable's language to Polish
     * language: 'pl-PL',
     * ```
     */
    language: "en-US",
    /**
     * The `layoutDirection` option configures whether Handsontable renders from the left to the right, or from the right to the left.
     *
     * You can set the layout direction only at Handsontable's [initialization](@/guides/getting-started/installation/installation.md#initialize-handsontable). Any change of the `layoutDirection` option after the initialization (e.g. using the [`updateSettings()`](@/api/core.md#updatesettings) method) is ignored.
     *
     * You can set the `layoutDirection` option only [for the entire grid](@/guides/getting-started/configuration-options/configuration-options.md#set-grid-options).
     * You can't set it for individual columns, rows, or cells.
     *
     * You can set the `layoutDirection` option to one of the following strings:
     *
     * | Setting             | Description                                                                                                                                                                                  |
     * | ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `inherit` (default) | Set Handsontable's layout direction automatically,<br>based on the value of your HTML document's [`dir`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir) attribute  |
     * | `rtl`               | Render Handsontable from the right to the left,<br>even when your HTML document's [`dir`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir) attribute is set to `ltr` |
     * | `ltr`               | Render Handsontable from the left to the right,<br>even when your HTML document's [`dir`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir) attribute is set to `rtl` |
     *
     * Read more:
     * - [Layout direction](@/guides/internationalization/layout-direction/layout-direction.md)
     * - [Language](@/guides/internationalization/language/language.md)
     * - [`language`](#language)
     * - [`locale`](#locale)
     * - [`fixedColumnsStart`](#fixedcolumnsstart)
     * - [`customBorders`](#customBorders)
     *
     * @memberof Options#
     * @type {string}
     * @default 'inherit'
     * @category Core
     *
     * @example
     * ```js
     * // inherit Handsontable's layout direction
     * // from the value of your HTML document's `dir` attribute
     * layoutDirection: 'inherit',
     *
     * // render Handsontable from the right to the left
     * // regardless of your HTML document's `dir`
     * layoutDirection: 'rtl',
     *
     * // render Handsontable from the left to the right
     * // regardless of your HTML document's `dir`
     * layoutDirection: 'ltr',
     * ```
     */
    layoutDirection: "inherit",
    /**
     * The `licenseKey` option sets your Handsontable license key.
     *
     * You can set the `licenseKey` option to one of the following:
     *
     * | Setting                                                                                                 | Description                                                                                       |
     * | ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- |
     * | A string with your [commercial license key](@/guides/getting-started/license-key/license-key.md#commercial-license) | For [commercial use](@/guides/technical-specification/software-license/software-license.md#commercial-use)         |
     * | `'non-commercial-and-evaluation'`                                                                       | For [non-commercial use](@/guides/technical-specification/software-license/software-license.md#non-commercial-use) |
     *
     * Read more:
     * - [License key](@/guides/getting-started/license-key/license-key.md)
     *
     * @memberof Options#
     * @type {string}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // for commercial use
     * licenseKey: 'xxxxx-xxxxx-xxxxx-xxxxx-xxxxx', // your commercial license key
     *
     * // for non-commercial use
     * licenseKey: 'non-commercial-and-evaluation',
     * ```
     */
    licenseKey: void 0,
    /**
     * The `locale` option configures Handsontable's [locale](@/guides/internationalization/locale/locale.md) settings.
     *
     * You can set the `locale` option to any valid and canonicalized Unicode BCP 47 locale tag,
     * both for the [entire grid](@/guides/internationalization/locale/locale.md#set-the-grid-s-locale),
     * and for [individual columns](@/guides/internationalization/locale/locale.md#set-a-column-s-locale).
     *
     * Read more:
     * - [Locale](@/guides/internationalization/locale/locale.md)
     * - [`language`](#language)
     * - [`layoutDirection`](#layoutdirection)
     *
     * @memberof Options#
     * @type {string}
     * @default 'en-US'
     * @category Core
     *
     * @example
     * ```js
     * // set the entire grid's locale to Polish
     * locale: 'pl-PL',
     *
     * // set individual columns' locales
     * columns: [
     *   {
     *     // set the first column's locale to Polish
     *     locale: 'pl-PL',
     *   },
     *   {
     *     // set the second column's locale to German
     *     locale: 'de-DE',
     *   },
     * ],
     * ```
     */
    locale: "en-US",
    /**
     * The `manualColumnFreeze` option configures the [`ManualColumnFreeze`](@/api/manualColumnFreeze.md) plugin.
     *
     * You can set the `manualColumnFreeze` option to one of the following:
     *
     * | Setting  | Description                                                            |
     * | -------- | ---------------------------------------------------------------------- |
     * | `true`   | Enable the [`ManualColumnFreeze`](@/api/manualColumnFreeze.md) plugin  |
     * | `false`  | Disable the [`ManualColumnFreeze`](@/api/manualColumnFreeze.md) plugin |
     *
     * Read more:
     * - [Column freezing](@/guides/columns/column-freezing/column-freezing.md#user-triggered-freeze)
     *
     * @memberof Options#
     * @type {boolean}
     * @default undefined
     * @category ManualColumnFreeze
     *
     * @example
     * ```js
     * // enable the `ManualColumnFreeze` plugin
     * manualColumnFreeze: true,
     * ```
     */
    manualColumnFreeze: void 0,
    /**
     * The `manualColumnMove` option configures the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin.
     *
     * You can set the `manualColumnMove` option to one of the following:
     *
     * | Setting  | Description                                                                                                        |
     * | -------- | ------------------------------------------------------------------------------------------------------------------ |
     * | `true`   | Enable the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin                                                  |
     * | `false`  | Disable the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin                                                 |
     * | An array | - Enable the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin<br>- Move individual columns at initialization |
     *
     * Read more:
     * - [Column moving](@/guides/columns/column-moving/column-moving.md)
     *
     * @memberof Options#
     * @type {boolean|number[]}
     * @default undefined
     * @category ManualColumnMove
     *
     * @example
     * ```js
     * // enable the `ManualColumnMove` plugin
     * manualColumnMove: true,
     *
     * // enable the `ManualColumnMove` plugin
     * // at initialization, move column 0 to 1
     * // at initialization, move column 1 to 4
     * // at initialization, move column 2 to 6
     * manualColumnMove: [1, 4, 6],
     * ```
     */
    manualColumnMove: void 0,
    /**
     * @description
     * The `manualColumnResize` option configures the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin.
     *
     * You can set the `manualColumnResize` option to one of the following:
     *
     * | Setting  | Description                                                                                                           |
     * | -------- | --------------------------------------------------------------------------------------------------------------------- |
     * | `true`   | Enable the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin                                                 |
     * | `false`  | Disable the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin                                                |
     * | An array | - Enable the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin<br>- Set initial widths of individual columns |
     *
     * Read more:
     * - [Column width: Column stretching](@/guides/columns/column-width/column-width.md#column-stretching)
     *
     * @memberof Options#
     * @type {boolean|number[]}
     * @default undefined
     * @category ManualColumnResize
     *
     * @example
     * ```js
     * // enable the `manualColumnResize` plugin
     * manualColumnResize: true,
     *
     * // enable the `manualColumnResize` plugin
     * // set the initial width of column 0 to 40 pixels
     * // set the initial width of column 1 to 50 pixels
     * // set the initial width of column 2 to 60 pixels
     * manualColumnResize: [40, 50, 60],
     * ```
     */
    manualColumnResize: void 0,
    /**
     * @description
     * The `manualRowMove` option configures the [`ManualRowMove`](@/api/manualRowMove.md) plugin.
     *
     * You can set the `manualRowMove` option to one of the following:
     *
     * | Setting  | Description                                                                                               |
     * | -------- | --------------------------------------------------------------------------------------------------------- |
     * | `true`   | Enable the [`ManualRowMove`](@/api/manualRowMove.md) plugin                                               |
     * | `false`  | Disable the [`ManualRowMove`](@/api/manualRowMove.md) plugin                                              |
     * | An array | - Enable the [`ManualRowMove`](@/api/manualRowMove.md) plugin<br>- Move individual rows at initialization |
     *
     * Read more:
     * - [Row moving](@/guides/rows/row-moving/row-moving.md)
     *
     * @memberof Options#
     * @type {boolean|number[]}
     * @default undefined
     * @category ManualRowMove
     *
     * @example
     * ```js
     * // enable the `ManualRowMove` plugin
     * manualRowMove: true,
     *
     * // enable the `ManualRowMove` plugin
     * // at initialization, move row 1 to 0
     * // at initialization, move row 4 to 1
     * // at initialization, move row 6 to 2
     * manualRowMove: [1, 4, 6],
     * ```
     */
    manualRowMove: void 0,
    /**
     * @description
     * The `manualRowResize` option configures the [`ManualRowResize`](@/api/manualRowResize.md) plugin.
     *
     * You can set the `manualRowResize` option to one of the following:
     *
     * | Setting  | Description                                                                                                   |
     * | -------- | ------------------------------------------------------------------------------------------------------------- |
     * | `true`   | Enable the [`ManualRowResize`](@/api/manualRowResize.md) plugin                                               |
     * | `false`  | Disable the [`ManualRowResize`](@/api/manualRowResize.md) plugin                                              |
     * | An array | - Enable the [`ManualRowResize`](@/api/manualRowResize.md) plugin<br>- Set initial heights of individual rows |
     *
     * Read more:
     * - [Row height: Adjust the row height manually](@/guides/rows/row-height/row-height.md#adjust-the-row-height-manually)
     *
     * @memberof Options#
     * @type {boolean|number[]}
     * @default undefined
     * @category ManualRowResize
     *
     * @example
     * ```js
     * // enable the `ManualRowResize` plugin
     * manualRowResize: true,
     *
     * // enable the `ManualRowResize` plugin
     * // set the initial height of row 0 to 40 pixels
     * // set the initial height of row 1 to 50 pixels
     * // set the initial height of row 2 to 60 pixels
     * manualRowResize: [40, 50, 60],
     * ```
     */
    manualRowResize: void 0,
    /**
     * The `maxCols` option sets a maximum number of columns.
     *
     * The `maxCols` option is used:
     * - At initialization: if the `maxCols` value is lower than the initial number of columns,
     * Handsontable trims columns from the right.
     * - At runtime: for example, when inserting columns.
     *
     * @memberof Options#
     * @type {number}
     * @default Infinity
     * @category Core
     *
     * @example
     * ```js
     * // set the maximum number of columns to 300
     * maxCols: 300,
     * ```
     */
    maxCols: 1 / 0,
    /**
     * The `maxRows` option sets a maximum number of rows.
     *
     * The `maxRows` option is used:
     * - At initialization: if the `maxRows` value is lower than the initial number of rows,
     * Handsontable trims rows from the bottom.
     * - At runtime: for example, when inserting rows.
     *
     * @memberof Options#
     * @type {number}
     * @default Infinity
     * @category Core
     *
     * @example
     * ```js
     * // set the maximum number of rows to 300
     * maxRows: 300,
     * ```
     */
    maxRows: 1 / 0,
    /**
     * @description
     * The `mergeCells` option configures the [`MergeCells`](@/api/mergeCells.md) plugin.
     *
     * You can set the `mergeCells` option to one of the following:
     *
     * | Setting             | Description                                                                                         |
     * | ------------------- | --------------------------------------------------------------------------------------------------- |
     * | `true`              | Enable the [`MergeCells`](@/api/mergeCells.md) plugin                                               |
     * | `false`             | Disable the [`MergeCells`](@/api/mergeCells.md) plugin                                              |
     * | An array of objects | - Enable the [`MergeCells`](@/api/mergeCells.md) plugin<br>- Merge specific cells at initialization |
     *
     * To merge specific cells at Handsontable's initialization,
     * set the `mergeCells` option to an array of objects, with the following properties:
     *
     * | Property  | Description                                                |
     * | --------- | ---------------------------------------------------------- |
     * | `row`     | The row index of the merged section's beginning            |
     * | `col`     | The column index of the merged section's beginning         |
     * | `rowspan` | The width (as a number of rows) of the merged section      |
     * | `colspan` | The height (as a number of columns ) of the merged section |
     *
     * Read more:
     * - [Merge cells](@/guides/cell-features/merge-cells/merge-cells.md)
     *
     * @memberof Options#
     * @type {boolean|object[]}
     * @default false
     * @category MergeCells
     *
     * @example
     * ```js
     * // enable the `MergeCells` plugin
     * mergeCells: true,
     *
     * // enable the `MergeCells` plugin
     * // and merge specific cells at initialization
     * mergeCells: [
     *   // merge cells from cell (1,1) to cell (3,3)
     *   {row: 1, col: 1, rowspan: 3, colspan: 3},
     *   // merge cells from cell (3,4) to cell (2,2)
     *   {row: 3, col: 4, rowspan: 2, colspan: 2},
     *   // merge cells from cell (5,6) to cell (3,3)
     *   {row: 5, col: 6, rowspan: 3, colspan: 3}
     * ],
     * ```
     */
    mergeCells: !1,
    /**
     * The `minCols` option sets a minimum number of columns.
     *
     * The `minCols` option is used:
     * - At initialization: if the `minCols` value is higher than the initial number of columns,
     * Handsontable adds empty columns to the right.
     * - At runtime: for example, when removing columns.
     *
     * The `minCols` option works only when your [`data`](#data) is an [array of arrays](@/guides/getting-started/binding-to-data/binding-to-data.md#array-of-arrays).
     * When your [`data`](#data) is an [array of objects](@/guides/getting-started/binding-to-data/binding-to-data.md#array-of-objects),
     * you can only have as many columns as defined in:
     * - The first data row
     * - The [`dataSchema`](#dataSchema) option
     * - The [`columns`](#columns) option
     *
     * @memberof Options#
     * @type {number}
     * @default 0
     * @category Core
     *
     * @example
     * ```js
     * // set the minimum number of columns to 10
     * minCols: 10,
     * ```
     */
    minCols: 0,
    /**
     * The `minRows` option sets a minimum number of rows.
     *
     * The `minRows` option is used:
     * - At initialization: if the `minRows` value is higher than the initial number of rows,
     * Handsontable adds empty rows at the bottom.
     * - At runtime: for example, when removing rows.
     *
     * @memberof Options#
     * @type {number}
     * @default 0
     * @category Core
     *
     * @example
     * ```js
     * // set the minimum number of rows to 10
     * minRows: 10,
     * ```
     */
    minRows: 0,
    /**
     * The `minSpareCols` option sets a minimum number of empty columns
     * at the grid's right-hand end.
     *
     * If there already are other empty columns at the grid's right-hand end,
     * they are counted into the `minSpareCols` value.
     *
     * The total number of columns can't exceed the [`maxCols`](#maxCols) value.
     *
     * The `minSpareCols` option works only when your [`data`](#data) is an [array of arrays](@/guides/getting-started/binding-to-data/binding-to-data.md#array-of-arrays).
     * When your [`data`](#data) is an [array of objects](@/guides/getting-started/binding-to-data/binding-to-data.md#array-of-objects),
     * you can only have as many columns as defined in:
     * - The first data row
     * - The [`dataSchema`](#dataSchema) option
     * - The [`columns`](#columns) option
     *
     * @memberof Options#
     * @type {number}
     * @default 0
     * @category Core
     *
     * @example
     * ```js
     * // at Handsontable's initialization, add at least 3 empty columns on the right
     * minSpareCols: 3,
     * ```
     */
    minSpareCols: 0,
    /**
     * The `minSpareRows` option sets a minimum number of empty rows
     * at the bottom of the grid.
     *
     * If there already are other empty rows at the bottom,
     * they are counted into the `minSpareRows` value.
     *
     * The total number of rows can't exceed the [`maxRows`](#maxRows) value.
     *
     * @memberof Options#
     * @type {number}
     * @default 0
     * @category Core
     *
     * @example
     * ```js
     * // at Handsontable's initialization, add at least 3 empty rows at the bottom
     * minSpareRows: 3,
     * ```
     */
    minSpareRows: 0,
    /**
     * @description
     * The `multiColumnSorting` option configures the [`MultiColumnSorting`](@/api/columnSorting.md) plugin.
     *
     * You can set the `multiColumnSorting` option to one of the following:
     *
     * | Setting    | Description                                                                                                                                                |
     * | ---------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `true`     | Enable the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin with the default configuration                                                       |
     * | `false`    | Disable the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin                                                                                     |
     * | An object  | - Enable the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin<br>- Modify the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin options |
     *
     * If you set the `multiColumnSorting` option to an object,
     * you can set the following [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin options:
     *
     * | Option                   | Possible settings                                                                                                                                |
     * | ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------ |
     * | `indicator`              | `true`: Display the arrow icon in the column header, to indicate a sortable column<br>`false`: Don't display the arrow icon in the column header |
     * | `headerAction`           | `true`: Enable clicking on the column header to sort the column<br>`false`: Disable clicking on the column header to sort the column             |
     * | `sortEmptyCells`         | `true`: Sort empty cells as well<br>`false`: Place empty cells at the end                                                                        |
     * | `compareFunctionFactory` | A [custom compare function](@/guides/rows/rows-sorting/rows-sorting.md#add-a-custom-comparator)                                                               |
     *
     * If you set the `multiColumnSorting` option to an object,
     * you can also sort individual columns at Handsontable's initialization.
     * In the `multiColumnSorting` object, add an object named `initialConfig`,
     * with the following properties:
     *
     * | Option      | Possible settings   | Description                                                      |
     * | ----------- | ------------------- | ---------------------------------------------------------------- |
     * | `column`    | A number            | The index of the column that you want to sort at initialization  |
     * | `sortOrder` | `'asc'` \| `'desc'` | The sorting order:<br>`'asc'`: ascending<br>`'desc'`: descending |
     *
     * Read more:
     * - [Rows sorting](@/guides/rows/rows-sorting/rows-sorting.md)
     * - [`columnSorting`](#columnSorting)
     *
     * @memberof Options#
     * @type {boolean|object}
     * @default undefined
     * @category MultiColumnSorting
     *
     * @example
     * ```js
     * // enable the `MultiColumnSorting` plugin
     * multiColumnSorting: true
     *
     * // enable the `MultiColumnSorting` plugin with custom configuration
     * multiColumnSorting: {
     *   // sort empty cells as well
     *   sortEmptyCells: true,
     *   // display the arrow icon in the column header
     *   indicator: true,
     *   // disable clicking on the column header to sort the column
     *   headerAction: false,
     *   // add a custom compare function
     *   compareFunctionFactory(sortOrder, columnMeta) {
     *     return function(value, nextValue) {
     *       // some value comparisons which will return -1, 0 or 1...
     *     }
     *   }
     * }
     *
     * // enable the `MultiColumnSorting` plugin
     * multiColumnSorting: {
     *   // at initialization, sort column 1 in ascending order
     *   initialConfig: {
     *     column: 1,
     *     sortOrder: 'asc'
     *   },
     *   // at initialization, sort column 2 in descending order
     *   initialConfig: {
     *     column: 2,
     *     sortOrder: 'desc'
     *   }
     * }
     * ```
     */
    multiColumnSorting: void 0,
    /**
     * When set to `true`, the `navigableHeaders` option lets you navigate [row headers](@/guides/rows/row-header/row-header.md) and [column headers](@/guides/columns/column-header/column-header.md), using the arrow keys or the <kbd>**Tab**</kbd> key (if the [`tabNavigation`](#tabNavigation) option is set to `true`).
     *
     * @since 14.0.0
     * @memberof Options#
     * @type {boolean}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * // you can navigate row and column headers with the keyboard
     * navigableHeaders: true,
     *
     * // default behavior: you can't navigate row and column headers with the keyboard
     * navigableHeaders: false,
     * ```
     */
    navigableHeaders: !1,
    /**
     * When set to `false`, the `tabNavigation` option changes the behavior of the
     * <kbd>Tab</kbd> and <kbd>Shift</kbd>+<kbd>Tab</kbd> keyboard shortcuts. The Handsontable
     * no more captures that shortcuts to make the grid navigation available (`tabNavigation: true`)
     * but returns control to the browser so the native page navigation is possible.
     *
     * @since 14.0.0
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * // you can't navigate row and column headers using <kbd>Tab</kbd> or <kbd>Shift</kbd>+<kbd>Tab</kbd> keyboard shortcuts
     * tabNavigation: false,
     *
     * // default behavior: you can navigate row and column headers using <kbd>Tab</kbd> or <kbd>Shift</kbd>+<kbd>Tab</kbd> keyboard shortcuts
     * tabNavigation: true,
     * ```
     */
    tabNavigation: !0,
    /**
     * @description
     * The `nestedHeaders` option configures the [`NestedHeaders`](@/api/nestedHeaders.md) plugin.
     *
     * You can set the `nestedHeaders` option to one of the following:
     *
     * | Setting           | Description                                                                                                                           |
     * | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------- |
     * | `false` (default) | Disable the [`NestedHeaders`](@/api/nestedHeaders.md) plugin                                                                          |
     * | `true`            | - Enable the [`NestedHeaders`](@/api/nestedHeaders.md) plugin<br>- Don't configure any nested headers                                 |
     * | Array of arrays   | - Enable the [`NestedHeaders`](@/api/nestedHeaders.md) plugin<br>- Configure headers that are nested on Handsontable's initialization |
     *
     * If you set the `nestedHeaders` option to an array of arrays, each array configures one set of nested headers.
     *
     * Each array element configures one header, and can be one of the following:
     *
     * | Array element | Description                                                                                  |
     * | ------------- | -------------------------------------------------------------------------------------------- |
     * | A string      | The header's label                                                                           |
     * | An object     | Properties:<br>`label` (string): the header's label<br>`colspan` (integer): the column width |
     *
     * Read more:
     * - [Plugins: `NestedHeaders`](@/api/nestedHeaders.md)
     * - [Column groups: Nested headers](@/guides/columns/column-groups/column-groups.md#nested-headers)
     *
     * @memberof Options#
     * @type {boolean|Array[]}
     * @default undefined
     * @category NestedHeaders
     *
     * @example
     * ```js
     * nestedHeaders: [
     *   ['A', {label: 'B', colspan: 8}, 'C'],
     *   ['D', {label: 'E', colspan: 4}, {label: 'F', colspan: 4}, 'G'],
     *   ['H', 'I', 'J', 'K', 'L', 'M', 'N', 'R', 'S', 'T']
     * ],
     * ```
     */
    nestedHeaders: void 0,
    /**
     * @description
     * The `nestedRows` option configures the [`NestedRows`](@/api/nestedRows.md) plugin.
     *
     * You can set the `nestedRows` option to one of the following:
     *
     * | Setting           | Description                                            |
     * | ----------------- | ------------------------------------------------------ |
     * | `false` (default) | Disable the [`NestedRows`](@/api/nestedRows.md) plugin |
     * | `true`            | Enable the [`NestedRows`](@/api/nestedRows.md) plugin  |
     *
     * Read more:
     * - [Plugins: `NestedRows`](@/guides/rows/row-parent-child/row-parent-child.md)
     *
     * @example
     * ```js
     * // enable the `NestedRows` plugin
     * nestedRows: true,
     * ```
     *
     * @memberof Options#
     * @type {boolean}
     * @default false
     * @category NestedRows
     */
    nestedRows: void 0,
    /**
     * The `noWordWrapClassName` option lets you add a CSS class name
     * to each cell that has the [`wordWrap`](#wordWrap) option set to `false`.
     *
     * Read more:
     * - [`wordWrap`](#wordWrap)
     * - [`currentRowClassName`](#currentRowClassName)
     * - [`currentColClassName`](#currentColClassName)
     * - [`currentHeaderClassName`](#currentHeaderClassName)
     * - [`invalidCellClassName`](#invalidCellClassName)
     * - [`readOnlyCellClassName`](#readOnlyCellClassName)
     * - [`commentedCellClassName`](#commentedCellClassName)
     * - [`noWordWrapClassName`](#noWordWrapClassName)
     * - [`TableClassName`](#TableClassName)
     * - [`className`](#className)
     *
     * @memberof Options#
     * @type {string}
     * @default 'htNoWrap'
     * @category Core
     *
     * @example
     * ```js
     * // add an `is-noWrapCell` CSS class name
     * // to each cell that doesn't wrap content
     * noWordWrapClassName: 'is-noWrapCell',
     * ```
     */
    noWordWrapClassName: "htNoWrap",
    /**
     * The `numericFormat` option configures the number format and the currency format
     * of [`numeric`](@/guides/cell-types/numeric-cell-type/numeric-cell-type.md) cells` displayed output
     * in the numeric cell renderer.
     *
     * You can set the `numericFormat` option to an object with the following properties:
     *
     * | Property    | Possible values                                                               | Description     |
     * | ----------- | ----------------------------------------------------------------------------- | --------------- |
     * | `pattern`   | All [`numbro.js` number formats](https://numbrojs.com/format.html#numbers)    | Number format   |
     * | `culture`   | All [`numbro.js` currency formats](https://numbrojs.com/format.html#currency) | Currency format |
     *
     * The `numericFormat` option as no effect on the numeric cell editor.
     *
     * In the source data, numeric data is stored as JavaScript numbers.
     *
     * Read more:
     * - [Numeric cell type](@/guides/cell-types/numeric-cell-type/numeric-cell-type.md)
     * - [Third-party licenses](@/guides/technical-specification/third-party-licenses/third-party-licenses.md)
     *
     * @memberof Options#
     * @since 0.35.0
     * @type {object}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *     // set the `type` of each cell in this column to `numeric`
     *     type: 'numeric',
     *     // set the `numericFormat` option for every `numeric` cell of this column
     *     numericFormat: {
     *       // set the number format
     *       pattern: '0,00',
     *       // set the currency format
     *       culture: 'en-US'
     *     }
     *   }
     * ],
     * ```
     */
    numericFormat: void 0,
    /**
     * If the `observeDOMVisibility` option is set to `true`,
     * Handsontable rerenders every time it detects that the grid was made visible in the DOM.
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * // don't rerender the grid on visibility changes
     * observeDOMVisibility: false,
     * ```
     */
    observeDOMVisibility: !0,
    /**
     * The `outsideClickDeselects` option determines what happens to the current [selection](@/guides/cell-features/selection/selection.md)
     * when you click outside of the grid.
     *
     * You can set the `outsideClickDeselects` option to one of the following:
     *
     * | Setting          | Description                                                                                              |
     * | ---------------- | -------------------------------------------------------------------------------------------------------- |
     * | `true` (default) | On a mouse click outside of the grid, clear the current [selection](@/guides/cell-features/selection/selection.md) |
     * | `false`          | On a mouse click outside of the grid, keep the current [selection](@/guides/cell-features/selection/selection.md)  |
     * | A function       | A function that takes the click event target and returns a boolean                                       |
     *
     * @memberof Options#
     * @type {boolean|Function}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * // on a mouse click outside of the grid, clear the current selection
     * outsideClickDeselects: true,
     *
     * // on a mouse click outside of the grid, keep the current selection
     * outsideClickDeselects: false,
     *
     * // take the click event target and return `false`
     * outsideClickDeselects(event) {
     *   return false;
     * }
     *
     * // take the click event target and return `true`
     * outsideClickDeselects(event) {
     *   return false;
     * }
     * ```
     */
    outsideClickDeselects: !0,
    /**
     * @description
     * The `persistentState` option configures the [`PersistentState`](@/api/persistentState.md) plugin.
     *
     * You can set the `persistentState` to one of the following:
     *
     * | Setting           | Description                                                      |
     * | ----------------- | ---------------------------------------------------------------- |
     * | `false` (default) | Disable the [`PersistentState`](@/api/persistentState.md) plugin |
     * | `true`            | Enable the [`PersistentState`](@/api/persistentState.md) plugin  |
     *
     * Read more:
     * - [Saving data: Saving data locally](@/guides/getting-started/saving-data/saving-data.md#save-data-locally)
     * - [Plugins: `PersistentState`](@/api/persistentState.md)
     *
     * @memberof Options#
     * @type {boolean}
     * @default false
     * @category PersistentState
     *
     * @example
     * ```js
     * // enable the `PersistentState` plugin
     * persistentState: true,
     * ```
     */
    persistentState: void 0,
    /**
     * The `placeholder` option lets you display placeholder text in every empty cell.
     *
     * You can set the `placeholder` option to one of the following:
     *
     * | Setting            | Example        | Description                                                           |
     * | ------------------ | -------------- | --------------------------------------------------------------------- |
     * | A non-empty string | `'Empty cell'` | Display `Empty cell` text in empty cells                              |
     * | A non-string value | `000`          | Display `000` text in empty cells (non-string values get stringified) |
     *
     * Read more:
     * - [`placeholderCellClassName`](#placeholderCellClassName)
     *
     * @memberof Options#
     * @type {string}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // display 'Empty cell' text
     * // in every empty cell of the entire grid
     * placeholder: 'Empty cell',
     *
     * // or
     * columns: [
     *   {
     *     data: 'date',
     *     dateFormat: 'DD/MM/YYYY',
     *     // display 'Empty date cell' text
     *     // in every empty cell of the `date` column
     *     placeholder: 'Empty date cell'
     *   }
     * ],
     * ```
     */
    placeholder: void 0,
    /**
     * The `placeholderCellClassName` option lets you add a CSS class name to cells
     * that contain [`placeholder`](#placeholder) text.
     *
     * Read more:
     * - [Cell validator](@/guides/cell-functions/cell-validator/cell-validator.md)
     * - [`placeholder`](#placeholder)
     * - [`currentRowClassName`](#currentRowClassName)
     * - [`currentHeaderClassName`](#currentHeaderClassName)
     * - [`activeHeaderClassName`](#activeHeaderClassName)
     * - [`currentColClassName`](#currentColClassName)
     * - [`readOnlyCellClassName`](#readOnlyCellClassName)
     * - [`commentedCellClassName`](#commentedCellClassName)
     * - [`noWordWrapClassName`](#noWordWrapClassName)
     * - [`TableClassName`](#TableClassName)
     * - [`className`](#className)
     *
     * @memberof Options#
     * @type {string}
     * @default 'htPlaceholder'
     * @category Core
     *
     * @example
     * ```js
     * // add a `has-placeholder` CSS class name
     * // to each cell that contains `placeholder` text
     * placeholderCellClassName: 'has-placeholder',
     * ```
     */
    placeholderCellClassName: "htPlaceholder",
    /**
     * The `preventOverflow` option configures preventing Handsontable
     * from overflowing outside of its parent element.
     *
     * You can set the `preventOverflow` option to one of the following:
     *
     * | Setting           | Description                      |
     * | ----------------- | -------------------------------- |
     * | `false` (default) | Don't prevent overflowing        |
     * | `'horizontal'`      | Prevent horizontal overflowing |
     * | `'vertical'`        | Prevent vertical overflowing   |
     *
     * @memberof Options#
     * @type {string|boolean}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * // prevent horizontal overflowing
     * preventOverflow: 'horizontal',
     * ```
     */
    preventOverflow: !1,
    /**
     * The `preventWheel` option configures preventing the `wheel` event's default action
     * on overlays.
     *
     * You can set the `preventWheel` option to one of the following:
     *
     * | Setting           | Description                                      |
     * | ----------------- | ------------------------------------------------ |
     * | `false` (default) | Don't prevent the `wheel` event's default action |
     * | `true`            | Prevent the `wheel` event's default action       |
     *
     * @memberof Options#
     * @private
     * @type {boolean}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * // don't prevent the `wheel` event's default action
     * preventWheel: false,
     * ```
     */
    preventWheel: !1,
    /**
     * @description
     * The `readOnly` option determines whether a [cell](@/guides/cell-features/disabled-cells/disabled-cells.md#read-only-specific-cells),
     * [comment](@/guides/cell-features/comments/comments.md#make-a-comment-read-only), [column](@/guides/cell-features/disabled-cells/disabled-cells.md#read-only-columns)
     * or the [entire grid](@/guides/cell-features/disabled-cells/disabled-cells.md#read-only-grid) is editable or not. You can configure it as follows:
     *
     * | Setting           | Description                                                                                                                |
     * | ----------------- | ------------------------------------------------------------------------------------------------------------------------- |
     * | `false` (default) | Set as editable                                                                                                           |
     * | `true`            | - Set as read-only<br>- Add the [`readOnlyCellClassName`](#readOnlyCellClassName) CSS class name (by default: `htDimmed`) |
     *
     * `readOnly` cells can't be changed by the [`populateFromArray()`](@/api/core.md#populatefromarray) method.
     *
     * Read more:
     * - [Disabled cells](@/guides/cell-features/disabled-cells/disabled-cells.md)
     * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options/configuration-options.md#cascading-configuration)
     *
     * @memberof Options#
     * @type {boolean}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * // make the entire grid read-only
     * const configurationOptions = {
     *   columnSorting: true,
     * };
     *
     * // make the third column read-only
     * const configurationOptions = {
     *   columns: [
     *     {},
     *     {},
     *     {
     *       readOnly: true,
     *     },
     *   ],
     * };
     *
     * // make a specific cell read-only
     * const configurationOptions = {
     *   cell: [
     *     {
     *       row: 0,
     *       col: 0,
     *       readOnly: true,
     *     },
     * };
     * ```
     */
    readOnly: !1,
    /**
     * The `readOnlyCellClassName` option lets you add a CSS class name to [read-only](#readOnly) cells.
     *
     * Read more:
     * - [`currentRowClassName`](#currentRowClassName)
     * - [`currentColClassName`](#currentColClassName)
     * - [`currentHeaderClassName`](#currentHeaderClassName)
     * - [`activeHeaderClassName`](#activeHeaderClassName)
     * - [`invalidCellClassName`](#invalidCellClassName)
     * - [`placeholderCellClassName`](#placeholderCellClassName)
     * - [`commentedCellClassName`](#commentedCellClassName)
     * - [`noWordWrapClassName`](#noWordWrapClassName)
     * - [`readOnlyCellClassName`](#readOnlyCellClassName)
     * - [`TableClassName`](#TableClassName)
     *
     * @memberof Options#
     * @type {string}
     * @default 'htDimmed'
     * @category Core
     *
     * @example
     * ```js
     * // add a `is-readOnly` CSS class name
     * // to every read-only cell
     * readOnlyCellClassName: 'is-readOnly',
     * ```
     */
    readOnlyCellClassName: "htDimmed",
    /**
     * The `renderAllRows` option controls Handsontable's [row virtualization](@/guides/rows/row-virtualization/row-virtualization.md).
     * You can configure it as follows:
     *
     * | Setting           | Description                                                                                                                                                                                     |
     * | ----------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `false` (default) | Enable [row virtualization](@/guides/rows/row-virtualization/row-virtualization.md), rendering only the visible rows for optimal performance with large datasets.                                                  |
     * | `true`            | Disable [row virtualization](@/guides/rows/row-virtualization/row-virtualization.md)<br>(render all rows of the grid), rendering all rows in the dataset for consistent rendering and screen reader accessibility. |
     *
     * Setting `renderAllRows` to `true` overwrites the [`viewportRowRenderingOffset`](#viewportRowRenderingOffset) setting.
     *
     * Read more:
     * - [Row virtualization](@/guides/rows/row-virtualization/row-virtualization.md)
     *
     * @memberof Options#
     * @type {boolean}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * // disable row virtualization
     * renderAllRows: true,
     * ```
     */
    renderAllRows: !1,
    /**
     * The `renderAllColumns` option configures Handsontable's [column virtualization](@/guides/columns/column-virtualization/column-virtualization.md).
     *
     * You can set the `renderAllColumns` option to one of the following:
     *
     * | Setting           | Description                                                                                                                                                                                                                      |
     * | ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `false` (default) | Enable [column virtualization](@/guides/columns/column-virtualization/column-virtualization.md), rendering only visible columns for better performance with many columns.                                                                              |
     * | `true`            | Disable [column virtualization](@/guides/columns/column-virtualization/column-virtualization.md)<br>(render all columns of the grid), rendering all columns in the dataset, and ensuring all columns are available regardless of horizontal scrolling. |
     *
     * Setting `renderAllColumns` to `true` overwrites the [`viewportColumnRenderingOffset`](#viewportColumnRenderingOffset) setting.
     *
     * Read more:
     * - [Column virtualization](@/guides/columns/column-virtualization/column-virtualization.md)
     *
     * @since 14.1.0
     * @memberof Options#
     * @type {boolean}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * // disable column virtualization
     * renderAllColumns: true,
     * ```
     */
    renderAllColumns: !1,
    /**
     * @description
     * The `renderer` option sets a [cell renderer](@/guides/cell-functions/cell-renderer/cell-renderer.md) for a cell.
     *
     * You can set the `renderer` option to one of the following:
     * - A custom renderer function
     * - One of the following [cell renderer aliases](@/guides/cell-functions/cell-renderer/cell-renderer.md):
     *
     * | Alias               | Cell renderer function                                                         |
     * | ------------------- | ------------------------------------------------------------------------------ |
     * | A custom alias      | Your [custom cell renderer](@/guides/cell-functions/cell-renderer/cell-renderer.md) function |
     * | `'autocomplete'`    | `AutocompleteRenderer`                                                         |
     * | `'base'`            | `BaseRenderer`                                                                 |
     * | `'checkbox'`        | `CheckboxRenderer`                                                             |
     * | `'date'`            | `DateRenderer`                                                                 |
     * | `'dropdown'`        | `DropdownRenderer`                                                             |
     * | `'html'`            | `HtmlRenderer`                                                                 |
     * | `'numeric'`         | `NumericRenderer`                                                              |
     * | `'password'`        | `PasswordRenderer`                                                             |
     * | `'text'`            | `TextRenderer`                                                                 |
     * | `'time'`            | `TimeRenderer`                                                                 |
     *
     * To set the [`renderer`](#renderer), [`editor`](#editor), and [`validator`](#validator)
     * options all at once, use the [`type`](#type) option.
     *
     * Read more:
     * - [Cell renderer](@/guides/cell-functions/cell-renderer/cell-renderer.md)
     * - [Cell type](@/guides/cell-types/cell-type/cell-type.md)
     * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options/configuration-options.md#cascading-configuration)
     * - [`type`](#type)
     *
     * @memberof Options#
     * @type {string|Function}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // use the `numeric` renderer for each cell of the entire grid
     * renderer: `'numeric'`,
     *
     * // add a custom renderer function
     * renderer(hotInstance, td, row, column, prop, value, cellProperties) {
     *   // your custom renderer's logic
     *   ...
     * }
     *
     * // apply the `renderer` option to individual columns
     * columns: [
     *   {
     *     // use the `autocomplete` renderer for each cell of this column
     *     renderer: 'autocomplete'
     *   },
     *   {
     *     // use the `myCustomRenderer` renderer for each cell of this column
     *     renderer: 'myCustomRenderer'
     *   }
     * ]
     * ```
     */
    renderer: void 0,
    /**
     * The `rowHeaders` option configures your grid's row headers.
     *
     * You can set the `rowHeaders` option to one of the following:
     *
     * | Setting    | Description                                                       |
     * | ---------- | ----------------------------------------------------------------- |
     * | `true`     | Enable the default row headers ('1', '2', '3', ...)               |
     * | `false`    | Disable row headers                                               |
     * | An array   | Define your own row headers (e.g. `['One', 'Two', 'Three', ...]`) |
     * | A function | Define your own row headers, using a function                     |
     *
     * Read more:
     * - [Row header](@/guides/rows/row-header/row-header.md)
     *
     * @memberof Options#
     * @type {boolean|string[]|Function}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // enable the default row headers
     * rowHeaders: true,
     *
     * // set your own row headers
     * rowHeaders: ['One', 'Two', 'Three'],
     *
     * // set your own row headers, using a function
     * rowHeaders: function(visualRowIndex) {
     *   return `${visualRowIndex}: AB`;
     * },
     * ```
     */
    rowHeaders: void 0,
    /**
     * @description
     * The `rowHeaderWidth` option configures the width of row headers.
     *
     * You can set the `rowHeaderWidth` option to one of the following:
     *
     * | Setting  | Description                                     |
     * | -------- | ----------------------------------------------- |
     * | A number | Set the same width for every row header         |
     * | An array | Set different widths for individual row headers |
     *
     * @memberof Options#
     * @type {number|number[]}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // set the same width for every row header
     * rowHeaderWidth: 25,
     *
     * // set different widths for individual row headers
     * rowHeaderWidth: [25, 30, 55],
     * ```
     */
    rowHeaderWidth: void 0,
    /**
     * The `rowHeights` option sets rows' heights, in pixels.
     *
     * In the rendering process, the default row height is 23 px (22 px + 1 px of the row's bottom border).
     * You can change it to equal or greater than 23px, by setting the `rowHeights` option to one of the following:
     *
     * | Setting     | Description                                                                                         | Example                                                      |
     * | ----------- | --------------------------------------------------------------------------------------------------- | ------------------------------------------------------------ |
     * | A number    | Set the same height for every row                                                                   | `rowHeights: 100`                                            |
     * | A string    | Set the same height for every row                                                                   | `rowHeights: '100px'`                                        |
     * | An array    | Set heights separately for each row                                                                 | `rowHeights: [100, 120, undefined]`                          |
     * | A function  | Set row heights dynamically,<br>on each render                                                      | `rowHeights(visualRowIndex) { return visualRowIndex * 10; }` |
     * | `undefined` | Used by the [modifyRowHeight](@/api/hooks.md#modifyRowHeight) hook,<br>to detect row height changes | `rowHeights: undefined`                                      |
     *
     * The `rowHeights` option also sets the minimum row height that can be set
     * via the {@link ManualRowResize} and {@link AutoRowSize} plugins (if they are enabled).
     *
     * Read more:
     * - [Row height](@/guides/rows/row-height/row-height.md)
     *
     * @memberof Options#
     * @type {number|number[]|string|string[]|Array<undefined>|Function}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // set every row's height to 100px
     * rowHeights: 100,
     *
     * // set every row's height to 100px
     * rowHeights: '100px',
     *
     * // set the first (by visual index) row's height to 100
     * // set the second (by visual index) row's height to 120
     * // set the third (by visual index) row's height to `undefined`
     * // set any other row's height to the default 23px
     * rowHeights: [100, 120, undefined],
     *
     * // set each row's height individually, using a function
     * rowHeights(visualRowIndex) {
     *   return visualRowIndex * 10;
     * },
     * ```
     */
    rowHeights: void 0,
    /**
     * @description
     * The `search` option configures the [`Search`](@/api/search.md) plugin.
     *
     * You can set the `search` option to one of the following:
     *
     * | Setting           | Description                                                                          |
     * | ----------------- | ------------------------------------------------------------------------------------ |
     * | `false` (default) | Disable the [`Search`](@/api/search.md) plugin                                       |
     * | `true`            | Enable the [`Search`](@/api/search.md) plugin with the default configuration         |
     * | An object         | - Enable the [`Search`](@/api/search.md) plugin<br>- Apply your custom configuration |
     *
     * If you set the `search` option to an object, you can configure the following search options:
     *
     * | Option              | Possible settings | Description                                                                                          |
     * | ------------------- | ----------------- | ---------------------------------------------------------------------------------------------------- |
     * | `searchResultClass` | A string          | Add a custom CSS class name to search results                                                        |
     * | `queryMethod`       | A function        | Add a [custom query method](@/guides/navigation/searching-values/searching-values.md#custom-query-method)  |
     * | `callback`          | A function        | Add a [custom callback function](@/guides/navigation/searching-values/searching-values.md#custom-callback) |
     *
     * Read more:
     * - [Searching values](@/guides/navigation/searching-values/searching-values.md)
     * - [Searching values: Custom query method](@/guides/navigation/searching-values/searching-values.md#custom-query-method)
     * - [Searching values: Custom callback](@/guides/navigation/searching-values/searching-values.md#custom-callback)
     *
     * @memberof Options#
     * @type {boolean|object}
     * @default false
     * @category Search
     *
     * @example
     * ```js
     * // enable the `Search` plugin with the default configuration
     * search: true,
     *
     * // enable the `Search` plugin with a custom configuration
     * search: {
     *   // add a `customClass` CSS class name to search results
     *   searchResultClass: 'customClass',
     *   // add a custom query method
     *   queryMethod(queryStr, value) {
     *     ...
     *   },
     *   // add a custom callback function
     *   callback(instance, row, column, value, result) {
     *     ...
     *   }
     * }
     * ```
     */
    search: !1,
    /**
     * @description
     * The `selectionMode` option configures how [selection](@/guides/cell-features/selection/selection.md) works.
     *
     * You can set the `selectionMode` option to one of the following:
     *
     * | Setting      | Description                                                  |
     * | ------------ | ------------------------------------------------------------ |
     * | `'single'`   | Allow the user to select only one cell at a time.            |
     * | `'range'`    | Allow the user to select one range of cells at a time.       |
     * | `'multiple'` | Allow the user to select multiple ranges of cells at a time. |
     *
     * Read more:
     * - [Selection: Selecting ranges](@/guides/cell-features/selection/selection.md#select-ranges)
     *
     * @memberof Options#
     * @type {string}
     * @default 'multiple'
     * @category Core
     *
     * @example
     * ```js
     * // you can only select one cell at at a time
     * selectionMode: 'single',
     *
     * // you can select one range of cells at a time
     * selectionMode: 'range',
     *
     * // you can select multiple ranges of cells at a time
     * selectionMode: 'multiple',
     * ```
     */
    selectionMode: "multiple",
    /**
     * The `selectOptions` option configures options that the end user can choose from in [`select`](@/guides/cell-types/select-cell-type/select-cell-type.md) cells.
     *
     * You can set the `selectOptions` option to one of the following:
     *
     * | Setting                         | Description                                                                   |
     * | ------------------------------- | ----------------------------------------------------------------------------- |
     * | An array of strings             | Each string is one option's value and label                                   |
     * | An object with key-string pairs | - Each key is one option's value<br>- The key's string is that option's label |
     * | A function                      | A function that returns an object with key-string pairs                       |
     *
     * Read more:
     * - [Select cell type](@/guides/cell-types/select-cell-type/select-cell-type.md)
     *
     * @memberof Options#
     * @type {string[]|object|Function}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *     // set the `type` of each cell in this column to `select`
     *     type: 'select',
     *     // set the first option's value and label to `A`
     *     // set the second option's value and label to `B`
     *     // set the third option's value and label to `C`
     *     selectOptions: ['A', 'B', 'C'],
     *   },
     *   {
     *     // set the `type` of each cell in this column to `select`
     *     type: 'select',
     *     selectOptions: {
     *       // set the first option's value to `value1` and label to `Label 1`
     *       value1: 'Label 1',
     *       // set the second option's value to `value2` and label to `Label 2`
     *       value2: 'Label 2',
     *       // set the third option's value to `value3` and label to `Label 3`
     *       value3: 'Label 3',
     *     },
     *   },
     *   {
     *     // set the `type` of each cell in this column to `select`
     *     type: 'select',
     *     // set `selectOption` to a function that returns available options as an object
     *     selectOptions(visualRow, visualColumn, prop) {
     *       return {
     *         value1: 'Label 1',
     *         value2: 'Label 2',
     *         value3: 'Label 3',
     *       };
     *   },
     * ],
     * ```
     */
    selectOptions: void 0,
    /**
     * @description
     * The `skipColumnOnPaste` option determines whether you can paste data into a given column.
     *
     * You can only apply the `skipColumnOnPaste` option to an entire column, using the [`columns`](#columns) option.
     *
     * You can set the `skipColumnOnPaste` option to one of the following:
     *
     * | Setting           | Description                                                                                           |
     * | ----------------- | ----------------------------------------------------------------------------------------------------- |
     * | `false` (default) | Enable pasting data into this column                                                                  |
     * | `true`            | - Disable pasting data into this column<br>- On pasting, paste data into the next column to the right |
     *
     * Read more:
     * - [Configuration options: Setting column options](@/guides/getting-started/configuration-options/configuration-options.md#set-column-options)
     *
     * @memberof Options#
     * @type {boolean}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *     // disable pasting data into this column
     *     skipColumnOnPaste: true
     *   }
     * ],
     * ```
     */
    skipColumnOnPaste: !1,
    /**
     * @description
     *
     * The `skipRowOnPaste` option determines whether you can paste data into a given row.
     *
     * You can only apply the `skipRowOnPaste` option to an entire row, using the [`cells`](#cells) option.
     *
     * You can set the `skipRowOnPaste` option to one of the following:
     *
     * | Setting           | Description                                                                         |
     * | ----------------- | ----------------------------------------------------------------------------------- |
     * | `false` (default) | Enable pasting data into this row                                                   |
     * | `true`            | - Disable pasting data into this row<br>- On pasting, paste data into the row below |
     *
     * Read more:
     * - [Configuration options: Setting row options](@/guides/getting-started/configuration-options/configuration-options.md#set-row-options)
     *
     * @memberof Options#
     * @type {boolean}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * cells(row, column) {
     *  const cellProperties = {};
     *
     *  // disable pasting data into row 1
     *  if (row === 1) {
     *    cellProperties.skipRowOnPaste = true;
     *  }
     *
     *  return cellProperties;
     * }
     * ```
     */
    skipRowOnPaste: !1,
    /**
     * The `sortByRelevance` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type/autocomplete-cell-type.md) cells'
     * lists are sorted in the same order as provided in the [`source`](#source) option.
     *
     * You can set the `sortByRelevance` option to one of the following:
     *
     * | Setting          | Description                                                                  |
     * | ---------------- | ---------------------------------------------------------------------------- |
     * | `true` (default) | Sort options in the same order as provided in the [`source`](#source) option |
     * | `false`          | Sort options alphabetically                                                  |
     *
     * Read more:
     * - [`source`](#source)
     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type/autocomplete-cell-type.md)
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * columns: [{
     *   // set the `type` of each cell in this column to `autocomplete`
     *   type: 'autocomplete',
     *   // set options available in every `autocomplete` cell of this column
     *   source: ['D', 'C', 'B', 'A'],
     *   // sort the `autocomplete` option in this order: D, C, B, A
     *   sortByRelevance: true
     * }],
     * ```
     */
    sortByRelevance: !0,
    /**
     * The `source` option sets options available in [`autocomplete`](@/guides/cell-types/autocomplete-cell-type/autocomplete-cell-type.md)
     * and [`dropdown`](@/guides/cell-types/dropdown-cell-type/dropdown-cell-type.md) cells.
     *
     * You can set the `source` option to one of the following:
     *
     * - An array
     * - A function
     *
     * Read more:
     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type/autocomplete-cell-type.md)
     * - [Dropdown cell type](@/guides/cell-types/dropdown-cell-type/dropdown-cell-type.md)
     * - [`strict`](#strict)
     * - [`allowHtml`](#allowHtml)
     * - [`filter`](#filter)
     * - [`sortByRelevance`](#sortByRelevance)
     *
     * @memberof Options#
     * @type {Array|Function}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // set `source` to an array
     * columns: [{
     *   // set the `type` of each cell in this column to `autocomplete`
     *   type: 'autocomplete',
     *   // set options available in every `autocomplete` cell of this column
     *   source: ['A', 'B', 'C', 'D']
     * }],
     *
     * // set `source` to a function
     * columns: [{
     *   // set the `type` of each cell in this column to `autocomplete`
     *   type: 'autocomplete',
     *   // for every `autocomplete` cell in this column, fetch data from an external source
     *   source(query, callback) {
     *     fetch('https://example.com/query?q=' + query, function(response) {
     *       callback(response.items);
     *     })
     *   }
     * }],
     * ```
     */
    source: void 0,
    /**
     * @description
     * If the [`data`](#data) option is not set, the `startCols` option sets the initial number of empty columns.
     *
     * The `startCols` option works only in Handsontable's constructor.
     *
     * @memberof Options#
     * @type {number}
     * @default 5
     * @category Core
     *
     * @example
     * ```js
     * // start with 15 empty columns
     * startCols: 15,
     * ```
     */
    startCols: 5,
    /**
     * @description
     * If the [`data`](#data) option is not set, the `startRows` option sets the initial number of empty rows.
     *
     * The `startRows` option works only in Handsontable's constructor.
     *
     * @memberof Options#
     * @type {number}
     * @default 5
     * @category Core
     *
     * @example
     * ```js
     * // start with 15 empty rows
     * startRows: 15,
     * ```
     */
    startRows: 5,
    /**
     * @description
     * The `stretchH` option determines what happens when the declared grid width
     * is different from the calculated sum of all column widths.
     *
     * You can set the `stretchH` option to one of the following:
     *
     * | Setting            | Description                                                       |
     * | ------------------ | ----------------------------------------------------------------- |
     * | `'none'` (default) | Don't fit the grid to the container (disable column stretching)   |
     * | `'last'`           | Fit the grid to the container, by stretching only the last column |
     * | `'all'`            | Fit the grid to the container, by stretching all columns evenly   |
     *
     * Read more:
     * - [Column width: Column stretching](@/guides/columns/column-width/column-width.md#column-stretching)
     *
     * @memberof Options#
     * @type {string}
     * @default 'none'
     * @category Core
     *
     * @example
     * ```js
     * // fit the grid to the container
     * // by stretching all columns evenly
     * stretchH: 'all',
     * ```
     */
    stretchH: "none",
    /**
     * The `strict` option configures the behavior of [`autocomplete`](@/guides/cell-types/autocomplete-cell-type/autocomplete-cell-type.md) cells.
     *
     * You can set the `strict` option to one of the following:
     *
     * | Setting | Mode                                                                                          | Description                                                                                |
     * | ------- | --------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------ |
     * | `true`  | [Strict mode](@/guides/cell-types/autocomplete-cell-type/autocomplete-cell-type.md#autocomplete-strict-mode)         | The end user:<br>- Can only choose one of suggested values<br>- Can't enter a custom value |
     * | `false` | [Flexible mode](@/guides/cell-types/autocomplete-cell-type/autocomplete-cell-type.md#autocomplete-flexible-mode)     | The end user:<br>- Can choose one of suggested values<br>- Can enter a custom value        |
     *
     * Read more:
     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type/autocomplete-cell-type.md)
     * - [`source`](#source)
     *
     * @memberof Options#
     * @type {boolean}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *   // set the `type` of each cell in this column to `autocomplete`
     *   type: 'autocomplete',
     *   // set options available in every `autocomplete` cell of this column
     *   source: ['A', 'B', 'C'],
     *   // values entered must match `A`, `B`, or `C`
     *   strict: true
     *   },
     * ],
     * ```
     */
    strict: void 0,
    /**
     * The `tableClassName` option lets you add CSS class names
     * to every Handsontable instance inside the `container` element.
     *
     * You can set the `tableClassName` option to one of the following:
     *
     * | Setting             | Description                                                                                |
     * | ------------------- | ------------------------------------------------------------------------------------------ |
     * | A string            | Add a single CSS class name to every Handsontable instance inside the `container` element  |
     * | An array of strings | Add multiple CSS class names to every Handsontable instance inside the `container` element |
     *
     * Read more:
     * - [`currentRowClassName`](#currentRowClassName)
     * - [`currentColClassName`](#currentColClassName)
     * - [`currentHeaderClassName`](#currentHeaderClassName)
     * - [`activeHeaderClassName`](#activeHeaderClassName)
     * - [`invalidCellClassName`](#invalidCellClassName)
     * - [`placeholderCellClassName`](#placeholderCellClassName)
     * - [`readOnlyCellClassName`](#readOnlyCellClassName)
     * - [`noWordWrapClassName`](#noWordWrapClassName)
     * - [`commentedCellClassName`](#commentedCellClassName)
     * - [`className`](#className)
     *
     * @memberof Options#
     * @type {string|string[]}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // add a `your-class-name` CSS class name
     * // to every Handsontable instance inside the `container` element
     * tableClassName: 'your-class-name',
     *
     * // add `first-class-name` and `second-class-name` CSS class names
     * // to every Handsontable instance inside the `container` element
     * tableClassName: ['first-class-name', 'second-class-name'],
     * ```
     */
    tableClassName: void 0,
    /**
     * The `tabMoves` option configures the action of the <kbd>**Tab**</kbd> key.
     *
     * You can set the `tabMoves` option to an object with the following properties
     * (or to a function that returns such an object):
     *
     * | Property | Type   | Description                                                                                                                                              |
     * | -------- | ------ | -------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `row`    | Number | - On pressing <kbd>**Tab**</kbd>, move selection `row` rows down<br>- On pressing <kbd>**Shift**</kbd>+<kbd>**Tab**</kbd>, move selection `row` rows up              |
     * | `col`    | Number | - On pressing <kbd>**Tab**</kbd>, move selection `col` columns right<br>- On pressing <kbd>**Shift**</kbd>+<kbd>**Tab**</kbd>, move selection `col` columns left     |
     *
     * @memberof Options#
     * @type {object|Function}
     * @default {row: 0, col: 1}
     * @category Core
     *
     * @example
     * ```js
     * // on pressing Tab, move selection 2 rows down and 2 columns right
     * // on pressing Shift+Tab, move selection 2 rows up and 2 columns left
     * tabMoves: {row: 2, col: 2},
     *
     * // the same setting, as a function
     * // `event` is a DOM Event object received on pressing Tab
     * // you can use it to check whether the user pressed Tab or Shift+Tab
     * tabMoves(event) {
     *   return {row: 2, col: 2};
     * },
     * ```
     */
    tabMoves: {
      row: 0,
      col: 1
    },
    /**
     * @description
     * The `title` option configures [column header](@/guides/columns/column-header/column-header.md) names.
     *
     * You can set the `title` option to a string.
     *
     * Read more:
     * - [Column header](@/guides/columns/column-header/column-header.md)
     * - [`columns`](#columns)
     *
     * @memberof Options#
     * @type {string}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *     // set the first column header name to `First name`
     *     title: 'First name',
     *     type: 'text',
     *   },
     *   {
     *     // set the second column header name to `Last name`
     *     title: 'Last name',
     *     type: 'text',
     *   }
     * ],
     * ```
     */
    title: void 0,
    /**
     * The `trimDropdown` option configures the width of the [`autocomplete`](@/guides/cell-types/autocomplete-cell-type/autocomplete-cell-type.md)
     * and [`dropdown`](@/guides/cell-types/dropdown-cell-type/dropdown-cell-type.md) lists.
     *
     * You can set the `trimDropdown` option to one of the following:
     *
     * | Setting          | Description                                                                     |
     * | ---------------- | ------------------------------------------------------------------------------- |
     * | `true` (default) | Make the dropdown/autocomplete list's width the same as the edited cell's width |
     * | `false`          | Scale the dropdown/autocomplete list's width to the list's content              |
     *
     * Read more:
     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type/autocomplete-cell-type.md)
     * - [Dropdown cell type](@/guides/cell-types/dropdown-cell-type/dropdown-cell-type.md)
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *     type: 'autocomplete',
     *     // for each cell of this column
     *     // make the `autocomplete` list's width the same as the edited cell's width
     *     trimDropdown: true,
     *   },
     *   {
     *     type: 'dropdown',
     *     // for each cell of this column
     *     // scale the `dropdown` list's width to the list's content
     *     trimDropdown: false,
     *   }
     * ],
     * ```
     */
    trimDropdown: !0,
    /**
     * @description
     * The `trimRows` option configures the [`TrimRows`](@/api/trimRows.md) plugin.
     *
     * You can set the `trimRows` option to one of the following:
     *
     * | Setting                          | Description                                                                                   |
     * | -------------------------------- | --------------------------------------------------------------------------------------------- |
     * | `false`                          | Disable the [`TrimRows`](@/api/trimRows.md) plugin                                            |
     * | `true`                           | Enable the [`TrimRows`](@/api/trimRows.md) plugin                                             |
     * | An array of physical row indexes | - Enable the [`TrimRows`](@/api/trimRows.md) plugin<br>- Trim selected rows at initialization |
     *
     * Read more:
     * - [Plugins: `TrimRows`](@/api/trimRows.md)
     * - [Row trimming](@/guides/rows/row-trimming/row-trimming.md)
     *
     * @memberof Options#
     * @type {boolean|number[]}
     * @default undefined
     * @category TrimRows
     *
     * @example
     * ```js
     * // enable the `TrimRows` plugin
     * trimRows: true,
     *
     * // enable the `TrimRows` plugin
     * // at Handsontable's initialization, trim rows 5, 10, and 15
     * trimRows: [5, 10, 15],
     * ```
     */
    trimRows: void 0,
    /**
     * The `trimWhitespace` option configures automatic whitespace removal. This option
     * affects the cell renderer and the cell editor.
     *
     * You can set the `trimWhitespace` option to one of the following:
     *
     * | Setting          | Description                                                     |
     * | ---------------- | --------------------------------------------------------------- |
     * | `true` (default) | Remove whitespace at the beginning and at the end of each cell |
     * | `false`          | Don't remove whitespace                                         |
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *     // don't remove whitespace
     *     // from any cell of this column
     *     trimWhitespace: false
     *   }
     * ]
     * ```
     */
    trimWhitespace: !0,
    /**
     * @description
     * The `type` option lets you set the [`renderer`](#renderer), [`editor`](#editor), and [`validator`](#validator)
     * options all at once, by selecting a [cell type](@/guides/cell-types/cell-type/cell-type.md).
     *
     * You can set the `type` option to one of the following:
     *
     * | Cell type                                                         | Renderer, editor & validator                                                                                                                                                                                                                       |
     * | ----------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | A [custom cell type](@/guides/cell-types/cell-type/cell-type.md)            | Renderer: your [custom cell renderer](@/guides/cell-functions/cell-renderer/cell-renderer.md)<br>Editor: your [custom cell editor](@/guides/cell-functions/cell-editor/cell-editor.md)<br>Validator: your [custom cell validator](@/guides/cell-functions/cell-validator/cell-validator.md) |
     * | [`'autocomplete'`](@/guides/cell-types/autocomplete-cell-type/autocomplete-cell-type.md) | Renderer: `AutocompleteRenderer`<br>Editor: `AutocompleteEditor`<br>Validator: `AutocompleteValidator`                                                                         |
     * | [`'checkbox'`](@/guides/cell-types/checkbox-cell-type/checkbox-cell-type.md)         | Renderer: `CheckboxRenderer`<br>Editor: `CheckboxEditor`<br>Validator: -                                                                                                                               |
     * | [`'date'`](@/guides/cell-types/date-cell-type/date-cell-type.md)                 | Renderer: `DateRenderer`<br>Editor: `DateEditor`<br>Validator: `DateValidator`                                                                                                 |
     * | [`'dropdown'`](@/guides/cell-types/dropdown-cell-type/dropdown-cell-type.md)         | Renderer: `DropdownRenderer`<br>Editor: `DropdownEditor`<br>Validator: `DropdownValidator`                                                                                     |
     * | [`'handsontable'`](@/guides/cell-types/handsontable-cell-type/handsontable-cell-type.md) | Renderer: `AutocompleteRenderer`<br>Editor: `HandsontableEditor`<br>Validator: -                                                                                                                       |
     * | [`'numeric'`](@/guides/cell-types/numeric-cell-type/numeric-cell-type.md)           | Renderer: `NumericRenderer`<br>Editor: `NumericEditor`<br>Validator: `NumericValidator`                                                                                        |
     * | [`'password'`](@/guides/cell-types/password-cell-type/password-cell-type.md)         | Renderer: `PasswordRenderer`<br>Editor: `PasswordEditor`<br>Validator: -                                                                                                                               |
     * | `'text'`                                                          | Renderer: `TextRenderer`<br>Editor: `TextEditor`<br>Validator: -                                                                                                                                       |
     * | [`'time`'](@/guides/cell-types/time-cell-type/time-cell-type.md)                 | Renderer: `TimeRenderer`<br>Editor: `TimeEditor`<br>Validator: `TimeValidator`                                                                                                 |
     *
     * Read more:
     * - [Cell type](@/guides/cell-types/cell-type/cell-type.md)
     * - [Cell renderer](@/guides/cell-functions/cell-renderer/cell-renderer.md)
     * - [Cell editor](@/guides/cell-functions/cell-editor/cell-editor.md)
     * - [Cell validator](@/guides/cell-functions/cell-validator/cell-validator.md)
     * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options/configuration-options.md#cascading-configuration)
     * - [`renderer`](#renderer)
     * - [`editor`](#editor)
     * - [`validator`](#validator)
     *
     * @memberof Options#
     * @type {string}
     * @default 'text'
     * @category Core
     *
     * @example
     * ```js
     * // set the `numeric` cell type for each cell of the entire grid
     * type: `'numeric'`,
     *
     * // apply the `type` option to individual columns
     * columns: [
     *   {
     *     // set the `autocomplete` cell type for each cell of this column
     *     type: 'autocomplete'
     *   },
     *   {
     *     // set the `myCustomCellType` cell type for each cell of this column
     *     type: 'myCustomCellType'
     *   }
     * ]
     * ```
     */
    type: "text",
    /**
     * The `uncheckedTemplate` option lets you configure what value
     * an unchecked [`checkbox`](@/guides/cell-types/checkbox-cell-type/checkbox-cell-type.md) cell has.
     *
     * You can set the `uncheckedTemplate` option to one of the following:
     *
     * | Setting           | Description                                                                                                                                                                                |
     * | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
     * | `false` (default) | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type/checkbox-cell-type.md) cell is unchecked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns `false`                 |
     * | A string          | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type/checkbox-cell-type.md) cell is unchecked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns a string of your choice |
     *
     * Read more:
     * - [Checkbox cell type: Checkbox template](@/guides/cell-types/checkbox-cell-type/checkbox-cell-type.md#checkbox-template)
     * - [`getDataAtCell()`](@/api/core.md#getDataAtCell)
     * - [`checkedTemplate`](#checkedTemplate)
     *
     * @memberof Options#
     * @type {boolean|string|number}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *     // set the `type` of each cell in this column to `checkbox`
     *     // when unchecked, the cell's value is `false`
     *     // when checked, the cell's value is `true`
     *     type: 'checkbox',
     *   },
     *   {
     *     // set the `type` of each cell in this column to `checkbox`
     *     // when unchecked, the cell's value is `'No'`
     *     // when checked, the cell's value is `'Yes'`
     *     type: 'checkbox',
     *     uncheckedTemplate: 'No'
     *     checkedTemplate: 'Yes',
     *  }
     * ],
     * ```
     */
    uncheckedTemplate: void 0,
    /**
     * The `undo` option configures the [`UndoRedo`](@/api/undoRedo.md) plugin.
     *
     * You can set the `undo` option to one of the following:
     *
     * | Setting | Description                                        |
     * | ------- | -------------------------------------------------- |
     * | `true`  | Enable the [`UndoRedo`](@/api/undoRedo.md) plugin  |
     * | `false` | Disable the [`UndoRedo`](@/api/undoRedo.md) plugin |
     *
     * By default, the `undo` option is set to `undefined`,
     * but the [`UndoRedo`](@/api/undoRedo.md) plugin acts as enabled.
     * To disable the [`UndoRedo`](@/api/undoRedo.md) plugin completely,
     * set the `undo` option to `false`.
     *
     * Read more:
     * - [Undo and redo](@/guides/accessories-and-menus/undo-redo/undo-redo.md)
     *
     * @memberof Options#
     * @type {boolean}
     * @default undefined
     * @category UndoRedo
     *
     * @example
     * ```js
     * // enable the `UndoRedo` plugin
     * undo: true,
     * ```
     */
    undo: void 0,
    /**
     * @description
     * The `validator` option sets a [cell validator](@/guides/cell-functions/cell-validator/cell-validator.md) for a cell.
     *
     * You can set the `validator` option to one of the following:
     *
     * | Setting              | Description                                                                      |
     * | -------------------- | -------------------------------------------------------------------------------- |
     * | A string             | A [cell validator alias](@/guides/cell-functions/cell-validator/cell-validator.md)              |
     * | A function           | Your [custom cell validator function](@/guides/cell-functions/cell-validator/cell-validator.md) |
     * | A regular expression | A regular expression used for cell validation                                    |
     *
     * By setting the `validator` option to a string,
     * you can use one of the following [cell validator aliases](@/guides/cell-functions/cell-validator/cell-validator.md):
     *
     * | Alias               | Cell validator function                                                 |
     * | ------------------- | ----------------------------------------------------------------------- |
     * | A custom alias      | Your [custom cell validator](@/guides/cell-functions/cell-validator/cell-validator.md) |
     * | `'autocomplete'`    | `AutocompleteValidator`                                                 |
     * | `'date'`            | `DateValidator`                                                         |
     * | `'dropdown'`        | `DropdownValidator`                                                     |
     * | `'numeric'`         | `NumericValidator`                                                      |
     * | `'time'`            | `TimeValidator`                                                         |
     *
     * To set the [`editor`](#editor), [`renderer`](#renderer), and [`validator`](#validator)
     * options all at once, use the [`type`](#type) option.
     *
     * Read more:
     * - [Cell validator](@/guides/cell-functions/cell-validator/cell-validator.md)
     * - [Cell type](@/guides/cell-types/cell-type/cell-type.md)
     * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options/configuration-options.md#cascading-configuration)
     * - [`type`](#type)
     *
     * @memberof Options#
     * @type {Function|RegExp|string}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *    {
     *      // use a built-in `numeric` cell validator
     *      validator: 'numeric'
     *    },
     *    {
     *      // validate against a regular expression
     *      validator: /^[0-9]$/
     *    },
     *    {
     *      // add a custom cell validator function
     *      validator(value, callback) {
     *          ...
     *      }
     *    },
     * ],
     * ```
     */
    validator: void 0,
    /**
     * @description
     * The `viewportColumnRenderingOffset` option configures the number of columns
     * to be rendered outside of the grid's viewport.
     *
     * You can set the `viewportColumnRenderingOffset` option to one of the following:
     *
     * | Setting            | Description                                             |
     * | ------------------ | ------------------------------------------------------- |
     * | `auto` (default)   | Use the offset calculated automatically by Handsontable |
     * | A number           | Set the offset manually                                 |
     *
     * The `viewportColumnRenderingOffset` setting is ignored when [`renderAllColumns`](#renderAllColumns) is set to `true`.
     *
     * Read more:
     * - [Performance: Define the number of pre-rendered rows and columns](@/guides/optimization/performance/performance.md#define-the-number-of-pre-rendered-rows-and-columns)
     *
     * @memberof Options#
     * @type {number|string}
     * @default 'auto'
     * @category Core
     *
     * @example
     * ```js
     * // render 70 columns outside of the grid's viewport
     * viewportColumnRenderingOffset: 70,
     * ```
     */
    viewportColumnRenderingOffset: "auto",
    /**
     * @description
     * The `viewportRowRenderingOffset` option configures the number of rows
     * to be rendered outside of the grid's viewport.
     *
     * You can set the `viewportRowRenderingOffset` option to one of the following:
     *
     * | Setting            | Description                                             |
     * | ------------------ | ------------------------------------------------------- |
     * | `auto` (default)   | Use the offset calculated automatically by Handsontable |
     * | A number           | Set the offset manually                                 |
     *
     * The `viewportRowRenderingOffset` setting is ignored when [`renderAllRows`](#renderAllRows) is set to `true`.
     *
     * Read more:
     * - [Performance: Define the number of pre-rendered rows and columns](@/guides/optimization/performance/performance.md#define-the-number-of-pre-rendered-rows-and-columns)
     * - [Column virtualization](@/guides/columns/column-virtualization/column-virtualization.md)
     *
     * @memberof Options#
     * @type {number|string}
     * @default 'auto'
     * @category Core
     *
     * @example
     * ```js
     * // render 70 rows outside of the grid's viewport
     * viewportRowRenderingOffset: 70,
     * ```
     */
    viewportRowRenderingOffset: "auto",
    /**
     * The `visibleRows` option sets the height of the [`autocomplete`](@/guides/cell-types/autocomplete-cell-type/autocomplete-cell-type.md)
     * and [`dropdown`](@/guides/cell-types/dropdown-cell-type/dropdown-cell-type.md) lists.
     *
     * When the number of list options exceeds the `visibleRows` number, a scrollbar appears.
     *
     * Read more:
     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type/autocomplete-cell-type.md)
     * - [Dropdown cell type](@/guides/cell-types/dropdown-cell-type/dropdown-cell-type.md)
     *
     * @memberof Options#
     * @type {number}
     * @default 10
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *     type: 'autocomplete',
     *     // set the `autocomplete` list's height to 15 options
     *     // for each cell of this column
     *     visibleRows: 15,
     *   },
     *   {
     *     type: 'dropdown',
     *     // set the `dropdown` list's height to 5 options
     *     // for each cell of this column
     *     visibleRows: 5,
     *   }
     * ],
     * ```
     */
    visibleRows: 10,
    /**
     * The `width` option configures the width of your grid.
     *
     * You can set the `width` option to one of the following:
     *
     * | Setting                                                                    | Example                   |
     * | -------------------------------------------------------------------------- | ------------------------- |
     * | A number of pixels                                                         | `width: 500`              |
     * | A string with a [CSS unit](https://www.w3schools.com/cssref/css_units.asp) | `width: '75vw'`           |
     * | A function that returns a valid number or string                           | `width() { return 500; }` |
     *
     * Read more:
     * - [Grid size](@/guides/getting-started/grid-size/grid-size.md)
     *
     * @memberof Options#
     * @type {number|string|Function}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // set the grid's width to 500px
     * width: 500,
     *
     * // set the grid's width to 75vw
     * width: '75vw',
     *
     * // set the grid's width to 500px, using a function
     * width() {
     *   return 500;
     * },
     * ```
     */
    width: void 0,
    /**
     * The `wordWrap` option configures whether content that exceeds a column's width is wrapped or not.
     *
     * You can set the `wordWrap` option to one of the following:
     *
     * | Setting          | Description                                             |
     * | ---------------- | ------------------------------------------------------- |
     * | `true` (default) | If content exceeds the column's width, wrap the content |
     * | `false`          | Don't wrap content                                      |
     *
     * To style cells that don't wrap content, use the [`noWordWrapClassName`](#noWordWrapClassName) option.
     *
     * Read more:
     * - [`noWordWrapClassName`](#noWordWrapClassName)
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * // set column width for every column of the entire grid
     * colWidths: 100,
     *
     * columns: [
     *   {
     *     // don't wrap content in this column
     *     wordWrap: false,
     *   },
     *   {
     *     // if content exceeds this column's width, wrap the content
     *     wordWrap: true,
     *   }
     * ],
     * ```
     */
    wordWrap: !0
    /* eslint-enable jsdoc/require-description-complete-sentence */
  });
  function qV(n, e, t) {
    return (e = Axe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function Axe(n) {
    var e = Pxe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function Pxe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function Ixe() {
    return class {
    };
  }
  class Oxe {
    constructor(e) {
      qV(this, "metaCtor", Ixe()), qV(this, "meta", void 0), this.meta = this.metaCtor.prototype, ai(this.meta, CG()), this.meta.instance = e;
    }
    /**
     * Gets constructor of the global meta object. Necessary for inheritance for creating the next meta layers.
     *
     * @returns {Function}
     */
    getMetaConstructor() {
      return this.metaCtor;
    }
    /**
     * Gets settings object for this layer.
     *
     * @returns {object}
     */
    getMeta() {
      return this.meta;
    }
    /**
     * Updates global settings object by merging settings with the current state.
     *
     * @param {object} settings An object to merge with.
     */
    updateMeta(e) {
      var t;
      ai(this.meta, e), Z1(this.meta, {
        ...e,
        type: (t = e.type) !== null && t !== void 0 ? t : this.meta.type
      }, e);
    }
  }
  function kxe(n, e, t) {
    return (e = Dxe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function Dxe(n) {
    var e = Nxe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function Nxe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class Lxe {
    constructor(e) {
      kxe(this, "meta", void 0);
      const t = e.getMetaConstructor();
      this.meta = new t();
    }
    /**
     * Gets settings object for this layer.
     *
     * @returns {TableMeta}
     */
    getMeta() {
      return this.meta;
    }
    /**
     * Updates table settings object by merging settings with the current state.
     *
     * @param {object} settings An object to merge with.
     */
    updateMeta(e) {
      ai(this.meta, e), Z1(this.meta, e, e);
    }
  }
  function F0(n, e, t) {
    return (e = Hxe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function Hxe(n) {
    var e = $xe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function $xe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class z_ {
    constructor(e) {
      F0(this, "valueFactory", void 0), F0(this, "data", []), F0(this, "index", []), F0(this, "holes", /* @__PURE__ */ new Set()), this.valueFactory = e;
    }
    /**
     * Gets or if data not exist creates and returns new data.
     *
     * @param {number} key The item key as zero-based index.
     * @returns {*}
     */
    obtain(e) {
      ES(() => RS(e), "Expecting an unsigned number.");
      const t = this._getStorageIndexByKey(e);
      let i;
      if (t >= 0)
        i = this.data[t], i === void 0 && (i = this.valueFactory(e), this.data[t] = i);
      else if (i = this.valueFactory(e), this.holes.size > 0) {
        const r = this.holes.values().next().value;
        this.holes.delete(r), this.data[r] = i, this.index[e] = r;
      } else
        this.data.push(i), this.index[e] = this.data.length - 1;
      return i;
    }
    /**
     * Inserts an empty data to the map. This method creates an empty space for obtaining
     * new data.
     *
     * @param {number} key The key as volatile zero-based index at which to begin inserting space for new data.
     * @param {number} [amount=1] Ammount of data to insert.
     */
    insert(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      ES(() => RS(e) || $0(e), "Expecting an unsigned number or null/undefined argument.");
      const i = [], r = this.data.length;
      for (let o = 0; o < t; o++)
        i.push(r + o), this.data.push(void 0);
      const s = $0(e) ? this.index.length : e;
      this.index = [...this.index.slice(0, s), ...i, ...this.index.slice(s)];
    }
    /**
     * Removes (soft remove) data from "index" and according to the amount of data.
     *
     * @param {number} key The key as volatile zero-based index at which to begin removing the data.
     * @param {number} [amount=1] Ammount data to remove.
     */
    remove(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      ES(() => RS(e) || $0(e), "Expecting an unsigned number or null/undefined argument.");
      const i = this.index.splice($0(e) ? this.index.length - t : e, t);
      for (let r = 0; r < i.length; r++) {
        const s = i[r];
        typeof s == "number" && this.holes.add(s);
      }
    }
    /**
     * Returns the size of the data which this map holds.
     *
     * @returns {number}
     */
    size() {
      return this.data.length - this.holes.size;
    }
    /**
     * Returns a new Iterator object that contains the values for each item in the LazyMap object.
     *
     * @returns {Iterator}
     */
    values() {
      return xc(this.data, (e, t) => !this.holes.has(t))[Symbol.iterator]();
    }
    /**
     * Returns a new Iterator object that contains an array of `[index, value]` for each item in the LazyMap object.
     *
     * @returns {Iterator}
     */
    entries() {
      const e = [];
      for (let i = 0; i < this.data.length; i++) {
        const r = this._getKeyByStorageIndex(i);
        r !== -1 && e.push([r, this.data[i]]);
      }
      let t = 0;
      return {
        next: () => {
          if (t < e.length) {
            const i = e[t];
            return t += 1, {
              value: i,
              done: !1
            };
          }
          return {
            done: !0
          };
        }
      };
    }
    /**
     * Clears the map.
     */
    clear() {
      this.data = [], this.index = [], this.holes.clear();
    }
    /**
     * Gets storage index calculated from the key associated with the specified value.
     *
     * @param {number} key Volatile zero-based index.
     * @returns {number} Returns index 0-N or -1 if no storage index found.
     */
    _getStorageIndexByKey(e) {
      return this.index.length > e ? this.index[e] : -1;
    }
    /**
     * Gets the key associated with the specified value calculated from storage index.
     *
     * @param {number} dataIndex Zero-based storage index.
     * @returns {number} Returns index 0-N or -1 if no key found.
     */
    _getKeyByStorageIndex(e) {
      return this.index.indexOf(e);
    }
    /**
     * Makes this object iterable.
     *
     * @returns {Iterator}
     */
    [Symbol.iterator]() {
      return this.entries();
    }
  }
  function XV(n, e, t) {
    return (e = Fxe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function Fxe(n) {
    var e = Bxe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function Bxe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  const Vxe = ["data", "width"];
  class Wxe {
    constructor(e) {
      XV(this, "globalMeta", void 0), XV(this, "metas", new z_(() => this._createMeta())), this.globalMeta = e, this.metas = new z_(() => this._createMeta());
    }
    /**
     * Updates column meta object by merging settings with the current state.
     *
     * @param {number} physicalColumn The physical column index which points what column meta object is updated.
     * @param {object} settings An object to merge with.
     */
    updateMeta(e, t) {
      const i = this.getMeta(e);
      ai(i, t), Z1(i, t);
    }
    /**
     * Creates one or more columns at specific position.
     *
     * @param {number} physicalColumn The physical column index which points from what position the column is added.
     * @param {number} amount An amount of columns to add.
     */
    createColumn(e, t) {
      this.metas.insert(e, t);
    }
    /**
     * Removes one or more columns from the collection.
     *
     * @param {number} physicalColumn The physical column index which points from what position the column is removed.
     * @param {number} amount An amount columns to remove.
     */
    removeColumn(e, t) {
      this.metas.remove(e, t);
    }
    /**
     * Gets settings object for this layer.
     *
     * @param {number} physicalColumn The physical column index.
     * @returns {object}
     */
    getMeta(e) {
      return this.metas.obtain(e);
    }
    /**
     * Gets constructor of the column meta object. Necessary for inheritance - creating the next meta layers.
     *
     * @param {number} physicalColumn The physical column index.
     * @returns {Function}
     */
    getMetaConstructor(e) {
      return this.metas.obtain(e).constructor;
    }
    /**
     * Clears all saved column meta objects.
     */
    clearCache() {
      this.metas.clear();
    }
    /**
     * Creates and returns new column meta object with properties inherited from the global meta layer.
     *
     * @private
     * @returns {object}
     */
    _createMeta() {
      return Mxe(this.globalMeta.getMetaConstructor(), Vxe).prototype;
    }
  }
  function ZV(n, e, t) {
    return (e = jxe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function jxe(n) {
    var e = zxe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function zxe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class Uxe {
    constructor(e) {
      ZV(this, "columnMeta", void 0), ZV(this, "metas", new z_(() => this._createRow())), this.columnMeta = e;
    }
    /**
     * Updates cell meta object by merging settings with the current state.
     *
     * @param {number} physicalRow The physical row index which points what cell meta object is updated.
     * @param {number} physicalColumn The physical column index which points what cell meta object is updated.
     * @param {object} settings An object to merge with.
     */
    updateMeta(e, t, i) {
      const r = this.getMeta(e, t);
      ai(r, i), Z1(r, i);
    }
    /**
     * Creates one or more rows at specific position.
     *
     * @param {number} physicalRow The physical row index which points from what position the row is added.
     * @param {number} amount An amount of rows to add.
     */
    createRow(e, t) {
      this.metas.insert(e, t);
    }
    /**
     * Creates one or more columns at specific position.
     *
     * @param {number} physicalColumn The physical column index which points from what position the column is added.
     * @param {number} amount An amount of columns to add.
     */
    createColumn(e, t) {
      for (let i = 0; i < this.metas.size(); i++)
        this.metas.obtain(i).insert(e, t);
    }
    /**
     * Removes one or more rows from the collection.
     *
     * @param {number} physicalRow The physical row index which points from what position the row is removed.
     * @param {number} amount An amount of rows to remove.
     */
    removeRow(e, t) {
      this.metas.remove(e, t);
    }
    /**
     * Removes one or more columns from the collection.
     *
     * @param {number} physicalColumn The physical column index which points from what position the column is removed.
     * @param {number} amount An amount of columns to remove.
     */
    removeColumn(e, t) {
      for (let i = 0; i < this.metas.size(); i++)
        this.metas.obtain(i).remove(e, t);
    }
    /**
     * Gets settings object for this layer.
     *
     * @param {number} physicalRow The physical row index.
     * @param {number} physicalColumn The physical column index.
     * @param {string} [key] If the key exists its value will be returned, otherwise the whole cell meta object.
     * @returns {object}
     */
    getMeta(e, t, i) {
      const r = this.metas.obtain(e).obtain(t);
      return i === void 0 ? r : r[i];
    }
    /**
     * Sets settings object for this layer defined by "key" property.
     *
     * @param {number} physicalRow The physical row index.
     * @param {number} physicalColumn The physical column index.
     * @param {string} key The property name to set.
     * @param {*} value Value to save.
     */
    setMeta(e, t, i, r) {
      var s;
      const o = this.metas.obtain(e).obtain(t);
      (s = o._automaticallyAssignedMetaProps) === null || s === void 0 || s.delete(i), o[i] = r;
    }
    /**
     * Removes a property defined by the "key" argument from the cell meta object.
     *
     * @param {number} physicalRow The physical row index.
     * @param {number} physicalColumn The physical column index.
     * @param {string} key The property name to remove.
     */
    removeMeta(e, t, i) {
      const r = this.metas.obtain(e).obtain(t);
      delete r[i];
    }
    /**
     * Returns all cell meta objects that were created during the Handsontable operation. As cell meta
     * objects are created lazy, the length of the returned collection depends on how and when the
     * table has asked for access to that meta objects.
     *
     * @returns {object[]}
     */
    getMetas() {
      const e = [], t = Array.from(this.metas.values());
      for (let i = 0; i < t.length; i++)
        ke(t[i]) && e.push(...t[i].values());
      return e;
    }
    /**
     * Returns all cell meta objects that were created during the Handsontable operation but for
     * specific row index.
     *
     * @param {number} physicalRow The physical row index.
     * @returns {object[]}
     */
    getMetasAtRow(e) {
      ES(() => RS(e), "Expecting an unsigned number.");
      const t = new Map(this.metas);
      return t.has(e) ? Array.from(t.get(e).values()) : [];
    }
    /**
     * Clears all saved cell meta objects.
     */
    clearCache() {
      this.metas.clear();
    }
    /**
     * Creates and returns new structure for cell meta objects stored in columnar axis.
     *
     * @private
     * @returns {object}
     */
    _createRow() {
      return new z_((e) => this._createMeta(e));
    }
    /**
     * Creates and returns new cell meta object with properties inherited from the column meta layer.
     *
     * @private
     * @param {number} physicalColumn The physical column index.
     * @returns {object}
     */
    _createMeta(e) {
      const t = this.columnMeta.getMetaConstructor(e);
      return new t();
    }
  }
  class SG {
    constructor(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
      this.hot = e, this.globalMeta = new Oxe(e), this.tableMeta = new Lxe(this.globalMeta), this.columnMeta = new Wxe(this.globalMeta), this.cellMeta = new Uxe(this.columnMeta), i.forEach((r) => new r(this)), this.globalMeta.updateMeta(t);
    }
    /**
     * Gets the global meta object that is a root of all default settings, which are recognizable by Handsontable.
     * Other layers inherites all properties from this. Adding, removing, or changing property in that
     * object has a direct reflection to all layers.
     *
     * @returns {object}
     */
    getGlobalMeta() {
      return this.globalMeta.getMeta();
    }
    /**
     * Updates global settings object by merging settings with the current state.
     *
     * @param {object} settings An object to merge with.
     */
    updateGlobalMeta(e) {
      this.globalMeta.updateMeta(e);
    }
    /**
     * Gets settings object that was passed in the Handsontable constructor. That layer contains all
     * default settings inherited from the GlobalMeta layer merged with settings passed by the developer.
     * Adding, removing, or changing property in that object has no direct reflection on any other layers.
     *
     * @returns {TableMeta}
     */
    getTableMeta() {
      return this.tableMeta.getMeta();
    }
    /**
     * Updates table settings object by merging settings with the current state.
     *
     * @param {object} settings An object to merge with.
     */
    updateTableMeta(e) {
      this.tableMeta.updateMeta(e);
    }
    /**
     * Gets column meta object that is a root of all settings defined in the column property of the Handsontable
     * settings. Each column in the Handsontable is associated with a unique meta object which identified by
     * the physical column index. Adding, removing, or changing property in that object has a direct reflection
     * only for the CellMeta layer. The reflection will be visible only if the property doesn't exist in the lower
     * layers (prototype lookup).
     *
     * @param {number} physicalColumn The physical column index.
     * @returns {object}
     */
    getColumnMeta(e) {
      return this.columnMeta.getMeta(e);
    }
    /**
     * Updates column meta object by merging settings with the current state.
     *
     * @param {number} physicalColumn The physical column index which points what column meta object is updated.
     * @param {object} settings An object to merge with.
     */
    updateColumnMeta(e, t) {
      this.columnMeta.updateMeta(e, t);
    }
    /**
     * Gets the cell meta object that is a root of all settings defined for the specific cell rendered by
     * the Handsontable. Each cell meta inherits settings from higher layers. When a property doesn't
     * exist in that layer, it is looked up through a prototype to the highest layer. Starting
     * from CellMeta -> ColumnMeta and ending to GlobalMeta, which stores default settings. Adding,
     * removing, or changing property in that object has no direct reflection on any other layers.
     *
     * @param {number} physicalRow The physical row index.
     * @param {number} physicalColumn The physical column index.
     * @param {object} options Additional options that are used to extend the cell meta object.
     * @param {number} options.visualRow The visual row index of the currently requested cell meta object.
     * @param {number} options.visualColumn The visual column index of the currently requested cell meta object.
     * @returns {object}
     */
    getCellMeta(e, t, i) {
      let {
        visualRow: r,
        visualColumn: s
      } = i;
      const o = this.cellMeta.getMeta(e, t);
      return o.visualRow = r, o.visualCol = s, o.row = e, o.col = t, this.runLocalHooks("afterGetCellMeta", o), o;
    }
    /**
     * Gets a value (defined by the `key` property) from the cell meta object.
     *
     * @param {number} physicalRow The physical row index.
     * @param {number} physicalColumn The physical column index.
     * @param {string} key Defines the value that will be returned from the cell meta object.
     * @returns {*}
     */
    getCellMetaKeyValue(e, t, i) {
      if (typeof i != "string")
        throw new Error("The passed cell meta object key is not a string");
      return this.cellMeta.getMeta(e, t, i);
    }
    /**
     * Sets settings object for cell meta object defined by "key" property.
     *
     * @param {number} physicalRow The physical row index.
     * @param {number} physicalColumn The physical column index.
     * @param {string} key The property name to set.
     * @param {*} value Value to save.
     */
    setCellMeta(e, t, i, r) {
      this.cellMeta.setMeta(e, t, i, r);
    }
    /**
     * Updates cell meta object by merging settings with the current state.
     *
     * @param {number} physicalRow The physical row index which points what cell meta object is updated.
     * @param {number} physicalColumn The physical column index which points what cell meta object is updated.
     * @param {object} settings An object to merge with.
     */
    updateCellMeta(e, t, i) {
      this.cellMeta.updateMeta(e, t, i);
    }
    /**
     * Removes a property defined by the "key" argument from the cell meta object.
     *
     * @param {number} physicalRow The physical row index.
     * @param {number} physicalColumn The physical column index.
     * @param {string} key The property name to remove.
     */
    removeCellMeta(e, t, i) {
      this.cellMeta.removeMeta(e, t, i);
    }
    /**
     * Returns all cell meta objects that were created during the Handsontable operation. As cell meta
     * objects are created lazy, the length of the returned collection depends on how and when the
     * table has asked for access to that meta objects.
     *
     * @returns {object[]}
     */
    getCellsMeta() {
      return this.cellMeta.getMetas();
    }
    /**
     * Returns all cell meta objects that were created during the Handsontable operation but for
     * specific row index.
     *
     * @param {number} physicalRow The physical row index.
     * @returns {object[]}
     */
    getCellsMetaAtRow(e) {
      return this.cellMeta.getMetasAtRow(e);
    }
    /**
     * Creates one or more rows at specific position.
     *
     * @param {number} physicalRow The physical row index which points from what position the row is added.
     * @param {number} [amount=1] An amount of rows to add.
     */
    createRow(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      this.cellMeta.createRow(e, t);
    }
    /**
     * Removes one or more rows from the collection.
     *
     * @param {number} physicalRow The physical row index which points from what position the row is removed.
     * @param {number} [amount=1] An amount rows to remove.
     */
    removeRow(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      this.cellMeta.removeRow(e, t);
    }
    /**
     * Creates one or more columns at specific position.
     *
     * @param {number} physicalColumn The physical column index which points from what position the column is added.
     * @param {number} [amount=1] An amount of columns to add.
     */
    createColumn(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      this.cellMeta.createColumn(e, t), this.columnMeta.createColumn(e, t);
    }
    /**
     * Removes one or more columns from the collection.
     *
     * @param {number} physicalColumn The physical column index which points from what position the column is removed.
     * @param {number} [amount=1] An amount of columns to remove.
     */
    removeColumn(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      this.cellMeta.removeColumn(e, t), this.columnMeta.removeColumn(e, t);
    }
    /**
     * Clears all saved cell meta objects. It keeps column meta, table meta, and global meta intact.
     */
    clearCellsCache() {
      this.cellMeta.clearCache();
    }
    /**
     * Clears all saved cell and columns meta objects.
     */
    clearCache() {
      this.cellMeta.clearCache(), this.columnMeta.clearCache();
    }
  }
  qt(SG, Ki);
  function QV(n, e, t, i) {
    const {
      hotInstance: r,
      dataMap: s,
      dataSource: o,
      internalSource: a,
      source: l,
      metaManager: c,
      firstRun: u
    } = i, h = pr(a), d = r.getSettings();
    Array.isArray(d.dataSchema) ? r.dataType = "array" : cn(d.dataSchema) ? r.dataType = "function" : r.dataType = "object", s && s.destroy(), n = r.runHooks(`before${h}`, n, u, l);
    const f = new Ug(r, n, c);
    if (e(f), typeof n == "object" && n !== null)
      n.push && n.splice || (n = [n]);
    else if (n === null) {
      const g = f.getSchema();
      n = [];
      let p, m = 0, v = 0;
      for (m = 0, v = d.startRows; m < v; m++)
        if ((r.dataType === "object" || r.dataType === "function") && d.dataSchema)
          p = mr(g), n.push(p);
        else if (r.dataType === "array")
          p = mr(g[0]), n.push(p);
        else {
          p = [];
          for (let y = 0, w = d.startCols; y < w; y++)
            p.push(null);
          n.push(p);
        }
    } else
      throw new Error(`${a} only accepts array of objects or array of arrays (${typeof n} given)`);
    Array.isArray(n[0]) && (r.dataType = "array"), d.data = n, f.dataSource = n, o.data = n, o.dataType = r.dataType, o.colToProp = f.colToProp.bind(f), o.propToCol = f.propToCol.bind(f), o.countCachedColumns = f.countCachedColumns.bind(f), t(f), r.runHooks(`after${h}`, n, u, l), u || (r.runHooks("afterChange", null, a), r.render()), r.getSettings().ariaTags && ze(r.rootElement, [
      $7(-1),
      // If run after initialization, add the number of row headers.
      P1(r.countCols() + (r.view ? r.countRowHeaders() : 0))
    ]);
  }
  function JV(n, e, t) {
    return (e = Gxe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function Gxe(n) {
    var e = Yxe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function Yxe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class Kxe {
    constructor(e) {
      JV(this, "metaManager", void 0), JV(this, "metaSyncMemo", /* @__PURE__ */ new Map()), this.metaManager = e, e.addLocalHook("afterGetCellMeta", (t) => this.extendCellMeta(t)), Ie.getSingleton().add("beforeRender", (t) => {
        t && this.metaSyncMemo.clear();
      }, this.metaManager.hot);
    }
    /**
     * Extends the cell meta object by user-specific properties.
     *
     * The cell meta object can be extended dynamically,
     * either by Handsontable's hooks (`beforeGetCellMeta` and`afterGetCellMeta`),
     * or by Handsontable's `cells` option.
     *
     * To boost performance, the extending process is triggered only once per one slow Handsontable render cycle.
     *
     * @param {object} cellMeta The cell meta object.
     */
    extendCellMeta(e) {
      var t;
      const {
        row: i,
        col: r
      } = e;
      if ((t = this.metaSyncMemo.get(i)) !== null && t !== void 0 && t.has(r))
        return;
      const {
        visualRow: s,
        visualCol: o
      } = e, a = this.metaManager.hot, l = a.colToProp(o);
      e.prop = l, a.runHooks("beforeGetCellMeta", s, o, e);
      const c = In(e, "type") ? e.type : null;
      let u = cn(e.cells) ? e.cells(i, r, l) : null;
      if (c)
        if (u) {
          var h;
          u.type = (h = u.type) !== null && h !== void 0 ? h : c;
        } else
          u = {
            type: c
          };
      u && this.metaManager.updateCellMeta(i, r, u), a.runHooks("afterGetCellMeta", s, o, e), this.metaSyncMemo.has(i) || this.metaSyncMemo.set(i, /* @__PURE__ */ new Set()), this.metaSyncMemo.get(i).add(r);
    }
  }
  function qxe(n, e, t) {
    Xxe(n, e), e.set(n, t);
  }
  function Xxe(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function xT(n, e, t) {
    return (e = Zxe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function Zxe(n) {
    var e = Qxe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function Qxe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function Jxe(n, e) {
    return n.get(eTe(n, e));
  }
  function eTe(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var e3 = /* @__PURE__ */ new WeakMap();
  class tTe {
    constructor(e) {
      xT(this, "metaManager", void 0), xT(this, "usageTracker", /* @__PURE__ */ new Set()), xT(this, "propDescriptors", /* @__PURE__ */ new Map([["ariaTags", {
        initOnly: !0
      }], ["fixedColumnsLeft", {
        target: "fixedColumnsStart",
        onChange(t) {
          if (this.metaManager.hot.isRtl() && t === "fixedColumnsLeft")
            throw new Error("The `fixedColumnsLeft` is not supported for RTL. Please use option `fixedColumnsStart`.");
          if (this.usageTracker.has("fixedColumnsLeft") && this.usageTracker.has("fixedColumnsStart"))
            throw new Error("The `fixedColumnsLeft` and `fixedColumnsStart` should not be used together. Please use only the option `fixedColumnsStart`.");
        }
      }], ["layoutDirection", {
        initOnly: !0
      }], ["renderAllColumns", {
        initOnly: !0
      }], ["renderAllRows", {
        initOnly: !0
      }]])), qxe(this, e3, (t, i, r) => {
        if (!r)
          throw new Error(`The \`${t}\` option can not be updated after the Handsontable is initialized.`);
      }), this.metaManager = e, this.extendMetaProps();
    }
    /**
     * Extends the meta options based on the object descriptors from the `propDescriptors` list.
     */
    extendMetaProps() {
      this.propDescriptors.forEach((e, t) => {
        const {
          initOnly: i,
          target: r,
          onChange: s
        } = e, o = typeof r == "string", a = o ? r : t, l = `_${a}`;
        this.metaManager.globalMeta.meta[l] = this.metaManager.globalMeta.meta[a], s ? (this.installPropWatcher(t, l, s), o && this.installPropWatcher(r, l, s)) : i && (this.installPropWatcher(t, l, Jxe(e3, this)), this.metaManager.globalMeta.meta._initOnlySettings || (this.metaManager.globalMeta.meta._initOnlySettings = []), this.metaManager.globalMeta.meta._initOnlySettings.push(t));
      });
    }
    /**
     * Installs the property watcher to the `propName` option and forwards getter and setter to
     * the new one.
     *
     * @param {string} propName The property to watch.
     * @param {string} origProp The property from/to the value is forwarded.
     * @param {Function} onChange The callback.
     */
    installPropWatcher(e, t, i) {
      const r = this;
      Object.defineProperty(this.metaManager.globalMeta.meta, e, {
        get() {
          return this[t];
        },
        set(s) {
          const o = !r.usageTracker.has(e);
          r.usageTracker.add(e), i.call(r, e, s, o), this[t] = s;
        },
        enumerable: !0,
        configurable: !0
      });
    }
  }
  const _G = "gridDefault", hh = "editorManager.handlingEditor", nTe = {
    name: "editorCloseAndSave",
    callback(n) {
      n._getEditorManager().closeEditorAndSaveChanges();
    }
  }, iTe = "hooksRefRegisterer", RG = {
    /**
     * Internal hooks storage.
     */
    _hooksStorage: /* @__PURE__ */ Object.create(null),
    /**
     * Add hook to the collection.
     *
     * @param {string} key The hook name.
     * @param {Function} callback The hook callback.
     * @returns {object}
     */
    addHook(n, e) {
      return this._hooksStorage[n] || (this._hooksStorage[n] = []), this.hot.addHook(n, e), this._hooksStorage[n].push(e), this;
    },
    /**
     * Remove all hooks listeners by hook name.
     *
     * @param {string} key The hook name.
     */
    removeHooksByKey(n) {
      z(this._hooksStorage[n] || [], (e) => {
        this.hot.removeHook(n, e);
      });
    },
    /**
     * Clear all added hooks.
     */
    clearHooks() {
      lt(this._hooksStorage, (n, e) => this.removeHooksByKey(e)), this._hooksStorage = {};
    }
  };
  Sl(RG, "MIXIN_NAME", iTe, {
    writable: !1,
    enumerable: !1
  });
  function Po(n, e, t) {
    return (e = rTe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function rTe(n) {
    var e = sTe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function sTe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  const oTe = "base", Kn = Object.freeze({
    VIRGIN: "STATE_VIRGIN",
    // before editing
    EDITING: "STATE_EDITING",
    WAITING: "STATE_WAITING",
    // waiting for async validation
    FINISHED: "STATE_FINISHED"
  });
  class Jp {
    static get EDITOR_TYPE() {
      return oTe;
    }
    /**
     * A reference to the source instance of the Handsontable.
     *
     * @type {Handsontable}
     */
    /**
     * @param {Handsontable} hotInstance A reference to the source instance of the Handsontable.
     */
    constructor(e) {
      Po(this, "hot", void 0), Po(this, "state", Kn.VIRGIN), Po(this, "_opened", !1), Po(this, "_fullEditMode", !1), Po(this, "_closeCallback", null), Po(this, "TD", null), Po(this, "row", null), Po(this, "col", null), Po(this, "prop", null), Po(this, "originalValue", null), Po(this, "cellProperties", null), this.hot = e, this.init();
    }
    /**
     * Fires callback after closing editor.
     *
     * @private
     * @param {boolean} result The editor value.
     */
    _fireCallbacks(e) {
      this._closeCallback && (this._closeCallback(e), this._closeCallback = null);
    }
    /**
     * Initializes an editor's intance.
     */
    init() {
    }
    /**
     * Required method to get current value from editable element.
     */
    getValue() {
      throw Error("Editor getValue() method unimplemented");
    }
    /**
     * Required method to set new value into editable element.
     */
    setValue() {
      throw Error("Editor setValue() method unimplemented");
    }
    /**
     * Required method to open editor.
     */
    open() {
      throw Error("Editor open() method unimplemented");
    }
    /**
     * Required method to close editor.
     */
    close() {
      throw Error("Editor close() method unimplemented");
    }
    /**
     * Prepares editor's meta data.
     *
     * @param {number} row The visual row index.
     * @param {number} col The visual column index.
     * @param {number|string} prop The column property (passed when datasource is an array of objects).
     * @param {HTMLTableCellElement} td The rendered cell element.
     * @param {*} value The rendered value.
     * @param {object} cellProperties The cell meta object (see {@link Core#getCellMeta}).
     */
    prepare(e, t, i, r, s, o) {
      this.TD = r, this.row = e, this.col = t, this.prop = i, this.originalValue = s, this.cellProperties = o, this.state = this.isOpened() ? this.state : Kn.VIRGIN;
    }
    /**
     * Fallback method to provide extendable editors in ES5.
     *
     * @returns {Function}
     */
    extend() {
      return class extends this.constructor {
      };
    }
    /**
     * Saves value from editor into data storage.
     *
     * @param {*} value The editor value.
     * @param {boolean} ctrlDown If `true`, applies value to each cell in the last selected range.
     */
    saveValue(e, t) {
      let i, r, s, o;
      if (t) {
        const l = this.hot.getSelectedLast();
        i = Math.max(Math.min(l[0], l[2]), 0), r = Math.max(Math.min(l[1], l[3]), 0), s = Math.max(l[0], l[2]), o = Math.max(l[1], l[3]);
      } else
        [i, r, s, o] = [this.row, this.col, null, null];
      const a = this.hot.runHooks("modifyGetCellCoords", i, r);
      Array.isArray(a) && ([i, r] = a), this.hot.populateFromArray(i, r, e, s, o, "edit");
    }
    /**
     * Begins editing on a highlighted cell and hides fillHandle corner if was present.
     *
     * @param {*} newInitialValue The initial editor value.
     * @param {Event} event The keyboard event object.
     */
    beginEditing(e, t) {
      if (this.state !== Kn.VIRGIN)
        return;
      const i = this.hot, r = i.rowIndexMapper.getRenderableFromVisualIndex(this.row), s = i.columnIndexMapper.getRenderableFromVisualIndex(this.col);
      if (i.view.scrollViewport(i._createCellCoords(r, s)), this.state = Kn.EDITING, this.isInFullEditMode()) {
        const o = typeof e == "string" ? e : Vn(this.originalValue);
        this.setValue(o);
      }
      this.open(t), this._opened = !0, this.focus(), i.view.render(), i.runHooks("afterBeginEditing", this.row, this.col);
    }
    /**
     * Finishes editing and start saving or restoring process for editing cell or last selected range.
     *
     * @param {boolean} restoreOriginalValue If true, then closes editor without saving value from the editor into a cell.
     * @param {boolean} ctrlDown If true, then saveValue will save editor's value to each cell in the last selected range.
     * @param {Function} callback The callback function, fired after editor closing.
     */
    finishEditing(e, t, i) {
      let r;
      if (i) {
        const s = this._closeCallback;
        this._closeCallback = (o) => {
          s && s(o), i(o), this.hot.view.render();
        };
      }
      if (!this.isWaiting()) {
        if (this.state === Kn.VIRGIN) {
          this.hot._registerTimeout(() => {
            this._fireCallbacks(!0);
          });
          return;
        }
        if (this.state === Kn.EDITING) {
          if (e) {
            this.cancelChanges(), this.hot.view.render();
            return;
          }
          const s = this.getValue();
          this.cellProperties.trimWhitespace ? r = [[typeof s == "string" ? String.prototype.trim.call(s || "") : s]] : r = [[s]], this.state = Kn.WAITING, this.saveValue(r, t), this.hot.getCellValidator(this.cellProperties) ? this.hot.addHookOnce("postAfterValidate", (o) => {
            this.state = Kn.FINISHED, this.discardEditor(o);
          }) : (this.state = Kn.FINISHED, this.discardEditor(!0));
        }
      }
    }
    /**
     * Finishes editing without singout saving value.
     */
    cancelChanges() {
      this.state = Kn.FINISHED, this.discardEditor();
    }
    /**
     * Verifies result of validation or closes editor if user's cancelled changes.
     *
     * @param {boolean|undefined} result If `false` and the cell using allowInvalid option,
     *                                   then an editor won't be closed until validation is passed.
     */
    discardEditor(e) {
      this.state === Kn.FINISHED && (e === !1 && this.cellProperties.allowInvalid !== !0 ? (this.hot.selectCell(this.row, this.col), this.focus(), this.state = Kn.EDITING, this._fireCallbacks(!1)) : (this.close(), this._opened = !1, this._fullEditMode = !1, this.state = Kn.VIRGIN, this._fireCallbacks(!0), this.hot.getShortcutManager().setActiveContextName("grid")));
    }
    /**
     * Switch editor into full edit mode. In this state navigation keys don't close editor. This mode is activated
     * automatically after hit ENTER or F2 key on the cell or while editing cell press F2 key.
     */
    enableFullEditMode() {
      this._fullEditMode = !0;
    }
    /**
     * Checks if editor is in full edit mode.
     *
     * @returns {boolean}
     */
    isInFullEditMode() {
      return this._fullEditMode;
    }
    /**
     * Returns information whether the editor is open.
     *
     * @returns {boolean}
     */
    isOpened() {
      return this._opened;
    }
    /**
     * Returns information whether the editor is waiting, eg.: for async validation.
     *
     * @returns {boolean}
     */
    isWaiting() {
      return this.state === Kn.WAITING;
    }
    /* eslint-disable jsdoc/require-description-complete-sentence */
    /**
     * Gets the object that provides information about the edited cell size and its position
     * relative to the table viewport.
     *
     * The rectangle has six integer properties:
     *  - `top` The top position relative to the table viewport
     *  - `start` The left (or right in RTL) position relative to the table viewport
     *  - `width` The cell's current width;
     *  - `maxWidth` The maximum cell's width after which the editor goes out of the table viewport
     *  - `height` The cell's current height;
     *  - `maxHeight` The maximum cell's height after which the editor goes out of the table viewport
     *
     * @returns {{top: number, start: number, width: number, maxWidth: number, height: number, maxHeight: number} | undefined}
     */
    getEditedCellRect() {
      var e;
      const t = this.getEditedCell();
      if (!t)
        return;
      const {
        wtOverlays: i,
        wtViewport: r
      } = this.hot.view._wt, s = this.hot.rootWindow, o = _i(t), a = fn(t), l = _i(this.hot.rootElement), c = fn(this.hot.rootElement), u = i.topOverlay.holder, h = i.inlineStartOverlay.holder, d = u !== s ? u.scrollTop : 0, f = h !== s ? h.scrollLeft : 0, g = s.innerWidth - l.left - c, {
        wtTable: p
      } = (e = i.getParentOverlay(t)) !== null && e !== void 0 ? e : this.hot.view._wt, m = p.name, v = ["master", "inline_start"].includes(m) ? d : 0, y = ["master", "top", "bottom"].includes(m) ? f : 0, w = o.top === l.top ? 0 : 1;
      let R = o.top - l.top - w - v, E = 0;
      this.hot.isRtl() ? E = s.innerWidth - o.left - a - g - 1 + y : E = o.left - l.left - 1 - y, ["top", "top_inline_start_corner"].includes(m) && (R += i.topOverlay.getOverlayOffset()), ["inline_start", "top_inline_start_corner"].includes(m) && (E += Math.abs(i.inlineStartOverlay.getOverlayOffset()));
      const C = this.hot.hasColHeaders(), T = this.hot.rowIndexMapper.getRenderableFromVisualIndex(this.row), P = this.hot.columnIndexMapper.getRenderableFromVisualIndex(this.col), A = this.hot.rowIndexMapper.getRenderableIndexesLength() - this.hot.view._wt.getSetting("fixedRowsBottom");
      (C && T <= 0 || T === A) && (R += 1), P <= 0 && (E += 1);
      const D = r.rowsRenderCalculator.startPosition, B = r.columnsRenderCalculator.startPosition, F = Math.abs(i.inlineStartOverlay.getScrollPosition()), W = i.topOverlay.getScrollPosition(), N = xi(this.hot.rootDocument);
      let O = t.offsetTop;
      if (["inline_start", "master"].includes(m) && (O += D - W), ["bottom", "bottom_inline_start_corner"].includes(m)) {
        const {
          wtViewport: Y,
          wtTable: K
        } = i.bottomOverlay.clone;
        O += Y.getWorkspaceHeight() - K.getHeight() - N;
      }
      let V = t.offsetLeft;
      this.hot.isRtl() ? (V >= 0 ? V = p.getWidth() - t.offsetLeft : V = Math.abs(V), V += B - F - a) : ["top", "master", "bottom"].includes(m) && (V += B - F);
      const G = al(this.TD, this.hot.rootWindow), U = this.hot.isRtl() ? "borderRightWidth" : "borderLeftWidth", se = parseInt(G[U], 10) > 0 ? 0 : 1, b = parseInt(G.borderTopWidth, 10) > 0 ? 0 : 1, S = fn(t) + se, _ = ti(t) + b, I = Z7(u) ? N : 0, H = Q7(h) ? N : 0, M = this.hot.view.maximumVisibleElementWidth(V) - I + se, $ = Math.max(this.hot.view.maximumVisibleElementHeight(O) - H + b, 23);
      return {
        top: R,
        start: E,
        height: _,
        maxHeight: $,
        width: S,
        maxWidth: M
      };
    }
    /* eslint-enable jsdoc/require-description-complete-sentence */
    /**
     * Gets className of the edited cell if exist.
     *
     * @returns {string}
     */
    getEditedCellsLayerClass() {
      switch (this.checkEditorSection()) {
        case "inline-start":
          return "ht_clone_left ht_clone_inline_start";
        case "bottom":
          return "ht_clone_bottom";
        case "bottom-inline-start-corner":
          return "ht_clone_bottom_left_corner ht_clone_bottom_inline_start_corner";
        case "top":
          return "ht_clone_top";
        case "top-inline-start-corner":
          return "ht_clone_top_left_corner ht_clone_top_inline_start_corner";
        default:
          return "ht_clone_master";
      }
    }
    /**
     * Gets HTMLTableCellElement of the edited cell if exist.
     *
     * @returns {HTMLTableCellElement|null}
     */
    getEditedCell() {
      return this.hot.getCell(this.row, this.col, !0);
    }
    /**
     * Returns name of the overlay, where editor is placed.
     *
     * @private
     * @returns {string}
     */
    checkEditorSection() {
      const e = this.hot.countRows();
      let t = "";
      return this.row < this.hot.getSettings().fixedRowsTop ? this.col < this.hot.getSettings().fixedColumnsStart ? t = "top-inline-start-corner" : t = "top" : this.hot.getSettings().fixedRowsBottom && this.row >= e - this.hot.getSettings().fixedRowsBottom ? this.col < this.hot.getSettings().fixedColumnsStart ? t = "bottom-inline-start-corner" : t = "bottom" : this.col < this.hot.getSettings().fixedColumnsStart && (t = "inline-start"), t;
    }
  }
  qt(Jp, RG);
  const aTe = {
    name: "editorCloseAndSaveByArrowKeys",
    callback(n, e, t) {
      const i = n._getEditorManager(), r = i.getActiveEditor();
      r.isInFullEditMode() && r.state === Kn.EDITING || (i.closeEditorAndSaveChanges(), n.getSelected() && (t.includes("arrowdown") ? n.selection.transformStart(1, 0) : t.includes("arrowup") ? n.selection.transformStart(-1, 0) : t.includes("arrowleft") ? n.selection.transformStart(0, -1 * n.getDirectionFactor()) : t.includes("arrowright") && n.selection.transformStart(0, n.getDirectionFactor())), e.preventDefault());
    }
  }, lTe = {
    name: "editorCloseAndSaveByEnter",
    callback(n, e) {
      const t = n._getEditorManager();
      t.closeEditorAndSaveChanges(e.ctrlKey || e.metaKey), t.moveSelectionAfterEnter(e);
    }
  }, cTe = {
    name: "editorCloseWithoutSaving",
    callback(n) {
      const e = n._getEditorManager();
      e.closeEditorAndRestoreOriginalValue(n.getShortcutManager().isCtrlPressed()), e.activeEditor.focus();
    }
  }, uTe = {
    name: "editorFastOpen",
    callback(n, e) {
      const {
        highlight: t
      } = n.getSelectedRangeLast();
      t.isHeader() || n._getEditorManager().openEditor(null, e, !0);
    }
  }, hTe = {
    name: "editorOpen",
    callback(n, e, t) {
      const i = n._getEditorManager(), r = n.getSelectedRangeLast(), {
        highlight: s
      } = r;
      if (n.selection.isMultiple() && !r.isHeader() && n.countRenderedCols() > 0 && n.countRenderedRows() > 0) {
        const o = n.getSettings(), a = typeof o.enterMoves == "function" ? o.enterMoves(e) : o.enterMoves;
        t.includes("shift") ? n.selection.transformFocus(-a.row, -a.col) : n.selection.transformFocus(a.row, a.col);
        return;
      }
      s.isHeader() || (n.getSettings().enterBeginsEditing ? i.cellProperties.readOnly ? i.moveSelectionAfterEnter(e) : i.openEditor(null, e, !0) : i.moveSelectionAfterEnter(e), bo(e));
    }
  };
  function dTe() {
    return [nTe, aTe, lTe, cTe, uTe, hTe];
  }
  const fTe = {
    name: "extendCellsSelectionDown",
    callback(n) {
      const {
        highlight: e
      } = n.getSelectedRangeLast();
      !n.selection.isSelectedByColumnHeader() && !n.selection.isSelectedByCorner() && (e.isCell() || e.isHeader() && n.selection.isSelectedByRowHeader()) && n.selection.transformEnd(1, 0);
    }
  }, gTe = {
    name: "extendCellsSelectionDownByViewportHeight",
    callback(n) {
      const {
        to: e
      } = n.getSelectedRangeLast(), t = Math.min(e.row + n.countVisibleRows(), n.countRows() - 1), i = n.rowIndexMapper.getNearestNotHiddenIndex(t, -1);
      if (i !== null) {
        const r = n._createCellCoords(i, e.col), s = e.row - n.view.getFirstFullyVisibleRow(), o = Math.min(r.row - s, n.countRows() - 1);
        n.selection.setRangeEnd(r), n.scrollViewportTo({
          row: o,
          verticalSnap: "top",
          horizontalSnap: "start"
        });
      }
    }
  }, pTe = {
    name: "extendCellsSelectionLeft",
    callback(n) {
      const {
        highlight: e
      } = n.getSelectedRangeLast();
      !n.selection.isSelectedByRowHeader() && !n.selection.isSelectedByCorner() && (e.isCell() || e.isHeader() && n.selection.isSelectedByColumnHeader()) && n.selection.transformEnd(0, -1 * n.getDirectionFactor());
    }
  }, mTe = {
    name: "extendCellsSelectionRight",
    callback(n) {
      const {
        highlight: e
      } = n.getSelectedRangeLast();
      !n.selection.isSelectedByRowHeader() && !n.selection.isSelectedByCorner() && (e.isCell() || e.isHeader() && n.selection.isSelectedByColumnHeader()) && n.selection.transformEnd(0, n.getDirectionFactor());
    }
  }, bTe = {
    name: "extendCellsSelectionToColumns",
    callback(n) {
      const {
        highlight: e,
        from: t,
        to: i
      } = n.getSelectedRangeLast();
      n.selection.isSelectedByRowHeader() ? n.selection.selectAll(!0, !0) : n.selectColumns(t.col, i.col, e);
    }
  }, vTe = {
    name: "extendCellsSelectionToMostBottom",
    callback(n) {
      const {
        selection: e,
        rowIndexMapper: t
      } = n, {
        highlight: i,
        from: r,
        to: s
      } = n.getSelectedRangeLast(), o = i.isHeader() && n.selection.isSelectedByRowHeader();
      if (i.isCell() || o) {
        const a = t.getNearestNotHiddenIndex(n.countRows() - 1, -1), l = r.clone();
        l.row = i.row, e.setRangeStart(l, void 0, !1, i.clone()), o && e.selectedByRowHeader.add(e.getLayerLevel()), e.setRangeEnd(n._createCellCoords(a, s.col));
      }
    }
  }, wTe = {
    name: "extendCellsSelectionToMostInlineEnd",
    callback(n) {
      const {
        selection: e,
        columnIndexMapper: t
      } = n, {
        highlight: i,
        from: r,
        to: s
      } = n.getSelectedRangeLast();
      if (!n.selection.isSelectedByRowHeader() && !n.selection.isSelectedByCorner() && i.isCell()) {
        const o = t.getNearestNotHiddenIndex(n.countCols() - 1, -1), a = r.clone();
        a.col = i.col, e.setRangeStart(a, void 0, !1, i.clone()), e.setRangeEnd(n._createCellCoords(s.row, o));
      }
    }
  }, yTe = {
    name: "extendCellsSelectionToMostInlineStart",
    callback(n) {
      const {
        selection: e,
        columnIndexMapper: t
      } = n, {
        highlight: i,
        from: r,
        to: s
      } = n.getSelectedRangeLast();
      if (!n.selection.isSelectedByRowHeader() && !n.selection.isSelectedByCorner() && i.isCell()) {
        const o = parseInt(n.getSettings().fixedColumnsStart, 10), a = t.getNearestNotHiddenIndex(o, 1), l = r.clone();
        l.col = i.col, e.setRangeStart(l, void 0, !1, i.clone()), e.setRangeEnd(n._createCellCoords(s.row, a));
      }
    }
  }, CTe = {
    name: "extendCellsSelectionToMostLeft",
    callback(n) {
      const {
        selection: e,
        columnIndexMapper: t
      } = n, {
        highlight: i,
        from: r,
        to: s
      } = n.getSelectedRangeLast(), o = i.isHeader() && n.selection.isSelectedByColumnHeader();
      if (i.isCell() || o) {
        const a = t.getNearestNotHiddenIndex(...n.isRtl() ? [n.countCols() - 1, -1] : [0, 1]), l = r.clone();
        l.col = i.col, e.setRangeStart(l, void 0, !1, i.clone()), o && e.selectedByColumnHeader.add(e.getLayerLevel()), e.setRangeEnd(n._createCellCoords(s.row, a));
      }
    }
  }, STe = {
    name: "extendCellsSelectionToMostRight",
    callback(n) {
      const {
        selection: e,
        columnIndexMapper: t
      } = n, {
        highlight: i,
        from: r,
        to: s
      } = n.getSelectedRangeLast(), o = i.isHeader() && n.selection.isSelectedByColumnHeader();
      if (i.isCell() || o) {
        const a = t.getNearestNotHiddenIndex(...n.isRtl() ? [0, 1] : [n.countCols() - 1, -1]), l = r.clone();
        l.col = i.col, e.setRangeStart(l, void 0, !1, i.clone()), o && e.selectedByColumnHeader.add(e.getLayerLevel()), e.setRangeEnd(n._createCellCoords(s.row, a));
      }
    }
  }, _Te = {
    name: "extendCellsSelectionToMostTop",
    callback(n) {
      const {
        selection: e,
        rowIndexMapper: t
      } = n, {
        highlight: i,
        from: r,
        to: s
      } = n.getSelectedRangeLast(), o = i.isHeader() && n.selection.isSelectedByRowHeader();
      if (i.isCell() || o) {
        const a = t.getNearestNotHiddenIndex(0, 1), l = r.clone();
        l.row = i.row, e.setRangeStart(l, void 0, !1, i.clone()), o && e.selectedByRowHeader.add(e.getLayerLevel()), e.setRangeEnd(n._createCellCoords(a, s.col));
      }
    }
  }, RTe = {
    name: "extendCellsSelectionToRows",
    callback(n) {
      const {
        highlight: e,
        from: t,
        to: i
      } = n.getSelectedRangeLast();
      n.selection.isSelectedByColumnHeader() ? n.selection.selectAll(!0, !0) : n.selectRows(t.row, i.row, e);
    }
  }, ETe = {
    name: "extendCellsSelectionUp",
    callback(n) {
      const {
        highlight: e
      } = n.getSelectedRangeLast();
      !n.selection.isSelectedByColumnHeader() && !n.selection.isSelectedByCorner() && (e.isCell() || e.isHeader() && n.selection.isSelectedByRowHeader()) && n.selection.transformEnd(-1, 0);
    }
  }, xTe = {
    name: "extendCellsSelectionUpByViewportHeight",
    callback(n) {
      const {
        to: e
      } = n.getSelectedRangeLast(), t = Math.max(e.row - n.countVisibleRows(), 0), i = n.rowIndexMapper.getNearestNotHiddenIndex(t, 1);
      if (i !== null) {
        const r = n._createCellCoords(i, e.col), s = e.row - n.view.getFirstFullyVisibleRow(), o = Math.max(r.row - s, 0);
        n.selection.setRangeEnd(r), n.scrollViewportTo({
          row: o,
          verticalSnap: "top",
          horizontalSnap: "start"
        });
      }
    }
  };
  function TTe() {
    return [fTe, gTe, pTe, mTe, bTe, vTe, wTe, yTe, CTe, STe, _Te, RTe, ETe, xTe];
  }
  const MTe = {
    name: "moveCellSelectionDown",
    callback(n) {
      let {
        selection: e
      } = n;
      e.transformStart(1, 0);
    }
  }, ATe = {
    name: "moveCellSelectionDownByViewportHeight",
    callback(n) {
      const {
        navigableHeaders: e
      } = n.getSettings(), t = e ? n.countColHeaders() : 0, {
        row: i
      } = n.getSelectedRangeLast().highlight;
      let r = n.countVisibleRows() + t;
      i === n.countRows() - 1 ? r = 1 : i + r > n.countRows() && (r = n.countRows() - i - 1), n.selection.transformStart(r, 0), n.getSelectedRangeLast().highlight.row < 0 && n.scrollViewportTo({
        row: 0
      });
    }
  }, PTe = {
    name: "moveCellSelectionInlineEnd",
    callback(n, e) {
      const t = n.getSettings(), i = n.getSelectedRangeLast(), r = typeof t.tabMoves == "function" ? t.tabMoves(e) : t.tabMoves;
      n.selection.isMultiple() && !i.isHeader() && n.countRenderedCols() > 0 && n.countRenderedRows() > 0 ? n.selection.transformFocus(-r.row, -r.col) : n.selection.transformStart(-r.row, -r.col);
    }
  }, ITe = {
    name: "moveCellSelectionInlineStart",
    callback(n, e) {
      const t = n.getSettings(), i = n.getSelectedRangeLast(), r = typeof t.tabMoves == "function" ? t.tabMoves(e) : t.tabMoves;
      n.selection.isMultiple() && !i.isHeader() && n.countRenderedCols() > 0 && n.countRenderedRows() > 0 ? n.selection.transformFocus(r.row, r.col) : n.selection.transformStart(r.row, r.col);
    }
  }, OTe = {
    name: "moveCellSelectionLeft",
    callback(n) {
      n.selection.transformStart(0, -1 * n.getDirectionFactor());
    }
  }, kTe = {
    name: "moveCellSelectionRight",
    callback(n) {
      n.selection.transformStart(0, n.getDirectionFactor());
    }
  }, DTe = {
    name: "moveCellSelectionToMostBottom",
    callback(n) {
      const {
        col: e
      } = n.getSelectedRangeLast().highlight;
      let t = n.rowIndexMapper.getNearestNotHiddenIndex(n.countRows() - 1, -1);
      t === null && (t = -1), n.selection.setRangeStart(n._createCellCoords(t, e));
    }
  }, NTe = {
    name: "moveCellSelectionToMostBottomInlineEnd",
    callback(n) {
      const {
        selection: e,
        rowIndexMapper: t,
        columnIndexMapper: i
      } = n, r = parseInt(n.getSettings().fixedRowsBottom, 10), s = t.getNearestNotHiddenIndex(n.countRows() - r - 1, -1), o = i.getNearestNotHiddenIndex(n.countCols() - 1, -1);
      e.setRangeStart(n._createCellCoords(s, o));
    }
  }, LTe = {
    name: "moveCellSelectionToMostInlineEnd",
    callback(n) {
      const {
        selection: e,
        columnIndexMapper: t
      } = n;
      e.setRangeStart(n._createCellCoords(n.getSelectedRangeLast().highlight.row, t.getNearestNotHiddenIndex(n.countCols() - 1, -1)));
    }
  }, HTe = {
    name: "moveCellSelectionToMostInlineStart",
    callback(n) {
      const {
        selection: e,
        columnIndexMapper: t
      } = n, i = parseInt(n.getSettings().fixedColumnsStart, 10), r = n.getSelectedRangeLast().highlight.row, s = t.getNearestNotHiddenIndex(i, 1);
      e.setRangeStart(n._createCellCoords(r, s));
    }
  }, $Te = {
    name: "moveCellSelectionToMostLeft",
    callback(n) {
      const {
        selection: e,
        columnIndexMapper: t
      } = n, i = n.getSelectedRangeLast().highlight.row;
      let r = t.getNearestNotHiddenIndex(...n.isRtl() ? [n.countCols() - 1, -1] : [0, 1]);
      r === null && (r = n.isRtl() ? -1 : -n.countRowHeaders()), e.setRangeStart(n._createCellCoords(i, r));
    }
  }, FTe = {
    name: "moveCellSelectionToMostRight",
    callback(n) {
      const {
        selection: e,
        columnIndexMapper: t
      } = n, {
        row: i
      } = n.getSelectedRangeLast().highlight;
      let r = t.getNearestNotHiddenIndex(...n.isRtl() ? [0, 1] : [n.countCols() - 1, -1]);
      r === null && (r = n.isRtl() ? -n.countRowHeaders() : -1), e.setRangeStart(n._createCellCoords(i, r));
    }
  }, BTe = {
    name: "moveCellSelectionToMostTop",
    callback(n) {
      const {
        col: e
      } = n.getSelectedRangeLast().highlight;
      let t = n.rowIndexMapper.getNearestNotHiddenIndex(0, 1);
      t === null && (t = -n.countColHeaders()), n.selection.setRangeStart(n._createCellCoords(t, e));
    }
  }, VTe = {
    name: "moveCellSelectionToMostTopInlineStart",
    callback(n) {
      const {
        selection: e,
        rowIndexMapper: t,
        columnIndexMapper: i
      } = n, r = parseInt(n.getSettings().fixedRowsTop, 10), s = parseInt(n.getSettings().fixedColumnsStart, 10), o = t.getNearestNotHiddenIndex(r, 1), a = i.getNearestNotHiddenIndex(s, 1);
      e.setRangeStart(n._createCellCoords(o, a));
    }
  }, WTe = {
    name: "moveCellSelectionUp",
    callback(n) {
      let {
        selection: e
      } = n;
      e.transformStart(-1, 0);
    }
  }, jTe = {
    name: "moveCellSelectionUpByViewportHight",
    callback(n) {
      const {
        navigableHeaders: e
      } = n.getSettings(), t = e ? n.countColHeaders() : 0, {
        row: i
      } = n.getSelectedRangeLast().highlight;
      let r = -(n.countVisibleRows() + t);
      i === -t ? r = -1 : i + r < t && (r = -(i + t)), n.selection.transformStart(r, 0), n.getSelectedRangeLast().highlight.row < 0 && n.scrollViewportTo({
        row: 0
      });
    }
  };
  function zTe() {
    return [MTe, ATe, PTe, ITe, OTe, kTe, DTe, NTe, LTe, HTe, $Te, FTe, BTe, VTe, WTe, jTe];
  }
  const UTe = {
    name: "emptySelectedCells",
    callback(n) {
      n.emptySelectedCells(), n._getEditorManager().prepareEditor();
    }
  }, GTe = {
    name: "scrollToFocusedCell",
    callback(n) {
      const {
        highlight: e
      } = n.getSelectedRangeLast(), t = n.view.getFirstFullyVisibleRow() - 1, i = n.view.getFirstFullyVisibleColumn() - 1, r = n.view.getLastFullyVisibleRow() + 1, s = n.view.getLastFullyVisibleColumn() + 1, o = n._createCellCoords(t, i), a = n._createCellCoords(r, s);
      if (!n._createCellRange(o, o, a).includes(e) && (e.row >= 0 || e.col >= 0)) {
        const c = {};
        if (e.col >= 0) {
          const u = Math.floor(n.countVisibleCols() / 2);
          c.col = Math.max(e.col - u, 0);
        }
        if (e.row >= 0) {
          const u = Math.floor(n.countVisibleRows() / 2);
          c.row = Math.max(e.row - u, 0);
        }
        n.scrollViewportTo({
          ...c,
          verticalSnap: "top",
          horizontalSnap: "start"
        });
      }
    }
  }, YTe = {
    name: "selectAllCells",
    callback(n) {
      n.selection.selectAll(!0, !0, {
        disableHeadersHighlight: !0
      });
    }
  }, KTe = {
    name: "selectAllCellsAndHeaders",
    callback(n) {
      n.selection.selectAll(!0, !0, {
        disableHeadersHighlight: !1
      });
    }
  }, qTe = {
    name: "populateSelectedCellsData",
    callback(n) {
      const e = n.getSelectedRange(), {
        row: t,
        col: i
      } = e[e.length - 1].highlight.normalize(), r = n.getDataAtCell(t, i), s = /* @__PURE__ */ new Map();
      for (let o = 0; o < e.length; o++)
        e[o].forAll((a, l) => {
          if (a >= 0 && l >= 0 && (a !== t || l !== i)) {
            const {
              readOnly: c
            } = n.getCellMeta(a, l);
            c || s.set(`${a}x${l}`, [a, l, r]);
          }
        });
      n.setDataAtCell(Array.from(s.values()));
    }
  }, XTe = [...dTe(), ...TTe(), ...zTe(), UTe, GTe, YTe, KTe, qTe];
  function EG(n) {
    const e = {};
    return XTe.forEach((t) => {
      let {
        name: i,
        callback: r
      } = t;
      e[i] = function() {
        for (var s = arguments.length, o = new Array(s), a = 0; a < s; a++)
          o[a] = arguments[a];
        return r(n, ...o);
      };
    }), e;
  }
  function ZTe(n) {
    const e = n.getShortcutManager().addContext("editor"), t = EG(n), i = {
      group: hh
    };
    e.addShortcuts([{
      keys: [["Enter"], ["Enter", "Shift"]],
      callback: (r, s) => t.editorCloseAndSaveByEnter(r, s)
    }, {
      keys: [["Enter", "Control/Meta"], ["Enter", "Control/Meta", "Shift"]],
      captureCtrl: !0,
      callback: (r, s) => t.editorCloseAndSaveByEnter(r, s)
    }, {
      keys: [["Tab"], ["Tab", "Shift"], ["PageDown"], ["PageUp"]],
      forwardToContext: n.getShortcutManager().getContext("grid"),
      callback: (r, s) => t.editorCloseAndSave(r, s)
    }, {
      keys: [["ArrowDown"], ["ArrowUp"], ["ArrowLeft"], ["ArrowRight"]],
      preventDefault: !1,
      callback: (r, s) => t.editorCloseAndSaveByArrowKeys(r, s)
    }, {
      keys: [["Escape"], ["Escape", "Control/Meta"]],
      callback: () => t.editorCloseWithoutSaving()
    }], i);
  }
  function QTe(n) {
    const e = n.getShortcutManager().addContext("grid"), t = EG(n), i = {
      runOnlyIf: () => {
        const {
          navigableHeaders: r
        } = n.getSettings();
        return ke(n.getSelected()) && (r || !r && n.countRenderedRows() > 0 && n.countRenderedCols() > 0);
      },
      group: _G
    };
    e.addShortcuts([{
      keys: [["F2"]],
      callback: (r) => t.editorFastOpen(r)
    }, {
      keys: [["Enter"], ["Enter", "Shift"]],
      callback: (r, s) => t.editorOpen(r, s)
    }, {
      keys: [["Backspace"], ["Delete"]],
      callback: () => t.emptySelectedCells()
    }], {
      group: hh,
      runOnlyIf: () => ke(n.getSelected())
    }), e.addShortcuts([{
      keys: [["Control/Meta", "A"]],
      callback: () => t.selectAllCells(),
      runOnlyIf: () => {
        var r;
        return !((r = n.getSelectedRangeLast()) !== null && r !== void 0 && r.highlight.isHeader());
      }
    }, {
      keys: [["Control/Meta", "A"]],
      callback: () => {
      },
      runOnlyIf: () => {
        var r;
        return (r = n.getSelectedRangeLast()) === null || r === void 0 ? void 0 : r.highlight.isHeader();
      },
      preventDefault: !0
    }, {
      keys: [["Control/Meta", "Shift", "Space"]],
      callback: () => t.selectAllCellsAndHeaders()
    }, {
      keys: [["Control/Meta", "Enter"]],
      callback: () => t.populateSelectedCellsData(),
      runOnlyIf: () => {
        var r, s;
        return !((r = n.getSelectedRangeLast()) !== null && r !== void 0 && r.highlight.isHeader()) && ((s = n.getSelectedRangeLast()) === null || s === void 0 ? void 0 : s.getCellsCount()) > 1;
      }
    }, {
      keys: [["Control", "Space"]],
      captureCtrl: !0,
      callback: () => t.extendCellsSelectionToColumns()
    }, {
      keys: [["Shift", "Space"]],
      stopPropagation: !0,
      callback: () => t.extendCellsSelectionToRows()
    }, {
      keys: [["ArrowUp"]],
      callback: () => t.moveCellSelectionUp()
    }, {
      keys: [["ArrowUp", "Control/Meta"]],
      captureCtrl: !0,
      callback: () => t.moveCellSelectionToMostTop()
    }, {
      keys: [["ArrowUp", "Shift"]],
      callback: () => t.extendCellsSelectionUp()
    }, {
      keys: [["ArrowUp", "Shift", "Control/Meta"]],
      captureCtrl: !0,
      callback: () => t.extendCellsSelectionToMostTop(),
      runOnlyIf: () => !(n.selection.isSelectedByCorner() || n.selection.isSelectedByColumnHeader())
    }, {
      keys: [["ArrowDown"]],
      callback: () => t.moveCellSelectionDown()
    }, {
      keys: [["ArrowDown", "Control/Meta"]],
      captureCtrl: !0,
      callback: () => t.moveCellSelectionToMostBottom()
    }, {
      keys: [["ArrowDown", "Shift"]],
      callback: () => t.extendCellsSelectionDown()
    }, {
      keys: [["ArrowDown", "Shift", "Control/Meta"]],
      captureCtrl: !0,
      callback: () => t.extendCellsSelectionToMostBottom(),
      runOnlyIf: () => !(n.selection.isSelectedByCorner() || n.selection.isSelectedByColumnHeader())
    }, {
      keys: [["ArrowLeft"]],
      callback: () => t.moveCellSelectionLeft()
    }, {
      keys: [["ArrowLeft", "Control/Meta"]],
      captureCtrl: !0,
      callback: () => t.moveCellSelectionToMostLeft()
    }, {
      keys: [["ArrowLeft", "Shift"]],
      callback: () => t.extendCellsSelectionLeft()
    }, {
      keys: [["ArrowLeft", "Shift", "Control/Meta"]],
      captureCtrl: !0,
      callback: () => t.extendCellsSelectionToMostLeft(),
      runOnlyIf: () => !(n.selection.isSelectedByCorner() || n.selection.isSelectedByRowHeader())
    }, {
      keys: [["ArrowRight"]],
      callback: () => t.moveCellSelectionRight()
    }, {
      keys: [["ArrowRight", "Control/Meta"]],
      captureCtrl: !0,
      callback: () => t.moveCellSelectionToMostRight()
    }, {
      keys: [["ArrowRight", "Shift"]],
      callback: () => t.extendCellsSelectionRight()
    }, {
      keys: [["ArrowRight", "Shift", "Control/Meta"]],
      captureCtrl: !0,
      callback: () => t.extendCellsSelectionToMostRight(),
      runOnlyIf: () => !(n.selection.isSelectedByCorner() || n.selection.isSelectedByRowHeader())
    }, {
      keys: [["Home"]],
      captureCtrl: !0,
      callback: () => t.moveCellSelectionToMostInlineStart(),
      runOnlyIf: () => n.view.isMainTableNotFullyCoveredByOverlays()
    }, {
      keys: [["Home", "Shift"]],
      callback: () => t.extendCellsSelectionToMostInlineStart()
    }, {
      keys: [["Home", "Control/Meta"]],
      captureCtrl: !0,
      callback: () => t.moveCellSelectionToMostTopInlineStart(),
      runOnlyIf: () => n.view.isMainTableNotFullyCoveredByOverlays()
    }, {
      keys: [["End"]],
      captureCtrl: !0,
      callback: () => t.moveCellSelectionToMostInlineEnd(),
      runOnlyIf: () => n.view.isMainTableNotFullyCoveredByOverlays()
    }, {
      keys: [["End", "Shift"]],
      callback: () => t.extendCellsSelectionToMostInlineEnd()
    }, {
      keys: [["End", "Control/Meta"]],
      captureCtrl: !0,
      callback: () => t.moveCellSelectionToMostBottomInlineEnd(),
      runOnlyIf: () => n.view.isMainTableNotFullyCoveredByOverlays()
    }, {
      keys: [["PageUp"]],
      callback: () => t.moveCellSelectionUpByViewportHight()
    }, {
      keys: [["PageUp", "Shift"]],
      callback: () => t.extendCellsSelectionUpByViewportHeight()
    }, {
      keys: [["PageDown"]],
      callback: () => t.moveCellSelectionDownByViewportHeight()
    }, {
      keys: [["PageDown", "Shift"]],
      callback: () => t.extendCellsSelectionDownByViewportHeight()
    }, {
      keys: [["Tab"]],
      // The property value is controlled by focusCatcher module (https://github.com/handsontable/handsontable/blob/master/handsontable/src/core/focusCatcher/index.js)
      preventDefault: !1,
      callback: (r) => t.moveCellSelectionInlineStart(r)
    }, {
      keys: [["Shift", "Tab"]],
      // The property value is controlled by focusCatcher module (https://github.com/handsontable/handsontable/blob/master/handsontable/src/core/focusCatcher/index.js)
      preventDefault: !1,
      callback: (r) => t.moveCellSelectionInlineEnd(r)
    }, {
      keys: [["Control/Meta", "Backspace"]],
      callback: () => t.scrollToFocusedCell()
    }], i);
  }
  function JTe(n) {
    [QTe, ZTe].forEach((e) => e(n));
  }
  function eMe(n) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const t = n.rootElement, i = t3(n), r = t3(n);
    return i.addEventListener("focus", () => e == null ? void 0 : e.onFocusFromTop()), r.addEventListener("focus", () => e == null ? void 0 : e.onFocusFromBottom()), t.firstChild.before(i), t.lastChild.after(r), {
      /**
       * Activates the detector by resetting the tabIndex of the input elements.
       */
      activate() {
        n._registerTimeout(() => {
          i.tabIndex = 0, r.tabIndex = 0;
        }, 10);
      },
      /**
       * Deactivates the detector by setting tabIndex to -1.
       */
      deactivate() {
        n._registerTimeout(() => {
          i.tabIndex = -1, r.tabIndex = -1;
        }, 10);
      }
    };
  }
  function t3(n) {
    const t = n.rootDocument.createElement("input");
    return t.type = "text", t.classList.add("htFocusCatcher"), n.getSettings().ariaTags && ze(t, [Ka(), xf()]), t;
  }
  function tMe(n) {
    const e = nMe(n);
    let t;
    const {
      activate: i,
      deactivate: r
    } = eMe(n, {
      onFocusFromTop() {
        var h;
        const d = (h = e(t)) !== null && h !== void 0 ? h : JP(n);
        d && (n.runHooks("modifyFocusOnTabNavigation", "from_above", d), n.selectCell(d.row, d.col)), n.listen();
      },
      onFocusFromBottom() {
        var h;
        const d = (h = e(t)) !== null && h !== void 0 ? h : eI(n);
        d && (n.runHooks("modifyFocusOnTabNavigation", "from_below", d), n.selectCell(d.row, d.col)), n.listen();
      }
    }), s = {
      wrapped: !1,
      flipped: !1
    };
    let o = !0, a = !1, l = !1;
    n.addHook("afterListen", () => r()), n.addHook("afterUnlisten", () => i()), n.addHook("afterSelection", (h, d, f, g, p) => {
      if (a && (s.wrapped && s.flipped || l) && (l = !1, p.value = !0), o) {
        var m;
        t = (m = n.getSelectedRangeLast()) === null || m === void 0 ? void 0 : m.highlight;
      }
    }), n.addHook("beforeRowWrap", (h, d, f) => {
      s.wrapped = !0, s.flipped = f;
    });
    function c() {
      s.wrapped = !1, s.flipped = !1, n.deselectCell(), n.unlisten();
    }
    const u = {
      keys: [["Tab"], ["Shift", "Tab"]],
      preventDefault: !1,
      stopPropagation: !1,
      relativeToGroup: _G,
      group: "focusCatcher"
    };
    n.getShortcutManager().getContext("grid").addShortcuts([{
      ...u,
      callback: () => {
        const {
          tabNavigation: h
        } = n.getSettings();
        a = !0, n.getSelectedRangeLast() && !h && (o = !1), h || (l = !0);
      },
      position: "before"
    }, {
      ...u,
      callback: (h) => {
        const {
          tabNavigation: d,
          autoWrapRow: f
        } = n.getSettings();
        if (a = !1, o = !0, !d || !n.selection.isSelected() || f && s.wrapped && s.flipped || !f && s.wrapped)
          return f && s.wrapped && s.flipped && (t = h.shiftKey ? JP(n) : eI(n)), c(), !1;
        h.preventDefault();
      },
      position: "after"
    }]);
  }
  function JP(n) {
    const {
      rowIndexMapper: e,
      columnIndexMapper: t
    } = n, {
      navigableHeaders: i
    } = n.getSettings();
    let r = i && n.countColHeaders() > 0 ? -n.countColHeaders() : 0, s = i && n.countRowHeaders() > 0 ? -n.countRowHeaders() : 0;
    return r === 0 && (r = e.getVisualFromRenderableIndex(r)), s === 0 && (s = t.getVisualFromRenderableIndex(s)), r === null || s === null ? null : n._createCellCoords(r, s);
  }
  function eI(n) {
    var e, t;
    const {
      rowIndexMapper: i,
      columnIndexMapper: r
    } = n, {
      navigableHeaders: s
    } = n.getSettings();
    let o = i.getRenderableIndexesLength() - 1, a = r.getRenderableIndexesLength() - 1;
    if (o < 0) {
      if (!s || n.countColHeaders() === 0)
        return null;
      o = -1;
    }
    if (a < 0) {
      if (!s || n.countColHeaders() === 0)
        return null;
      a = -1;
    }
    return n._createCellCoords((e = i.getVisualFromRenderableIndex(o)) !== null && e !== void 0 ? e : o, (t = r.getVisualFromRenderableIndex(a)) !== null && t !== void 0 ? t : a);
  }
  function nMe(n) {
    return (e) => {
      if (!e)
        return null;
      const t = JP(n), i = eI(n);
      return e.col < t.col && (e.col = t.col), e.col > i.col && (e.col = i.col), e.row < t.row && (e.row = t.row), e.row > i.row && (e.row = i.row), e;
    };
  }
  function iMe(n) {
    return (e) => {
      let {
        col: t
      } = e;
      n.scrollViewportTo({
        col: t
      });
    };
  }
  function rMe() {
    return () => {
    };
  }
  function sMe(n) {
    return (e) => {
      n.scrollViewportTo(e.toObject());
    };
  }
  function oMe(n) {
    return (e) => {
      n.scrollViewportTo(e.toObject());
    };
  }
  function aMe(n) {
    return (e) => {
      n.scrollViewportTo(e.toObject());
    };
  }
  function lMe(n) {
    return (e) => {
      let {
        row: t
      } = e;
      n.scrollViewportTo({
        row: t
      });
    };
  }
  function cMe(n) {
    return (e) => {
      const t = n.selection.getSelectionSource(), {
        row: i,
        col: r
      } = e;
      if (i < 0 && r >= 0)
        n.scrollViewportTo({
          col: r
        });
      else if (r < 0 && i >= 0)
        n.scrollViewportTo({
          row: i
        });
      else {
        if (t === "mouse" && (r === n.view.getLastPartiallyVisibleColumn() || i === n.view.getLastPartiallyVisibleRow()))
          return;
        n.scrollViewportTo({
          row: i,
          col: r
        });
      }
    };
  }
  function uMe(n) {
    const {
      selection: e
    } = n;
    let t = !1, i = !1;
    return {
      resume() {
        i = !1;
      },
      suspend() {
        i = !0;
      },
      skipNextScrollCycle() {
        t = !0;
      },
      scrollTo(r) {
        var s;
        if (t || i) {
          t = !1;
          return;
        }
        let o;
        e.isFocusSelectionChanged() ? o = sMe(n) : e.isSelectedByCorner() ? o = rMe() : e.isSelectedByRowHeader() ? o = lMe(n) : e.isSelectedByColumnHeader() ? o = iMe(n) : e.getSelectedRange().size() === 1 && e.isMultiple() ? o = oMe(n) : e.getSelectedRange().size() === 1 && !e.isMultiple() ? o = cMe(n) : e.getSelectedRange().size() > 1 && (o = aMe(n)), (s = o) === null || s === void 0 || s(r);
      }
    };
  }
  const n3 = /* @__PURE__ */ new Map([
    [" ", "space"],
    // custom mapping
    ["spacebar", "space"],
    ["scroll", "scrolllock"],
    ["del", "delete"],
    ["esc", "escape"],
    ["medianexttrack", "mediatracknext"],
    ["mediaprevioustrack", "mediatrackprevious"],
    ["volumeup", "audiovolumeup"],
    ["volumedown", "audiovolumedown"],
    ["volumemute", "audiovolumemute"],
    ["multiply", "*"],
    ["add", "+"],
    ["divide", "/"],
    ["subtract", "-"],
    ["left", "arrowleft"],
    ["right", "arrowright"],
    ["up", "arrowup"],
    ["down", "arrowdown"]
  ]), B0 = (n) => n.map((e) => {
    const t = e.toLowerCase();
    return n3.has(t) ? n3.get(t) : t;
  }).sort().join("+"), hMe = (n) => n.split("+"), i3 = /* @__PURE__ */ new Map([
    [96, "numpad0"],
    [97, "numpad1"],
    [98, "numpad2"],
    [99, "numpad3"],
    [100, "numpad4"],
    [101, "numpad5"],
    [102, "numpad6"],
    [103, "numpad7"],
    [104, "numpad8"],
    [105, "numpad9"],
    [106, "multiply"],
    [107, "add"],
    [108, "decimal"],
    // firefox
    [109, "subtract"],
    [110, "decimal"],
    [111, "divide"],
    [112, "f1"],
    [113, "f2"],
    [114, "f3"],
    [115, "f4"],
    [116, "f5"],
    [117, "f6"],
    [118, "f7"],
    [119, "f8"],
    [120, "f9"],
    [121, "f10"],
    [122, "f11"],
    [123, "f12"],
    [186, "semicolon"],
    [187, "equal"],
    [188, "comma"],
    [189, "minus"],
    [190, "period"],
    [191, "slash"],
    [192, "backquote"],
    [219, "bracketleft"],
    [220, "backslash"],
    [221, "bracketright"],
    [222, "quote"]
  ]), TT = (n) => {
    let {
      which: e,
      key: t
    } = n;
    if (i3.has(e))
      return i3.get(e);
    const i = String.fromCharCode(e).toLowerCase();
    return /^[a-z0-9]$/.test(i) ? i : t.toLowerCase();
  }, xG = Symbol("shortcut-context");
  function TG(n) {
    return at(n) && n.__kindOf === xG;
  }
  const dMe = (n) => {
    const e = B1({
      errorIdExists: (l) => `The "${l}" shortcut is already registered in the "${n}" context.`
    }), t = function() {
      let {
        keys: l,
        callback: c,
        group: u,
        runOnlyIf: h = () => !0,
        captureCtrl: d = !1,
        preventDefault: f = !0,
        stopPropagation: g = !1,
        relativeToGroup: p,
        position: m,
        forwardToContext: v
      } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      if (dn(u))
        throw new Error("You need to define the shortcut's group.");
      if (cn(c) === !1)
        throw new Error("The shortcut's callback needs to be a function.");
      if (Array.isArray(l) === !1)
        throw new Error(Kt`Pass the shortcut\'s keys as an array of arrays,\x20
      using the KeyboardEvent.key properties:\x20
      https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values.`);
      const y = {
        callback: c,
        group: u,
        runOnlyIf: h,
        captureCtrl: d,
        preventDefault: f,
        stopPropagation: g
      };
      ke(p) && (y.relativeToGroup = p, y.position = m), TG(v) && (y.forwardToContext = v), l.forEach((w) => {
        const R = B0(w);
        if (e.hasItem(R)) {
          const C = e.getItem(R);
          let T = C.findIndex((P) => P.group === p);
          T !== -1 ? m === "before" ? T -= 1 : T += 1 : T = C.length, C.splice(T, 0, y);
        } else
          e.addItem(R, [y]);
      });
    }, i = function(l) {
      let c = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      l.forEach((u) => {
        lt(c, (h, d) => {
          Object.prototype.hasOwnProperty.call(u, d) === !1 && (u[d] = c[d]);
        }), t(u);
      });
    }, r = (l) => {
      const c = B0(l);
      e.removeItem(c);
    };
    return {
      __kindOf: xG,
      addShortcut: t,
      addShortcuts: i,
      getShortcuts: (l) => {
        const c = B0(l), u = e.getItem(c);
        return ke(u) ? u.slice() : [];
      },
      hasShortcut: (l) => {
        const c = B0(l);
        return e.hasItem(c);
      },
      removeShortcutsByKeys: r,
      removeShortcutsByGroup: (l) => {
        e.getItems().forEach((u) => {
          let [h, d] = u;
          const f = d.filter((g) => g.group !== l);
          f.length === 0 ? r(hMe(h)) : (d.length = 0, d.push(...f));
        });
      }
    };
  };
  function fMe() {
    const n = /* @__PURE__ */ new Set();
    return {
      /**
       * Press a key.
       *
       * @param {string} key Names of the shortcut's keys,
       * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),
       * in lowercase or uppercase, unified across browsers
       */
      press(e) {
        n.add(e);
      },
      /**
       * Release a pressed key.
       *
       * @param {string} key Names of the shortcut's keys,
       * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),
       * in lowercase or uppercase, unified across browsers
       */
      release(e) {
        n.delete(e);
      },
      /**
       * Release all pressed keys.
       */
      releaseAll() {
        n.clear();
      },
      /**
       * Check if a key is pressed.
       *
       * @param {string} key Names of the shortcut's keys,
       * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),
       * in lowercase or uppercase, unified across browsers
       * @returns {boolean}
       */
      isPressed(e) {
        return n.has(e);
      }
    };
  }
  const gMe = ["meta", "alt", "shift", "control"], Km = fMe(), qm = [];
  let V0 = 0;
  function pMe(n, e, t, i, r) {
    const s = (f) => gMe.includes(f), o = function(f) {
      let g = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
      const p = [];
      return f.altKey && p.push("alt"), g && (f.ctrlKey || f.metaKey) ? p.push("control/meta") : (f.ctrlKey && p.push("control"), f.metaKey && p.push("meta")), f.shiftKey && p.push("shift"), p;
    }, a = (f) => {
      if (e(f) === !1)
        return;
      const g = t(f);
      if (f.keyCode === 229 || g === !1 || wu(f))
        return;
      const p = TT(f);
      let m = [];
      s(p) || (m = o(f));
      const v = [p].concat(m);
      !r(f, v) && (gw() && m.includes("meta") || !gw() && m.includes("control")) && r(f, [p].concat(o(f, !0))), i(f);
    }, l = (f) => {
      if (f.key) {
        const g = TT(f);
        s(g) && Km.press(g);
      }
    }, c = (f) => {
      if (f.key) {
        const g = TT(f);
        s(g) && Km.release(g);
      }
    }, u = () => {
      Km.releaseAll();
    };
    return {
      mount: () => {
        let f = n;
        for (V0 += 1; f; )
          V0 === 1 && (f.document.documentElement.addEventListener("keydown", l), qm.push({
            event: "keydown",
            listener: l
          }), f.document.documentElement.addEventListener("keyup", c), qm.push({
            event: "keyup",
            listener: c
          })), f.document.documentElement.addEventListener("keydown", a), f.document.documentElement.addEventListener("blur", u), f = ef(f);
      },
      unmount: () => {
        let f = n;
        for (V0 -= 1; f; ) {
          if (V0 === 0) {
            for (let g = 0; g < qm.length; g++) {
              const {
                event: p,
                listener: m
              } = qm[g];
              f.document.documentElement.removeEventListener(p, m);
            }
            qm.length = 0;
          }
          f.document.documentElement.removeEventListener("keydown", a), f.document.documentElement.removeEventListener("blur", u), f = ef(f);
        }
      },
      isPressed: (f) => Km.isPressed(f),
      releasePressedKeys: () => Km.releaseAll()
    };
  }
  const mMe = (n) => {
    let {
      ownerWindow: e,
      handleEvent: t,
      beforeKeyDown: i,
      afterKeyDown: r
    } = n;
    const s = B1({
      errorIdExists: (g) => `The "${g}" context name is already registered.`
    });
    let o = "grid";
    const a = (g) => {
      const p = dMe(g);
      return s.addItem(g, p), p;
    }, l = () => o, c = (g) => s.getItem(g), u = (g) => {
      if (!s.hasItem(g))
        throw new Error(Kt`You've tried to activate the "${g}" shortcut context\x20
        that does not exist. Before activation, register the context using the "addContext" method.`);
      o = g;
    };
    let h = !1;
    const d = function(g, p) {
      let m = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : l();
      const v = TG(m) ? m : c(m);
      let y = !1;
      if (!v.hasShortcut(p))
        return y;
      const w = v.getShortcuts(p);
      for (let R = 0; R < w.length; R++) {
        const {
          callback: E,
          runOnlyIf: C,
          preventDefault: T,
          stopPropagation: P,
          captureCtrl: x,
          forwardToContext: A
        } = w[R];
        if (C(g) === !0) {
          if (h = x, y = E(g, p) === !1, h = !1, T && g.preventDefault(), P && (bo(g), g.stopPropagation()), y)
            break;
          A && d(g, p, A);
        }
      }
      return y;
    }, f = pMe(e, t, i, r, d);
    return f.mount(), {
      addContext: a,
      getActiveContextName: l,
      getContext: c,
      setActiveContextName: u,
      /**
       * Returns whether `control` or `meta` keys are pressed.
       *
       * @memberof ShortcutManager#
       * @type {Function}
       * @returns {boolean}
       */
      isCtrlPressed: () => !h && (f.isPressed("control") || f.isPressed("meta")),
      /**
       * Release every previously pressed key.
       *
       * @type {Function}
       * @memberof ShortcutManager#
       */
      releasePressedKeys: () => f.releasePressedKeys(),
      /**
       * Destroy a context manager instance.
       *
       * @type {Function}
       * @memberof ShortcutManager#
       */
      destroy: () => f.unmount()
    };
  };
  let MT = null;
  const AT = /* @__PURE__ */ new Map();
  function MG(n, e) {
    var t, i = this;
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, s = this;
    const o = new lo(s);
    let a, l, c, u, h, d, f = !0;
    Q1e(r) && Z1e(this), this.rootElement = n, this.rootDocument = n.ownerDocument, this.rootWindow = this.rootDocument.defaultView, this.isDestroyed = !1, this.renderSuspendedCounter = 0, this.executionSuspendedCounter = 0;
    const g = (t = e == null ? void 0 : e.layoutDirection) !== null && t !== void 0 ? t : "inherit", p = ["rtl", "ltr"].includes(g) ? g : this.rootWindow.getComputedStyle(this.rootElement).direction;
    this.rootElement.setAttribute("dir", p), this.isRtl = function() {
      return p === "rtl";
    }, this.isLtr = function() {
      return !s.isRtl();
    }, this.getDirectionFactor = function() {
      return s.isLtr() ? 1 : -1;
    }, e.language = YEe(e.language);
    const m = new SG(s, e, [Kxe, tTe]), v = m.getTableMeta(), y = m.getGlobalMeta(), w = B1();
    this.container = this.rootDocument.createElement("div"), this.renderCall = !1, n.insertBefore(this.container, n.firstChild), SS(this) && D7(e.licenseKey, n), this.guid = `ht_${oD()}`, AT.set(this.guid, this), this.columnIndexMapper = new XP(), this.rowIndexMapper = new XP(), this.columnIndexMapper.addLocalHook("indexesSequenceChange", (b) => {
      s.runHooks("afterColumnSequenceChange", b);
    }), this.rowIndexMapper.addLocalHook("indexesSequenceChange", (b) => {
      s.runHooks("afterRowSequenceChange", b);
    }), l = new hEe(s), (!this.rootElement.id || this.rootElement.id.substring(0, 3) === "ht_") && (this.rootElement.id = this.guid);
    const R = (b) => {
      const {
        row: S,
        col: _
      } = b;
      return s._createCellCoords(
        // We just store indexes for rows and columns without headers.
        S >= 0 ? s.rowIndexMapper.getRenderableFromVisualIndex(S) : S,
        _ >= 0 ? s.columnIndexMapper.getRenderableFromVisualIndex(_) : _
      );
    }, E = (b) => {
      const {
        row: S,
        col: _
      } = b;
      return s._createCellCoords(
        // We just store indexes for rows and columns without headers.
        S >= 0 ? s.rowIndexMapper.getVisualFromRenderableIndex(S) : S,
        _ >= 0 ? s.columnIndexMapper.getVisualFromRenderableIndex(_) : _
        // eslint-disable-line max-len
      );
    }, C = (b, S) => {
      const _ = S > b ? 1 : -1, I = Math.min(b, S), H = Math.max(b, S), M = s.rowIndexMapper.getNearestNotHiddenIndex(b, _);
      return M === null || _ === 1 && M > H || _ === -1 && M < I ? null : M >= 0 ? s.rowIndexMapper.getRenderableFromVisualIndex(M) : M;
    }, T = (b, S) => {
      const _ = S > b ? 1 : -1, I = Math.min(b, S), H = Math.max(b, S), M = s.columnIndexMapper.getNearestNotHiddenIndex(b, _);
      return M === null || _ === 1 && M > H || _ === -1 && M < I ? null : M >= 0 ? s.columnIndexMapper.getRenderableFromVisualIndex(M) : M;
    };
    let P = new wG(v, {
      rowIndexMapper: s.rowIndexMapper,
      columnIndexMapper: s.columnIndexMapper,
      countCols: () => s.countCols(),
      countRows: () => s.countRows(),
      propToCol: (b) => a.propToCol(b),
      isEditorOpened: () => s.getActiveEditor() ? s.getActiveEditor().isOpened() : !1,
      countRenderableColumns: () => this.view.countRenderableColumns(),
      countRenderableRows: () => this.view.countRenderableRows(),
      countRowHeaders: () => this.countRowHeaders(),
      countColHeaders: () => this.countColHeaders(),
      countRenderableRowsInRange: function() {
        return i.view.countRenderableRowsInRange(...arguments);
      },
      countRenderableColumnsInRange: function() {
        return i.view.countRenderableColumnsInRange(...arguments);
      },
      getShortcutManager: () => s.getShortcutManager(),
      createCellCoords: (b, S) => s._createCellCoords(b, S),
      createCellRange: (b, S, _) => s._createCellRange(b, S, _),
      visualToRenderableCoords: R,
      renderableToVisualCoords: E,
      findFirstNonHiddenRenderableRow: C,
      findFirstNonHiddenRenderableColumn: T,
      isDisabledCellSelection: (b, S) => b < 0 || S < 0 ? s.getSettings().disableVisualSelection : s.getCellMeta(b, S).disableVisualSelection
    });
    this.selection = P;
    const x = (b) => {
      let {
        hiddenIndexesChanged: S
      } = b;
      S && this.selection.commit();
    };
    this.columnIndexMapper.addLocalHook("cacheUpdated", x), this.rowIndexMapper.addLocalHook("cacheUpdated", x), this.selection.addLocalHook("afterSetRangeEnd", (b, S) => {
      const _ = eo(!1), I = this.selection.getSelectedRange(), {
        from: H,
        to: M
      } = I.current(), $ = I.size() - 1;
      this.runHooks("afterSelection", H.row, H.col, M.row, M.col, _, $), this.runHooks("afterSelectionByProp", H.row, s.colToProp(H.col), M.row, s.colToProp(M.col), _, $), S && (!_.isTouched() || _.isTouched() && !_.value) && d.scrollTo(b);
      const Y = P.isSelectedByRowHeader(), K = P.isSelectedByColumnHeader();
      Y && K ? ue(this.rootElement, ["ht__selection--rows", "ht__selection--columns"]) : Y ? (Ze(this.rootElement, "ht__selection--columns"), ue(this.rootElement, "ht__selection--rows")) : K ? (Ze(this.rootElement, "ht__selection--rows"), ue(this.rootElement, "ht__selection--columns")) : Ze(this.rootElement, ["ht__selection--rows", "ht__selection--columns"]), P.getSelectionSource() !== "shift" && u.closeEditor(null), s.view.render(), u.prepareEditor();
    }), this.selection.addLocalHook("beforeSetFocus", (b) => {
      this.runHooks("beforeSelectionFocusSet", b.row, b.col);
    }), this.selection.addLocalHook("afterSetFocus", (b) => {
      const S = eo(!1);
      this.runHooks("afterSelectionFocusSet", b.row, b.col, S), (!S.isTouched() || S.isTouched() && !S.value) && d.scrollTo(b), u.closeEditor(), s.view.render(), u.prepareEditor();
    }), this.selection.addLocalHook("afterSelectionFinished", (b) => {
      const S = b.length - 1, {
        from: _,
        to: I
      } = b[S];
      this.runHooks("afterSelectionEnd", _.row, _.col, I.row, I.col, S), this.runHooks("afterSelectionEndByProp", _.row, s.colToProp(_.col), I.row, s.colToProp(I.col), S);
    }), this.selection.addLocalHook("afterIsMultipleSelection", (b) => {
      const S = this.runHooks("afterIsMultipleSelection", b.value);
      b.value && (b.value = S);
    }), this.selection.addLocalHook("afterDeselect", () => {
      u.closeEditor(), s.view.render(), Ze(this.rootElement, ["ht__selection--rows", "ht__selection--columns"]), this.runHooks("afterDeselect");
    }), this.selection.addLocalHook("beforeHighlightSet", () => this.runHooks("beforeSelectionHighlightSet")).addLocalHook("beforeSetRangeStart", function() {
      for (var b = arguments.length, S = new Array(b), _ = 0; _ < b; _++)
        S[_] = arguments[_];
      return i.runHooks("beforeSetRangeStart", ...S);
    }).addLocalHook("beforeSetRangeStartOnly", function() {
      for (var b = arguments.length, S = new Array(b), _ = 0; _ < b; _++)
        S[_] = arguments[_];
      return i.runHooks("beforeSetRangeStartOnly", ...S);
    }).addLocalHook("beforeSetRangeEnd", function() {
      for (var b = arguments.length, S = new Array(b), _ = 0; _ < b; _++)
        S[_] = arguments[_];
      return i.runHooks("beforeSetRangeEnd", ...S);
    }).addLocalHook("beforeSelectColumns", function() {
      for (var b = arguments.length, S = new Array(b), _ = 0; _ < b; _++)
        S[_] = arguments[_];
      return i.runHooks("beforeSelectColumns", ...S);
    }).addLocalHook("afterSelectColumns", function() {
      for (var b = arguments.length, S = new Array(b), _ = 0; _ < b; _++)
        S[_] = arguments[_];
      return i.runHooks("afterSelectColumns", ...S);
    }).addLocalHook("beforeSelectRows", function() {
      for (var b = arguments.length, S = new Array(b), _ = 0; _ < b; _++)
        S[_] = arguments[_];
      return i.runHooks("beforeSelectRows", ...S);
    }).addLocalHook("afterSelectRows", function() {
      for (var b = arguments.length, S = new Array(b), _ = 0; _ < b; _++)
        S[_] = arguments[_];
      return i.runHooks("afterSelectRows", ...S);
    }).addLocalHook("beforeModifyTransformStart", function() {
      for (var b = arguments.length, S = new Array(b), _ = 0; _ < b; _++)
        S[_] = arguments[_];
      return i.runHooks("modifyTransformStart", ...S);
    }).addLocalHook("afterModifyTransformStart", function() {
      for (var b = arguments.length, S = new Array(b), _ = 0; _ < b; _++)
        S[_] = arguments[_];
      return i.runHooks("afterModifyTransformStart", ...S);
    }).addLocalHook("beforeModifyTransformFocus", function() {
      for (var b = arguments.length, S = new Array(b), _ = 0; _ < b; _++)
        S[_] = arguments[_];
      return i.runHooks("modifyTransformFocus", ...S);
    }).addLocalHook("afterModifyTransformFocus", function() {
      for (var b = arguments.length, S = new Array(b), _ = 0; _ < b; _++)
        S[_] = arguments[_];
      return i.runHooks("afterModifyTransformFocus", ...S);
    }).addLocalHook("beforeModifyTransformEnd", function() {
      for (var b = arguments.length, S = new Array(b), _ = 0; _ < b; _++)
        S[_] = arguments[_];
      return i.runHooks("modifyTransformEnd", ...S);
    }).addLocalHook("afterModifyTransformEnd", function() {
      for (var b = arguments.length, S = new Array(b), _ = 0; _ < b; _++)
        S[_] = arguments[_];
      return i.runHooks("afterModifyTransformEnd", ...S);
    }).addLocalHook("beforeRowWrap", function() {
      for (var b = arguments.length, S = new Array(b), _ = 0; _ < b; _++)
        S[_] = arguments[_];
      return i.runHooks("beforeRowWrap", ...S);
    }).addLocalHook("beforeColumnWrap", function() {
      for (var b = arguments.length, S = new Array(b), _ = 0; _ < b; _++)
        S[_] = arguments[_];
      return i.runHooks("beforeColumnWrap", ...S);
    }).addLocalHook("insertRowRequire", (b) => this.alter("insert_row_above", b, 1, "auto")).addLocalHook("insertColRequire", (b) => this.alter("insert_col_start", b, 1, "auto")), c = {
      /**
       * Inserts or removes rows and columns.
       *
       * @private
       * @param {string} action Possible values: "insert_row_above", "insert_row_below", "insert_col_start", "insert_col_end",
       *                        "remove_row", "remove_col".
       * @param {number|Array} index Row or column visual index which from the alter action will be triggered.
       *                             Alter actions such as "remove_row" and "remove_col" support array indexes in the
       *                             format `[[index, amount], [index, amount]...]` this can be used to remove
       *                             non-consecutive columns or rows in one call.
       * @param {number} [amount=1] Amount of rows or columns to remove.
       * @param {string} [source] Optional. Source of hook runner.
       * @param {boolean} [keepEmptyRows] Optional. Flag for preventing deletion of empty rows.
       */
      alter(b, S) {
        var _, I;
        let H = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, M = arguments.length > 3 ? arguments[3] : void 0, $ = arguments.length > 4 ? arguments[4] : void 0;
        const Y = (K) => {
          if (K.length === 0)
            return [];
          const ce = [...K];
          return ce.sort((_e, be) => {
            let [Z] = _e, [ee] = be;
            return Z === ee ? 0 : Z > ee ? 1 : -1;
          }), li(ce, (_e, be) => {
            let [Z, ee] = be;
            const ae = _e[_e.length - 1], [Ne, fe] = ae, ye = Ne + fe;
            if (Z <= ye) {
              const k = Math.max(ee - (ye - Z), 0);
              ae[1] += k;
            } else
              _e.push([Z, ee]);
            return _e;
          }, [ce[0]]);
        };
        switch (b) {
          case "insert_row_below":
          case "insert_row_above":
            const K = s.countSourceRows();
            if (v.maxRows === K)
              return;
            const ce = b === "insert_row_below" ? "below" : "above";
            S = (_ = S) !== null && _ !== void 0 ? _ : ce === "below" ? K : 0;
            const {
              delta: le,
              startPhysicalIndex: _e
            } = a.createRow(S, H, {
              source: M,
              mode: ce
            });
            P.shiftRows(s.toVisualRow(_e), le);
            break;
          case "insert_col_start":
          case "insert_col_end":
            const be = b === "insert_col_end" ? "end" : "start";
            S = (I = S) !== null && I !== void 0 ? I : be === "end" ? s.countSourceCols() : 0;
            const {
              delta: Z,
              startPhysicalIndex: ee
            } = a.createCol(S, H, {
              source: M,
              mode: be
            });
            if (Z) {
              if (Array.isArray(v.colHeaders)) {
                const fe = [s.toVisualColumn(ee), 0];
                fe.length += Z, Array.prototype.splice.apply(v.colHeaders, fe);
              }
              P.shiftColumns(s.toVisualColumn(ee), Z);
            }
            break;
          case "remove_row":
            const ae = (fe) => {
              let ye = 0;
              z(fe, (k) => {
                let [L, j] = k;
                const te = Wn(L) ? s.countRows() - 1 : Math.max(L - ye, 0);
                if (Number.isInteger(L) && (L = Math.max(L - ye, 0)), !a.removeRow(L, j, M))
                  return;
                if (P.isSelected()) {
                  const {
                    row: ne
                  } = s.getSelectedRangeLast().highlight;
                  ne >= L && ne <= L + j - 1 && u.closeEditor(!0);
                }
                const re = s.countRows();
                re === 0 ? P.deselect() : M === "ContextMenu.removeRow" ? P.refresh() : P.shiftRows(L, -j);
                const J = v.fixedRowsTop;
                J >= te + 1 && (v.fixedRowsTop -= Math.min(j, J - te));
                const X = v.fixedRowsBottom;
                X && te >= re - X && (v.fixedRowsBottom -= Math.min(j, X)), ye += j;
              });
            };
            Array.isArray(S) ? ae(Y(S)) : ae([[S, H]]);
            break;
          case "remove_col":
            const Ne = (fe) => {
              let ye = 0;
              z(fe, (k) => {
                let [L, j] = k;
                const te = Wn(L) ? s.countCols() - 1 : Math.max(L - ye, 0);
                let q = s.toPhysicalColumn(te);
                if (Number.isInteger(L) && (L = Math.max(L - ye, 0)), !a.removeCol(L, j, M))
                  return;
                if (P.isSelected()) {
                  const {
                    col: ne
                  } = s.getSelectedRangeLast().highlight;
                  ne >= L && ne <= L + j - 1 && u.closeEditor(!0);
                }
                s.countCols() === 0 ? P.deselect() : M === "ContextMenu.removeColumn" ? P.refresh() : P.shiftColumns(L, -j);
                const X = v.fixedColumnsStart;
                X >= te + 1 && (v.fixedColumnsStart -= Math.min(j, X - te)), Array.isArray(v.colHeaders) && (typeof q > "u" && (q = -1), v.colHeaders.splice(q, j)), ye += j;
              });
            };
            Array.isArray(S) ? Ne(Y(S)) : Ne([[S, H]]);
            break;
          default:
            throw new Error(`There is no such action "${b}"`);
        }
        s.view.render(), $ || c.adjustRowsAndCols();
      },
      /**
       * Makes sure there are empty rows at the bottom of the table.
       *
       * @private
       */
      adjustRowsAndCols() {
        const b = v.minRows, S = v.minSpareRows, _ = v.minCols, I = v.minSpareCols;
        if (b) {
          const H = s.countRows();
          H < b && a.createRow(H, b - H, {
            source: "auto"
          });
        }
        if (S) {
          const H = s.countEmptyRows(!0);
          if (H < S) {
            const M = S - H, $ = Math.min(M, v.maxRows - s.countSourceRows());
            a.createRow(s.countRows(), $, {
              source: "auto"
            });
          }
        }
        {
          let H;
          (_ || I) && (H = s.countEmptyCols(!0));
          let M = s.countCols();
          if (_ && !v.columns && M < _) {
            const $ = _ - M;
            H += $, a.createCol(M, $, {
              source: "auto"
            });
          }
          if (I && !v.columns && s.dataType === "array" && H < I) {
            M = s.countCols();
            const $ = I - H, Y = Math.min($, v.maxCols - M);
            a.createCol(M, Y, {
              source: "auto"
            });
          }
        }
        s.view && s.view.adjustElementsSize();
      },
      /**
       * Populate the data from the provided 2d array from the given cell coordinates.
       *
       * @private
       * @param {object} start Start selection position. Visual indexes.
       * @param {Array} input 2d data array.
       * @param {object} [end] End selection position (only for drag-down mode). Visual indexes.
       * @param {string} [source="populateFromArray"] Source information string.
       * @param {string} [method="overwrite"] Populate method. Possible options: `shift_down`, `shift_right`, `overwrite`.
       * @returns {object|undefined} Ending td in pasted area (only if any cell was changed).
       */
      populateFromArray(b, S, _, I, H) {
        let M, $, Y, K;
        const ce = [], le = {}, _e = [], be = b.row, Z = b.col;
        if ($ = S.length, $ === 0)
          return !1;
        let ee = 0, ae = 0;
        switch (at(_) && (ee = _.col - Z + 1, ae = _.row - be + 1), H) {
          case "shift_down":
            const Ne = bv(S), fe = Ne.length, ye = Math.max(fe, ee), k = s.getData().slice(be), L = bv(k).slice(Z, Z + ye);
            for (Y = 0; Y < ye; Y += 1)
              if (Y < fe) {
                for (M = 0, $ = Ne[Y].length; M < ae - $; M += 1)
                  Ne[Y].push(Ne[Y][M % $]);
                Y < L.length ? _e.push(Ne[Y].concat(L[Y])) : _e.push(Ne[Y].concat(new Array(k.length).fill(null)));
              } else
                _e.push(Ne[Y % fe].concat(L[Y]));
            s.populateFromArray(be, Z, bv(_e));
            break;
          case "shift_right":
            const j = S.length, te = Math.max(j, ae), q = s.getData().slice(be).map((Ae) => Ae.slice(Z));
            for (M = 0; M < te; M += 1)
              if (M < j) {
                for (Y = 0, K = S[M].length; Y < ee - K; Y += 1)
                  S[M].push(S[M][Y % K]);
                if (M < q.length)
                  for (let Ae = 0; Ae < q[M].length; Ae += 1)
                    S[M].push(q[M][Ae]);
                else
                  S[M].push(...new Array(q[0].length).fill(null));
              } else
                S.push(S[M % $].slice(0, te).concat(q[M]));
            s.populateFromArray(be, Z, S);
            break;
          case "overwrite":
          default:
            le.row = b.row, le.col = b.col;
            let re = 0, J = 0, X = !0, ne;
            const ie = function(Be) {
              let st = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
              const St = S[Be % S.length];
              return st !== null ? St[st % St.length] : St;
            }, oe = S.length, we = _ ? _.row - b.row + 1 : 0;
            for (_ ? $ = we : $ = Math.max(oe, we), M = 0; M < $ && !(_ && le.row > _.row && we > oe || !v.allowInsertRow && le.row > s.countRows() - 1 || le.row >= v.maxRows); M++) {
              const Ae = M - re, Be = ie(Ae).length, st = _ ? _.col - b.col + 1 : 0;
              if (_ ? K = st : K = Math.max(Be, st), le.col = b.col, ne = s.getCellMeta(le.row, le.col), (I === "CopyPaste.paste" || I === "Autofill.fill") && ne.skipRowOnPaste) {
                re += 1, le.row += 1, $ += 1;
                continue;
              }
              for (J = 0, Y = 0; Y < K && !(_ && le.col > _.col && st > Be || !v.allowInsertColumn && le.col > s.countCols() - 1 || le.col >= v.maxCols); Y++) {
                if (ne = s.getCellMeta(le.row, le.col), (I === "CopyPaste.paste" || I === "Autofill.fill") && ne.skipColumnOnPaste) {
                  J += 1, le.col += 1, K += 1;
                  continue;
                }
                if (ne.readOnly && I !== "UndoRedo.undo") {
                  le.col += 1;
                  continue;
                }
                const St = Y - J;
                let ht = ie(Ae, St), Ke = s.getDataAtCell(le.row, le.col);
                if (ht !== null && typeof ht == "object")
                  if (Array.isArray(ht) && Ke === null && (Ke = []), Ke === null || typeof Ke != "object")
                    X = !1;
                  else {
                    const xt = Sp(Array.isArray(Ke) ? Ke : Ke[0] || Ke), Dn = Sp(Array.isArray(ht) ? ht : ht[0] || ht);
                    L1(xt, Dn) || Array.isArray(xt) && Array.isArray(Dn) ? ht = mr(ht) : X = !1;
                  }
                else Ke !== null && typeof Ke == "object" && (X = !1);
                X && ce.push([le.row, le.col, ht]), X = !0, le.col += 1;
              }
              le.row += 1;
            }
            s.setDataAtCell(ce, null, null, I || "populateFromArray");
            break;
        }
      }
    };
    function A(b) {
      const S = aG(b);
      yL(S) ? (s.runHooks("beforeLanguageChange", S), y.language = S, s.runHooks("afterLanguageChange", S)) : lG(b);
    }
    function D(b, S) {
      const _ = b === "className" ? s.rootElement : s.table;
      if (f)
        ue(_, S);
      else {
        let I = [], H = [];
        y[b] && (I = Array.isArray(y[b]) ? y[b] : IP(y[b])), S && (H = Array.isArray(S) ? S : IP(S));
        const M = PP(I, H), $ = PP(H, I);
        M.length && Ze(_, M), $.length && ue(_, $);
      }
      y[b] = S;
    }
    this.init = function() {
      l.setData(v.data), s.runHooks("beforeInit"), (fc() || RD()) && ue(s.rootElement, "mobile"), this.updateSettings(v, !0), this.view = new nEe(this), u = WP.getInstance(s, v, P), d = uMe(s), h = new oSe(s), SS(this) && tMe(s), s.runHooks("init"), this.forceFullRender = !0, this.view.render(), f && s.rootElement.offsetParent === null && J7(s.rootElement, () => {
        s.view._wt.wtOverlays.updateLastSpreaderSize(), s.render(), s.view.adjustElementsSize();
      }), typeof f == "object" && (s.runHooks("afterChange", f[0], f[1]), f = !1), s.runHooks("afterInit");
    };
    function B() {
      let b = !1;
      return {
        validatorsInQueue: 0,
        valid: !0,
        addValidatorToQueue() {
          this.validatorsInQueue += 1, b = !1;
        },
        removeValidatorFormQueue() {
          this.validatorsInQueue = this.validatorsInQueue - 1 < 0 ? 0 : this.validatorsInQueue - 1, this.checkIfQueueIsEmpty();
        },
        onQueueEmpty() {
        },
        checkIfQueueIsEmpty() {
          this.validatorsInQueue === 0 && b === !1 && (b = !0, this.onQueueEmpty(this.valid));
        }
      };
    }
    function F(b) {
      const S = b.replace(",", ".");
      return isNaN(parseFloat(S)) === !1 ? parseFloat(S) : b;
    }
    function W(b, S, _) {
      if (!b.length) {
        _();
        return;
      }
      const I = s.getActiveEditor(), H = new B();
      let M = !0;
      H.onQueueEmpty = () => {
        I && M && I.cancelChanges(), _();
      };
      for (let $ = b.length - 1; $ >= 0; $--) {
        const [Y, K, , ce] = b[$], le = a.propToCol(K);
        let _e;
        Number.isInteger(le) ? _e = s.getCellMeta(Y, le) : _e = {
          ...Object.getPrototypeOf(v),
          ...v
        }, _e.type === "numeric" && typeof ce == "string" && M9(ce) && (b[$][3] = F(ce)), s.getCellValidator(_e) && (H.addValidatorToQueue(), s.validateCell(b[$][3], _e, /* @__PURE__ */ function(be, Z) {
          return function(ee) {
            if (typeof ee != "boolean")
              throw new Error("Validation error: result is not boolean");
            ee === !1 && Z.allowInvalid === !1 && (M = !1, b.splice(be, 1), Z.valid = !0), H.removeValidatorFormQueue();
          };
        }($, _e), S));
      }
      H.checkIfQueueIsEmpty();
    }
    function N(b, S) {
      for (let I = b.length - 1; I >= 0; I--) {
        let H = !1;
        if (b[I] === null) {
          b.splice(I, 1);
          continue;
        }
        if (!((b[I][2] === null || b[I][2] === void 0) && (b[I][3] === null || b[I][3] === void 0))) {
          if (v.allowInsertRow)
            for (; b[I][0] > s.countRows() - 1; ) {
              const {
                delta: M
              } = a.createRow(void 0, void 0, {
                source: S
              });
              if (M === 0) {
                H = !0;
                break;
              }
            }
          if (s.dataType === "array" && (!v.columns || v.columns.length === 0) && v.allowInsertColumn)
            for (; a.propToCol(b[I][1]) > s.countCols() - 1; ) {
              const {
                delta: M
              } = a.createCol(void 0, void 0, {
                source: S
              });
              if (M === 0) {
                H = !0;
                break;
              }
            }
          H || a.set(b[I][0], b[I][1], b[I][3]);
        }
      }
      const _ = b.length > 0;
      if (s.forceFullRender = !0, _) {
        c.adjustRowsAndCols(), s.runHooks("beforeChangeRender", b, S), u.closeEditor(), s.view.render(), u.prepareEditor(), s.view.adjustElementsSize(), s.runHooks("afterChange", b, S || "edit");
        const I = s.getActiveEditor();
        I && ke(I.refreshValue) && I.refreshValue();
      } else
        s.view.render();
    }
    this._createCellCoords = function(b, S) {
      return s.view._wt.createCellCoords(b, S);
    }, this._createCellRange = function(b, S, _) {
      return s.view._wt.createCellRange(b, S, _);
    }, this.validateCell = function(b, S, _, I) {
      let H = s.getCellValidator(S);
      function M($) {
        if (!(arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0) || S.hidden === !0) {
          _($);
          return;
        }
        const K = S.visualCol, ce = S.visualRow, le = s.getCell(ce, K, !0);
        if (le && le.nodeName !== "TH") {
          const _e = s.rowIndexMapper.getRenderableFromVisualIndex(ce), be = s.columnIndexMapper.getRenderableFromVisualIndex(K);
          s.view._wt.getSetting("cellRenderer", _e, be, le);
        }
        _($);
      }
      k7(H) && (H = /* @__PURE__ */ function($) {
        return function(Y, K) {
          K($.test(Y));
        };
      }(H)), cn(H) ? (b = s.runHooks("beforeValidate", b, S.visualRow, S.prop, I), s._registerImmediate(() => {
        H.call(S, b, ($) => {
          s && ($ = s.runHooks("afterValidate", $, b, S.visualRow, S.prop, I), S.valid = $, M($), s.runHooks("postAfterValidate", $, b, S.visualRow, S.prop, I));
        });
      })) : s._registerImmediate(() => {
        S.valid = !0, M(S.valid, !1);
      });
    };
    function O(b, S, _) {
      return Array.isArray(b) ? b : [[b, S, _]];
    }
    function V(b, S) {
      const _ = s.getActiveEditor(), I = s.runHooks("beforeChange", b, S || "edit"), H = b.filter((M) => M !== null);
      return I === !1 || H.length === 0 ? (_ && _.cancelChanges(), []) : H;
    }
    this.setDataAtCell = function(b, S, _, I) {
      const H = O(b, S, _), M = [];
      let $ = I, Y, K, ce;
      for (Y = 0, K = H.length; Y < K; Y++) {
        if (typeof H[Y] != "object")
          throw new Error("Method `setDataAtCell` accepts row number or changes array of arrays as its first parameter");
        if (typeof H[Y][1] != "number")
          throw new Error("Method `setDataAtCell` accepts row and column number as its parameters. If you want to use object property name, use method `setDataAtRowProp`");
        H[Y][1] >= this.countCols() ? ce = H[Y][1] : ce = a.colToProp(H[Y][1]), M.push([H[Y][0], ce, l.getAtCell(this.toPhysicalRow(H[Y][0]), H[Y][1]), H[Y][2]]);
      }
      !$ && typeof b == "object" && ($ = S);
      const le = V(M, I);
      s.runHooks("afterSetDataAtCell", le, $), W(le, $, () => {
        N(le, $);
      });
    }, this.setDataAtRowProp = function(b, S, _, I) {
      const H = O(b, S, _), M = [];
      let $ = I, Y, K;
      for (Y = 0, K = H.length; Y < K; Y++)
        M.push([H[Y][0], H[Y][1], l.getAtCell(this.toPhysicalRow(H[Y][0]), H[Y][1]), H[Y][2]]);
      !$ && typeof b == "object" && ($ = S);
      const ce = V(M, I);
      s.runHooks("afterSetDataAtRowProp", ce, $), W(ce, $, () => {
        N(ce, $);
      });
    }, this.listen = function() {
      s && !s.isListening() && (AT.forEach((b) => {
        s !== b && b.unlisten();
      }), MT = s.guid, s.runHooks("afterListen"));
    }, this.unlisten = function() {
      this.isListening() && (MT = null, s.runHooks("afterUnlisten"));
    }, this.isListening = function() {
      return MT === s.guid;
    }, this.destroyEditor = function() {
      let b = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, S = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
      u.closeEditor(b), s.view.render(), S && P.isSelected() && u.prepareEditor();
    }, this.populateFromArray = function(b, S, _, I, H, M, $) {
      if (!(typeof _ == "object" && typeof _[0] == "object"))
        throw new Error("populateFromArray parameter `input` must be an array of arrays");
      const Y = typeof I == "number" ? s._createCellCoords(I, H) : null;
      return c.populateFromArray(s._createCellCoords(b, S), _, Y, M, $);
    }, this.spliceCol = function(b, S, _) {
      for (var I = arguments.length, H = new Array(I > 3 ? I - 3 : 0), M = 3; M < I; M++)
        H[M - 3] = arguments[M];
      return a.spliceCol(b, S, _, ...H);
    }, this.spliceRow = function(b, S, _) {
      for (var I = arguments.length, H = new Array(I > 3 ? I - 3 : 0), M = 3; M < I; M++)
        H[M - 3] = arguments[M];
      return a.spliceRow(b, S, _, ...H);
    }, this.getSelected = function() {
      if (P.isSelected())
        return mt(P.getSelectedRange(), (b) => {
          let {
            from: S,
            to: _
          } = b;
          return [S.row, S.col, _.row, _.col];
        });
    }, this.getSelectedLast = function() {
      const b = this.getSelected();
      let S;
      return b && b.length > 0 && (S = b[b.length - 1]), S;
    }, this.getSelectedRange = function() {
      if (P.isSelected())
        return Array.from(P.getSelectedRange());
    }, this.getSelectedRangeLast = function() {
      const b = this.getSelectedRange();
      let S;
      return b && b.length > 0 && (S = b[b.length - 1]), S;
    }, this.emptySelectedCells = function(b) {
      if (!P.isSelected() || this.countRows() === 0 || this.countCols() === 0)
        return;
      const S = [];
      z(P.getSelectedRange(), (_) => {
        if (_.isSingleHeader())
          return;
        const I = _.getTopStartCorner(), H = _.getBottomEndCorner();
        $e(I.row, H.row, (M) => {
          $e(I.col, H.col, ($) => {
            this.getCellMeta(M, $).readOnly || S.push([M, $, null]);
          });
        });
      }), S.length > 0 && this.setDataAtCell(S, b);
    }, this.isRenderSuspended = function() {
      return this.renderSuspendedCounter > 0;
    }, this.suspendRender = function() {
      this.renderSuspendedCounter += 1;
    }, this.resumeRender = function() {
      const b = this.renderSuspendedCounter - 1;
      this.renderSuspendedCounter = Math.max(b, 0), !this.isRenderSuspended() && b === this.renderSuspendedCounter && (this.renderCall ? this.render() : s.view.render());
    }, this.render = function() {
      this.view && (this.renderCall = !0, this.forceFullRender = !0, this.isRenderSuspended() || s.view.render());
    }, this.batchRender = function(b) {
      this.suspendRender();
      const S = b();
      return this.resumeRender(), S;
    }, this.isExecutionSuspended = function() {
      return this.executionSuspendedCounter > 0;
    }, this.suspendExecution = function() {
      this.executionSuspendedCounter += 1, this.columnIndexMapper.suspendOperations(), this.rowIndexMapper.suspendOperations();
    }, this.resumeExecution = function() {
      let b = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
      const S = this.executionSuspendedCounter - 1;
      this.executionSuspendedCounter = Math.max(S, 0), (!this.isExecutionSuspended() && S === this.executionSuspendedCounter || b) && (this.columnIndexMapper.resumeOperations(), this.rowIndexMapper.resumeOperations());
    }, this.batchExecution = function(b) {
      let S = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
      this.suspendExecution();
      const _ = b();
      return this.resumeExecution(S), _;
    }, this.batch = function(b) {
      this.suspendRender(), this.suspendExecution();
      const S = b();
      return this.resumeExecution(), this.resumeRender(), S;
    }, this.refreshDimensions = function() {
      if (!s.view)
        return;
      const {
        width: b,
        height: S
      } = s.view.getLastSize(), {
        width: _,
        height: I
      } = s.rootElement.getBoundingClientRect(), H = _ !== b || I !== S;
      s.runHooks("beforeRefreshDimensions", {
        width: b,
        height: S
      }, {
        width: _,
        height: I
      }, H) !== !1 && ((H || s.view._wt.wtOverlays.scrollableElement === s.rootWindow) && (s.view.setLastSize(_, I), s.render()), s.runHooks("afterRefreshDimensions", {
        width: b,
        height: S
      }, {
        width: _,
        height: I
      }, H));
    }, this.updateData = function(b, S) {
      QV(b, (_) => {
        a = _;
      }, (_) => {
        a = _, s.columnIndexMapper.fitToLength(this.getInitialColumnCount()), s.rowIndexMapper.fitToLength(this.countSourceRows()), c.adjustRowsAndCols(), P.refresh();
      }, {
        hotInstance: s,
        dataMap: a,
        dataSource: l,
        internalSource: "updateData",
        source: S,
        metaManager: m,
        firstRun: f
      });
    }, this.loadData = function(b, S) {
      QV(b, (_) => {
        a = _;
      }, () => {
        m.clearCellsCache(), s.initIndexMappers(), c.adjustRowsAndCols(), P.refresh(), f && (f = [null, "loadData"]);
      }, {
        hotInstance: s,
        dataMap: a,
        dataSource: l,
        internalSource: "loadData",
        source: S,
        metaManager: m,
        firstRun: f
      });
    }, this.getInitialColumnCount = function() {
      const b = v.columns;
      let S = 0;
      if (Array.isArray(b))
        S = b.length;
      else if (cn(b))
        if (s.dataType === "array") {
          const _ = this.countSourceCols();
          for (let I = 0; I < _; I += 1)
            b(I) && (S += 1);
        } else (s.dataType === "object" || s.dataType === "function") && (S = a.colToPropCache.length);
      else if (ke(v.dataSchema)) {
        const _ = a.getSchema();
        S = Array.isArray(_) ? _.length : H1(_);
      } else
        S = this.countSourceCols();
      return S;
    }, this.initIndexMappers = function() {
      this.columnIndexMapper.initToLength(this.getInitialColumnCount()), this.rowIndexMapper.initToLength(this.countSourceRows());
    }, this.getData = function(b, S, _, I) {
      return dn(b) ? a.getAll() : a.getRange(s._createCellCoords(b, S), s._createCellCoords(_, I), a.DESTINATION_RENDERER);
    }, this.getCopyableText = function(b, S, _, I) {
      return a.getCopyableText(s._createCellCoords(b, S), s._createCellCoords(_, I));
    }, this.getCopyableData = function(b, S) {
      return a.getCopyable(b, a.colToProp(S));
    }, this.getSchema = function() {
      return a.getSchema();
    }, this.updateSettings = function(b) {
      let S = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
      const _ = (f ? s.loadData : s.updateData).bind(this);
      let I = !1, H, M;
      if (ke(b.rows))
        throw new Error('The "rows" setting is no longer supported. Do you mean startRows, minRows or maxRows?');
      if (ke(b.cols))
        throw new Error('The "cols" setting is no longer supported. Do you mean startCols, minCols or maxCols?');
      if (ke(b.ganttChart))
        throw new Error('Since 8.0.0 the "ganttChart" setting is no longer supported.');
      for (H in b)
        H === "data" || (H === "language" ? A(b.language) : H === "className" ? D("className", b.className) : H === "tableClassName" && s.table ? (D("tableClassName", b.tableClassName), s.view._wt.wtOverlays.syncOverlayTableClassNames()) : Ie.getSingleton().isRegistered(H) || Ie.getSingleton().isDeprecated(H) ? (cn(b[H]) || Array.isArray(b[H])) && (b[H].initialHook = !0, s.addHook(H, b[H])) : !S && In(b, H) && (y[H] = b[H]));
      b.data === void 0 && v.data === void 0 ? _(null, "updateSettings") : b.data !== void 0 ? _(b.data, "updateSettings") : b.columns !== void 0 && (a.createMap(), s.initIndexMappers());
      const $ = s.countCols(), Y = v.columns;
      if (Y && cn(Y) && (I = !0), (b.cell !== void 0 || b.cells !== void 0 || b.columns !== void 0) && m.clearCache(), $ > 0)
        for (H = 0, M = 0; H < $; H++) {
          if (Y) {
            const le = I ? Y(H) : Y[M];
            le && m.updateColumnMeta(M, le);
          }
          M += 1;
        }
      ke(b.cell) && lt(b.cell, (le) => {
        s.setCellMetaObject(le.row, le.col, le);
      }), s.runHooks("afterCellMetaReset");
      let K = s.rootElement.style.height;
      K !== "" && (K = parseInt(s.rootElement.style.height, 10));
      let ce = b.height;
      if (cn(ce) && (ce = ce()), S && s.rootElement.getAttribute("style") && s.rootElement.setAttribute("data-initialstyle", s.rootElement.getAttribute("style")), ce === null) {
        const le = s.rootElement.getAttribute("data-initialstyle");
        le && (le.indexOf("height") > -1 || le.indexOf("overflow") > -1) ? s.rootElement.setAttribute("style", le) : (s.rootElement.style.height = "", s.rootElement.style.overflow = "");
      } else ce !== void 0 && (s.rootElement.style.height = isNaN(ce) ? `${ce}` : `${ce}px`, s.rootElement.style.overflow = "hidden");
      if (typeof b.width < "u") {
        let le = b.width;
        cn(le) && (le = le()), s.rootElement.style.width = isNaN(le) ? `${le}` : `${le}px`;
      }
      S || (s.view && (s.view._wt.wtViewport.resetHasOversizedColumnHeadersMarked(), s.view._wt.exportSettingsAsClassNames()), s.runHooks("afterUpdateSettings", b)), c.adjustRowsAndCols(), s.view && !f && (s.forceFullRender = !0, s.view.render(), s.view._wt.wtOverlays.adjustElementsSize()), !S && s.view && (K === "" || ce === "" || ce === void 0) && K !== ce && s.view._wt.wtOverlays.updateMainScrollableElements();
    }, this.getValue = function() {
      const b = s.getSelectedLast();
      if (v.getValue) {
        if (cn(v.getValue))
          return v.getValue.call(s);
        if (b)
          return s.getData()[b[0][0]][v.getValue];
      } else if (b)
        return s.getDataAtCell(b[0], b[1]);
    }, this.getSettings = function() {
      return v;
    }, this.clear = function() {
      this.selectAll(), this.emptySelectedCells();
    }, this.alter = function(b, S, _, I, H) {
      c.alter(b, S, _, I, H);
    }, this.getCell = function(b, S) {
      let _ = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, I = S, H = b;
      if (S >= 0) {
        if (this.columnIndexMapper.isHidden(this.toPhysicalColumn(S)))
          return null;
        I = this.columnIndexMapper.getRenderableFromVisualIndex(S);
      }
      if (b >= 0) {
        if (this.rowIndexMapper.isHidden(this.toPhysicalRow(b)))
          return null;
        H = this.rowIndexMapper.getRenderableFromVisualIndex(b);
      }
      return H === null || I === null || H === void 0 || I === void 0 ? null : s.view.getCellAtCoords(s._createCellCoords(H, I), _);
    }, this.getCoords = function(b) {
      const S = this.view._wt.wtTable.getCoords(b);
      if (S === null)
        return null;
      const {
        row: _,
        col: I
      } = S;
      let H = _, M = I;
      return _ >= 0 && (H = this.rowIndexMapper.getVisualFromRenderableIndex(_)), I >= 0 && (M = this.columnIndexMapper.getVisualFromRenderableIndex(I)), s._createCellCoords(H, M);
    }, this.colToProp = function(b) {
      return a.colToProp(b);
    }, this.propToCol = function(b) {
      return a.propToCol(b);
    }, this.toVisualRow = (b) => this.rowIndexMapper.getVisualFromPhysicalIndex(b), this.toVisualColumn = (b) => this.columnIndexMapper.getVisualFromPhysicalIndex(b), this.toPhysicalRow = (b) => this.rowIndexMapper.getPhysicalFromVisualIndex(b), this.toPhysicalColumn = (b) => this.columnIndexMapper.getPhysicalFromVisualIndex(b), this.getDataAtCell = function(b, S) {
      return a.get(b, a.colToProp(S));
    }, this.getDataAtRowProp = function(b, S) {
      return a.get(b, S);
    }, this.getDataAtCol = function(b) {
      const S = [], _ = a.getRange(s._createCellCoords(0, b), s._createCellCoords(v.data.length - 1, b), a.DESTINATION_RENDERER);
      for (let I = 0; I < _.length; I += 1)
        for (let H = 0; H < _[I].length; H += 1)
          S.push(_[I][H]);
      return S;
    }, this.getDataAtProp = function(b) {
      const S = [], _ = a.getRange(s._createCellCoords(0, a.propToCol(b)), s._createCellCoords(v.data.length - 1, a.propToCol(b)), a.DESTINATION_RENDERER);
      for (let I = 0; I < _.length; I += 1)
        for (let H = 0; H < _[I].length; H += 1)
          S.push(_[I][H]);
      return S;
    }, this.getSourceData = function(b, S, _, I) {
      let H;
      return b === void 0 ? H = l.getData() : H = l.getByRange(s._createCellCoords(b, S), s._createCellCoords(_, I)), H;
    }, this.getSourceDataArray = function(b, S, _, I) {
      let H;
      return b === void 0 ? H = l.getData(!0) : H = l.getByRange(s._createCellCoords(b, S), s._createCellCoords(_, I), !0), H;
    }, this.getSourceDataAtCol = function(b) {
      return l.getAtColumn(b);
    }, this.setSourceDataAtCell = function(b, S, _, I) {
      const H = O(b, S, _), M = this.hasHook("afterSetSourceDataAtCell"), $ = [];
      M && z(H, (K) => {
        let [ce, le, _e] = K;
        $.push([
          ce,
          le,
          l.getAtCell(ce, le),
          // The previous value.
          _e
        ]);
      }), z(H, (K) => {
        let [ce, le, _e] = K;
        l.setAtCell(ce, le, _e);
      }), M && this.runHooks("afterSetSourceDataAtCell", $, I), this.render();
      const Y = s.getActiveEditor();
      Y && ke(Y.refreshValue) && Y.refreshValue();
    }, this.getSourceDataAtRow = function(b) {
      return l.getAtRow(b);
    }, this.getSourceDataAtCell = function(b, S) {
      return l.getAtCell(b, S);
    }, this.getDataAtRow = function(b) {
      return a.getRange(s._createCellCoords(b, 0), s._createCellCoords(b, this.countCols() - 1), a.DESTINATION_RENDERER)[0] || [];
    }, this.getDataType = function(b, S, _, I) {
      const H = b === void 0 ? [0, 0, this.countRows(), this.countCols()] : [b, S, _, I], [M, $] = H;
      let [, , Y, K] = H, ce = null, le = null;
      Y === void 0 && (Y = M), K === void 0 && (K = $);
      let _e = "mixed";
      return $e(Math.max(Math.min(M, Y), 0), Math.max(M, Y), (be) => {
        let Z = !0;
        return $e(Math.max(Math.min($, K), 0), Math.max($, K), (ee) => (le = this.getCellMeta(be, ee).type, ce ? Z = ce === le : ce = le, Z)), _e = Z ? le : "mixed", Z;
      }), _e;
    }, this.removeCellMeta = function(b, S, _) {
      const [I, H] = [this.toPhysicalRow(b), this.toPhysicalColumn(S)];
      let M = m.getCellMetaKeyValue(I, H, _);
      s.runHooks("beforeRemoveCellMeta", b, S, _, M) !== !1 && (m.removeCellMeta(I, H, _), s.runHooks("afterRemoveCellMeta", b, S, _, M)), M = null;
    }, this.spliceCellsMeta = function(b) {
      let S = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      for (var _ = arguments.length, I = new Array(_ > 2 ? _ - 2 : 0), H = 2; H < _; H++)
        I[H - 2] = arguments[H];
      if (I.length > 0 && !Array.isArray(I[0]))
        throw new Error("The 3rd argument (cellMetaRows) has to be passed as an array of cell meta objects array.");
      S > 0 && m.removeRow(this.toPhysicalRow(b), S), I.length > 0 && z(I.reverse(), (M) => {
        m.createRow(this.toPhysicalRow(b)), z(M, ($, Y) => this.setCellMetaObject(b, Y, $));
      }), s.render();
    }, this.setCellMetaObject = function(b, S, _) {
      typeof _ == "object" && lt(_, (I, H) => {
        this.setCellMeta(b, S, H, I);
      });
    }, this.setCellMeta = function(b, S, _, I) {
      if (s.runHooks("beforeSetCellMeta", b, S, _, I) === !1)
        return;
      let M = b, $ = S;
      b < this.countRows() && (M = this.toPhysicalRow(b)), S < this.countCols() && ($ = this.toPhysicalColumn(S)), m.setCellMeta(M, $, _, I), s.runHooks("afterSetCellMeta", b, S, _, I);
    }, this.getCellsMeta = function() {
      return m.getCellsMeta();
    }, this.getCellMeta = function(b, S) {
      let _ = this.toPhysicalRow(b), I = this.toPhysicalColumn(S);
      return _ === null && (_ = b), I === null && (I = S), m.getCellMeta(_, I, {
        visualRow: b,
        visualColumn: S
      });
    }, this.getColumnMeta = function(b) {
      return m.getColumnMeta(this.toPhysicalColumn(b));
    }, this.getCellMetaAtRow = function(b) {
      return m.getCellsMetaAtRow(b);
    }, this.isColumnModificationAllowed = function() {
      return !(s.dataType === "object" || v.columns);
    }, this.getCellRenderer = function(b, S) {
      const _ = typeof b == "number" ? s.getCellMeta(b, S).renderer : b.renderer;
      return typeof _ == "string" ? O_(_) : dn(_) ? O_("text") : _;
    }, this.getCellEditor = function(b, S) {
      const _ = typeof b == "number" ? s.getCellMeta(b, S).editor : b.editor;
      return typeof _ == "string" ? I_(_) : dn(_) ? I_("text") : _;
    }, this.getCellValidator = function(b, S) {
      const _ = typeof b == "number" ? s.getCellMeta(b, S).validator : b.validator;
      return typeof _ == "string" ? DD(_) : _;
    }, this.validateCells = function(b) {
      this._validateCells(b);
    }, this.validateRows = function(b, S) {
      if (!Array.isArray(b))
        throw new Error("validateRows parameter `rows` must be an array");
      this._validateCells(S, b);
    }, this.validateColumns = function(b, S) {
      if (!Array.isArray(b))
        throw new Error("validateColumns parameter `columns` must be an array");
      this._validateCells(S, void 0, b);
    }, this._validateCells = function(b, S, _) {
      const I = new B();
      b && (I.onQueueEmpty = b);
      let H = s.countRows() - 1;
      for (; H >= 0; ) {
        if (S !== void 0 && S.indexOf(H) === -1) {
          H -= 1;
          continue;
        }
        let M = s.countCols() - 1;
        for (; M >= 0; ) {
          if (_ !== void 0 && _.indexOf(M) === -1) {
            M -= 1;
            continue;
          }
          I.addValidatorToQueue(), s.validateCell(s.getDataAtCell(H, M), s.getCellMeta(H, M), ($) => {
            if (typeof $ != "boolean")
              throw new Error("Validation error: result is not boolean");
            $ === !1 && (I.valid = !1), I.removeValidatorFormQueue();
          }, "validateCells"), M -= 1;
        }
        H -= 1;
      }
      I.checkIfQueueIsEmpty();
    }, this.getRowHeader = function(b) {
      let S = v.rowHeaders, _ = b;
      return _ !== void 0 && (_ = s.runHooks("modifyRowHeader", _)), _ === void 0 ? (S = [], $e(s.countRows() - 1, (I) => {
        S.push(s.getRowHeader(I));
      })) : Array.isArray(S) && S[_] !== void 0 ? S = S[_] : cn(S) ? S = S(_) : S && typeof S != "string" && typeof S != "number" && (S = _ + 1), S;
    }, this.hasRowHeaders = function() {
      return !!v.rowHeaders;
    }, this.hasColHeaders = function() {
      if (v.colHeaders !== void 0 && v.colHeaders !== null)
        return !!v.colHeaders;
      for (let b = 0, S = s.countCols(); b < S; b++)
        if (s.getColHeader(b))
          return !0;
      return !1;
    }, this.getColHeader = function(b) {
      let S = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : -1;
      const _ = s.runHooks("modifyColHeader", b);
      if (_ === void 0) {
        const Y = [], K = s.countCols();
        for (let ce = 0; ce < K; ce++)
          Y.push(s.getColHeader(ce));
        return Y;
      }
      let I = v.colHeaders;
      const H = function(Y) {
        const K = [], ce = s.countCols();
        let le = 0;
        for (; le < ce; le++)
          cn(v.columns) && v.columns(le) && K.push(le);
        return K[Y];
      }, M = s.toPhysicalColumn(_), $ = H(M);
      return v.colHeaders === !1 ? I = null : v.columns && cn(v.columns) && v.columns($) && v.columns($).title ? I = v.columns($).title : v.columns && v.columns[M] && v.columns[M].title ? I = v.columns[M].title : Array.isArray(v.colHeaders) && v.colHeaders[M] !== void 0 ? I = v.colHeaders[M] : cn(v.colHeaders) ? I = v.colHeaders(M) : v.colHeaders && typeof v.colHeaders != "string" && typeof v.colHeaders != "number" && (I = z1(_)), I = s.runHooks("modifyColumnHeaderValue", I, b, S), I;
    }, this._getColWidthFromSettings = function(b) {
      let S;
      if (b >= 0 && (S = s.getCellMeta(0, b).width), (S === void 0 || S === v.width) && (S = v.colWidths), S != null) {
        switch (typeof S) {
          case "object":
            S = S[b];
            break;
          case "function":
            S = S(b);
            break;
        }
        typeof S == "string" && (S = parseInt(S, 10));
      }
      return S;
    }, this.getColWidth = function(b) {
      let S = s._getColWidthFromSettings(b);
      return S = s.runHooks("modifyColWidth", S, b), S === void 0 && (S = V1), S;
    }, this._getRowHeightFromSettings = function(b) {
      let S = v.rowHeights;
      if (S != null) {
        switch (typeof S) {
          case "object":
            S = S[b];
            break;
          case "function":
            S = S(b);
            break;
        }
        typeof S == "string" && (S = parseInt(S, 10));
      }
      return S;
    }, this.getRowHeight = function(b) {
      let S = s._getRowHeightFromSettings(b);
      return S = s.runHooks("modifyRowHeight", S, b), S;
    }, this.countSourceRows = function() {
      return l.countRows();
    }, this.countSourceCols = function() {
      return l.countFirstRowKeys();
    }, this.countRows = function() {
      return a.getLength();
    }, this.countCols = function() {
      const b = v.maxCols, S = this.columnIndexMapper.getNotTrimmedIndexesLength();
      return Math.min(b, S);
    }, this.countRenderedRows = function() {
      return s.view._wt.drawn ? s.view._wt.wtTable.getRenderedRowsCount() : -1;
    }, this.countVisibleRows = function() {
      return s.view._wt.drawn ? s.view._wt.wtTable.getVisibleRowsCount() : -1;
    }, this.countRenderedCols = function() {
      return s.view._wt.drawn ? s.view._wt.wtTable.getRenderedColumnsCount() : -1;
    }, this.countVisibleCols = function() {
      return s.view._wt.drawn ? s.view._wt.wtTable.getVisibleColumnsCount() : -1;
    }, this.countRowHeaders = function() {
      return this.view.getRowHeadersCount();
    }, this.countColHeaders = function() {
      return this.view.getColumnHeadersCount();
    }, this.countEmptyRows = function() {
      let b = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, S = 0;
      return UP(s.countRows() - 1, (_) => {
        if (s.isEmptyRow(_))
          S += 1;
        else if (b === !0)
          return !1;
      }), S;
    }, this.countEmptyCols = function() {
      let b = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, S = 0;
      return UP(s.countCols() - 1, (_) => {
        if (s.isEmptyCol(_))
          S += 1;
        else if (b === !0)
          return !1;
      }), S;
    }, this.isEmptyRow = function(b) {
      return v.isEmptyRow.call(s, b);
    }, this.isEmptyCol = function(b) {
      return v.isEmptyCol.call(s, b);
    }, this.selectCell = function(b, S, _, I) {
      let H = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !0, M = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : !0;
      return dn(b) || dn(S) ? !1 : this.selectCells([[b, S, _, I]], H, M);
    }, this.selectCells = function() {
      let b = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [[]], S = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, _ = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
      S === !1 && d.suspend();
      const I = P.selectCells(b);
      return I && _ && s.listen(), d.resume(), I;
    }, this.selectColumns = function(b) {
      let S = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : b, _ = arguments.length > 2 ? arguments[2] : void 0;
      return P.selectColumns(b, S, _);
    }, this.selectRows = function(b) {
      let S = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : b, _ = arguments.length > 2 ? arguments[2] : void 0;
      return P.selectRows(b, S, _);
    }, this.deselectCell = function() {
      P.deselect();
    }, this.selectAll = function() {
      let b = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0, S = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : b, _ = arguments.length > 2 ? arguments[2] : void 0;
      d.skipNextScrollCycle(), P.selectAll(b, S, _);
    };
    const G = (b, S) => b.getNearestNotHiddenIndex(S, 1, !0);
    this.scrollViewportTo = function(b) {
      var S;
      if (typeof b == "number") {
        var _;
        b = {
          row: arguments[0],
          col: arguments[1],
          verticalSnap: arguments[2] ? "bottom" : "top",
          horizontalSnap: arguments[3] ? "end" : "start",
          considerHiddenIndexes: (_ = arguments[4]) !== null && _ !== void 0 ? _ : !0
        };
      }
      const {
        row: I,
        col: H,
        verticalSnap: M,
        horizontalSnap: $,
        considerHiddenIndexes: Y
      } = (S = b) !== null && S !== void 0 ? S : {};
      let K, ce, le, _e;
      M !== void 0 && (K = M === "top", ce = !K), $ !== void 0 && (le = $ === "start", _e = !le);
      let be = I, Z = H;
      if (Y === void 0 || Y) {
        const Ne = Number.isInteger(I) && I >= 0, fe = Number.isInteger(H) && H >= 0, ye = Ne ? G(this.rowIndexMapper, I) : void 0, k = fe ? G(this.columnIndexMapper, H) : void 0;
        if (ye === null || k === null)
          return !1;
        be = Ne ? s.rowIndexMapper.getRenderableFromVisualIndex(ye) : I, Z = fe ? s.columnIndexMapper.getRenderableFromVisualIndex(k) : H;
      }
      const ee = Number.isInteger(be), ae = Number.isInteger(Z);
      return ee && be >= 0 && ae && Z >= 0 ? s.view.scrollViewport(s._createCellCoords(be, Z), K, _e, ce, le) : ee && be >= 0 && (ae && Z < 0 || !ae) ? s.view.scrollViewportVertically(be, K, ce) : ae && Z >= 0 && (ee && be < 0 || !ee) ? s.view.scrollViewportHorizontally(Z, _e, le) : !1;
    }, this.scrollToFocusedCell = function() {
      let b = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : () => {
      };
      if (!this.selection.isSelected())
        return;
      this.addHookOnce("afterScroll", b);
      const {
        highlight: S
      } = this.getSelectedRangeLast();
      this.scrollViewportTo(S.toObject()) ? this.view.render() : (this.removeHook("afterScroll", b), this._registerImmediate(() => b()));
    }, this.destroy = function() {
      if (s._clearTimeouts(), s._clearImmediates(), s.view && s.view.destroy(), l && l.destroy(), l = null, this.getShortcutManager().destroy(), m.clearCache(), AT.delete(this.guid), SS(s)) {
        const b = this.rootDocument.querySelector(".hot-display-license-info");
        b && b.parentNode.removeChild(b);
      }
      ra(s.rootElement), o.destroy(), u && u.destroy(), s.batchExecution(() => {
        s.rowIndexMapper.unregisterAll(), s.columnIndexMapper.unregisterAll(), w.getItems().forEach((b) => {
          let [, S] = b;
          S.destroy();
        }), w.clear(), s.runHooks("afterDestroy");
      }, !0), Ie.getSingleton().destroy(s), lt(s, (b, S, _) => {
        cn(b) ? _[S] = U(S) : S !== "guid" && (_[S] = null);
      }), s.isDestroyed = !0, a && a.destroy(), a = null, c = null, P = null, u = null, s = null;
    };
    function U(b) {
      return () => {
        throw new Error(`The "${b}" method cannot be called because this Handsontable instance has been destroyed`);
      };
    }
    this.getActiveEditor = function() {
      return u.getActiveEditor();
    }, this.getFirstRenderedVisibleRow = function() {
      return s.view.getFirstRenderedVisibleRow();
    }, this.getLastRenderedVisibleRow = function() {
      return s.view.getLastRenderedVisibleRow();
    }, this.getFirstRenderedVisibleColumn = function() {
      return s.view.getFirstRenderedVisibleColumn();
    }, this.getLastRenderedVisibleColumn = function() {
      return s.view.getLastRenderedVisibleColumn();
    }, this.getFirstFullyVisibleRow = function() {
      return s.view.getFirstFullyVisibleRow();
    }, this.getLastFullyVisibleRow = function() {
      return s.view.getLastFullyVisibleRow();
    }, this.getFirstFullyVisibleColumn = function() {
      return s.view.getFirstFullyVisibleColumn();
    }, this.getLastFullyVisibleColumn = function() {
      return s.view.getLastFullyVisibleColumn();
    }, this.getFirstPartiallyVisibleRow = function() {
      return s.view.getFirstPartiallyVisibleRow();
    }, this.getLastPartiallyVisibleRow = function() {
      return s.view.getLastPartiallyVisibleRow();
    }, this.getFirstPartiallyVisibleColumn = function() {
      return s.view.getFirstPartiallyVisibleColumn();
    }, this.getLastPartiallyVisibleColumn = function() {
      return s.view.getLastPartiallyVisibleColumn();
    }, this.getPlugin = function(b) {
      const S = pr(b);
      return S === "UndoRedo" ? this.undoRedo : w.getItem(S);
    }, this.getPluginName = function(b) {
      return b === this.undoRedo ? this.undoRedo.constructor.PLUGIN_KEY : w.getId(b);
    }, this.getInstance = function() {
      return s;
    }, this.addHook = function(b, S, _) {
      Ie.getSingleton().add(b, S, s, _);
    }, this.hasHook = function(b) {
      return Ie.getSingleton().has(b, s) || Ie.getSingleton().has(b);
    }, this.addHookOnce = function(b, S, _) {
      Ie.getSingleton().once(b, S, s, _);
    }, this.removeHook = function(b, S) {
      Ie.getSingleton().remove(b, S, s);
    }, this.runHooks = function(b, S, _, I, H, M, $) {
      return Ie.getSingleton().run(s, b, S, _, I, H, M, $);
    }, this.getTranslatedPhrase = function(b, S) {
      return gG(v.language, b, S);
    }, this.toHTML = () => jP(this), this.toTableElement = () => {
      const b = this.rootDocument.createElement("div");
      return b.insertAdjacentHTML("afterbegin", jP(this)), b.firstElementChild;
    }, this.timeouts = [], this._registerTimeout = function(b) {
      let S = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, _ = b;
      typeof _ == "function" && (_ = setTimeout(_, S)), this.timeouts.push(_);
    }, this._clearTimeouts = function() {
      z(this.timeouts, (b) => {
        clearTimeout(b);
      });
    }, this.immediates = [], this._registerImmediate = function(b) {
      this.immediates.push(setImmediate(b));
    }, this._clearImmediates = function() {
      z(this.immediates, (b) => {
        clearImmediate(b);
      });
    }, this._getEditorManager = function() {
      return u;
    }, this.isRtl = function() {
      return s.rootWindow.getComputedStyle(s.rootElement).direction === "rtl";
    }, this.isLtr = function() {
      return !s.isRtl();
    }, this.getDirectionFactor = function() {
      return s.isLtr() ? 1 : -1;
    };
    const se = mMe({
      handleEvent() {
        return s.isListening();
      },
      beforeKeyDown: (b) => this.runHooks("beforeKeyDown", b),
      afterKeyDown: (b) => {
        this.isDestroyed || s.runHooks("afterDocumentKeyDown", b);
      },
      ownerWindow: this.rootWindow
    });
    this.addHook("beforeOnCellMouseDown", (b) => {
      b.ctrlKey === !1 && b.metaKey === !1 && se.releasePressedKeys();
    }), this.getShortcutManager = function() {
      return se;
    }, this.getFocusManager = function() {
      return h;
    }, kD().forEach((b) => {
      const S = hy(b);
      w.addItem(b, new S(this));
    }), JTe(s), se.setActiveContextName("grid"), Ie.getSingleton().run(s, "construct");
  }
  function r3(n, e, t) {
    n.addEventListener(e, t, !1);
  }
  function s3(n, e, t) {
    n.removeEventListener(e, t, !1);
  }
  function o3(n) {
    return n.ownerDocument.defaultView.getComputedStyle(n);
  }
  function bMe(n) {
    const e = {
      minHeight: 200,
      maxHeight: 300,
      minWidth: 100,
      maxWidth: 300
    }, t = n.body, i = n.createTextNode(""), r = n.createElement("span");
    let s;
    function o() {
      i.textContent = s.value, r.style.position = "absolute", r.style.fontSize = o3(s).fontSize, r.style.fontFamily = o3(s).fontFamily, r.style.whiteSpace = "pre", t.appendChild(r);
      const u = r.clientWidth + 2;
      t.removeChild(r);
      const h = s.style;
      h.height = `${e.minHeight}px`, e.minWidth > u ? h.width = `${e.minWidth}px` : u > e.maxWidth ? h.width = `${e.maxWidth}px` : h.width = `${u}px`;
      const d = s.scrollHeight ? s.scrollHeight - 1 : 0;
      e.minHeight > d ? h.height = `${e.minHeight}px` : e.maxHeight < d ? (h.height = `${e.maxHeight}px`, h.overflowY = "visible") : h.height = `${d}px`;
    }
    function a() {
      n.defaultView.setTimeout(o, 0);
    }
    function l(u) {
      if (u && u.minHeight)
        if (u.minHeight === "inherit")
          e.minHeight = s.clientHeight;
        else {
          const h = parseInt(u.minHeight, 10);
          isNaN(h) || (e.minHeight = h);
        }
      if (u && u.maxHeight)
        if (u.maxHeight === "inherit")
          e.maxHeight = s.clientHeight;
        else {
          const h = parseInt(u.maxHeight, 10);
          isNaN(h) || (e.maxHeight = h);
        }
      if (u && u.minWidth)
        if (u.minWidth === "inherit")
          e.minWidth = s.clientWidth;
        else {
          const h = parseInt(u.minWidth, 10);
          isNaN(h) || (e.minWidth = h);
        }
      if (u && u.maxWidth)
        if (u.maxWidth === "inherit")
          e.maxWidth = s.clientWidth;
        else {
          const h = parseInt(u.maxWidth, 10);
          isNaN(h) || (e.maxWidth = h);
        }
      r.firstChild || (r.className = "autoResize", r.style.display = "inline-block", r.appendChild(i));
    }
    function c(u, h) {
      let d = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
      s = u, l(h), s.nodeName === "TEXTAREA" && (s.style.resize = "none", s.style.height = `${e.minHeight}px`, s.style.minWidth = `${e.minWidth}px`, s.style.maxWidth = `${e.maxWidth}px`, s.style.overflowY = "hidden"), d && (r3(s, "input", o), r3(s, "keydown", a)), o();
    }
    return {
      init: c,
      resize: o,
      unObserve() {
        s3(s, "input", o), s3(s, "keydown", a);
      }
    };
  }
  function a3(n, e) {
    const t = pD(e), i = e.value.split(`
`);
    let r = t, s = 0;
    for (let o = 0; o < i.length; o++) {
      const a = i[o];
      o !== 0 && (s += i[o - 1].length + 1);
      const l = s + a.length;
      if (n === "home" ? r = s : n === "end" && (r = l), t <= l)
        break;
    }
    ay(e, r);
  }
  function Ih(n, e, t) {
    return (e = vMe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function vMe(n) {
    var e = wMe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function wMe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  const yMe = "ht_editor_visible", W0 = "ht_editor_hidden", l3 = "textEditor", CMe = "text";
  class Pf extends Jp {
    static get EDITOR_TYPE() {
      return CMe;
    }
    /**
     * Instance of {@link EventManager}.
     *
     * @private
     * @type {EventManager}
     */
    /**
     * @param {Core} hotInstance The Handsontable instance.
     */
    constructor(e) {
      super(e), Ih(this, "eventManager", new lo(this)), Ih(this, "autoResize", bMe(this.hot.rootDocument)), Ih(this, "TEXTAREA", void 0), Ih(this, "textareaStyle", void 0), Ih(this, "TEXTAREA_PARENT", void 0), Ih(this, "textareaParentStyle", void 0), Ih(this, "layerClass", void 0), this.eventManager = new lo(this), this.createElements(), this.bindEvents(), this.hot.addHookOnce("afterDestroy", () => this.destroy());
    }
    /**
     * Gets current value from editable element.
     *
     * @returns {number}
     */
    getValue() {
      return this.TEXTAREA.value;
    }
    /**
     * Sets new value into editable element.
     *
     * @param {*} newValue The editor value.
     */
    setValue(e) {
      this.TEXTAREA.value = e;
    }
    /**
     * Opens the editor and adjust its size.
     */
    open() {
      this.refreshDimensions(), this.showEditableElement(), this.hot.getShortcutManager().setActiveContextName("editor"), this.registerShortcuts();
    }
    /**
     * Closes the editor.
     */
    close() {
      this.autoResize.unObserve(), W7(this.hot.rootDocument.activeElement, this.hot.rootElement) && this.hot.listen(), this.hideEditableElement(), this.unregisterShortcuts();
    }
    /**
     * Prepares editor's meta data.
     *
     * @param {number} row The visual row index.
     * @param {number} col The visual column index.
     * @param {number|string} prop The column property (passed when datasource is an array of objects).
     * @param {HTMLTableCellElement} td The rendered cell element.
     * @param {*} value The rendered value.
     * @param {object} cellProperties The cell meta object (see {@link Core#getCellMeta}).
     */
    prepare(e, t, i, r, s, o) {
      const a = this.state;
      if (super.prepare(e, t, i, r, s, o), !o.readOnly) {
        this.refreshDimensions(!0);
        const {
          allowInvalid: l
        } = o;
        l && !this.isOpened() && (this.TEXTAREA.value = ""), a !== Kn.FINISHED && !this.isOpened() && this.hideEditableElement();
      }
    }
    /**
     * Begins editing on a highlighted cell and hides fillHandle corner if was present.
     *
     * @param {*} newInitialValue The editor initial value.
     * @param {Event} event The keyboard event object.
     */
    beginEditing(e, t) {
      this.state === Kn.VIRGIN && (this.TEXTAREA.value = "", super.beginEditing(e, t));
    }
    /**
     * Sets focus state on the select element.
     */
    focus() {
      this.TEXTAREA.select(), ay(this.TEXTAREA, this.TEXTAREA.value.length);
    }
    /**
     * Creates an editor's elements and adds necessary CSS classnames.
     */
    createElements() {
      const {
        rootDocument: e
      } = this.hot;
      this.TEXTAREA = e.createElement("TEXTAREA"), ze(this.TEXTAREA, [["data-hot-input", ""], qp(-1)]), ue(this.TEXTAREA, "handsontableInput"), this.textareaStyle = this.TEXTAREA.style, this.textareaStyle.width = 0, this.textareaStyle.height = 0, this.textareaStyle.overflowY = "visible", this.TEXTAREA_PARENT = e.createElement("DIV"), ue(this.TEXTAREA_PARENT, "handsontableInputHolder"), Ue(this.TEXTAREA_PARENT, this.layerClass) && Ze(this.TEXTAREA_PARENT, this.layerClass), ue(this.TEXTAREA_PARENT, W0), this.textareaParentStyle = this.TEXTAREA_PARENT.style, this.TEXTAREA_PARENT.appendChild(this.TEXTAREA), this.hot.rootElement.appendChild(this.TEXTAREA_PARENT);
    }
    /**
     * Moves an editable element out of the viewport, but element must be able to hold focus for IME support.
     *
     * @private
     */
    hideEditableElement() {
      g9() && (this.textareaStyle.textIndent = "-99999px"), this.textareaStyle.overflowY = "visible", this.textareaParentStyle.opacity = "0", this.textareaParentStyle.height = "1px", Ze(this.TEXTAREA_PARENT, this.layerClass), ue(this.TEXTAREA_PARENT, W0);
    }
    /**
     * Resets an editable element position.
     *
     * @private
     */
    showEditableElement() {
      this.textareaParentStyle.height = "", this.textareaParentStyle.overflow = "", this.textareaParentStyle.position = "", this.textareaParentStyle[this.hot.isRtl() ? "left" : "right"] = "auto", this.textareaParentStyle.opacity = "1", this.textareaStyle.textIndent = "";
      const e = this.TEXTAREA_PARENT.childNodes;
      let t = !1;
      $e(e.length - 1, (i) => {
        const r = e[i];
        if (Ue(r, "handsontableEditor"))
          return t = !0, !1;
      }), Ue(this.TEXTAREA_PARENT, W0) && Ze(this.TEXTAREA_PARENT, W0), t ? (this.layerClass = yMe, ue(this.TEXTAREA_PARENT, this.layerClass)) : (this.layerClass = this.getEditedCellsLayerClass(), ue(this.TEXTAREA_PARENT, this.layerClass));
    }
    /**
     * Refreshes editor's value using source data.
     *
     * @private
     */
    refreshValue() {
      const e = this.hot.toPhysicalRow(this.row), t = this.hot.getSourceDataAtCell(e, this.col);
      this.originalValue = t, this.setValue(t), this.refreshDimensions();
    }
    /**
     * Refreshes editor's size and position.
     *
     * @private
     * @param {boolean} force Indicates if the refreshing editor dimensions should be triggered.
     */
    refreshDimensions() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
      if (this.state !== Kn.EDITING && !e)
        return;
      if (this.TD = this.getEditedCell(), !this.TD) {
        e || this.close();
        return;
      }
      const {
        top: t,
        start: i,
        width: r,
        maxWidth: s,
        height: o,
        maxHeight: a
      } = this.getEditedCellRect();
      this.textareaParentStyle.top = `${t}px`, this.textareaParentStyle[this.hot.isRtl() ? "right" : "left"] = `${i}px`, this.showEditableElement();
      const l = al(this.TD, this.hot.rootWindow);
      this.TEXTAREA.style.fontSize = l.fontSize, this.TEXTAREA.style.fontFamily = l.fontFamily, this.TEXTAREA.style.backgroundColor = this.TD.style.backgroundColor;
      const c = al(this.TEXTAREA), u = parseInt(c.paddingLeft, 10) + parseInt(c.paddingRight, 10), h = parseInt(c.paddingTop, 10) + parseInt(c.paddingBottom, 10), d = r - u, f = o - h, g = s - u, p = a - h;
      this.autoResize.init(this.TEXTAREA, {
        minWidth: Math.min(d, g),
        minHeight: Math.min(f, p),
        // TEXTAREA should never be wider than visible part of the viewport (should not cover the scrollbar)
        maxWidth: g,
        maxHeight: p
      }, !0);
    }
    /**
     * Binds events and hooks.
     *
     * @private
     */
    bindEvents() {
      _D() && this.eventManager.addEventListener(this.TEXTAREA, "focusout", () => this.finishEditing(!1)), this.addHook("afterScrollHorizontally", () => this.refreshDimensions()), this.addHook("afterScrollVertically", () => this.refreshDimensions()), this.addHook("afterColumnResize", () => {
        this.refreshDimensions(), this.state === Kn.EDITING && this.focus();
      }), this.addHook("afterRowResize", () => {
        this.refreshDimensions(), this.state === Kn.EDITING && this.focus();
      });
    }
    /**
     * Ugly hack for autocompleteEditor.
     *
     * @private
     */
    allowKeyEventPropagation() {
    }
    /**
     * Destroys the internal event manager and clears attached hooks.
     *
     * @private
     */
    destroy() {
      this.eventManager.destroy(), this.clearHooks();
    }
    /**
     * Register shortcuts responsible for handling editor.
     *
     * @private
     */
    registerShortcuts() {
      const t = this.hot.getShortcutManager().getContext("editor"), i = {
        runOnlyIf: () => ke(this.hot.getSelected()),
        group: l3
      }, r = () => {
        this.hot.rootDocument.execCommand("insertText", !1, `
`);
      };
      t.addShortcuts([{
        keys: [["Control", "Enter"]],
        callback: () => (r(), !1),
        runOnlyIf: (s) => !this.hot.selection.isMultiple() && // We trigger a data population for multiple selection.
        // catch CTRL but not right ALT (which in some systems triggers ALT+CTRL)
        !s.altKey
      }, {
        keys: [["Meta", "Enter"]],
        callback: () => (r(), !1),
        runOnlyIf: () => !this.hot.selection.isMultiple()
        // We trigger a data population for multiple selection.
      }, {
        keys: [["Alt", "Enter"]],
        callback: () => (r(), !1)
      }, {
        keys: [["Home"]],
        callback: (s, o) => {
          let [a] = o;
          a3(a, this.TEXTAREA);
        }
      }, {
        keys: [["End"]],
        callback: (s, o) => {
          let [a] = o;
          a3(a, this.TEXTAREA);
        }
      }], i);
    }
    /**
     * Unregister shortcuts responsible for handling editor.
     *
     * @private
     */
    unregisterShortcuts() {
      this.hot.getShortcutManager().getContext("editor").removeShortcutsByGroup(l3);
    }
  }
  const SMe = "base";
  function my(n, e, t, i, r, s, o) {
    const a = o.ariaTags, l = [], c = [], u = [], h = [];
    o.className && ue(e, o.className), o.readOnly ? (l.push(o.readOnlyCellClassName), a && h.push(YB())) : a && u.push(YB()[0]), o.valid === !1 && o.invalidCellClassName ? (l.push(o.invalidCellClassName), a && h.push(KB())) : (c.push(o.invalidCellClassName), a && u.push(KB()[0])), o.wordWrap === !1 && o.noWordWrapClassName && l.push(o.noWordWrapClassName), !s && o.placeholder && l.push(o.placeholderCellClassName), Ze(e, c), ue(e, l), Tf(e, u), ze(e, h);
  }
  my.RENDERER_TYPE = SMe;
  const _Me = "text";
  function Wc(n, e, t, i, r, s, o) {
    my.apply(this, [n, e, t, i, r, s, o]);
    let a = s;
    if (!a && o.placeholder && (a = o.placeholder), a = Vn(a), o.trimWhitespace && (a = a.trim()), o.rendererTemplate) {
      ra(e);
      const l = n.rootDocument.createElement("TEMPLATE");
      l.setAttribute("bind", "{{}}"), l.innerHTML = o.rendererTemplate, HTMLTemplateElement.decorate(l), l.model = n.getSourceDataAtRow(t), e.appendChild(l);
    } else
      Yu(e, a);
  }
  Wc.RENDERER_TYPE = _Me;
  const RMe = "text", AG = {
    CELL_TYPE: RMe,
    editor: Pf,
    renderer: Wc
  };
  Ws(AG);
  Qe.editors = {
    BaseEditor: Jp
  };
  function Qe(n, e) {
    const t = new MG(n, e || {}, ZD);
    return t.init(), t;
  }
  Qe.Core = function(n) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return new MG(n, e, ZD);
  };
  Qe.DefaultSettings = CG();
  Qe.hooks = Ie.getSingleton();
  Qe.CellCoords = rf;
  Qe.CellRange = dy;
  Qe.packageName = "handsontable";
  Qe.buildDate = "17/10/2024 09:16:16";
  Qe.version = "14.6.1";
  Qe.languages = {
    dictionaryKeys: BEe,
    getLanguageDictionary: fG,
    getLanguagesDictionaries: UEe,
    registerLanguageDictionary: dG,
    getTranslatedPhrase: gG
  };
  const c3 = "handsontableEditor", EMe = "handsontable";
  class _L extends Pf {
    static get EDITOR_TYPE() {
      return EMe;
    }
    /**
     * Opens the editor and adjust its size.
     */
    open() {
      super.open(), this.htEditor && this.htEditor.destroy(), this.htContainer.style.display === "none" && (this.htContainer.style.display = ""), this.htEditor = new this.hot.constructor(this.htContainer, this.htOptions), this.htEditor.init(), this.htEditor.rootElement.style.display = "", this.cellProperties.strict ? this.htEditor.selectCell(0, 0) : this.htEditor.deselectCell(), ay(this.TEXTAREA, 0, this.TEXTAREA.value.length), this.refreshDimensions();
    }
    /**
     * Closes the editor.
     */
    close() {
      this.htEditor && (this.htEditor.rootElement.style.display = "none"), this.removeHooksByKey("beforeKeyDown"), super.close();
    }
    /**
     * Prepares editor's meta data and configuration of the internal Handsontable's instance.
     *
     * @param {number} row The visual row index.
     * @param {number} col The visual column index.
     * @param {number|string} prop The column property (passed when datasource is an array of objects).
     * @param {HTMLTableCellElement} td The rendered cell element.
     * @param {*} value The rendered value.
     * @param {object} cellProperties The cell meta object (see {@link Core#getCellMeta}).
     */
    prepare(e, t, i, r, s, o) {
      super.prepare(e, t, i, r, s, o);
      const a = this, l = {
        startRows: 0,
        startCols: 0,
        minRows: 0,
        minCols: 0,
        className: "listbox",
        copyPaste: !1,
        autoColumnSize: !1,
        autoRowSize: !1,
        readOnly: !0,
        fillHandle: !1,
        autoWrapCol: !1,
        autoWrapRow: !1,
        ariaTags: !1,
        afterOnCellMouseDown(c, u) {
          const h = this.getSourceData(u.row, u.col);
          h !== void 0 && a.setValue(h), a.hot.destroyEditor();
        },
        preventWheel: !0,
        layoutDirection: this.hot.isRtl() ? "rtl" : "ltr"
      };
      this.cellProperties.handsontable && ai(l, o.handsontable), this.htOptions = l;
    }
    /**
     * Begins editing on a highlighted cell and hides fillHandle corner if was present.
     *
     * @param {*} newInitialValue The editor initial value.
     * @param {*} event The keyboard event object.
     */
    beginEditing(e, t) {
      const i = this.hot.getSettings().onBeginEditing;
      i && i() === !1 || super.beginEditing(e, t);
    }
    /**
     * Creates an editor's elements and adds necessary CSS classnames.
     */
    createElements() {
      super.createElements();
      const e = this.hot.rootDocument.createElement("DIV");
      e.className = "handsontableEditor", this.TEXTAREA_PARENT.appendChild(e), this.htContainer = e, this.assignHooks();
    }
    /**
     * Finishes editing and start saving or restoring process for editing cell or last selected range.
     *
     * @param {boolean} restoreOriginalValue If true, then closes editor without saving value from the editor into a cell.
     * @param {boolean} ctrlDown If true, then saveValue will save editor's value to each cell in the last selected range.
     * @param {Function} callback The callback function, fired after editor closing.
     */
    finishEditing(e, t, i) {
      if (this.htEditor && this.htEditor.isListening() && this.hot.listen(), this.htEditor && this.htEditor.getSelectedLast()) {
        const r = this.htEditor.getValue();
        r !== void 0 && this.setValue(r);
      }
      super.finishEditing(e, t, i);
    }
    /**
     * Assigns afterDestroy callback to prevent memory leaks.
     *
     * @private
     */
    assignHooks() {
      this.hot.addHook("afterDestroy", () => {
        this.htEditor && this.htEditor.destroy();
      });
    }
    /**
     * Register shortcuts responsible for handling editor.
     *
     * @private
     */
    registerShortcuts() {
      const t = this.hot.getShortcutManager().getContext("editor");
      super.registerShortcuts();
      const i = {
        group: c3,
        relativeToGroup: hh,
        position: "before"
      }, r = (s, o) => {
        const a = this.htEditor;
        if (s !== void 0 && (s < 0 || a.flipped && s > a.countRows() - 1 ? a.deselectCell() : a.selectCell(s, 0), a.getData().length))
          return o.preventDefault(), bo(o), this.hot.listen(), this.TEXTAREA.focus(), !1;
      };
      t.addShortcuts([{
        keys: [["ArrowUp"]],
        callback: (s) => {
          const o = this.htEditor;
          let a, l;
          return !o.getSelectedLast() && o.flipped ? a = o.countRows() - 1 : o.getSelectedLast() && (o.flipped ? (l = o.getSelectedLast()[0], a = Math.max(0, l - 1)) : (l = o.getSelectedLast()[0], a = l - 1)), r(a, s);
        },
        preventDefault: !1
        // Doesn't block default behaviour (navigation) for a `textArea` HTMLElement.
      }, {
        keys: [["ArrowDown"]],
        callback: (s) => {
          const o = this.htEditor;
          let a, l;
          if (!o.getSelectedLast() && !o.flipped)
            a = 0;
          else if (o.getSelectedLast()) {
            if (o.flipped)
              a = o.getSelectedLast()[0] + 1;
            else if (!o.flipped) {
              const c = o.countRows() - 1;
              l = o.getSelectedLast()[0], a = Math.min(c, l + 1);
            }
          }
          return r(a, s);
        },
        preventDefault: !1
        // Doesn't block default behaviour (navigation) for a `textArea` HTMLElement.
      }], i);
    }
    /**
     * Unregister shortcuts responsible for handling editor.
     *
     * @private
     */
    unregisterShortcuts() {
      super.unregisterShortcuts(), this.hot.getShortcutManager().getContext("editor").removeShortcutsByGroup(c3);
    }
  }
  function xMe(n, e, t) {
    TMe(n, e), e.set(n, t);
  }
  function TMe(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function j0(n, e, t) {
    return (e = MMe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function MMe(n) {
    var e = AMe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function AMe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function u3(n, e) {
    return n.get(PMe(n, e));
  }
  function PMe(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  const IMe = "autocomplete";
  var PT = /* @__PURE__ */ new WeakMap();
  class RL extends _L {
    constructor() {
      super(...arguments), j0(this, "query", null), j0(this, "strippedChoices", []), j0(this, "rawChoices", []), xMe(this, PT, this.hot.guid.slice(0, 9)), j0(this, "sortByRelevance", function(e, t, i) {
        const r = [], s = [], o = e.length;
        let a = t.length, l, c, u, h;
        if (o === 0) {
          for (u = 0; u < a; u++)
            s.push(u);
          return s;
        }
        for (u = 0; u < a; u++) {
          if (c = kP(Vn(t[u])), i)
            h = c.indexOf(e);
          else {
            const d = this.cellProperties.locale;
            h = c.toLocaleLowerCase(d).indexOf(e.toLocaleLowerCase(d));
          }
          h !== -1 && (l = c.length - h - o, r.push({
            baseIndex: u,
            index: h,
            charsLeft: l,
            value: c
          }));
        }
        for (r.sort((d, f) => {
          if (f.index === -1)
            return -1;
          if (d.index === -1)
            return 1;
          if (d.index < f.index)
            return -1;
          if (f.index < d.index)
            return 1;
          if (d.index === f.index) {
            if (d.charsLeft < f.charsLeft)
              return -1;
            if (d.charsLeft > f.charsLeft)
              return 1;
          }
          return 0;
        }), u = 0, a = r.length; u < a; u++)
          s.push(r[u].baseIndex);
        return s;
      });
    }
    static get EDITOR_TYPE() {
      return IMe;
    }
    /**
     * Gets current value from editable element.
     *
     * @returns {string}
     */
    getValue() {
      const e = this.rawChoices.find((t) => this.stripValueIfNeeded(t) === this.TEXTAREA.value);
      return ke(e) ? e : this.TEXTAREA.value;
    }
    /**
     * Creates an editor's elements and adds necessary CSS classnames.
     */
    createElements() {
      super.createElements(), ue(this.htContainer, "autocompleteEditor"), ue(this.htContainer, this.hot.rootWindow.navigator.platform.indexOf("Mac") === -1 ? "" : "htMacScroll"), this.hot.getSettings().ariaTags && ze(this.TEXTAREA, [R0e(), w0e(), H7("listbox"), M0e()]);
    }
    /**
     * Prepares editor's metadata and configuration of the internal Handsontable's instance.
     *
     * @param {number} row The visual row index.
     * @param {number} col The visual column index.
     * @param {number|string} prop The column property (passed when datasource is an array of objects).
     * @param {HTMLTableCellElement} td The rendered cell element.
     * @param {*} value The rendered value.
     * @param {object} cellProperties The cell meta object (see {@link Core#getCellMeta}).
     */
    prepare(e, t, i, r, s, o) {
      super.prepare(e, t, i, r, s, o), this.hot.getSettings().ariaTags && ze(this.TEXTAREA, [no("false"), A0e(`${u3(PT, this)}-listbox-${e}-${t}`)]);
    }
    /**
     * Opens the editor and adjust its size and internal Handsontable's instance.
     */
    open() {
      super.open();
      const e = this.cellProperties.trimDropdown === void 0 ? !0 : this.cellProperties.trimDropdown, t = this.hot.getSettings().ariaTags, i = Array.isArray(this.cellProperties.source) ? this.cellProperties.source : null, r = i == null ? void 0 : i.length, {
        row: s,
        col: o
      } = this;
      this.showEditableElement(), this.focus();
      let a = xi();
      a === 0 && gw() && (a += 15), this.addHook("beforeKeyDown", (l) => this.onBeforeKeyDown(l)), this.htEditor.updateSettings({
        colWidths: e ? [fn(this.TEXTAREA) - 2] : void 0,
        width: e ? fn(this.TEXTAREA) + a : void 0,
        autoColumnSize: !0,
        renderer: (l, c, u, h, d, f, g) => {
          Wc(l, c, u, h, d, f, g);
          const {
            filteringCaseSensitive: p,
            allowHtml: m,
            locale: v
          } = this.cellProperties, y = this.query;
          let w = Vn(f), R, E;
          w && !m && (R = p === !0 ? w.indexOf(y) : w.toLocaleLowerCase(v).indexOf(y.toLocaleLowerCase(v)), R !== -1 && (E = w.substr(R, y.length), w = w.replace(E, `<strong>${E}</strong>`))), t && ze(c, [
            y0e(),
            // Add `setsize` and `posinset` only if the source is an array.
            ...i ? [k0e(r)] : [],
            ...i ? [D0e(i.indexOf(f) + 1)] : [],
            ["id", `${this.htEditor.rootElement.id}_${u}-${h}`]
          ]), c.innerHTML = w;
        },
        afterSelectionEnd: (l, c) => {
          if (t) {
            const u = this.htEditor.getCell(l, c, !0);
            ze(u, [uD()]), ze(this.TEXTAREA, ...P0e(u.id));
          }
        }
      }), t && (ze(this.htEditor.view._wt.wtOverlays.wtTable.TABLE, ...Ka()), ze(this.htEditor.rootElement, [L7(), I0e("polite"), O0e("text"), ["id", `${u3(PT, this)}-listbox-${s}-${o}`]]), ze(this.TEXTAREA, ...no("true"))), this.hot._registerTimeout(() => {
        this.queryChoices(this.TEXTAREA.value);
      });
    }
    /**
     * Closes the editor.
     */
    close() {
      this.removeHooksByKey("beforeKeyDown"), super.close(), this.hot.getSettings().ariaTags && ze(this.TEXTAREA, [no("false")]);
    }
    /**
     * Verifies result of validation or closes editor if user's cancelled changes.
     *
     * @param {boolean|undefined} result If `false` and the cell using allowInvalid option,
     *                                   then an editor won't be closed until validation is passed.
     */
    discardEditor(e) {
      super.discardEditor(e), this.hot.view.render();
    }
    /**
     * Prepares choices list based on applied argument.
     *
     * @private
     * @param {string} query The query.
     */
    queryChoices(e) {
      const t = this.cellProperties.source;
      this.query = e, typeof t == "function" ? t.call(this.cellProperties, e, (i) => {
        this.rawChoices = i, this.updateChoicesList(this.stripValuesIfNeeded(i));
      }) : Array.isArray(t) ? (this.rawChoices = t, this.updateChoicesList(this.stripValuesIfNeeded(t))) : this.updateChoicesList([]);
    }
    /**
     * Updates list of the possible completions to choose.
     *
     * @private
     * @param {Array} choicesList The choices list to process.
     */
    updateChoicesList(e) {
      const t = pD(this.TEXTAREA), i = X7(this.TEXTAREA), r = this.cellProperties.sortByRelevance, s = this.cellProperties.filter;
      let o = null, a = null, l = e;
      r && (o = this.sortByRelevance(this.stripValueIfNeeded(this.getValue()), l, this.cellProperties.filteringCaseSensitive));
      const c = Array.isArray(o) ? o.length : 0;
      if (s === !1)
        c && (a = o[0]);
      else {
        const u = [];
        for (let h = 0, d = l.length; h < d && !(r && c <= h); h++)
          c ? u.push(l[o[h]]) : u.push(l[h]);
        a = 0, l = u;
      }
      this.strippedChoices = l, l.length === 0 ? this.htEditor.rootElement.style.display = "none" : this.htEditor.rootElement.style.display = "", this.htEditor.loadData(bv([l])), l.length > 0 && (this.updateDropdownDimensions(), this.flipDropdownIfNeeded(), this.cellProperties.strict === !0 && this.highlightBestMatchingChoice(a)), this.hot.listen(), ay(this.TEXTAREA, t, t === i ? void 0 : i);
    }
    /**
     * Checks where is enough place to open editor.
     *
     * @private
     * @returns {boolean}
     */
    flipDropdownIfNeeded() {
      const e = nf(this.hot.view._wt.wtTable.TABLE), t = e === this.hot.rootWindow, i = this.cellProperties.preventOverflow;
      if (t || !t && (i || i === "horizontal"))
        return !1;
      const r = _i(this.TEXTAREA), s = ti(this.TEXTAREA), o = this.getDropdownHeight(), a = e.scrollTop, l = ti(this.hot.view._wt.wtTable.THEAD), c = _i(e), u = r.top - c.top - l + a, h = e.scrollHeight - u - l - s, d = o > h && u > h;
      return d ? this.flipDropdown(o) : this.unflipDropdown(), this.limitDropdownIfNeeded(d ? u : h, o), d;
    }
    /**
     * Checks if the internal table should generate scrollbar or could be rendered without it.
     *
     * @private
     * @param {number} spaceAvailable The free space as height defined in px available for dropdown list.
     * @param {number} dropdownHeight The dropdown height.
     */
    limitDropdownIfNeeded(e, t) {
      if (t > e) {
        let i = 0, r = 0, s = 0, o = null;
        do
          s = this.htEditor.getRowHeight(r) || this.htEditor.view._wt.getSetting("defaultRowHeight"), i += s, r += 1;
        while (i < e);
        o = i - s, this.htEditor.flipped && (this.htEditor.rootElement.style.top = `${parseInt(this.htEditor.rootElement.style.top, 10) + t - o}px`), this.setDropdownHeight(i - s);
      }
    }
    /**
     * Configures editor to open it at the top.
     *
     * @private
     * @param {number} dropdownHeight The dropdown height.
     */
    flipDropdown(e) {
      const t = this.htEditor.rootElement.style;
      t.position = "absolute", t.top = `${-e}px`, this.htEditor.flipped = !0;
    }
    /**
     * Configures editor to open it at the bottom.
     *
     * @private
     */
    unflipDropdown() {
      const e = this.htEditor.rootElement.style;
      e.position = "absolute", e.top = "", this.htEditor.flipped = void 0;
    }
    /**
     * Updates width and height of the internal Handsontable's instance.
     *
     * @private
     */
    updateDropdownDimensions() {
      const e = this.htEditor.getColWidth(0) + xi(this.hot.rootDocument) + 2, t = this.cellProperties.trimDropdown;
      this.htEditor.updateSettings({
        height: this.getDropdownHeight(),
        width: t ? void 0 : e
      }), this.htEditor.view._wt.wtTable.alignOverlaysWithTrimmingContainer();
    }
    /**
     * Sets new height of the internal Handsontable's instance.
     *
     * @private
     * @param {number} height The new dropdown height.
     */
    setDropdownHeight(e) {
      this.htEditor.updateSettings({
        height: e
      });
    }
    /**
     * Creates new selection on specified row index, or deselects selected cells.
     *
     * @private
     * @param {number|undefined} index The visual row index.
     */
    highlightBestMatchingChoice(e) {
      typeof e == "number" ? this.htEditor.selectCell(e, 0, void 0, void 0, void 0, !1) : this.htEditor.deselectCell();
    }
    /**
     * Calculates and return the internal Handsontable's height.
     *
     * @private
     * @returns {number}
     */
    getDropdownHeight() {
      const e = this.htEditor.getRowHeight(0) || 23, t = this.cellProperties.visibleRows;
      return this.strippedChoices.length >= t ? t * e : this.strippedChoices.length * e + 8;
    }
    /**
     * Sanitizes value from potential dangerous tags.
     *
     * @private
     * @param {string} value The value to sanitize.
     * @returns {string}
     */
    stripValueIfNeeded(e) {
      return this.stripValuesIfNeeded([e])[0];
    }
    /**
     * Sanitizes an array of the values from potential dangerous tags.
     *
     * @private
     * @param {string[]} values The value to sanitize.
     * @returns {string[]}
     */
    stripValuesIfNeeded(e) {
      const {
        allowHtml: t
      } = this.cellProperties, i = mt(e, (s) => Vn(s));
      return mt(i, (s) => t ? s : kP(s));
    }
    /**
     * Captures use of arrow down and up to control their behaviour.
     *
     * @private
     * @param {number} keyCode The keyboard keycode.
     * @returns {boolean}
     */
    allowKeyEventPropagation(e) {
      const t = this.htEditor.getSelectedRangeLast(), i = {
        row: t ? t.from.row : -1
      };
      let r = !1;
      return e === He.ARROW_DOWN && i.row > 0 && i.row < this.htEditor.countRows() - 1 && (r = !0), e === He.ARROW_UP && i.row > -1 && (r = !0), r;
    }
    /**
     * OnBeforeKeyDown callback.
     *
     * @private
     * @param {KeyboardEvent} event The keyboard event object.
     */
    onBeforeKeyDown(e) {
      if (p9(e.keyCode) || e.keyCode === He.BACKSPACE || e.keyCode === He.DELETE || e.keyCode === He.INSERT) {
        let t = 10;
        if (e.keyCode === He.C && (e.ctrlKey || e.metaKey))
          return;
        this.isOpened() || (t += 10), this.htEditor && this.hot._registerTimeout(() => {
          this.queryChoices(this.TEXTAREA.value);
        }, t);
      }
    }
  }
  const OMe = "checkbox";
  class PG extends Jp {
    static get EDITOR_TYPE() {
      return OMe;
    }
    beginEditing(e, t) {
      if (t && t.type === "mouseup" && t.target.nodeName === "TD") {
        const i = this.TD.querySelector('input[type="checkbox"]');
        Ue(i, "htBadValue") || i.click();
      }
    }
    finishEditing() {
    }
    init() {
    }
    open() {
    }
    close() {
    }
    getValue() {
    }
    setValue() {
    }
    focus() {
    }
  }
  /*!
   * Pikaday
   *
   * Copyright © 2014 David Bushell | BSD & MIT license | https://github.com/Pikaday/Pikaday
   */
  const Au = () => window, Ys = () => window.document, tI = (n, e) => window.setTimeout(n, e), Ia = function(n, e, t, i) {
    n.addEventListener(e, t, !!i);
  }, Dl = function(n, e, t, i) {
    n.removeEventListener(e, t, !!i);
  }, kMe = function(n) {
    return n.trim ? n.trim() : n.replace(/^\s+|\s+$/g, "");
  }, rs = function(n, e) {
    return (" " + n.className + " ").indexOf(" " + e + " ") !== -1;
  }, IT = function(n, e) {
    rs(n, e) || (n.className = n.className === "" ? e : n.className + " " + e);
  }, OT = function(n, e) {
    n.className = kMe((" " + n.className + " ").replace(" " + e + " ", " "));
  }, EL = function(n) {
    return /Array/.test(Object.prototype.toString.call(n));
  }, us = function(n) {
    return /Date/.test(Object.prototype.toString.call(n)) && !isNaN(n.getTime());
  }, DMe = function(n) {
    let e = n.getDay();
    return e === 0 || e === 6;
  }, NMe = function(n) {
    return n % 4 === 0 && n % 100 !== 0 || n % 400 === 0;
  }, h3 = function(n, e) {
    return [31, NMe(n) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][e];
  }, z0 = function(n) {
    us(n) && n.setHours(0, 0, 0, 0);
  }, U0 = function(n, e) {
    return n.getTime() === e.getTime();
  }, U_ = function(n, e, t) {
    let i, r;
    for (i in e)
      r = n[i] !== void 0, r && typeof e[i] == "object" && e[i] !== null && e[i].nodeName === void 0 ? us(e[i]) ? t && (n[i] = new Date(e[i].getTime())) : EL(e[i]) ? t && (n[i] = e[i].slice(0)) : n[i] = U_({}, e[i], t) : (t || !r) && (n[i] = e[i]);
    return n;
  }, d3 = function(n, e, t) {
    let i = Ys().createEvent("HTMLEvents");
    i.initEvent(e, !0, !1), i = U_(i, t), n.dispatchEvent(i);
  }, f3 = function(n) {
    return n.month < 0 && (n.year -= Math.ceil(Math.abs(n.month) / 12), n.month += 12), n.month > 11 && (n.year += Math.floor(Math.abs(n.month) / 12), n.month -= 12), n;
  }, va = {
    // bind the picker to a form field
    field: null,
    // automatically show/hide the picker on `field` focus (default `true` if `field` is set)
    bound: void 0,
    // data-attribute on the input field with an aria assistance text (only applied when `bound` is set)
    ariaLabel: "Use the arrow keys to pick a date",
    // position of the datepicker, relative to the field (default to bottom & left)
    // ('bottom' & 'left' keywords are not used, 'top' & 'right' are modifier on the bottom/left position)
    position: "bottom left",
    // automatically fit in the viewport even if it means repositioning from the position option
    reposition: !0,
    // the default output format for `.toString()` and `field` value
    format: "YYYY-MM-DD",
    // the toString function which gets passed a current date object and format
    // and returns a string
    toString: null,
    // used to create date object from current input string
    parse: null,
    // the initial date to view when first opened
    defaultDate: null,
    // make the `defaultDate` the initial selected value
    setDefaultDate: !1,
    // first day of week (0: Sunday, 1: Monday etc)
    firstDay: 0,
    // minimum number of days in the week that gets week number one
    // default ISO 8601, week 01 is the week with the first Thursday (4)
    firstWeekOfYearMinDays: 4,
    // the default flag for moment's strict date parsing
    formatStrict: !1,
    // the minimum/earliest date that can be selected
    minDate: null,
    // the maximum/latest date that can be selected
    maxDate: null,
    // number of years either side, or array of upper/lower range
    yearRange: 10,
    // show week numbers at head of row
    showWeekNumber: !1,
    // Week picker mode
    pickWholeWeek: !1,
    // used internally (don't config outside)
    minYear: 0,
    maxYear: 9999,
    minMonth: void 0,
    maxMonth: void 0,
    startRange: null,
    endRange: null,
    isRTL: !1,
    // Additional text to append to the year in the calendar title
    yearSuffix: "",
    // Render the month after year in the calendar title
    showMonthAfterYear: !1,
    // Render days of the calendar grid that fall in the next or previous month
    showDaysInNextAndPreviousMonths: !1,
    // Allows user to select days that fall in the next or previous month
    enableSelectionDaysInNextAndPreviousMonths: !1,
    // how many months are visible
    numberOfMonths: 1,
    // when numberOfMonths is used, this will help you to choose where the main calendar will be (default `left`, can be set to `right`)
    // only used for the first display or when a selected date is not visible
    mainCalendar: "left",
    // Specify a DOM element to render the calendar in
    container: void 0,
    // Blur field when date is selected
    blurFieldOnSelect: !0,
    // internationalization
    i18n: {
      previousMonth: "Previous Month",
      nextMonth: "Next Month",
      months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
      weekdays: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      weekdaysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
    },
    // Theme Classname
    theme: null,
    // events array
    events: [],
    // callback function
    onSelect: null,
    onOpen: null,
    onClose: null,
    onDraw: null,
    // Enable keyboard input
    keyboardInput: !0
  }, g3 = function(n, e, t) {
    for (e += n.firstDay; e >= 7; )
      e -= 7;
    return t ? n.i18n.weekdaysShort[e] : n.i18n.weekdays[e];
  }, LMe = function(n) {
    let e = [], t = "false";
    if (n.isEmpty)
      if (n.showDaysInNextAndPreviousMonths)
        e.push("is-outside-current-month"), n.enableSelectionDaysInNextAndPreviousMonths || e.push("is-selection-disabled");
      else
        return '<td class="is-empty"></td>';
    return n.isDisabled && e.push("is-disabled"), n.isToday && e.push("is-today"), n.isSelected && (e.push("is-selected"), t = "true"), n.hasEvent && e.push("has-event"), n.isInRange && e.push("is-inrange"), n.isStartRange && e.push("is-startrange"), n.isEndRange && e.push("is-endrange"), '<td data-day="' + n.day + '" class="' + e.join(" ") + '" aria-selected="' + t + '"><button class="pika-button pika-day" type="button" data-pika-year="' + n.year + '" data-pika-month="' + n.month + '" data-pika-day="' + n.day + '">' + n.day + "</button></td>";
  }, HMe = function(n, e) {
    n.setHours(0, 0, 0, 0);
    let t = n.getDate(), i = n.getDay(), r = e, s = r - 1, o = 7, a = function(d) {
      return (d + o - 1) % o;
    };
    n.setDate(t + s - a(i));
    let l = new Date(n.getFullYear(), 0, r), c = 24 * 60 * 60 * 1e3, u = (n.getTime() - l.getTime()) / c;
    return 1 + Math.round((u - s + a(l.getDay())) / o);
  }, $Me = function(n, e, t, i, r) {
    let s = new Date(i, t, e);
    return '<td class="pika-week">' + (n.hasMoment ? n.moment(s).isoWeek() : HMe(s, r)) + "</td>";
  }, FMe = function(n, e, t, i) {
    return '<tr class="pika-row' + (t ? " pick-whole-week" : "") + (i ? " is-selected" : "") + '">' + (e ? n.reverse() : n).join("") + "</tr>";
  }, BMe = function(n) {
    return "<tbody>" + n.join("") + "</tbody>";
  }, VMe = function(n) {
    let e, t = [];
    for (n.showWeekNumber && t.push("<th></th>"), e = 0; e < 7; e++)
      t.push('<th scope="col"><abbr title="' + g3(n, e) + '">' + g3(n, e, !0) + "</abbr></th>");
    return "<thead><tr>" + (n.isRTL ? t.reverse() : t).join("") + "</tr></thead>";
  }, WMe = function(n, e, t, i, r, s) {
    let o, a, l, c = n._o, u = t === c.minYear, h = t === c.maxYear, d = '<div id="' + s + '" class="pika-title" role="heading" aria-live="polite">', f, g, p = !0, m = !0;
    for (l = [], o = 0; o < 12; o++)
      l.push('<option value="' + (t === r ? o - e : 12 + o - e) + '"' + (o === i ? ' selected="selected"' : "") + (u && o < c.minMonth || h && o > c.maxMonth ? ' disabled="disabled"' : "") + ">" + c.i18n.months[o] + "</option>");
    for (f = '<div class="pika-label">' + c.i18n.months[i] + '<select class="pika-select pika-select-month" tabindex="-1">' + l.join("") + "</select></div>", EL(c.yearRange) ? (o = c.yearRange[0], a = c.yearRange[1] + 1) : (o = t - c.yearRange, a = 1 + t + c.yearRange), l = []; o < a && o <= c.maxYear; o++)
      o >= c.minYear && l.push('<option value="' + o + '"' + (o === t ? ' selected="selected"' : "") + ">" + o + "</option>");
    return g = '<div class="pika-label">' + t + c.yearSuffix + '<select class="pika-select pika-select-year" tabindex="-1">' + l.join("") + "</select></div>", c.showMonthAfterYear ? d += g + f : d += f + g, u && (i === 0 || c.minMonth >= i) && (p = !1), h && (i === 11 || c.maxMonth <= i) && (m = !1), e === 0 && (d += '<button class="pika-prev' + (p ? "" : " is-disabled") + '" type="button">' + c.i18n.previousMonth + "</button>"), e === n._o.numberOfMonths - 1 && (d += '<button class="pika-next' + (m ? "" : " is-disabled") + '" type="button">' + c.i18n.nextMonth + "</button>"), d += "</div>";
  }, jMe = function(n, e, t) {
    return '<table cellpadding="0" cellspacing="0" class="pika-table" role="grid" aria-labelledby="' + t + '">' + VMe(n) + BMe(e) + "</table>";
  };
  function nI(n) {
    let e = this, t = e.config(n);
    e._onMouseDown = function(r) {
      if (!e._v)
        return;
      r = r || Au().event;
      let s = r.target || r.srcElement;
      if (s)
        if (rs(s, "is-disabled") || (rs(s, "pika-button") && !rs(s, "is-empty") && !rs(s.parentNode, "is-disabled") ? (e.setDate(
          new Date(
            s.getAttribute("data-pika-year"),
            s.getAttribute("data-pika-month"),
            s.getAttribute("data-pika-day")
          )
        ), t.bound && tI(function() {
          e.hide(), t.blurFieldOnSelect && t.field && t.field.blur();
        }, 100)) : rs(s, "pika-prev") ? e.prevMonth() : rs(s, "pika-next") && e.nextMonth()), rs(s, "pika-select"))
          e._c = !0;
        else if (r.preventDefault)
          r.preventDefault();
        else
          return r.returnValue = !1, !1;
    }, e._onChange = function(r) {
      r = r || Au().event;
      let s = r.target || r.srcElement;
      s && (rs(s, "pika-select-month") ? e.gotoMonth(s.value) : rs(s, "pika-select-year") && e.gotoYear(s.value));
    }, e._onKeyChange = function(r) {
      if (r = r || Au().event, e.isVisible())
        switch (r.keyCode) {
          case 13:
          case 27:
            t.field && t.field.blur();
            break;
          case 37:
            e.adjustDate("subtract", 1);
            break;
          case 38:
            e.adjustDate("subtract", 7);
            break;
          case 39:
            e.adjustDate("add", 1);
            break;
          case 40:
            e.adjustDate("add", 7);
            break;
          case 8:
          case 46:
            e.setDate(null);
            break;
        }
    }, e._parseFieldValue = function() {
      if (t.parse)
        return t.parse(t.field.value, t.format);
      if (this.hasMoment) {
        let r = this.moment(
          t.field.value,
          t.format,
          t.formatStrict
        );
        return r && r.isValid() ? r.toDate() : null;
      } else
        return new Date(Date.parse(t.field.value));
    }, e._onInputChange = function(r) {
      let s;
      r.firedBy !== e && (s = e._parseFieldValue(), us(s) && e.setDate(s), e._v || e.show());
    }, e._onInputFocus = function() {
      e.show();
    }, e._onInputClick = function() {
      e.show();
    }, e._onInputBlur = function() {
      let r = Ys().activeElement;
      do
        if (rs(r, "pika-single"))
          return;
      while (r = r.parentNode);
      e._c || (e._b = tI(function() {
        e.hide();
      }, 50)), e._c = !1;
    }, e._onClick = function(r) {
      r = r || Au().event;
      let s = r.target || r.srcElement, o = s;
      if (s) {
        !hasEventListeners && rs(s, "pika-select") && (s.onchange || (s.setAttribute("onchange", "return;"), Ia(s, "change", e._onChange)));
        do
          if (rs(o, "pika-single") || o === t.trigger)
            return;
        while (o = o.parentNode);
        e._v && s !== t.trigger && o !== t.trigger && e.hide();
      }
    }, e.el = Ys().createElement("div"), e.el.className = "pika-single" + (t.isRTL ? " is-rtl" : "") + (t.theme ? " " + t.theme : ""), Ia(e.el, "mousedown", e._onMouseDown, !0), Ia(e.el, "touchend", e._onMouseDown, !0), Ia(e.el, "change", e._onChange), t.keyboardInput && Ia(Ys(), "keydown", e._onKeyChange), t.field && (t.container ? t.container.appendChild(e.el) : t.bound ? Ys().body.appendChild(e.el) : t.field.parentNode.insertBefore(
      e.el,
      t.field.nextSibling
    ), Ia(t.field, "change", e._onInputChange), t.defaultDate || (t.defaultDate = e._parseFieldValue(), t.setDefaultDate = !0));
    let i = t.defaultDate;
    us(i) ? t.setDefaultDate ? e.setDate(i, !0) : e.gotoDate(i) : e.gotoDate(/* @__PURE__ */ new Date()), t.bound ? (this.hide(), e.el.className += " is-bound", Ia(t.trigger, "click", e._onInputClick), Ia(t.trigger, "focus", e._onInputFocus), Ia(t.trigger, "blur", e._onInputBlur)) : this.show();
  }
  nI.prototype = {
    /**
     * configure functionality
     */
    config: function(n) {
      this._o || (this._o = U_({}, va, !0));
      let e = U_(this._o, n, !0);
      e.isRTL = !!e.isRTL, e.field = e.field && e.field.nodeName ? e.field : null, e.theme = typeof e.theme == "string" && e.theme ? e.theme : null, e.bound = !!(e.bound !== void 0 ? e.field && e.bound : e.field), e.trigger = e.trigger && e.trigger.nodeName ? e.trigger : e.field, e.disableWeekends = !!e.disableWeekends, e.disableDayFn = typeof e.disableDayFn == "function" ? e.disableDayFn : null;
      let t = parseInt(e.numberOfMonths, 10) || 1;
      if (e.numberOfMonths = t > 4 ? 4 : t, us(e.minDate) || (e.minDate = !1), us(e.maxDate) || (e.maxDate = !1), e.minDate && e.maxDate && e.maxDate < e.minDate && (e.maxDate = e.minDate = !1), e.minDate && this.setMinDate(e.minDate), e.maxDate && this.setMaxDate(e.maxDate), EL(e.yearRange)) {
        let i = (/* @__PURE__ */ new Date()).getFullYear() - 10;
        e.yearRange[0] = parseInt(e.yearRange[0], 10) || i, e.yearRange[1] = parseInt(e.yearRange[1], 10) || i;
      } else
        e.yearRange = Math.abs(parseInt(e.yearRange, 10)) || va.yearRange, e.yearRange > 100 && (e.yearRange = 100);
      return e;
    },
    /**
     * return a formatted string of the current selection (using Moment.js if available)
     */
    toString: function(n) {
      return n = n || this._o.format, us(this._d) ? this._o.toString ? this._o.toString(this._d, n) : this.hasMoment ? this.moment(this._d).format(n) : this._d.toDateString() : "";
    },
    /**
     * return a Moment.js object of the current selection (if available)
     */
    getMoment: function() {
      return this.hasMoment ? this.moment(this._d) : null;
    },
    /**
     * set the current selection from a Moment.js object (if available)
     */
    setMoment: function(n, e) {
      this.hasMoment && this.moment.isMoment(n) && this.setDate(n.toDate(), e);
    },
    /**
     * Sets the momentjs function as dependency to parse and format the dates
     */
    useMoment: function(n) {
      this.hasMoment = !0, this.moment = n;
    },
    /**
     * return a Date object of the current selection
     */
    getDate: function() {
      return us(this._d) ? new Date(this._d.getTime()) : null;
    },
    /**
     * set the current selection
     */
    setDate: function(n, e) {
      if (!n)
        return this._d = null, this._o.field && (this._o.field.value = "", d3(this._o.field, "change", { firedBy: this })), this.draw();
      if (typeof n == "string" && (n = new Date(Date.parse(n))), !us(n))
        return;
      let t = this._o.minDate, i = this._o.maxDate;
      us(t) && n < t ? n = t : us(i) && n > i && (n = i), this._d = new Date(n.getTime()), z0(this._d), this.gotoDate(this._d), this._o.field && (this._o.field.value = this.toString(), d3(this._o.field, "change", { firedBy: this })), !e && typeof this._o.onSelect == "function" && this._o.onSelect.call(this, this.getDate());
    },
    /**
     * clear and reset the date
     */
    clear: function() {
      this.setDate(null);
    },
    /**
     * change view to a specific date
     */
    gotoDate: function(n) {
      let e = !0;
      if (us(n)) {
        if (this.calendars) {
          let t = new Date(this.calendars[0].year, this.calendars[0].month, 1), i = new Date(this.calendars[this.calendars.length - 1].year, this.calendars[this.calendars.length - 1].month, 1), r = n.getTime();
          i.setMonth(i.getMonth() + 1), i.setDate(i.getDate() - 1), e = r < t.getTime() || i.getTime() < r;
        }
        e && (this.calendars = [{
          month: n.getMonth(),
          year: n.getFullYear()
        }], this._o.mainCalendar === "right" && (this.calendars[0].month += 1 - this._o.numberOfMonths)), this.adjustCalendars();
      }
    },
    adjustDate: function(n, e) {
      let t = this.getDate() || /* @__PURE__ */ new Date(), i = parseInt(e) * 24 * 60 * 60 * 1e3, r;
      n === "add" ? r = new Date(t.valueOf() + i) : n === "subtract" && (r = new Date(t.valueOf() - i)), this.setDate(r);
    },
    adjustCalendars: function() {
      this.calendars[0] = f3(this.calendars[0]);
      for (let n = 1; n < this._o.numberOfMonths; n++)
        this.calendars[n] = f3({
          month: this.calendars[0].month + n,
          year: this.calendars[0].year
        });
      this.draw();
    },
    gotoToday: function() {
      this.gotoDate(/* @__PURE__ */ new Date());
    },
    /**
     * change view to a specific month (zero-index, e.g. 0: January)
     */
    gotoMonth: function(n) {
      isNaN(n) || (this.calendars[0].month = parseInt(n, 10), this.adjustCalendars());
    },
    nextMonth: function() {
      this.calendars[0].month++, this.adjustCalendars();
    },
    prevMonth: function() {
      this.calendars[0].month--, this.adjustCalendars();
    },
    /**
     * change view to a specific full year (e.g. "2012")
     */
    gotoYear: function(n) {
      isNaN(n) || (this.calendars[0].year = parseInt(n, 10), this.adjustCalendars());
    },
    /**
     * change the minDate
     */
    setMinDate: function(n) {
      n instanceof Date ? (z0(n), this._o.minDate = n, this._o.minYear = n.getFullYear(), this._o.minMonth = n.getMonth()) : (this._o.minDate = va.minDate, this._o.minYear = va.minYear, this._o.minMonth = va.minMonth, this._o.startRange = va.startRange), this.draw();
    },
    /**
     * change the maxDate
     */
    setMaxDate: function(n) {
      n instanceof Date ? (z0(n), this._o.maxDate = n, this._o.maxYear = n.getFullYear(), this._o.maxMonth = n.getMonth()) : (this._o.maxDate = va.maxDate, this._o.maxYear = va.maxYear, this._o.maxMonth = va.maxMonth, this._o.endRange = va.endRange), this.draw();
    },
    setStartRange: function(n) {
      this._o.startRange = n;
    },
    setEndRange: function(n) {
      this._o.endRange = n;
    },
    /**
     * refresh the HTML
     */
    draw: function(n) {
      if (!this._v && !n)
        return;
      let e = this._o, t = e.minYear, i = e.maxYear, r = e.minMonth, s = e.maxMonth, o = "", a;
      this._y <= t && (this._y = t, !isNaN(r) && this._m < r && (this._m = r)), this._y >= i && (this._y = i, !isNaN(s) && this._m > s && (this._m = s));
      for (let l = 0; l < e.numberOfMonths; l++)
        a = "pika-title-" + Math.random().toString(36).replace(/[^a-z]+/g, "").substr(0, 2), o += '<div class="pika-lendar">' + WMe(this, l, this.calendars[l].year, this.calendars[l].month, this.calendars[0].year, a) + this.render(this.calendars[l].year, this.calendars[l].month, a) + "</div>";
      this.el.innerHTML = o, e.bound && e.field.type !== "hidden" && tI(function() {
        e.trigger.focus();
      }, 1), typeof this._o.onDraw == "function" && this._o.onDraw(this), e.bound && e.field.setAttribute("aria-label", e.ariaLabel);
    },
    adjustPosition: function() {
      let n, e, t, i, r, s, o, a, l, c, u;
      this._o.container || (this.el.style.position = "absolute", n = this._o.trigger, e = this.el.offsetWidth, t = this.el.offsetHeight, i = Au().innerWidth || Ys().documentElement.clientWidth, r = Au().innerHeight || Ys().documentElement.clientHeight, s = Ys().body.scrollTop || Ys().documentElement.scrollTop, c = !0, u = !0, l = n.getBoundingClientRect(), o = l.left + Au().pageXOffset, a = l.bottom + Au().pageYOffset, (this._o.reposition && o + e > i || this._o.position.indexOf("right") > -1 && o - e + n.offsetWidth > 0) && (o = o - e + n.offsetWidth, c = !1), (this._o.reposition && a + t > r + s || this._o.position.indexOf("top") > -1 && a - t - n.offsetHeight > 0) && (a = a - t - n.offsetHeight, u = !1), o < 0 && (o = 0), a < 0 && (a = 0), this.el.style.left = o + "px", this.el.style.top = a + "px", IT(this.el, c ? "left-aligned" : "right-aligned"), IT(this.el, u ? "bottom-aligned" : "top-aligned"), OT(this.el, c ? "right-aligned" : "left-aligned"), OT(this.el, u ? "top-aligned" : "bottom-aligned"));
    },
    /**
     * render HTML for a particular month
     */
    render: function(n, e, t) {
      let i = this._o, r = /* @__PURE__ */ new Date(), s = h3(n, e), o = new Date(n, e, 1).getDay(), a = [], l = [];
      z0(r), i.firstDay > 0 && (o -= i.firstDay, o < 0 && (o += 7));
      let c = e === 0 ? 11 : e - 1, u = e === 11 ? 0 : e + 1, h = e === 0 ? n - 1 : n, d = e === 11 ? n + 1 : n, f = h3(h, c), g = s + o, p = g;
      for (; p > 7; )
        p -= 7;
      g += 7 - p;
      let m = !1;
      for (let v = 0, y = 0; v < g; v++) {
        let w = new Date(n, e, 1 + (v - o)), R = us(this._d) ? U0(w, this._d) : !1, E = U0(w, r), C = i.events.indexOf(w.toDateString()) !== -1, T = v < o || v >= s + o, P = 1 + (v - o), x = e, A = n, D = i.startRange && U0(i.startRange, w), B = i.endRange && U0(i.endRange, w), F = i.startRange && i.endRange && i.startRange < w && w < i.endRange, W = i.minDate && w < i.minDate || i.maxDate && w > i.maxDate || i.disableWeekends && DMe(w) || i.disableDayFn && i.disableDayFn(w);
        T && (v < o ? (P = f + P, x = c, A = h) : (P = P - s, x = u, A = d));
        let N = {
          day: P,
          month: x,
          year: A,
          hasEvent: C,
          isSelected: R,
          isToday: E,
          isDisabled: W,
          isEmpty: T,
          isStartRange: D,
          isEndRange: B,
          isInRange: F,
          showDaysInNextAndPreviousMonths: i.showDaysInNextAndPreviousMonths,
          enableSelectionDaysInNextAndPreviousMonths: i.enableSelectionDaysInNextAndPreviousMonths
        };
        i.pickWholeWeek && R && (m = !0), l.push(LMe(N)), ++y === 7 && (i.showWeekNumber && l.unshift($Me(this, v - o, e, n, i.firstWeekOfYearMinDays)), a.push(FMe(l, i.isRTL, i.pickWholeWeek, m)), l = [], y = 0, m = !1);
      }
      return jMe(i, a, t);
    },
    isVisible: function() {
      return this._v;
    },
    show: function() {
      this.isVisible() || (this._v = !0, this.draw(), OT(this.el, "is-hidden"), this._o.bound && (Ia(Ys(), "click", this._onClick), this.adjustPosition()), typeof this._o.onOpen == "function" && this._o.onOpen.call(this));
    },
    hide: function() {
      let n = this._v;
      n !== !1 && (this._o.bound && Dl(Ys(), "click", this._onClick), this._o.container || (this.el.style.position = "static", this.el.style.left = "auto", this.el.style.top = "auto"), IT(this.el, "is-hidden"), this._v = !1, n !== void 0 && typeof this._o.onClose == "function" && this._o.onClose.call(this));
    },
    /**
     * GAME OVER
     */
    destroy: function() {
      let n = this._o;
      this.hide(), Dl(this.el, "mousedown", this._onMouseDown, !0), Dl(this.el, "touchend", this._onMouseDown, !0), Dl(this.el, "change", this._onChange), n.keyboardInput && Dl(Ys(), "keydown", this._onKeyChange), n.field && (Dl(n.field, "change", this._onInputChange), n.bound && (Dl(n.trigger, "click", this._onInputClick), Dl(n.trigger, "focus", this._onInputFocus), Dl(n.trigger, "blur", this._onInputBlur))), this.el.parentNode && this.el.parentNode.removeChild(this.el);
    }
  };
  function kT(n, e, t) {
    return (e = zMe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function zMe(n) {
    var e = UMe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function UMe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  const IG = "date", p3 = "dateEditor";
  class OG extends Pf {
    constructor() {
      super(...arguments), kT(this, "defaultDateFormat", "DD/MM/YYYY"), kT(this, "parentDestroyed", !1), kT(this, "$datePicker", null);
    }
    static get EDITOR_TYPE() {
      return IG;
    }
    init() {
      if (typeof he != "function")
        throw new Error("You need to include moment.js to your project.");
      if (typeof nI != "function")
        throw new Error("You need to include Pikaday to your project.");
      super.init(), this.hot.addHook("afterDestroy", () => {
        this.parentDestroyed = !0, this.destroyElements();
      });
    }
    /**
     * Create data picker instance.
     */
    createElements() {
      super.createElements(), this.datePicker = this.hot.rootDocument.createElement("DIV"), this.datePickerStyle = this.datePicker.style, this.datePickerStyle.position = "absolute", this.datePickerStyle.top = 0, this.datePickerStyle.left = 0, this.datePickerStyle.zIndex = 9999, this.datePicker.setAttribute("dir", this.hot.isRtl() ? "rtl" : "ltr"), ue(this.datePicker, "htDatepickerHolder"), this.hot.rootDocument.body.appendChild(this.datePicker), this.eventManager.addEventListener(this.datePicker, "mousedown", (e) => {
        Ue(e.target, "pika-day") && this.hideDatepicker(), e.stopPropagation();
      });
    }
    /**
     * Destroy data picker instance.
     */
    destroyElements() {
      const e = this.datePicker.parentNode;
      this.$datePicker && this.$datePicker.destroy(), e && e.removeChild(this.datePicker);
    }
    /**
     * Prepare editor to appear.
     *
     * @param {number} row The visual row index.
     * @param {number} col The visual column index.
     * @param {number|string} prop The column property (passed when datasource is an array of objects).
     * @param {HTMLTableCellElement} td The rendered cell element.
     * @param {*} value The rendered value.
     * @param {object} cellProperties The cell meta object (see {@link Core#getCellMeta}).
     */
    prepare(e, t, i, r, s, o) {
      super.prepare(e, t, i, r, s, o);
    }
    /**
     * Open editor.
     *
     * @param {Event} [event=null] The event object.
     */
    open() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
      const i = this.hot.getShortcutManager().getContext("editor");
      this.showDatepicker(e), super.open(), i.addShortcuts([{
        keys: [["ArrowLeft"]],
        callback: () => {
          this.$datePicker.adjustDate("subtract", 1);
        }
      }, {
        keys: [["ArrowRight"]],
        callback: () => {
          this.$datePicker.adjustDate("add", 1);
        }
      }, {
        keys: [["ArrowUp"]],
        callback: () => {
          this.$datePicker.adjustDate("subtract", 7);
        }
      }, {
        keys: [["ArrowDown"]],
        callback: () => {
          this.$datePicker.adjustDate("add", 7);
        }
      }], {
        group: p3
      });
    }
    /**
     * Close editor.
     */
    close() {
      var e;
      this._opened = !1, (e = this.$datePicker) !== null && e !== void 0 && e.destroy && this.$datePicker.destroy(), this.hot._registerTimeout(() => {
        const r = this.hot._getEditorManager();
        r.closeEditor(), this.hot.view.render(), r.prepareEditor();
      }), this.hot.getShortcutManager().getContext("editor").removeShortcutsByGroup(p3), super.close();
    }
    /**
     * Finishes editing and start saving or restoring process for editing cell or last selected range.
     *
     * @param {boolean} restoreOriginalValue If true, then closes editor without saving value from the editor into a cell.
     * @param {boolean} ctrlDown If true, then saveValue will save editor's value to each cell in the last selected range.
     */
    finishEditing() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
      super.finishEditing(e, t);
    }
    /**
     * Show data picker.
     *
     * @param {Event} event The event object.
     */
    showDatepicker(e) {
      const t = this.cellProperties.dateFormat || this.defaultDateFormat, i = this.hot.view.isMouseDown(), r = e ? ED(e.keyCode) : !1;
      let s;
      this.datePicker.style.display = "block", this.$datePicker = new nI(this.getDatePickerConfig()), typeof this.$datePicker.useMoment == "function" && this.$datePicker.useMoment(he), this.$datePicker._onInputFocus = function() {
      }, this.originalValue ? (s = this.originalValue, he(s, t, !0).isValid() && this.$datePicker.setMoment(he(s, t), !0), this.getValue() !== this.originalValue && this.setValue(this.originalValue), !r && !i && this.setValue("")) : this.cellProperties.defaultDate ? (s = this.cellProperties.defaultDate, he(s, t, !0).isValid() && this.$datePicker.setMoment(he(s, t), !0), !r && !i && this.setValue("")) : this.$datePicker.gotoToday();
    }
    /**
     * Hide data picker.
     */
    hideDatepicker() {
      this.datePickerStyle.display = "none", this.$datePicker.hide();
    }
    /**
     * Get date picker options.
     *
     * @returns {object}
     */
    getDatePickerConfig() {
      const e = this.TEXTAREA, t = {};
      this.cellProperties && this.cellProperties.datePickerConfig && uy(t, this.cellProperties.datePickerConfig);
      const i = t.onSelect, r = t.onClose;
      return t.field = e, t.trigger = e, t.container = this.datePicker, t.bound = !1, t.keyboardInput = !1, t.format = t.format || this.defaultDateFormat, t.reposition = t.reposition || !1, t.isRTL = !1, t.onSelect = (s) => {
        let o = s;
        isNaN(o.getTime()) || (o = he(o).format(this.cellProperties.dateFormat || this.defaultDateFormat)), this.setValue(o), i && i();
      }, t.onClose = () => {
        this.parentDestroyed || this.finishEditing(!1), r && r();
      }, t;
    }
    /**
     * Refreshes datepicker's size and position. The method is called internally by Handsontable.
     *
     * @private
     * @param {boolean} force Indicates if the refreshing editor dimensions should be triggered.
     */
    refreshDimensions(e) {
      var t;
      if (super.refreshDimensions(e), this.state !== Kn.EDITING)
        return;
      if (this.TD = this.getEditedCell(), !this.TD) {
        this.hideDatepicker();
        return;
      }
      const {
        rowIndexMapper: i,
        columnIndexMapper: r
      } = this.hot, {
        wtOverlays: s
      } = this.hot.view._wt, {
        wtTable: o
      } = (t = s.getParentOverlay(this.TD)) !== null && t !== void 0 ? t : this.hot.view._wt, a = i.getVisualFromRenderableIndex(o.getFirstPartiallyVisibleRow()), l = i.getVisualFromRenderableIndex(o.getLastPartiallyVisibleRow()), c = r.getVisualFromRenderableIndex(o.getFirstPartiallyVisibleColumn()), u = r.getVisualFromRenderableIndex(o.getLastPartiallyVisibleColumn());
      if (this.row >= a && this.row <= l && this.col >= c && this.col <= u) {
        const h = this.TD.getBoundingClientRect();
        this.datePickerStyle.top = `${this.hot.rootWindow.pageYOffset + h.top + ti(this.TD)}px`;
        let d = this.hot.rootWindow.pageXOffset;
        this.hot.isRtl() ? d += h.right - fn(this.datePicker) : d += h.left, this.datePickerStyle.left = `${d}px`;
      } else
        this.hideDatepicker();
    }
  }
  const GMe = "dropdown";
  class xL extends RL {
    static get EDITOR_TYPE() {
      return GMe;
    }
    /**
     * @param {number} row The visual row index.
     * @param {number} col The visual column index.
     * @param {number|string} prop The column property (passed when datasource is an array of objects).
     * @param {HTMLTableCellElement} td The rendered cell element.
     * @param {*} value The rendered value.
     * @param {object} cellProperties The cell meta object (see {@link Core#getCellMeta}).
     */
    prepare(e, t, i, r, s, o) {
      super.prepare(e, t, i, r, s, o), this.cellProperties.filter = !1, this.cellProperties.strict = !0;
    }
  }
  Ie.getSingleton().add("beforeValidate", function(n, e, t) {
    const i = this.propToCol(t);
    if (Number.isInteger(i)) {
      const r = this.getCellMeta(e, i);
      r.editor === xL && r.strict === void 0 && (r.filter = !1, r.strict = !0);
    }
  });
  const YMe = "numeric";
  class kG extends Pf {
    static get EDITOR_TYPE() {
      return YMe;
    }
  }
  const KMe = "password";
  class DG extends Pf {
    static get EDITOR_TYPE() {
      return KMe;
    }
    createElements() {
      super.createElements(), this.TEXTAREA = this.hot.rootDocument.createElement("input"), this.TEXTAREA.setAttribute("type", "password"), this.TEXTAREA.setAttribute("data-hot-input", ""), this.TEXTAREA.className = "handsontableInput", this.textareaStyle = this.TEXTAREA.style, this.textareaStyle.width = 0, this.textareaStyle.height = 0, ra(this.TEXTAREA_PARENT), this.TEXTAREA_PARENT.appendChild(this.TEXTAREA);
    }
  }
  const DT = "ht_editor_visible", m3 = "selectEditor", qMe = "select";
  class NG extends Jp {
    static get EDITOR_TYPE() {
      return qMe;
    }
    /**
     * Initializes editor instance, DOM Element and mount hooks.
     */
    init() {
      this.select = this.hot.rootDocument.createElement("select"), this.select.setAttribute("data-hot-input", "true"), this.select.style.display = "none", ue(this.select, "htSelectEditor"), this.hot.rootElement.appendChild(this.select), this.registerHooks();
    }
    /**
     * Returns select's value.
     *
     * @returns {*}
     */
    getValue() {
      return this.select.value;
    }
    /**
     * Sets value in the select element.
     *
     * @param {*} value A new select's value.
     */
    setValue(e) {
      this.select.value = e;
    }
    /**
     * Opens the editor and adjust its size.
     */
    open() {
      this._opened = !0, this.refreshDimensions(), this.select.style.display = "", this.hot.getShortcutManager().setActiveContextName("editor"), this.registerShortcuts();
    }
    /**
     * Closes the editor.
     */
    close() {
      this._opened = !1, this.select.style.display = "none", Ue(this.select, DT) && Ze(this.select, DT), this.unregisterShortcuts(), this.clearHooks();
    }
    /**
     * Sets focus state on the select element.
     */
    focus() {
      this.select.focus();
    }
    /**
     * Binds hooks to refresh editor's size after scrolling of the viewport or resizing of columns/rows.
     *
     * @private
     */
    registerHooks() {
      this.addHook("afterScrollHorizontally", () => this.refreshDimensions()), this.addHook("afterScrollVertically", () => this.refreshDimensions()), this.addHook("afterColumnResize", () => this.refreshDimensions()), this.addHook("afterRowResize", () => this.refreshDimensions());
    }
    /**
     * Prepares editor's meta data and a list of available options.
     *
     * @param {number} row The visual row index.
     * @param {number} col The visual column index.
     * @param {number|string} prop The column property (passed when datasource is an array of objects).
     * @param {HTMLTableCellElement} td The rendered cell element.
     * @param {*} value The rendered value.
     * @param {object} cellProperties The cell meta object (see {@link Core#getCellMeta}).
     */
    prepare(e, t, i, r, s, o) {
      super.prepare(e, t, i, r, s, o);
      const a = this.cellProperties.selectOptions;
      let l;
      typeof a == "function" ? l = this.prepareOptions(a(this.row, this.col, this.prop)) : l = this.prepareOptions(a), ra(this.select), lt(l, (c, u) => {
        const h = this.hot.rootDocument.createElement("OPTION");
        h.value = u, Mf(h, c), this.select.appendChild(h);
      });
    }
    /**
     * Creates consistent list of available options.
     *
     * @private
     * @param {Array|object} optionsToPrepare The list of the values to render in the select eleemnt.
     * @returns {object}
     */
    prepareOptions(e) {
      let t = {};
      if (Array.isArray(e))
        for (let i = 0, r = e.length; i < r; i++)
          t[e[i]] = e[i];
      else typeof e == "object" && (t = e);
      return t;
    }
    /**
     * Refreshes editor's value using source data.
     *
     * @private
     */
    refreshValue() {
      const e = this.hot.getSourceDataAtCell(this.row, this.prop);
      this.originalValue = e, this.setValue(e), this.refreshDimensions();
    }
    /**
     * Refreshes editor's size and position.
     *
     * @private
     */
    refreshDimensions() {
      if (this.state !== Kn.EDITING)
        return;
      if (this.TD = this.getEditedCell(), !this.TD) {
        this.close();
        return;
      }
      const {
        top: e,
        start: t,
        width: i,
        height: r
      } = this.getEditedCellRect(), s = this.select.style;
      s.height = `${r}px`, s.width = `${i}px`, s.top = `${e}px`, s[this.hot.isRtl() ? "right" : "left"] = `${t}px`, s.margin = "0px", ue(this.select, DT);
    }
    /**
     * Register shortcuts responsible for handling editor.
     *
     * @private
     */
    registerShortcuts() {
      const t = this.hot.getShortcutManager().getContext("editor"), i = {
        group: m3
      };
      this.isInFullEditMode() && t.addShortcuts([{
        keys: [["ArrowUp"]],
        callback: () => {
          const r = this.select.selectedIndex - 1;
          r >= 0 && (this.select[r].selected = !0);
        }
      }, {
        keys: [["ArrowDown"]],
        callback: () => {
          const r = this.select.selectedIndex + 1;
          r <= this.select.length - 1 && (this.select[r].selected = !0);
        }
      }], i);
    }
    /**
     * Unregister shortcuts responsible for handling editor.
     *
     * @private
     */
    unregisterShortcuts() {
      this.hot.getShortcutManager().getContext("editor").removeShortcutsByGroup(m3);
    }
  }
  const XMe = "time";
  class LG extends Pf {
    static get EDITOR_TYPE() {
      return XMe;
    }
    /**
     * Prepares editor's meta data.
     *
     * @param {number} row The visual row index.
     * @param {number} col The visual column index.
     * @param {number|string} prop The column property (passed when datasource is an array of objects).
     * @param {HTMLTableCellElement} td The rendered cell element.
     * @param {*} value The rendered value.
     * @param {object} cellProperties The cell meta object (see {@link Core#getCellMeta}).
     */
    prepare(e, t, i, r, s, o) {
      super.prepare(e, t, i, r, s, o), this.TEXTAREA.dir = "ltr";
    }
  }
  function ZMe() {
    Gr(Jp), Gr(RL), Gr(PG), Gr(OG), Gr(xL), Gr(_L), Gr(kG), Gr(DG), Gr(NG), Gr(Pf), Gr(LG);
  }
  const QMe = "html";
  function TL(n, e, t, i, r, s, o) {
    my.apply(this, [n, e, t, i, r, s, o]), Mf(e, s ?? "", !1);
  }
  TL.RENDERER_TYPE = QMe;
  const JMe = "autocomplete";
  function em(n, e, t, i, r, s, o) {
    const {
      rootDocument: a
    } = n, l = o.allowHtml ? TL : Wc, c = a.createElement("DIV"), u = n.getSettings().ariaTags;
    if (c.className = "htAutocompleteArrow", u && c.setAttribute(...xf()), c.appendChild(a.createTextNode("▼")), l.apply(this, [n, e, t, i, r, s, o]), e.firstChild || e.appendChild(a.createTextNode(" ")), e.insertBefore(c, e.firstChild), ue(e, "htAutocomplete"), !n.acArrowListener) {
      const h = new lo(n);
      n.acArrowListener = function(d) {
        Ue(d.target, "htAutocompleteArrow") && n.view._wt.getSetting("onCellDblClick", null, n._createCellCoords(t, i), e);
      }, h.addEventListener(n.rootElement, "mousedown", n.acArrowListener), n.addHookOnce("afterDestroy", () => {
        h.destroy();
      });
    }
  }
  em.RENDERER_TYPE = JMe;
  const eAe = "dropdown";
  function ML(n, e, t, i, r, s, o) {
    em.apply(this, [n, e, t, i, r, s, o]);
  }
  ML.RENDERER_TYPE = eAe;
  const b3 = /* @__PURE__ */ new WeakMap(), v3 = /* @__PURE__ */ new WeakMap(), tAe = "htBadValue", Rp = "data-row", Ep = "data-col", nAe = "checkboxRenderer", HG = "checkbox";
  Ie.getSingleton().add("modifyAutoColumnSizeSeed", function(n, e, t) {
    const {
      label: i,
      type: r,
      row: s,
      column: o,
      prop: a
    } = e;
    if (r === HG) {
      if (i) {
        const {
          value: l,
          property: c
        } = i;
        let u = t;
        if (l)
          u = typeof l == "function" ? l(s, o, a, t) : l;
        else if (c) {
          const h = this.getDataAtRowProp(s, c);
          u = h !== null ? h : t;
        }
        n = u;
      }
      return n;
    }
  });
  function AL(n, e, t, i, r, s, o) {
    const {
      rootDocument: a
    } = n, l = n.getSettings().ariaTags;
    my.apply(this, [n, e, t, i, r, s, o]), iAe(n);
    let c = rAe(a);
    const u = o.label;
    let h = !1;
    if (typeof o.checkedTemplate > "u" && (o.checkedTemplate = !0), typeof o.uncheckedTemplate > "u" && (o.uncheckedTemplate = !1), ra(e), s === o.checkedTemplate || Vn(s).toLocaleLowerCase(o.locale) === Vn(o.checkedTemplate).toLocaleLowerCase(o.locale) ? c.checked = !0 : s === o.uncheckedTemplate || Vn(s).toLocaleLowerCase(o.locale) === Vn(o.uncheckedTemplate).toLocaleLowerCase(o.locale) ? c.checked = !1 : Wn(s) ? ue(c, "noValue") : (c.style.display = "none", ue(c, tAe), h = !0), ze(c, [[Rp, t], [Ep, i]]), l && ze(c, [A_(c.checked ? n.getTranslatedPhrase(vL) : n.getTranslatedPhrase(wL)), B7(c.checked), C0e()]), !h && u) {
      let p = "";
      if (u.value)
        p = typeof u.value == "function" ? u.value.call(this, t, i, r, s) : u.value;
      else if (u.property) {
        const v = n.getDataAtRowProp(t, u.property);
        p = v !== null ? v : "";
      }
      const m = sAe(a, p, u.separated !== !0);
      u.position === "before" ? u.separated ? (e.appendChild(m), e.appendChild(c)) : (m.appendChild(c), c = m) : (!u.position || u.position === "after") && (u.separated ? (e.appendChild(c), e.appendChild(m)) : (m.insertBefore(c, m.firstChild), c = m));
    }
    (!u || u && !u.separated) && e.appendChild(c), h && e.appendChild(a.createTextNode("#bad-value#")), b3.has(n) || (b3.set(n, !0), d());
    function d() {
      const m = n.getShortcutManager().getContext("grid"), v = {
        group: nAe,
        relativeToGroup: hh,
        position: "before"
      };
      m.addShortcuts([{
        keys: [["space"]],
        callback: () => (f(), !g()),
        runOnlyIf: () => {
          var y;
          return (y = n.getSelectedRangeLast()) === null || y === void 0 ? void 0 : y.highlight.isCell();
        }
      }, {
        keys: [["enter"]],
        callback: () => (f(), !g()),
        runOnlyIf: () => {
          const y = n.getSelectedRangeLast();
          return n.getSettings().enterBeginsEditing && (y == null ? void 0 : y.isSingle()) && y.highlight.isCell();
        }
      }, {
        keys: [["delete"], ["backspace"]],
        callback: () => (f(!0), !g()),
        runOnlyIf: () => {
          var y;
          return (y = n.getSelectedRangeLast()) === null || y === void 0 ? void 0 : y.highlight.isCell();
        }
      }], v);
    }
    function f() {
      let p = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
      const m = n.getSelectedRange(), v = [], y = /* @__PURE__ */ new Map();
      let w = [], R = 0;
      if (m) {
        for (let E = 0; E < m.length; E++) {
          const {
            row: C,
            col: T
          } = m[E].getTopStartCorner(), {
            row: P,
            col: x
          } = m[E].getBottomEndCorner();
          for (let A = C; A <= P; A += 1)
            for (let D = T; D <= x; D += 1) {
              const B = n.getCellMeta(A, D), F = {
                checkedTemplate: B.checkedTemplate,
                uncheckedTemplate: B.uncheckedTemplate
              };
              if (B.type !== "checkbox") {
                p === !0 && !B.readOnly && (y.has(v.length) ? y.set(v.length, [...y.get(v.length), [A, D, null]]) : y.set(v.length, [[A, D, null]]));
                continue;
              }
              if (B.readOnly === !0)
                continue;
              typeof B.checkedTemplate > "u" && (B.checkedTemplate = !0), typeof B.uncheckedTemplate > "u" && (B.uncheckedTemplate = !1);
              const W = n.getDataAtCell(A, D);
              p === !1 ? [B.checkedTemplate, B.checkedTemplate.toString()].includes(W) ? w.push([A, D, B.uncheckedTemplate, F]) : [B.uncheckedTemplate, B.uncheckedTemplate.toString(), null, void 0].includes(W) && w.push([A, D, B.checkedTemplate, F]) : w.push([A, D, B.uncheckedTemplate, F]), R += 1;
            }
          v.push(R), R = 0;
        }
        w.every((E) => {
          let [, , C] = E;
          return C === w[0][2];
        }) ? w = w.map((E) => {
          let [C, T, P] = E;
          return [C, T, P];
        }) : w = w.map((E) => {
          let [C, T, , P] = E;
          return [C, T, P.checkedTemplate];
        }), w.length > 0 && v.forEach((E, C) => {
          let T = w.splice(0, E);
          y.size && y.has(C) && (T = [...T, ...y.get(C)]), n.setDataAtCell(T);
        });
      }
    }
    function g() {
      const p = n.getSelectedRange();
      if (p) {
        for (let m = 0; m < p.length; m++) {
          const v = p[m].getTopStartCorner(), y = p[m].getBottomEndCorner();
          for (let w = v.row; w <= y.row; w++)
            for (let R = v.col; R <= y.col; R++) {
              const E = n.getCellMeta(w, R), C = n.getCell(w, R);
              if (C == null)
                return !0;
              if (C.querySelectorAll("input[type=checkbox]").length > 0 && !E.readOnly)
                return !0;
            }
        }
        return !1;
      }
    }
  }
  AL.RENDERER_TYPE = HG;
  function iAe(n) {
    let e = v3.get(n);
    if (!e) {
      const {
        rootElement: t
      } = n;
      e = new lo(n), e.addEventListener(t, "click", (i) => aAe(i, n)), e.addEventListener(t, "mouseup", (i) => oAe(i, n)), e.addEventListener(t, "change", (i) => lAe(i, n)), v3.set(n, e);
    }
    return e;
  }
  function rAe(n) {
    const e = n.createElement("input");
    return e.className = "htCheckboxRendererInput", e.type = "checkbox", e.setAttribute("tabindex", "-1"), e.cloneNode(!1);
  }
  function sAe(n, e, t) {
    const i = n.createElement("label");
    return i.className = `htCheckboxRendererLabel ${t ? "fullWidth" : ""}`, i.appendChild(n.createTextNode(e)), i.cloneNode(!0);
  }
  function oAe(n, e) {
    const {
      target: t
    } = n;
    PL(t) && (!t.hasAttribute(Rp) || !t.hasAttribute(Ep) || setTimeout(e.listen, 10));
  }
  function aAe(n, e) {
    const {
      target: t
    } = n;
    if (!PL(t) || !t.hasAttribute(Rp) || !t.hasAttribute(Ep))
      return;
    const i = parseInt(t.getAttribute(Rp), 10), r = parseInt(t.getAttribute(Ep), 10);
    e.getCellMeta(i, r).readOnly && n.preventDefault();
  }
  function lAe(n, e) {
    const {
      target: t
    } = n;
    if (!PL(t) || !t.hasAttribute(Rp) || !t.hasAttribute(Ep))
      return;
    const i = parseInt(t.getAttribute(Rp), 10), r = parseInt(t.getAttribute(Ep), 10), s = e.getCellMeta(i, r);
    if (!s.readOnly) {
      let o = null;
      n.target.checked ? o = s.uncheckedTemplate === void 0 ? !0 : s.checkedTemplate : o = s.uncheckedTemplate === void 0 ? !1 : s.uncheckedTemplate, e.setDataAtCell(i, r, o);
    }
  }
  function PL(n) {
    return n.tagName === "INPUT" && n.getAttribute("type") === "checkbox";
  }
  const cAe = "handsontable";
  function IL(n, e, t, i, r, s, o) {
    em.apply(this, [n, e, t, i, r, s, o]);
  }
  IL.RENDERER_TYPE = cAe;
  function G0(n) {
    throw new Error('Could not dynamically require "' + n + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
  }
  var $G = { exports: {} };
  (function(n, e) {
    (function(t) {
      n.exports = t();
    })(function() {
      return function t(i, r, s) {
        function o(c, u) {
          if (!r[c]) {
            if (!i[c]) {
              var h = typeof G0 == "function" && G0;
              if (!u && h) return h(c, !0);
              if (a) return a(c, !0);
              var d = new Error("Cannot find module '" + c + "'");
              throw d.code = "MODULE_NOT_FOUND", d;
            }
            var f = r[c] = {
              exports: {}
            };
            i[c][0].call(f.exports, function(g) {
              return o(i[c][1][g] || g);
            }, f, f.exports, t, i, r, s);
          }
          return r[c].exports;
        }
        for (var a = typeof G0 == "function" && G0, l = 0; l < s.length; l++) o(s[l]);
        return o;
      }({
        1: [function(t, i, r) {
          (function(s) {
            var o, a = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, l = Math.ceil, c = Math.floor, u = "[BigNumber Error] ", h = u + "Number primitive has more than 15 significant digits: ", d = 1e14, f = 14, g = 9007199254740991, p = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13], m = 1e7, v = 1e9;
            function y(x) {
              var A = 0 | x;
              return 0 < x || x === A ? A : A - 1;
            }
            function w(x) {
              for (var A, D, B = 1, F = x.length, W = x[0] + ""; B < F; ) {
                for (A = x[B++] + "", D = f - A.length; D--; A = "0" + A) ;
                W += A;
              }
              for (F = W.length; W.charCodeAt(--F) === 48; ) ;
              return W.slice(0, F + 1 || 1);
            }
            function R(x, A) {
              var D, B, F = x.c, W = A.c, N = x.s, O = A.s, V = x.e, G = A.e;
              if (!N || !O) return null;
              if (D = F && !F[0], B = W && !W[0], D || B) return D ? B ? 0 : -O : N;
              if (N != O) return N;
              if (D = N < 0, B = V == G, !F || !W) return B ? 0 : !F ^ D ? 1 : -1;
              if (!B) return G < V ^ D ? 1 : -1;
              for (O = (V = F.length) < (G = W.length) ? V : G, N = 0; N < O; N++) if (F[N] != W[N]) return F[N] > W[N] ^ D ? 1 : -1;
              return V == G ? 0 : G < V ^ D ? 1 : -1;
            }
            function E(x, A, D, B) {
              if (x < A || D < x || x !== (x < 0 ? l(x) : c(x))) throw Error(u + (B || "Argument") + (typeof x == "number" ? x < A || D < x ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(x));
            }
            function C(x) {
              var A = x.c.length - 1;
              return y(x.e / f) == A && x.c[A] % 2 != 0;
            }
            function T(x, A) {
              return (1 < x.length ? x.charAt(0) + "." + x.slice(1) : x) + (A < 0 ? "e" : "e+") + A;
            }
            function P(x, A, D) {
              var B, F;
              if (A < 0) {
                for (F = D + "."; ++A; F += D) ;
                x = F + x;
              } else if (++A > (B = x.length)) {
                for (F = D, A -= B; --A; F += D) ;
                x += F;
              } else A < B && (x = x.slice(0, A) + "." + x.slice(A));
              return x;
            }
            (o = function x(A) {
              var D, B, F, W, N, O, V, G, U, se, b = Z.prototype = {
                constructor: Z,
                toString: null,
                valueOf: null
              }, S = new Z(1), _ = 20, I = 4, H = -7, M = 21, $ = -1e7, Y = 1e7, K = !1, ce = 1, le = 0, _e = {
                prefix: "",
                groupSize: 3,
                secondaryGroupSize: 0,
                groupSeparator: ",",
                decimalSeparator: ".",
                fractionGroupSize: 0,
                fractionGroupSeparator: " ",
                suffix: ""
              }, be = "0123456789abcdefghijklmnopqrstuvwxyz";
              function Z(k, L) {
                var j, te, q, re, J, X, ne, ie, oe = this;
                if (!(oe instanceof Z)) return new Z(k, L);
                if (L == null) {
                  if (k instanceof Z) return oe.s = k.s, oe.e = k.e, void (oe.c = (k = k.c) ? k.slice() : k);
                  if ((X = typeof k == "number") && 0 * k == 0) {
                    if (oe.s = 1 / k < 0 ? (k = -k, -1) : 1, k === ~~k) {
                      for (re = 0, J = k; 10 <= J; J /= 10, re++) ;
                      return oe.e = re, void (oe.c = [k]);
                    }
                    ie = String(k);
                  } else {
                    if (ie = String(k), !a.test(ie)) return F(oe, ie, X);
                    oe.s = ie.charCodeAt(0) == 45 ? (ie = ie.slice(1), -1) : 1;
                  }
                  -1 < (re = ie.indexOf(".")) && (ie = ie.replace(".", "")), 0 < (J = ie.search(/e/i)) ? (re < 0 && (re = J), re += +ie.slice(J + 1), ie = ie.substring(0, J)) : re < 0 && (re = ie.length);
                } else {
                  if (E(L, 2, be.length, "Base"), ie = String(k), L == 10) return fe(oe = new Z(k instanceof Z ? k : ie), _ + oe.e + 1, I);
                  if (X = typeof k == "number") {
                    if (0 * k != 0) return F(oe, ie, X, L);
                    if (oe.s = 1 / k < 0 ? (ie = ie.slice(1), -1) : 1, Z.DEBUG && 15 < ie.replace(/^0\.0*|\./, "").length) throw Error(h + k);
                    X = !1;
                  } else oe.s = ie.charCodeAt(0) === 45 ? (ie = ie.slice(1), -1) : 1;
                  for (j = be.slice(0, L), re = J = 0, ne = ie.length; J < ne; J++) if (j.indexOf(te = ie.charAt(J)) < 0) {
                    if (te == ".") {
                      if (re < J) {
                        re = ne;
                        continue;
                      }
                    } else if (!q && (ie == ie.toUpperCase() && (ie = ie.toLowerCase()) || ie == ie.toLowerCase() && (ie = ie.toUpperCase()))) {
                      q = !0, J = -1, re = 0;
                      continue;
                    }
                    return F(oe, String(k), X, L);
                  }
                  -1 < (re = (ie = B(ie, L, 10, oe.s)).indexOf(".")) ? ie = ie.replace(".", "") : re = ie.length;
                }
                for (J = 0; ie.charCodeAt(J) === 48; J++) ;
                for (ne = ie.length; ie.charCodeAt(--ne) === 48; ) ;
                if (ie = ie.slice(J, ++ne)) {
                  if (ne -= J, X && Z.DEBUG && 15 < ne && (g < k || k !== c(k))) throw Error(h + oe.s * k);
                  if (Y < (re = re - J - 1)) oe.c = oe.e = null;
                  else if (re < $) oe.c = [oe.e = 0];
                  else {
                    if (oe.e = re, oe.c = [], J = (re + 1) % f, re < 0 && (J += f), J < ne) {
                      for (J && oe.c.push(+ie.slice(0, J)), ne -= f; J < ne; ) oe.c.push(+ie.slice(J, J += f));
                      ie = ie.slice(J), J = f - ie.length;
                    } else J -= ne;
                    for (; J--; ie += "0") ;
                    oe.c.push(+ie);
                  }
                } else oe.c = [oe.e = 0];
              }
              function ee(k, L, j, te) {
                var q, re, J, X, ne;
                if (j == null ? j = I : E(j, 0, 8), !k.c) return k.toString();
                if (q = k.c[0], J = k.e, L == null) ne = w(k.c), ne = te == 1 || te == 2 && (J <= H || M <= J) ? T(ne, J) : P(ne, J, "0");
                else if (re = (k = fe(new Z(k), L, j)).e, X = (ne = w(k.c)).length, te == 1 || te == 2 && (L <= re || re <= H)) {
                  for (; X < L; ne += "0", X++) ;
                  ne = T(ne, re);
                } else if (L -= J, ne = P(ne, re, "0"), X < re + 1) {
                  if (0 < --L) for (ne += "."; L--; ne += "0") ;
                } else if (0 < (L += re - X)) for (re + 1 == X && (ne += "."); L--; ne += "0") ;
                return k.s < 0 && q ? "-" + ne : ne;
              }
              function ae(k, L) {
                for (var j, te = 1, q = new Z(k[0]); te < k.length; te++) {
                  if (!(j = new Z(k[te])).s) {
                    q = j;
                    break;
                  }
                  L.call(q, j) && (q = j);
                }
                return q;
              }
              function Ne(k, L, j) {
                for (var te = 1, q = L.length; !L[--q]; L.pop()) ;
                for (q = L[0]; 10 <= q; q /= 10, te++) ;
                return (j = te + j * f - 1) > Y ? k.c = k.e = null : k.c = j < $ ? [k.e = 0] : (k.e = j, L), k;
              }
              function fe(k, L, j, te) {
                var q, re, J, X, ne, ie, oe, we = k.c, Ae = p;
                if (we) {
                  e: {
                    for (q = 1, X = we[0]; 10 <= X; X /= 10, q++) ;
                    if ((re = L - q) < 0) re += f, J = L, oe = (ne = we[ie = 0]) / Ae[q - J - 1] % 10 | 0;
                    else if ((ie = l((re + 1) / f)) >= we.length) {
                      if (!te) break e;
                      for (; we.length <= ie; we.push(0)) ;
                      ne = oe = 0, J = (re %= f) - f + (q = 1);
                    } else {
                      for (ne = X = we[ie], q = 1; 10 <= X; X /= 10, q++) ;
                      oe = (J = (re %= f) - f + q) < 0 ? 0 : ne / Ae[q - J - 1] % 10 | 0;
                    }
                    if (te = te || L < 0 || we[ie + 1] != null || (J < 0 ? ne : ne % Ae[q - J - 1]), te = j < 4 ? (oe || te) && (j == 0 || j == (k.s < 0 ? 3 : 2)) : 5 < oe || oe == 5 && (j == 4 || te || j == 6 && (0 < re ? 0 < J ? ne / Ae[q - J] : 0 : we[ie - 1]) % 10 & 1 || j == (k.s < 0 ? 8 : 7)), L < 1 || !we[0]) return we.length = 0, te ? (L -= k.e + 1, we[0] = Ae[(f - L % f) % f], k.e = -L || 0) : we[0] = k.e = 0, k;
                    if (re == 0 ? (we.length = ie, X = 1, ie--) : (we.length = ie + 1, X = Ae[f - re], we[ie] = 0 < J ? c(ne / Ae[q - J] % Ae[J]) * X : 0), te) for (; ; ) {
                      if (ie == 0) {
                        for (re = 1, J = we[0]; 10 <= J; J /= 10, re++) ;
                        for (J = we[0] += X, X = 1; 10 <= J; J /= 10, X++) ;
                        re != X && (k.e++, we[0] == d && (we[0] = 1));
                        break;
                      }
                      if (we[ie] += X, we[ie] != d) break;
                      we[ie--] = 0, X = 1;
                    }
                    for (re = we.length; we[--re] === 0; we.pop()) ;
                  }
                  k.e > Y ? k.c = k.e = null : k.e < $ && (k.c = [k.e = 0]);
                }
                return k;
              }
              function ye(k) {
                var L, j = k.e;
                return j === null ? k.toString() : (L = w(k.c), L = j <= H || M <= j ? T(L, j) : P(L, j, "0"), k.s < 0 ? "-" + L : L);
              }
              return Z.clone = x, Z.ROUND_UP = 0, Z.ROUND_DOWN = 1, Z.ROUND_CEIL = 2, Z.ROUND_FLOOR = 3, Z.ROUND_HALF_UP = 4, Z.ROUND_HALF_DOWN = 5, Z.ROUND_HALF_EVEN = 6, Z.ROUND_HALF_CEIL = 7, Z.ROUND_HALF_FLOOR = 8, Z.EUCLID = 9, Z.config = Z.set = function(k) {
                var L, j;
                if (k != null) {
                  if (typeof k != "object") throw Error(u + "Object expected: " + k);
                  if (k.hasOwnProperty(L = "DECIMAL_PLACES") && (E(j = k[L], 0, v, L), _ = j), k.hasOwnProperty(L = "ROUNDING_MODE") && (E(j = k[L], 0, 8, L), I = j), k.hasOwnProperty(L = "EXPONENTIAL_AT") && ((j = k[L]) && j.pop ? (E(j[0], -v, 0, L), E(j[1], 0, v, L), H = j[0], M = j[1]) : (E(j, -v, v, L), H = -(M = j < 0 ? -j : j))), k.hasOwnProperty(L = "RANGE")) if ((j = k[L]) && j.pop) E(j[0], -v, -1, L), E(j[1], 1, v, L), $ = j[0], Y = j[1];
                  else {
                    if (E(j, -v, v, L), !j) throw Error(u + L + " cannot be zero: " + j);
                    $ = -(Y = j < 0 ? -j : j);
                  }
                  if (k.hasOwnProperty(L = "CRYPTO")) {
                    if ((j = k[L]) !== !!j) throw Error(u + L + " not true or false: " + j);
                    if (j) {
                      if (typeof crypto > "u" || !crypto || !crypto.getRandomValues && !crypto.randomBytes) throw K = !j, Error(u + "crypto unavailable");
                      K = j;
                    } else K = j;
                  }
                  if (k.hasOwnProperty(L = "MODULO_MODE") && (E(j = k[L], 0, 9, L), ce = j), k.hasOwnProperty(L = "POW_PRECISION") && (E(j = k[L], 0, v, L), le = j), k.hasOwnProperty(L = "FORMAT")) {
                    if (typeof (j = k[L]) != "object") throw Error(u + L + " not an object: " + j);
                    _e = j;
                  }
                  if (k.hasOwnProperty(L = "ALPHABET")) {
                    if (typeof (j = k[L]) != "string" || /^.$|[+-.\s]|(.).*\1/.test(j)) throw Error(u + L + " invalid: " + j);
                    be = j;
                  }
                }
                return {
                  DECIMAL_PLACES: _,
                  ROUNDING_MODE: I,
                  EXPONENTIAL_AT: [H, M],
                  RANGE: [$, Y],
                  CRYPTO: K,
                  MODULO_MODE: ce,
                  POW_PRECISION: le,
                  FORMAT: _e,
                  ALPHABET: be
                };
              }, Z.isBigNumber = function(k) {
                return k instanceof Z || k && k._isBigNumber === !0 || !1;
              }, Z.maximum = Z.max = function() {
                return ae(arguments, b.lt);
              }, Z.minimum = Z.min = function() {
                return ae(arguments, b.gt);
              }, Z.random = (W = 9007199254740992, N = Math.random() * W & 2097151 ? function() {
                return c(Math.random() * W);
              } : function() {
                return 8388608 * (1073741824 * Math.random() | 0) + (8388608 * Math.random() | 0);
              }, function(k) {
                var L, j, te, q, re, J = 0, X = [], ne = new Z(S);
                if (k == null ? k = _ : E(k, 0, v), q = l(k / f), K) if (crypto.getRandomValues) {
                  for (L = crypto.getRandomValues(new Uint32Array(q *= 2)); J < q; ) 9e15 <= (re = 131072 * L[J] + (L[J + 1] >>> 11)) ? (j = crypto.getRandomValues(new Uint32Array(2)), L[J] = j[0], L[J + 1] = j[1]) : (X.push(re % 1e14), J += 2);
                  J = q / 2;
                } else {
                  if (!crypto.randomBytes) throw K = !1, Error(u + "crypto unavailable");
                  for (L = crypto.randomBytes(q *= 7); J < q; ) 9e15 <= (re = 281474976710656 * (31 & L[J]) + 1099511627776 * L[J + 1] + 4294967296 * L[J + 2] + 16777216 * L[J + 3] + (L[J + 4] << 16) + (L[J + 5] << 8) + L[J + 6]) ? crypto.randomBytes(7).copy(L, J) : (X.push(re % 1e14), J += 7);
                  J = q / 7;
                }
                if (!K) for (; J < q; ) (re = N()) < 9e15 && (X[J++] = re % 1e14);
                for (q = X[--J], k %= f, q && k && (re = p[f - k], X[J] = c(q / re) * re); X[J] === 0; X.pop(), J--) ;
                if (J < 0) X = [te = 0];
                else {
                  for (te = -1; X[0] === 0; X.splice(0, 1), te -= f) ;
                  for (J = 1, re = X[0]; 10 <= re; re /= 10, J++) ;
                  J < f && (te -= f - J);
                }
                return ne.e = te, ne.c = X, ne;
              }), Z.sum = function() {
                for (var k = 1, L = arguments, j = new Z(L[0]); k < L.length; ) j = j.plus(L[k++]);
                return j;
              }, B = /* @__PURE__ */ function() {
                var k = "0123456789";
                function L(j, te, q, re) {
                  for (var J, X, ne = [0], ie = 0, oe = j.length; ie < oe; ) {
                    for (X = ne.length; X--; ne[X] *= te) ;
                    for (ne[0] += re.indexOf(j.charAt(ie++)), J = 0; J < ne.length; J++) ne[J] > q - 1 && (ne[J + 1] == null && (ne[J + 1] = 0), ne[J + 1] += ne[J] / q | 0, ne[J] %= q);
                  }
                  return ne.reverse();
                }
                return function(j, te, q, re, J) {
                  var X, ne, ie, oe, we, Ae, Be, st, St = j.indexOf("."), ht = _, Ke = I;
                  for (0 <= St && (oe = le, le = 0, j = j.replace(".", ""), Ae = (st = new Z(te)).pow(j.length - St), le = oe, st.c = L(P(w(Ae.c), Ae.e, "0"), 10, q, k), st.e = st.c.length), ie = oe = (Be = L(j, te, q, J ? (X = be, k) : (X = k, be))).length; Be[--oe] == 0; Be.pop()) ;
                  if (!Be[0]) return X.charAt(0);
                  if (St < 0 ? --ie : (Ae.c = Be, Ae.e = ie, Ae.s = re, Be = (Ae = D(Ae, st, ht, Ke, q)).c, we = Ae.r, ie = Ae.e), St = Be[ne = ie + ht + 1], oe = q / 2, we = we || ne < 0 || Be[ne + 1] != null, we = Ke < 4 ? (St != null || we) && (Ke == 0 || Ke == (Ae.s < 0 ? 3 : 2)) : oe < St || St == oe && (Ke == 4 || we || Ke == 6 && 1 & Be[ne - 1] || Ke == (Ae.s < 0 ? 8 : 7)), ne < 1 || !Be[0]) j = we ? P(X.charAt(1), -ht, X.charAt(0)) : X.charAt(0);
                  else {
                    if (Be.length = ne, we) for (--q; ++Be[--ne] > q; ) Be[ne] = 0, ne || (++ie, Be = [1].concat(Be));
                    for (oe = Be.length; !Be[--oe]; ) ;
                    for (St = 0, j = ""; St <= oe; j += X.charAt(Be[St++])) ;
                    j = P(j, ie, X.charAt(0));
                  }
                  return j;
                };
              }(), D = /* @__PURE__ */ function() {
                function k(te, q, re) {
                  var J, X, ne, ie, oe = 0, we = te.length, Ae = q % m, Be = q / m | 0;
                  for (te = te.slice(); we--; ) oe = ((X = Ae * (ne = te[we] % m) + (J = Be * ne + (ie = te[we] / m | 0) * Ae) % m * m + oe) / re | 0) + (J / m | 0) + Be * ie, te[we] = X % re;
                  return oe && (te = [oe].concat(te)), te;
                }
                function L(te, q, re, J) {
                  var X, ne;
                  if (re != J) ne = J < re ? 1 : -1;
                  else for (X = ne = 0; X < re; X++) if (te[X] != q[X]) {
                    ne = te[X] > q[X] ? 1 : -1;
                    break;
                  }
                  return ne;
                }
                function j(te, q, re, J) {
                  for (var X = 0; re--; ) te[re] -= X, X = te[re] < q[re] ? 1 : 0, te[re] = X * J + te[re] - q[re];
                  for (; !te[0] && 1 < te.length; te.splice(0, 1)) ;
                }
                return function(te, q, re, J, X) {
                  var ne, ie, oe, we, Ae, Be, st, St, ht, Ke, xt, Dn, Of, yo, um, Ms, xn, mi = te.s == q.s ? 1 : -1, Bi = te.c, wn = q.c;
                  if (!(Bi && Bi[0] && wn && wn[0])) return new Z(te.s && q.s && (Bi ? !wn || Bi[0] != wn[0] : wn) ? Bi && Bi[0] == 0 || !wn ? 0 * mi : mi / 0 : NaN);
                  for (ht = (St = new Z(mi)).c = [], mi = re + (ie = te.e - q.e) + 1, X || (X = d, ie = y(te.e / f) - y(q.e / f), mi = mi / f | 0), oe = 0; wn[oe] == (Bi[oe] || 0); oe++) ;
                  if (wn[oe] > (Bi[oe] || 0) && ie--, mi < 0) ht.push(1), we = !0;
                  else {
                    for (yo = Bi.length, Ms = wn.length, mi += 2, 1 < (Ae = c(X / (wn[oe = 0] + 1))) && (wn = k(wn, Ae, X), Bi = k(Bi, Ae, X), Ms = wn.length, yo = Bi.length), Of = Ms, xt = (Ke = Bi.slice(0, Ms)).length; xt < Ms; Ke[xt++] = 0) ;
                    xn = wn.slice(), xn = [0].concat(xn), um = wn[0], wn[1] >= X / 2 && um++;
                    do {
                      if (Ae = 0, (ne = L(wn, Ke, Ms, xt)) < 0) {
                        if (Dn = Ke[0], Ms != xt && (Dn = Dn * X + (Ke[1] || 0)), 1 < (Ae = c(Dn / um))) for (X <= Ae && (Ae = X - 1), st = (Be = k(wn, Ae, X)).length, xt = Ke.length; L(Be, Ke, st, xt) == 1; ) Ae--, j(Be, Ms < st ? xn : wn, st, X), st = Be.length, ne = 1;
                        else Ae == 0 && (ne = Ae = 1), st = (Be = wn.slice()).length;
                        if (st < xt && (Be = [0].concat(Be)), j(Ke, Be, xt, X), xt = Ke.length, ne == -1) for (; L(wn, Ke, Ms, xt) < 1; ) Ae++, j(Ke, Ms < xt ? xn : wn, xt, X), xt = Ke.length;
                      } else ne === 0 && (Ae++, Ke = [0]);
                      ht[oe++] = Ae, Ke[0] ? Ke[xt++] = Bi[Of] || 0 : (Ke = [Bi[Of]], xt = 1);
                    } while ((Of++ < yo || Ke[0] != null) && mi--);
                    we = Ke[0] != null, ht[0] || ht.splice(0, 1);
                  }
                  if (X == d) {
                    for (oe = 1, mi = ht[0]; 10 <= mi; mi /= 10, oe++) ;
                    fe(St, re + (St.e = oe + ie * f - 1) + 1, J, we);
                  } else St.e = ie, St.r = +we;
                  return St;
                };
              }(), O = /^(-?)0([xbo])(?=\w[\w.]*$)/i, V = /^([^.]+)\.$/, G = /^\.([^.]+)$/, U = /^-?(Infinity|NaN)$/, se = /^\s*\+(?=[\w.])|^\s+|\s+$/g, F = function(k, L, j, te) {
                var q, re = j ? L : L.replace(se, "");
                if (U.test(re)) k.s = isNaN(re) ? null : re < 0 ? -1 : 1, k.c = k.e = null;
                else {
                  if (!j && (re = re.replace(O, function(J, X, ne) {
                    return q = (ne = ne.toLowerCase()) == "x" ? 16 : ne == "b" ? 2 : 8, te && te != q ? J : X;
                  }), te && (q = te, re = re.replace(V, "$1").replace(G, "0.$1")), L != re)) return new Z(re, q);
                  if (Z.DEBUG) throw Error(u + "Not a" + (te ? " base " + te : "") + " number: " + L);
                  k.c = k.e = k.s = null;
                }
              }, b.absoluteValue = b.abs = function() {
                var k = new Z(this);
                return k.s < 0 && (k.s = 1), k;
              }, b.comparedTo = function(k, L) {
                return R(this, new Z(k, L));
              }, b.decimalPlaces = b.dp = function(k, L) {
                var j, te, q;
                if (k != null) return E(k, 0, v), L == null ? L = I : E(L, 0, 8), fe(new Z(this), k + this.e + 1, L);
                if (!(j = this.c)) return null;
                if (te = ((q = j.length - 1) - y(this.e / f)) * f, q = j[q]) for (; q % 10 == 0; q /= 10, te--) ;
                return te < 0 && (te = 0), te;
              }, b.dividedBy = b.div = function(k, L) {
                return D(this, new Z(k, L), _, I);
              }, b.dividedToIntegerBy = b.idiv = function(k, L) {
                return D(this, new Z(k, L), 0, 1);
              }, b.exponentiatedBy = b.pow = function(k, L) {
                var j, te, q, re, J, X, ne, ie, oe = this;
                if ((k = new Z(k)).c && !k.isInteger()) throw Error(u + "Exponent not an integer: " + ye(k));
                if (L != null && (L = new Z(L)), J = 14 < k.e, !oe.c || !oe.c[0] || oe.c[0] == 1 && !oe.e && oe.c.length == 1 || !k.c || !k.c[0]) return ie = new Z(Math.pow(+ye(oe), J ? 2 - C(k) : +ye(k))), L ? ie.mod(L) : ie;
                if (X = k.s < 0, L) {
                  if (L.c ? !L.c[0] : !L.s) return new Z(NaN);
                  (te = !X && oe.isInteger() && L.isInteger()) && (oe = oe.mod(L));
                } else {
                  if (9 < k.e && (0 < oe.e || oe.e < -1 || (oe.e == 0 ? 1 < oe.c[0] || J && 24e7 <= oe.c[1] : oe.c[0] < 8e13 || J && oe.c[0] <= 9999975e7))) return re = oe.s < 0 && C(k) ? -0 : 0, -1 < oe.e && (re = 1 / re), new Z(X ? 1 / re : re);
                  le && (re = l(le / f + 2));
                }
                for (ne = J ? (j = new Z(0.5), X && (k.s = 1), C(k)) : (q = Math.abs(+ye(k))) % 2, ie = new Z(S); ; ) {
                  if (ne) {
                    if (!(ie = ie.times(oe)).c) break;
                    re ? ie.c.length > re && (ie.c.length = re) : te && (ie = ie.mod(L));
                  }
                  if (q) {
                    if ((q = c(q / 2)) === 0) break;
                    ne = q % 2;
                  } else if (fe(k = k.times(j), k.e + 1, 1), 14 < k.e) ne = C(k);
                  else {
                    if ((q = +ye(k)) == 0) break;
                    ne = q % 2;
                  }
                  oe = oe.times(oe), re ? oe.c && oe.c.length > re && (oe.c.length = re) : te && (oe = oe.mod(L));
                }
                return te ? ie : (X && (ie = S.div(ie)), L ? ie.mod(L) : re ? fe(ie, le, I, void 0) : ie);
              }, b.integerValue = function(k) {
                var L = new Z(this);
                return k == null ? k = I : E(k, 0, 8), fe(L, L.e + 1, k);
              }, b.isEqualTo = b.eq = function(k, L) {
                return R(this, new Z(k, L)) === 0;
              }, b.isFinite = function() {
                return !!this.c;
              }, b.isGreaterThan = b.gt = function(k, L) {
                return 0 < R(this, new Z(k, L));
              }, b.isGreaterThanOrEqualTo = b.gte = function(k, L) {
                return (L = R(this, new Z(k, L))) === 1 || L === 0;
              }, b.isInteger = function() {
                return !!this.c && y(this.e / f) > this.c.length - 2;
              }, b.isLessThan = b.lt = function(k, L) {
                return R(this, new Z(k, L)) < 0;
              }, b.isLessThanOrEqualTo = b.lte = function(k, L) {
                return (L = R(this, new Z(k, L))) === -1 || L === 0;
              }, b.isNaN = function() {
                return !this.s;
              }, b.isNegative = function() {
                return this.s < 0;
              }, b.isPositive = function() {
                return 0 < this.s;
              }, b.isZero = function() {
                return !!this.c && this.c[0] == 0;
              }, b.minus = function(k, L) {
                var j, te, q, re, J = this, X = J.s;
                if (L = (k = new Z(k, L)).s, !X || !L) return new Z(NaN);
                if (X != L) return k.s = -L, J.plus(k);
                var ne = J.e / f, ie = k.e / f, oe = J.c, we = k.c;
                if (!ne || !ie) {
                  if (!oe || !we) return oe ? (k.s = -L, k) : new Z(we ? J : NaN);
                  if (!oe[0] || !we[0]) return we[0] ? (k.s = -L, k) : new Z(oe[0] ? J : I == 3 ? -0 : 0);
                }
                if (ne = y(ne), ie = y(ie), oe = oe.slice(), X = ne - ie) {
                  for ((q = (re = X < 0) ? (X = -X, oe) : (ie = ne, we)).reverse(), L = X; L--; q.push(0)) ;
                  q.reverse();
                } else for (te = (re = (X = oe.length) < (L = we.length)) ? X : L, X = L = 0; L < te; L++) if (oe[L] != we[L]) {
                  re = oe[L] < we[L];
                  break;
                }
                if (re && (q = oe, oe = we, we = q, k.s = -k.s), 0 < (L = (te = we.length) - (j = oe.length))) for (; L--; oe[j++] = 0) ;
                for (L = d - 1; X < te; ) {
                  if (oe[--te] < we[te]) {
                    for (j = te; j && !oe[--j]; oe[j] = L) ;
                    --oe[j], oe[te] += d;
                  }
                  oe[te] -= we[te];
                }
                for (; oe[0] == 0; oe.splice(0, 1), --ie) ;
                return oe[0] ? Ne(k, oe, ie) : (k.s = I == 3 ? -1 : 1, k.c = [k.e = 0], k);
              }, b.modulo = b.mod = function(k, L) {
                var j, te, q = this;
                return k = new Z(k, L), !q.c || !k.s || k.c && !k.c[0] ? new Z(NaN) : !k.c || q.c && !q.c[0] ? new Z(q) : (ce == 9 ? (te = k.s, k.s = 1, j = D(q, k, 0, 3), k.s = te, j.s *= te) : j = D(q, k, 0, ce), (k = q.minus(j.times(k))).c[0] || ce != 1 || (k.s = q.s), k);
              }, b.multipliedBy = b.times = function(k, L) {
                var j, te, q, re, J, X, ne, ie, oe, we, Ae, Be, st, St, ht, Ke = this, xt = Ke.c, Dn = (k = new Z(k, L)).c;
                if (!(xt && Dn && xt[0] && Dn[0])) return !Ke.s || !k.s || xt && !xt[0] && !Dn || Dn && !Dn[0] && !xt ? k.c = k.e = k.s = null : (k.s *= Ke.s, xt && Dn ? (k.c = [0], k.e = 0) : k.c = k.e = null), k;
                for (te = y(Ke.e / f) + y(k.e / f), k.s *= Ke.s, (ne = xt.length) < (we = Dn.length) && (st = xt, xt = Dn, Dn = st, q = ne, ne = we, we = q), q = ne + we, st = []; q--; st.push(0)) ;
                for (St = d, ht = m, q = we; 0 <= --q; ) {
                  for (j = 0, Ae = Dn[q] % ht, Be = Dn[q] / ht | 0, re = q + (J = ne); q < re; ) j = ((ie = Ae * (ie = xt[--J] % ht) + (X = Be * ie + (oe = xt[J] / ht | 0) * Ae) % ht * ht + st[re] + j) / St | 0) + (X / ht | 0) + Be * oe, st[re--] = ie % St;
                  st[re] = j;
                }
                return j ? ++te : st.splice(0, 1), Ne(k, st, te);
              }, b.negated = function() {
                var k = new Z(this);
                return k.s = -k.s || null, k;
              }, b.plus = function(k, L) {
                var j, te = this, q = te.s;
                if (L = (k = new Z(k, L)).s, !q || !L) return new Z(NaN);
                if (q != L) return k.s = -L, te.minus(k);
                var re = te.e / f, J = k.e / f, X = te.c, ne = k.c;
                if (!re || !J) {
                  if (!X || !ne) return new Z(q / 0);
                  if (!X[0] || !ne[0]) return ne[0] ? k : new Z(X[0] ? te : 0 * q);
                }
                if (re = y(re), J = y(J), X = X.slice(), q = re - J) {
                  for ((j = 0 < q ? (J = re, ne) : (q = -q, X)).reverse(); q--; j.push(0)) ;
                  j.reverse();
                }
                for ((q = X.length) - (L = ne.length) < 0 && (j = ne, ne = X, X = j, L = q), q = 0; L; ) q = (X[--L] = X[L] + ne[L] + q) / d | 0, X[L] = d === X[L] ? 0 : X[L] % d;
                return q && (X = [q].concat(X), ++J), Ne(k, X, J);
              }, b.precision = b.sd = function(k, L) {
                var j, te, q;
                if (k != null && k !== !!k) return E(k, 1, v), L == null ? L = I : E(L, 0, 8), fe(new Z(this), k, L);
                if (!(j = this.c)) return null;
                if (te = (q = j.length - 1) * f + 1, q = j[q]) {
                  for (; q % 10 == 0; q /= 10, te--) ;
                  for (q = j[0]; 10 <= q; q /= 10, te++) ;
                }
                return k && this.e + 1 > te && (te = this.e + 1), te;
              }, b.shiftedBy = function(k) {
                return E(k, -g, g), this.times("1e" + k);
              }, b.squareRoot = b.sqrt = function() {
                var k, L, j, te, q, re = this, J = re.c, X = re.s, ne = re.e, ie = _ + 4, oe = new Z("0.5");
                if (X !== 1 || !J || !J[0]) return new Z(!X || X < 0 && (!J || J[0]) ? NaN : J ? re : 1 / 0);
                if ((j = (X = Math.sqrt(+ye(re))) == 0 || X == 1 / 0 ? (((L = w(J)).length + ne) % 2 == 0 && (L += "0"), X = Math.sqrt(+L), ne = y((ne + 1) / 2) - (ne < 0 || ne % 2), new Z(L = X == 1 / 0 ? "1e" + ne : (L = X.toExponential()).slice(0, L.indexOf("e") + 1) + ne)) : new Z(X + "")).c[0]) {
                  for ((X = (ne = j.e) + ie) < 3 && (X = 0); ; ) if (q = j, j = oe.times(q.plus(D(re, q, ie, 1))), w(q.c).slice(0, X) === (L = w(j.c)).slice(0, X)) {
                    if (j.e < ne && --X, (L = L.slice(X - 3, X + 1)) != "9999" && (te || L != "4999")) {
                      +L && (+L.slice(1) || L.charAt(0) != "5") || (fe(j, j.e + _ + 2, 1), k = !j.times(j).eq(re));
                      break;
                    }
                    if (!te && (fe(q, q.e + _ + 2, 0), q.times(q).eq(re))) {
                      j = q;
                      break;
                    }
                    ie += 4, X += 4, te = 1;
                  }
                }
                return fe(j, j.e + _ + 1, I, k);
              }, b.toExponential = function(k, L) {
                return k != null && (E(k, 0, v), k++), ee(this, k, L, 1);
              }, b.toFixed = function(k, L) {
                return k != null && (E(k, 0, v), k = k + this.e + 1), ee(this, k, L);
              }, b.toFormat = function(k, L, j) {
                var te;
                if (j == null) k != null && L && typeof L == "object" ? (j = L, L = null) : k && typeof k == "object" ? (j = k, k = L = null) : j = _e;
                else if (typeof j != "object") throw Error(u + "Argument not an object: " + j);
                if (te = this.toFixed(k, L), this.c) {
                  var q, re = te.split("."), J = +j.groupSize, X = +j.secondaryGroupSize, ne = j.groupSeparator || "", ie = re[0], oe = re[1], we = this.s < 0, Ae = we ? ie.slice(1) : ie, Be = Ae.length;
                  if (X && (q = J, J = X, Be -= X = q), 0 < J && 0 < Be) {
                    for (q = Be % J || J, ie = Ae.substr(0, q); q < Be; q += J) ie += ne + Ae.substr(q, J);
                    0 < X && (ie += ne + Ae.slice(q)), we && (ie = "-" + ie);
                  }
                  te = oe ? ie + (j.decimalSeparator || "") + ((X = +j.fractionGroupSize) ? oe.replace(new RegExp("\\d{" + X + "}\\B", "g"), "$&" + (j.fractionGroupSeparator || "")) : oe) : ie;
                }
                return (j.prefix || "") + te + (j.suffix || "");
              }, b.toFraction = function(k) {
                var L, j, te, q, re, J, X, ne, ie, oe, we, Ae, Be = this, st = Be.c;
                if (k != null && (!(X = new Z(k)).isInteger() && (X.c || X.s !== 1) || X.lt(S))) throw Error(u + "Argument " + (X.isInteger() ? "out of range: " : "not an integer: ") + ye(X));
                if (!st) return new Z(Be);
                for (L = new Z(S), ie = j = new Z(S), te = ne = new Z(S), Ae = w(st), re = L.e = Ae.length - Be.e - 1, L.c[0] = p[(J = re % f) < 0 ? f + J : J], k = !k || 0 < X.comparedTo(L) ? 0 < re ? L : ie : X, J = Y, Y = 1 / 0, X = new Z(Ae), ne.c[0] = 0; oe = D(X, L, 0, 1), (q = j.plus(oe.times(te))).comparedTo(k) != 1; ) j = te, te = q, ie = ne.plus(oe.times(q = ie)), ne = q, L = X.minus(oe.times(q = L)), X = q;
                return q = D(k.minus(j), te, 0, 1), ne = ne.plus(q.times(ie)), j = j.plus(q.times(te)), ne.s = ie.s = Be.s, we = D(ie, te, re *= 2, I).minus(Be).abs().comparedTo(D(ne, j, re, I).minus(Be).abs()) < 1 ? [ie, te] : [ne, j], Y = J, we;
              }, b.toNumber = function() {
                return +ye(this);
              }, b.toPrecision = function(k, L) {
                return k != null && E(k, 1, v), ee(this, k, L, 2);
              }, b.toString = function(k) {
                var L, j = this, te = j.s, q = j.e;
                return q === null ? te ? (L = "Infinity", te < 0 && (L = "-" + L)) : L = "NaN" : (L = k == null ? q <= H || M <= q ? T(w(j.c), q) : P(w(j.c), q, "0") : k === 10 ? P(w((j = fe(new Z(j), _ + q + 1, I)).c), j.e, "0") : (E(k, 2, be.length, "Base"), B(P(w(j.c), q, "0"), 10, k, te, !0)), te < 0 && j.c[0] && (L = "-" + L)), L;
              }, b.valueOf = b.toJSON = function() {
                return ye(this);
              }, b._isBigNumber = !0, typeof Symbol == "function" && typeof Symbol.iterator == "symbol" && (b[Symbol.toStringTag] = "BigNumber", b[Symbol.for("nodejs.util.inspect.custom")] = b.valueOf), A != null && Z.set(A), Z;
            }()).default = o.BigNumber = o, i !== void 0 && i.exports ? i.exports = o : (s || (s = typeof self < "u" && self ? self : window), s.BigNumber = o);
          })(this);
        }, {}],
        2: [function(t, i, r) {
          i.exports = {
            languageTag: "en-US",
            delimiters: {
              thousands: ",",
              decimal: "."
            },
            abbreviations: {
              thousand: "k",
              million: "m",
              billion: "b",
              trillion: "t"
            },
            spaceSeparated: !1,
            ordinal: function(s) {
              var o = s % 10;
              return ~~(s % 100 / 10) == 1 ? "th" : o === 1 ? "st" : o === 2 ? "nd" : o === 3 ? "rd" : "th";
            },
            currency: {
              symbol: "$",
              position: "prefix",
              code: "USD"
            },
            currencyFormat: {
              thousandSeparated: !0,
              totalLength: 4,
              spaceSeparated: !0
            },
            formats: {
              fourDigits: {
                totalLength: 4,
                spaceSeparated: !0
              },
              fullWithTwoDecimals: {
                output: "currency",
                thousandSeparated: !0,
                mantissa: 2
              },
              fullWithTwoDecimalsNoCurrency: {
                thousandSeparated: !0,
                mantissa: 2
              },
              fullWithNoDecimals: {
                output: "currency",
                thousandSeparated: !0,
                mantissa: 0
              }
            }
          };
        }, {}],
        3: [function(t, i, r) {
          function s(y, w) {
            return function(R) {
              if (Array.isArray(R)) return R;
            }(y) || function(R, E) {
              var C = [], T = !0, P = !1, x = void 0;
              try {
                for (var A, D = R[Symbol.iterator](); !(T = (A = D.next()).done) && (C.push(A.value), !E || C.length !== E); T = !0) ;
              } catch (B) {
                P = !0, x = B;
              } finally {
                try {
                  T || D.return == null || D.return();
                } finally {
                  if (P) throw x;
                }
              }
              return C;
            }(y, w) || function() {
              throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }();
          }
          var o = t("./globalState"), a = t("./validating"), l = t("./parsing"), c = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"], u = {
            general: {
              scale: 1024,
              suffixes: c,
              marker: "bd"
            },
            binary: {
              scale: 1024,
              suffixes: ["B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"],
              marker: "b"
            },
            decimal: {
              scale: 1e3,
              suffixes: c,
              marker: "d"
            }
          }, h = {
            totalLength: 0,
            characteristic: 0,
            forceAverage: !1,
            average: !1,
            mantissa: -1,
            optionalMantissa: !0,
            thousandSeparated: !1,
            spaceSeparated: !1,
            negative: "sign",
            forceSign: !1
          };
          function d(y) {
            var w = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : {}, R = 2 < arguments.length ? arguments[2] : void 0;
            if (typeof w == "string" && (w = l.parseFormat(w)), !a.validateFormat(w)) return "ERROR: invalid format";
            var E = w.prefix || "", C = w.postfix || "", T = function(P, x, A) {
              switch (x.output) {
                case "currency":
                  return x = v(x, o.currentCurrencyDefaultFormat()), function(be, Z, ee) {
                    var ae = ee.currentCurrency(), Ne = Object.assign({}, h, Z), fe = void 0, ye = "", k = !!Ne.totalLength || !!Ne.forceAverage || Ne.average, L = Z.currencyPosition || ae.position, j = Z.currencySymbol || ae.symbol;
                    Ne.spaceSeparated && (ye = " "), L === "infix" && (fe = ye + j + ye);
                    var te = m({
                      instance: be,
                      providedFormat: Z,
                      state: ee,
                      decimalSeparator: fe
                    });
                    return L === "prefix" && (te = be._value < 0 && Ne.negative === "sign" ? "-".concat(ye).concat(j).concat(te.slice(1)) : j + ye + te), L && L !== "postfix" || (te = te + (ye = k ? "" : ye) + j), te;
                  }(P, x, o);
                case "percent":
                  return x = v(x, o.currentPercentageDefaultFormat()), function(be, Z, ee, ae) {
                    var Ne = Z.prefixSymbol, fe = m({
                      instance: ae(100 * be._value),
                      providedFormat: Z,
                      state: ee
                    }), ye = Object.assign({}, h, Z);
                    return Ne ? "%".concat(ye.spaceSeparated ? " " : "").concat(fe) : "".concat(fe).concat(ye.spaceSeparated ? " " : "", "%");
                  }(P, x, o, A);
                case "byte":
                  return x = v(x, o.currentByteDefaultFormat()), S = P, I = o, H = A, M = (_ = x).base || "binary", $ = u[M], Y = f(S._value, $.suffixes, $.scale), K = Y.value, ce = Y.suffix, le = m({
                    instance: H(K),
                    providedFormat: _,
                    state: I,
                    defaults: I.currentByteDefaultFormat()
                  }), _e = I.currentAbbreviations(), "".concat(le).concat(_e.spaced ? " " : "").concat(ce);
                case "time":
                  return x = v(x, o.currentTimeDefaultFormat()), G = P, U = Math.floor(G._value / 60 / 60), se = Math.floor((G._value - 60 * U * 60) / 60), b = Math.round(G._value - 60 * U * 60 - 60 * se), "".concat(U, ":").concat(se < 10 ? "0" : "").concat(se, ":").concat(b < 10 ? "0" : "").concat(b);
                case "ordinal":
                  return x = v(x, o.currentOrdinalDefaultFormat()), D = P, B = x, W = (F = o).currentOrdinal(), N = Object.assign({}, h, B), O = m({
                    instance: D,
                    providedFormat: B,
                    state: F
                  }), V = W(D._value), "".concat(O).concat(N.spaceSeparated ? " " : "").concat(V);
                case "number":
                default:
                  return m({
                    instance: P,
                    providedFormat: x,
                    numbro: A
                  });
              }
              var D, B, F, W, N, O, V, G, U, se, b, S, _, I, H, M, $, Y, K, ce, le, _e;
            }(y, w, R);
            return T = (T = E + T) + C;
          }
          function f(y, w, R) {
            var E = w[0], C = Math.abs(y);
            if (R <= C) {
              for (var T = 1; T < w.length; ++T) {
                var P = Math.pow(R, T), x = Math.pow(R, T + 1);
                if (P <= C && C < x) {
                  E = w[T], y /= P;
                  break;
                }
              }
              E === w[0] && (y /= Math.pow(R, w.length - 1), E = w[w.length - 1]);
            }
            return {
              value: y,
              suffix: E
            };
          }
          function g(y) {
            for (var w = "", R = 0; R < y; R++) w += "0";
            return w;
          }
          function p(y, w) {
            return y.toString().indexOf("e") !== -1 ? function(R, E) {
              var C = R.toString(), T = s(C.split("e"), 2), P = T[0], x = T[1], A = s(P.split("."), 2), D = A[0], B = A[1], F = B === void 0 ? "" : B;
              if (0 < +x) C = D + F + g(x - F.length);
              else {
                var W = ".";
                W = +D < 0 ? "-0".concat(W) : "0".concat(W);
                var N = (g(-x - 1) + Math.abs(D) + F).substr(0, E);
                N.length < E && (N += g(E - N.length)), C = W + N;
              }
              return 0 < +x && 0 < E && (C += ".".concat(g(E))), C;
            }(y, w) : (Math.round(+"".concat(y, "e+").concat(w)) / Math.pow(10, w)).toFixed(w);
          }
          function m(y) {
            var w = y.instance, R = y.providedFormat, E = y.state, C = E === void 0 ? o : E, T = y.decimalSeparator, P = y.defaults, x = P === void 0 ? C.currentDefaults() : P, A = w._value;
            if (A === 0 && C.hasZeroFormat()) return C.getZeroFormat();
            if (!isFinite(A)) return A.toString();
            var D, B, F, W, N, O, V, G, U = Object.assign({}, h, x, R), se = U.totalLength, b = se ? 0 : U.characteristic, S = U.optionalCharacteristic, _ = U.forceAverage, I = !!se || !!_ || U.average, H = se ? -1 : I && R.mantissa === void 0 ? 0 : U.mantissa, M = !se && (R.optionalMantissa === void 0 ? H === -1 : U.optionalMantissa), $ = U.trimMantissa, Y = U.thousandSeparated, K = U.spaceSeparated, ce = U.negative, le = U.forceSign, _e = U.exponential, be = "";
            if (I) {
              var Z = function(k) {
                var L = k.value, j = k.forceAverage, te = k.abbreviations, q = k.spaceSeparated, re = q !== void 0 && q, J = k.totalLength, X = J === void 0 ? 0 : J, ne = "", ie = Math.abs(L), oe = -1;
                if (ie >= Math.pow(10, 12) && !j || j === "trillion" ? (ne = te.trillion, L /= Math.pow(10, 12)) : ie < Math.pow(10, 12) && ie >= Math.pow(10, 9) && !j || j === "billion" ? (ne = te.billion, L /= Math.pow(10, 9)) : ie < Math.pow(10, 9) && ie >= Math.pow(10, 6) && !j || j === "million" ? (ne = te.million, L /= Math.pow(10, 6)) : (ie < Math.pow(10, 6) && ie >= Math.pow(10, 3) && !j || j === "thousand") && (ne = te.thousand, L /= Math.pow(10, 3)), ne && (ne = (re ? " " : "") + ne), X) {
                  var we = L.toString().split(".")[0];
                  oe = Math.max(X - we.length, 0);
                }
                return {
                  value: L,
                  abbreviation: ne,
                  mantissaPrecision: oe
                };
              }({
                value: A,
                forceAverage: _,
                abbreviations: C.currentAbbreviations(),
                spaceSeparated: K,
                totalLength: se
              });
              A = Z.value, be += Z.abbreviation, se && (H = Z.mantissaPrecision);
            }
            if (_e) {
              var ee = (B = (D = {
                value: A,
                characteristicPrecision: b
              }).value, F = D.characteristicPrecision, W = F === void 0 ? 0 : F, N = s(B.toExponential().split("e"), 2), O = N[0], V = N[1], G = +O, W && 1 < W && (G *= Math.pow(10, W - 1), V = 0 <= (V = +V - (W - 1)) ? "+".concat(V) : V), {
                value: G,
                abbreviation: "e".concat(V)
              });
              A = ee.value, be = ee.abbreviation + be;
            }
            var ae, Ne, fe, ye = function(k, L, j, te, q) {
              if (te === -1) return k;
              var re = p(L, te), J = s(re.toString().split("."), 2), X = J[0], ne = J[1], ie = ne === void 0 ? "" : ne;
              if (ie.match(/^0+$/) && (j || q)) return X;
              var oe = ie.match(/0+$/);
              return q && oe ? "".concat(X, ".").concat(ie.toString().slice(0, oe.index)) : re.toString();
            }(A.toString(), A, M, H, $);
            return ye = function(k, L, j, te, q) {
              var re = te.currentDelimiters(), J = re.thousands;
              q = q || re.decimal;
              var X = re.thousandsSize || 3, ne = k.toString(), ie = ne.split(".")[0], oe = ne.split(".")[1];
              return j && (L < 0 && (ie = ie.slice(1)), function(we, Ae) {
                for (var Be = [], st = 0, St = we; 0 < St; St--) st === Ae && (Be.unshift(St), st = 0), st++;
                return Be;
              }(ie.length, X).forEach(function(we, Ae) {
                ie = ie.slice(0, we + Ae) + J + ie.slice(we + Ae);
              }), L < 0 && (ie = "-".concat(ie))), ne = oe ? ie + q + oe : ie;
            }(ye = function(k, L, j, te) {
              var q = k, re = s(q.toString().split("."), 2), J = re[0], X = re[1];
              if (J.match(/^-?0$/) && j) return X ? "".concat(J.replace("0", ""), ".").concat(X) : J.replace("0", "");
              if (J.length < te) for (var ne = te - J.length, ie = 0; ie < ne; ie++) q = "0".concat(q);
              return q.toString();
            }(ye, 0, S, b), A, Y, C, T), (I || _e) && (ye = ye + be), (le || A < 0) && (ae = ye, fe = ce, ye = (Ne = A) === 0 ? ae : +ae == 0 ? ae.replace("-", "") : 0 < Ne ? "+".concat(ae) : fe === "sign" ? ae : "(".concat(ae.replace("-", ""), ")")), ye;
          }
          function v(y, w) {
            if (!y) return w;
            var R = Object.keys(y);
            return R.length === 1 && R[0] === "output" ? w : y;
          }
          i.exports = function(y) {
            return {
              format: function() {
                for (var w = arguments.length, R = new Array(w), E = 0; E < w; E++) R[E] = arguments[E];
                return d.apply(void 0, R.concat([y]));
              },
              getByteUnit: function() {
                for (var w = arguments.length, R = new Array(w), E = 0; E < w; E++) R[E] = arguments[E];
                return (function(C) {
                  var T = u.general;
                  return f(C._value, T.suffixes, T.scale).suffix;
                }).apply(void 0, R.concat([y]));
              },
              getBinaryByteUnit: function() {
                for (var w = arguments.length, R = new Array(w), E = 0; E < w; E++) R[E] = arguments[E];
                return (function(C) {
                  var T = u.binary;
                  return f(C._value, T.suffixes, T.scale).suffix;
                }).apply(void 0, R.concat([y]));
              },
              getDecimalByteUnit: function() {
                for (var w = arguments.length, R = new Array(w), E = 0; E < w; E++) R[E] = arguments[E];
                return (function(C) {
                  var T = u.decimal;
                  return f(C._value, T.suffixes, T.scale).suffix;
                }).apply(void 0, R.concat([y]));
              },
              formatOrDefault: v
            };
          };
        }, {
          "./globalState": 4,
          "./parsing": 8,
          "./validating": 10
        }],
        4: [function(t, i, r) {
          var s = t("./en-US"), o = t("./validating"), a = t("./parsing"), l = {}, c = void 0, u = {}, h = null, d = {};
          function f(p) {
            c = p;
          }
          function g() {
            return u[c];
          }
          l.languages = function() {
            return Object.assign({}, u);
          }, l.currentLanguage = function() {
            return c;
          }, l.currentCurrency = function() {
            return g().currency;
          }, l.currentAbbreviations = function() {
            return g().abbreviations;
          }, l.currentDelimiters = function() {
            return g().delimiters;
          }, l.currentOrdinal = function() {
            return g().ordinal;
          }, l.currentDefaults = function() {
            return Object.assign({}, g().defaults, d);
          }, l.currentOrdinalDefaultFormat = function() {
            return Object.assign({}, l.currentDefaults(), g().ordinalFormat);
          }, l.currentByteDefaultFormat = function() {
            return Object.assign({}, l.currentDefaults(), g().byteFormat);
          }, l.currentPercentageDefaultFormat = function() {
            return Object.assign({}, l.currentDefaults(), g().percentageFormat);
          }, l.currentCurrencyDefaultFormat = function() {
            return Object.assign({}, l.currentDefaults(), g().currencyFormat);
          }, l.currentTimeDefaultFormat = function() {
            return Object.assign({}, l.currentDefaults(), g().timeFormat);
          }, l.setDefaults = function(p) {
            p = a.parseFormat(p), o.validateFormat(p) && (d = p);
          }, l.getZeroFormat = function() {
            return h;
          }, l.setZeroFormat = function(p) {
            return h = typeof p == "string" ? p : null;
          }, l.hasZeroFormat = function() {
            return h !== null;
          }, l.languageData = function(p) {
            if (p) {
              if (u[p]) return u[p];
              throw new Error('Unknown tag "'.concat(p, '"'));
            }
            return g();
          }, l.registerLanguage = function(p) {
            var m = 1 < arguments.length && arguments[1] !== void 0 && arguments[1];
            if (!o.validateLanguage(p)) throw new Error("Invalid language data");
            u[p.languageTag] = p, m && f(p.languageTag);
          }, l.setLanguage = function(p) {
            var m = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : s.languageTag;
            if (!u[p]) {
              var v = p.split("-")[0], y = Object.keys(u).find(function(w) {
                return w.split("-")[0] === v;
              });
              return u[y] ? void f(y) : void f(m);
            }
            f(p);
          }, l.registerLanguage(s), c = s.languageTag, i.exports = l;
        }, {
          "./en-US": 2,
          "./parsing": 8,
          "./validating": 10
        }],
        5: [function(t, i, r) {
          i.exports = function(s) {
            return {
              loadLanguagesInNode: function(o) {
                return a = s, void o.forEach(function(l) {
                  var c = void 0;
                  try {
                    c = t("../languages/".concat(l));
                  } catch {
                    console.error('Unable to load "'.concat(l, '". No matching language file found.'));
                  }
                  c && a.registerLanguage(c);
                });
                var a;
              }
            };
          };
        }, {}],
        6: [function(t, i, r) {
          var s = t("bignumber.js");
          function o(a, l, c) {
            var u = new s(a._value), h = l;
            return c.isNumbro(l) && (h = l._value), h = new s(h), a._value = u.minus(h).toNumber(), a;
          }
          i.exports = function(a) {
            return {
              add: function(l, c) {
                return h = c, d = a, f = new s((u = l)._value), g = h, d.isNumbro(h) && (g = h._value), g = new s(g), u._value = f.plus(g).toNumber(), u;
                var u, h, d, f, g;
              },
              subtract: function(l, c) {
                return o(l, c, a);
              },
              multiply: function(l, c) {
                return h = c, d = a, f = new s((u = l)._value), g = h, d.isNumbro(h) && (g = h._value), g = new s(g), u._value = f.times(g).toNumber(), u;
                var u, h, d, f, g;
              },
              divide: function(l, c) {
                return h = c, d = a, f = new s((u = l)._value), g = h, d.isNumbro(h) && (g = h._value), g = new s(g), u._value = f.dividedBy(g).toNumber(), u;
                var u, h, d, f, g;
              },
              set: function(l, c) {
                return u = l, d = h = c, a.isNumbro(h) && (d = h._value), u._value = d, u;
                var u, h, d;
              },
              difference: function(l, c) {
                return u = c, o(d = (h = a)(l._value), u, h), Math.abs(d._value);
                var u, h, d;
              }
            };
          };
        }, {
          "bignumber.js": 1
        }],
        7: [function(t, i, r) {
          function s(m, v) {
            for (var y = 0; y < v.length; y++) {
              var w = v[y];
              w.enumerable = w.enumerable || !1, w.configurable = !0, "value" in w && (w.writable = !0), Object.defineProperty(m, w.key, w);
            }
          }
          var o = t("./globalState"), a = t("./validating"), l = t("./loading")(p), c = t("./unformatting"), u = t("./formatting")(p), h = t("./manipulating")(p), d = t("./parsing"), f = function() {
            function m(w) {
              (function(R, E) {
                if (!(R instanceof E)) throw new TypeError("Cannot call a class as a function");
              })(this, m), this._value = w;
            }
            var v, y;
            return v = m, (y = [{
              key: "clone",
              value: function() {
                return p(this._value);
              }
            }, {
              key: "format",
              value: function() {
                var w = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : {};
                return u.format(this, w);
              }
            }, {
              key: "formatCurrency",
              value: function(w) {
                return typeof w == "string" && (w = d.parseFormat(w)), (w = u.formatOrDefault(w, o.currentCurrencyDefaultFormat())).output = "currency", u.format(this, w);
              }
            }, {
              key: "formatTime",
              value: function() {
                var w = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : {};
                return w.output = "time", u.format(this, w);
              }
            }, {
              key: "binaryByteUnits",
              value: function() {
                return u.getBinaryByteUnit(this);
              }
            }, {
              key: "decimalByteUnits",
              value: function() {
                return u.getDecimalByteUnit(this);
              }
            }, {
              key: "byteUnits",
              value: function() {
                return u.getByteUnit(this);
              }
            }, {
              key: "difference",
              value: function(w) {
                return h.difference(this, w);
              }
            }, {
              key: "add",
              value: function(w) {
                return h.add(this, w);
              }
            }, {
              key: "subtract",
              value: function(w) {
                return h.subtract(this, w);
              }
            }, {
              key: "multiply",
              value: function(w) {
                return h.multiply(this, w);
              }
            }, {
              key: "divide",
              value: function(w) {
                return h.divide(this, w);
              }
            }, {
              key: "set",
              value: function(w) {
                return h.set(this, g(w));
              }
            }, {
              key: "value",
              value: function() {
                return this._value;
              }
            }, {
              key: "valueOf",
              value: function() {
                return this._value;
              }
            }]) && s(v.prototype, y), m;
          }();
          function g(m) {
            var v = m;
            return p.isNumbro(m) ? v = m._value : typeof m == "string" ? v = p.unformat(m) : isNaN(m) && (v = NaN), v;
          }
          function p(m) {
            return new f(g(m));
          }
          p.version = "2.1.2", p.isNumbro = function(m) {
            return m instanceof f;
          }, p.language = o.currentLanguage, p.registerLanguage = o.registerLanguage, p.setLanguage = o.setLanguage, p.languages = o.languages, p.languageData = o.languageData, p.zeroFormat = o.setZeroFormat, p.defaultFormat = o.currentDefaults, p.setDefaults = o.setDefaults, p.defaultCurrencyFormat = o.currentCurrencyDefaultFormat, p.validate = a.validate, p.loadLanguagesInNode = l.loadLanguagesInNode, p.unformat = c.unformat, i.exports = p;
        }, {
          "./formatting": 3,
          "./globalState": 4,
          "./loading": 5,
          "./manipulating": 6,
          "./parsing": 8,
          "./unformatting": 9,
          "./validating": 10
        }],
        8: [function(t, i, r) {
          i.exports = {
            parseFormat: function(s) {
              var o, a, l, c, u, h, d, f, g, p, m, v, y, w, R, E, C, T, P, x, A = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : {};
              return typeof s != "string" ? s : (a = A, s = (l = (o = s).match(/^{([^}]*)}/)) ? (a.prefix = l[1], o.slice(l[0].length)) : o, u = A, function(D, B) {
                if (D.indexOf("$") === -1) {
                  if (D.indexOf("%") === -1) return D.indexOf("bd") !== -1 ? (B.output = "byte", B.base = "general") : D.indexOf("b") !== -1 ? (B.output = "byte", B.base = "binary") : D.indexOf("d") !== -1 ? (B.output = "byte", B.base = "decimal") : D.indexOf(":") === -1 ? D.indexOf("o") !== -1 && (B.output = "ordinal") : B.output = "time";
                  B.output = "percent";
                } else B.output = "currency";
              }(s = (h = (c = s).match(/{([^}]*)}$/)) ? (u.postfix = h[1], c.slice(0, -h[0].length)) : c, A), d = A, (f = s.match(/[1-9]+[0-9]*/)) && (d.totalLength = +f[0]), g = A, (p = s.split(".")[0].match(/0+/)) && (g.characteristic = p[0].length), function(D, B) {
                if (D.indexOf(".") !== -1) {
                  var F = D.split(".")[0];
                  B.optionalCharacteristic = F.indexOf("0") === -1;
                }
              }(s, A), m = A, s.indexOf("a") !== -1 && (m.average = !0), y = A, (v = s).indexOf("K") !== -1 ? y.forceAverage = "thousand" : v.indexOf("M") !== -1 ? y.forceAverage = "million" : v.indexOf("B") !== -1 ? y.forceAverage = "billion" : v.indexOf("T") !== -1 && (y.forceAverage = "trillion"), function(D, B) {
                var F = D.split(".")[1];
                if (F) {
                  var W = F.match(/0+/);
                  W && (B.mantissa = W[0].length);
                }
              }(s, A), R = A, (w = s).match(/\[\.]/) ? R.optionalMantissa = !0 : w.match(/\./) && (R.optionalMantissa = !1), E = A, s.indexOf(",") !== -1 && (E.thousandSeparated = !0), C = A, s.indexOf(" ") !== -1 && (C.spaceSeparated = !0), P = A, (T = s).match(/^\+?\([^)]*\)$/) && (P.negative = "parenthesis"), T.match(/^\+?-/) && (P.negative = "sign"), x = A, s.match(/^\+/) && (x.forceSign = !0), A);
            }
          };
        }, {}],
        9: [function(t, i, r) {
          var s = [{
            key: "ZiB",
            factor: Math.pow(1024, 7)
          }, {
            key: "ZB",
            factor: Math.pow(1e3, 7)
          }, {
            key: "YiB",
            factor: Math.pow(1024, 8)
          }, {
            key: "YB",
            factor: Math.pow(1e3, 8)
          }, {
            key: "TiB",
            factor: Math.pow(1024, 4)
          }, {
            key: "TB",
            factor: Math.pow(1e3, 4)
          }, {
            key: "PiB",
            factor: Math.pow(1024, 5)
          }, {
            key: "PB",
            factor: Math.pow(1e3, 5)
          }, {
            key: "MiB",
            factor: Math.pow(1024, 2)
          }, {
            key: "MB",
            factor: Math.pow(1e3, 2)
          }, {
            key: "KiB",
            factor: Math.pow(1024, 1)
          }, {
            key: "KB",
            factor: Math.pow(1e3, 1)
          }, {
            key: "GiB",
            factor: Math.pow(1024, 3)
          }, {
            key: "GB",
            factor: Math.pow(1e3, 3)
          }, {
            key: "EiB",
            factor: Math.pow(1024, 6)
          }, {
            key: "EB",
            factor: Math.pow(1e3, 6)
          }, {
            key: "B",
            factor: 1
          }];
          function o(l) {
            return l.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&");
          }
          function a(l, c) {
            var u = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : "", h = 3 < arguments.length ? arguments[3] : void 0, d = 4 < arguments.length ? arguments[4] : void 0, f = 5 < arguments.length ? arguments[5] : void 0, g = 6 < arguments.length ? arguments[6] : void 0;
            if (l !== "") return l === d ? 0 : function p(m, v) {
              var y = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : "", w = 3 < arguments.length ? arguments[3] : void 0, R = 4 < arguments.length ? arguments[4] : void 0, E = 5 < arguments.length ? arguments[5] : void 0, C = 6 < arguments.length ? arguments[6] : void 0;
              if (!isNaN(+m)) return +m;
              var T = "", P = m.replace(/(^[^(]*)\((.*)\)([^)]*$)/, "$1$2$3");
              if (P !== m) return -1 * p(P, v, y, w, R, E, C);
              for (var x = 0; x < s.length; x++) {
                var A = s[x];
                if ((T = m.replace(A.key, "")) !== m) return p(T, v, y, w, R, E, C) * A.factor;
              }
              if ((T = m.replace("%", "")) !== m) return p(T, v, y, w, R, E, C) / 100;
              var D = parseFloat(m);
              if (!isNaN(D)) {
                var B = w(D);
                if (B && B !== "." && (T = m.replace(new RegExp("".concat(o(B), "$")), "")) !== m) return p(T, v, y, w, R, E, C);
                var F = {};
                Object.keys(E).forEach(function(se) {
                  F[E[se]] = se;
                });
                for (var W = Object.keys(F).sort().reverse(), N = W.length, O = 0; O < N; O++) {
                  var V = W[O], G = F[V];
                  if ((T = m.replace(V, "")) !== m) {
                    var U = void 0;
                    switch (G) {
                      case "thousand":
                        U = Math.pow(10, 3);
                        break;
                      case "million":
                        U = Math.pow(10, 6);
                        break;
                      case "billion":
                        U = Math.pow(10, 9);
                        break;
                      case "trillion":
                        U = Math.pow(10, 12);
                    }
                    return p(T, v, y, w, R, E, C) * U;
                  }
                }
              }
            }(function(p, m) {
              var v = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : "", y = p.replace(v, "");
              return y = (y = y.replace(new RegExp("([0-9])".concat(o(m.thousands), "([0-9])"), "g"), "$1$2")).replace(m.decimal, ".");
            }(l, c, u), c, u, h, d, f, g);
          }
          i.exports = {
            unformat: function(l, c) {
              var u, h, d, f = t("./globalState"), g = f.currentDelimiters(), p = f.currentCurrency().symbol, m = f.currentOrdinal(), v = f.getZeroFormat(), y = f.currentAbbreviations(), w = void 0;
              if (typeof l == "string") w = function(R, E) {
                if (!R.indexOf(":") || E.thousands === ":") return !1;
                var C = R.split(":");
                if (C.length !== 3) return !1;
                var T = +C[0], P = +C[1], x = +C[2];
                return !isNaN(T) && !isNaN(P) && !isNaN(x);
              }(l, g) ? (u = l.split(":"), h = +u[0], d = +u[1], +u[2] + 60 * d + 3600 * h) : a(l, g, p, m, v, y, c);
              else {
                if (typeof l != "number") return;
                w = l;
              }
              if (w !== void 0) return w;
            }
          };
        }, {
          "./globalState": 4
        }],
        10: [function(t, i, r) {
          function s(g) {
            return function(p) {
              if (Array.isArray(p)) {
                for (var m = 0, v = new Array(p.length); m < p.length; m++) v[m] = p[m];
                return v;
              }
            }(g) || function(p) {
              if (Symbol.iterator in Object(p) || Object.prototype.toString.call(p) === "[object Arguments]") return Array.from(p);
            }(g) || function() {
              throw new TypeError("Invalid attempt to spread non-iterable instance");
            }();
          }
          function o(g) {
            return (o = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(p) {
              return typeof p;
            } : function(p) {
              return p && typeof Symbol == "function" && p.constructor === Symbol && p !== Symbol.prototype ? "symbol" : typeof p;
            })(g);
          }
          var a = t("./unformatting"), l = /^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/, c = {
            output: {
              type: "string",
              validValues: ["currency", "percent", "byte", "time", "ordinal", "number"]
            },
            base: {
              type: "string",
              validValues: ["decimal", "binary", "general"],
              restriction: function(g, p) {
                return p.output === "byte";
              },
              message: "`base` must be provided only when the output is `byte`",
              mandatory: function(g) {
                return g.output === "byte";
              }
            },
            characteristic: {
              type: "number",
              restriction: function(g) {
                return 0 <= g;
              },
              message: "value must be positive"
            },
            prefix: "string",
            postfix: "string",
            forceAverage: {
              type: "string",
              validValues: ["trillion", "billion", "million", "thousand"]
            },
            average: "boolean",
            currencyPosition: {
              type: "string",
              validValues: ["prefix", "infix", "postfix"]
            },
            currencySymbol: "string",
            totalLength: {
              type: "number",
              restrictions: [{
                restriction: function(g) {
                  return 0 <= g;
                },
                message: "value must be positive"
              }, {
                restriction: function(g, p) {
                  return !p.exponential;
                },
                message: "`totalLength` is incompatible with `exponential`"
              }]
            },
            mantissa: {
              type: "number",
              restriction: function(g) {
                return 0 <= g;
              },
              message: "value must be positive"
            },
            optionalMantissa: "boolean",
            trimMantissa: "boolean",
            optionalCharacteristic: "boolean",
            thousandSeparated: "boolean",
            spaceSeparated: "boolean",
            abbreviations: {
              type: "object",
              children: {
                thousand: "string",
                million: "string",
                billion: "string",
                trillion: "string"
              }
            },
            negative: {
              type: "string",
              validValues: ["sign", "parenthesis"]
            },
            forceSign: "boolean",
            exponential: {
              type: "boolean"
            },
            prefixSymbol: {
              type: "boolean",
              restriction: function(g, p) {
                return p.output === "percent";
              },
              message: "`prefixSymbol` can be provided only when the output is `percent`"
            }
          }, u = {
            languageTag: {
              type: "string",
              mandatory: !0,
              restriction: function(g) {
                return g.match(l);
              },
              message: "the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)"
            },
            delimiters: {
              type: "object",
              children: {
                thousands: "string",
                decimal: "string",
                thousandsSize: "number"
              },
              mandatory: !0
            },
            abbreviations: {
              type: "object",
              children: {
                thousand: {
                  type: "string",
                  mandatory: !0
                },
                million: {
                  type: "string",
                  mandatory: !0
                },
                billion: {
                  type: "string",
                  mandatory: !0
                },
                trillion: {
                  type: "string",
                  mandatory: !0
                }
              },
              mandatory: !0
            },
            spaceSeparated: "boolean",
            ordinal: {
              type: "function",
              mandatory: !0
            },
            currency: {
              type: "object",
              children: {
                symbol: "string",
                position: "string",
                code: "string"
              },
              mandatory: !0
            },
            defaults: "format",
            ordinalFormat: "format",
            byteFormat: "format",
            percentageFormat: "format",
            currencyFormat: "format",
            timeDefaults: "format",
            formats: {
              type: "object",
              children: {
                fourDigits: {
                  type: "format",
                  mandatory: !0
                },
                fullWithTwoDecimals: {
                  type: "format",
                  mandatory: !0
                },
                fullWithTwoDecimalsNoCurrency: {
                  type: "format",
                  mandatory: !0
                },
                fullWithNoDecimals: {
                  type: "format",
                  mandatory: !0
                }
              }
            }
          };
          function h(g) {
            return !!a.unformat(g);
          }
          function d(g, p, m) {
            var v = 3 < arguments.length && arguments[3] !== void 0 && arguments[3], y = Object.keys(g).map(function(w) {
              if (!p[w]) return console.error("".concat(m, " Invalid key: ").concat(w)), !1;
              var R = g[w], E = p[w];
              if (typeof E == "string" && (E = {
                type: E
              }), E.type === "format") {
                if (!d(R, c, "[Validate ".concat(w, "]"), !0)) return !1;
              } else if (o(R) !== E.type) return console.error("".concat(m, " ").concat(w, ' type mismatched: "').concat(E.type, '" expected, "').concat(o(R), '" provided')), !1;
              if (E.restrictions && E.restrictions.length) for (var C = E.restrictions.length, T = 0; T < C; T++) {
                var P = E.restrictions[T], x = P.restriction, A = P.message;
                if (!x(R, g)) return console.error("".concat(m, " ").concat(w, " invalid value: ").concat(A)), !1;
              }
              return E.restriction && !E.restriction(R, g) ? (console.error("".concat(m, " ").concat(w, " invalid value: ").concat(E.message)), !1) : E.validValues && E.validValues.indexOf(R) === -1 ? (console.error("".concat(m, " ").concat(w, " invalid value: must be among ").concat(JSON.stringify(E.validValues), ', "').concat(R, '" provided')), !1) : !(E.children && !d(R, E.children, "[Validate ".concat(w, "]")));
            });
            return v || y.push.apply(y, s(Object.keys(p).map(function(w) {
              var R = p[w];
              if (typeof R == "string" && (R = {
                type: R
              }), R.mandatory) {
                var E = R.mandatory;
                if (typeof E == "function" && (E = E(g)), E && g[w] === void 0) return console.error("".concat(m, ' Missing mandatory key "').concat(w, '"')), !1;
              }
              return !0;
            }))), y.reduce(function(w, R) {
              return w && R;
            }, !0);
          }
          function f(g) {
            return d(g, c, "[Validate format]");
          }
          i.exports = {
            validate: function(g, p) {
              var m = h(g), v = f(p);
              return m && v;
            },
            validateFormat: f,
            validateInput: h,
            validateLanguage: function(g) {
              return d(g, u, "[Validate language]");
            }
          };
        }, {
          "./unformatting": 9
        }]
      }, {}, [7])(7);
    });
  })($G);
  var uAe = $G.exports;
  const Oh = /* @__PURE__ */ zp(uAe), hAe = "numeric";
  function FG(n, e) {
    if (sr(n)) {
      const t = e.numericFormat, i = t && t.culture || "-", r = t && t.pattern;
      if (typeof i < "u" && !Oh.languages()[i]) {
        const s = i.replace("-", ""), o = Oh.allLanguages ? Oh.allLanguages[i] : Oh[s];
        o && Oh.registerLanguage(o);
      }
      Oh.setLanguage(i), n = Oh(n).format(r || "0");
    }
    return n;
  }
  function OL(n, e, t, i, r, s, o) {
    let a = s;
    if (sr(a)) {
      const l = o.className || "", c = l.length ? l.split(" ") : [];
      a = FG(a, o), c.indexOf("htLeft") < 0 && c.indexOf("htCenter") < 0 && c.indexOf("htRight") < 0 && c.indexOf("htJustify") < 0 && c.push("htRight"), c.indexOf("htNumeric") < 0 && c.push("htNumeric"), o.className = c.join(" "), e.dir = "ltr";
    }
    Wc(n, e, t, i, r, a, o);
  }
  OL.RENDERER_TYPE = hAe;
  const dAe = "password";
  function kL(n, e, t, i, r, s, o) {
    Wc.apply(this, [n, e, t, i, r, s, o]);
    const a = o.hashLength || e.innerHTML.length, l = o.hashSymbol || "*";
    let c = "";
    $e(a - 1, () => {
      c += l;
    }), Mf(e, c);
  }
  kL.RENDERER_TYPE = dAe;
  const fAe = "select";
  function DL(n, e, t, i, r, s, o) {
    Wc.apply(this, [n, e, t, i, r, s, o]);
  }
  DL.RENDERER_TYPE = fAe;
  const gAe = "time";
  function NL(n, e, t, i, r, s, o) {
    Wc.apply(this, [n, e, t, i, r, s, o]), e.dir = "ltr";
  }
  NL.RENDERER_TYPE = gAe;
  function pAe() {
    ss(em), ss(my), ss(AL), ss(ML), ss(IL), ss(TL), ss(OL), ss(kL), ss(DL), ss(Wc), ss(NL);
  }
  const mAe = "autocomplete";
  function Q1(n, e) {
    let t = n;
    if (t == null && (t = ""), this.allowEmpty && t === "") {
      e(!0);
      return;
    }
    this.strict && this.source ? typeof this.source == "function" ? this.source(t, w3(t, e)) : w3(t, e)(this.source) : e(!0);
  }
  Q1.VALIDATOR_TYPE = mAe;
  function w3(n, e) {
    const t = n;
    return function(i) {
      let r = !1;
      for (let s = 0, o = i.length; s < o; s++)
        if (t === i[s]) {
          r = !0;
          break;
        }
      e(r);
    };
  }
  function BG(n) {
    const e = new Date(n);
    return isNaN((/* @__PURE__ */ new Date(`${n}T00:00`)).getDate()) ? e : new Date(e.getTime() + e.getTimezoneOffset() * 6e4);
  }
  const bAe = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    getNormalizedDate: BG
  }, Symbol.toStringTag, { value: "Module" })), vAe = "date";
  function LL(n, e) {
    const t = R9(IG, this.instance);
    let i = n, r = !0;
    i == null && (i = "");
    let s = he(i, this.dateFormat || t.defaultDateFormat, !0).isValid(), o = he(new Date(i)).isValid() || s;
    if (this.allowEmpty && i === "" && (o = !0, s = !0), o || (r = !1), !o && s && (r = !0), o && !s)
      if (this.correctFormat === !0) {
        const a = wAe(i, this.dateFormat);
        this.instance.setDataAtCell(this.visualRow, this.visualCol, a, "dateValidator"), r = !0;
      } else
        r = !1;
    e(r);
  }
  LL.VALIDATOR_TYPE = vAe;
  function wAe(n, e) {
    const t = he(BG(n)), i = he(n, e), r = n.search(/[A-z]/g) > -1;
    let s;
    return t.isValid() && t.format("x") === i.format("x") || !i.isValid() || r ? s = t : s = i, s.format(e);
  }
  const yAe = "dropdown";
  function HL(n, e) {
    Q1.apply(this, [n, e]);
  }
  HL.VALIDATOR_TYPE = yAe;
  const CAe = "numeric";
  function $L(n, e) {
    let t = n;
    t == null && (t = ""), this.allowEmpty && t === "" ? e(!0) : e(t === "" ? !1 : sr(n));
  }
  $L.VALIDATOR_TYPE = CAe;
  const SAe = [
    "YYYY-MM-DDTHH:mm:ss.SSSZ",
    "X",
    // Unix timestamp
    "x"
    // Unix ms timestamp
  ], _Ae = "time";
  function FL(n, e) {
    const t = this.timeFormat || "h:mm:ss a";
    let i = !0, r = n;
    r === null && (r = ""), r = /^\d{3,}$/.test(r) ? parseInt(r, 10) : r;
    const s = /^\d{1,2}$/.test(r);
    s && (r += ":00");
    const o = he(r, SAe, !0).isValid() ? he(r) : he(r, t);
    let a = o.isValid(), l = he(r, t, !0).isValid() && !s;
    if (this.allowEmpty && r === "" && (a = !0, l = !0), a || (i = !1), !a && l && (i = !0), a && !l)
      if (this.correctFormat === !0) {
        const c = o.format(t);
        this.instance.setDataAtCell(this.visualRow, this.visualCol, c, "timeValidator"), i = !0;
      } else
        i = !1;
    e(i);
  }
  FL.VALIDATOR_TYPE = _Ae;
  function RAe() {
    vd(Q1), vd(HL), vd(LL), vd($L), vd(FL);
  }
  const EAe = "autocomplete", xAe = {
    CELL_TYPE: EAe,
    editor: RL,
    renderer: em,
    validator: Q1
  }, TAe = "checkbox", MAe = {
    CELL_TYPE: TAe,
    editor: PG,
    renderer: AL
  }, AAe = "date";
  function VG(n, e, t, i, r, s, o) {
    em.apply(this, [n, e, t, i, r, s, o]);
  }
  VG.RENDERER_TYPE = AAe;
  const PAe = "date", IAe = {
    CELL_TYPE: PAe,
    editor: OG,
    // displays small gray arrow on right side of the cell
    renderer: VG,
    validator: LL
  }, OAe = "dropdown", kAe = {
    CELL_TYPE: OAe,
    editor: xL,
    // displays small gray arrow on right side of the cell
    renderer: ML,
    validator: HL
  }, DAe = "handsontable", NAe = {
    CELL_TYPE: DAe,
    editor: _L,
    // displays small gray arrow on right side of the cell
    renderer: IL
  }, LAe = "numeric", HAe = {
    CELL_TYPE: LAe,
    editor: kG,
    renderer: OL,
    validator: $L,
    dataType: "number"
  }, $Ae = "password", FAe = {
    CELL_TYPE: $Ae,
    editor: DG,
    renderer: kL,
    copyable: !1
  }, BAe = "select", VAe = {
    CELL_TYPE: BAe,
    editor: NG,
    renderer: DL
  }, WAe = "time", jAe = {
    CELL_TYPE: WAe,
    editor: LG,
    renderer: NL,
    validator: FL
  };
  function zAe() {
    Ws(xAe), Ws(MAe), Ws(IAe), Ws(kAe), Ws(NAe), Ws(HAe), Ws(FAe), Ws(VAe), Ws(AG), Ws(jAe);
  }
  function UAe(n, e) {
    WG(n, e), e.add(n);
  }
  function GAe(n, e, t) {
    WG(n, e), e.set(n, t);
  }
  function WG(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function Qf(n, e, t) {
    return (e = YAe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function YAe(n) {
    var e = KAe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function KAe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function Jf(n, e) {
    return n.get(jG(n, e));
  }
  function jG(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  const y3 = /* @__PURE__ */ new Map([["plugin", QSe], ["cell-type", yG], ["editor", _9], ["renderer", I9], ["validator", O9]]), qAe = "base", NT = [];
  let wa = null;
  var kh = /* @__PURE__ */ new WeakMap(), C3 = /* @__PURE__ */ new WeakSet();
  class Lt {
    static get PLUGIN_KEY() {
      return qAe;
    }
    /**
     * The `SETTING_KEYS` getter defines the keys that, when present in the config object, trigger the plugin update
     * after the `updateSettings` calls.
     * - When it returns `true`, the plugin updates after all `updateSettings` calls, regardless of the contents of the
     * config object.
     * - When it returns `false`, the plugin never updates on `updateSettings` calls.
     *
     * @returns {string[] | boolean}
     */
    static get SETTING_KEYS() {
      return [this.PLUGIN_KEY];
    }
    /**
     * The instance of the {@link EventManager} class.
     *
     * @type {EventManager}
     */
    /**
     * @param {object} hotInstance Handsontable instance.
     */
    constructor(e) {
      UAe(this, C3), Qf(this, "eventManager", new lo(this)), Qf(this, "pluginName", null), Qf(this, "pluginsInitializedCallbacks", []), Qf(this, "isPluginsReady", !1), Qf(this, "enabled", !1), Qf(this, "initialized", !1), GAe(this, kh, {}), Sl(this, "hot", e, {
        writable: !1
      }), wa = null, this.hot.addHook("afterPluginsInitialized", () => this.onAfterPluginsInitialized()), this.hot.addHook("afterUpdateSettings", (t) => this.onUpdateSettings(t)), this.hot.addHook("beforeInit", () => this.init());
    }
    init() {
      this.pluginName = this.hot.getPluginName(this);
      const e = this.constructor.PLUGIN_DEPS, t = Array.isArray(e) ? e : [];
      if (t.length > 0) {
        const r = [];
        if (t.forEach((s) => {
          const [o, a] = s.split(":");
          if (!y3.has(o))
            throw new Error(`Unknown plugin dependency type "${o}" was found.`);
          y3.get(o)(a) || r.push(` - ${a} (${o})`);
        }), r.length > 0) {
          const s = [`The ${this.pluginName} plugin requires the following modules:
`, `${r.join(`
`)}
`].join("");
          NT.push(s);
        }
      }
      if (wa || (wa = kD()), wa.indexOf("UndoRedo") >= 0 && wa.splice(wa.indexOf("UndoRedo"), 1), wa.indexOf(this.pluginName) >= 0 && wa.splice(wa.indexOf(this.pluginName), 1), this.hot.addHookOnce("afterPluginsInitialized", () => {
        this.isEnabled && this.isEnabled() && this.enablePlugin();
      }), wa.length === 0) {
        if (NT.length > 0) {
          const r = [`${NT.join(`
`)}
`, "You have to import and register them manually."].join("");
          throw new Error(r);
        }
        this.hot.runHooks("afterPluginsInitialized");
      }
      this.initialized = !0;
    }
    /**
     * Enable plugin for this Handsontable instance.
     */
    enablePlugin() {
      this.enabled = !0;
    }
    /**
     * Disable plugin for this Handsontable instance.
     */
    disablePlugin() {
      var e;
      (e = this.eventManager) === null || e === void 0 || e.clear(), this.clearHooks(), this.enabled = !1;
    }
    /**
     * Add listener to plugin hooks system.
     *
     * @param {string} name The hook name.
     * @param {Function} callback The listener function to add.
     * @param {number} [orderIndex] Order index of the callback.
     *                              If > 0, the callback will be added after the others, for example, with an index of 1, the callback will be added before the ones with an index of 2, 3, etc., but after the ones with an index of 0 and lower.
     *                              If < 0, the callback will be added before the others, for example, with an index of -1, the callback will be added after the ones with an index of -2, -3, etc., but before the ones with an index of 0 and higher.
     *                              If 0 or no order index is provided, the callback will be added between the "negative" and "positive" indexes.
     */
    addHook(e, t, i) {
      Jf(kh, this)[e] = Jf(kh, this)[e] || [];
      const r = Jf(kh, this)[e];
      this.hot.addHook(e, t, i), r.push(t), Jf(kh, this)[e] = r;
    }
    /**
     * Remove all hooks listeners by hook name.
     *
     * @param {string} name The hook name.
     */
    removeHooks(e) {
      z(Jf(kh, this)[e] || [], (t) => {
        this.hot.removeHook(e, t);
      });
    }
    /**
     * Clear all hooks.
     */
    clearHooks() {
      const e = Jf(kh, this);
      lt(e, (t, i) => this.removeHooks(i)), e.length = 0;
    }
    /**
     * Register function which will be immediately called after all plugins initialized.
     *
     * @param {Function} callback The listener function to call.
     */
    callOnPluginsReady(e) {
      this.isPluginsReady ? e() : this.pluginsInitializedCallbacks.push(e);
    }
    /**
     * On after plugins initialized listener.
     *
     * @private
     */
    onAfterPluginsInitialized() {
      z(this.pluginsInitializedCallbacks, (e) => e()), this.pluginsInitializedCallbacks.length = 0, this.isPluginsReady = !0;
    }
    /**
     * On update settings listener.
     *
     * @private
     * @param {object} newSettings New set of settings passed to the `updateSettings` method.
     */
    onUpdateSettings(e) {
      const t = jG(C3, this, XAe).call(this, e);
      this.isEnabled && (this.enabled && !this.isEnabled() && this.disablePlugin(), !this.enabled && this.isEnabled() && this.enablePlugin(), this.enabled && this.isEnabled() && t && this.updatePlugin(e));
    }
    /**
     * Updates the plugin to use the latest options you have specified.
     *
     * @private
     */
    updatePlugin() {
    }
    /**
     * Destroy plugin.
     */
    destroy() {
      var e;
      (e = this.eventManager) === null || e === void 0 || e.destroy(), this.clearHooks(), lt(this, (t, i) => {
        i !== "hot" && (this[i] = null);
      }), delete this.t, delete this.hot;
    }
  }
  function XAe(n) {
    if (!n)
      return !1;
    const e = this.constructor.SETTING_KEYS;
    if (typeof e == "boolean")
      return e;
    for (let t = 0; t < e.length; t++)
      if (n[e[t]] !== void 0)
        return !0;
    return !1;
  }
  function Dh(n, e, t) {
    return (e = ZAe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function ZAe(n) {
    var e = QAe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function QAe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  let BL = class {
    constructor(e) {
      Dh(this, "hot", null), Dh(this, "container", null), Dh(this, "injected", !1), Dh(this, "rows", []), Dh(this, "columns", []), Dh(this, "samples", null), Dh(this, "settings", {
        useHeaders: !0
      }), this.hot = e;
    }
    /**
     * Add row.
     *
     * @param {number} row Visual row index.
     * @param {Map} samples Samples Map object.
     */
    addRow(e, t) {
      if (this.columns.length)
        throw new Error("Doesn't support multi-dimensional table");
      this.rows.length || (this.container = this.createContainer(this.hot.rootElement.className));
      const i = {
        row: e
      };
      this.rows.push(i), this.samples = t, this.table = this.createTable(this.hot.table.className), this.table.colGroup.appendChild(this.createColGroupsCol(e)), this.table.tr.appendChild(this.createRow(e)), this.container.container.appendChild(this.table.fragment), i.table = this.table.table;
    }
    /**
     * Add a row consisting of the column headers.
     *
     * @param {Map} samples A map with sampled table values.
     */
    addColumnHeadersRow(e) {
      const t = this.hot.getColHeader(0);
      if (t != null) {
        const i = {
          row: -1
        };
        this.rows.push(i), this.container = this.createContainer(this.hot.rootElement.className), this.samples = e, this.table = this.createTable(this.hot.table.className), this.table.colGroup.appendChild(this.createColGroupsCol()), this.appendColumnHeadersRow(), this.container.container.appendChild(this.table.fragment), i.table = this.table.table;
      }
    }
    /**
     * Add column.
     *
     * @param {number} column Visual column index.
     * @param {Map} samples A map with sampled table values.
     */
    addColumn(e, t) {
      if (this.rows.length)
        throw new Error("Doesn't support multi-dimensional table");
      this.columns.length || (this.container = this.createContainer(this.hot.rootElement.className));
      const i = {
        col: e
      };
      this.columns.push(i), this.samples = t, this.table = this.createTable(this.hot.table.className), this.getSetting("useHeaders") && this.hot.getColHeader(e) !== null && this.hot.view.appendColHeader(e, this.table.th), this.table.tBody.appendChild(this.createCol(e)), this.container.container.appendChild(this.table.fragment), i.table = this.table.table;
    }
    /**
     * Get calculated heights.
     *
     * @param {Function} callback Callback which will be fired for each calculated row.
     */
    getHeights(e) {
      this.injected || this.injectTable(), z(this.rows, (t) => {
        const {
          height: i
        } = t.table.getBoundingClientRect();
        e(t.row, Math.ceil(i) - 1);
      });
    }
    /**
     * Get calculated widths.
     *
     * @param {Function} callback Callback which will be fired for each calculated column.
     */
    getWidths(e) {
      this.injected || this.injectTable(), z(this.columns, (t) => {
        const {
          width: i
        } = t.table.getBoundingClientRect();
        e(t.col, Math.ceil(i));
      });
    }
    /**
     * Set the Ghost Table settings to the provided object.
     *
     * @param {object} settings New Ghost Table Settings.
     */
    setSettings(e) {
      this.settings = e;
    }
    /**
     * Set a single setting of the Ghost Table.
     *
     * @param {string} name Setting name.
     * @param {*} value Setting value.
     */
    setSetting(e, t) {
      this.settings || (this.settings = {}), this.settings[e] = t;
    }
    /**
     * Get the Ghost Table settings.
     *
     * @returns {object|null}
     */
    getSettings() {
      return this.settings;
    }
    /**
     * Get a single Ghost Table setting.
     *
     * @param {string} name The setting name to get.
     * @returns {boolean|null}
     */
    getSetting(e) {
      return this.settings ? this.settings[e] : null;
    }
    /**
     * Create colgroup col elements.
     *
     * @param {number} row Visual row index.
     * @returns {DocumentFragment}
     */
    createColGroupsCol(e) {
      const t = this.hot.rootDocument.createDocumentFragment();
      return this.hot.hasRowHeaders() && t.appendChild(this.createColElement(-1, -1)), this.samples.forEach((i) => {
        z(i.strings, (r) => {
          t.appendChild(this.createColElement(r.col, e));
        });
      }), t;
    }
    /**
     * Create table row element.
     *
     * @param {number} row Visual row index.
     * @returns {DocumentFragment} Returns created table row elements.
     */
    createRow(e) {
      const {
        rootDocument: t
      } = this.hot, i = t.createDocumentFragment(), r = t.createElement("th");
      return this.hot.hasRowHeaders() && (this.hot.view.appendRowHeader(e, r), i.appendChild(r)), this.samples.forEach((s) => {
        z(s.strings, (o) => {
          const a = o.col, l = this.hot.getCellMeta(e, a), c = this.hot.getCellRenderer(l), u = t.createElement("td");
          u.setAttribute("ghost-table", 1), c(this.hot, u, e, a, this.hot.colToProp(a), o.value, l), i.appendChild(u);
        });
      }), i;
    }
    /**
     * Creates DOM elements for headers and appends them to the THEAD element of the table.
     */
    appendColumnHeadersRow() {
      const {
        rootDocument: e
      } = this.hot, t = e.createDocumentFragment(), i = [];
      if (this.hot.hasRowHeaders()) {
        const r = e.createElement("th");
        i.push([-1, r]), t.appendChild(r);
      }
      this.samples.forEach((r) => {
        z(r.strings, (s) => {
          const o = s.col, a = e.createElement("th");
          i.push([o, a]), t.appendChild(a);
        });
      }), this.table.tHead.appendChild(t), z(i, (r) => {
        const [s, o] = r;
        this.hot.view.appendColHeader(s, o);
      });
    }
    /**
     * Create table column elements.
     *
     * @param {number} column Visual column index.
     * @returns {DocumentFragment} Returns created column table column elements.
     */
    createCol(e) {
      const {
        rootDocument: t
      } = this.hot, i = t.createDocumentFragment();
      return this.samples.forEach((r) => {
        z(r.strings, (s) => {
          const o = s.row, a = this.hot.getCellMeta(o, e), l = this.hot.getCellRenderer(a), c = t.createElement("td"), u = t.createElement("tr");
          c.setAttribute("ghost-table", 1), l(this.hot, c, o, e, this.hot.colToProp(e), s.value, a), u.appendChild(c), i.appendChild(u);
        });
      }), i;
    }
    /**
     * Remove table from document and reset internal state.
     */
    clean() {
      this.rows.length = 0, this.rows[-1] = void 0, this.columns.length = 0, this.samples && this.samples.clear(), this.samples = null, this.removeTable();
    }
    /**
     * Inject generated table into document.
     *
     * @param {HTMLElement} [parent=null] The element to which the ghost table is injected.
     */
    injectTable() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
      this.injected || ((e || this.hot.rootElement).appendChild(this.container.fragment), this.injected = !0);
    }
    /**
     * Remove table from document.
     */
    removeTable() {
      this.injected && this.container.container.parentNode && (this.container.container.parentNode.removeChild(this.container.container), this.container = null, this.injected = !1);
    }
    /**
     * Create col element.
     *
     * @param {number} column Visual column index.
     * @param {number} row Visual row index.
     * @returns {HTMLElement}
     */
    createColElement(e, t) {
      const i = this.hot.rootDocument.createElement("col");
      let r = 0;
      t >= 0 && e >= 0 && (r = this.hot.getCellMeta(t, e).colspan);
      let s = this.hot.getColWidth(e);
      if (r > 1)
        for (let o = e + 1; o < e + r; o++)
          s += this.hot.getColWidth(o);
      return i.style.width = `${s}px`, i;
    }
    /**
     * Create table element.
     *
     * @param {string} className The CSS classes to add.
     * @returns {object}
     */
    createTable() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
      const {
        rootDocument: t
      } = this.hot, i = t.createDocumentFragment(), r = t.createElement("table"), s = t.createElement("thead"), o = t.createElement("tbody"), a = t.createElement("colgroup"), l = t.createElement("tr"), c = t.createElement("th");
      return this.isVertical() && r.appendChild(a), this.isHorizontal() && (l.appendChild(c), s.appendChild(l), r.style.tableLayout = "auto", r.style.width = "auto"), r.appendChild(s), this.isVertical() && o.appendChild(l), r.appendChild(o), ue(r, e), i.appendChild(r), {
        fragment: i,
        table: r,
        tHead: s,
        tBody: o,
        colGroup: a,
        tr: l,
        th: c
      };
    }
    /**
     * Create container for tables.
     *
     * @param {string} className The CSS classes to add.
     * @returns {object}
     */
    createContainer() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
      const {
        rootDocument: t
      } = this.hot, i = t.createDocumentFragment(), r = t.createElement("div"), s = `htGhostTable htAutoSize ${e.trim()}`;
      return ue(r, s), i.appendChild(r), {
        fragment: i,
        container: r
      };
    }
    /**
     * Checks if table is raised vertically (checking rows).
     *
     * @returns {boolean}
     */
    isVertical() {
      return !!(this.rows.length && !this.columns.length);
    }
    /**
     * Checks if table is raised horizontally (checking columns).
     *
     * @returns {boolean}
     */
    isHorizontal() {
      return !!(this.columns.length && !this.rows.length);
    }
  };
  function Y0(n, e, t) {
    return (e = JAe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function JAe(n) {
    var e = ePe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function ePe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class J1 {
    /**
     * Number of samples to take of each value length.
     *
     * @type {number}
     */
    static get SAMPLE_COUNT() {
      return 3;
    }
    /**
     * Samples prepared for calculations.
     *
     * @type {Map}
     * @default {null}
     */
    constructor(e) {
      Y0(this, "samples", null), Y0(this, "dataFactory", null), Y0(this, "customSampleCount", null), Y0(this, "allowDuplicates", !1), this.dataFactory = e;
    }
    /**
     * Get the sample count for this instance.
     *
     * @returns {number}
     */
    getSampleCount() {
      return this.customSampleCount ? this.customSampleCount : J1.SAMPLE_COUNT;
    }
    /**
     * Set the sample count.
     *
     * @param {number} sampleCount Number of samples to be collected.
     */
    setSampleCount(e) {
      this.customSampleCount = e;
    }
    /**
     * Set if the generator should accept duplicate values.
     *
     * @param {boolean} allowDuplicates `true` to allow duplicate values.
     */
    setAllowDuplicates(e) {
      this.allowDuplicates = e;
    }
    /**
     * Generate samples for row. You can control which area should be sampled by passing `rowRange` object and `colRange` object.
     *
     * @param {object|number} rowRange The rows range to generate the samples.
     * @param {object} colRange The column range to generate the samples.
     * @returns {object}
     */
    generateRowSamples(e, t) {
      return this.generateSamples("row", t, e);
    }
    /**
     * Generate samples for column. You can control which area should be sampled by passing `colRange` object and `rowRange` object.
     *
     * @param {object} colRange Column index.
     * @param {object} rowRange Column index.
     * @returns {object}
     */
    generateColumnSamples(e, t) {
      return this.generateSamples("col", t, e);
    }
    /**
     * Generate collection of samples.
     *
     * @param {string} type Type to generate. Can be `col` or `row`.
     * @param {object} range The range to generate the samples.
     * @param {object|number} specifierRange The range to generate the samples.
     * @returns {Map}
     */
    generateSamples(e, t, i) {
      const r = /* @__PURE__ */ new Map(), {
        from: s,
        to: o
      } = typeof i == "number" ? {
        from: i,
        to: i
      } : i;
      return $e(s, o, (a) => {
        const l = this.generateSample(e, t, a);
        r.set(a, l);
      }), r;
    }
    /**
     * Generate sample for specified type (`row` or `col`).
     *
     * @param {string} type Samples type `row` or `col`.
     * @param {object} range The range to generate the samples.
     * @param {number} specifierValue The range to generate the samples.
     * @returns {Map}
     */
    generateSample(e, t, i) {
      if (e !== "row" && e !== "col")
        throw new Error("Unsupported sample type");
      const r = /* @__PURE__ */ new Map(), s = e === "row" ? "col" : "row", o = [];
      return $e(t.from, t.to, (a) => {
        const l = e === "row" ? this.dataFactory(i, a) : this.dataFactory(a, i);
        if (l === !1)
          return;
        const {
          value: c,
          bundleSeed: u
        } = l, h = typeof u == "string" && u.length > 0;
        let d;
        h ? d = u : at(c) ? d = `${Object.keys(c).length}` : Array.isArray(c) ? d = `${c.length}` : d = `${Vn(c).length}`, r.has(d) || r.set(d, {
          needed: this.getSampleCount(),
          strings: []
        });
        const f = r.get(d);
        f.needed && (!(o.indexOf(c) > -1) || this.allowDuplicates || h) && (f.strings.push({
          value: c,
          [s]: a
        }), o.push(c), f.needed -= 1);
      }), r;
    }
  }
  function tPe(n, e) {
    zG(n, e), e.add(n);
  }
  function S3(n, e, t) {
    zG(n, e), e.set(n, t);
  }
  function zG(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function Xm(n, e, t) {
    return (e = nPe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function nPe(n) {
    var e = iPe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function iPe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function _d(n, e) {
    return n.get(La(n, e));
  }
  function VL(n, e, t) {
    return n.set(La(n, e), t), t;
  }
  function La(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  Ie.getSingleton().register("modifyAutoColumnSizeSeed");
  const Zm = "autoColumnSize", rPe = 10, sPe = "autoColumnSize";
  var Pg = /* @__PURE__ */ new WeakMap(), xp = /* @__PURE__ */ new WeakMap(), zl = /* @__PURE__ */ new WeakSet();
  class _v extends Lt {
    static get PLUGIN_KEY() {
      return Zm;
    }
    static get PLUGIN_PRIORITY() {
      return rPe;
    }
    static get SETTING_KEYS() {
      return !0;
    }
    static get CALCULATION_STEP() {
      return 50;
    }
    static get SYNC_CALCULATION_LIMIT() {
      return 50;
    }
    /**
     * Instance of {@link GhostTable} for rows and columns size calculations.
     *
     * @private
     * @type {GhostTable}
     */
    constructor(e) {
      super(e), tPe(this, zl), Xm(this, "ghostTable", new BL(this.hot)), Xm(this, "samplesGenerator", new J1((t, i) => {
        const r = this.hot.toPhysicalRow(t), s = this.hot.toPhysicalColumn(i);
        if (this.hot.rowIndexMapper.isHidden(r) || this.hot.columnIndexMapper.isHidden(s))
          return !1;
        const o = this.hot.getCellMeta(t, i);
        let a = "";
        o.spanned || (a = this.hot.getDataAtCell(t, i));
        let l = "";
        return this.hot.hasHook("modifyAutoColumnSizeSeed") && (l = this.hot.runHooks("modifyAutoColumnSizeSeed", l, o, a)), {
          value: a,
          bundleSeed: l
        };
      })), Xm(this, "inProgress", !1), Xm(this, "measuredColumns", 0), Xm(this, "columnWidthsMap", new uh()), S3(this, Pg, []), S3(this, xp, []), this.hot.columnIndexMapper.registerMap(sPe, this.columnWidthsMap), this.addHook("beforeColumnResize", (t, i, r) => La(zl, this, _3).call(this, t, i, r));
    }
    /**
     * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link #enablePlugin} method is called.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return this.hot.getSettings()[Zm] !== !1 && !this.hot.getSettings().colWidths;
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
    enablePlugin() {
      var e = this;
      if (this.enabled)
        return;
      const t = this.hot.getSettings()[Zm];
      t && t.useHeaders !== null && t.useHeaders !== void 0 && this.ghostTable.setSetting("useHeaders", t.useHeaders), this.setSamplingOptions(), this.addHook("afterLoadData", function() {
        for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
          r[s] = arguments[s];
        return La(zl, e, lPe).call(e, ...r);
      }), this.addHook("beforeChangeRender", function() {
        for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
          r[s] = arguments[s];
        return La(zl, e, cPe).call(e, ...r);
      }), this.addHook("afterFormulasValuesUpdate", function() {
        for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
          r[s] = arguments[s];
        return La(zl, e, hPe).call(e, ...r);
      }), this.addHook("beforeRender", () => La(zl, this, aPe).call(this)), this.addHook("modifyColWidth", (i, r) => this.getColumnWidth(r, i)), this.addHook("init", () => La(zl, this, uPe).call(this)), super.enablePlugin();
    }
    /**
     * Updates the plugin's state. This method is executed when {@link Core#updateSettings} is invoked.
     */
    updatePlugin() {
      VL(xp, this, this.findColumnsWhereHeaderWasChanged()), super.updatePlugin();
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
    disablePlugin() {
      super.disablePlugin(), this.addHook("beforeColumnResize", (e, t, i) => La(zl, this, _3).call(this, e, t, i));
    }
    /**
     * Calculates widths for visible columns in the viewport only.
     */
    calculateVisibleColumnsWidth() {
      if (!this.hot.countRows())
        return;
      const e = this.getFirstVisibleColumn(), t = this.getLastVisibleColumn();
      if (e === -1 || t === -1)
        return;
      const i = this.hot.renderCall;
      this.calculateColumnsWidth({
        from: e,
        to: t
      }, void 0, i);
    }
    /**
     * Calculates a columns width.
     *
     * @param {number|object} colRange Visual column index or an object with `from` and `to` visual indexes as a range.
     * @param {number|object} rowRange Visual row index or an object with `from` and `to` visual indexes as a range.
     * @param {boolean} [overwriteCache=false] If `true` the calculation will be processed regardless of whether the width exists in the cache.
     */
    calculateColumnsWidth() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        from: 0,
        to: this.hot.countCols() - 1
      }, t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        from: 0,
        to: this.hot.countRows() - 1
      }, i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
      const r = typeof e == "number" ? {
        from: e,
        to: e
      } : e, s = typeof t == "number" ? {
        from: t,
        to: t
      } : t;
      $e(r.from, r.to, (o) => {
        let a = this.hot.toPhysicalColumn(o);
        a === null && (a = o), (i || this.columnWidthsMap.getValueAtIndex(a) === null && !this.hot._getColWidthFromSettings(a)) && this.samplesGenerator.generateColumnSamples(o, s).forEach((c, u) => this.ghostTable.addColumn(u, c));
      }), this.ghostTable.columns.length && (this.hot.batchExecution(() => {
        this.ghostTable.getWidths((o, a) => {
          const l = this.hot.toPhysicalColumn(o);
          this.columnWidthsMap.setValueAtIndex(l, a);
        });
      }, !0), this.measuredColumns = r.to + 1, this.ghostTable.clean());
    }
    /**
     * Calculates all columns width. The calculated column will be cached in the {@link AutoColumnSize#widths} property.
     * To retrieve width for specified column use {@link AutoColumnSize#getColumnWidth} method.
     *
     * @param {object|number} rowRange Row index or an object with `from` and `to` properties which define row range.
     * @param {boolean} [overwriteCache] If `true` the calculation will be processed regardless of whether the width exists in the cache.
     */
    calculateAllColumnsWidth() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        from: 0,
        to: this.hot.countRows() - 1
      }, t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, i = 0;
      const r = this.hot.countCols() - 1;
      let s = null;
      this.inProgress = !0;
      const o = () => {
        if (!this.hot) {
          fw(s), this.inProgress = !1;
          return;
        }
        this.calculateColumnsWidth({
          from: i,
          to: Math.min(i + _v.CALCULATION_STEP, r)
        }, e, t), i = i + _v.CALCULATION_STEP + 1, i < r ? s = $1(o) : (fw(s), this.inProgress = !1, this.hot.view.adjustElementsSize());
      }, a = this.getSyncCalculationLimit();
      a >= 0 && (this.calculateColumnsWidth({
        from: 0,
        to: a
      }, e, t), i = a + 1), i < r ? o() : this.inProgress = !1;
    }
    /**
     * Sets the sampling options.
     *
     * @private
     */
    setSamplingOptions() {
      const e = this.hot.getSettings()[Zm], t = e && In(e, "samplingRatio") ? e.samplingRatio : void 0, i = e && In(e, "allowSampleDuplicates") ? e.allowSampleDuplicates : void 0;
      t && !isNaN(t) && this.samplesGenerator.setSampleCount(parseInt(t, 10)), i && this.samplesGenerator.setAllowDuplicates(i);
    }
    /**
     * Recalculates all columns width (overwrite cache values).
     */
    recalculateAllColumnsWidth() {
      this.hot.view.isVisible() && this.calculateAllColumnsWidth({
        from: 0,
        to: this.hot.countRows() - 1
      }, !0);
    }
    /**
     * Gets value which tells how many columns should be calculated synchronously (rest of the columns will be calculated
     * asynchronously). The limit is calculated based on `syncLimit` set to `autoColumnSize` option (see {@link Options#autoColumnSize}).
     *
     * @returns {number}
     */
    getSyncCalculationLimit() {
      const e = this.hot.getSettings()[Zm];
      let t = _v.SYNC_CALCULATION_LIMIT;
      const i = this.hot.countCols() - 1;
      return at(e) && (t = e.syncLimit, aD(t) ? t = ID(i, t) : t >>= 0), Math.min(t, i);
    }
    /**
     * Gets the calculated column width.
     *
     * @param {number} column Visual column index.
     * @param {number} [defaultWidth] Default column width. It will be picked up if no calculated width found.
     * @param {boolean} [keepMinimum=true] If `true` then returned value won't be smaller then 50 (default column width).
     * @returns {number}
     */
    getColumnWidth(e, t) {
      let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0, r = t;
      return r === void 0 && (r = this.columnWidthsMap.getValueAtIndex(this.hot.toPhysicalColumn(e)), i && typeof r == "number" && (r = Math.max(r, V1))), r;
    }
    /**
     * Gets the first visible column.
     *
     * @returns {number} Returns visual column index, -1 if table is not rendered or if there are no columns to base the the calculations on.
     */
    getFirstVisibleColumn() {
      var e;
      return (e = this.hot.view.getFirstRenderedVisibleColumn()) !== null && e !== void 0 ? e : -1;
    }
    /**
     * Gets the last visible column.
     *
     * @returns {number} Returns visual column index or -1 if table is not rendered.
     */
    getLastVisibleColumn() {
      var e;
      return (e = this.hot.view.getLastRenderedVisibleColumn()) !== null && e !== void 0 ? e : -1;
    }
    /**
     * Collects all columns which titles has been changed in comparison to the previous state.
     *
     * @private
     * @returns {Array} It returns an array of visual column indexes.
     */
    findColumnsWhereHeaderWasChanged() {
      return this.hot.getColHeader().reduce((i, r, s) => {
        const o = _d(Pg, this).length;
        return (o - 1 < s || _d(Pg, this)[s] !== r) && i.push(this.hot.toVisualColumn(s)), o - 1 < s ? _d(Pg, this).push(r) : _d(Pg, this)[s] = r, i;
      }, []);
    }
    /**
     * Clears cache of calculated column widths. If you want to clear only selected columns pass an array with their indexes.
     * Otherwise whole cache will be cleared.
     *
     * @param {number[]} [physicalColumns] List of physical column indexes to clear.
     */
    clearCache(e) {
      Array.isArray(e) ? this.hot.batchExecution(() => {
        e.forEach((t) => {
          this.columnWidthsMap.setValueAtIndex(t, null);
        });
      }, !0) : this.columnWidthsMap.clear();
    }
    /**
     * Checks if all widths were calculated. If not then return `true` (need recalculate).
     *
     * @returns {boolean}
     */
    isNeedRecalculate() {
      return !!this.columnWidthsMap.getValues().slice(0, this.measuredColumns).filter((e) => e === null).length;
    }
    /**
     * On before view render listener.
     */
    /**
     * Destroys the plugin instance.
     */
    destroy() {
      this.ghostTable.clean(), super.destroy();
    }
  }
  function oPe(n) {
    const e = {
      from: 0,
      to: this.hot.countRows() - 1
    };
    n.forEach((t) => {
      const i = this.hot.toPhysicalColumn(t);
      i !== null && (this.hot._getColWidthFromSettings(i) || this.samplesGenerator.generateColumnSamples(t, e).forEach((s, o) => this.ghostTable.addColumn(o, s)));
    }), this.ghostTable.columns.length && (this.hot.batchExecution(() => {
      this.ghostTable.getWidths((t, i) => {
        const r = this.hot.toPhysicalColumn(t);
        this.columnWidthsMap.setValueAtIndex(r, i);
      });
    }, !0), this.ghostTable.clean());
  }
  function aPe() {
    this.calculateVisibleColumnsWidth(), this.inProgress || (La(zl, this, oPe).call(this, _d(xp, this)), VL(xp, this, []));
  }
  function lPe(n, e) {
    e || this.recalculateAllColumnsWidth();
  }
  function cPe(n) {
    const e = n.reduce((t, i) => {
      let [, r] = i;
      const s = this.hot.propToCol(r);
      return Number.isInteger(s) && t.indexOf(s) === -1 && t.push(s), t;
    }, []);
    _d(xp, this).push(...e);
  }
  function _3(n, e, t) {
    let i = n;
    return t && (this.calculateColumnsWidth(e, void 0, !0), i = this.getColumnWidth(e, void 0, !1)), i;
  }
  function uPe() {
    VL(Pg, this, this.hot.getColHeader()), this.recalculateAllColumnsWidth();
  }
  function hPe(n) {
    const e = n.reduce((t, i) => {
      var r;
      const s = (r = i.address) === null || r === void 0 ? void 0 : r.col;
      if (Number.isInteger(s)) {
        const o = this.hot.toVisualColumn(s);
        t.indexOf(o) === -1 && t.push(o);
      }
      return t;
    }, []);
    _d(xp, this).push(...e);
  }
  const Rd = {
    horizontal: "horizontal",
    vertical: "vertical"
  };
  function dPe(n, e, t) {
    let i, r, s;
    return e[0] === n[0] && e[1] < n[1] ? (s = "left", i = t(e[0], e[1]), r = t(e[2], n[1] - 1)) : e[2] === n[2] && e[0] === n[0] && e[3] > n[3] ? (s = "right", i = t(e[0], n[3] + 1), r = t(e[2], e[3])) : e[0] < n[0] && e[1] === n[1] ? (s = "up", i = t(e[0], e[1]), r = t(n[0] - 1, e[3])) : e[2] > n[2] && e[1] === n[1] && (s = "down", i = t(n[2] + 1, e[1]), r = t(e[2], e[3])), i && i.normalize(), r && r.normalize(), {
      directionOfDrag: s,
      startOfDragCoords: i,
      endOfDragCoords: r
    };
  }
  function fPe(n) {
    const e = {};
    return n === !0 ? (e.directions = Object.keys(Rd), e.autoInsertRow = !0) : at(n) ? (ke(n.autoInsertRow) ? n.direction === Rd.horizontal ? e.autoInsertRow = !1 : e.autoInsertRow = n.autoInsertRow : e.autoInsertRow = !1, ke(n.direction) ? e.directions = [n.direction] : e.directions = Object.keys(Rd)) : typeof n == "string" ? (e.directions = [n], e.autoInsertRow = !0) : (e.directions = [], e.autoInsertRow = !1), e;
  }
  function gPe(n, e) {
    pPe(n, e), e.add(n);
  }
  function pPe(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function eg(n, e, t) {
    return (e = mPe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function mPe(n) {
    var e = bPe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function bPe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function Qm(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  Ie.getSingleton().register("modifyAutofillRange");
  Ie.getSingleton().register("beforeAutofill");
  Ie.getSingleton().register("afterAutofill");
  const R3 = "autofill", vPe = 20, wPe = ["fillHandle"], yPe = "insert_row_below", CPe = 200;
  var tg = /* @__PURE__ */ new WeakSet();
  class SPe extends Lt {
    constructor() {
      super(...arguments), gPe(this, tg), eg(this, "addingStarted", !1), eg(this, "mouseDownOnCellCorner", !1), eg(this, "mouseDragOutside", !1), eg(this, "handleDraggedCells", 0), eg(this, "directions", []), eg(this, "autoInsertRow", !1);
    }
    static get PLUGIN_KEY() {
      return R3;
    }
    static get PLUGIN_PRIORITY() {
      return vPe;
    }
    static get SETTING_KEYS() {
      return [R3, ...wPe];
    }
    /**
     * Checks if the plugin is enabled in the Handsontable settings.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return this.hot.getSettings().fillHandle;
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
    enablePlugin() {
      this.enabled || (this.mapSettings(), this.registerEvents(), this.addHook("afterOnCellCornerMouseDown", (e) => Qm(tg, this, RPe).call(this, e)), this.addHook("afterOnCellCornerDblClick", (e) => Qm(tg, this, _Pe).call(this, e)), this.addHook("beforeOnCellMouseOver", (e, t) => Qm(tg, this, EPe).call(this, t)), super.enablePlugin());
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - `autofill`
     *  - [`fillHandle`](@/api/options.md#fillhandle)
     */
    updatePlugin() {
      this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
    disablePlugin() {
      this.clearMappedSettings(), super.disablePlugin();
    }
    /**
     * Gets selection data.
     *
     * @private
     * @returns {object[]} Ranges Array of objects with properties `startRow`, `startCol`, `endRow` and `endCol`.
     */
    getSelectionData() {
      const e = this.hot.getSelectedRangeLast(), {
        row: t,
        col: i
      } = e.getTopStartCorner(), {
        row: r,
        col: s
      } = e.getBottomEndCorner(), o = this.hot.runHooks("modifyCopyableRange", [{
        startRow: t,
        startCol: i,
        endRow: r,
        endCol: s
      }]), a = [], l = [], c = [];
      return z(o, (u) => {
        for (let h = u.startRow; h <= u.endRow; h += 1)
          a.indexOf(h) === -1 && a.push(h);
        for (let h = u.startCol; h <= u.endCol; h += 1)
          l.indexOf(h) === -1 && l.push(h);
      }), z(a, (u) => {
        const h = [];
        z(l, (d) => {
          h.push(this.hot.getCopyableData(u, d));
        }), c.push(h);
      }), c;
    }
    /**
     * Try to apply fill values to the area in fill border, omitting the selection border.
     *
     * @private
     * @returns {boolean} Reports if fill was applied.
     *
     * @fires Hooks#modifyAutofillRange
     * @fires Hooks#beforeAutofill
     * @fires Hooks#afterAutofill
     */
    fillIn() {
      if (this.hot.selection.highlight.getFill().isEmpty())
        return !1;
      const [e, t, i, r] = this.hot.selection.highlight.getFill().getVisualCorners(), s = this.hot.getSelectedRangeLast(), o = s.getTopStartCorner(), a = s.getBottomEndCorner();
      this.resetSelectionOfDraggedArea();
      const l = [o.row, o.col, a.row, a.col], c = this.hot.runHooks("modifyAutofillRange", [Math.min(o.row, e), Math.min(o.col, t), Math.max(a.row, i), Math.max(a.col, r)], l), {
        directionOfDrag: u,
        startOfDragCoords: h,
        endOfDragCoords: d
      } = dPe(l, c, (f, g) => this.hot._createCellCoords(f, g));
      if (h && h.row > -1 && h.col > -1) {
        const f = this.getSelectionData(), g = s.clone(), p = this.hot._createCellRange(h, h, d), m = this.hot.runHooks("beforeAutofill", f, g, p, u);
        if (m === !1)
          return this.hot.selection.highlight.getFill().clear(), this.hot.render(), !1;
        let v = m;
        const y = m;
        if (["up", "left"].indexOf(u) > -1 && !(y.length === 1 && y[0].length === 0))
          if (v = [], u === "up") {
            const w = d.row - h.row + 1, R = w % y.length;
            for (let E = 0; E < w; E++)
              v.push(y[(E + (y.length - R)) % y.length]);
          } else {
            const w = d.col - h.col + 1, R = w % y[0].length;
            for (let E = 0; E < y.length; E++) {
              v.push([]);
              for (let C = 0; C < w; C++)
                v[E].push(y[E][(C + (y[E].length - R)) % y[E].length]);
            }
          }
        this.hot.populateFromArray(h.row, h.col, v, d.row, d.col, `${this.pluginName}.fill`, null), this.setSelection(c), this.hot.runHooks("afterAutofill", v, g, p, u), this.hot.render();
      } else
        this.hot.view.render();
      return !0;
    }
    /**
     * Reduces the selection area if the handle was dragged outside of the table or on headers.
     *
     * @private
     * @param {CellCoords} coords Indexes of selection corners.
     * @returns {CellCoords}
     */
    reduceSelectionAreaIfNeeded(e) {
      return e.row < 0 && (e.row = 0), e.col < 0 && (e.col = 0), e;
    }
    /**
     * Gets the coordinates of the drag & drop borders.
     *
     * @private
     * @param {CellCoords} coordsOfSelection `CellCoords` coord object.
     * @returns {CellCoords}
     */
    getCoordsOfDragAndDropBorders(e) {
      const t = this.hot.getSelectedRangeLast(), i = t.getBottomEndCorner();
      let r = e;
      if (this.directions.includes(Rd.vertical) && this.directions.includes(Rd.horizontal)) {
        const s = t.getTopStartCorner();
        (i.col <= e.col || s.col >= e.col) && (r = this.hot._createCellCoords(i.row, e.col)), (i.row < e.row || s.row > e.row) && (r = this.hot._createCellCoords(e.row, i.col));
      } else if (this.directions.includes(Rd.vertical))
        r = this.hot._createCellCoords(e.row, i.col);
      else if (this.directions.includes(Rd.horizontal))
        r = this.hot._createCellCoords(i.row, e.col);
      else
        return;
      return this.reduceSelectionAreaIfNeeded(r);
    }
    /**
     * Show the fill border.
     *
     * @private
     * @param {CellCoords} coordsOfSelection `CellCoords` coord object.
     */
    showBorder(e) {
      const t = this.getCoordsOfDragAndDropBorders(e);
      t && this.redrawBorders(t);
    }
    /**
     * Add new row.
     *
     * @private
     */
    addRow() {
      this.hot._registerTimeout(() => {
        this.hot.alter(yPe, void 0, 1, `${this.pluginName}.fill`), this.addingStarted = !1;
      }, CPe);
    }
    /**
     * Add new rows if they are needed to continue auto-filling values.
     *
     * @private
     */
    addNewRowIfNeeded() {
      if (!this.hot.selection.highlight.getFill().isEmpty() && this.addingStarted === !1 && this.autoInsertRow) {
        const e = this.hot.getSelectedLast(), t = this.hot.selection.highlight.getFill().getVisualCorners(), i = this.hot.countRows();
        e[2] < i - 1 && t[2] === i - 1 && (this.addingStarted = !0, this.addRow());
      }
    }
    /**
     * Get index of last adjacent filled in row.
     *
     * @private
     * @param {Array} cornersOfSelectedCells Indexes of selection corners.
     * @returns {number} Gives number greater than or equal to zero when selection adjacent can be applied.
     *                   Or -1 when selection adjacent can't be applied.
     */
    getIndexOfLastAdjacentFilledInRow(e) {
      const t = this.hot.getData(), i = this.hot.countRows();
      let r;
      for (let s = e[2] + 1; s < i; s++) {
        for (let l = e[1]; l <= e[3]; l++) {
          const c = t[s][l];
          if (!Wn(c))
            return -1;
        }
        const o = t[s][e[1] - 1], a = t[s][e[3] + 1];
        (!Wn(o) || !Wn(a)) && (r = s);
      }
      return r;
    }
    /**
     * Adds a selection from the start area to the specific row index.
     *
     * @private
     * @param {Array} selectStartArea Selection area from which we start to create more comprehensive selection.
     * @param {number} rowIndex The row index into the selection will be added.
     */
    addSelectionFromStartAreaToSpecificRowIndex(e, t) {
      this.hot.selection.highlight.getFill().clear().add(this.hot._createCellCoords(e[0], e[1])).add(this.hot._createCellCoords(t, e[3])).commit();
    }
    /**
     * Sets selection based on passed corners.
     *
     * @private
     * @param {Array} cornersOfArea An array witch defines selection.
     */
    setSelection(e) {
      this.hot.selectCell(...mt(e, (t) => Math.max(t, 0)), !1, !1);
    }
    /**
     * Try to select cells down to the last row in the left column and then returns if selection was applied.
     *
     * @private
     * @returns {boolean}
     */
    selectAdjacent() {
      const e = this.hot.getSelectedLast(), t = this.getIndexOfLastAdjacentFilledInRow(e);
      return t === -1 || t === void 0 ? !1 : (this.addSelectionFromStartAreaToSpecificRowIndex(e, t), !0);
    }
    /**
     * Resets selection of dragged area.
     *
     * @private
     */
    resetSelectionOfDraggedArea() {
      this.handleDraggedCells = 0, this.hot.selection.highlight.getFill().clear();
    }
    /**
     * Redraws borders.
     *
     * @private
     * @param {CellCoords} coords `CellCoords` coord object.
     */
    redrawBorders(e) {
      this.hot.selection.highlight.getFill().clear().add(this.hot.getSelectedRangeLast().from).add(this.hot.getSelectedRangeLast().to).add(e).commit(), this.hot.view.render();
    }
    /**
     * Get if mouse was dragged outside.
     *
     * @private
     * @param {MouseEvent} event `mousemove` event properties.
     * @returns {boolean}
     */
    getIfMouseWasDraggedOutside(e) {
      const {
        documentElement: t
      } = this.hot.rootDocument, i = _i(this.hot.table).top - (this.hot.rootWindow.pageYOffset || t.scrollTop) + ti(this.hot.table), r = _i(this.hot.table).left - (this.hot.rootWindow.pageXOffset || t.scrollLeft) + fn(this.hot.table);
      return e.clientY > i && e.clientX <= r;
    }
    /**
     * Bind the events used by the plugin.
     *
     * @private
     */
    registerEvents() {
      const {
        documentElement: e
      } = this.hot.rootDocument;
      this.eventManager.addEventListener(e, "mouseup", () => Qm(tg, this, xPe).call(this)), this.eventManager.addEventListener(e, "mousemove", (t) => Qm(tg, this, TPe).call(this, t));
    }
    /**
     * Clears mapped settings.
     *
     * @private
     */
    clearMappedSettings() {
      this.directions.length = 0, this.autoInsertRow = !1;
    }
    /**
     * Map settings.
     *
     * @private
     */
    mapSettings() {
      const e = fPe(this.hot.getSettings().fillHandle);
      this.directions = e.directions, this.autoInsertRow = e.autoInsertRow;
    }
    /**
     * Destroys the plugin instance.
     */
    destroy() {
      super.destroy();
    }
  }
  function _Pe() {
    this.selectAdjacent() && this.fillIn();
  }
  function RPe() {
    this.handleDraggedCells = 1, this.mouseDownOnCellCorner = !0;
  }
  function EPe(n) {
    this.mouseDownOnCellCorner && !this.hot.view.isMouseDown() && this.handleDraggedCells && (this.handleDraggedCells += 1, this.showBorder(n), this.addNewRowIfNeeded());
  }
  function xPe() {
    this.handleDraggedCells && (this.handleDraggedCells > 1 && this.fillIn(), this.handleDraggedCells = 0, this.mouseDownOnCellCorner = !1);
  }
  function TPe(n) {
    const e = this.getIfMouseWasDraggedOutside(n);
    this.addingStarted === !1 && this.handleDraggedCells > 0 && e ? (this.mouseDragOutside = !0, this.addingStarted = !0) : this.mouseDragOutside = !1, this.mouseDragOutside && this.autoInsertRow && this.addRow();
  }
  function MPe(n, e) {
    UG(n, e), e.add(n);
  }
  function APe(n, e, t) {
    UG(n, e), e.set(n, t);
  }
  function UG(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function ng(n, e, t) {
    return (e = PPe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function PPe(n) {
    var e = IPe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function IPe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function OPe(n, e, t) {
    return n.set(Ha(n, e), t), t;
  }
  function WL(n, e) {
    return n.get(Ha(n, e));
  }
  function Ha(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  const K0 = "autoRowSize", kPe = 40, DPe = "autoRowSize";
  var vw = /* @__PURE__ */ new WeakMap(), Ul = /* @__PURE__ */ new WeakSet();
  class Rv extends Lt {
    static get PLUGIN_KEY() {
      return K0;
    }
    static get PLUGIN_PRIORITY() {
      return kPe;
    }
    static get SETTING_KEYS() {
      return !0;
    }
    static get CALCULATION_STEP() {
      return 50;
    }
    static get SYNC_CALCULATION_LIMIT() {
      return 500;
    }
    /**
     * Columns header's height cache.
     *
     * @private
     * @type {number}
     */
    constructor(e) {
      super(e), MPe(this, Ul), ng(this, "headerHeight", null), ng(this, "ghostTable", new BL(this.hot)), ng(this, "samplesGenerator", new J1((t, i) => {
        const r = this.hot.toPhysicalRow(t), s = this.hot.toPhysicalColumn(i);
        if (this.hot.rowIndexMapper.isHidden(r) || this.hot.columnIndexMapper.isHidden(s) || t >= 0 && i >= 0 && this.hot.getCellMeta(t, i).hidden)
          return !1;
        let o;
        return t >= 0 ? o = this.hot.getDataAtCell(t, i) : t === -1 && (o = this.hot.getColHeader(i)), {
          value: o
        };
      })), ng(this, "inProgress", !1), ng(this, "measuredRows", 0), ng(this, "rowHeightsMap", new uh()), APe(this, vw, []), this.hot.rowIndexMapper.registerMap(DPe, this.rowHeightsMap), this.addHook("beforeRowResize", (t, i, r) => Ha(Ul, this, E3).call(this, t, i, r));
    }
    /**
     * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link AutoRowSize#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
    isEnabled() {
      const e = this.hot.getSettings()[K0];
      return e === !0 || at(e);
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
    enablePlugin() {
      var e = this;
      this.enabled || (this.setSamplingOptions(), this.addHook("afterLoadData", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ha(Ul, e, HPe).call(e, ...i);
      }), this.addHook("beforeChangeRender", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ha(Ul, e, $Pe).call(e, ...i);
      }), this.addHook("beforeColumnResize", () => this.recalculateAllRowsHeight()), this.addHook("afterFormulasValuesUpdate", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ha(Ul, e, BPe).call(e, ...i);
      }), this.addHook("beforeRender", () => Ha(Ul, this, LPe).call(this)), this.addHook("modifyRowHeight", (t, i) => this.getRowHeight(i, t)), this.addHook("init", () => Ha(Ul, this, FPe).call(this)), this.addHook("modifyColumnHeaderHeight", () => this.getColumnHeaderHeight()), super.enablePlugin());
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
    disablePlugin() {
      this.headerHeight = null, super.disablePlugin(), this.addHook("beforeRowResize", (e, t, i) => Ha(Ul, this, E3).call(this, e, t, i));
    }
    /**
     * Calculates heights for visible rows in the viewport only.
     */
    calculateVisibleRowsHeight() {
      if (!this.hot.countCols())
        return;
      const e = this.getFirstVisibleRow(), t = this.getLastVisibleRow();
      if (e === -1 || t === -1)
        return;
      const i = this.hot.renderCall;
      this.calculateRowsHeight({
        from: e,
        to: t
      }, void 0, i);
    }
    /**
     * Calculate a given rows height.
     *
     * @param {number|object} rowRange Row index or an object with `from` and `to` indexes as a range.
     * @param {number|object} colRange Column index or an object with `from` and `to` indexes as a range.
     * @param {boolean} [overwriteCache=false] If `true` the calculation will be processed regardless of whether the width exists in the cache.
     */
    calculateRowsHeight() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        from: 0,
        to: this.hot.countRows() - 1
      }, t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        from: 0,
        to: this.hot.countCols() - 1
      }, i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
      const r = typeof e == "number" ? {
        from: e,
        to: e
      } : e, s = typeof t == "number" ? {
        from: t,
        to: t
      } : t;
      if (this.hot.getColHeader(0) !== null) {
        const o = this.samplesGenerator.generateRowSamples(-1, s);
        this.ghostTable.addColumnHeadersRow(o.get(-1));
      }
      $e(r.from, r.to, (o) => {
        let a = this.hot.toPhysicalRow(o);
        a === null && (a = o), (i || this.rowHeightsMap.getValueAtIndex(a) === null) && this.samplesGenerator.generateRowSamples(o, s).forEach((c, u) => this.ghostTable.addRow(u, c));
      }), this.ghostTable.rows.length && (this.hot.batchExecution(() => {
        this.ghostTable.getHeights((o, a) => {
          o < 0 ? this.headerHeight = a : this.rowHeightsMap.setValueAtIndex(this.hot.toPhysicalRow(o), a);
        });
      }, !0), this.measuredRows = r.to + 1, this.ghostTable.clean());
    }
    /**
     * Calculate all rows heights. The calculated row will be cached in the {@link AutoRowSize#heights} property.
     * To retrieve height for specified row use {@link AutoRowSize#getRowHeight} method.
     *
     * @param {object|number} colRange Row index or an object with `from` and `to` properties which define row range.
     * @param {boolean} [overwriteCache] If `true` the calculation will be processed regardless of whether the width exists in the cache.
     */
    calculateAllRowsHeight() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        from: 0,
        to: this.hot.countCols() - 1
      }, t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, i = 0;
      const r = this.hot.countRows() - 1;
      let s = null;
      this.inProgress = !0;
      const o = () => {
        if (!this.hot) {
          fw(s), this.inProgress = !1;
          return;
        }
        this.calculateRowsHeight({
          from: i,
          to: Math.min(i + Rv.CALCULATION_STEP, r)
        }, e, t), i = i + Rv.CALCULATION_STEP + 1, i < r ? s = $1(o) : (fw(s), this.inProgress = !1, this.hot.view.adjustElementsSize(), this.hot.view._wt.wtOverlays.inlineStartOverlay.needFullRender && this.hot.view._wt.wtOverlays.inlineStartOverlay.clone.draw());
      }, a = this.getSyncCalculationLimit();
      a >= 0 && (this.calculateRowsHeight({
        from: 0,
        to: a
      }, e, t), i = a + 1), i < r ? o() : (this.inProgress = !1, this.hot.view.adjustElementsSize());
    }
    /**
     * Sets the sampling options.
     *
     * @private
     */
    setSamplingOptions() {
      const e = this.hot.getSettings()[K0], t = e && In(e, "samplingRatio") ? e.samplingRatio : void 0, i = e && In(e, "allowSampleDuplicates") ? e.allowSampleDuplicates : void 0;
      t && !isNaN(t) && this.samplesGenerator.setSampleCount(parseInt(t, 10)), i && this.samplesGenerator.setAllowDuplicates(i);
    }
    /**
     * Recalculates all rows height (overwrite cache values).
     */
    recalculateAllRowsHeight() {
      this.hot.view.isVisible() && this.calculateAllRowsHeight({
        from: 0,
        to: this.hot.countCols() - 1
      }, !0);
    }
    /**
     * Gets value which tells how many rows should be calculated synchronously (rest of the rows will be calculated
     * asynchronously). The limit is calculated based on `syncLimit` set to autoRowSize option (see {@link Options#autoRowSize}).
     *
     * @returns {number}
     */
    getSyncCalculationLimit() {
      const e = this.hot.getSettings()[K0];
      let t = Rv.SYNC_CALCULATION_LIMIT;
      const i = this.hot.countRows() - 1;
      return at(e) && (t = e.syncLimit, aD(t) ? t = ID(i, t) : t >>= 0), Math.min(t, i);
    }
    /**
     * Get a row's height, as measured in the DOM.
     *
     * The height returned includes 1 px of the row's bottom border.
     *
     * Mind that this method is different from the
     * [`getRowHeight()`](@/api/core.md#getrowheight) method
     * of Handsontable's [Core](@/api/core.md).
     *
     * @param {number} row A visual row index.
     * @param {number} [defaultHeight] If no height is found, `defaultHeight` is returned instead.
     * @returns {number} The height of the specified row, in pixels.
     */
    getRowHeight(e, t) {
      const i = e < 0 ? this.headerHeight : this.rowHeightsMap.getValueAtIndex(this.hot.toPhysicalRow(e));
      let r = t;
      return i !== null && i > (t || 0) && (r = i), r;
    }
    /**
     * Get the calculated column header height.
     *
     * @returns {number|undefined}
     */
    getColumnHeaderHeight() {
      return this.headerHeight;
    }
    /**
     * Get the first visible row.
     *
     * @returns {number} Returns row index, -1 if table is not rendered or if there are no rows to base the the calculations on.
     */
    getFirstVisibleRow() {
      var e;
      return (e = this.hot.view.getFirstRenderedVisibleRow()) !== null && e !== void 0 ? e : -1;
    }
    /**
     * Gets the last visible row.
     *
     * @returns {number} Returns row index or -1 if table is not rendered.
     */
    getLastVisibleRow() {
      var e;
      return (e = this.hot.view.getLastRenderedVisibleRow()) !== null && e !== void 0 ? e : -1;
    }
    /**
     * Clears cache of calculated row heights. If you want to clear only selected rows pass an array with their indexes.
     * Otherwise whole cache will be cleared.
     *
     * @param {number[]} [physicalRows] List of physical row indexes to clear.
     */
    clearCache(e) {
      this.headerHeight = null, Array.isArray(e) ? this.hot.batchExecution(() => {
        e.forEach((t) => {
          this.rowHeightsMap.setValueAtIndex(t, null);
        });
      }, !0) : this.rowHeightsMap.clear();
    }
    /**
     * Clears cache by range.
     *
     * @param {object|number} range Row index or an object with `from` and `to` properties which define row range.
     */
    clearCacheByRange(e) {
      const {
        from: t,
        to: i
      } = typeof e == "number" ? {
        from: e,
        to: e
      } : e;
      this.hot.batchExecution(() => {
        $e(Math.min(t, i), Math.max(t, i), (r) => {
          this.rowHeightsMap.setValueAtIndex(r, null);
        });
      }, !0);
    }
    /**
     * Checks if all heights were calculated. If not then return `true` (need recalculate).
     *
     * @returns {boolean}
     */
    isNeedRecalculate() {
      return !!this.rowHeightsMap.getValues().slice(0, this.measuredRows).filter((e) => e === null).length;
    }
    /**
     * On before view render listener.
     */
    /**
     * Destroys the plugin instance.
     */
    destroy() {
      this.ghostTable.clean(), super.destroy();
    }
  }
  function NPe(n) {
    const e = {
      from: 0,
      to: this.hot.countCols() - 1
    };
    n.forEach((t) => {
      this.samplesGenerator.generateRowSamples(t, e).forEach((r, s) => this.ghostTable.addRow(s, r));
    }), this.ghostTable.rows.length && (this.hot.batchExecution(() => {
      this.ghostTable.getHeights((t, i) => {
        const r = this.hot.toPhysicalRow(t);
        this.rowHeightsMap.setValueAtIndex(r, i);
      });
    }, !0), this.ghostTable.clean());
  }
  function LPe() {
    this.calculateVisibleRowsHeight(), this.inProgress || (Ha(Ul, this, NPe).call(this, WL(vw, this)), OPe(vw, this, []));
  }
  function E3(n, e, t) {
    let i = n;
    return t && (this.calculateRowsHeight(e, void 0, !0), i = this.getRowHeight(e)), i;
  }
  function HPe(n, e) {
    e || this.recalculateAllRowsHeight();
  }
  function $Pe(n) {
    const e = n.reduce((t, i) => {
      let [r] = i;
      return t.indexOf(r) === -1 && t.push(r), t;
    }, []);
    WL(vw, this).push(...e);
  }
  function FPe() {
    this.recalculateAllRowsHeight();
  }
  function BPe(n) {
    const e = n.reduce((t, i) => {
      var r;
      const s = (r = i.address) === null || r === void 0 ? void 0 : r.row;
      if (Number.isInteger(s)) {
        const o = this.hot.toVisualRow(s);
        t.indexOf(o) === -1 && t.push(o);
      }
      return t;
    }, []);
    WL(vw, this).push(...e);
  }
  const {
    getListWithInsertedItems: VPe,
    getListWithRemovedItems: WPe
  } = nG("physicallyIndexed");
  class jPe extends Af {
    constructor() {
      super((e) => e);
    }
    /**
     * Add values to list and reorganize.
     *
     * @private
     * @param {number} insertionIndex Position inside the list.
     * @param {Array} insertedIndexes List of inserted indexes.
     */
    insert(e, t) {
      const i = rN(this.indexedValues, t);
      this.indexedValues = VPe(i, e, t, this.initValueOrFn), super.insert(e, t);
    }
    /**
     * Remove values from the list and reorganize.
     *
     * @private
     * @param {Array} removedIndexes List of removed indexes.
     */
    remove(e) {
      const t = WPe(this.indexedValues, e);
      this.indexedValues = iN(t, e), super.remove(e);
    }
  }
  const {
    getListWithInsertedItems: zPe,
    getListWithRemovedItems: UPe
  } = nG("physicallyIndexed");
  class GPe extends Af {
    constructor() {
      super((e) => e);
    }
    /**
     * Add values to list and reorganize.
     *
     * @private
     * @param {number} insertionIndex Position inside the list.
     * @param {Array} insertedIndexes List of inserted indexes.
     */
    insert(e, t) {
      this.indexedValues = zPe(this.indexedValues, e, t, (i, r) => this.getNextValue(r)), super.insert(e, t);
    }
    /**
     * Remove values from the list and reorganize.
     *
     * @private
     * @param {Array} removedIndexes List of removed indexes.
     */
    remove(e) {
      this.indexedValues = UPe(this.indexedValues, e), super.remove(e);
    }
    /**
     * Get next values, which should be greater than actual maximum value in the list.
     *
     * @param {number} ordinalNumber Position in the list.
     * @returns {number}
     */
    getNextValue(e) {
      return Math.max(...this.getValues()) + 1 + e;
    }
  }
  function YPe(n, e) {
    KPe(n, e), e.add(n);
  }
  function KPe(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function qPe(n, e, t) {
    return (e = XPe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function XPe(n) {
    var e = ZPe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function ZPe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function QPe(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  const LT = "bindRowsWithHeaders", JPe = 210, eIe = "loose", tIe = /* @__PURE__ */ new Map([["loose", jPe], ["strict", GPe]]);
  var x3 = /* @__PURE__ */ new WeakSet();
  class nIe extends Lt {
    constructor() {
      super(...arguments), YPe(this, x3), qPe(this, "headerIndexes", null);
    }
    static get PLUGIN_KEY() {
      return LT;
    }
    static get PLUGIN_PRIORITY() {
      return JPe;
    }
    /**
     * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link BindRowsWithHeaders#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return !!this.hot.getSettings()[LT];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
    enablePlugin() {
      if (this.enabled)
        return;
      let e = this.hot.getSettings()[LT];
      typeof e != "string" && (e = eIe);
      const t = tIe.get(e);
      this.headerIndexes = this.hot.rowIndexMapper.registerMap("bindRowsWithHeaders", new t()), this.addHook("modifyRowHeader", (i) => QPe(x3, this, iIe).call(this, i)), super.enablePlugin();
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
    disablePlugin() {
      this.hot.rowIndexMapper.unregisterMap("bindRowsWithHeaders"), super.disablePlugin();
    }
    /**
     * Destroys the plugin instance.
     */
    destroy() {
      super.destroy();
    }
  }
  function iIe(n) {
    return this.headerIndexes.getValueAtIndex(this.hot.toPhysicalRow(n));
  }
  function rIe(n, e) {
    GG(n, e), e.add(n);
  }
  function sIe(n, e, t) {
    GG(n, e), e.set(n, t);
  }
  function GG(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function T3(n, e, t) {
    return (e = oIe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function oIe(n) {
    var e = aIe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function aIe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function M3(n, e) {
    return n.get(Gg(n, e));
  }
  function HT(n, e, t) {
    return n.set(Gg(n, e), t), t;
  }
  function Gg(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  const xS = "collapsibleColumns", lIe = 290, cIe = ["nestedHeaders"], op = "collapsibleIndicator", A3 = xS, P3 = /* @__PURE__ */ new Map([["collapse", {
    hideColumn: !0,
    beforeHook: "beforeColumnCollapse",
    afterHook: "afterColumnCollapse"
  }], ["expand", {
    hideColumn: !1,
    beforeHook: "beforeColumnExpand",
    afterHook: "afterColumnExpand"
  }]]);
  var ig = /* @__PURE__ */ new WeakMap(), Jm = /* @__PURE__ */ new WeakSet();
  class uIe extends Lt {
    constructor() {
      super(...arguments), rIe(this, Jm), T3(this, "nestedHeadersPlugin", null), T3(this, "headerStateManager", null), sIe(this, ig, null);
    }
    static get PLUGIN_KEY() {
      return xS;
    }
    static get PLUGIN_PRIORITY() {
      return lIe;
    }
    static get PLUGIN_DEPS() {
      return ["plugin:NestedHeaders"];
    }
    static get SETTING_KEYS() {
      return [xS, ...cIe];
    }
    /**
     * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link CollapsibleColumns#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return !!this.hot.getSettings()[xS];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
    enablePlugin() {
      var e = this;
      if (this.enabled)
        return;
      const {
        nestedHeaders: t
      } = this.hot.getSettings();
      t || Yt("You need to configure the Nested Headers plugin in order to use collapsible headers."), HT(ig, this, this.hot.columnIndexMapper.createAndRegisterIndexMap(this.pluginName, "hiding")), this.nestedHeadersPlugin = this.hot.getPlugin("nestedHeaders"), this.headerStateManager = this.nestedHeadersPlugin.getStateManager(), this.addHook("init", () => Gg(Jm, this, fIe).call(this)), this.addHook("afterLoadData", function() {
        for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
          r[s] = arguments[s];
        return Gg(Jm, e, gIe).call(e, ...r);
      }), this.addHook("afterGetColHeader", function() {
        for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
          r[s] = arguments[s];
        return Gg(Jm, e, hIe).call(e, ...r);
      }), this.addHook("beforeOnCellMouseDown", (i, r, s) => Gg(Jm, this, dIe).call(this, i, r, s)), this.registerShortcuts(), super.enablePlugin(), this.updatePlugin();
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *   - [`collapsibleColumns`](@/api/options.md#collapsiblecolumns)
     *   - [`nestedHeaders`](@/api/options.md#nestedheaders)
     */
    updatePlugin() {
      if (this.hot.view) {
        if (!this.nestedHeadersPlugin.detectedOverlappedHeaders) {
          const {
            collapsibleColumns: e
          } = this.hot.getSettings();
          typeof e == "boolean" ? this.headerStateManager.mapState((t) => ({
            collapsible: t.origColspan > 1
          })) : Array.isArray(e) && (this.headerStateManager.mapState(() => ({
            collapsible: !1
          })), this.headerStateManager.mergeStateWith(e));
        }
        super.updatePlugin();
      }
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
    disablePlugin() {
      this.hot.columnIndexMapper.unregisterMap(this.pluginName), HT(ig, this, null), this.nestedHeadersPlugin = null, this.unregisterShortcuts(), this.clearButtons(), super.disablePlugin();
    }
    /**
     * Register shortcuts responsible for toggling collapsible columns.
     *
     * @private
     */
    registerShortcuts() {
      this.hot.getShortcutManager().getContext("grid").addShortcut({
        keys: [["Enter"]],
        callback: () => {
          var e;
          const {
            row: t,
            col: i
          } = this.hot.getSelectedRangeLast().highlight, {
            collapsible: r,
            isCollapsed: s,
            columnIndex: o
          } = (e = this.headerStateManager.getHeaderTreeNodeData(t, i)) !== null && e !== void 0 ? e : {};
          if (r)
            return s ? this.expandSection({
              row: t,
              col: o
            }) : this.collapseSection({
              row: t,
              col: o
            }), !1;
        },
        runOnlyIf: () => {
          var e, t;
          return ((e = this.hot.getSelectedRangeLast()) === null || e === void 0 ? void 0 : e.isSingle()) && ((t = this.hot.getSelectedRangeLast()) === null || t === void 0 ? void 0 : t.highlight.isHeader());
        },
        group: A3,
        relativeToGroup: hh,
        position: "before"
      });
    }
    /**
     * Unregister shortcuts responsible for toggling collapsible columns.
     *
     * @private
     */
    unregisterShortcuts() {
      this.hot.getShortcutManager().getContext("grid").removeShortcutsByGroup(A3);
    }
    /**
     * Clears the expand/collapse buttons.
     *
     * @private
     */
    clearButtons() {
      if (!this.hot.view)
        return;
      const e = this.hot.view._wt.getSetting("columnHeaders").length, t = this.hot.view._wt.wtTable.THEAD, i = this.hot.view._wt.wtOverlays.topOverlay.clone.wtTable.THEAD, r = this.hot.view._wt.wtOverlays.topInlineStartCornerOverlay ? this.hot.view._wt.wtOverlays.topInlineStartCornerOverlay.clone.wtTable.THEAD : null, s = function(o) {
        o && o.parentNode.removeChild(o);
      };
      $e(0, e - 1, (o) => {
        const a = t.childNodes[o], l = i.childNodes[o], c = r ? r.childNodes[o] : null;
        $e(0, a.childNodes.length - 1, (u) => {
          let h = a.childNodes[u].querySelector(`.${op}`);
          s(h), l && l.childNodes[u] && (h = l.childNodes[u].querySelector(`.${op}`), s(h)), r && c && c.childNodes[u] && (h = c.childNodes[u].querySelector(`.${op}`), s(h));
        });
      });
    }
    /**
     * Expands section at the provided coords.
     *
     * @param {object} coords Contains coordinates information. (`coords.row`, `coords.col`).
     */
    expandSection(e) {
      this.toggleCollapsibleSection([e], "expand");
    }
    /**
     * Collapses section at the provided coords.
     *
     * @param {object} coords Contains coordinates information. (`coords.row`, `coords.col`).
     */
    collapseSection(e) {
      this.toggleCollapsibleSection([e], "collapse");
    }
    /**
     * Collapses or expand all collapsible sections, depending on the action parameter.
     *
     * @param {string} action 'collapse' or 'expand'.
     */
    toggleAllCollapsibleSections(e) {
      const t = this.headerStateManager.mapNodes((i) => {
        const {
          collapsible: r,
          origColspan: s,
          headerLevel: o,
          columnIndex: a,
          isCollapsed: l
        } = i;
        if (r === !0 && s > 1 && (l && e === "expand" || !l && e === "collapse"))
          return {
            row: this.headerStateManager.levelToRowCoords(o),
            col: a
          };
      });
      this.toggleCollapsibleSection(t, e);
    }
    /**
     * Collapses all collapsible sections.
     */
    collapseAll() {
      this.toggleAllCollapsibleSections("collapse");
    }
    /**
     * Expands all collapsible sections.
     */
    expandAll() {
      this.toggleAllCollapsibleSections("expand");
    }
    /**
     * Collapses/Expands a section.
     *
     * @param {Array} coords Array of coords - section coordinates.
     * @param {string} [action] Action definition ('collapse' or 'expand').
     * @fires Hooks#beforeColumnCollapse
     * @fires Hooks#beforeColumnExpand
     * @fires Hooks#afterColumnCollapse
     * @fires Hooks#afterColumnExpand
     */
    toggleCollapsibleSection(e, t) {
      if (!P3.has(t))
        throw new Error(`Unsupported action is passed (${t}).`);
      if (!Array.isArray(e))
        return;
      const i = xc(e, (f) => {
        let {
          row: g
        } = f;
        return g < 0;
      });
      let r = i.length > 0;
      z(i, (f) => {
        var g;
        let {
          row: p,
          col: m
        } = f;
        const {
          collapsible: v,
          isCollapsed: y
        } = (g = this.headerStateManager.getHeaderSettings(p, m)) !== null && g !== void 0 ? g : {};
        if (!v || y && t === "collapse" || !y && t === "expand")
          return r = !1, !1;
      });
      const s = [], o = [];
      r && z(i, (f) => {
        let {
          row: g,
          col: p
        } = f;
        const {
          colspanCompensation: m,
          affectedColumns: v,
          rollbackModification: y
        } = this.headerStateManager.triggerNodeModification(t, g, p);
        m > 0 && (o.push(...v), s.push(y));
      });
      const a = this.getCollapsedColumns();
      let l = [];
      t === "collapse" ? l = sD([...a, ...o]) : t === "expand" && (l = xc(a, (f) => !o.includes(f)));
      const c = P3.get(t);
      if (this.hot.runHooks(c.beforeHook, a, l, r) === !1) {
        z(s, (f) => {
          f();
        });
        return;
      }
      this.hot.batchExecution(() => {
        z(o, (f) => {
          M3(ig, this).setValueAtIndex(this.hot.toPhysicalColumn(f), c.hideColumn);
        });
      }, !0);
      const h = this.getCollapsedColumns().length !== a.length, d = this.hot.getSelectedRangeLast();
      if (t === "collapse" && h && d) {
        const {
          row: f,
          col: g
        } = d.highlight;
        if ((this.hot.rowIndexMapper.isHidden(f) || this.hot.columnIndexMapper.isHidden(g)) && o.includes(g)) {
          const m = f >= 0 ? this.hot.rowIndexMapper.getNearestNotHiddenIndex(f, 1, !0) : f, v = g >= 0 ? this.hot.columnIndexMapper.getNearestNotHiddenIndex(g, 1, !0) : g;
          m !== null && v !== null && this.hot.selectCell(m, v);
        }
      }
      this.hot.runHooks(c.afterHook, a, l, r, h), this.hot.render(), this.hot.view.adjustElementsSize();
    }
    /**
     * Gets an array of physical indexes of collapsed columns.
     *
     * @private
     * @returns {number[]}
     */
    getCollapsedColumns() {
      return M3(ig, this).getHiddenIndexes();
    }
    /**
     * Destroys the plugin instance.
     */
    destroy() {
      HT(ig, this, null), super.destroy();
    }
  }
  function hIe(n, e, t) {
    var i;
    const {
      collapsible: r,
      origColspan: s,
      isCollapsed: o
    } = (i = this.headerStateManager.getHeaderSettings(t, n)) !== null && i !== void 0 ? i : {}, a = r && s > 1 && n >= this.hot.getSettings().fixedColumnsStart, l = this.hot.getSettings().ariaTags;
    let c = e.querySelector(`.${op}`);
    if (Tf(e, [no("")[0]]), a)
      c || (c = this.hot.rootDocument.createElement("div"), ue(c, op), e.querySelector("div:first-child").appendChild(c)), Ze(c, ["collapsed", "expanded"]), o ? (ue(c, "collapsed"), Yu(c, "+"), l && ze(e, ...no(!1))) : (ue(c, "expanded"), Yu(c, "-"), l && ze(e, ...no(!0))), l && ze(c, ...xf());
    else {
      var u;
      (u = c) === null || u === void 0 || u.remove();
    }
  }
  function dIe(n, e) {
    Ue(n.target, op) && (Ue(n.target, "expanded") ? (this.eventManager.fireEvent(n.target, "mouseup"), this.toggleCollapsibleSection([e], "collapse")) : Ue(n.target, "collapsed") && (this.eventManager.fireEvent(n.target, "mouseup"), this.toggleCollapsibleSection([e], "expand")), bo(n));
  }
  function fIe() {
    this.updatePlugin();
  }
  function gIe(n, e) {
    e || this.updatePlugin();
  }
  function Nh(n, e, t) {
    return (e = pIe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function pIe(n) {
    var e = mIe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function mIe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  const bIe = ["sortEmptyCells", "indicator", "headerAction", "compareFunctionFactory"], vIe = !1, wIe = !0, yIe = !0;
  class CIe {
    constructor(e, t) {
      Nh(this, "hot", void 0), Nh(this, "sortingStates", new G1()), Nh(this, "sortEmptyCells", vIe), Nh(this, "indicator", wIe), Nh(this, "headerAction", yIe), Nh(this, "compareFunctionFactory", void 0), Nh(this, "mapName", void 0), this.hot = e, this.mapName = t, this.hot.columnIndexMapper.registerMap(t, this.sortingStates);
    }
    /**
     * Update column properties which affect the sorting result.
     *
     * **Note**: All column properties can be overwritten by {@link Options#columns} option.
     *
     * @param {object} allSortSettings Column sorting plugin's configuration object.
     */
    updateAllColumnsProperties(e) {
      at(e) && lt(e, (t, i) => {
        bIe.includes(i) && (this[i] = t);
      });
    }
    /**
     * Get all column properties which affect the sorting result.
     *
     * @returns {object}
     */
    getAllColumnsProperties() {
      const e = {
        sortEmptyCells: this.sortEmptyCells,
        indicator: this.indicator,
        headerAction: this.headerAction
      };
      return typeof this.compareFunctionFactory == "function" && (e.compareFunctionFactory = this.compareFunctionFactory), e;
    }
    /**
     * Get sort order of column.
     *
     * @param {number} searchedColumn Visual column index.
     * @returns {string|undefined} Sort order (`asc` for ascending, `desc` for descending and undefined for not sorted).
     */
    getSortOrderOfColumn(e) {
      var t;
      return (t = this.sortingStates.getValueAtIndex(this.hot.toPhysicalColumn(e))) === null || t === void 0 ? void 0 : t.sortOrder;
    }
    /**
     * Get order of particular column in the states queue.
     *
     * @param {number} column Visual column index.
     * @returns {number}
     */
    getIndexOfColumnInSortQueue(e) {
      return e = this.hot.toPhysicalColumn(e), this.sortingStates.getEntries().findIndex((t) => {
        let [i] = t;
        return i === e;
      });
    }
    /**
     * Get number of sorted columns.
     *
     * @returns {number}
     */
    getNumberOfSortedColumns() {
      return this.sortingStates.getLength();
    }
    /**
     * Get if list of sorted columns is empty.
     *
     * @returns {boolean}
     */
    isListOfSortedColumnsEmpty() {
      return this.getNumberOfSortedColumns() === 0;
    }
    /**
     * Get if particular column is sorted.
     *
     * @param {number} column Visual column index.
     * @returns {boolean}
     */
    isColumnSorted(e) {
      return at(this.sortingStates.getValueAtIndex(this.hot.toPhysicalColumn(e)));
    }
    /**
     * Queue of sort states containing sorted columns and their orders (Array of objects containing `column` and `sortOrder` properties).
     *
     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.
     *
     * @returns {Array<object>}
     */
    getSortStates() {
      return this.sortingStates === null ? [] : this.sortingStates.getEntries().map((t) => {
        let [i, r] = t;
        return {
          column: this.hot.toVisualColumn(i),
          ...r
        };
      });
    }
    /**
     * Get sort state for particular column. Object contains `column` and `sortOrder` properties.
     *
     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.
     *
     * @param {number} column Visual column index.
     * @returns {object|undefined}
     */
    getColumnSortState(e) {
      const t = this.getSortOrderOfColumn(e);
      if (ke(t))
        return {
          column: e,
          sortOrder: t
        };
    }
    /**
     * Set all column states.
     *
     * @param {Array} sortStates Sort states.
     */
    setSortStates(e) {
      this.sortingStates.clear();
      for (let t = 0; t < e.length; t += 1)
        this.sortingStates.setValueAtIndex(this.hot.toPhysicalColumn(e[t].column), {
          sortOrder: e[t].sortOrder
        });
    }
    /**
     * Destroy the state manager.
     */
    destroy() {
      this.hot.columnIndexMapper.unregisterMap(this.mapName), this.sortingStates = null;
    }
  }
  function YG(n, e, t) {
    const i = e.locale;
    return function(r, s) {
      const {
        sortEmptyCells: o
      } = t;
      return typeof r == "string" && (r = r.toLocaleLowerCase(i)), typeof s == "string" && (s = s.toLocaleLowerCase(i)), r === s ? Ja : Wn(r) ? Wn(s) ? Ja : o && n === "asc" ? Fn : Bn : Wn(s) ? o && n === "asc" ? Bn : Fn : isNaN(r) && !isNaN(s) ? n === "asc" ? Bn : Fn : !isNaN(r) && isNaN(s) || (isNaN(r) || isNaN(s) || (r = parseFloat(r), s = parseFloat(s)), r < s) ? n === "asc" ? Fn : Bn : r > s ? n === "asc" ? Bn : Fn : Ja;
    };
  }
  const KG = "default";
  function SIe(n, e, t) {
    return function(i, r) {
      const s = parseFloat(i), o = parseFloat(r), {
        sortEmptyCells: a
      } = t;
      if (s === o || isNaN(s) && isNaN(o))
        return Ja;
      if (a) {
        if (Wn(i))
          return n === "asc" ? Fn : Bn;
        if (Wn(r))
          return n === "asc" ? Bn : Fn;
      }
      return isNaN(s) ? Bn : isNaN(o) ? Fn : s < o ? n === "asc" ? Fn : Bn : s > o ? n === "asc" ? Bn : Fn : Ja;
    };
  }
  const _Ie = "numeric";
  function RIe(n, e, t) {
    const i = e.checkedTemplate, r = e.uncheckedTemplate, {
      sortEmptyCells: s
    } = t;
    return function(o, a) {
      const l = Wn(o), c = Wn(a), u = l ? r : o, h = c ? r : a, d = u === r || u === i, f = h === r || h === i;
      if (s === !1) {
        if (l && c === !1)
          return Bn;
        if (l === !1 && c)
          return Fn;
      }
      return d === !1 && f ? n === "asc" ? Fn : Bn : d && f === !1 ? n === "asc" ? Bn : Fn : d === !1 && f === !1 ? YG(n, e, t)(o, a) : u === r && h === i ? n === "asc" ? Fn : Bn : u === i && h === r ? n === "asc" ? Bn : Fn : Ja;
    };
  }
  const EIe = "checkbox";
  function xIe(n, e, t) {
    return eY(n, e.dateFormat, t);
  }
  const TIe = "date";
  function MIe(n, e, t) {
    return eY(n, e.timeFormat, t);
  }
  const AIe = "time", {
    register: by,
    getItem: I3,
    hasItem: PIe
  } = ha("sorting.compareFunctionFactory"), {
    register: qG,
    getItem: IIe
  } = ha("sorting.mainSortComparator");
  function XG(n) {
    return PIe(n) ? I3(n) : I3(KG);
  }
  by(EIe, RIe);
  by(TIe, xIe);
  by(KG, YG);
  by(_Ie, SIe);
  by(AIe, MIe);
  const Ja = 0, Fn = -1, Bn = 1;
  function OIe(n, e) {
    const t = IIe(e);
    for (var i = arguments.length, r = new Array(i > 2 ? i - 2 : 0), s = 2; s < i; s++)
      r[s - 2] = arguments[s];
    n.sort(t(...r));
  }
  const G_ = "asc", Y_ = "desc", ZG = "colHeader";
  function kIe(n) {
    if (at(n) === !1)
      return !1;
    const {
      column: e,
      sortOrder: t
    } = n;
    return Number.isInteger(e) && [G_, Y_].includes(t);
  }
  function DIe(n) {
    if (n.some((t) => kIe(t) === !1))
      return !1;
    const e = n.map((t) => {
      let {
        column: i
      } = t;
      return i;
    });
    return new Set(e).size === e.length;
  }
  function O3(n) {
    if (n !== Y_)
      return n === G_ ? Y_ : G_;
  }
  function QG(n) {
    return n.querySelector(`.${ZG}`);
  }
  function JG(n, e) {
    if (n < 0 || !e.parentNode)
      return !1;
    const t = e.parentNode.parentNode.childNodes;
    return Array.from(t).indexOf(e.parentNode) - t.length === -1;
  }
  function jL(n, e, t) {
    return n === -1 && e >= 0 && Ku(t) === !1;
  }
  function eY(n, e, t) {
    return function(i, r) {
      const {
        sortEmptyCells: s
      } = t;
      if (i === r)
        return Ja;
      if (Wn(i))
        return Wn(r) ? Ja : s && n === "asc" ? Fn : Bn;
      if (Wn(r))
        return s && n === "asc" ? Bn : Fn;
      const o = he(i, e), a = he(r, e);
      return o.isValid() ? a.isValid() ? a.isAfter(o) ? n === "asc" ? Fn : Bn : a.isBefore(o) ? n === "asc" ? Bn : Fn : Ja : Fn : Bn;
    };
  }
  const NIe = "ascending", LIe = "descending", tY = "indicatorDisabled", nY = "columnSorting", iY = "sortAction", rY = /* @__PURE__ */ new Map([[G_, NIe], [Y_, LIe]]);
  function HIe(n, e, t, i) {
    const r = [nY];
    if (i && r.push(iY), t === !1)
      return r.push(tY), r;
    const s = n.getSortOrderOfColumn(e);
    return ke(s) && r.push(rY.get(s)), r;
  }
  function $Ie() {
    return Array.from(rY.values()).concat(iY, tY, nY);
  }
  function FIe(n, e) {
    return function(t, i) {
      const [, ...r] = t, [, ...s] = i;
      return function(a) {
        const l = n[a], c = e[a], u = r[a], h = s[a], d = c.columnSorting;
        return (d.compareFunctionFactory ? d.compareFunctionFactory : XG(c.type))(l, c, d)(u, h);
      }(0);
    };
  }
  function BIe(n, e) {
    VIe(n, e), e.add(n);
  }
  function VIe(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function q0(n, e, t) {
    return (e = WIe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function WIe(n) {
    var e = jIe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function jIe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function Ig(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  const K_ = "columnSorting", zIe = 50, q_ = "append", UIe = "replace", k3 = K_;
  qG(K_, FIe);
  Ie.getSingleton().register("beforeColumnSort");
  Ie.getSingleton().register("afterColumnSort");
  var hd = /* @__PURE__ */ new WeakSet();
  class sY extends Lt {
    constructor() {
      super(...arguments), BIe(this, hd), q0(this, "columnStatesManager", null), q0(this, "columnMetaCache", null), q0(this, "pluginKey", K_), q0(this, "indexesSequenceCache", null);
    }
    static get PLUGIN_KEY() {
      return K_;
    }
    static get PLUGIN_PRIORITY() {
      return zIe;
    }
    /**
     * Checks if the plugin is enabled in the Handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link ColumnSorting#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return !!this.hot.getSettings()[this.pluginKey];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
    enablePlugin() {
      var e = this;
      this.enabled || (this.columnStatesManager = new CIe(this.hot, `${this.pluginKey}.sortingStates`), this.columnMetaCache = new uh((t) => {
        let i = this.hot.toVisualColumn(t);
        return i === null && (i = t), this.getMergedPluginSettings(i);
      }), this.hot.columnIndexMapper.registerMap(`${this.pluginKey}.columnMeta`, this.columnMetaCache), this.addHook("afterGetColHeader", (t, i) => Ig(hd, this, GIe).call(this, t, i)), this.addHook("beforeOnCellMouseDown", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ig(hd, e, KIe).call(e, ...i);
      }), this.addHook("afterOnCellMouseDown", (t, i) => this.onAfterOnCellMouseDown(t, i)), this.addHook("afterInit", () => Ig(hd, this, iI).call(this)), this.addHook("afterLoadData", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ig(hd, e, YIe).call(e, ...i);
      }), this.hot.view && Ig(hd, this, iI).call(this), this.registerShortcuts(), super.enablePlugin());
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
    disablePlugin() {
      const e = (t, i) => {
        const r = QG(i);
        JG(t, i) === !1 || r === null || this.updateHeaderClasses(r);
      };
      this.hot.addHook("afterGetColHeader", e), this.hot.addHookOnce("afterViewRender", () => {
        this.hot.removeHook("afterGetColHeader", e);
      }), this.hot.batchExecution(() => {
        this.indexesSequenceCache !== null && (this.hot.rowIndexMapper.setIndexesSequence(this.indexesSequenceCache.getValues()), this.hot.rowIndexMapper.unregisterMap(this.pluginKey), this.indexesSequenceCache = null);
      }, !0), this.hot.columnIndexMapper.unregisterMap(`${this.pluginKey}.columnMeta`), this.columnStatesManager.destroy(), this.columnMetaCache = null, this.columnStatesManager = null, this.unregisterShortcuts(), super.disablePlugin();
    }
    /**
     * Register shortcuts responsible for toggling column sorting functionality.
     *
     * @private
     */
    registerShortcuts() {
      this.hot.getShortcutManager().getContext("grid").addShortcut({
        keys: [["Enter"]],
        callback: () => {
          const {
            highlight: e
          } = this.hot.getSelectedRangeLast();
          return this.sort(this.getColumnNextConfig(e.col)), !1;
        },
        runOnlyIf: () => {
          var e, t;
          const i = (e = this.hot.getSelectedRangeLast()) === null || e === void 0 ? void 0 : e.highlight;
          return i && ((t = this.hot.getSelectedRangeLast()) === null || t === void 0 ? void 0 : t.isSingle()) && this.hot.selection.isCellVisible(i) && i.row === -1 && i.col >= 0;
        },
        relativeToGroup: hh,
        position: "before",
        group: k3
      });
    }
    /**
     * Unregister shortcuts responsible for toggling column sorting functionality.
     *
     * @private
     */
    unregisterShortcuts() {
      this.hot.getShortcutManager().getContext("grid").removeShortcutsByGroup(k3);
    }
    // DIFF - MultiColumnSorting & ColumnSorting: changed function documentation.
    /**
     * Sorts the table by chosen columns and orders.
     *
     * @param {undefined|object} sortConfig Single column sort configuration. The configuration object contains `column` and `sortOrder` properties.
     * First of them contains visual column index, the second one contains sort order (`asc` for ascending, `desc` for descending).
     *
     * **Note**: Please keep in mind that every call of `sort` function set an entirely new sort order. Previous sort configs aren't preserved.
     *
     * @example
     * ```js
     * // sort ascending first visual column
     * hot.getPlugin('columnSorting').sort({ column: 0, sortOrder: 'asc' });
     * ```
     *
     * @fires Hooks#beforeColumnSort
     * @fires Hooks#afterColumnSort
     */
    sort(e) {
      const t = this.getSortConfig(), i = this.getNormalizedSortConfigs(e), r = this.areValidSortConfigs(i);
      this.hot.runHooks("beforeColumnSort", t, i, r) !== !1 && (t.length === 0 && this.indexesSequenceCache === null && (this.indexesSequenceCache = this.hot.rowIndexMapper.registerMap(this.pluginKey, new iG()), this.indexesSequenceCache.setValues(this.hot.rowIndexMapper.getIndexesSequence())), r && (this.columnStatesManager.setSortStates(i), this.sortByPresetSortStates(i), this.saveAllSortSettings(i)), this.hot.runHooks("afterColumnSort", t, r ? i : t, r), r && (this.hot.render(), this.hot.forceFullRender = !1, this.hot.view.render()));
    }
    /**
     * Clear the sort performed on the table.
     */
    clearSort() {
      this.sort([]);
    }
    /**
     * Checks if the table is sorted (any column have to be sorted).
     *
     * @returns {boolean}
     */
    isSorted() {
      return this.enabled && !this.columnStatesManager.isListOfSortedColumnsEmpty();
    }
    /**
     * Get sort configuration for particular column or for all sorted columns. Objects contain `column` and `sortOrder` properties.
     *
     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key. They are handled by the `sort` function.
     *
     * @param {number} [column] Visual column index.
     * @returns {undefined|object|Array}
     */
    getSortConfig(e) {
      return ke(e) ? this.columnStatesManager.getColumnSortState(e) : this.columnStatesManager.getSortStates();
    }
    /**
     * @description
     * Warn: Useful mainly for providing server side sort implementation (see in the example below). It doesn't sort the data set. It just sets sort configuration for all sorted columns.
     * Note: Please keep in mind that this method doesn't re-render the table.
     *
     * @example
     * ```js
     * beforeColumnSort: function(currentSortConfig, destinationSortConfigs) {
     *   const columnSortPlugin = this.getPlugin('columnSorting');
     *
     *   columnSortPlugin.setSortConfig(destinationSortConfigs);
     *
     *   // const newData = ... // Calculated data set, ie. from an AJAX call.
     *
     *   this.loadData(newData); // Load new data set and re-render the table.
     *
     *   return false; // The blockade for the default sort action.
     * }
     * ```
     *
     * @param {undefined|object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).
     * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains
     * sort order (`asc` for ascending, `desc` for descending).
     */
    setSortConfig(e) {
      const t = this.getNormalizedSortConfigs(e);
      this.areValidSortConfigs(t) && this.columnStatesManager.setSortStates(t);
    }
    /**
     * Get normalized sort configs.
     *
     * @private
     * @param {object|Array} [sortConfig=[]] Single column sort configuration or full sort configuration (for all sorted columns).
     * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains
     * sort order (`asc` for ascending, `desc` for descending).
     * @returns {Array}
     */
    getNormalizedSortConfigs() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      return Array.isArray(e) ? e.slice(0, 1) : [e];
    }
    /**
     * Get if sort configs are valid.
     *
     * @private
     * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.
     * @returns {boolean}
     */
    areValidSortConfigs(e) {
      const t = this.hot.countCols();
      return DIe(e) && e.every((i) => {
        let {
          column: r
        } = i;
        return r <= t && r >= 0;
      });
    }
    /**
     * Saves all sorting settings. Saving works only when {@link Options#persistentState} option is enabled.
     *
     * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.
     *
     * @private
     * @fires Hooks#persistentStateSave
     */
    saveAllSortSettings(e) {
      const t = this.columnStatesManager.getAllColumnsProperties(), i = (r) => {
        let {
          column: s,
          ...o
        } = r;
        return {
          column: this.hot.toPhysicalColumn(s),
          ...o
        };
      };
      t.initialConfig = mt(e, i), this.hot.runHooks("persistentStateSave", "columnSorting", t);
    }
    /**
     * Get all saved sorting settings. Loading works only when {@link Options#persistentState} option is enabled.
     *
     * @private
     * @returns {object} Previously saved sort settings.
     *
     * @fires Hooks#persistentStateLoad
     */
    getAllSavedSortSettings() {
      const e = {};
      this.hot.runHooks("persistentStateLoad", "columnSorting", e);
      const t = e.value, i = (r) => {
        let {
          column: s,
          ...o
        } = r;
        return {
          column: this.hot.toVisualColumn(s),
          ...o
        };
      };
      return ke(t) && Array.isArray(t.initialConfig) && (t.initialConfig = mt(t.initialConfig, i)), t;
    }
    /**
     * Get next sort configuration for particular column. Object contain `column` and `sortOrder` properties.
     *
     * **Note**: Please keep in mind that returned object expose **visual** column index under the `column` key.
     *
     * @private
     * @param {number} column Visual column index.
     * @returns {undefined|object}
     */
    getColumnNextConfig(e) {
      const t = this.columnStatesManager.getSortOrderOfColumn(e);
      if (ke(t)) {
        const r = O3(t);
        return ke(r) ? {
          column: e,
          sortOrder: r
        } : void 0;
      }
      const i = this.hot.countCols();
      if (Number.isInteger(e) && e >= 0 && e < i)
        return {
          column: e,
          sortOrder: O3()
        };
    }
    /**
     * Get sort configuration with "next order" for particular column.
     *
     * @private
     * @param {number} columnToChange Visual column index of column which order will be changed.
     * @param {string} strategyId ID of strategy. Possible values: 'append' and 'replace'. The first one
     * change order of particular column and change it's position in the sort queue to the last one. The second one
     * just change order of particular column.
     *
     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.
     *
     * @returns {Array}
     */
    getNextSortConfig(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : q_;
      const i = this.columnStatesManager.getIndexOfColumnInSortQueue(e), r = i !== -1, s = this.getSortConfig(), o = this.getColumnNextConfig(e);
      if (r) {
        if (dn(o))
          return [...s.slice(0, i), ...s.slice(i + 1)];
        if (t === q_)
          return [...s.slice(0, i), ...s.slice(i + 1), o];
        if (t === UIe)
          return [...s.slice(0, i), o, ...s.slice(i + 1)];
      }
      return ke(o) ? s.concat(o) : s;
    }
    /**
     * Get plugin's column config for the specified column index.
     *
     * @private
     * @param {object} columnConfig Configuration inside `columns` property for the specified column index.
     * @returns {object}
     */
    getPluginColumnConfig(e) {
      if (at(e)) {
        const t = e[this.pluginKey];
        if (at(t))
          return t;
      }
      return {};
    }
    /**
     * Get plugin settings related properties, properly merged from cascade settings.
     *
     * @private
     * @param {number} column Visual column index.
     * @returns {object}
     */
    getMergedPluginSettings(e) {
      const t = this.hot.getSettings()[this.pluginKey], i = this.columnStatesManager.getAllColumnsProperties(), r = this.hot.getCellMeta(0, e), s = Object.getPrototypeOf(r);
      return Array.isArray(s.columns) ? Object.assign(i, t, this.getPluginColumnConfig(s.columns[e])) : cn(s.columns) ? Object.assign(i, t, this.getPluginColumnConfig(s.columns(e))) : Object.assign(i, t);
    }
    /**
     * Get copy of settings for first cell in the column.
     *
     * @private
     * @param {number} column Visual column index.
     * @returns {object}
     */
    // TODO: Workaround. Inheriting of non-primitive cell meta values doesn't work. Instead of getting properties from column meta we call this function.
    // TODO: Remove test named: "should not break the dataset when inserted new row" (#5431).
    getFirstCellSettings(e) {
      const t = this.hot.getCellMeta(0, e), i = Object.create(t);
      return i[this.pluginKey] = this.columnMetaCache.getValueAtIndex(this.hot.toPhysicalColumn(e)), i;
    }
    /**
     * Get number of rows which should be sorted.
     *
     * @private
     * @param {number} numberOfRows Total number of displayed rows.
     * @returns {number}
     */
    getNumberOfRowsToSort(e) {
      const t = this.hot.getSettings();
      return t.maxRows <= e ? t.maxRows : e - t.minSpareRows;
    }
    /**
     * Performs the sorting using a stable sort function basing on internal state of sorting.
     *
     * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.
     * @private
     */
    sortByPresetSortStates(e) {
      if (this.hot.rowIndexMapper.setIndexesSequence(this.indexesSequenceCache.getValues()), e.length === 0)
        return;
      const t = [], i = this.hot.countRows(), r = (c) => mt(e, (u) => this.hot.getDataAtCell(c, u.column));
      for (let c = 0; c < this.getNumberOfRowsToSort(i); c += 1)
        t.push([this.hot.toPhysicalRow(c)].concat(r(c)));
      const s = mt(t, (c) => c[0]);
      OIe(t, this.pluginKey, mt(e, (c) => c.sortOrder), mt(e, (c) => this.getFirstCellSettings(c.column)));
      for (let c = t.length; c < i; c += 1)
        t.push([c].concat(r(c)));
      const o = mt(t, (c) => c[0]), a = new Map(mt(s, (c, u) => [c, o[u]])), l = mt(this.hot.rowIndexMapper.getIndexesSequence(), (c) => a.has(c) ? a.get(c) : c);
      this.hot.rowIndexMapper.setIndexesSequence(l);
    }
    /**
     * Sort the table by provided configuration.
     *
     * @private
     * @param {object} allSortSettings All sort config settings. Object may contain `initialConfig`, `indicator`,
     * `sortEmptyCells`, `headerAction` and `compareFunctionFactory` properties.
     */
    sortBySettings(e) {
      if (at(e)) {
        this.columnStatesManager.updateAllColumnsProperties(e);
        const t = e.initialConfig;
        (Array.isArray(t) || at(t)) && this.sort(t);
      } else
        this.hot.render();
    }
    /**
     * Callback for the `onAfterGetColHeader` hook. Adds column sorting CSS classes.
     *
     * @param {number} column Visual column index.
     * @param {Element} TH TH HTML element.
     */
    /**
     * Update header classes.
     *
     * @private
     * @param {HTMLElement} headerSpanElement Header span element.
     * @param {...*} args Extra arguments for helpers.
     */
    updateHeaderClasses(e) {
      if (Ze(e, $Ie()), this.enabled !== !1) {
        for (var t = arguments.length, i = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++)
          i[r - 1] = arguments[r];
        ue(e, HIe(...i));
      }
    }
    /**
     * Overwriting base plugin's `onUpdateSettings` method. Please keep in mind that `onAfterUpdateSettings` isn't called
     * for `updateSettings` in specific situations.
     *
     * @private
     * @param {object} newSettings New settings object.
     */
    onUpdateSettings(e) {
      super.onUpdateSettings(), this.columnMetaCache !== null && this.columnMetaCache.init(this.hot.columnIndexMapper.getNumberOfIndexes()), ke(e[this.pluginKey]) && this.sortBySettings(e[this.pluginKey]);
    }
    /**
     * Callback for the `afterLoadData` hook.
     *
     * @param {boolean} initialLoad Flag that determines whether the data has been loaded during the initialization.
     */
    /**
     * Indicates if clickable header was clicked.
     *
     * @private
     * @param {MouseEvent} event The `mousedown` event.
     * @param {number} column Visual column index.
     * @returns {boolean}
     */
    wasClickableHeaderClicked(e, t) {
      return this.getFirstCellSettings(t)[this.pluginKey].headerAction && Ue(e.target, ZG);
    }
    /**
     * Changes the behavior of selection / dragging.
     *
     * @param {MouseEvent} event The `mousedown` event.
     * @param {CellCoords} coords Visual coordinates.
     * @param {HTMLElement} TD The cell element.
     * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains
     *                            a boolean value that allows or disallows changing the selection for that particular area.
     */
    /**
     * Callback for the `onAfterOnCellMouseDown` hook.
     *
     * @private
     * @param {Event} event Event which are provided by hook.
     * @param {CellCoords} coords Visual coords of the selected cell.
     */
    onAfterOnCellMouseDown(e, t) {
      if (jL(t.row, t.col, e) !== !1 && this.wasClickableHeaderClicked(e, t.col)) {
        this.hot.getShortcutManager().isCtrlPressed() && (this.hot.deselectCell(), this.hot.selectColumns(t.col));
        const i = this.hot.getActiveEditor(), r = this.getColumnNextConfig(t.col);
        i != null && i.isOpened() && this.hot.getCellValidator(i.row, i.col) ? this.hot.addHookOnce("postAfterValidate", () => {
          this.sort(r);
        }) : this.sort(r);
      }
    }
    /**
     * Destroys the plugin instance.
     */
    destroy() {
      var e;
      (e = this.columnStatesManager) === null || e === void 0 || e.destroy(), super.destroy();
    }
  }
  function iI() {
    const n = this.getAllSavedSortSettings();
    if (at(n))
      this.sortBySettings(n);
    else {
      const e = this.hot.getSettings()[this.pluginKey];
      this.sortBySettings(e);
    }
  }
  function GIe(n, e) {
    const t = QG(e);
    if (JG(n, e) === !1 || t === null)
      return;
    const i = this.getFirstCellSettings(n)[this.pluginKey], r = i.indicator, s = i.headerAction;
    if (this.updateHeaderClasses(t, this.columnStatesManager, n, r, s), this.hot.getSettings().ariaTags) {
      const o = this.columnStatesManager.getSortOrderOfColumn(n);
      ze(e, ...T0e(o ? `${o}ending` : "none"));
    }
  }
  function YIe(n) {
    n === !0 && this.hot.view && Ig(hd, this, iI).call(this);
  }
  function KIe(n, e, t, i) {
    jL(e.row, e.col, n) !== !1 && this.wasClickableHeaderClicked(n, e.col) && this.hot.getShortcutManager().isCtrlPressed() && (i.column = !0);
  }
  function Lh(n, e, t) {
    return (e = qIe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function qIe(n) {
    var e = XIe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function XIe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class ZIe {
    constructor(e, t) {
      Lh(this, "plugin", void 0), Lh(this, "hot", void 0), Lh(this, "endpoints", []), Lh(this, "settings", void 0), Lh(this, "settingsType", "array"), Lh(this, "currentEndpoint", null), Lh(this, "cellsToSetCache", []), this.plugin = e, this.hot = this.plugin.hot, this.settings = t;
    }
    /**
     * Initialize the endpoints provided in the settings.
     */
    initEndpoints() {
      this.endpoints = this.parseSettings(), this.refreshAllEndpoints();
    }
    /**
     * Get a single endpoint object.
     *
     * @param {number} index Index of the endpoint.
     * @returns {object}
     */
    getEndpoint(e) {
      return this.settingsType === "function" ? this.fillMissingEndpointData(this.settings)[e] : this.endpoints[e];
    }
    /**
     * Get an array with all the endpoints.
     *
     * @returns {Array}
     */
    getAllEndpoints() {
      return this.settingsType === "function" ? this.fillMissingEndpointData(this.settings) : this.endpoints;
    }
    /**
     * Used to fill the blanks in the endpoint data provided by a settings function.
     *
     * @private
     * @param {Function} func Function provided in the HOT settings.
     * @returns {Array} An array of endpoints.
     */
    fillMissingEndpointData(e) {
      return this.parseSettings(e.call(this));
    }
    /**
     * Parse plugin's settings.
     *
     * @param {Array} settings The settings array.
     * @returns {object[]}
     */
    parseSettings(e) {
      const t = [];
      let i = e;
      if (!i && typeof this.settings == "function") {
        this.settingsType = "function";
        return;
      }
      return i || (i = this.settings), z(i, (r) => {
        const s = {};
        this.assignSetting(r, s, "ranges", [[0, this.hot.countRows() - 1]]), this.assignSetting(r, s, "reversedRowCoords", !1), this.assignSetting(r, s, "destinationRow", new Error(`
        You must provide a destination row for the Column Summary plugin in order to work properly!
      `)), this.assignSetting(r, s, "destinationColumn", new Error(`
        You must provide a destination column for the Column Summary plugin in order to work properly!
      `)), this.assignSetting(r, s, "sourceColumn", r.destinationColumn), this.assignSetting(r, s, "type", "sum"), this.assignSetting(r, s, "forceNumeric", !1), this.assignSetting(r, s, "suppressDataTypeErrors", !0), this.assignSetting(r, s, "customFunction", null), this.assignSetting(r, s, "readOnly", !0), this.assignSetting(r, s, "roundFloat", !1), t.push(s);
      }), t;
    }
    /**
     * Setter for the internal setting objects.
     *
     * @param {object} settings Object with the settings.
     * @param {object} endpoint Contains information about the endpoint for the the calculation.
     * @param {string} name Settings name.
     * @param {object} defaultValue Default value for the settings.
     */
    assignSetting(e, t, i, r) {
      if (i === "ranges" && e[i] === void 0) {
        t[i] = r;
        return;
      } else if (i === "ranges" && e[i].length === 0)
        return;
      if (e[i] === void 0) {
        if (r instanceof Error)
          throw r;
        t[i] = r;
      } else
        i === "destinationRow" && t.reversedRowCoords ? t[i] = this.hot.countRows() - e[i] - 1 : t[i] = e[i];
    }
    /**
     * Resets the endpoint setup before the structure alteration (like inserting or removing rows/columns). Used for settings provided as a function.
     *
     * @private
     * @param {string} action Type of the action performed.
     * @param {number} index Row/column index.
     * @param {number} number Number of rows/columns added/removed.
     */
    resetSetupBeforeStructureAlteration(e, t, i) {
      if (this.settingsType !== "function")
        return;
      const r = e.indexOf("row") > -1 ? "row" : "col", s = this.getAllEndpoints();
      z(s, (o) => {
        r === "row" && o.destinationRow >= t && (e === "insert_row" ? o.alterRowOffset = i : e === "remove_row" && (o.alterRowOffset = -1 * i)), r === "col" && o.destinationColumn >= t && (e === "insert_col" ? o.alterColumnOffset = i : e === "remove_col" && (o.alterColumnOffset = -1 * i));
      }), this.resetAllEndpoints(s, !1);
    }
    /**
     * AfterCreateRow/afterCreateRow/afterRemoveRow/afterRemoveCol hook callback. Reset and reenables the summary functionality
     * after changing the table structure.
     *
     * @private
     * @param {string} action Type of the action performed.
     * @param {number} index Row/column index.
     * @param {number} number Number of rows/columns added/removed.
     * @param {Array} [logicRows] Array of the logical indexes.
     * @param {string} [source] Source of change.
     * @param {boolean} [forceRefresh] `true` of the endpoints should refresh after completing the function.
     */
    resetSetupAfterStructureAlteration(e, t, i, r, s) {
      let o = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : !0;
      if (this.settingsType === "function") {
        const d = () => (this.hot.removeHook("beforeViewRender", d), this.refreshAllEndpoints());
        this.hot.addHookOnce("beforeViewRender", d);
        return;
      }
      const a = e.indexOf("row") > -1 ? "row" : "col", l = e.indexOf("remove") > -1 ? -1 : 1, c = this.getAllEndpoints(), u = e.indexOf("move_row") === 0, h = t;
      z(c, (d) => {
        a === "row" && d.destinationRow >= h && (d.alterRowOffset = l * i), a === "col" && d.destinationColumn >= h && (d.alterColumnOffset = l * i);
      }), this.resetAllEndpoints(c, !u), u ? z(c, (d) => {
        this.extendEndpointRanges(d, h, r[0], r.length), this.recreatePhysicalRanges(d), this.clearOffsetInformation(d);
      }) : z(c, (d) => {
        this.shiftEndpointCoordinates(d, h);
      }), o && this.refreshAllEndpoints();
    }
    /**
     * Clear the offset information from the endpoint object.
     *
     * @private
     * @param {object} endpoint And endpoint object.
     */
    clearOffsetInformation(e) {
      e.alterRowOffset = void 0, e.alterColumnOffset = void 0;
    }
    /**
     * Extend the row ranges for the provided endpoint.
     *
     * @private
     * @param {object} endpoint The endpoint object.
     * @param {number} placeOfAlteration Index of the row where the alteration takes place.
     * @param {number} previousPosition Previous endpoint result position.
     * @param {number} offset Offset generated by the alteration.
     */
    extendEndpointRanges(e, t, i, r) {
      z(e.ranges, (s) => {
        s[1] && (t >= s[0] && t <= s[1] ? i > s[1] ? s[1] += r : i < s[0] && (s[0] -= r) : i >= s[0] && i <= s[1] && (s[1] -= r, t <= s[0] && (s[0] += 1, s[1] += 1)));
      });
    }
    /**
     * Recreate the physical ranges for the provided endpoint. Used (for example) when a row gets moved and extends an existing range.
     *
     * @private
     * @param {object} endpoint An endpoint object.
     */
    recreatePhysicalRanges(e) {
      const t = e.ranges, i = [], r = [];
      z(t, (s) => {
        const o = [];
        if (s[1])
          for (let a = s[0]; a <= s[1]; a++)
            o.push(this.hot.toPhysicalRow(a));
        else
          o.push(this.hot.toPhysicalRow(s[0]));
        r.push(o);
      }), z(r, (s) => {
        let o = [];
        z(s, (a, l) => {
          l === 0 ? o.push(a) : s[l] !== s[l - 1] + 1 && (o.push(s[l - 1]), i.push(o), o = [], o.push(a)), l === s.length - 1 && (o.push(a), i.push(o));
        });
      }), e.ranges = i;
    }
    /**
     * Shifts the endpoint coordinates by the defined offset.
     *
     * @private
     * @param {object} endpoint Endpoint object.
     * @param {number} offsetStartIndex Index of the performed change (if the change is located after the endpoint, nothing about the endpoint has to be changed.
     */
    shiftEndpointCoordinates(e, t) {
      e.alterRowOffset && e.alterRowOffset !== 0 ? (e.destinationRow += e.alterRowOffset || 0, z(e.ranges, (i) => {
        z(i, (r, s) => {
          r >= t && (i[s] += e.alterRowOffset || 0);
        });
      })) : e.alterColumnOffset && e.alterColumnOffset !== 0 && (e.destinationColumn += e.alterColumnOffset || 0, e.sourceColumn += e.alterColumnOffset || 0);
    }
    /**
     * Resets (removes) the endpoints from the table.
     *
     * @param {Array} [endpoints] Array containing the endpoints.
     * @param {boolean} [useOffset=true] Use the cell offset value.
     */
    resetAllEndpoints() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getAllEndpoints(), t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
      e.some((r) => {
        const s = r.alterRowOffset || 0, o = r.alterColumnOffset || 0;
        return r.destinationRow + s >= this.hot.countRows() || r.destinationColumn + o >= this.hot.countCols();
      }) || (this.cellsToSetCache = [], z(e, (r) => {
        this.resetEndpointValue(r, t);
      }), this.hot.setDataAtCell(this.cellsToSetCache, "ColumnSummary.reset"), this.cellsToSetCache = []);
    }
    /**
     * Calculate and refresh all defined endpoints.
     */
    refreshAllEndpoints() {
      this.cellsToSetCache = [], z(this.getAllEndpoints(), (e) => {
        this.currentEndpoint = e, this.plugin.calculate(e), this.setEndpointValue(e, "init");
      }), this.currentEndpoint = null, this.hot.setDataAtCell(this.cellsToSetCache, "ColumnSummary.reset"), this.cellsToSetCache = [];
    }
    /**
     * Calculate and refresh endpoints only in the changed columns.
     *
     * @param {Array} changes Array of changes from the `afterChange` hook.
     */
    refreshChangedEndpoints(e) {
      const t = [];
      this.cellsToSetCache = [], z(e, (i, r, s) => {
        `${i[2] || ""}` != `${i[3]}` && z(this.getAllEndpoints(), (o, a) => {
          this.hot.propToCol(s[r][1]) === o.sourceColumn && t.indexOf(a) === -1 && t.push(a);
        });
      }), z(t, (i) => {
        this.refreshEndpoint(this.getEndpoint(i));
      }), this.hot.setDataAtCell(this.cellsToSetCache, "ColumnSummary.reset"), this.cellsToSetCache = [];
    }
    /**
     * Refreshes the cell meta information for the all endpoints after the `updateSettings` method call which in some
     * cases (call with `columns` option) can reset the cell metas to the initial state.
     */
    refreshCellMetas() {
      this.endpoints.forEach((e) => {
        const t = this.hot.toVisualRow(e.destinationRow);
        if (t !== null) {
          const i = this.hot.getCellMeta(t, e.destinationColumn);
          i.readOnly = e.readOnly, i.className = "columnSummaryResult";
        }
      });
    }
    /**
     * Calculate and refresh a single endpoint.
     *
     * @param {object} endpoint Contains the endpoint information.
     */
    refreshEndpoint(e) {
      this.currentEndpoint = e, this.plugin.calculate(e), this.setEndpointValue(e), this.currentEndpoint = null;
    }
    /**
     * Reset the endpoint value.
     *
     * @param {object} endpoint Contains the endpoint information.
     * @param {boolean} [useOffset=true] Use the cell offset value.
     */
    resetEndpointValue(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
      const i = e.alterRowOffset || 0, r = e.alterColumnOffset || 0;
      this.cellsToSetCache.push([this.hot.toVisualRow(e.destinationRow + (t ? i : 0)), this.hot.toVisualColumn(e.destinationColumn + (t ? r : 0)), ""]);
    }
    /**
     * Set the endpoint value.
     *
     * @param {object} endpoint Contains the endpoint information.
     * @param {string} [source] Source of the call information.
     * @param {boolean} [render=false] `true` if it needs to render the table afterwards.
     */
    setEndpointValue(e, t) {
      let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
      const r = this.hot.toVisualRow(e.destinationRow);
      if (e.destinationRow >= this.hot.countRows() || e.destinationColumn >= this.hot.countCols()) {
        this.throwOutOfBoundsWarning();
        return;
      }
      const s = this.hot.toVisualRow(e.destinationRow);
      if (s !== null) {
        const o = this.hot.getCellMeta(s, e.destinationColumn);
        (t === "init" || o.readOnly !== e.readOnly) && (o.readOnly = e.readOnly, o.className = "columnSummaryResult");
      }
      if ((e.roundFloat === !0 || Number.isInteger(e.roundFloat)) && !isNaN(e.result)) {
        const o = e.roundFloat;
        let a = 0;
        Number.isInteger(o) && (a = Math.min(Math.max(0, o), 100)), e.result = e.result.toFixed(a);
      }
      i ? this.hot.setDataAtCell(r, e.destinationColumn, e.result, "ColumnSummary.set") : this.cellsToSetCache.push([r, e.destinationColumn, e.result]), e.alterRowOffset = void 0, e.alterColumnOffset = void 0;
    }
    /**
     * Throw an error for the calculation range being out of boundaries.
     *
     * @private
     */
    throwOutOfBoundsWarning() {
      Yt("One of the Column Summary plugins' destination points you provided is beyond the table boundaries!");
    }
  }
  function $T(n) {
    return n == null || isNaN(n);
  }
  function QIe(n, e) {
    JIe(n, e), e.add(n);
  }
  function JIe(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function eOe(n, e, t) {
    return (e = tOe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function tOe(n) {
    var e = nOe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function nOe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function X0(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  const FT = "columnSummary", iOe = 220;
  var eb = /* @__PURE__ */ new WeakSet();
  class rOe extends Lt {
    constructor() {
      super(...arguments), QIe(this, eb), eOe(this, "endpoints", null);
    }
    static get PLUGIN_KEY() {
      return FT;
    }
    static get PLUGIN_PRIORITY() {
      return iOe;
    }
    /**
     * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link ColumnSummary#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return !!this.hot.getSettings()[FT];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
    enablePlugin() {
      var e = this;
      this.enabled || (this.settings = this.hot.getSettings()[FT], this.endpoints = new ZIe(this, this.settings), this.addHook("afterInit", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return X0(eb, e, sOe).call(e, ...i);
      }), this.addHook("afterChange", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return X0(eb, e, aOe).call(e, ...i);
      }), this.addHook("afterUpdateSettings", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return X0(eb, e, oOe).call(e, ...i);
      }), this.addHook("beforeCreateRow", (t, i, r) => this.endpoints.resetSetupBeforeStructureAlteration("insert_row", t, i, null, r)), this.addHook("beforeCreateCol", (t, i, r) => this.endpoints.resetSetupBeforeStructureAlteration("insert_col", t, i, null, r)), this.addHook("beforeRemoveRow", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return e.endpoints.resetSetupBeforeStructureAlteration("remove_row", ...i);
      }), this.addHook("beforeRemoveCol", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return e.endpoints.resetSetupBeforeStructureAlteration("remove_col", ...i);
      }), this.addHook("afterCreateRow", (t, i, r) => this.endpoints.resetSetupAfterStructureAlteration("insert_row", t, i, null, r)), this.addHook("afterCreateCol", (t, i, r) => this.endpoints.resetSetupAfterStructureAlteration("insert_col", t, i, null, r)), this.addHook("afterRemoveRow", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return e.endpoints.resetSetupAfterStructureAlteration("remove_row", ...i);
      }), this.addHook("afterRemoveCol", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return e.endpoints.resetSetupAfterStructureAlteration("remove_col", ...i);
      }), this.addHook("afterRowMove", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return X0(eb, e, lOe).call(e, ...i);
      }), super.enablePlugin());
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
    disablePlugin() {
      this.endpoints = null, this.settings = null, this.currentEndpoint = null, super.disablePlugin();
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`columnSummary`](@/api/options.md#columnsummary)
     */
    updatePlugin() {
      this.disablePlugin(), this.enablePlugin(), this.endpoints.initEndpoints(), super.updatePlugin();
    }
    /**
     * Calculates math for a single endpoint.
     *
     * @private
     * @param {object} endpoint Contains information about the endpoint.
     */
    calculate(e) {
      switch (e.type.toLowerCase()) {
        case "sum":
          e.result = this.calculateSum(e);
          break;
        case "min":
          e.result = this.calculateMinMax(e, e.type);
          break;
        case "max":
          e.result = this.calculateMinMax(e, e.type);
          break;
        case "count":
          e.result = this.countEntries(e);
          break;
        case "average":
          e.result = this.calculateAverage(e);
          break;
        case "custom":
          e.result = e.customFunction.call(this, e);
          break;
      }
    }
    /**
     * Calculates sum of the values contained in ranges provided in the plugin config.
     *
     * @private
     * @param {object} endpoint Contains the endpoint information.
     * @returns {number} Sum for the selected range.
     */
    calculateSum(e) {
      let t = 0;
      return lt(e.ranges, (i) => {
        t += this.getPartialSum(i, e.sourceColumn);
      }), t;
    }
    /**
     * Returns partial sum of values from a single row range.
     *
     * @private
     * @param {Array} rowRange Range for the sum.
     * @param {number} col Column index.
     * @returns {number} The partial sum.
     */
    getPartialSum(e, t) {
      let i = 0, r = e[1] || e[0], s = null, o = 0;
      do {
        if (s = this.getCellValue(r, t), s = $T(s) ? null : s, s !== null) {
          const a = (`${s}`.split(".")[1] || []).length || 1;
          a > o && (o = a);
        }
        i += s || 0, r -= 1;
      } while (r >= e[0]);
      return Math.round(i * 10 ** o) / 10 ** o;
    }
    /**
     * Calculates the minimal value for the selected ranges.
     *
     * @private
     * @param {object} endpoint Contains the endpoint information.
     * @param {string} type `'min'` or `'max'`.
     * @returns {number} Min or Max value.
     */
    calculateMinMax(e, t) {
      let i = null;
      return lt(e.ranges, (r) => {
        const s = this.getPartialMinMax(r, e.sourceColumn, t);
        if (i === null && s !== null && (i = s), s !== null)
          switch (t) {
            case "min":
              i = Math.min(i, s);
              break;
            case "max":
              i = Math.max(i, s);
              break;
          }
      }), i === null ? "Not enough data" : i;
    }
    /**
     * Returns a local minimum of the provided sub-range.
     *
     * @private
     * @param {Array} rowRange Range for the calculation.
     * @param {number} col Column index.
     * @param {string} type `'min'` or `'max'`.
     * @returns {number|null} Min or max value.
     */
    getPartialMinMax(e, t, i) {
      let r = null, s = e[1] || e[0], o;
      do {
        if (o = this.getCellValue(s, t), o = $T(o) ? null : o, r === null)
          r = o;
        else if (o !== null)
          switch (i) {
            case "min":
              r = Math.min(r, o);
              break;
            case "max":
              r = Math.max(r, o);
              break;
          }
        s -= 1;
      } while (s >= e[0]);
      return r;
    }
    /**
     * Counts empty cells in the provided row range.
     *
     * @private
     * @param {Array} rowRange Row range for the calculation.
     * @param {number} col Column index.
     * @returns {number} Empty cells count.
     */
    countEmpty(e, t) {
      let i, r = 0, s = e[1] || e[0];
      do
        i = this.getCellValue(s, t), i = $T(i) ? null : i, i === null && (r += 1), s -= 1;
      while (s >= e[0]);
      return r;
    }
    /**
     * Counts non-empty cells in the provided row range.
     *
     * @private
     * @param {object} endpoint Contains the endpoint information.
     * @returns {number} Entry count.
     */
    countEntries(e) {
      let t = 0;
      const i = e.ranges;
      return lt(i, (r) => {
        const s = r[1] === void 0 ? 1 : r[1] - r[0] + 1, o = this.countEmpty(r, e.sourceColumn);
        t += s, t -= o;
      }), t;
    }
    /**
     * Calculates the average value from the cells in the range.
     *
     * @private
     * @param {object} endpoint Contains the endpoint information.
     * @returns {number} Avarage value.
     */
    calculateAverage(e) {
      const t = this.calculateSum(e), i = this.countEntries(e);
      return t / i;
    }
    /**
     * Returns a cell value, taking into consideration a basic validation.
     *
     * @private
     * @param {number} row Row index.
     * @param {number} col Column index.
     * @returns {string} The cell value.
     */
    getCellValue(e, t) {
      const i = this.hot.toVisualRow(e), r = this.hot.toVisualColumn(t);
      let s = this.hot.getSourceDataAtCell(e, t), o = "";
      if (i !== null && r !== null && (o = this.hot.getCellMeta(i, r).className || ""), o.indexOf("columnSummaryResult") > -1)
        return null;
      if (this.endpoints.currentEndpoint.forceNumeric && (typeof s == "string" && (s = s.replace(/,/, ".")), s = parseFloat(s)), isNaN(s) && !this.endpoints.currentEndpoint.suppressDataTypeErrors)
        throw new Error(Kt`ColumnSummary plugin: cell at (${e}, ${t}) is not in a\x20
          numeric format. Cannot do the calculation.`);
      return s;
    }
  }
  function sOe() {
    this.endpoints.initEndpoints();
  }
  function oOe(n) {
    n.columns !== void 0 && this.endpoints.refreshCellMetas();
  }
  function aOe(n, e) {
    n && e !== "ColumnSummary.reset" && e !== "ColumnSummary.set" && e !== "loadData" && this.endpoints.refreshChangedEndpoints(n);
  }
  function lOe(n, e) {
    this.endpoints.resetSetupBeforeStructureAlteration("move_row", n[0], n.length, n, this.pluginName), this.endpoints.resetSetupAfterStructureAlteration("move_row", e, n.length, n, this.pluginName);
  }
  function cOe(n, e) {
    oY(n, e), e.add(n);
  }
  function BT(n, e, t) {
    oY(n, e), e.set(n, t);
  }
  function oY(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function Og(n, e) {
    return n.get(zL(n, e));
  }
  function rI(n, e, t) {
    return n.set(zL(n, e), t), t;
  }
  function zL(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var X_ = /* @__PURE__ */ new WeakMap(), Z0 = /* @__PURE__ */ new WeakMap(), Q0 = /* @__PURE__ */ new WeakMap(), D3 = /* @__PURE__ */ new WeakSet();
  class aY {
    constructor() {
      cOe(this, D3), BT(this, X_, !0), BT(this, Z0, null), BT(this, Q0, new ResizeObserver((e) => zL(D3, this, uOe).call(this, e)));
    }
    /**
     * Sets the observed element.
     *
     * @param {HTMLElement} element The element to observe.
     */
    setObservedElement(e) {
      rI(Z0, this, e);
    }
    /**
     * Stops observing the element.
     */
    unobserve() {
      Og(Q0, this).unobserve(Og(Z0, this));
    }
    /**
     * Starts observing the element.
     */
    observe() {
      rI(X_, this, !0), Og(Q0, this).observe(Og(Z0, this));
    }
    /**
     * Destroys the observer.
     */
    destroy() {
      Og(Q0, this).disconnect();
    }
  }
  function uOe(n) {
    if (Og(X_, this) || !Array.isArray(n) || !n.length) {
      rI(X_, this, !1);
      return;
    }
    n.forEach((e) => {
      let {
        borderBoxSize: t
      } = e;
      const {
        inlineSize: i,
        blockSize: r
      } = t[0];
      this.runLocalHooks("resize", i, r);
    });
  }
  qt(aY, Ki);
  function Hh(n, e, t) {
    hOe(n, e), e.set(n, t);
  }
  function hOe(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function en(n, e) {
    return n.get(lY(n, e));
  }
  function Nl(n, e, t) {
    return n.set(lY(n, e), t), t;
  }
  function lY(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var $h = /* @__PURE__ */ new WeakMap(), VT = /* @__PURE__ */ new WeakMap(), Ll = /* @__PURE__ */ new WeakMap(), Fh = /* @__PURE__ */ new WeakMap(), qc = /* @__PURE__ */ new WeakMap(), J0 = /* @__PURE__ */ new WeakMap(), rg = /* @__PURE__ */ new WeakMap();
  class Ed {
    static get CLASS_EDITOR_CONTAINER() {
      return "htCommentsContainer";
    }
    static get CLASS_EDITOR() {
      return "htComments";
    }
    static get CLASS_INPUT() {
      return "htCommentTextArea";
    }
    static get CLASS_CELL() {
      return "htCommentCell";
    }
    /**
     * @type {Document}
     */
    constructor(e, t) {
      var i = this;
      Hh(this, $h, void 0), Hh(this, VT, !1), Hh(this, Ll, null), Hh(this, Fh, void 0), Hh(this, qc, void 0), Hh(this, J0, !0), Hh(this, rg, new aY()), Nl($h, this, e), Nl(VT, this, t), Nl(Fh, this, this.createEditor()), Nl(qc, this, en(Fh, this).style), en(rg, this).setObservedElement(this.getInputElement()), en(rg, this).addLocalHook("resize", function() {
        for (var r = arguments.length, s = new Array(r), o = 0; o < r; o++)
          s[o] = arguments[o];
        return i.runLocalHooks("resize", ...s);
      }), this.hide();
    }
    /**
     * Set position of the comments editor according to the  provided x and y coordinates.
     *
     * @param {number} x X position (in pixels).
     * @param {number} y Y position (in pixels).
     */
    setPosition(e, t) {
      en(qc, this).left = `${e}px`, en(qc, this).top = `${t}px`;
    }
    /**
     * Set the editor size according to the provided arguments.
     *
     * @param {number} width Width in pixels.
     * @param {number} height Height in pixels.
     */
    setSize(e, t) {
      if (e && t) {
        const i = this.getInputElement();
        i.style.width = `${e}px`, i.style.height = `${t}px`;
      }
    }
    /**
     * Returns the size of the comments editor.
     *
     * @returns {{ width: number, height: number }}
     */
    getSize() {
      return {
        width: fn(this.getInputElement()),
        height: ti(this.getInputElement())
      };
    }
    /**
     * Starts observing the editor size.
     */
    observeSize() {
      en(rg, this).observe();
    }
    /**
     * Reset the editor size to its initial state.
     */
    resetSize() {
      const e = this.getInputElement();
      e.style.width = "", e.style.height = "";
    }
    /**
     * Set the read-only state for the comments editor.
     *
     * @param {boolean} state The new read only state.
     */
    setReadOnlyState(e) {
      const t = this.getInputElement();
      t.readOnly = e;
    }
    /**
     * Show the comments editor.
     */
    show() {
      en(qc, this).display = "block", Nl(J0, this, !1);
    }
    /**
     * Hide the comments editor.
     */
    hide() {
      en(rg, this).unobserve(), en(J0, this) || (en(qc, this).display = "none"), Nl(J0, this, !0);
    }
    /**
     * Checks if the editor is visible.
     *
     * @returns {boolean}
     */
    isVisible() {
      return en(qc, this).display === "block";
    }
    /**
     * Set the comment value.
     *
     * @param {string} [value] The value to use.
     */
    setValue() {
      const t = (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "") || "";
      this.getInputElement().value = t;
    }
    /**
     * Get the comment value.
     *
     * @returns {string}
     */
    getValue() {
      return this.getInputElement().value;
    }
    /**
     * Checks if the comment input element is focused.
     *
     * @returns {boolean}
     */
    isFocused() {
      return en($h, this).activeElement === this.getInputElement();
    }
    /**
     * Focus the comments input element.
     */
    focus() {
      this.getInputElement().focus();
    }
    /**
     * Create the `textarea` to be used as a comments editor.
     *
     * @returns {HTMLElement}
     */
    createEditor() {
      const e = en($h, this).createElement("div"), t = en($h, this).createElement("textarea");
      return e.style.display = "none", Nl(Ll, this, en($h, this).createElement("div")), en(Ll, this).setAttribute("dir", en(VT, this) ? "rtl" : "ltr"), ue(en(Ll, this), Ed.CLASS_EDITOR_CONTAINER), en($h, this).body.appendChild(en(Ll, this)), ue(e, Ed.CLASS_EDITOR), ue(t, Ed.CLASS_INPUT), t.setAttribute("data-hot-input", !0), e.appendChild(t), en(Ll, this).appendChild(e), e;
    }
    /**
     * Get the input element.
     *
     * @returns {HTMLElement}
     */
    getInputElement() {
      return en(Fh, this).querySelector(`.${Ed.CLASS_INPUT}`);
    }
    /**
     * Destroy the comments editor.
     */
    destroy() {
      const e = en(Ll, this) ? en(Ll, this).parentNode : null;
      en(Fh, this).parentNode.removeChild(en(Fh, this)), Nl(Fh, this, null), Nl(qc, this, null), en(rg, this).destroy(), e && e.removeChild(en(Ll, this));
    }
  }
  qt(Ed, Ki);
  function WT(n, e, t) {
    return (e = dOe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function dOe(n) {
    var e = fOe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function fOe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  const gOe = 250, pOe = 250;
  class cY {
    constructor(e) {
      WT(this, "wasLastActionShow", !0), WT(this, "showDebounced", null), WT(this, "hidingTimer", null), this.updateDelay(e);
    }
    /**
     * Responsible for hiding comment after proper delay.
     */
    hide() {
      this.wasLastActionShow = !1, this.hidingTimer = setTimeout(() => {
        this.wasLastActionShow === !1 && this.runLocalHooks("hide");
      }, pOe);
    }
    /**
     * Responsible for showing comment after proper delay.
     *
     * @param {object} range Coordinates of selected cell.
     */
    show(e) {
      this.wasLastActionShow = !0, this.showDebounced(e);
    }
    /**
     * Cancel hiding comment.
     */
    cancelHiding() {
      this.wasLastActionShow = !0, clearTimeout(this.hidingTimer), this.hidingTimer = null;
    }
    /**
     * Update the switch settings.
     *
     * @param {number} displayDelay Delay of showing the comments (in milliseconds).
     */
    updateDelay() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : gOe;
      this.showDebounced = N1((t) => {
        this.wasLastActionShow && this.runLocalHooks("show", t.from.row, t.from.col);
      }, e);
    }
    /**
     * Destroy the switcher.
     */
    destroy() {
      this.clearLocalHooks();
    }
  }
  qt(cY, Ki);
  function mOe(n, e) {
    return n.indexOf(e) !== -1 ? n : `${n.replace("htTop", "").replace("htMiddle", "").replace("htBottom", "").replace("  ", "")} ${e}`;
  }
  function bOe(n, e) {
    return n.indexOf(e) !== -1 ? n : `${n.replace("htLeft", "").replace("htCenter", "").replace("htRight", "").replace("htJustify", "").replace("  ", "")} ${e}`;
  }
  function Bh(n, e) {
    const t = {};
    return z(n, (i) => {
      i.forAll((r, s) => {
        r >= 0 && s >= 0 && (t[r] || (t[r] = []), t[r][s] = e(r, s));
      });
    }), t;
  }
  function cu(n, e, t, i, r) {
    z(n, (s) => {
      s.forAll((o, a) => {
        o >= 0 && a >= 0 && vOe(o, a, e, t, i, r);
      });
    });
  }
  function vOe(n, e, t, i, r, s) {
    const o = r(n, e);
    let a = i;
    o.className && (t === "vertical" ? a = mOe(o.className, i) : a = bOe(o.className, i)), s(n, e, "className", a);
  }
  function Xl(n) {
    return `<span class="selected">✓</span>${n}`;
  }
  function Ev(n, e) {
    let t = !1;
    return Array.isArray(n) && z(n, (i) => (i.forAll((r, s) => {
      if (r >= 0 && s >= 0 && e(r, s))
        return t = !0, !1;
    }), t)), t;
  }
  function eE(n, e) {
    const t = {
      top: 0,
      left: 0
    };
    if (e !== n.ownerDocument) {
      const {
        frameElement: i
      } = e.defaultView, {
        top: r,
        left: s
      } = i.getBoundingClientRect();
      t.top = r, t.left = s;
    }
    return t;
  }
  function wOe(n) {
    return function(e, t) {
      const i = this.getCellMeta(e, t).className;
      return i && i.indexOf(n) !== -1;
    };
  }
  function Br(n, e) {
    return Ev(n.getSelectedRange(), wOe(e).bind(n));
  }
  const ut = "---------";
  function yOe() {
    return {
      name: ut
    };
  }
  const Us = "alignment";
  function COe() {
    return {
      key: Us,
      name() {
        return this.getTranslatedPhrase(AN);
      },
      disabled() {
        if (this.countRows() === 0 || this.countCols() === 0)
          return !0;
        const n = this.getSelectedRangeLast();
        return !n || n.isSingleHeader() ? !0 : !(this.getSelectedRange() && !this.selection.isSelectedByCorner());
      },
      submenu: {
        items: [{
          key: `${Us}:left`,
          checkable: !0,
          ariaLabel() {
            return this.getTranslatedPhrase(L_);
          },
          ariaChecked() {
            return Br(this, "htLeft");
          },
          name() {
            let n = this.getTranslatedPhrase(L_);
            return Br(this, "htLeft") && (n = Xl(n)), n;
          },
          callback() {
            const n = this.getSelectedRange(), e = Bh(n, (r, s) => this.getCellMeta(r, s).className), t = "horizontal", i = "htLeft";
            this.runHooks("beforeCellAlignment", e, n, t, i), cu(n, t, i, (r, s) => this.getCellMeta(r, s), (r, s, o, a) => this.setCellMeta(r, s, o, a)), this.render();
          },
          disabled: !1
        }, {
          key: `${Us}:center`,
          checkable: !0,
          ariaLabel() {
            return this.getTranslatedPhrase(H_);
          },
          ariaChecked() {
            return Br(this, "htCenter");
          },
          name() {
            let n = this.getTranslatedPhrase(H_);
            return Br(this, "htCenter") && (n = Xl(n)), n;
          },
          callback() {
            const n = this.getSelectedRange(), e = Bh(n, (r, s) => this.getCellMeta(r, s).className), t = "horizontal", i = "htCenter";
            this.runHooks("beforeCellAlignment", e, n, t, i), cu(n, t, i, (r, s) => this.getCellMeta(r, s), (r, s, o, a) => this.setCellMeta(r, s, o, a)), this.render();
          },
          disabled: !1
        }, {
          key: `${Us}:right`,
          checkable: !0,
          ariaLabel() {
            return this.getTranslatedPhrase($_);
          },
          ariaChecked() {
            return Br(this, "htRight");
          },
          name() {
            let n = this.getTranslatedPhrase($_);
            return Br(this, "htRight") && (n = Xl(n)), n;
          },
          callback() {
            const n = this.getSelectedRange(), e = Bh(n, (r, s) => this.getCellMeta(r, s).className), t = "horizontal", i = "htRight";
            this.runHooks("beforeCellAlignment", e, n, t, i), cu(n, t, i, (r, s) => this.getCellMeta(r, s), (r, s, o, a) => this.setCellMeta(r, s, o, a)), this.render();
          },
          disabled: !1
        }, {
          key: `${Us}:justify`,
          checkable: !0,
          ariaLabel() {
            return this.getTranslatedPhrase(F_);
          },
          ariaChecked() {
            return Br(this, "htJustify");
          },
          name() {
            let n = this.getTranslatedPhrase(F_);
            return Br(this, "htJustify") && (n = Xl(n)), n;
          },
          callback() {
            const n = this.getSelectedRange(), e = Bh(n, (r, s) => this.getCellMeta(r, s).className), t = "horizontal", i = "htJustify";
            this.runHooks("beforeCellAlignment", e, n, t, i), cu(n, t, i, (r, s) => this.getCellMeta(r, s), (r, s, o, a) => this.setCellMeta(r, s, o, a)), this.render();
          },
          disabled: !1
        }, {
          name: ut
        }, {
          key: `${Us}:top`,
          checkable: !0,
          ariaLabel() {
            return this.getTranslatedPhrase(B_);
          },
          ariaChecked() {
            return Br(this, "htTop");
          },
          name() {
            let n = this.getTranslatedPhrase(B_);
            return Br(this, "htTop") && (n = Xl(n)), n;
          },
          callback() {
            const n = this.getSelectedRange(), e = Bh(n, (r, s) => this.getCellMeta(r, s).className), t = "vertical", i = "htTop";
            this.runHooks("beforeCellAlignment", e, n, t, i), cu(n, t, i, (r, s) => this.getCellMeta(r, s), (r, s, o, a) => this.setCellMeta(r, s, o, a)), this.render();
          },
          disabled: !1
        }, {
          key: `${Us}:middle`,
          checkable: !0,
          ariaLabel() {
            return this.getTranslatedPhrase(V_);
          },
          ariaChecked() {
            return Br(this, "htMiddle");
          },
          name() {
            let n = this.getTranslatedPhrase(V_);
            return Br(this, "htMiddle") && (n = Xl(n)), n;
          },
          callback() {
            const n = this.getSelectedRange(), e = Bh(n, (r, s) => this.getCellMeta(r, s).className), t = "vertical", i = "htMiddle";
            this.runHooks("beforeCellAlignment", e, n, t, i), cu(n, t, i, (r, s) => this.getCellMeta(r, s), (r, s, o, a) => this.setCellMeta(r, s, o, a)), this.render();
          },
          disabled: !1
        }, {
          key: `${Us}:bottom`,
          checkable: !0,
          ariaLabel() {
            return this.getTranslatedPhrase(W_);
          },
          ariaChecked() {
            return Br(this, "htBottom");
          },
          name() {
            let n = this.getTranslatedPhrase(W_);
            return Br(this, "htBottom") && (n = Xl(n)), n;
          },
          callback() {
            const n = this.getSelectedRange(), e = Bh(n, (r, s) => this.getCellMeta(r, s).className), t = "vertical", i = "htBottom";
            this.runHooks("beforeCellAlignment", e, n, t, i), cu(n, t, i, (r, s) => this.getCellMeta(r, s), (r, s, o, a) => this.setCellMeta(r, s, o, a)), this.render();
          },
          disabled: !1
        }]
      }
    };
  }
  const tE = "clear_column";
  function SOe() {
    return {
      key: tE,
      name() {
        return this.getTranslatedPhrase(pN);
      },
      callback(n, e) {
        const t = e[0].start.col, i = e[0].end.col;
        this.countRows() && this.populateFromArray(0, t, [[null]], Math.max(e[0].start.row, e[0].end.row), i, "ContextMenu.clearColumn");
      },
      disabled() {
        const n = this.getSelectedRangeLast();
        return !n || n.isSingleHeader() && n.highlight.col < 0 ? !0 : !this.selection.isSelectedByColumnHeader();
      }
    };
  }
  const vy = "col_left";
  function _Oe() {
    return {
      key: vy,
      name() {
        return this.getTranslatedPhrase(cN);
      },
      callback() {
        const n = this.getSelectedRangeLast().getTopLeftCorner(), e = this.isRtl() ? "insert_col_end" : "insert_col_start";
        this.alter(e, n.col, 1, "ContextMenu.columnLeft");
      },
      disabled() {
        if (!this.isColumnModificationAllowed())
          return !0;
        const n = this.getSelectedRangeLast();
        return !n || n.isSingleHeader() && n.highlight.col < 0 ? !0 : this.selection.isSelectedByCorner() ? this.countCols() === 0 : this.selection.isSelectedByRowHeader() || this.countCols() >= this.getSettings().maxCols;
      },
      hidden() {
        return !this.getSettings().allowInsertColumn;
      }
    };
  }
  const wy = "col_right";
  function ROe() {
    return {
      key: wy,
      name() {
        return this.getTranslatedPhrase(uN);
      },
      callback() {
        const n = this.getSelectedRangeLast().getTopRightCorner(), e = this.isRtl() ? "insert_col_start" : "insert_col_end";
        this.alter(e, n.col, 1, "ContextMenu.columnRight");
      },
      disabled() {
        if (!this.isColumnModificationAllowed())
          return !0;
        const n = this.getSelectedRangeLast();
        return !n || n.isSingleHeader() && n.highlight.col < 0 ? !0 : this.selection.isSelectedByCorner() ? !1 : this.selection.isSelectedByRowHeader() || this.countCols() >= this.getSettings().maxCols;
      },
      hidden() {
        return !this.getSettings().allowInsertColumn;
      }
    };
  }
  const yy = "make_read_only";
  function EOe() {
    return {
      key: yy,
      checkable: !0,
      ariaChecked() {
        return Ev(this.getSelectedRange(), (e, t) => this.getCellMeta(e, t).readOnly);
      },
      ariaLabel() {
        return this.getTranslatedPhrase(N_);
      },
      name() {
        let n = this.getTranslatedPhrase(N_);
        return Ev(this.getSelectedRange(), (t, i) => this.getCellMeta(t, i).readOnly) && (n = Xl(n)), n;
      },
      callback() {
        const n = this.getSelectedRange(), e = Ev(n, (t, i) => this.getCellMeta(t, i).readOnly);
        z(n, (t) => {
          t.forAll((i, r) => {
            i >= 0 && r >= 0 && this.setCellMeta(i, r, "readOnly", !e);
          });
        }), this.render();
      },
      disabled() {
        const n = this.getSelectedRangeLast();
        return !!(!n || n.isSingleHeader() || this.selection.isSelectedByCorner() || this.countRows() === 0 || this.countCols() === 0 || !this.getSelectedRange() || this.getSelectedRange().length === 0);
      }
    };
  }
  const nE = "redo";
  function xOe() {
    return {
      key: nE,
      name() {
        return this.getTranslatedPhrase(gN);
      },
      callback() {
        this.redo();
      },
      hidden() {
        const n = this.getPlugin("undoRedo");
        return !n || !n.isEnabled();
      },
      disabled() {
        return !this.getPlugin("undoRedo").isRedoAvailable();
      }
    };
  }
  const Cy = "remove_col";
  function TOe() {
    return {
      key: Cy,
      name() {
        const n = this.getSelected();
        let e = 0;
        if (n)
          if (n.length > 1)
            e = 1;
          else {
            const [, t, , i] = n[0];
            t - i !== 0 && (e = 1);
          }
        return this.getTranslatedPhrase(dN, e);
      },
      callback() {
        this.alter("remove_col", pxe(this), null, "ContextMenu.removeColumn");
      },
      disabled() {
        if (!this.isColumnModificationAllowed())
          return !0;
        const n = this.getSelectedRangeLast();
        if (!n || n.isSingleHeader() && n.highlight.col < 0)
          return !0;
        const e = this.countCols();
        return this.selection.isSelectedByCorner() ? e === 0 : this.selection.isSelectedByRowHeader() || e === 0;
      },
      hidden() {
        return !this.getSettings().allowRemoveColumn;
      }
    };
  }
  const iE = "remove_row";
  function MOe() {
    return {
      key: iE,
      name() {
        const n = this.getSelected();
        let e = 0;
        if (n)
          if (n.length > 1)
            e = 1;
          else {
            const [t, , i] = n[0];
            t - i !== 0 && (e = 1);
          }
        return this.getTranslatedPhrase(hN, e);
      },
      callback() {
        this.alter("remove_row", mxe(this), 1, "ContextMenu.removeRow");
      },
      disabled() {
        const n = this.getSelectedRangeLast();
        if (!n || n.isSingleHeader() && n.highlight.row < 0)
          return !0;
        const e = this.countRows();
        return this.selection.isSelectedByCorner() ? e === 0 : this.selection.isSelectedByColumnHeader() || e === 0;
      },
      hidden() {
        return !this.getSettings().allowRemoveRow;
      }
    };
  }
  const rE = "row_above";
  function AOe() {
    return {
      key: rE,
      name() {
        return this.getTranslatedPhrase(aN);
      },
      callback() {
        const n = this.getSelectedRangeLast().getTopLeftCorner();
        this.alter("insert_row_above", n.row, 1, "ContextMenu.rowAbove");
      },
      disabled() {
        const n = this.getSelectedRangeLast();
        return !n || n.isSingleHeader() && n.highlight.row < 0 ? !0 : this.selection.isSelectedByCorner() ? this.countRows() === 0 : this.selection.isSelectedByColumnHeader() || this.countRows() >= this.getSettings().maxRows;
      },
      hidden() {
        return !this.getSettings().allowInsertRow;
      }
    };
  }
  const sE = "row_below";
  function POe() {
    return {
      key: sE,
      name() {
        return this.getTranslatedPhrase(lN);
      },
      callback() {
        const n = this.getSelectedRangeLast().getBottomRightCorner();
        this.alter("insert_row_below", n.row, 1, "ContextMenu.rowBelow");
      },
      disabled() {
        const n = this.getSelectedRangeLast();
        return !n || n.isSingleHeader() && n.highlight.row < 0 ? !0 : this.selection.isSelectedByCorner() ? !1 : this.selection.isSelectedByColumnHeader() || this.countRows() >= this.getSettings().maxRows;
      },
      hidden() {
        return !this.getSettings().allowInsertRow;
      }
    };
  }
  const ww = "no_items";
  function IOe() {
    return {
      key: ww,
      name() {
        return this.getTranslatedPhrase(oN);
      },
      disabled: !0,
      isCommand: !1
    };
  }
  const oE = "undo";
  function OOe() {
    return {
      key: oE,
      name() {
        return this.getTranslatedPhrase(fN);
      },
      callback() {
        this.undo();
      },
      hidden() {
        const n = this.getPlugin("undoRedo");
        return !n || !n.isEnabled();
      },
      disabled() {
        return !this.getPlugin("undoRedo").isUndoAvailable();
      }
    };
  }
  const kOe = [rE, sE, vy, wy, tE, iE, Cy, oE, nE, yy, Us, ut, ww], DOe = {
    [ut]: yOe,
    [ww]: IOe,
    [rE]: AOe,
    [sE]: POe,
    [vy]: _Oe,
    [wy]: ROe,
    [tE]: SOe,
    [iE]: MOe,
    [Cy]: TOe,
    [oE]: OOe,
    [nE]: xOe,
    [yy]: EOe,
    [Us]: COe
  };
  function uY() {
    const n = {};
    return lt(DOe, (e, t) => {
      n[t] = e();
    }), n;
  }
  function NOe(n) {
    return {
      key: "commentsAddEdit",
      name() {
        var e;
        const t = (e = this.getSelectedRangeLast()) === null || e === void 0 ? void 0 : e.highlight;
        return t != null && t.isCell() && n.getCommentAtCell(t.row, t.col) ? this.getTranslatedPhrase(xN) : this.getTranslatedPhrase(EN);
      },
      callback() {
        const e = this.getSelectedRangeLast();
        n.setRange(e), n.show(), n.focusEditor();
      },
      disabled() {
        const e = this.getSelectedRangeLast();
        return !!(!e || e.highlight.isHeader() || this.selection.isEntireRowSelected() && this.selection.isEntireColumnSelected() || this.countRenderedRows() === 0 || this.countRenderedCols() === 0);
      }
    };
  }
  function LOe(n) {
    return {
      key: "commentsRemove",
      name() {
        return this.getTranslatedPhrase(TN);
      },
      callback() {
        this.getSelectedRangeLast().forAll((t, i) => {
          t >= 0 && i >= 0 && n.removeCommentAtCell(t, i, !1);
        }), this.render();
      },
      disabled() {
        const e = this.getSelectedRangeLast();
        return !!(!e || e.highlight.isHeader() || this.selection.isEntireRowSelected() && this.selection.isEntireColumnSelected() || this.countRenderedRows() === 0 || this.countRenderedCols() === 0);
      }
    };
  }
  function HOe(n) {
    return {
      key: "commentsReadOnly",
      name() {
        const e = this.getTranslatedPhrase(MN);
        return Ev(this.getSelectedRange(), (i, r) => n.getCommentMeta(i, r, TS)) ? Xl(e) : e;
      },
      callback() {
        this.getSelectedRangeLast().forAll((t, i) => {
          if (t >= 0 && i >= 0) {
            const r = !!n.getCommentMeta(t, i, TS);
            n.updateCommentMeta(t, i, {
              [TS]: !r
            });
          }
        });
      },
      disabled() {
        const e = this.getSelectedRangeLast();
        return !!(!e || e.highlight.isHeader() || !n.getCommentAtCell(e.highlight.row, e.highlight.col) || this.selection.isEntireRowSelected() && this.selection.isEntireColumnSelected() || this.countRenderedRows() === 0 || this.countRenderedCols() === 0);
      }
    };
  }
  function $Oe(n, e) {
    hY(n, e), e.add(n);
  }
  function sg(n, e, t) {
    hY(n, e), e.set(n, t);
  }
  function hY(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function FOe(n, e, t) {
    return (e = BOe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function BOe(n) {
    var e = VOe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function VOe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function Pu(n, e, t) {
    return n.set(Ho(n, e), t), t;
  }
  function gt(n, e) {
    return n.get(Ho(n, e));
  }
  function Ho(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  const xv = "comments", WOe = 60, Zl = "comment", Vb = "value", dY = "style", TS = "readOnly", eC = xv, sI = `plugin:${xv}`;
  var nn = /* @__PURE__ */ new WeakMap(), ka = /* @__PURE__ */ new WeakMap(), aE = /* @__PURE__ */ new WeakMap(), MS = /* @__PURE__ */ new WeakMap(), oI = /* @__PURE__ */ new WeakMap(), Z_ = /* @__PURE__ */ new WeakMap(), ya = /* @__PURE__ */ new WeakSet();
  class jOe extends Lt {
    constructor() {
      super(...arguments), $Oe(this, ya), FOe(this, "range", {}), sg(this, nn, null), sg(this, ka, null), sg(this, aE, !1), sg(this, MS, !1), sg(this, oI, null), sg(this, Z_, "");
    }
    static get PLUGIN_KEY() {
      return xv;
    }
    static get PLUGIN_PRIORITY() {
      return WOe;
    }
    /**
     * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link Comments#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return !!this.hot.getSettings()[xv];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
    enablePlugin() {
      var e = this;
      this.enabled || (gt(nn, this) || (Pu(nn, this, new Ed(this.hot.rootDocument, this.hot.isRtl())), gt(nn, this).addLocalHook("resize", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ho(ya, e, XOe).call(e, ...i);
      })), gt(ka, this) || Pu(ka, this, new cY(this.getDisplayDelaySetting())), this.addHook("afterContextMenuDefaultOptions", (t) => this.addToContextMenu(t)), this.addHook("afterRenderer", (t, i, r, s, o, a) => Ho(ya, this, YOe).call(this, t, a)), this.addHook("afterScroll", () => Ho(ya, this, QOe).call(this)), this.addHook("afterBeginEditing", () => this.hide()), this.addHook("afterDocumentKeyDown", (t) => Ho(ya, this, ZOe).call(this, t)), gt(ka, this).addLocalHook("hide", () => this.hide()), gt(ka, this).addLocalHook("show", (t, i) => this.showAtCell(t, i)), this.registerShortcuts(), this.registerListeners(), super.enablePlugin());
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *   - [`comments`](@/api/options.md#comments)
     */
    updatePlugin() {
      gt(ka, this).updateDelay(this.getDisplayDelaySetting()), super.updatePlugin();
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
    disablePlugin() {
      this.unregisterShortcuts(), super.disablePlugin();
    }
    /**
     * Register shortcuts responsible for toggling context menu.
     *
     * @private
     */
    registerShortcuts() {
      const e = this.hot.getShortcutManager(), t = e.getContext("grid"), i = e.addContext(sI);
      t.addShortcut({
        keys: [["Control", "Alt", "M"]],
        callback: () => {
          const r = this.hot.getSelectedRangeLast();
          Pu(MS, this, !0), this.hot.scrollToFocusedCell(() => {
            this.setRange(r), this.show(), this.focusEditor(), e.setActiveContextName(sI), this.hot._registerTimeout(() => {
              Pu(MS, this, !1);
            });
          });
        },
        stopPropagation: !0,
        runOnlyIf: () => {
          var r;
          return ((r = this.hot.getSelectedRangeLast()) === null || r === void 0 ? void 0 : r.highlight.isCell()) && !gt(nn, this).isVisible();
        },
        group: eC
      }), i.addShortcut({
        keys: [["Escape"]],
        callback: () => {
          gt(nn, this).setValue(gt(Z_, this)), this.hide(), e.setActiveContextName("grid");
        },
        runOnlyIf: () => gt(nn, this).isVisible() && gt(nn, this).isFocused(),
        group: eC
      }), i.addShortcut({
        keys: [["Control/Meta", "Enter"]],
        callback: () => {
          this.hide(), e.setActiveContextName("grid");
        },
        runOnlyIf: () => gt(nn, this).isVisible() && gt(nn, this).isFocused(),
        group: eC
      });
    }
    /**
     * Unregister shortcuts responsible for toggling context menu.
     *
     * @private
     */
    unregisterShortcuts() {
      this.hot.getShortcutManager().getContext("grid").removeShortcutsByGroup(eC);
    }
    /**
     * Registers all necessary DOM listeners.
     *
     * @private
     */
    registerListeners() {
      const {
        rootDocument: e
      } = this.hot, t = this.getEditorInputElement();
      this.eventManager.addEventListener(e, "mouseover", (i) => Ho(ya, this, UOe).call(this, i)), this.eventManager.addEventListener(e, "mousedown", (i) => Ho(ya, this, zOe).call(this, i)), this.eventManager.addEventListener(e, "mouseup", () => Ho(ya, this, GOe).call(this)), this.eventManager.addEventListener(t, "focus", () => Ho(ya, this, qOe).call(this)), this.eventManager.addEventListener(t, "blur", () => Ho(ya, this, KOe).call(this));
    }
    /**
     * Sets the current cell range to be able to use general methods like {@link Comments#setComment}, {@link Comments#removeComment}, {@link Comments#show}.
     *
     * @param {object} range Object with `from` property, each with `row` and `col` properties.
     */
    setRange(e) {
      this.range = e;
    }
    /**
     * Clears the currently selected cell.
     */
    clearRange() {
      this.range = {};
    }
    /**
     * Checks if the event target is a cell containing a comment.
     *
     * @private
     * @param {Event} event DOM event.
     * @returns {boolean}
     */
    targetIsCellWithComment(e) {
      const t = Gu(e.target, "TD", "TBODY");
      return !!(t && Ue(t, "htCommentCell") && Gu(t, [this.hot.rootElement]));
    }
    /**
     * Checks if the event target is a comment textarea.
     *
     * @private
     * @param {Event} event DOM event.
     * @returns {boolean}
     */
    targetIsCommentTextArea(e) {
      return this.getEditorInputElement() === e.target;
    }
    /**
     * Sets a comment for a cell according to the previously set range (see {@link Comments#setRange}).
     *
     * @param {string} value Comment contents.
     */
    setComment(e) {
      if (!this.range.from)
        throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');
      const t = gt(nn, this).getValue();
      let i = "";
      e != null ? i = e : t != null && (i = t);
      const r = this.range.from.row, s = this.range.from.col;
      this.updateCommentMeta(r, s, {
        [Vb]: i
      }), this.hot.render();
    }
    /**
     * Sets a comment for a specified cell.
     *
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {string} value Comment contents.
     */
    setCommentAtCell(e, t, i) {
      this.setRange({
        from: this.hot._createCellCoords(e, t)
      }), this.setComment(i);
    }
    /**
     * Removes a comment from a cell according to previously set range (see {@link Comments#setRange}).
     *
     * @param {boolean} [forceRender=true] If set to `true`, the table will be re-rendered at the end of the operation.
     */
    removeComment() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;
      if (!this.range.from)
        throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');
      this.hot.setCellMeta(this.range.from.row, this.range.from.col, Zl), e && this.hot.render(), this.hide();
    }
    /**
     * Removes a comment from a specified cell.
     *
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {boolean} [forceRender=true] If `true`, the table will be re-rendered at the end of the operation.
     */
    removeCommentAtCell(e, t) {
      let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
      this.setRange({
        from: this.hot._createCellCoords(e, t)
      }), this.removeComment(i);
    }
    /**
     * Gets comment from a cell according to previously set range (see {@link Comments#setRange}).
     *
     * @returns {string|undefined} Returns a content of the comment.
     */
    getComment() {
      const e = this.range.from.row, t = this.range.from.col;
      return this.getCommentMeta(e, t, Vb);
    }
    /**
     * Gets comment from a cell at the provided coordinates.
     *
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @returns {string|undefined} Returns a content of the comment.
     */
    getCommentAtCell(e, t) {
      return this.getCommentMeta(e, t, Vb);
    }
    /**
     * Shows the comment editor accordingly to the previously set range (see {@link Comments#setRange}).
     *
     * @returns {boolean} Returns `true` if comment editor was shown.
     */
    show() {
      var e;
      if (!this.range.from)
        throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');
      const {
        from: {
          row: t,
          col: i
        }
      } = this.range;
      if (t < 0 || t > this.hot.countSourceRows() - 1 || i < 0 || i > this.hot.countSourceCols() - 1)
        return !1;
      const r = this.hot.getCellMeta(this.range.from.row, this.range.from.col);
      return gt(ka, this).cancelHiding(), gt(nn, this).setValue((e = r[Zl] ? r[Zl][Vb] : null) !== null && e !== void 0 ? e : ""), gt(nn, this).show(), this.refreshEditor(!0), !0;
    }
    /**
     * Shows comment editor according to cell coordinates.
     *
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @returns {boolean} Returns `true` if comment editor was shown.
     */
    showAtCell(e, t) {
      return this.setRange({
        from: this.hot._createCellCoords(e, t)
      }), this.show();
    }
    /**
     * Hides the comment editor.
     */
    hide() {
      gt(nn, this).hide();
    }
    /**
     * Refreshes comment editor position and styling.
     *
     * @param {boolean} [force=false] If `true` then recalculation will be forced.
     */
    refreshEditor() {
      var e, t;
      if (!(arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1) && (!this.range.from || !gt(nn, this).isVisible()))
        return;
      const {
        rowIndexMapper: r,
        columnIndexMapper: s
      } = this.hot, {
        row: o,
        col: a
      } = this.range.from;
      let l = r.getRenderableFromVisualIndex(o), c = s.getRenderableFromVisualIndex(a);
      const u = l === null;
      gt(nn, this).setPosition(0, 0), l === null && (l = r.getRenderableFromVisualIndex(r.getNearestNotHiddenIndex(o, -1))), c === null && (c = s.getRenderableFromVisualIndex(s.getNearestNotHiddenIndex(a, -1)));
      const h = l === null, d = c === null;
      l = (e = l) !== null && e !== void 0 ? e : 0, c = (t = c) !== null && t !== void 0 ? t : 0;
      const {
        rootWindow: f,
        view: {
          _wt: g
        }
      } = this.hot, {
        wtTable: p
      } = g, m = g.getCell({
        row: l,
        col: c
      }, !0), v = this.getCommentMeta(o, a, dY);
      v ? gt(nn, this).setSize(v.width, v.height) : gt(nn, this).resetSize();
      const y = d ? 0 : p.getStretchedColumnWidth(c), w = u && !h ? ti(m) : 0, {
        left: R,
        top: E,
        width: C,
        height: T
      } = m.getBoundingClientRect(), {
        width: P,
        height: x
      } = gt(nn, this).getSize(), {
        innerWidth: A,
        innerHeight: D
      } = this.hot.rootWindow, B = this.hot.rootDocument.documentElement;
      let F = R + f.scrollX + y, W = E + f.scrollY + w;
      this.hot.isRtl() && (F -= P + y), this.hot.isLtr() && R + C + P > A ? F = R + f.scrollX - P - 1 : this.hot.isRtl() && F < -(B.scrollWidth - B.clientWidth) && (F = R + f.scrollX + y + 1), E + x > D && (W -= x - T + 1), gt(nn, this).setPosition(F, W), gt(nn, this).setReadOnlyState(this.getCommentMeta(o, a, TS)), gt(nn, this).observeSize();
    }
    /**
     * Focuses the comments editor element.
     */
    focusEditor() {
      gt(nn, this).focus();
    }
    /**
     * Sets or update the comment-related cell meta.
     *
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {object} metaObject Object defining all the comment-related meta information.
     */
    updateCommentMeta(e, t, i) {
      const r = this.hot.getCellMeta(e, t)[Zl];
      let s;
      r ? (s = mr(r), uy(s, i)) : s = i, this.hot.setCellMeta(e, t, Zl, s);
    }
    /**
     * Gets the comment related meta information.
     *
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {string} property Cell meta property.
     * @returns {Mixed}
     */
    getCommentMeta(e, t, i) {
      const r = this.hot.getCellMeta(e, t);
      if (r[Zl])
        return r[Zl][i];
    }
    /**
     * Add Comments plugin options to the Context Menu.
     *
     * @private
     * @param {object} options The menu options.
     */
    addToContextMenu(e) {
      e.items.push({
        name: ut
      }, NOe(this), LOe(this), HOe(this));
    }
    /**
     * Get `displayDelay` setting of comment plugin.
     *
     * @private
     * @returns {number|undefined}
     */
    getDisplayDelaySetting() {
      const e = this.hot.getSettings()[xv];
      if (at(e))
        return e.displayDelay;
    }
    /**
     * Gets the editors input element.
     *
     * @private
     * @returns {HTMLTextAreaElement}
     */
    getEditorInputElement() {
      return gt(nn, this).getInputElement();
    }
    /**
     * Destroys the plugin instance.
     */
    destroy() {
      var e, t;
      (e = gt(nn, this)) === null || e === void 0 || e.destroy(), (t = gt(ka, this)) === null || t === void 0 || t.destroy(), super.destroy();
    }
  }
  function zOe(n) {
    if (!(!this.hot.view || !this.hot.view._wt) && !gt(aE, this) && !this.targetIsCommentTextArea(n)) {
      const e = Gu(n.target, "TD", "TBODY");
      let t = null;
      e && (t = this.hot.getCoords(e)), (!e || this.range.from && t && (this.range.from.row !== t.row || this.range.from.col !== t.col)) && this.hide();
    }
  }
  function UOe(n) {
    const {
      rootDocument: e
    } = this.hot;
    if (!(gt(aE, this) || gt(nn, this).isFocused() || Ue(n.target, "wtBorder") || gt(oI, this) === n.target || !gt(nn, this)))
      if (Pu(oI, this, e.elementFromPoint(n.clientX, n.clientY)), this.targetIsCellWithComment(n)) {
        const t = this.hot._createCellRange(this.hot.getCoords(n.target));
        gt(ka, this).show(t);
      } else Hu(n.target, e) && !this.targetIsCommentTextArea(n) && gt(ka, this).hide();
  }
  function GOe() {
    Pu(aE, this, !1);
  }
  function YOe(n, e) {
    e[Zl] && e[Zl][Vb] && ue(n, e.commentedCellClassName);
  }
  function KOe() {
    Pu(Z_, this, ""), this.hot.getShortcutManager().setActiveContextName("grid"), this.setComment();
  }
  function qOe() {
    Pu(Z_, this, this.getComment()), this.hot.listen(), this.hot.getShortcutManager().setActiveContextName(sI);
  }
  function XOe(n, e) {
    this.updateCommentMeta(this.range.from.row, this.range.from.col, {
      [dY]: {
        width: n,
        height: e
      }
    });
  }
  function ZOe(n) {
    gt(nn, this).isVisible() && bo(n);
  }
  function QOe() {
    gt(MS, this) || this.hide();
  }
  var N3 = g1, JOe = TypeError, eke = function(n, e) {
    if (!delete n[e]) throw new JOe("Cannot delete property " + N3(e) + " of " + N3(n));
  }, tke = Yi, nke = Xw, ike = Jw, rke = wU, ske = eke, oke = yU, ake = [].unshift(0) !== 1, lke = function() {
    try {
      Object.defineProperty([], "length", {
        writable: !1
      }).unshift();
    } catch (n) {
      return n instanceof TypeError;
    }
  }, cke = ake || !lke();
  tke({
    target: "Array",
    proto: !0,
    arity: 1,
    forced: cke
  }, {
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    unshift: function(e) {
      var t = nke(this), i = ike(t), r = arguments.length;
      if (r) {
        oke(i + r);
        for (var s = i; s--; ) {
          var o = s + r;
          s in t ? t[o] = t[s] : ske(t, o);
        }
        for (var a = 0; a < r; a++)
          t[a] = arguments[a];
      }
      return rke(t, i + r);
    }
  });
  function jT(n, e, t) {
    return (e = uke(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function uke(n) {
    var e = hke(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function hke(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class fY {
    constructor(e) {
      jT(this, "hot", void 0), jT(this, "commands", {}), jT(this, "commonCallback", null), this.hot = e;
    }
    /**
     * Register command.
     *
     * @param {string} name Command name.
     * @param {object} commandDescriptor Command descriptor object with properties like `key` (command id),
     *                                   `callback` (task to execute), `name` (command name), `disabled` (command availability).
     */
    registerCommand(e, t) {
      this.commands[e] = t;
    }
    /**
     * Set common callback which will be trigger on every executed command.
     *
     * @param {Function} callback Function which will be fired on every command execute.
     */
    setCommonCallback(e) {
      this.commonCallback = e;
    }
    /**
     * Execute command by its name.
     *
     * @param {string} commandName Command id.
     * @param {*} params Arguments passed to command task.
     */
    execute(e) {
      for (var t = arguments.length, i = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++)
        i[r - 1] = arguments[r];
      const s = e.split(":"), o = s[0], a = s.length === 2 ? s[1] : null;
      let l = this.commands[o];
      if (!l)
        throw new Error(`Menu command '${o}' not exists.`);
      if (a && l.submenu && (l = dke(a, l.submenu.items)), l.disabled === !0 || typeof l.disabled == "function" && l.disabled.call(this.hot) === !0 || In(l, "submenu"))
        return;
      const c = [];
      typeof l.callback == "function" && c.push(l.callback), typeof this.commonCallback == "function" && c.push(this.commonCallback), i.unshift(s.join(":")), z(c, (u) => u.apply(this.hot, i));
    }
  }
  function dke(n, e) {
    let t;
    return z(e, (i) => {
      const r = i.key ? i.key.split(":") : null;
      if (Array.isArray(r) && r[1] === n)
        return t = i, !1;
    }), t;
  }
  function zT(n, e, t) {
    return (e = fke(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function fke(n) {
    var e = gke(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function gke(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class gY {
    constructor(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      zT(this, "hot", void 0), zT(this, "predefinedItems", uY()), zT(this, "defaultOrderPattern", void 0), this.hot = e, this.defaultOrderPattern = t;
    }
    /**
     * Set predefined items.
     *
     * @param {Array} predefinedItemsCollection Array of predefined items.
     */
    setPredefinedItems(e) {
      const t = {};
      this.defaultOrderPattern.length = 0, lt(e, (i, r) => {
        let s = "";
        i.name === ut ? (t[ut] = i, s = ut) : isNaN(parseInt(r, 10)) ? (i.key = i.key === void 0 ? r : i.key, t[r] = i, s = i.key) : (t[i.key] = i, s = i.key), this.defaultOrderPattern.push(s);
      }), this.predefinedItems = t;
    }
    /**
     * Get all menu items based on pattern.
     *
     * @param {Array|object|boolean} pattern Pattern which you can define by displaying menu items order. If `true` default
     *                                       pattern will be used.
     * @returns {Array}
     */
    getItems() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
      return pke(e, this.defaultOrderPattern, this.predefinedItems);
    }
  }
  function pke() {
    let n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null, e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    const i = [];
    let r = n;
    return r && r.items ? r = r.items : Array.isArray(r) || (r = e), at(r) ? lt(r, (s, o) => {
      let a = t[typeof s == "string" ? s : o];
      a || (a = s), at(s) ? ai(a, s) : typeof a == "string" && (a = {
        name: a
      }), a.key === void 0 && (a.key = o), i.push(a);
    }) : z(r, (s, o) => {
      let a = t[s];
      !a && kOe.indexOf(s) >= 0 || (a || (a = {
        name: s,
        key: `${o}`
      }), at(s) && ai(a, s), a.key === void 0 && (a.key = o), i.push(a));
    }), i;
  }
  function Xc(n, e, t) {
    return (e = mke(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function mke(n) {
    var e = bke(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function bke(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class vke {
    constructor(e, t) {
      Xc(this, "top", void 0), Xc(this, "topRelative", void 0), Xc(this, "left", void 0), Xc(this, "leftRelative", void 0), Xc(this, "scrollTop", void 0), Xc(this, "scrollLeft", void 0), Xc(this, "cellHeight", void 0), Xc(this, "cellWidth", void 0);
      const i = t.scrollY, r = t.scrollX;
      let s, o, a, l, c, u;
      this.rootWindow = t, this.type = this.getSourceType(e), this.type === "literal" ? (s = parseInt(e.top, 10), a = parseInt(e.left, 10), c = e.height || 0, u = e.width || 0, o = s, l = a, s += i, a += r) : this.type === "event" && (s = parseInt(e.pageY, 10), a = parseInt(e.pageX, 10), c = e.target.clientHeight, u = e.target.clientWidth, o = s - i, l = a - r), this.top = s, this.topRelative = o, this.left = a, this.leftRelative = l, this.scrollTop = i, this.scrollLeft = r, this.cellHeight = c, this.cellWidth = u;
    }
    /**
     * Get source type name.
     *
     * @param {*} object Event or Object with coordinates.
     * @returns {string} Returns one of this values: `'literal'`, `'event'`.
     */
    getSourceType(e) {
      let t = "literal";
      return e instanceof Event && (t = "event"), t;
    }
    /**
     * Checks if element can be placed above the cursor.
     *
     * @param {HTMLElement} element Element to check if it's size will fit above the cursor.
     * @returns {boolean}
     */
    fitsAbove(e) {
      return this.topRelative >= e.offsetHeight;
    }
    /**
     * Checks if element can be placed below the cursor.
     *
     * @param {HTMLElement} element Element to check if it's size will fit below the cursor.
     * @param {number} [viewportHeight] The viewport height.
     * @returns {boolean}
     */
    fitsBelow(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.rootWindow.innerHeight;
      return this.topRelative + e.offsetHeight <= t;
    }
    /**
     * Checks if element can be placed on the right of the cursor.
     *
     * @param {HTMLElement} element Element to check if it's size will fit on the right of the cursor.
     * @param {number} [viewportWidth] The viewport width.
     * @returns {boolean}
     */
    fitsOnRight(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.rootWindow.innerWidth;
      return this.leftRelative + this.cellWidth + e.offsetWidth <= t;
    }
    /**
     * Checks if element can be placed on the left on the cursor.
     *
     * @param {HTMLElement} element Element to check if it's size will fit on the left of the cursor.
     * @returns {boolean}
     */
    fitsOnLeft(e) {
      return this.leftRelative >= e.offsetWidth;
    }
  }
  function tb(n, e, t) {
    wke(n, e), e.set(n, t);
  }
  function wke(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function wt(n, e) {
    return n.get(pY(n, e));
  }
  function tC(n, e, t) {
    return n.set(pY(n, e), t), t;
  }
  function pY(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var yr = /* @__PURE__ */ new WeakMap(), Zc = /* @__PURE__ */ new WeakMap(), Vr = /* @__PURE__ */ new WeakMap(), UT = /* @__PURE__ */ new WeakMap(), og = /* @__PURE__ */ new WeakMap();
  class yke {
    constructor(e) {
      tb(this, yr, void 0), tb(this, Zc, void 0), tb(this, Vr, void 0), tb(this, UT, !1), tb(this, og, {
        above: 0,
        below: 0,
        left: 0,
        right: 0
      }), tC(UT, this, e);
    }
    /**
     * Sets offset position for specified directions (`above`, `below`, `left` or `right`).
     *
     * @param {'above' | 'below' | 'left' | 'right'} direction A direction name.
     * @param {number} [offset=0] Offset value.
     * @returns {Positioner}
     */
    setOffset(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      return wt(og, this)[e] = t, this;
    }
    /**
     * Sets the menu element to work with. The element can be owned by the main menu or the submenu.
     *
     * @param {HTMLElement} container The menu container element.
     * @returns {Positioner}
     */
    setElement(e) {
      return tC(yr, this, e), this;
    }
    /**
     * Sets the parent menu element to work with.
     *
     * @param {HTMLElement} container The parent menu container element.
     * @returns {Positioner}
     */
    setParentElement(e) {
      return tC(Zc, this, e), this;
    }
    /**
     * Updates the menu position.
     *
     * @param {object|MouseEvent} coords The literal object with `top`, `left`, `width` and `height` props or a
     * mouse event object.
     */
    updatePosition(e) {
      tC(Vr, this, new vke(e, wt(yr, this).ownerDocument.defaultView)), wt(UT, this) ? (wt(Vr, this).fitsBelow(wt(yr, this)) ? this.setPositionBelowCursor() : wt(Vr, this).fitsAbove(wt(yr, this)) ? this.setPositionAboveCursor() : this.setPositionBelowCursor(), this.updateHorizontalPosition()) : (this.setPositionBelowCursor(), this.setPositionOnRightOfCursor());
    }
    /**
     * Updates the menu horizontal position.
     */
    updateHorizontalPosition() {
      wt(yr, this).dir === "rtl" ? wt(Vr, this).fitsOnLeft(wt(yr, this)) ? this.setPositionOnLeftOfCursor() : this.setPositionOnRightOfCursor() : wt(Vr, this).fitsOnRight(wt(yr, this)) ? this.setPositionOnRightOfCursor() : this.setPositionOnLeftOfCursor();
    }
    /**
     * Sets the menu position above the cursor object.
     */
    setPositionAboveCursor() {
      let e = wt(og, this).above + wt(Vr, this).top - wt(yr, this).offsetHeight;
      wt(Zc, this) && (e = wt(Vr, this).top + wt(Vr, this).cellHeight - wt(yr, this).offsetHeight + 3), wt(yr, this).style.top = `${e}px`;
    }
    /**
     * Sets the menu position below the cursor object.
     */
    setPositionBelowCursor() {
      let e = wt(og, this).below + wt(Vr, this).top + 1;
      wt(Zc, this) && (e = wt(Vr, this).top - 1), wt(yr, this).style.top = `${e}px`;
    }
    /**
     * Sets the menu position on the right of the cursor object.
     */
    setPositionOnRightOfCursor() {
      let e = wt(Vr, this).left;
      if (wt(Zc, this)) {
        const t = Number.parseInt(getComputedStyle(wt(Zc, this).querySelector(".htCore")).borderRightWidth, 10);
        e += wt(Vr, this).cellWidth + t;
      } else
        e += wt(og, this).right;
      wt(yr, this).style.left = `${e}px`;
    }
    /**
     * Sets the menu position on the left of the cursor object.
     */
    setPositionOnLeftOfCursor() {
      let e = wt(og, this).left + wt(Vr, this).left - wt(yr, this).offsetWidth;
      if (wt(Zc, this)) {
        const t = Number.parseInt(getComputedStyle(wt(Zc, this).querySelector(".htCore")).borderLeftWidth, 10);
        e -= t;
      }
      wt(yr, this).style.left = `${e}px`;
    }
  }
  function mY(n) {
    let {
      initialPage: e = -1,
      size: t = () => 0,
      onItemSelect: i = () => {
      },
      onClear: r = () => {
      }
    } = n;
    const s = /* @__PURE__ */ new Set();
    let o = Gt(e, -1, g() - 1);
    function a(m, v) {
      const y = g() - 1;
      return m < 0 && (m = y), m > y && (m = 0), s.has(m) ? -1 : (s.add(m), i(m, !1) === !1 && (m = a(
        v === 1 ? ++m : --m,
        // eslint-disable-line no-plusplus
        v
      )), m);
    }
    function l(m) {
      m > -1 && m < g() && i(m, !0) !== !1 && (o = m);
    }
    function c() {
      return o;
    }
    function u() {
      g() > 0 && (s.clear(), o = a(0, 1));
    }
    function h() {
      g() > 0 && (s.clear(), o = a(g() - 1, -1));
    }
    function d() {
      g() > 0 && (s.clear(), o = a(++o, 1));
    }
    function f() {
      g() > 0 && (s.clear(), o = a(--o, -1));
    }
    function g() {
      return Math.max(t(), 0);
    }
    function p() {
      s.clear(), o = e, r();
    }
    return {
      setCurrentPage: l,
      getCurrentPage: c,
      toFirstItem: u,
      toLastItem: h,
      toNextItem: d,
      toPreviousItem: f,
      getSize: g,
      clear: p
    };
  }
  function Cke(n) {
    return mt(n, (e) => ({
      start: e.getTopStartCorner(),
      end: e.getBottomEndCorner()
    }));
  }
  function aI(n) {
    return In(n, "submenu");
  }
  function lI(n) {
    return new RegExp(ut, "i").test(n.name);
  }
  function AS(n, e) {
    return n.disabled === !0 || typeof n.disabled == "function" && n.disabled.call(e) === !0;
  }
  function L3(n) {
    return In(n, "disableSelection");
  }
  function Ske(n) {
    return Ue(n, "htSeparator");
  }
  function _ke(n) {
    return Ue(n, "htSubmenu");
  }
  function Rke(n) {
    return Ue(n, "htDisabled");
  }
  function Eke(n) {
    return Ue(n, "htSelectionDisabled");
  }
  function xke(n, e) {
    return !n.hidden || !(typeof n.hidden == "function" && n.hidden.call(e));
  }
  function bY(n, e) {
    const t = n.slice(0);
    for (let i = 0; i < t.length && t[i].name === e; )
      t.shift();
    return t;
  }
  function Tke(n, e) {
    let t = n.slice(0);
    return t.reverse(), t = bY(t, e), t.reverse(), t;
  }
  function Mke(n) {
    const e = [];
    return z(n, (t, i) => {
      i > 0 ? e[e.length - 1].name !== t.name && e.push(t) : e.push(t);
    }), e;
  }
  function Ake(n) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ut, t = n.slice(0);
    return t = bY(t, e), t = Tke(t, e), t = Mke(t), t;
  }
  function Pke(n) {
    return n.checkable === !0;
  }
  function Ike(n) {
    return mY({
      size: () => n.countRows(),
      onItemSelect(e, t) {
        const i = n.getCell(e, 0);
        if (!i || Ske(i) || Rke(i) || Eke(i))
          return !1;
        n.selectCell(e, 0, ...t ? [e, 0, !1, !1] : []);
      },
      onClear() {
        n.deselectCell();
      }
    });
  }
  function Oke(n) {
    const {
      hot: e,
      hotMenu: t
    } = n;
    return [{
      keys: [["Control/Meta", "A"]],
      forwardToContext: e.getShortcutManager().getContext("grid"),
      callback: () => n.close(!0)
    }, {
      keys: [["Tab"], ["Shift", "Tab"]],
      callback: (i, r) => {
        const s = e.getSettings(), o = typeof s.tabMoves == "function" ? s.tabMoves(i) : s.tabMoves;
        r.includes("shift") ? e.selection.transformStart(-o.row, -o.col) : e.selection.transformStart(o.row, o.col), n.close(!0);
      }
    }, {
      keys: [["Escape"]],
      callback: () => n.close()
    }, {
      keys: [["ArrowDown"]],
      callback: () => n.getNavigator().toNextItem()
    }, {
      keys: [["ArrowUp"]],
      callback: () => n.getNavigator().toPreviousItem()
    }, {
      keys: [["ArrowRight"]],
      callback: () => {
        const i = t.getSelectedLast();
        if (i) {
          const r = n.openSubMenu(i[0]);
          r && r.getNavigator().toFirstItem();
        }
      }
    }, {
      keys: [["ArrowLeft"]],
      callback: () => {
        t.getSelectedLast() && n.isSubMenu() && (n.close(), n.isSubMenu() && n.parentMenu.hotMenu.listen());
      }
    }, {
      keys: [["Control/Meta", "ArrowUp"], ["Home"]],
      callback: () => n.getNavigator().toFirstItem()
    }, {
      keys: [["Control/Meta", "ArrowDown"], ["End"]],
      callback: () => n.getNavigator().toLastItem()
    }, {
      keys: [["Enter"], ["Space"]],
      callback: (i) => {
        const r = t.getSelectedLast();
        r && (t.getSourceDataAtRow(r[0]).submenu ? n.openSubMenu(r[0]).getNavigator().toFirstItem() : (n.executeCommand(i), n.close(!0)));
      }
    }, {
      keys: [["PageUp"]],
      callback: () => {
        t.getSelectedLast() ? t.selection.transformStart(-t.countVisibleRows(), 0) : n.getNavigator().toFirstItem();
      }
    }, {
      keys: [["PageDown"]],
      callback: () => {
        t.getSelectedLast() ? t.selection.transformStart(t.countVisibleRows(), 0) : n.getNavigator().toLastItem();
      }
    }];
  }
  const vY = "menu", H3 = vY;
  function kke(n) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    const t = [];
    i(Oke(n)), e.forEach((c) => {
      let {
        shortcuts: u,
        contextName: h
      } = c;
      r(u, h);
    });
    function i(c, u) {
      a(u).addShortcuts(c, {
        group: vY
      });
    }
    function r(c, u) {
      const h = a(u);
      c.forEach((d) => {
        let {
          keys: f
        } = d;
        f.forEach((g) => h.removeShortcutsByKeys(g));
      }), t.push({
        shortcuts: c,
        contextName: u
      }), i(c, u);
    }
    function s() {
      return [...t];
    }
    function o(c) {
      return c ? `${H3}:${c}` : H3;
    }
    function a(c) {
      var u;
      const h = n.hotMenu.getShortcutManager(), d = o(c);
      return (u = h.getContext(d)) !== null && u !== void 0 ? u : h.addContext(d);
    }
    function l(c) {
      n.hotMenu.getShortcutManager().setActiveContextName(o(c));
    }
    return {
      addCustomShortcuts: r,
      getCustomShortcuts: s,
      getContext: a,
      listen: l
    };
  }
  function Dke(n) {
    return (e, t, i, r, s, o) => {
      const a = e.getSourceDataAtRow(i), l = n.rootDocument.createElement("div"), c = typeof o == "function" ? o.call(n) : o, u = typeof a.ariaLabel == "function" ? a.ariaLabel.call(n) : a.ariaLabel, h = typeof a.ariaChecked == "function" ? a.ariaChecked.call(n) : a.ariaChecked;
      if (ra(t), ue(l, "htItemWrapper"), n.getSettings().ariaTags) {
        const d = !AS(a, n) && !L3(a) && !lI(a);
        ze(t, [...Pke(a) ? [v0e(), A_(u), B7(h)] : [b0e(), A_(c)], ...d ? [qp(-1)] : [], ...AS(a, n) ? [E0e()] : [], ...aI(a) ? [no(!1)] : []]);
      }
      t.className = "", t.appendChild(l), lI(a) ? ue(t, "htSeparator") : typeof a.renderer == "function" ? (ue(t, "htCustomMenuRenderer"), t.appendChild(a.renderer(e, l, i, r, s, c))) : Mf(l, c), AS(a, n) ? ue(t, "htDisabled") : L3(a) ? ue(t, "htSelectionDisabled") : aI(a) && ue(t, "htSubmenu");
    };
  }
  function GT(n, e, t) {
    Nke(n, e), e.set(n, t);
  }
  function Nke(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function Ca(n, e, t) {
    return (e = Lke(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function Lke(n) {
    var e = Hke(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function Hke(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function YT(n, e, t) {
    return n.set(wY(n, e), t), t;
  }
  function Vh(n, e) {
    return n.get(wY(n, e));
  }
  function wY(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  const $3 = 215;
  var nb = /* @__PURE__ */ new WeakMap(), nC = /* @__PURE__ */ new WeakMap(), iC = /* @__PURE__ */ new WeakMap();
  class tm {
    /**
     * Getter for the table border width.
     * This getter retrieves the border width of the table used in the menu.
     *
     * @returns {number} The border width of the table in pixels.
     */
    get tableBorderWidth() {
      return Vh(iC, this) === void 0 && this.hotMenu && YT(iC, this, parseInt(al(this.hotMenu.view._wt.wtTable.TABLE).borderWidth, 10)), Vh(iC, this);
    }
    /**
     * @param {Core} hotInstance Handsontable instance.
     * @param {MenuOptions} [options] Menu options.
     */
    constructor(e, t) {
      var i = this;
      Ca(this, "hot", void 0), Ca(this, "options", void 0), Ca(this, "eventManager", new lo(this)), Ca(this, "container", void 0), Ca(this, "positioner", void 0), Ca(this, "hotMenu", null), Ca(this, "hotSubMenus", {}), Ca(this, "parentMenu", void 0), Ca(this, "menuItems", null), Ca(this, "origOutsideClickDeselects", null), GT(this, nb, void 0), GT(this, nC, void 0), GT(this, iC, void 0), this.hot = e, this.options = t || {
        parent: null,
        name: null,
        className: "",
        keepInViewport: !0,
        standalone: !1,
        minWidth: $3,
        container: this.hot.rootDocument.documentElement
      }, this.container = this.createContainer(this.options.name), this.positioner = new yke(this.options.keepInViewport), this.parentMenu = this.options.parent || null, this.registerEvents(), this.isSubMenu() && this.addLocalHook("afterSelectionChange", function() {
        for (var r = arguments.length, s = new Array(r), o = 0; o < r; o++)
          s[o] = arguments[o];
        return i.parentMenu.runLocalHooks("afterSelectionChange", ...s);
      });
    }
    /**
     * Register event listeners.
     *
     * @private
     */
    registerEvents() {
      let e = this.hot.rootWindow;
      for (; e; )
        this.eventManager.addEventListener(e.document, "mousedown", (t) => this.onDocumentMouseDown(t)), this.eventManager.addEventListener(e.document, "touchstart", (t) => this.onDocumentMouseDown(t)), this.eventManager.addEventListener(e.document, "contextmenu", (t) => this.onDocumentContextMenu(t)), e = ef(e);
    }
    /**
     * Set array of objects which defines menu items.
     *
     * @param {Array} menuItems Menu items to display.
     */
    setMenuItems(e) {
      this.menuItems = e;
    }
    /**
     * Gets the controller object that allows modifying the the menu item selection.
     *
     * @returns {Paginator | undefined}
     */
    getNavigator() {
      return Vh(nb, this);
    }
    /**
     * Gets the controller object that allows extending the keyboard shortcuts of the menu.
     *
     * @returns {KeyboardShortcutsMenuController | undefined}
     */
    getKeyboardShortcutsCtrl() {
      return Vh(nC, this);
    }
    /**
     * Returns currently selected menu item. Returns `null` if no item was selected.
     *
     * @returns {object|null}
     */
    getSelectedItem() {
      return this.hasSelectedItem() ? this.hotMenu.getSourceDataAtRow(this.hotMenu.getSelectedLast()[0]) : null;
    }
    /**
     * Checks if the menu has selected (highlighted) any item from the menu list.
     *
     * @returns {boolean}
     */
    hasSelectedItem() {
      return Array.isArray(this.hotMenu.getSelectedLast());
    }
    /**
     * Check if menu is using as sub-menu.
     *
     * @returns {boolean}
     */
    isSubMenu() {
      return this.parentMenu !== null;
    }
    /**
     * Open menu.
     *
     * @fires Hooks#beforeContextMenuShow
     * @fires Hooks#afterContextMenuShow
     */
    open() {
      this.runLocalHooks("beforeOpen"), this.container.removeAttribute("style"), this.container.style.display = "block";
      const e = N1((a) => this.openSubMenu(a), 300), t = this.options.minWidth || $3;
      let i = !1, r = xc(this.menuItems, (a) => (a.key === ww && (i = !0), xke(a, this.hot)));
      if (r.length < 1 && !i)
        r.push(uY()[ww]);
      else if (r.length === 0)
        return;
      r = Ake(r, ut);
      let s = !1;
      const o = {
        data: r,
        colHeaders: !1,
        autoColumnSize: !0,
        autoWrapRow: !1,
        modifyColWidth(a) {
          return ke(a) && a < t ? t : a;
        },
        autoRowSize: !1,
        readOnly: !0,
        editor: !1,
        copyPaste: !1,
        hiddenRows: !0,
        maxCols: 1,
        columns: [{
          data: "name",
          renderer: Dke(this.hot)
        }],
        renderAllRows: !0,
        fragmentSelection: !1,
        outsideClickDeselects: !1,
        disableVisualSelection: "area",
        layoutDirection: this.hot.isRtl() ? "rtl" : "ltr",
        ariaTags: !1,
        beforeOnCellMouseOver: (a, l) => {
          Vh(nb, this).setCurrentPage(l.row);
        },
        afterOnCellMouseOver: (a, l) => {
          this.isAllSubMenusClosed() ? e(l.row) : this.openSubMenu(l.row);
        },
        rowHeights: (a) => r[a].name === ut ? 1 : void 0,
        afterOnCellContextMenu: (a) => {
          a.preventDefault(), LP() && s && this.hasSelectedItem() && this.close(!0);
        },
        afterSelection: (a, l, c, u, h) => {
          this.hotMenu.view.isMouseDown() && (h.value = !0), this.runLocalHooks("afterSelectionChange", this.getSelectedItem());
        },
        beforeOnCellMouseUp: (a) => {
          this.hasSelectedItem() && (s = !this.isCommandPassive(this.getSelectedItem()), this.executeCommand(a));
        },
        afterOnCellMouseUp: (a) => {
          (!LP() || !Ku(a)) && s && this.hasSelectedItem() && (fc() || RD() ? this.hot._registerTimeout(() => this.close(!0), 325) : this.close(!0));
        },
        afterUnlisten: () => {
          !this.hasSelectedItem() && this.isOpened() && this.hotMenu.listen();
        }
      };
      this.origOutsideClickDeselects = this.hot.getSettings().outsideClickDeselects, this.hot.getSettings().outsideClickDeselects = !1, this.hotMenu = new this.hot.constructor(this.container, o), this.hotMenu.addHook("afterInit", () => this.onAfterInit()), this.hotMenu.init(), YT(nb, this, Ike(this.hotMenu)), YT(nC, this, kke(this)), Vh(nC, this).listen(), this.focus(), this.isSubMenu() && this.addLocalHook("afterOpen", () => this.parentMenu.runLocalHooks("afterSubmenuOpen", this)), this.runLocalHooks("afterOpen", this);
    }
    /**
     * Close menu.
     *
     * @param {boolean} [closeParent=false] If `true` try to close parent menu if exists.
     */
    close() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
      if (this.isOpened()) {
        if (e && this.isSubMenu())
          this.parentMenu.close();
        else if (Vh(nb, this).clear(), this.closeAllSubMenus(), this.container.style.display = "none", this.hotMenu.destroy(), this.hotMenu = null, this.hot.getSettings().outsideClickDeselects = this.origOutsideClickDeselects, this.runLocalHooks("afterClose"), this.isSubMenu()) {
          if (this.hot.getSettings().ariaTags) {
            const t = this.parentMenu.hotMenu.getSelectedLast();
            if (t) {
              const i = this.parentMenu.hotMenu.getCell(t[0], 0);
              ze(i, [no(!1)]);
            }
          }
          this.parentMenu.hotMenu.listen();
        }
      }
    }
    /**
     * Open sub menu at the provided row index.
     *
     * @param {number} row Row index.
     * @returns {Menu|boolean} Returns created menu or `false` if no one menu was created.
     */
    openSubMenu(e) {
      if (!this.hotMenu)
        return !1;
      const t = this.hotMenu.getCell(e, 0);
      if (this.closeAllSubMenus(), !t || !_ke(t))
        return !1;
      const i = this.hotMenu.getSourceDataAtRow(e), r = new tm(this.hot, {
        parent: this,
        name: i.name,
        className: this.options.className,
        keepInViewport: !0,
        container: this.options.container
      });
      return r.setMenuItems(i.submenu.items), r.open(), r.setPosition(t.getBoundingClientRect()), this.hotSubMenus[i.key] = r, this.hot.getSettings().ariaTags && ze(t, [no(!0)]), r;
    }
    /**
     * Close sub menu at row index.
     *
     * @param {number} row Row index.
     */
    closeSubMenu(e) {
      const t = this.hotMenu.getSourceDataAtRow(e), i = this.hotSubMenus[t.key];
      if (i) {
        i.destroy(), delete this.hotSubMenus[t.key];
        const r = this.hotMenu.getCell(e, 0);
        this.hot.getSettings().ariaTags && ze(r, [no(!1)]);
      }
    }
    /**
     * Close all opened sub menus.
     */
    closeAllSubMenus() {
      z(this.hotMenu.getData(), (e, t) => this.closeSubMenu(t));
    }
    /**
     * Checks if all created and opened sub menus are closed.
     *
     * @returns {boolean}
     */
    isAllSubMenusClosed() {
      return Object.keys(this.hotSubMenus).length === 0;
    }
    /**
     * Focus the menu so all keyboard shortcuts become active.
     */
    focus() {
      this.isOpened() && (this.hotMenu.rootElement.focus({
        preventScroll: !0
      }), this.getKeyboardShortcutsCtrl().listen(), this.hotMenu.listen());
    }
    /**
     * Destroy instance.
     */
    destroy() {
      const e = this.container.parentNode;
      this.clearLocalHooks(), this.close(), this.parentMenu = null, this.eventManager.destroy(), e && e.removeChild(this.container);
    }
    /**
     * Checks if menu was opened.
     *
     * @returns {boolean} Returns `true` if menu was opened.
     */
    isOpened() {
      return this.hotMenu !== null;
    }
    /**
     * Execute menu command.
     *
     * The `executeCommand()` method works only for selected cells.
     *
     * When no cells are selected, `executeCommand()` doesn't do anything.
     *
     * @param {Event} [event] The mouse event object.
     */
    executeCommand(e) {
      if (!this.isOpened() || !this.hasSelectedItem())
        return;
      const t = this.getSelectedItem();
      if (this.runLocalHooks("select", t, e), this.isCommandPassive(t))
        return;
      const i = this.hot.getSelectedRange(), r = i ? Cke(i) : [];
      this.runLocalHooks("executeCommand", t.key, r, e), this.isSubMenu() && this.parentMenu.runLocalHooks("executeCommand", t.key, r, e);
    }
    /**
     * Checks if the passed command is passive or not. The command is passive when it's marked as
     * disabled, the descriptor object contains `isCommand` property set to `false`, command
     * is a separator, or the item is recognized as submenu. For passive items the menu is not
     * closed automatically after the user trigger the command through the UI.
     *
     * @param {object} commandDescriptor Selected menu item from the menu data source.
     * @returns {boolean}
     */
    isCommandPassive(e) {
      return e.isCommand === !1 || lI(e) || AS(e, this.hot) || aI(e);
    }
    /**
     * Set offset menu position for specified area (`above`, `below`, `left` or `right`).
     *
     * @param {string} area Specified area name (`above`, `below`, `left` or `right`).
     * @param {number} offset Offset value.
     */
    setOffset(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      this.positioner.setOffset(e, t);
    }
    /**
     * Set menu position based on dom event or based on literal object.
     *
     * @param {Event|object} coords Event or literal Object with coordinates.
     */
    setPosition(e) {
      this.isSubMenu() && this.positioner.setParentElement(this.parentMenu.container), this.positioner.setElement(this.container).updatePosition(e);
    }
    /**
     * Updates the dimensions of the menu based on its content.
     * This method calculates the real height of the menu by summing up the heights of its items,
     * and adjusts the width and height of the menu's holder and hider elements accordingly.
     */
    updateMenuDimensions() {
      const {
        wtTable: e
      } = this.hotMenu.view._wt, t = this.hotMenu.getSettings().data, i = e.hider.style, r = e.holder.style, s = parseInt(i.width, 10), o = li(t, (a, l, c) => {
        const h = this.hotMenu.getCell(c, 0) ? ti(this.hotMenu.getCell(c, 0)) : 0;
        return a + (l.name === ut ? 1 : h);
      }, 0);
      r.width = `${s + 3}px`, r.height = `${o + 3}px`, i.height = r.height;
    }
    /**
     * Create container/wrapper for handsontable.
     *
     * @private
     * @param {string} [name] Class name.
     * @returns {HTMLElement}
     */
    createContainer() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
      const t = this.options.container.ownerDocument;
      let i = e, r;
      return i && (cn(i) && (i = i.call(this.hot), i === null || dn(i) ? i = "" : i = i.toString()), i = i.replace(/[^A-z0-9]/g, "_"), i = `${this.options.className}Sub_${i}`, r = t.querySelector(`.${this.options.className}.${i}`)), r || (r = t.createElement("div"), ue(r, `htMenu ${this.options.className}`), i && ue(r, i), this.options.container.appendChild(r)), r;
    }
    /**
     * On after init listener.
     *
     * @private
     */
    onAfterInit() {
      this.updateMenuDimensions(), this.hot.getSettings().ariaTags && ze(this.hotMenu.rootElement, [m0e(), qp(-1)]);
    }
    /**
     * Document mouse down listener.
     *
     * @private
     * @param {Event} event The mouse event object.
     */
    onDocumentMouseDown(e) {
      this.isOpened() && (this.options.standalone && this.hotMenu && !Hu(e.target, this.hotMenu.rootElement) ? this.close(!0) : (this.isAllSubMenusClosed() || this.isSubMenu()) && !Hu(e.target, ".htMenu") && this.close(!0));
    }
    /**
     * Document's contextmenu listener.
     *
     * @private
     * @param {MouseEvent} event The mouse event object.
     */
    onDocumentContextMenu(e) {
      this.isOpened() && Ue(e.target, "htCore") && Hu(e.target, this.hotMenu.rootElement) && e.preventDefault();
    }
  }
  qt(tm, Ki);
  function $ke(n, e) {
    Fke(n, e), e.add(n);
  }
  function Fke(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function KT(n, e, t) {
    return (e = Bke(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function Bke(n) {
    var e = Vke(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function Vke(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function rC(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  const Wb = "contextMenu", Wke = 70, F3 = Wb;
  Ie.getSingleton().register("afterContextMenuDefaultOptions");
  Ie.getSingleton().register("beforeContextMenuShow");
  Ie.getSingleton().register("afterContextMenuShow");
  Ie.getSingleton().register("afterContextMenuHide");
  Ie.getSingleton().register("afterContextMenuExecute");
  var ib = /* @__PURE__ */ new WeakSet();
  class lE extends Lt {
    constructor() {
      super(...arguments), $ke(this, ib), KT(this, "commandExecutor", new fY(this.hot)), KT(this, "itemsFactory", null), KT(this, "menu", null);
    }
    static get PLUGIN_KEY() {
      return Wb;
    }
    static get PLUGIN_PRIORITY() {
      return Wke;
    }
    static get PLUGIN_DEPS() {
      return ["plugin:AutoColumnSize"];
    }
    /**
     * Context menu default items order when `contextMenu` options is set as `true`.
     *
     * @returns {string[]}
     */
    static get DEFAULT_ITEMS() {
      return [rE, sE, ut, vy, wy, ut, iE, Cy, ut, oE, nE, ut, yy, ut, Us];
    }
    /**
     * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link ContextMenu#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return !!this.hot.getSettings()[Wb];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
    enablePlugin() {
      var e = this;
      if (this.enabled)
        return;
      const t = this.hot.getSettings()[Wb];
      typeof t.callback == "function" && this.commandExecutor.setCommonCallback(t.callback), this.menu = new tm(this.hot, {
        className: "htContextMenu",
        keepInViewport: !0,
        container: t.uiContainer || this.hot.rootDocument.body
      }), this.menu.addLocalHook("beforeOpen", () => rC(ib, this, zke).call(this)), this.menu.addLocalHook("afterOpen", () => rC(ib, this, Uke).call(this)), this.menu.addLocalHook("afterClose", () => rC(ib, this, Gke).call(this)), this.menu.addLocalHook("executeCommand", function() {
        for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
          r[s] = arguments[s];
        return e.executeCommand.call(e, ...r);
      }), this.addHook("afterOnCellContextMenu", (i) => rC(ib, this, jke).call(this, i)), this.registerShortcuts(), super.enablePlugin();
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`contextMenu`](@/api/options.md#contextmenu)
     */
    updatePlugin() {
      this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
    disablePlugin() {
      this.close(), this.menu && (this.menu.destroy(), this.menu = null), this.unregisterShortcuts(), super.disablePlugin();
    }
    /**
     * Register shortcuts responsible for toggling context menu.
     *
     * @private
     */
    registerShortcuts() {
      this.hot.getShortcutManager().getContext("grid").addShortcut({
        keys: [["Control/Meta", "Shift", "Backslash"], ["Shift", "F10"]],
        callback: () => {
          const {
            highlight: e
          } = this.hot.getSelectedRangeLast();
          this.hot.scrollToFocusedCell();
          const t = this.hot.getCell(e.row, e.col, !0).getBoundingClientRect(), i = eE(this.menu.container, this.hot.rootDocument);
          this.open({
            left: t.left + i.left,
            top: t.top + i.top - 1 + t.height
          }, {
            left: t.width,
            above: -t.height
          }), this.menu.getNavigator().toFirstItem();
        },
        runOnlyIf: () => {
          var e;
          const t = (e = this.hot.getSelectedRangeLast()) === null || e === void 0 ? void 0 : e.highlight;
          return t && this.hot.selection.isCellVisible(t) && !this.menu.isOpened();
        },
        group: F3
      });
    }
    /**
     * Unregister shortcuts responsible for toggling context menu.
     *
     * @private
     */
    unregisterShortcuts() {
      this.hot.getShortcutManager().getContext("grid").removeShortcutsByGroup(F3);
    }
    /**
     * Opens menu and re-position it based on the passed coordinates.
     *
     * @param {{ top: number, left: number }|Event} position An object with `top` and `left` properties
     * which contains coordinates relative to the browsers viewport (without included scroll offsets).
     * Or if the native event is passed the menu will be positioned based on the `pageX` and `pageY`
     * coordinates.
     * @param {{ above: number, below: number, left: number, right: number }} offset An object allows applying
     * the offset to the menu position.
     * @fires Hooks#beforeContextMenuShow
     * @fires Hooks#afterContextMenuShow
     */
    open(e) {
      var t;
      let i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        above: 0,
        below: 0,
        left: 0,
        right: 0
      };
      if ((t = this.menu) !== null && t !== void 0 && t.isOpened())
        return;
      this.prepareMenuItems(), this.menu.open(), this.menu.tableBorderWidth > 0 || (i.below += 1, i.right += 1, i.above -= 1, i.left -= 1), lt(i, (s, o) => {
        this.menu.setOffset(o, s);
      }), this.menu.setPosition(e);
    }
    /**
     * Closes the menu.
     */
    close() {
      var e;
      (e = this.menu) === null || e === void 0 || e.close(), this.itemsFactory = null;
    }
    /**
     * Execute context menu command.
     *
     * The `executeCommand()` method works only for selected cells.
     *
     * When no cells are selected, `executeCommand()` doesn't do anything.
     *
     * You can execute all predefined commands:
     *  * `'row_above'` - Insert row above
     *  * `'row_below'` - Insert row below
     *  * `'col_left'` - Insert column left
     *  * `'col_right'` - Insert column right
     *  * `'clear_column'` - Clear selected column
     *  * `'remove_row'` - Remove row
     *  * `'remove_col'` - Remove column
     *  * `'undo'` - Undo last action
     *  * `'redo'` - Redo last action
     *  * `'make_read_only'` - Make cell read only
     *  * `'alignment:left'` - Alignment to the left
     *  * `'alignment:top'` - Alignment to the top
     *  * `'alignment:right'` - Alignment to the right
     *  * `'alignment:bottom'` - Alignment to the bottom
     *  * `'alignment:middle'` - Alignment to the middle
     *  * `'alignment:center'` - Alignment to the center (justify).
     *
     * Or you can execute command registered in settings where `key` is your command name.
     *
     * @param {string} commandName The command name to be executed.
     * @param {*} params Additional parameters passed to command executor module.
     */
    executeCommand(e) {
      this.itemsFactory === null && this.prepareMenuItems();
      for (var t = arguments.length, i = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++)
        i[r - 1] = arguments[r];
      this.commandExecutor.execute(e, ...i);
    }
    /**
     * Prepares available contextMenu's items list and registers them in commandExecutor.
     *
     * @private
     * @fires Hooks#afterContextMenuDefaultOptions
     * @fires Hooks#beforeContextMenuSetItems
     */
    prepareMenuItems() {
      this.itemsFactory = new gY(this.hot, lE.DEFAULT_ITEMS);
      const e = this.hot.getSettings()[Wb], t = {
        items: this.itemsFactory.getItems(e)
      };
      this.hot.runHooks("afterContextMenuDefaultOptions", t), this.itemsFactory.setPredefinedItems(t.items);
      const i = this.itemsFactory.getItems(e);
      this.hot.runHooks("beforeContextMenuSetItems", i), this.menu.setMenuItems(i), z(i, (r) => this.commandExecutor.registerCommand(r.key, r));
    }
    /**
     * Destroys the plugin instance.
     */
    destroy() {
      this.close(), this.menu && this.menu.destroy(), super.destroy();
    }
  }
  function jke(n) {
    const e = this.hot.getSettings(), t = e.rowHeaders, i = e.colHeaders;
    function r(a) {
      return a.nodeName === "TD" || a.parentNode.nodeName === "TD";
    }
    const s = n.target;
    if (this.close(), Ue(s, "handsontableInput") || (n.preventDefault(), n.stopPropagation(), !(t || i) && !r(s) && !(Ue(s, "current") && Ue(s, "wtBorder"))))
      return;
    const o = eE(this.menu.container, this.hot.rootDocument);
    this.open({
      top: n.clientY + o.top,
      left: n.clientX + o.left
    });
  }
  function zke() {
    this.hot.runHooks("beforeContextMenuShow", this);
  }
  function Uke() {
    this.hot.runHooks("afterContextMenuShow", this);
  }
  function Gke() {
    this.hot.listen(), this.hot.runHooks("afterContextMenuHide", this);
  }
  lE.SEPARATOR = {
    name: ut
  };
  function Yke(n) {
    return {
      key: "copy",
      name() {
        return this.getTranslatedPhrase(mN);
      },
      callback() {
        n.copyCellsOnly();
      },
      disabled() {
        if (this.countRows() === 0 || this.countCols() === 0)
          return !0;
        const e = this.getSelectedRangeLast();
        if (!e || e.isSingleHeader())
          return !0;
        const t = this.getSelected();
        return !t || t.length > 1;
      },
      hidden: !1
    };
  }
  function Kke(n) {
    return {
      key: "copy_column_headers_only",
      name() {
        const e = this.getSelectedRangeLast(), t = e ? Gt(e.getWidth() - 1, 0, 1) : 0;
        return this.getTranslatedPhrase(wN, t);
      },
      callback() {
        n.copyColumnHeadersOnly();
      },
      disabled() {
        if (!this.hasColHeaders())
          return !0;
        const e = this.getSelectedRangeLast();
        if (!e || e.isSingleHeader())
          return !0;
        const t = this.getSelected();
        return !t || t.length > 1;
      },
      hidden: !1
    };
  }
  function qke(n) {
    return {
      key: "copy_with_column_group_headers",
      name() {
        const e = this.getSelectedRangeLast(), t = e ? Gt(e.getWidth() - 1, 0, 1) : 0;
        return this.getTranslatedPhrase(vN, t);
      },
      callback() {
        n.copyWithAllColumnHeaders();
      },
      disabled() {
        if (!this.hasColHeaders() || !this.getSettings().nestedHeaders)
          return !0;
        const e = this.getSelectedRangeLast();
        if (!e || e.isSingleHeader())
          return !0;
        const t = this.getSelected();
        return !t || t.length > 1;
      },
      hidden: !1
    };
  }
  function Xke(n) {
    return {
      key: "copy_with_column_headers",
      name() {
        const e = this.getSelectedRangeLast(), t = e ? Gt(e.getWidth() - 1, 0, 1) : 0;
        return this.getTranslatedPhrase(bN, t);
      },
      callback() {
        n.copyWithColumnHeaders();
      },
      disabled() {
        if (!this.hasColHeaders())
          return !0;
        const e = this.getSelectedRangeLast();
        if (!e || e.isSingleHeader())
          return !0;
        const t = this.getSelected();
        return !t || t.length > 1;
      },
      hidden: !1
    };
  }
  function Zke(n) {
    return {
      key: "cut",
      name() {
        return this.getTranslatedPhrase(yN);
      },
      callback() {
        n.cut();
      },
      disabled() {
        if (this.countRows() === 0 || this.countCols() === 0)
          return !0;
        const e = this.getSelectedRangeLast();
        if (!e || e.isSingleHeader())
          return !0;
        const t = this.getSelected();
        return !t || t.length > 1;
      },
      hidden: !1
    };
  }
  class Qke {
    constructor() {
      this.data = {};
    }
    setData(e, t) {
      this.data[e] = t;
    }
    getData(e) {
      return this.data[e] || void 0;
    }
  }
  class Jke {
    constructor() {
      this.clipboardData = new Qke();
    }
    preventDefault() {
    }
  }
  function eDe(n, e) {
    yY(n, e), e.add(n);
  }
  function ag(n, e, t) {
    yY(n, e), e.set(n, t);
  }
  function yY(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function _r(n, e) {
    return n.get(Yg(n, e));
  }
  function lg(n, e, t) {
    return n.set(Yg(n, e), t), t;
  }
  function Yg(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var Qc = /* @__PURE__ */ new WeakMap(), qT = /* @__PURE__ */ new WeakMap(), rb = /* @__PURE__ */ new WeakMap(), cI = /* @__PURE__ */ new WeakMap(), uI = /* @__PURE__ */ new WeakMap(), sb = /* @__PURE__ */ new WeakMap(), ob = /* @__PURE__ */ new WeakSet();
  class tDe {
    /* eslint-disable jsdoc/require-description-complete-sentence */
    /**
     * @param {{
     *   countRows: function(): number,
     *   countColumns: function(): number,
     *   rowsLimit: function(): number,
     *   columnsLimit: function(): number,
     *   countColumnHeaders: function(): number
     * }} dependencies The utils class dependencies.
     */
    constructor(e) {
      let {
        countRows: t,
        countColumns: i,
        rowsLimit: r,
        columnsLimit: s,
        countColumnHeaders: o
      } = e;
      eDe(this, ob), ag(this, Qc, void 0), ag(this, qT, void 0), ag(this, rb, void 0), ag(this, cI, void 0), ag(this, uI, void 0), ag(this, sb, void 0), lg(qT, this, t), lg(rb, this, i), lg(cI, this, r), lg(uI, this, s), lg(sb, this, o);
    }
    /* eslint-enable jsdoc/require-description-complete-sentence */
    /**
     * Sets the selection range to be processed.
     *
     * @param {CellRange} selectedRange The selection range represented by the CellRange class.
     */
    setSelectedRange(e) {
      lg(Qc, this, e);
    }
    /**
     * Returns a new coords object within the dataset range (cells) with `startRow`, `startCol`, `endRow`
     * and `endCol` keys.
     *
     * @returns {{startRow: number, startCol: number, endRow: number, endCol: number} | null}
     */
    getCellsRange() {
      if (_r(qT, this).call(this) === 0 || _r(rb, this).call(this) === 0)
        return null;
      const {
        row: e,
        col: t
      } = _r(Qc, this).getTopStartCorner(), {
        row: i,
        col: r
      } = _r(Qc, this).getBottomEndCorner(), s = Yg(ob, this, nDe).call(this, e, i), o = Yg(ob, this, XT).call(this, t, r);
      return {
        isRangeTrimmed: i !== s || r !== o,
        startRow: e,
        startCol: t,
        endRow: s,
        endCol: o
      };
    }
    /**
     * Returns a new coords object within the most-bottom column headers range with `startRow`,
     * `startCol`, `endRow` and `endCol` keys.
     *
     * @returns {{startRow: number, startCol: number, endRow: number, endCol: number} | null}
     */
    getMostBottomColumnHeadersRange() {
      if (_r(rb, this).call(this) === 0 || _r(sb, this).call(this) === 0)
        return null;
      const {
        col: e
      } = _r(Qc, this).getTopStartCorner(), {
        col: t
      } = _r(Qc, this).getBottomEndCorner(), i = Yg(ob, this, XT).call(this, e, t);
      return {
        isRangeTrimmed: t !== i,
        startRow: -1,
        startCol: e,
        endRow: -1,
        endCol: i
      };
    }
    /**
     * Returns a new coords object within all column headers layers (including nested headers) range with
     * `startRow`, `startCol`, `endRow` and `endCol` keys.
     *
     * @returns {{startRow: number, startCol: number, endRow: number, endCol: number} | null}
     */
    getAllColumnHeadersRange() {
      if (_r(rb, this).call(this) === 0 || _r(sb, this).call(this) === 0)
        return null;
      const {
        col: e
      } = _r(Qc, this).getTopStartCorner(), {
        col: t
      } = _r(Qc, this).getBottomEndCorner(), i = Yg(ob, this, XT).call(this, e, t);
      return {
        isRangeTrimmed: t !== i,
        startRow: -_r(sb, this).call(this),
        startCol: e,
        endRow: -1,
        endCol: i
      };
    }
  }
  function XT(n, e) {
    return Math.min(e, Math.max(n + _r(uI, this).call(this) - 1, n));
  }
  function nDe(n, e) {
    return Math.min(e, Math.max(n + _r(cI, this).call(this) - 1, n));
  }
  function CY(n) {
    const e = [], t = [];
    return z(n, (i) => {
      const r = Math.min(i.startRow, i.endRow), s = Math.max(i.startRow, i.endRow);
      $e(r, s, (l) => {
        e.indexOf(l) === -1 && e.push(l);
      });
      const o = Math.min(i.startCol, i.endCol), a = Math.max(i.startCol, i.endCol);
      $e(o, a, (l) => {
        t.indexOf(l) === -1 && t.push(l);
      });
    }), {
      rows: e,
      columns: t
    };
  }
  function iDe(n, e) {
    SY(n, e), e.add(n);
  }
  function Jc(n, e, t) {
    SY(n, e), e.set(n, t);
  }
  function SY(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function ab(n, e, t) {
    return (e = rDe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function rDe(n) {
    var e = sDe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function sDe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function Kr(n, e) {
    return n.get(qr(n, e));
  }
  function Lo(n, e, t) {
    return n.set(qr(n, e), t), t;
  }
  function qr(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  Ie.getSingleton().register("afterCopyLimit");
  Ie.getSingleton().register("modifyCopyableRange");
  Ie.getSingleton().register("beforeCut");
  Ie.getSingleton().register("afterCut");
  Ie.getSingleton().register("beforePaste");
  Ie.getSingleton().register("afterPaste");
  Ie.getSingleton().register("beforeCopy");
  Ie.getSingleton().register("afterCopy");
  const sC = "copyPaste", oDe = 80, aDe = ["fragmentSelection"], B3 = ['<meta name="generator" content="Handsontable"/>', '<style type="text/css">td{white-space:normal}br{mso-data-placement:same-cell}</style>'].join("");
  var hI = /* @__PURE__ */ new WeakMap(), dI = /* @__PURE__ */ new WeakMap(), fI = /* @__PURE__ */ new WeakMap(), cg = /* @__PURE__ */ new WeakMap(), oC = /* @__PURE__ */ new WeakMap(), aC = /* @__PURE__ */ new WeakMap(), ug = /* @__PURE__ */ new WeakMap(), Q_ = /* @__PURE__ */ new WeakMap(), ls = /* @__PURE__ */ new WeakSet();
  class lDe extends Lt {
    constructor() {
      super(...arguments), iDe(this, ls), ab(this, "columnsLimit", 1 / 0), ab(this, "rowsLimit", 1 / 0), ab(this, "pasteMode", "overwrite"), ab(this, "uiContainer", this.hot.rootDocument.body), Jc(this, hI, !1), Jc(this, dI, !1), Jc(this, fI, !1), Jc(this, cg, "cells-only"), Jc(this, oC, !1), Jc(this, aC, !1), Jc(this, ug, new tDe({
        countRows: () => this.hot.countRows(),
        countColumns: () => this.hot.countCols(),
        rowsLimit: () => this.rowsLimit,
        columnsLimit: () => this.columnsLimit,
        countColumnHeaders: () => this.hot.view.getColumnHeadersCount()
      })), Jc(this, Q_, !1), ab(this, "copyableRanges", []);
    }
    static get PLUGIN_KEY() {
      return sC;
    }
    static get SETTING_KEYS() {
      return [sC, ...aDe];
    }
    static get PLUGIN_PRIORITY() {
      return oDe;
    }
    /**
     * Checks if the [`CopyPaste`](#copypaste) plugin is enabled.
     *
     * This method gets called by Handsontable's [`beforeInit`](@/api/hooks.md#beforeinit) hook.
     * If it returns `true`, the [`enablePlugin()`](#enableplugin) method gets called.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return !!this.hot.getSettings()[sC];
    }
    /**
     * Enables the [`CopyPaste`](#copypaste) plugin for your Handsontable instance.
     */
    enablePlugin() {
      var e = this;
      if (this.enabled)
        return;
      const {
        [sC]: t
      } = this.hot.getSettings();
      if (typeof t == "object") {
        var i, r;
        this.pasteMode = (i = t.pasteMode) !== null && i !== void 0 ? i : this.pasteMode, this.rowsLimit = isNaN(t.rowsLimit) ? this.rowsLimit : t.rowsLimit, this.columnsLimit = isNaN(t.columnsLimit) ? this.columnsLimit : t.columnsLimit, Lo(hI, this, !!t.copyColumnHeaders), Lo(dI, this, !!t.copyColumnGroupHeaders), Lo(fI, this, !!t.copyColumnHeadersOnly), this.uiContainer = (r = t.uiContainer) !== null && r !== void 0 ? r : this.uiContainer;
      }
      this.addHook("afterContextMenuDefaultOptions", (s) => qr(ls, this, hDe).call(this, s)), this.addHook("afterSelection", function() {
        for (var s = arguments.length, o = new Array(s), a = 0; a < s; a++)
          o[a] = arguments[a];
        return qr(ls, e, dDe).call(e, ...o);
      }), this.addHook("afterSelectionEnd", () => qr(ls, this, fDe).call(this)), this.eventManager.addEventListener(this.hot.rootDocument, "copy", function() {
        return e.onCopy(...arguments);
      }), this.eventManager.addEventListener(this.hot.rootDocument, "cut", function() {
        return e.onCut(...arguments);
      }), this.eventManager.addEventListener(this.hot.rootDocument, "paste", function() {
        return e.onPaste(...arguments);
      }), SD() && (this.eventManager.addEventListener(this.hot.rootDocument.body, "mouseenter", function() {
        for (var s = arguments.length, o = new Array(s), a = 0; a < s; a++)
          o[a] = arguments[a];
        return qr(ls, e, gDe).call(e, ...o);
      }), this.eventManager.addEventListener(this.hot.rootDocument.body, "mouseleave", function() {
        for (var s = arguments.length, o = new Array(s), a = 0; a < s; a++)
          o[a] = arguments[a];
        return qr(ls, e, pDe).call(e, ...o);
      }), this.addHook("afterSelection", () => qr(ls, this, mDe).call(this))), super.enablePlugin();
    }
    /**
     * Updates the state of the [`CopyPaste`](#copypaste) plugin.
     *
     * Gets called when [`updateSettings()`](@/api/core.md#updatesettings)
     * is invoked with any of the following configuration options:
     *  - [`copyPaste`](@/api/options.md#copypaste)
     *  - [`fragmentSelection`](@/api/options.md#fragmentselection)
     */
    updatePlugin() {
      this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
    }
    /**
     * Disables the [`CopyPaste`](#copypaste) plugin for your Handsontable instance.
     */
    disablePlugin() {
      super.disablePlugin();
    }
    /**
     * Copies the contents of the selected cells (and/or their related column headers) to the system clipboard.
     *
     * Takes an optional parameter (`copyMode`) that defines the scope of copying:
     *
     * | `copyMode` value              | Description                                                     |
     * | ----------------------------- | --------------------------------------------------------------- |
     * | `'cells-only'` (default)      | Copy the selected cells                                         |
     * | `'with-column-headers'`       | - Copy the selected cells<br>- Copy the nearest column headers  |
     * | `'with-column-group-headers'` | - Copy the selected cells<br>- Copy all related columns headers |
     * | `'column-headers-only'`       | Copy the nearest column headers (without copying cells)         |
     *
     * @param {string} [copyMode='cells-only'] Copy mode.
     */
    copy() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "cells-only";
      Lo(cg, this, e), Lo(oC, this, !0), qr(ls, this, V3).call(this, "copy");
    }
    /**
     * Copies the contents of the selected cells.
     */
    copyCellsOnly() {
      this.copy("cells-only");
    }
    /**
     * Copies the contents of column headers that are nearest to the selected cells.
     */
    copyColumnHeadersOnly() {
      this.copy("column-headers-only");
    }
    /**
     * Copies the contents of the selected cells and all their related column headers.
     */
    copyWithAllColumnHeaders() {
      this.copy("with-column-group-headers");
    }
    /**
     * Copies the contents of the selected cells and their nearest column headers.
     */
    copyWithColumnHeaders() {
      this.copy("with-column-headers");
    }
    /**
     * Cuts the contents of the selected cells to the system clipboard.
     */
    cut() {
      Lo(aC, this, !0), qr(ls, this, V3).call(this, "cut");
    }
    /**
     * Converts the contents of multiple ranges (`ranges`) into a single string.
     *
     * @param {Array<{startRow: number, startCol: number, endRow: number, endCol: number}>} ranges Array of objects with properties `startRow`, `endRow`, `startCol` and `endCol`.
     * @returns {string} A string that will be copied to the clipboard.
     */
    getRangedCopyableData(e) {
      return Sv(this.getRangedData(e));
    }
    /**
     * Converts the contents of multiple ranges (`ranges`) into an array of arrays.
     *
     * @param {Array<{startRow: number, startCol: number, endRow: number, endCol: number}>} ranges Array of objects with properties `startRow`, `startCol`, `endRow` and `endCol`.
     * @returns {Array[]} An array of arrays that will be copied to the clipboard.
     */
    getRangedData(e) {
      const t = [], {
        rows: i,
        columns: r
      } = CY(e);
      return z(i, (s) => {
        const o = [];
        z(r, (a) => {
          s < 0 ? o.push(this.hot.getColHeader(a, s)) : o.push(this.hot.getCopyableData(s, a));
        }), t.push(o);
      }), t;
    }
    /**
     * Simulates the paste action.
     *
     * For security reasons, modern browsers don't allow reading from the system clipboard.
     *
     * @param {string} pastableText The value to paste, as a raw string.
     * @param {string} [pastableHtml=''] The value to paste, as HTML.
     */
    paste() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "", t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : e;
      if (!e && !t)
        return;
      const i = new Jke();
      e && i.clipboardData.setData("text/plain", e), t && i.clipboardData.setData("text/html", t), this.onPaste(i);
    }
    /**
     * Prepares copyable text from the cells selection in the invisible textarea.
     */
    setCopyableText() {
      const e = this.hot.getSelectedRangeLast();
      if (!e)
        return;
      if (e.isSingleHeader()) {
        this.copyableRanges = [];
        return;
      }
      Kr(ug, this).setSelectedRange(e);
      const t = /* @__PURE__ */ new Map([["headers", null], ["cells", null]]);
      Kr(cg, this) === "column-headers-only" ? t.set("headers", Kr(ug, this).getMostBottomColumnHeadersRange()) : (Kr(cg, this) === "with-column-headers" ? t.set("headers", Kr(ug, this).getMostBottomColumnHeadersRange()) : Kr(cg, this) === "with-column-group-headers" && t.set("headers", Kr(ug, this).getAllColumnHeadersRange()), t.set("cells", Kr(ug, this).getCellsRange())), this.copyableRanges = Array.from(t.values()).filter((r) => r !== null).map((r) => {
        let {
          startRow: s,
          startCol: o,
          endRow: a,
          endCol: l
        } = r;
        return {
          startRow: s,
          startCol: o,
          endRow: a,
          endCol: l
        };
      }), this.copyableRanges = this.hot.runHooks("modifyCopyableRange", this.copyableRanges);
      const i = t.get("cells");
      if (i !== null && i.isRangeTrimmed) {
        const {
          startRow: r,
          startCol: s,
          endRow: o,
          endCol: a
        } = i;
        this.hot.runHooks("afterCopyLimit", o - r + 1, a - s + 1, this.rowsLimit, this.columnsLimit);
      }
    }
    /**
     * Verifies if editor exists and is open.
     *
     * @private
     * @returns {boolean}
     */
    isEditorOpened() {
      var e;
      return (e = this.hot.getActiveEditor()) === null || e === void 0 ? void 0 : e.isOpened();
    }
    /**
     * Prepares new values to populate them into datasource.
     *
     * @private
     * @param {Array} inputArray An array of the data to populate.
     * @param {Array} [selection] The selection which indicates from what position the data will be populated.
     * @returns {Array} Range coordinates after populate data.
     */
    populateValues(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.hot.getSelectedRangeLast();
      if (!e.length)
        return;
      const i = e.length, r = e[0].length, s = [], {
        row: o,
        col: a
      } = t.getTopStartCorner(), {
        row: l,
        col: c
      } = t.getBottomEndCorner();
      let u = o, h = a, d = o, f = a;
      for (; s.length < i || u <= l; ) {
        const {
          skipRowOnPaste: g,
          visualRow: p
        } = this.hot.getCellMeta(u, a);
        if (u = p + 1, g === !0)
          continue;
        d = p, h = a;
        const m = [], v = s.length % i;
        for (; m.length < r || h <= c; ) {
          const {
            skipColumnOnPaste: y,
            visualCol: w
          } = this.hot.getCellMeta(o, h);
          if (h = w + 1, y === !0)
            continue;
          f = w;
          const R = m.length % r;
          m.push(e[v][R]);
        }
        s.push(m);
      }
      return Lo(Q_, this, !0), this.hot.populateFromArray(o, a, s, void 0, void 0, "CopyPaste.paste", this.pasteMode), [o, a, d, f];
    }
    /**
     * Add the `contenteditable` attribute to the highlighted cell and select its content.
     */
    /**
     * `copy` event callback on textarea element.
     *
     * @param {Event} event ClipboardEvent.
     * @private
     */
    onCopy(e) {
      var t;
      const i = this.hot.getFocusManager().getRefocusElement(), r = (t = e.target) === null || t === void 0 ? void 0 : t.hasAttribute("data-hot-input");
      if (!this.hot.isListening() && !Kr(oC, this) || this.isEditorOpened() || e.target instanceof HTMLElement && (r && e.target !== i || !r && e.target !== this.hot.rootDocument.body))
        return;
      e.preventDefault(), this.setCopyableText(), Lo(oC, this, !1);
      const s = this.getRangedData(this.copyableRanges), o = qr(ls, this, cDe).call(this, this.copyableRanges);
      if (!!this.hot.runHooks("beforeCopy", s, this.copyableRanges, o)) {
        const l = Sv(s);
        if (e && e.clipboardData) {
          const c = zP(s, this.hot.rootDocument);
          e.clipboardData.setData("text/plain", l), e.clipboardData.setData("text/html", [B3, c].join(""));
        } else typeof ClipboardEvent > "u" && this.hot.rootWindow.clipboardData.setData("Text", l);
        this.hot.runHooks("afterCopy", s, this.copyableRanges, o);
      }
      Lo(cg, this, "cells-only");
    }
    /**
     * `cut` event callback on textarea element.
     *
     * @param {Event} event ClipboardEvent.
     * @private
     */
    onCut(e) {
      var t;
      const i = this.hot.getFocusManager().getRefocusElement(), r = (t = e.target) === null || t === void 0 ? void 0 : t.hasAttribute("data-hot-input");
      if (!this.hot.isListening() && !Kr(aC, this) || this.isEditorOpened() || e.target instanceof HTMLElement && (r && e.target !== i || !r && e.target !== this.hot.rootDocument.body))
        return;
      e.preventDefault(), this.setCopyableText(), Lo(aC, this, !1);
      const s = this.getRangedData(this.copyableRanges);
      if (!!this.hot.runHooks("beforeCut", s, this.copyableRanges)) {
        const a = Sv(s);
        if (e && e.clipboardData) {
          const l = zP(s, this.hot.rootDocument);
          e.clipboardData.setData("text/plain", a), e.clipboardData.setData("text/html", [B3, l].join(""));
        } else typeof ClipboardEvent > "u" && this.hot.rootWindow.clipboardData.setData("Text", a);
        this.hot.emptySelectedCells("CopyPaste.cut"), this.hot.runHooks("afterCut", s, this.copyableRanges);
      }
    }
    /**
     * `paste` event callback on textarea element.
     *
     * @param {Event} event ClipboardEvent or pseudo ClipboardEvent, if paste was called manually.
     * @private
     */
    onPaste(e) {
      var t;
      const i = this.hot.getFocusManager().getRefocusElement(), r = (t = e.target) === null || t === void 0 ? void 0 : t.hasAttribute("data-hot-input");
      if (!this.hot.isListening() || this.isEditorOpened() || !this.hot.getSelected() || e.target instanceof HTMLElement && (r && e.target !== i || !r && e.target !== this.hot.rootDocument.body))
        return;
      e.preventDefault();
      let s;
      if (e && typeof e.clipboardData < "u") {
        const u = A1(e.clipboardData.getData("text/html"), {
          ADD_TAGS: ["meta"],
          ADD_ATTR: ["content"],
          FORCE_BODY: !0
        });
        u && /(<table)|(<TABLE)/g.test(u) ? s = T9(u, this.hot.rootDocument).data : s = e.clipboardData.getData("text/plain");
      } else typeof ClipboardEvent > "u" && typeof this.hot.rootWindow.clipboardData < "u" && (s = this.hot.rootWindow.clipboardData.getData("Text"));
      if (typeof s == "string" && (s = Cxe(s)), s === void 0 || s && s.length === 0 || this.hot.runHooks("beforePaste", s, this.copyableRanges) === !1)
        return;
      const [o, a, l, c] = this.populateValues(s);
      this.hot.selectCell(o, a, Math.min(this.hot.countRows() - 1, l), Math.min(this.hot.countCols() - 1, c)), this.hot.runHooks("afterPaste", s, this.copyableRanges);
    }
    /**
     * Add copy and cut options to the Context Menu.
     *
     * @param {object} options Contains default added options of the Context Menu.
     */
    /**
     * Destroys the `CopyPaste` plugin instance.
     */
    destroy() {
      super.destroy();
    }
  }
  function V3(n) {
    if (SD()) {
      const e = this.hot.getSelectedRangeLast();
      if (e) {
        const {
          row: t,
          col: i
        } = e.highlight, r = this.hot.getCell(t, i, !0);
        r && e9(r, () => {
          this.hot.rootDocument.execCommand(n);
        });
      }
    } else
      this.hot.rootDocument.execCommand(n);
  }
  function cDe(n) {
    const {
      rows: e
    } = CY(n);
    let t = 0;
    for (let i = 0; i < e.length && !(e[i] >= 0); i++)
      t += 1;
    return {
      columnHeadersCount: t
    };
  }
  function uDe() {
    if (this.hot.isListening()) {
      const n = this.hot.getSelectedRangeLast();
      if (n) {
        const {
          row: e,
          col: t
        } = n.highlight, i = this.hot.getCell(e, t, !0);
        i && bD(i);
      }
    }
  }
  function _Y() {
    if (this.hot.isListening()) {
      const n = this.hot.getSelectedRangeLast();
      if (n) {
        const {
          row: e,
          col: t
        } = n.highlight, i = this.hot.getCell(e, t, !0);
        i != null && i.hasAttribute("contenteditable") && vD(i);
      }
    }
  }
  function hDe(n) {
    n.items.push({
      name: "---------"
    }, Yke(this)), Kr(hI, this) && n.items.push(Xke(this)), Kr(dI, this) && n.items.push(qke(this)), Kr(fI, this) && n.items.push(Kke(this)), n.items.push(Zke(this));
  }
  function dDe(n, e, t, i, r) {
    Kr(Q_, this) && (r.value = !0), Lo(Q_, this, !1);
  }
  function fDe() {
    this.isEditorOpened() || this.hot.getSettings().fragmentSelection || this.setCopyableText();
  }
  function gDe() {
    qr(ls, this, _Y).call(this);
  }
  function pDe() {
    qr(ls, this, uDe).call(this);
  }
  function mDe() {
    qr(ls, this, _Y).call(this);
  }
  function RY(n, e) {
    return `border_row${n}col${e}`;
  }
  function jb() {
    return {
      width: 1,
      color: "#000"
    };
  }
  function gc() {
    return {
      hide: !0
    };
  }
  function bDe() {
    return {
      width: 1,
      color: "#000",
      cornerVisible: !1
    };
  }
  function ZT(n) {
    if (ke(n.start) || ke(n.left)) {
      var e;
      n.start = (e = n.start) !== null && e !== void 0 ? e : n.left;
    }
    if (ke(n.end) || ke(n.right)) {
      var t;
      n.end = (t = n.end) !== null && t !== void 0 ? t : n.right;
    }
    return delete n.left, delete n.right, n;
  }
  function lb(n) {
    return ke(n.start) && (n.left = n.start), ke(n.end) && (n.right = n.end), n;
  }
  function QT(n, e) {
    return {
      id: RY(n, e),
      border: bDe(),
      row: n,
      col: e,
      top: gc(),
      bottom: gc(),
      start: gc(),
      end: gc()
    };
  }
  function vDe(n, e) {
    return In(e, "border") && e.border && (n.border = e.border), In(e, "top") && ke(e.top) && (e.top ? (at(e.top) || (e.top = jb()), n.top = e.top) : (e.top = gc(), n.top = e.top)), In(e, "bottom") && ke(e.bottom) && (e.bottom ? (at(e.bottom) || (e.bottom = jb()), n.bottom = e.bottom) : (e.bottom = gc(), n.bottom = e.bottom)), In(e, "start") && ke(e.start) && (e.start ? (at(e.start) || (e.start = jb()), n.start = e.start) : (e.start = gc(), n.start = e.start)), In(e, "end") && ke(e.end) && (e.end ? (at(e.end) || (e.end = jb()), n.end = e.end) : (e.end = gc(), n.end = e.end)), n;
  }
  function Tc(n, e) {
    let t = !1;
    return z(n.getSelectedRange(), (i) => {
      i.forAll((r, s) => {
        if (r < 0 || s < 0)
          return;
        const o = n.getCellMeta(r, s).borders;
        if (o)
          if (e) {
            if (!In(o[e], "hide") || o[e].hide === !1)
              return t = !0, !1;
          } else
            return t = !0, !1;
      });
    }), t;
  }
  function cE(n) {
    return `<span class="selected">✓</span>${n}`;
  }
  function wDe(n) {
    return n.some((e) => ke(e.left) || ke(e.right));
  }
  function yDe(n) {
    return n.some((e) => ke(e.start) || ke(e.end));
  }
  const CDe = /* @__PURE__ */ new Map([["left", "start"], ["right", "end"]]);
  function SDe(n) {
    var e;
    return (e = CDe.get(n)) !== null && e !== void 0 ? e : n;
  }
  function _De(n) {
    return {
      key: "borders:bottom",
      name() {
        let e = this.getTranslatedPhrase(kN);
        return Tc(this, "bottom") && (e = cE(e)), e;
      },
      callback(e, t) {
        const i = Tc(this, "bottom");
        n.prepareBorder(t, "bottom", i);
      }
    };
  }
  function RDe(n) {
    const e = n.hot.isRtl() ? "end" : "start";
    return {
      key: "borders:left",
      name() {
        let t = this.getTranslatedPhrase(DN);
        return Tc(this, e) && (t = cE(t)), t;
      },
      callback(t, i) {
        const r = Tc(this, e);
        n.prepareBorder(i, e, r);
      }
    };
  }
  function EDe(n) {
    return {
      key: "borders:no_borders",
      name() {
        return this.getTranslatedPhrase(NN);
      },
      callback(e, t) {
        n.prepareBorder(t, "noBorders");
      },
      disabled() {
        return !Tc(this);
      }
    };
  }
  function xDe(n) {
    const e = n.hot.isRtl() ? "start" : "end";
    return {
      key: "borders:right",
      name() {
        let t = this.getTranslatedPhrase(ON);
        return Tc(this, e) && (t = cE(t)), t;
      },
      callback(t, i) {
        const r = Tc(this, e);
        n.prepareBorder(i, e, r);
      }
    };
  }
  function TDe(n) {
    return {
      key: "borders:top",
      name() {
        let e = this.getTranslatedPhrase(IN);
        return Tc(this, "top") && (e = cE(e)), e;
      },
      callback(e, t) {
        const i = Tc(this, "top");
        n.prepareBorder(t, "top", i);
      }
    };
  }
  function MDe(n, e) {
    ADe(n, e), e.add(n);
  }
  function ADe(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function PDe(n, e, t) {
    return (e = IDe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function IDe(n) {
    var e = ODe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function ODe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function W3(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  const PS = "customBorders", kDe = 90;
  var JT = /* @__PURE__ */ new WeakSet();
  class DDe extends Lt {
    constructor() {
      super(...arguments), MDe(this, JT), PDe(this, "savedBorders", []);
    }
    static get PLUGIN_KEY() {
      return PS;
    }
    static get PLUGIN_PRIORITY() {
      return kDe;
    }
    /**
     * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link CustomBorders#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return !!this.hot.getSettings()[PS];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
    enablePlugin() {
      this.enabled || (this.addHook("afterContextMenuDefaultOptions", (e) => W3(JT, this, NDe).call(this, e)), this.addHook("init", () => W3(JT, this, LDe).call(this)), super.enablePlugin());
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
    disablePlugin() {
      this.hideBorders(), super.disablePlugin();
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`customBorders`](@/api/options.md#customborders)
     */
    updatePlugin() {
      this.disablePlugin(), this.enablePlugin(), this.changeBorderSettings(), super.updatePlugin();
    }
    /**
     * Set custom borders.
     *
     * @example
     * ```js
     * const customBordersPlugin = hot.getPlugin('customBorders');
     *
     * // Using an array of arrays (produced by `.getSelected()` method).
     * customBordersPlugin.setBorders([[1, 1, 2, 2], [6, 2, 0, 2]], {start: {width: 2, color: 'blue'}});
     *
     * // Using an array of CellRange objects (produced by `.getSelectedRange()` method).
     * //  Selecting a cell range.
     * hot.selectCell(0, 0, 2, 2);
     * // Returning selected cells' range with the getSelectedRange method.
     * customBordersPlugin.setBorders(hot.getSelectedRange(), {start: {hide: false, width: 2, color: 'blue'}});
     * ```
     *
     * @param {Array[]|CellRange[]} selectionRanges Array of selection ranges.
     * @param {object} borderObject Object with `top`, `right`, `bottom` and `start` properties.
     */
    setBorders(e, t) {
      let i = ["top", "bottom", "start", "end"], r = null;
      t && (this.checkSettingsCohesion([t]), i = Object.keys(t), r = ZT(t));
      const s = _p(e), o = bw(s, {
        createCellCoords: this.hot._createCellCoords.bind(this.hot),
        createCellRange: this.hot._createCellRange.bind(this.hot)
      });
      z(e, (a) => {
        o(a).forAll((l, c) => {
          z(i, (u) => {
            this.prepareBorderFromCustomAdded(l, c, r, SDe(u));
          });
        });
      }), this.hot.view.render();
    }
    /**
     * Get custom borders.
     *
     * @example
     * ```js
     * const customBordersPlugin = hot.getPlugin('customBorders');
     *
     * // Using an array of arrays (produced by `.getSelected()` method).
     * customBordersPlugin.getBorders([[1, 1, 2, 2], [6, 2, 0, 2]]);
     * // Using an array of CellRange objects (produced by `.getSelectedRange()` method).
     * customBordersPlugin.getBorders(hot.getSelectedRange());
     * // Using without param - return all customBorders.
     * customBordersPlugin.getBorders();
     * ```
     *
     * @param {Array[]|CellRange[]} selectionRanges Array of selection ranges.
     * @returns {object[]} Returns array of border objects.
     */
    getBorders(e) {
      if (!Array.isArray(e))
        return this.savedBorders;
      const t = _p(e), i = bw(t, {
        createCellCoords: this.hot._createCellCoords.bind(this.hot),
        createCellRange: this.hot._createCellRange.bind(this.hot)
      }), r = [];
      return z(e, (s) => {
        i(s).forAll((o, a) => {
          z(this.savedBorders, (l) => {
            l.row === o && l.col === a && r.push(lb(l));
          });
        });
      }), r;
    }
    /**
     * Clear custom borders.
     *
     * @example
     * ```js
     * const customBordersPlugin = hot.getPlugin('customBorders');
     *
     * // Using an array of arrays (produced by `.getSelected()` method).
     * customBordersPlugin.clearBorders([[1, 1, 2, 2], [6, 2, 0, 2]]);
     * // Using an array of CellRange objects (produced by `.getSelectedRange()` method).
     * customBordersPlugin.clearBorders(hot.getSelectedRange());
     * // Using without param - clear all customBorders.
     * customBordersPlugin.clearBorders();
     * ```
     *
     * @param {Array[]|CellRange[]} selectionRanges Array of selection ranges.
     */
    clearBorders(e) {
      e ? this.setBorders(e) : (z(this.savedBorders, (t) => {
        this.clearBordersFromSelectionSettings(t.id), this.clearNullCellRange(), this.hot.removeCellMeta(t.row, t.col, "borders");
      }), this.savedBorders.length = 0);
    }
    /**
     * Insert WalkontableSelection instance into Walkontable settings.
     *
     * @private
     * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
     * @param {string} [place] Coordinate where add/remove border - `top`, `bottom`, `start`, `end`.
     */
    insertBorderIntoSettings(e, t) {
      this.checkSavedBorders(e) || this.savedBorders.push(e);
      const r = this.hot._createCellRange(this.hot._createCellCoords(e.row, e.col));
      this.checkCustomSelections(e, r, t) || this.hot.selection.highlight.addCustomSelection({
        border: e,
        visualCellRange: r
      });
    }
    /**
     * Prepare borders from setting (single cell).
     *
     * @private
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {object} borderDescriptor Object with `row` and `col`, `start`, `end`, `top` and `bottom` properties.
     * @param {string} [place] Coordinate where add/remove border - `top`, `bottom`, `start`, `end`.
     */
    prepareBorderFromCustomAdded(e, t, i, r) {
      const s = this.hot.countRows(), o = this.hot.countCols();
      if (e >= s || t >= o)
        return;
      let a = QT(e, t);
      i && (a = vDe(a, i), z(this.hot.selection.highlight.customSelections, (l) => {
        if (a.id === l.settings.id)
          return Object.assign(l.settings, i), a.id = l.settings.id, a.top = l.settings.top, a.bottom = l.settings.bottom, a.start = l.settings.start, a.end = l.settings.end, !1;
      })), this.hot.setCellMeta(e, t, "borders", lb(a)), this.insertBorderIntoSettings(a, r);
    }
    /**
     * Prepare borders from setting (object).
     *
     * @private
     * @param {object} range {CellRange} The CellRange object.
     * @param {object} customBorder Object with `start`, `end`, `top` and `bottom` properties.
     */
    prepareBorderFromCustomAddedRange(e, t) {
      const i = Math.min(e.to.row, this.hot.countRows() - 1), r = Math.min(e.to.col, this.hot.countCols() - 1);
      $e(e.from.row, i, (s) => {
        $e(e.from.col, r, (o) => {
          const a = QT(s, o);
          let l = 0;
          s === e.from.row && In(t, "top") && (l += 1, a.top = t.top), s === e.to.row && In(t, "bottom") && (l += 1, a.bottom = t.bottom), o === e.from.col && In(t, "start") && (l += 1, a.start = t.start), o === e.to.col && In(t, "end") && (l += 1, a.end = t.end), l > 0 && (this.hot.setCellMeta(s, o, "borders", lb(a)), this.insertBorderIntoSettings(a));
        });
      });
    }
    /**
     * Remove border (triggered from context menu).
     *
     * @private
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     */
    removeAllBorders(e, t) {
      const i = RY(e, t);
      this.spliceBorder(i), this.clearBordersFromSelectionSettings(i), this.clearNullCellRange(), this.hot.removeCellMeta(e, t, "borders");
    }
    /**
     * Set borders for each cell re. To border position.
     *
     * @private
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {string} place Coordinate where add/remove border - `top`, `bottom`, `start`, `end` and `noBorders`.
     * @param {boolean} remove True when remove borders, and false when add borders.
     */
    setBorder(e, t, i, r) {
      let s = this.hot.getCellMeta(e, t).borders;
      !s || s.border === void 0 ? s = QT(e, t) : s = ZT(s), r ? (s[i] = gc(), this.countHide(s) === 4 ? this.removeAllBorders(e, t) : (this.checkCustomSelectionsFromContextMenu(s, i, r) || this.insertBorderIntoSettings(s), this.hot.setCellMeta(e, t, "borders", lb(s)))) : (s[i] = jb(), this.checkCustomSelectionsFromContextMenu(s, i, r) || this.insertBorderIntoSettings(s), this.hot.setCellMeta(e, t, "borders", lb(s)));
    }
    /**
     * Prepare borders based on cell and border position.
     *
     * @private
     * @param {CellRange[]} selected An array of CellRange objects.
     * @param {string} place Coordinate where add/remove border - `top`, `bottom`, `left`, `right` and `noBorders`.
     * @param {boolean} remove True when remove borders, and false when add borders.
     */
    prepareBorder(e, t, i) {
      z(e, (r) => {
        let {
          start: s,
          end: o
        } = r;
        if (s.row === o.row && s.col === o.col)
          t === "noBorders" ? this.removeAllBorders(s.row, s.col) : this.setBorder(s.row, s.col, t, i);
        else
          switch (t) {
            case "noBorders":
              $e(s.col, o.col, (a) => {
                $e(s.row, o.row, (l) => {
                  this.removeAllBorders(l, a);
                });
              });
              break;
            case "top":
              $e(s.col, o.col, (a) => {
                this.setBorder(s.row, a, t, i);
              });
              break;
            case "bottom":
              $e(s.col, o.col, (a) => {
                this.setBorder(o.row, a, t, i);
              });
              break;
            case "start":
              $e(s.row, o.row, (a) => {
                this.setBorder(a, s.col, t, i);
              });
              break;
            case "end":
              $e(s.row, o.row, (a) => {
                this.setBorder(a, o.col, t, i);
              });
              break;
          }
      });
    }
    /**
     * Create borders from settings.
     *
     * @private
     * @param {Array} customBorders Object with `row` and `col`, `start`, `end`, `top` and `bottom` properties.
     */
    createCustomBorders(e) {
      z(e, (t) => {
        const i = ZT(t);
        t.range ? this.prepareBorderFromCustomAddedRange(t.range, i) : this.prepareBorderFromCustomAdded(t.row, t.col, i);
      });
    }
    /**
     * Count hide property in border object.
     *
     * @private
     * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and
     *                        `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
     * @returns {number}
     */
    countHide(e) {
      const {
        top: t,
        bottom: i,
        start: r,
        end: s
      } = e;
      return li([t, i, r, s], (a, l) => {
        let c = a;
        return l && l.hide && (c += 1), c;
      }, 0);
    }
    /**
     * Clear borders settings from custom selections.
     *
     * @private
     * @param {string} borderId Border id name as string.
     */
    clearBordersFromSelectionSettings(e) {
      const t = mt(this.hot.selection.highlight.customSelections, (i) => i.settings.id).indexOf(e);
      t > -1 && this.hot.selection.highlight.customSelections[t].clear();
    }
    /**
     * Clear cellRange with null value.
     *
     * @private
     */
    clearNullCellRange() {
      z(this.hot.selection.highlight.customSelections, (e, t) => {
        if (e.cellRange === null)
          return this.hot.selection.highlight.customSelections[t].destroy(), this.hot.selection.highlight.customSelections.splice(t, 1), !1;
      });
    }
    /**
     * Hide custom borders.
     *
     * @private
     */
    hideBorders() {
      z(this.savedBorders, (e) => {
        this.clearBordersFromSelectionSettings(e.id), this.clearNullCellRange();
      });
    }
    /**
     * Splice border from savedBorders.
     *
     * @private
     * @param {string} borderId Border id name as string.
     */
    spliceBorder(e) {
      const t = mt(this.savedBorders, (i) => i.id).indexOf(e);
      t > -1 && this.savedBorders.splice(t, 1);
    }
    /**
     * Check if an border already exists in the savedBorders array, and if true update border in savedBorders.
     *
     * @private
     * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and
     *                        `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
     *
     * @returns {boolean}
     */
    checkSavedBorders(e) {
      let t = !1;
      return this.countHide(e) === 4 ? (this.spliceBorder(e.id), t = !0) : z(this.savedBorders, (r, s) => {
        if (e.id === r.id)
          return this.savedBorders[s] = e, t = !0, !1;
      }), t;
    }
    /**
     * Check if an border already exists in the customSelections, and if true call toggleHiddenClass method.
     *
     * @private
     * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and
     *                        `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
     * @param {string} place Coordinate where add/remove border - `top`, `bottom`, `start`, `end` and `noBorders`.
     * @param {boolean} remove True when remove borders, and false when add borders.
     *
     * @returns {boolean}
     */
    checkCustomSelectionsFromContextMenu(e, t, i) {
      let r = !1;
      return z(this.hot.selection.highlight.customSelections, (s) => {
        if (e.id === s.settings.id) {
          const o = this.hot.view._wt.selectionManager.getBorderInstances(s);
          return z(o, (a) => {
            a.toggleHiddenClass(t, i);
          }), r = !0, !1;
        }
      }), r;
    }
    /**
     * Check if an border already exists in the customSelections, and if true reset cellRange.
     *
     * @private
     * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and
     *                        `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
     * @param {CellRange} cellRange The selection range to check.
     * @param {string} [place] Coordinate where add/remove border - `top`, `bottom`, `start`, `end`.
     * @returns {boolean}
     */
    checkCustomSelections(e, t, i) {
      const r = this.countHide(e);
      let s = !1;
      return r === 4 ? (this.removeAllBorders(e.row, e.col), s = !0) : z(this.hot.selection.highlight.customSelections, (o) => {
        if (e.id === o.settings.id) {
          if (o.visualCellRange = t, o.commit(), i) {
            const a = this.hot.view._wt.selectionManager.getBorderInstances(o);
            z(a, (l) => {
              l.changeBorderStyle(i, e);
            });
          }
          return s = !0, !1;
        }
      }), s;
    }
    /**
     * Change borders from settings.
     *
     * @private
     */
    changeBorderSettings() {
      const e = this.hot.getSettings()[PS];
      if (Array.isArray(e)) {
        const t = mr(e);
        this.checkSettingsCohesion(t), t.length || (this.savedBorders = t), this.createCustomBorders(t);
      } else e !== void 0 && this.createCustomBorders(this.savedBorders);
    }
    /**
     * Checks the settings cohesion. The properties such like "left"/"right" are supported only
     * in the LTR mode and the "left"/"right" options can not be used together with "start"/"end" properties.
     *
     * @private
     * @param {object[]} customBorders The user defined custom border objects array.
     */
    checkSettingsCohesion(e) {
      const t = wDe(e), i = yDe(e);
      if (t && i)
        throw new Error('The "left"/"right" and "start"/"end" options should not be used together. Please use only the option "start"/"end".');
      if (this.hot.isRtl() && t)
        throw new Error('The "left"/"right" properties are not supported for RTL. Please use option "start"/"end".');
    }
    /**
     * Destroys the plugin instance.
     */
    destroy() {
      super.destroy();
    }
  }
  function NDe(n) {
    this.hot.getSettings()[PS] && n.items.push({
      name: "---------"
    }, {
      key: "borders",
      name() {
        return this.getTranslatedPhrase(PN);
      },
      disabled() {
        const e = this.getSelectedRangeLast();
        return !e || e.isSingleHeader() ? !0 : this.selection.isSelectedByCorner();
      },
      submenu: {
        items: [TDe(this), xDe(this), _De(this), RDe(this), EDe(this)]
      }
    });
  }
  function LDe() {
    this.changeBorderSettings();
  }
  function HDe(n, e) {
    $De(n, e), e.add(n);
  }
  function $De(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function eM(n, e, t) {
    return (e = FDe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function FDe(n) {
    var e = BDe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function BDe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function j3(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  const z3 = "dragToScroll", VDe = 100;
  var tM = /* @__PURE__ */ new WeakSet();
  class WDe extends Lt {
    constructor() {
      super(...arguments), HDe(this, tM), eM(this, "boundaries", null), eM(this, "callback", null), eM(this, "listening", !1);
    }
    static get PLUGIN_KEY() {
      return z3;
    }
    static get PLUGIN_PRIORITY() {
      return VDe;
    }
    /**
     * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link DragToScroll#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return !!this.hot.getSettings()[z3];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
    enablePlugin() {
      this.enabled || (this.addHook("afterOnCellMouseDown", (e) => j3(tM, this, U3).call(this, e)), this.addHook("afterOnCellCornerMouseDown", (e) => j3(tM, this, U3).call(this, e)), this.registerEvents(), super.enablePlugin());
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`dragToScroll`](@/api/options.md#dragtoscroll)
     */
    updatePlugin() {
      this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
    disablePlugin() {
      this.unregisterEvents(), super.disablePlugin();
    }
    /**
     * Sets the boundaries/dimensions of the scrollable viewport.
     *
     * @param {DOMRect|{left: number, right: number, top: number, bottom: number}} [boundaries] An object with
     * coordinates. Contains the window boundaries by default. The object is compatible with DOMRect.
     */
    setBoundaries() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        left: 0,
        right: this.hot.rootWindow.innerWidth,
        top: 0,
        bottom: this.hot.rootWindow.innerHeight
      };
      this.boundaries = e;
    }
    /**
     * Changes callback function.
     *
     * @param {Function} callback The callback function.
     */
    setCallback(e) {
      this.callback = e;
    }
    /**
     * Checks if the mouse position (X, Y) is outside the viewport and fires a callback with calculated X an Y diffs
     * between passed boundaries.
     *
     * @param {number} x Mouse X coordinate to check.
     * @param {number} y Mouse Y coordinate to check.
     */
    check(e, t) {
      let i = 0, r = 0;
      t < this.boundaries.top ? r = t - this.boundaries.top : t > this.boundaries.bottom && (r = t - this.boundaries.bottom), e < this.boundaries.left ? i = e - this.boundaries.left : e > this.boundaries.right && (i = e - this.boundaries.right), this.callback(i, r);
    }
    /**
     * Enables listening on `mousemove` event.
     *
     * @private
     */
    listen() {
      this.listening = !0;
    }
    /**
     * Disables listening on `mousemove` event.
     *
     * @private
     */
    unlisten() {
      this.listening = !1;
    }
    /**
     * Returns current state of listening.
     *
     * @private
     * @returns {boolean}
     */
    isListening() {
      return this.listening;
    }
    /**
     * Registers dom listeners.
     *
     * @private
     */
    registerEvents() {
      const {
        rootWindow: e
      } = this.hot;
      let t = e;
      for (; t; )
        this.eventManager.addEventListener(t.document, "contextmenu", () => this.unlisten()), this.eventManager.addEventListener(t.document, "mouseup", () => this.unlisten()), this.eventManager.addEventListener(t.document, "mousemove", (i) => this.onMouseMove(i)), t = ef(t);
    }
    /**
     * Unbinds the events used by the plugin.
     *
     * @private
     */
    unregisterEvents() {
      this.eventManager.clear();
    }
    /**
     * 'mouseMove' event callback.
     *
     * @private
     * @param {MouseEvent} event `mousemove` event properties.
     */
    onMouseMove(e) {
      this.isListening() && this.check(e.clientX, e.clientY);
    }
    /**
     * Destroys the plugin instance.
     */
    destroy() {
      super.destroy();
    }
  }
  function U3(n) {
    if (Ku(n))
      return;
    const e = this.hot.view._wt.wtOverlays.topOverlay.mainTableScrollableElement;
    this.setBoundaries(e !== this.hot.rootWindow ? e.getBoundingClientRect() : void 0), this.setCallback((t, i) => {
      var r, s;
      const o = (r = e.scrollLeft) !== null && r !== void 0 ? r : e.scrollX, a = (s = e.scrollTop) !== null && s !== void 0 ? s : e.scrollY;
      e.scroll(o + Math.sign(t) * 50, a + Math.sign(i) * 20);
    }), this.listen();
  }
  function jDe(n, e) {
    EY(n, e), e.add(n);
  }
  function zDe(n, e, t) {
    EY(n, e), e.set(n, t);
  }
  function EY(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function nM(n, e, t) {
    return (e = UDe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function UDe(n) {
    var e = GDe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function GDe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function YDe(n, e) {
    return n.get(Gs(n, e));
  }
  function xY(n, e, t) {
    return n.set(Gs(n, e), t), t;
  }
  function Gs(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  Ie.getSingleton().register("afterDropdownMenuDefaultOptions");
  Ie.getSingleton().register("beforeDropdownMenuShow");
  Ie.getSingleton().register("afterDropdownMenuShow");
  Ie.getSingleton().register("afterDropdownMenuHide");
  Ie.getSingleton().register("afterDropdownMenuExecute");
  const IS = "dropdownMenu", KDe = 230, yw = "changeType", iM = IS;
  var uE = /* @__PURE__ */ new WeakMap(), $o = /* @__PURE__ */ new WeakSet();
  class hE extends Lt {
    static get PLUGIN_KEY() {
      return IS;
    }
    static get PLUGIN_PRIORITY() {
      return KDe;
    }
    static get PLUGIN_DEPS() {
      return ["plugin:AutoColumnSize"];
    }
    /**
     * Default menu items order when `dropdownMenu` is enabled by setting the config item to `true`.
     *
     * @returns {Array}
     */
    static get DEFAULT_ITEMS() {
      return [vy, wy, ut, Cy, ut, tE, ut, yy, ut, Us];
    }
    /**
     * Instance of {@link CommandExecutor}.
     *
     * @private
     * @type {CommandExecutor}
     */
    constructor(e) {
      super(e), jDe(this, $o), nM(this, "commandExecutor", new fY(this.hot)), nM(this, "itemsFactory", null), nM(this, "menu", null), zDe(this, uE, !1), this.hot.addHook("afterGetColHeader", (t, i) => Gs($o, this, XDe).call(this, t, i));
    }
    /**
     * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link DropdownMenu#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return this.hot.getSettings()[IS];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     *
     * @fires Hooks#afterDropdownMenuDefaultOptions
     * @fires Hooks#beforeDropdownMenuSetItems
     */
    enablePlugin() {
      var e = this;
      if (this.enabled)
        return;
      this.itemsFactory = new gY(this.hot, hE.DEFAULT_ITEMS), this.addHook("beforeOnCellMouseDown", function() {
        for (var r = arguments.length, s = new Array(r), o = 0; o < r; o++)
          s[o] = arguments[o];
        return Gs($o, e, nNe).call(e, ...s);
      }), this.addHook("beforeViewportScrollHorizontally", function() {
        for (var r = arguments.length, s = new Array(r), o = 0; o < r; o++)
          s[o] = arguments[o];
        return Gs($o, e, tNe).call(e, ...s);
      });
      const t = this.hot.getSettings()[IS], i = {
        items: this.itemsFactory.getItems(t)
      };
      this.registerEvents(), typeof t.callback == "function" && this.commandExecutor.setCommonCallback(t.callback), this.registerShortcuts(), super.enablePlugin(), this.callOnPluginsReady(() => {
        this.hot.runHooks("afterDropdownMenuDefaultOptions", i), this.itemsFactory.setPredefinedItems(i.items);
        const r = this.itemsFactory.getItems(t);
        this.menu && this.menu.destroy(), this.menu = new tm(this.hot, {
          className: "htDropdownMenu",
          keepInViewport: !0,
          container: t.uiContainer || this.hot.rootDocument.body
        }), this.hot.runHooks("beforeDropdownMenuSetItems", r), this.menu.setMenuItems(r), this.menu.addLocalHook("beforeOpen", () => Gs($o, this, ZDe).call(this)), this.menu.addLocalHook("afterOpen", () => Gs($o, this, QDe).call(this)), this.menu.addLocalHook("afterSubmenuOpen", (s) => Gs($o, this, JDe).call(this, s)), this.menu.addLocalHook("afterClose", () => Gs($o, this, eNe).call(this)), this.menu.addLocalHook("executeCommand", function() {
          for (var s = arguments.length, o = new Array(s), a = 0; a < s; a++)
            o[a] = arguments[a];
          return e.executeCommand.call(e, ...o);
        }), z(r, (s) => this.commandExecutor.registerCommand(s.key, s));
      });
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`dropdownMenu`](@/api/options.md#dropdownmenu)
     */
    updatePlugin() {
      this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
    disablePlugin() {
      this.close(), this.menu && this.menu.destroy(), this.unregisterShortcuts(), super.disablePlugin();
    }
    /**
     * Register shortcuts responsible for toggling dropdown menu.
     *
     * @private
     */
    registerShortcuts() {
      const e = this.hot.getShortcutManager().getContext("grid"), t = () => {
        const {
          highlight: i
        } = this.hot.getSelectedRangeLast();
        if ((i.isHeader() && i.row === -1 || i.isCell()) && i.col >= 0) {
          this.hot.selectColumns(i.col, i.col, -1);
          const {
            from: r
          } = this.hot.getSelectedRangeLast(), s = eE(this.menu.container, this.hot.rootDocument), o = this.hot.getCell(-1, r.col, !0).querySelector(`.${yw}`), a = o.getBoundingClientRect();
          this.open({
            left: a.left + s.left,
            top: a.top + o.offsetHeight + s.top
          }, {
            left: a.width,
            right: 0,
            above: 0,
            below: 3
          }), this.menu.getNavigator().toFirstItem();
        }
      };
      e.addShortcuts([{
        keys: [["Shift", "Alt", "ArrowDown"], ["Control/Meta", "Enter"]],
        callback: t,
        runOnlyIf: () => {
          var i;
          const r = (i = this.hot.getSelectedRangeLast()) === null || i === void 0 ? void 0 : i.highlight;
          return r && this.hot.selection.isCellVisible(r) && r.isHeader() && !this.menu.isOpened();
        },
        captureCtrl: !0,
        group: iM
      }, {
        keys: [["Shift", "Alt", "ArrowDown"]],
        callback: t,
        runOnlyIf: () => {
          var i;
          const r = (i = this.hot.getSelectedRangeLast()) === null || i === void 0 ? void 0 : i.highlight;
          return r && this.hot.selection.isCellVisible(r) && r.isCell() && !this.menu.isOpened();
        },
        group: iM
      }]);
    }
    /**
     * Unregister shortcuts responsible for toggling dropdown menu.
     *
     * @private
     */
    unregisterShortcuts() {
      this.hot.getShortcutManager().getContext("grid").removeShortcutsByGroup(iM);
    }
    /**
     * Registers the DOM listeners.
     *
     * @private
     */
    registerEvents() {
      this.eventManager.addEventListener(this.hot.rootElement, "click", (e) => Gs($o, this, qDe).call(this, e));
    }
    /**
     * Opens menu and re-position it based on the passed coordinates.
     *
     * @param {{ top: number, left: number }|Event} position An object with `top` and `left` properties
     * which contains coordinates relative to the browsers viewport (without included scroll offsets).
     * Or if the native event is passed the menu will be positioned based on the `pageX` and `pageY`
     * coordinates.
     * @param {{ above: number, below: number, left: number, right: number }} offset An object allows applying
     * the offset to the menu position.
     * @fires Hooks#beforeDropdownMenuShow
     * @fires Hooks#afterDropdownMenuShow
     */
    open(e) {
      var t;
      let i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        above: 0,
        below: 0,
        left: 0,
        right: 0
      };
      (t = this.menu) !== null && t !== void 0 && t.isOpened() || (this.menu.open(), lt(i, (r, s) => {
        this.menu.setOffset(s, r);
      }), this.menu.setPosition(e));
    }
    /**
     * Closes dropdown menu.
     */
    close() {
      var e;
      (e = this.menu) === null || e === void 0 || e.close();
    }
    /**
     * Executes context menu command.
     *
     * The `executeCommand()` method works only for selected cells.
     *
     * When no cells are selected, `executeCommand()` doesn't do anything.
     *
     * You can execute all predefined commands:
     *  * `'col_left'` - Insert column left
     *  * `'col_right'` - Insert column right
     *  * `'clear_column'` - Clear selected column
     *  * `'remove_col'` - Remove column
     *  * `'undo'` - Undo last action
     *  * `'redo'` - Redo last action
     *  * `'make_read_only'` - Make cell read only
     *  * `'alignment:left'` - Alignment to the left
     *  * `'alignment:top'` - Alignment to the top
     *  * `'alignment:right'` - Alignment to the right
     *  * `'alignment:bottom'` - Alignment to the bottom
     *  * `'alignment:middle'` - Alignment to the middle
     *  * `'alignment:center'` - Alignment to the center (justify).
     *
     * Or you can execute command registered in settings where `key` is your command name.
     *
     * @param {string} commandName Command name to execute.
     * @param {*} params Additional parameters passed to the command executor.
     */
    executeCommand(e) {
      for (var t = arguments.length, i = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++)
        i[r - 1] = arguments[r];
      this.commandExecutor.execute(e, ...i);
    }
    /**
     * Turns on / off listening on dropdown menu.
     *
     * @private
     * @param {boolean} listen Turn on listening when value is set to true, otherwise turn it off.
     */
    setListening() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;
      this.menu.isOpened() && (e ? this.menu.hotMenu.listen() : this.menu.hotMenu.unlisten());
    }
    /**
     * Destroys the plugin instance.
     */
    destroy() {
      this.close(), this.menu && this.menu.destroy(), super.destroy();
    }
  }
  function TY(n) {
    n.getKeyboardShortcutsCtrl().addCustomShortcuts([{
      keys: [["Control/Meta", "A"]],
      callback: () => !1
    }]);
  }
  function qDe(n) {
    if (Ue(n.target, yw)) {
      const e = eE(this.menu.container, this.hot.rootDocument), t = n.target.getBoundingClientRect();
      n.stopPropagation(), xY(uE, this, !1), this.open({
        left: t.left + e.left,
        top: t.top + n.target.offsetHeight + e.top
      }, {
        left: t.width,
        right: 0,
        above: 0,
        below: 3
      });
    }
  }
  function XDe(n, e) {
    const t = e.parentNode;
    if (!t)
      return;
    const i = t.parentNode.childNodes, r = Array.prototype.indexOf.call(i, t);
    if (n < 0 || r !== i.length - 1)
      return;
    const s = e.querySelector(`.${yw}`);
    if (this.enabled && s)
      return;
    if (!this.enabled) {
      s && s.parentNode.removeChild(s);
      return;
    }
    const o = this.hot.rootDocument.createElement("button");
    o.className = yw, o.type = "button", o.tabIndex = -1, this.hot.getSettings().ariaTags && (ze(o, [xf(), A_(" ")]), ze(e, [H7("menu")])), o.onclick = function() {
      return !1;
    }, e.firstChild.insertBefore(o, e.firstChild.firstChild);
  }
  function ZDe() {
    this.hot.runHooks("beforeDropdownMenuShow", this);
  }
  function QDe() {
    this.hot.runHooks("afterDropdownMenuShow", this), Gs($o, this, TY).call(this, this.menu);
  }
  function JDe(n) {
    Gs($o, this, TY).call(this, n);
  }
  function eNe() {
    this.hot.listen(), this.hot.runHooks("afterDropdownMenuHide", this);
  }
  function tNe(n) {
    return YDe(uE, this) ? null : n;
  }
  function nNe(n) {
    Ue(n.target, yw) && xY(uE, this, !0);
  }
  hE.SEPARATOR = {
    name: ut
  };
  function G3(n, e, t) {
    return (e = iNe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function iNe(n) {
    var e = rNe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function rNe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class sNe {
    constructor(e) {
      G3(this, "hot", void 0), G3(this, "options", {}), this.hot = e;
    }
    /**
     * Set options for data provider.
     *
     * @param {object} options Object with specified options.
     */
    setOptions(e) {
      this.options = e;
    }
    /**
     * Get table data based on provided settings to the class constructor.
     *
     * @returns {Array}
     */
    getData() {
      const {
        startRow: e,
        startCol: t,
        endRow: i,
        endCol: r
      } = this._getDataRange(), s = this.options, o = [];
      return $e(e, i, (a) => {
        const l = [];
        !s.exportHiddenRows && this._isHiddenRow(a) || ($e(t, r, (c) => {
          !s.exportHiddenColumns && this._isHiddenColumn(c) || l.push(this.hot.getDataAtCell(a, c));
        }), o.push(l));
      }), o;
    }
    /**
     * Gets list of row headers.
     *
     * @returns {Array}
     */
    getRowHeaders() {
      const e = [];
      if (this.options.rowHeaders) {
        const {
          startRow: t,
          endRow: i
        } = this._getDataRange(), r = this.hot.getRowHeader();
        $e(t, i, (s) => {
          !this.options.exportHiddenRows && this._isHiddenRow(s) || e.push(r[s]);
        });
      }
      return e;
    }
    /**
     * Gets list of columns headers.
     *
     * @returns {Array}
     */
    getColumnHeaders() {
      const e = [];
      if (this.options.columnHeaders) {
        const {
          startCol: t,
          endCol: i
        } = this._getDataRange(), r = this.hot.getColHeader();
        $e(t, i, (s) => {
          !this.options.exportHiddenColumns && this._isHiddenColumn(s) || e.push(r[s]);
        });
      }
      return e;
    }
    /**
     * Get data range object based on settings provided in the class constructor.
     *
     * @private
     * @returns {object} Returns object with keys `startRow`, `startCol`, `endRow` and `endCol`.
     */
    _getDataRange() {
      const e = this.hot.countCols() - 1, t = this.hot.countRows() - 1;
      let [i = 0, r = 0, s = t, o = e] = this.options.range;
      return i = Math.max(i, 0), r = Math.max(r, 0), s = Math.min(s, t), o = Math.min(o, e), {
        startRow: i,
        startCol: r,
        endRow: s,
        endCol: o
      };
    }
    /**
     * Check if row at specified row index is hidden.
     *
     * @private
     * @param {number} row Row index.
     * @returns {boolean}
     */
    _isHiddenRow(e) {
      return this.hot.rowIndexMapper.isHidden(this.hot.toPhysicalRow(e));
    }
    /**
     * Check if column at specified column index is hidden.
     *
     * @private
     * @param {number} column Visual column index.
     * @returns {boolean}
     */
    _isHiddenColumn(e) {
      return this.hot.columnIndexMapper.isHidden(this.hot.toPhysicalColumn(e));
    }
  }
  function Y3(n, e, t) {
    return (e = oNe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function oNe(n) {
    var e = aNe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function aNe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class UL {
    /**
     * Default options.
     *
     * @returns {object}
     */
    static get DEFAULT_OPTIONS() {
      return {
        mimeType: "text/plain",
        fileExtension: "txt",
        filename: "Handsontable [YYYY]-[MM]-[DD]",
        encoding: "utf-8",
        bom: !1,
        columnHeaders: !1,
        rowHeaders: !1,
        exportHiddenColumns: !1,
        exportHiddenRows: !1,
        range: []
      };
    }
    /**
     * Data provider.
     *
     * @type {DataProvider}
     */
    constructor(e, t) {
      Y3(this, "dataProvider", void 0), Y3(this, "options", void 0), this.dataProvider = e, this.options = this._mergeOptions(t), this.dataProvider.setOptions(this.options);
    }
    /**
     * Merge options provided by users with defaults.
     *
     * @param {object} options An object with options to merge with.
     * @returns {object} Returns new options object.
     */
    _mergeOptions(e) {
      let t = sa(this.constructor.DEFAULT_OPTIONS);
      const i = /* @__PURE__ */ new Date();
      return t = ai(sa(UL.DEFAULT_OPTIONS), t), t = ai(t, e), t.filename = lD(t.filename, {
        YYYY: i.getFullYear(),
        MM: `${i.getMonth() + 1}`.padStart(2, "0"),
        DD: `${i.getDate()}`.padStart(2, "0")
      }), t;
    }
  }
  const lNe = "\r", cNe = '"', uNe = `
`;
  class hNe extends UL {
    /**
     * Default options for exporting CSV format.
     *
     * @returns {object}
     */
    static get DEFAULT_OPTIONS() {
      return {
        mimeType: "text/csv",
        fileExtension: "csv",
        bom: !0,
        columnDelimiter: ",",
        rowDelimiter: `\r
`
      };
    }
    /**
     * Create string body in desired format.
     *
     * @returns {string}
     */
    export() {
      const e = this.options, t = this.dataProvider.getData();
      let i = this.dataProvider.getColumnHeaders();
      const r = i.length > 0, s = this.dataProvider.getRowHeaders(), o = s.length > 0;
      let a = e.bom ? "\uFEFF" : "";
      return r && (i = mt(i, (l) => this._escapeCell(l, !0)), o && (a += e.columnDelimiter), a += i.join(e.columnDelimiter), a += e.rowDelimiter), z(t, (l, c) => {
        c > 0 && (a += e.rowDelimiter), o && (a += this._escapeCell(s[c]) + e.columnDelimiter), a += l.map((u) => this._escapeCell(u)).join(e.columnDelimiter);
      }), a;
    }
    /**
     * Escape cell value.
     *
     * @param {*} value Cell value.
     * @param {boolean} [force=false] Indicates if cell value will be escaped forcefully.
     * @returns {string}
     */
    _escapeCell(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, i = Vn(e);
      return i !== "" && (t || i.indexOf(lNe) >= 0 || i.indexOf(cNe) >= 0 || i.indexOf(uNe) >= 0 || i.indexOf(this.options.columnDelimiter) >= 0) && (i = i.replace(new RegExp('"', "g"), '""'), i = `"${i}"`), i;
    }
  }
  const dNe = "csv", gI = {
    [dNe]: hNe
  };
  function fNe(n, e, t) {
    return typeof gI[n] == "function" ? new gI[n](e, t) : null;
  }
  const gNe = "exportFile", pNe = 240;
  class mNe extends Lt {
    static get PLUGIN_KEY() {
      return gNe;
    }
    static get PLUGIN_PRIORITY() {
      return pNe;
    }
    /**
     * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link ExportFile#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return !0;
    }
    /**
     * @typedef ExportOptions
     * @memberof ExportFile
     * @type {object}
     * @property {boolean} [exportHiddenRows=false] Include hidden rows in the exported file.
     * @property {boolean} [exportHiddenColumns=false] Include hidden columns in the exported file.
     * @property {boolean} [columnHeaders=false] Include column headers in the exported file.
     * @property {boolean} [rowHeaders=false] Include row headers in the exported file.
     * @property {string} [columnDelimiter=','] Column delimiter.
     * @property {string} [range=[]] Cell range that will be exported to file.
     */
    /**
     * Exports table data as a string.
     *
     * @param {string} format Export format type eq. `'csv'`.
     * @param {ExportOptions} options Export options.
     * @returns {string}
     */
    exportAsString(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      return this._createTypeFormatter(e, t).export();
    }
    /**
     * Exports table data as a blob object.
     *
     * @param {string} format Export format type eq. `'csv'`.
     * @param {ExportOptions} options Export options.
     * @returns {Blob}
     */
    exportAsBlob(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      return this._createBlob(this._createTypeFormatter(e, t));
    }
    /**
     * Exports table data as a downloadable file.
     *
     * @param {string} format Export format type eq. `'csv'`.
     * @param {ExportOptions} options Export options.
     */
    downloadFile(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      const {
        rootDocument: i,
        rootWindow: r
      } = this.hot, s = this._createTypeFormatter(e, t), o = this._createBlob(s), a = r.URL || r.webkitURL, l = i.createElement("a"), c = `${s.options.filename}.${s.options.fileExtension}`;
      if (l.download !== void 0) {
        const u = a.createObjectURL(o);
        l.style.display = "none", l.setAttribute("href", u), l.setAttribute("download", c), i.body.appendChild(l), l.dispatchEvent(new MouseEvent("click")), i.body.removeChild(l), setTimeout(() => {
          a.revokeObjectURL(u);
        }, 100);
      } else navigator.msSaveOrOpenBlob && navigator.msSaveOrOpenBlob(o, c);
    }
    /**
     * Creates and returns class formatter for specified export type.
     *
     * @private
     * @param {string} format Export format type eq. `'csv'`.
     * @param {ExportOptions} options Export options.
     * @returns {BaseType}
     */
    _createTypeFormatter(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (!gI[e])
        throw new Error(`Export format type "${e}" is not supported.`);
      return fNe(e, new sNe(this.hot), t);
    }
    /**
     * Creates blob object based on provided type formatter class.
     *
     * @private
     * @param {BaseType} typeFormatter The instance of the specyfic formatter/exporter.
     * @returns {Blob}
     */
    _createBlob(e) {
      let t = null;
      return typeof Blob < "u" && (t = new Blob([e.export()], {
        type: `${e.options.mimeType};charset=${e.options.encoding}`
      })), t;
    }
  }
  function hg(n, e, t) {
    return (e = bNe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function bNe(n) {
    var e = vNe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function vNe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class Sy {
    constructor(e, t) {
      let {
        id: i,
        stateless: r = !0
      } = t;
      hg(this, "hot", void 0), hg(this, "id", void 0), hg(this, "elements", []), hg(this, "hidden", !1), hg(this, "stateId", ""), hg(this, "state", void 0), this.hot = e, this.id = i, this.stateId = `Filters.component.${this.id}`, this.state = r ? null : this.hot.columnIndexMapper.registerMap(this.stateId, new G1());
    }
    /**
     * Gets the list of elements from which the component is built.
     *
     * @returns {BaseUI[]}
     */
    getElements() {
      return this.elements;
    }
    /**
     * Reset elements to its initial state.
     */
    reset() {
      z(this.elements, (e) => e.reset());
    }
    /**
     * Hide component.
     */
    hide() {
      this.hidden = !0;
    }
    /**
     * Show component.
     */
    show() {
      this.hidden = !1;
    }
    /**
     * Check if component is hidden.
     *
     * @returns {boolean}
     */
    isHidden() {
      return this.hot === null || this.hidden;
    }
    /**
     * Restores the component state from the given physical column index. The method
     * internally calls the `setState` method. The state then is individually processed
     * by each component.
     *
     * @param {number} physicalColumn The physical column index.
     */
    restoreState(e) {
      this.state && this.setState(this.state.getValueAtIndex(e));
    }
    /**
     * The custom logic for component state restoring.
     */
    setState() {
      throw new Error("The state setting logic is not implemented");
    }
    /**
     * Saves the component state to the given physical column index. The method
     * internally calls the `getState` method, which returns the current state of
     * the component.
     *
     * @param {number} physicalColumn The physical column index.
     */
    saveState(e) {
      this.state && this.state.setValueAtIndex(e, this.getState());
    }
    /**
     * The custom logic for component state gathering (for stateful components).
     */
    getState() {
      throw new Error("The state gathering logic is not implemented");
    }
    /**
     * Destroy element.
     */
    destroy() {
      this.hot.columnIndexMapper.unregisterMap(this.stateId), this.clearLocalHooks(), z(this.elements, (e) => e.destroy()), this.state = null, this.elements = null, this.hot = null;
    }
  }
  qt(Sy, Ki);
  const Cw = {};
  function qu(n, e) {
    if (!Cw[n])
      throw Error(`Filter condition "${n}" does not exist.`);
    const {
      condition: t,
      descriptor: i
    } = Cw[n];
    let r = e;
    return i.inputValuesDecorator && (r = i.inputValuesDecorator(r)), function(s) {
      return t.apply(s.meta.instance, [].concat([s], [r]));
    };
  }
  function xd(n) {
    if (!Cw[n])
      throw Error(`Filter condition "${n}" does not exist.`);
    return Cw[n].descriptor;
  }
  function ci(n, e, t) {
    t.key = n, Cw[n] = {
      condition: e,
      descriptor: t
    };
  }
  const ki = "none";
  function wNe() {
    return !0;
  }
  ci(ki, wNe, {
    name: Y1,
    inputsCount: 0,
    showOperators: !1
  });
  const Tv = "empty";
  function yNe(n) {
    return Wn(n.value);
  }
  ci(Tv, yNe, {
    name: WN,
    inputsCount: 0,
    showOperators: !0
  });
  const OS = "not_empty";
  function CNe(n, e) {
    return !qu(Tv, e)(n);
  }
  ci(OS, CNe, {
    name: jN,
    inputsCount: 0,
    showOperators: !0
  });
  const Mv = "eq";
  function SNe(n, e) {
    let [t] = e;
    return Vn(n.value).toLocaleLowerCase(n.meta.locale) === Vn(t);
  }
  ci(Mv, SNe, {
    name: zN,
    inputsCount: 1,
    showOperators: !0
  });
  const kS = "neq";
  function _Ne(n, e) {
    return !qu(Mv, e)(n);
  }
  ci(kS, _Ne, {
    name: UN,
    inputsCount: 1,
    showOperators: !0
  });
  const MY = "gt";
  function RNe(n, e) {
    let [t] = e, i = t;
    return n.meta.type === "numeric" && (i = parseFloat(i, 10)), n.value > i;
  }
  ci(MY, RNe, {
    name: XN,
    inputsCount: 1,
    showOperators: !0
  });
  const AY = "gte";
  function ENe(n, e) {
    let [t] = e, i = t;
    return n.meta.type === "numeric" && (i = parseFloat(i, 10)), n.value >= i;
  }
  ci(AY, ENe, {
    name: ZN,
    inputsCount: 1,
    showOperators: !0
  });
  const PY = "lt";
  function xNe(n, e) {
    let [t] = e, i = t;
    return n.meta.type === "numeric" && (i = parseFloat(i, 10)), n.value < i;
  }
  ci(PY, xNe, {
    name: QN,
    inputsCount: 1,
    showOperators: !0
  });
  const IY = "lte";
  function TNe(n, e) {
    let [t] = e, i = t;
    return n.meta.type === "numeric" && (i = parseFloat(i, 10)), n.value <= i;
  }
  ci(IY, TNe, {
    name: JN,
    inputsCount: 1,
    showOperators: !0
  });
  const GL = "date_after";
  function MNe(n, e) {
    let [t] = e;
    const i = he(n.value, n.meta.dateFormat), r = he(t, n.meta.dateFormat);
    return !i.isValid() || !r.isValid() ? !1 : i.diff(r) >= 0;
  }
  ci(GL, MNe, {
    name: nL,
    inputsCount: 1,
    showOperators: !0
  });
  const YL = "date_before";
  function ANe(n, e) {
    let [t] = e;
    const i = he(n.value, n.meta.dateFormat), r = he(t, n.meta.dateFormat);
    return !i.isValid() || !r.isValid() ? !1 : i.diff(r) <= 0;
  }
  ci(YL, ANe, {
    name: iL,
    inputsCount: 1,
    showOperators: !0
  });
  const J_ = "between";
  function PNe(n, e) {
    let [t, i] = e, r = t, s = i;
    if (n.meta.type === "numeric") {
      const o = parseFloat(r, 10), a = parseFloat(s, 10);
      r = Math.min(o, a), s = Math.max(o, a);
    } else if (n.meta.type === "date") {
      const o = qu(YL, [s]), a = qu(GL, [r]);
      return o(n) && a(n);
    }
    return n.value >= r && n.value <= s;
  }
  ci(J_, PNe, {
    name: eL,
    inputsCount: 2,
    showOperators: !0
  });
  const OY = "not_between";
  function INe(n, e) {
    return !qu(J_, e)(n);
  }
  ci(OY, INe, {
    name: tL,
    inputsCount: 2,
    showOperators: !0
  });
  const kY = "begins_with";
  function ONe(n, e) {
    let [t] = e;
    return Vn(n.value).toLocaleLowerCase(n.meta.locale).startsWith(Vn(t));
  }
  ci(kY, ONe, {
    name: GN,
    inputsCount: 1,
    showOperators: !0
  });
  const DY = "ends_with";
  function kNe(n, e) {
    let [t] = e;
    return Vn(n.value).toLocaleLowerCase(n.meta.locale).endsWith(Vn(t));
  }
  ci(DY, kNe, {
    name: YN,
    inputsCount: 1,
    showOperators: !0
  });
  const KL = "contains";
  function DNe(n, e) {
    let [t] = e;
    return Vn(n.value).toLocaleLowerCase(n.meta.locale).indexOf(Vn(t)) >= 0;
  }
  ci(KL, DNe, {
    name: KN,
    inputsCount: 1,
    showOperators: !0
  });
  const NY = "not_contains";
  function NNe(n, e) {
    return !qu(KL, e)(n);
  }
  ci(NY, NNe, {
    name: qN,
    inputsCount: 1,
    showOperators: !0
  });
  const LY = "date_tomorrow";
  function LNe(n) {
    const e = he(n.value, n.meta.dateFormat);
    return e.isValid() ? e.isSame(he().subtract(-1, "days").startOf("day"), "d") : !1;
  }
  ci(LY, LNe, {
    name: sL,
    inputsCount: 0
  });
  const HY = "date_today";
  function HNe(n) {
    const e = he(n.value, n.meta.dateFormat);
    return e.isValid() ? e.isSame(he().startOf("day"), "d") : !1;
  }
  ci(HY, HNe, {
    name: rL,
    inputsCount: 0
  });
  const $Y = "date_yesterday";
  function $Ne(n) {
    const e = he(n.value, n.meta.dateFormat);
    return e.isValid() ? e.isSame(he().subtract(1, "days").startOf("day"), "d") : !1;
  }
  ci($Y, $Ne, {
    name: oL,
    inputsCount: 0
  });
  c9();
  function FNe(n, e) {
    let t = n;
    return t === "" && (t = `(${e})`), t;
  }
  const pI = (/* @__PURE__ */ new Set([1])).has(1), BNe = pI && typeof Array.from == "function";
  function _y(n) {
    let e = n;
    return pI && (e = new Set(e)), function(t) {
      let i;
      return pI ? i = e.has(t) : i = !!~e.indexOf(t), i;
    };
  }
  function FY(n) {
    return n ?? "";
  }
  function mI(n) {
    let e = n;
    return BNe ? e = Array.from(new Set(e)) : e = sD(e), e = e.sort((t, i) => typeof t == "number" && typeof i == "number" ? t - i : t === i ? 0 : t > i ? 1 : -1), e;
  }
  function K3(n, e, t, i) {
    const r = [], s = n === e;
    let o;
    return s || (o = _y(e)), z(n, (a) => {
      let l = !1;
      (s || o(a)) && (l = !0);
      const c = {
        checked: l,
        value: a,
        visualValue: FNe(a, t)
      };
      i && i(c), r.push(c);
    }), r;
  }
  const Td = "by_value";
  function VNe(n, e) {
    let [t] = e;
    return t(n.value);
  }
  ci(Td, VNe, {
    name: "By value",
    inputsCount: 0,
    inputValuesDecorator(n) {
      let [e] = n;
      return [_y(e)];
    },
    showOperators: !1
  });
  const Sw = {};
  function WNe(n) {
    if (!Sw[n])
      throw Error(`Operation with id "${n}" does not exist.`);
    const e = Sw[n].func;
    return function(t, i) {
      return e(t, i);
    };
  }
  function jNe(n) {
    return Sw[n].name;
  }
  function qL(n, e, t) {
    Sw[n] = {
      name: e,
      func: t
    };
  }
  const Bu = "conjunction", zNe = cL;
  function UNe(n, e) {
    return n.every((t) => t.func(e));
  }
  qL(Bu, zNe, UNe);
  const eR = "disjunction", GNe = K1;
  function YNe(n, e) {
    return n.some((t) => t.func(e));
  }
  qL(eR, GNe, YNe);
  const XL = "disjunctionWithExtraCondition", KNe = K1;
  function qNe(n, e) {
    if (n.length < 3)
      throw Error("Operation doesn't work on less then three conditions.");
    return n.slice(0, n.length - 1).some((t) => t.func(e)) && n[n.length - 1].func(e);
  }
  qL(XL, KNe, qNe);
  const XNe = "numeric", BY = "text", ZNe = "date", q3 = {
    [XNe]: [ki, ut, Tv, OS, ut, Mv, kS, ut, MY, AY, PY, IY, J_, OY],
    [BY]: [ki, ut, Tv, OS, ut, Mv, kS, ut, kY, DY, ut, KL, NY],
    [ZNe]: [ki, ut, Tv, OS, ut, Mv, kS, ut, YL, GL, J_, ut, LY, HY, $Y]
  };
  function QNe(n) {
    const e = [];
    let t = n;
    return q3[t] || (t = BY), z(q3[t], (i) => {
      let r;
      i === ut ? r = {
        name: ut
      } : r = sa(xd(i)), e.push(r);
    }), e;
  }
  function cb(n, e, t) {
    return (e = JNe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function JNe(n) {
    var e = eLe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function eLe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  const rM = "built", sM = "building", X3 = ["click", "input", "keydown", "keypress", "keyup", "focus", "blur", "change"];
  let Jo = class VY {
    static get DEFAULTS() {
      return sa({
        className: "",
        value: "",
        tagName: "div",
        children: [],
        wrapIt: !0
      });
    }
    /**
     * Instance of Handsontable.
     *
     * @type {Core}
     */
    constructor(e, t) {
      cb(this, "hot", void 0), cb(this, "eventManager", new lo(this)), cb(this, "options", void 0), cb(this, "_element", void 0), cb(this, "buildState", void 0), this.hot = e, this.options = ai(VY.DEFAULTS, t), this._element = this.hot.rootDocument.createElement(this.options.wrapIt ? "div" : this.options.tagName);
    }
    /**
     * Set the element value.
     *
     * @param {*} value Set the component value.
     */
    setValue(e) {
      this.options.value = e, this.update();
    }
    /**
     * Get the element value.
     *
     * @returns {*}
     */
    getValue() {
      return this.options.value;
    }
    /**
     * Get element as a DOM object.
     *
     * @returns {Element}
     */
    get element() {
      return this.buildState === sM ? this._element : this.buildState === rM ? (this.update(), this._element) : (this.buildState = sM, this.build(), this.buildState = rM, this._element);
    }
    /**
     * Check if element was built (built whole DOM structure).
     *
     * @returns {boolean}
     */
    isBuilt() {
      return this.buildState === rM;
    }
    /**
     * Translate value if it is possible. It's checked if value belongs to namespace of translated phrases.
     *
     * @param {*} value Value which will may be translated.
     * @returns {*} Translated value if translation was possible, original value otherwise.
     */
    translateIfPossible(e) {
      return typeof e == "string" && e.startsWith(Nr) ? this.hot.getTranslatedPhrase(e) : e;
    }
    /**
     * Build DOM structure.
     */
    build() {
      const e = (t, i) => {
        this.eventManager.addEventListener(t, i, (r) => this.runLocalHooks(i, r, this));
      };
      if (this.buildState || (this.buildState = sM), this._element.setAttribute("data-hot-input", !0), this.options.tabIndex !== void 0 && this._element.setAttribute("tabindex", this.options.tabIndex), this.options.role !== void 0 && this._element.setAttribute("role", this.options.role), this.options.className && ue(this._element, this.options.className), this.options.children.length)
        z(this.options.children, (t) => this._element.appendChild(t.element));
      else if (this.options.wrapIt) {
        const t = this.hot.rootDocument.createElement(this.options.tagName);
        t.setAttribute("data-hot-input", !0), lt(this.options, (i, r) => {
          t[r] !== void 0 && r !== "className" && r !== "tagName" && r !== "children" && (t[r] = this.translateIfPossible(i));
        }), this._element.appendChild(t), z(X3, (i) => e(t, i));
      } else
        z(X3, (t) => e(this._element, t));
    }
    /**
     * Update DOM structure.
     */
    update() {
    }
    /**
     * Reset to initial state.
     */
    reset() {
      this.options.value = "", this.update();
    }
    /**
     * Show element.
     */
    show() {
      this.element.style.display = "";
    }
    /**
     * Hide element.
     */
    hide() {
      this.element.style.display = "none";
    }
    /**
     * Focus element.
     */
    focus() {
    }
    destroy() {
      this.eventManager.destroy(), this.eventManager = null, this.hot = null, this._element.parentNode && this._element.parentNode.removeChild(this._element), this._element = null;
    }
  };
  qt(Jo, Ki);
  function tLe(n, e) {
    WY(n, e), e.add(n);
  }
  function nLe(n, e, t) {
    WY(n, e), e.set(n, t);
  }
  function WY(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function lC(n, e) {
    return n.get(ZL(n, e));
  }
  function iLe(n, e, t) {
    return n.set(ZL(n, e), t), t;
  }
  function ZL(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var dg = /* @__PURE__ */ new WeakMap(), Z3 = /* @__PURE__ */ new WeakSet();
  class Vu extends Jo {
    static get DEFAULTS() {
      return sa({
        placeholder: "",
        type: "text",
        tagName: "input",
        tabIndex: -1
      });
    }
    /**
     * The reference to the input element.
     *
     * @type {HTMLInputElement}
     */
    constructor(e, t) {
      super(e, ai(Vu.DEFAULTS, t)), tLe(this, Z3), nLe(this, dg, void 0), this.registerHooks();
    }
    /**
     * Register all necessary hooks.
     */
    registerHooks() {
      this.addLocalHook("keyup", (e) => ZL(Z3, this, rLe).call(this, e));
    }
    /**
     * Build DOM structure.
     */
    build() {
      super.build();
      const e = this.hot.rootDocument.createElement("div");
      iLe(dg, this, this._element.firstChild), ue(this._element, "htUIInput"), ue(e, "htUIInputIcon"), this._element.appendChild(e), this.update();
    }
    /**
     * Update element.
     */
    update() {
      this.isBuilt() && (lC(dg, this).type = this.options.type, lC(dg, this).placeholder = this.translateIfPossible(this.options.placeholder), lC(dg, this).value = this.translateIfPossible(this.options.value));
    }
    /**
     * Focus element.
     */
    focus() {
      this.isBuilt() && lC(dg, this).focus();
    }
  }
  function rLe(n) {
    this.options.value = n.target.value;
  }
  function sLe(n, e) {
    jY(n, e), e.add(n);
  }
  function ub(n, e, t) {
    jY(n, e), e.set(n, t);
  }
  function jY(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function fg(n, e, t) {
    return n.set(Av(n, e), t), t;
  }
  function Nn(n, e) {
    return n.get(Av(n, e));
  }
  function Av(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var wi = /* @__PURE__ */ new WeakMap(), cC = /* @__PURE__ */ new WeakMap(), uC = /* @__PURE__ */ new WeakMap(), oM = /* @__PURE__ */ new WeakMap(), hC = /* @__PURE__ */ new WeakMap(), dC = /* @__PURE__ */ new WeakSet();
  class _w extends Jo {
    static get DEFAULTS() {
      return sa({
        className: "htUISelect",
        wrapIt: !1,
        tabIndex: -1
      });
    }
    /**
     * Instance of {@link Menu}.
     *
     * @type {Menu}
     */
    constructor(e, t) {
      super(e, ai(_w.DEFAULTS, t)), sLe(this, dC), ub(this, wi, null), ub(this, cC, []), ub(this, uC, void 0), ub(this, oM, void 0), ub(this, hC, void 0), this.registerHooks();
    }
    /**
     * Gets the instance of the Menu.
     *
     * @returns {Menu}
     */
    getMenu() {
      return Nn(wi, this);
    }
    /**
     * Register all necessary hooks.
     */
    registerHooks() {
      this.addLocalHook("click", () => Av(dC, this, lLe).call(this));
    }
    /**
     * Set options which can be selected in the list.
     *
     * @param {Array} items Array of objects with required keys `key` and `name`.
     */
    setItems(e) {
      fg(cC, this, this.translateNames(e)), Nn(wi, this) && Nn(wi, this).setMenuItems(Nn(cC, this));
    }
    /**
     * Translate names of menu items.
     *
     * @param {Array} items Array of objects with required keys `key` and `name`.
     * @returns {Array} Items with translated `name` keys.
     */
    translateNames(e) {
      return z(e, (t) => {
        t.name = this.translateIfPossible(t.name);
      }), e;
    }
    /**
     * Build DOM structure.
     */
    build() {
      super.build(), fg(wi, this, new tm(this.hot, {
        className: "htSelectUI htFiltersConditionsMenu",
        keepInViewport: !1,
        standalone: !0,
        container: this.options.menuContainer
      })), Nn(wi, this).setMenuItems(Nn(cC, this));
      const e = new Jo(this.hot, {
        className: "htUISelectCaption"
      }), t = new Jo(this.hot, {
        className: "htUISelectDropdown"
      });
      fg(uC, this, e), fg(oM, this, e.element), fg(hC, this, t), this.hot.getSettings().ariaTags && (ze(t.element, [xf()]), ze(this._element, [L7()])), z([e, t], (i) => this._element.appendChild(i.element)), Nn(wi, this).addLocalHook("select", (i) => Av(dC, this, oLe).call(this, i)), Nn(wi, this).addLocalHook("afterClose", () => Av(dC, this, aLe).call(this)), this.update();
    }
    /**
     * Update DOM structure.
     */
    update() {
      if (!this.isBuilt())
        return;
      let e;
      this.options.value ? e = this.options.value.name : e = Nn(wi, this).hot.getTranslatedPhrase(Y1), Nn(oM, this).textContent = e, super.update();
    }
    /**
     * Open select dropdown menu with available options.
     */
    openOptions() {
      const e = this.element.getBoundingClientRect();
      Nn(wi, this) && (Nn(wi, this).open(), Nn(wi, this).setPosition({
        left: this.hot.isLtr() ? e.left - 5 : e.left - 31,
        top: e.top - 1,
        width: e.width,
        height: e.height
      }), Nn(wi, this).getNavigator().toFirstItem(), Nn(wi, this).getKeyboardShortcutsCtrl().addCustomShortcuts([{
        keys: [["Tab"], ["Shift", "Tab"]],
        callback: (t) => {
          this.closeOptions(), this.runLocalHooks("tabKeydown", t);
        }
      }, {
        keys: [["Control/Meta", "A"]],
        callback: () => !1
      }]));
    }
    /**
     * Close select dropdown menu.
     */
    closeOptions() {
      Nn(wi, this) && Nn(wi, this).close();
    }
    /**
     * Focus element.
     */
    focus() {
      this.isBuilt() && this.element.focus();
    }
    /**
     * Destroy instance.
     */
    destroy() {
      Nn(wi, this) && (Nn(wi, this).destroy(), fg(wi, this, null)), Nn(uC, this) && Nn(uC, this).destroy(), Nn(hC, this) && Nn(hC, this).destroy(), super.destroy();
    }
  }
  function oLe(n) {
    n.name !== ut && (this.options.value = n, this.update(), this.runLocalHooks("select", this.options.value));
  }
  function aLe() {
    this.runLocalHooks("afterClose");
  }
  function lLe() {
    this.openOptions();
  }
  function cLe(n, e) {
    uLe(n, e), e.add(n);
  }
  function uLe(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function Q3(n, e, t) {
    return (e = hLe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function hLe(n) {
    var e = dLe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function dLe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function J3(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var aM = /* @__PURE__ */ new WeakSet();
  class bI extends Sy {
    constructor(e, t) {
      super(e, {
        id: t.id,
        stateless: !1
      }), cLe(this, aM), Q3(this, "name", ""), Q3(this, "addSeparator", !1), this.name = t.name, this.addSeparator = t.addSeparator, this.elements.push(new _w(this.hot, {
        menuContainer: t.menuContainer
      })), this.elements.push(new Vu(this.hot, {
        placeholder: pL
      })), this.elements.push(new Vu(this.hot, {
        placeholder: mL
      })), this.registerHooks();
    }
    /**
     * Register all necessary hooks.
     *
     * @private
     */
    registerHooks() {
      this.getSelectElement().addLocalHook("select", (e) => J3(aM, this, fLe).call(this, e)).addLocalHook("afterClose", () => this.runLocalHooks("afterClose")).addLocalHook("tabKeydown", (e) => this.runLocalHooks("selectTabKeydown", e)), z(this.getInputElements(), (e) => {
        e.addLocalHook("keydown", (t) => J3(aM, this, gLe).call(this, t));
      });
    }
    /**
     * Set state of the component.
     *
     * @param {object} value State to restore.
     */
    setState(e) {
      if (this.reset(), !e)
        return;
      const t = sa(e.command);
      t.name.startsWith(Un) && (t.name = this.hot.getTranslatedPhrase(t.name)), this.getSelectElement().setValue(t), z(e.args, (i, r) => {
        if (r > t.inputsCount - 1)
          return !1;
        const s = this.getInputElement(r);
        s.setValue(i), s[t.inputsCount > r ? "show" : "hide"](), r || this.hot._registerTimeout(() => s.focus(), 10);
      });
    }
    /**
     * Export state of the component (get selected filter and filter arguments).
     *
     * @returns {object} Returns object where `command` key keeps used condition filter and `args` key its arguments.
     */
    getState() {
      const e = this.getSelectElement().getValue() || xd(ki), t = [];
      return z(this.getInputElements(), (i, r) => {
        e.inputsCount > r && t.push(i.getValue());
      }), {
        command: e,
        args: t
      };
    }
    /**
     * Update state of component.
     *
     * @param {object} condition The condition object.
     * @param {object} condition.command The command object with condition name as `key` property.
     * @param {Array} condition.args An array of values to compare.
     * @param {number} column Physical column index.
     */
    updateState(e, t) {
      const i = xd(e ? e.name : ki);
      this.state.setValueAtIndex(t, {
        command: i,
        args: e ? e.args : []
      }), e || z(this.getInputElements(), (r) => r.setValue(null));
    }
    /**
     * Get select element.
     *
     * @returns {SelectUI}
     */
    getSelectElement() {
      return this.elements.filter((e) => e instanceof _w)[0];
    }
    /**
     * Get input element.
     *
     * @param {number} index Index an array of elements.
     * @returns {InputUI}
     */
    getInputElement() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
      return this.getInputElements()[e];
    }
    /**
     * Get input elements.
     *
     * @returns {Array}
     */
    getInputElements() {
      return this.elements.filter((e) => e instanceof Vu);
    }
    /**
     * Get menu object descriptor.
     *
     * @returns {object}
     */
    getMenuItemDescriptor() {
      return {
        key: this.id,
        name: this.name,
        isCommand: !1,
        disableSelection: !0,
        hidden: () => this.isHidden(),
        renderer: (e, t, i, r, s, o) => {
          ue(t.parentNode, "htFiltersMenuCondition"), this.addSeparator && ue(t.parentNode, "border");
          const a = this.hot.rootDocument.createElement("div");
          return ue(a, "htFiltersMenuLabel"), a.textContent = o, t.appendChild(a), t.parentElement.hasAttribute("ghost-table") || z(this.elements, (l) => t.appendChild(l.element)), t;
        }
      };
    }
    /**
     * Reset elements to their initial state.
     */
    reset() {
      const e = this.hot.getPlugin("filters").getSelectedColumn();
      let t = [xd(ki)];
      if (e !== null) {
        const {
          visualIndex: i
        } = e;
        t = QNe(this.hot.getDataType(0, i, this.hot.countRows(), i));
      }
      z(this.getInputElements(), (i) => i.hide()), this.getSelectElement().setItems(t), super.reset(), this.getSelectElement().setValue(t[0]);
    }
  }
  function fLe(n) {
    z(this.getInputElements(), (e, t) => {
      e[n.inputsCount > t ? "show" : "hide"](), t === 0 && this.hot._registerTimeout(() => e.focus(), 10);
    }), this.runLocalHooks("change", n);
  }
  function gLe(n) {
    Zp(n.keyCode, "ESCAPE") && (this.runLocalHooks("cancel"), bo(n));
  }
  function eW(n, e, t) {
    pLe(n, e), e.set(n, t);
  }
  function pLe(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function hb(n, e) {
    return n.get(zY(n, e));
  }
  function tW(n, e, t) {
    return n.set(zY(n, e), t), t;
  }
  function zY(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var gg = /* @__PURE__ */ new WeakMap(), lM = /* @__PURE__ */ new WeakMap();
  class tR extends Jo {
    static get DEFAULTS() {
      return sa({
        type: "radio",
        tagName: "input",
        className: "htUIRadio",
        label: {}
      });
    }
    /**
     * The reference to the input element.
     *
     * @type {HTMLInputElement}
     */
    constructor(e, t) {
      super(e, ai(tR.DEFAULTS, t)), eW(this, gg, void 0), eW(this, lM, void 0);
    }
    /**
     * Build DOM structure.
     */
    build() {
      super.build();
      const e = this.hot.rootDocument.createElement("label");
      e.textContent = this.translateIfPossible(this.options.label.textContent), e.htmlFor = this.translateIfPossible(this.options.label.htmlFor), tW(lM, this, e), tW(gg, this, this._element.firstChild), hb(gg, this).checked = this.options.checked, this._element.appendChild(e), this.update();
    }
    /**
     * Update element.
     */
    update() {
      this.isBuilt() && (hb(lM, this).textContent = this.translateIfPossible(this.options.label.textContent));
    }
    /**
     * Check if radio button is checked.
     *
     * @returns {boolean}
     */
    isChecked() {
      return this.isBuilt() ? hb(gg, this).checked : !1;
    }
    /**
     * Set input checked attribute.
     *
     * @param {boolean} value Set the component state.
     */
    setChecked() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;
      this.isBuilt() && (hb(gg, this).checked = e);
    }
    /**
     * Focus element.
     */
    focus() {
      this.isBuilt() && hb(gg, this).focus();
    }
  }
  function mLe(n, e) {
    bLe(n, e), e.add(n);
  }
  function bLe(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function vLe(n, e, t) {
    return (e = wLe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function wLe(n) {
    var e = yLe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function yLe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function CLe(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  const nW = 0;
  var iW = /* @__PURE__ */ new WeakSet();
  class SLe extends Sy {
    constructor(e, t) {
      super(e, {
        id: t.id,
        stateless: !1
      }), mLe(this, iW), vLe(this, "name", ""), this.name = t.name, this.buildOperatorsElement();
    }
    /**
     * Get menu object descriptor.
     *
     * @returns {object}
     */
    getMenuItemDescriptor() {
      return {
        key: this.id,
        name: this.name,
        isCommand: !1,
        disableSelection: !0,
        hidden: () => this.isHidden(),
        renderer: (e, t) => (ue(t.parentNode, "htFiltersMenuOperators"), z(this.elements, (i) => t.appendChild(i.element)), t)
      };
    }
    /**
     * Add RadioInputUI elements to component.
     *
     * @private
     */
    buildOperatorsElement() {
      const e = [Bu, eR];
      z(e, (t) => {
        const i = new tR(this.hot, {
          name: "operator",
          label: {
            htmlFor: t,
            textContent: jNe(t)
          },
          value: t,
          checked: t === e[nW],
          id: t
        });
        i.addLocalHook("change", (r) => CLe(iW, this, _Le).call(this, r)), this.elements.push(i);
      });
    }
    /**
     * Set state of operators component to check radio input at specific `index`.
     *
     * @param {number} searchedIndex Index of radio input to check.
     */
    setChecked(e) {
      if (this.elements.length < e)
        throw Error(Kt`Radio button with index ${e} doesn't exist.`);
      z(this.elements, (t, i) => {
        t.setChecked(i === e);
      });
    }
    /**
     * Get `id` of active operator.
     *
     * @returns {string}
     */
    getActiveOperationId() {
      const e = this.elements.find((t) => t instanceof tR && t.isChecked());
      return e ? e.getValue() : Bu;
    }
    /**
     * Export state of the component (get selected operator).
     *
     * @returns {string} Returns `id` of selected operator.
     */
    getState() {
      return this.getActiveOperationId();
    }
    /**
     * Set state of the component.
     *
     * @param {object} value State to restore.
     */
    setState(e) {
      this.reset(), e && this.getActiveOperationId() !== e && z(this.elements, (t) => {
        t.setChecked(t.getValue() === e);
      });
    }
    /**
     * Update state of component.
     *
     * @param {string} [operationId='conjunction'] Id of selected operation.
     * @param {number} column Physical column index.
     */
    updateState() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : Bu, t = arguments.length > 1 ? arguments[1] : void 0, i = e;
      i === XL && (i = eR), this.state.setValueAtIndex(t, i);
    }
    /**
     * Reset elements to their initial state.
     */
    reset() {
      this.setChecked(nW);
    }
  }
  function _Le(n) {
    this.setState(n.target.value);
  }
  function RLe(n, e, t) {
    ELe(n, e), e.set(n, t);
  }
  function ELe(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function cM(n, e) {
    return n.get(UY(n, e));
  }
  function xLe(n, e, t) {
    return n.set(UY(n, e), t), t;
  }
  function UY(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var db = /* @__PURE__ */ new WeakMap();
  class Rw extends Jo {
    static get DEFAULTS() {
      return sa({
        href: "#",
        tagName: "a",
        tabIndex: -1,
        role: "button"
      });
    }
    /**
     * The reference to the link element.
     *
     * @type {HTMLLinkElement}
     */
    constructor(e, t) {
      super(e, ai(Rw.DEFAULTS, t)), RLe(this, db, void 0);
    }
    /**
     * Build DOM structure.
     */
    build() {
      super.build(), xLe(db, this, this._element.firstChild);
    }
    /**
     * Update element.
     */
    update() {
      this.isBuilt() && (cM(db, this).textContent = this.translateIfPossible(this.options.textContent));
    }
    /**
     * Focus element.
     */
    focus() {
      this.isBuilt() && cM(db, this).focus();
    }
    /**
     * Activate the element.
     */
    activate() {
      cM(db, this).click();
    }
  }
  function TLe(n, e) {
    GY(n, e), e.add(n);
  }
  function pg(n, e, t) {
    GY(n, e), e.set(n, t);
  }
  function GY(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function rt(n, e) {
    return n.get(Kg(n, e));
  }
  function Io(n, e, t) {
    return n.set(Kg(n, e), t), t;
  }
  function Kg(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  const rW = "multipleSelect.itemBox";
  var Fo = /* @__PURE__ */ new WeakMap(), ii = /* @__PURE__ */ new WeakMap(), uM = /* @__PURE__ */ new WeakMap(), Hl = /* @__PURE__ */ new WeakMap(), eu = /* @__PURE__ */ new WeakMap(), tu = /* @__PURE__ */ new WeakMap(), fb = /* @__PURE__ */ new WeakSet();
  class Ew extends Jo {
    static get DEFAULTS() {
      return sa({
        className: "htUIMultipleSelect",
        value: []
      });
    }
    /**
     * List of available select options.
     *
     * @type {Array}
     */
    constructor(e, t) {
      super(e, ai(Ew.DEFAULTS, t)), TLe(this, fb), pg(this, Fo, []), pg(this, ii, void 0), pg(this, uM, void 0), pg(this, Hl, void 0), pg(this, eu, void 0), pg(this, tu, void 0), Io(Hl, this, new Vu(this.hot, {
        placeholder: gL,
        className: "htUIMultipleSelectSearch"
      })), Io(eu, this, new Rw(this.hot, {
        textContent: uL,
        className: "htUISelectAll"
      })), Io(tu, this, new Rw(this.hot, {
        textContent: hL,
        className: "htUIClearAll"
      })), this.registerHooks();
    }
    /**
     * Gets the instance of the internal Handsontable that acts here as a listbox component.
     *
     * @returns {Handsontable}
     */
    getItemsBox() {
      return rt(ii, this);
    }
    /**
     * Register all necessary hooks.
     */
    registerHooks() {
      rt(Hl, this).addLocalHook("keydown", (e) => Kg(fb, this, ALe).call(this, e)), rt(Hl, this).addLocalHook("input", (e) => Kg(fb, this, MLe).call(this, e)), rt(eu, this).addLocalHook("click", (e) => Kg(fb, this, PLe).call(this, e)), rt(tu, this).addLocalHook("click", (e) => Kg(fb, this, ILe).call(this, e));
    }
    /**
     * Set available options.
     *
     * @param {Array} items Array of objects with `checked` and `label` property.
     */
    setItems(e) {
      var t;
      Io(Fo, this, e), (t = rt(ii, this)) === null || t === void 0 || t.loadData(rt(Fo, this));
    }
    /**
     * Set a locale for the component.
     *
     * @param {string} locale Locale used for filter actions performed on data, ie. `en-US`.
     */
    setLocale(e) {
      Io(uM, this, e);
    }
    /**
     * Get a locale for the component.
     *
     * @returns {string}
     */
    getLocale() {
      return rt(uM, this);
    }
    /**
     * Get all available options.
     *
     * @returns {Array}
     */
    getItems() {
      return [...rt(Fo, this)];
    }
    /**
     * Get element value.
     *
     * @returns {Array} Array of selected values.
     */
    getValue() {
      return kLe(rt(Fo, this));
    }
    /**
     * Gets the instance of the search input element.
     *
     * @returns {InputUI}
     */
    getSearchInputElement() {
      return rt(Hl, this);
    }
    /**
     * Gets the instance of the "select all" link element.
     *
     * @returns {LinkUI}
     */
    getSelectAllElement() {
      return rt(eu, this);
    }
    /**
     * Gets the instance of the "clear" link element.
     *
     * @returns {LinkUI}
     */
    getClearAllElement() {
      return rt(tu, this);
    }
    /**
     * Check if all values listed in element are selected.
     *
     * @returns {boolean}
     */
    isSelectedAllValues() {
      return rt(Fo, this).length === this.getValue().length;
    }
    /**
     * Build DOM structure.
     */
    build() {
      super.build();
      const {
        rootDocument: e
      } = this.hot, t = e.createElement("div"), i = new Jo(this.hot, {
        className: "htUISelectionControls",
        children: [rt(eu, this), rt(tu, this)]
      });
      this._element.appendChild(rt(Hl, this).element), this._element.appendChild(i.element), this._element.appendChild(t);
      const r = (s) => {
        var o;
        if (!this._element)
          return;
        (o = rt(ii, this)) === null || o === void 0 || o.destroy(), ue(s, "htUIMultipleSelectHot"), Io(ii, this, new this.hot.constructor(s, {
          data: rt(Fo, this),
          columns: [{
            data: "checked",
            type: "checkbox",
            label: {
              property: "visualValue",
              position: "after"
            }
          }],
          beforeRenderer: (c, u, h, d, f, g) => {
            c.title = g.instance.getDataAtRowProp(u, g.label.property);
          },
          afterListen: () => {
            this.runLocalHooks("focus", this);
          },
          beforeOnCellMouseUp: () => {
            rt(ii, this).listen();
          },
          colWidths: () => rt(ii, this).container.scrollWidth - xi(e),
          maxCols: 1,
          autoWrapCol: !0,
          height: 110,
          copyPaste: !1,
          disableVisualSelection: "area",
          fillHandle: !1,
          fragmentSelection: "cell",
          tabMoves: {
            row: 1,
            col: 0
          },
          layoutDirection: this.hot.isRtl() ? "rtl" : "ltr"
        })), rt(ii, this).init();
        const l = rt(ii, this).getShortcutManager().getContext("grid");
        l.removeShortcutsByKeys(["Tab"]), l.removeShortcutsByKeys(["Shift", "Tab"]), l.addShortcut({
          keys: [["Escape"]],
          callback: (c) => {
            this.runLocalHooks("keydown", c, this);
          },
          group: rW
        }), l.addShortcut({
          keys: [["Tab"], ["Shift", "Tab"]],
          callback: (c) => {
            rt(ii, this).deselectCell(), this.runLocalHooks("keydown", c, this), this.runLocalHooks("listTabKeydown", c, this);
          },
          group: rW
        });
      };
      r(t), this.hot._registerTimeout(() => r(t), 100);
    }
    /**
     * Focus element.
     */
    focus() {
      this.isBuilt() && rt(ii, this).listen();
    }
    /**
     * Reset DOM structure.
     */
    reset() {
      rt(Hl, this).reset(), rt(eu, this).reset(), rt(tu, this).reset();
    }
    /**
     * Update DOM structure.
     */
    update() {
      this.isBuilt() && (rt(ii, this).loadData(OLe(rt(Fo, this), this.options.value)), super.update());
    }
    /**
     * Destroy instance.
     */
    destroy() {
      var e;
      (e = rt(ii, this)) === null || e === void 0 || e.destroy(), rt(Hl, this).destroy(), rt(tu, this).destroy(), rt(eu, this).destroy(), Io(Hl, this, null), Io(tu, this, null), Io(eu, this, null), Io(ii, this, null), Io(Fo, this, null), super.destroy();
    }
  }
  function MLe(n) {
    const e = n.target.value.toLocaleLowerCase(this.getLocale());
    let t;
    e === "" ? t = [...rt(Fo, this)] : t = rt(Fo, this).filter((i) => `${i.value}`.toLocaleLowerCase(this.getLocale()).indexOf(e) >= 0), rt(ii, this).loadData(t);
  }
  function ALe(n) {
    this.runLocalHooks("keydown", n, this), wD(Zp, n.keyCode)("ARROW_DOWN") && (n.preventDefault(), bo(n), rt(ii, this).listen(), rt(ii, this).selectCell(0, 0));
  }
  function PLe(n) {
    const e = [];
    n.preventDefault(), rt(ii, this).getSourceData().forEach((t, i) => {
      t.checked = !0, e.push(QD(t, i)[0]);
    }), rt(ii, this).setSourceDataAtCell(e);
  }
  function ILe(n) {
    const e = [];
    n.preventDefault(), rt(ii, this).getSourceData().forEach((t, i) => {
      t.checked = !1, e.push(QD(t, i)[0]);
    }), rt(ii, this).setSourceDataAtCell(e);
  }
  function OLe(n, e) {
    const t = _y(e);
    return n.map((i) => (i.checked = t(i.value), i));
  }
  function kLe(n) {
    const e = [];
    return n.forEach((t) => {
      t.checked && e.push(t.value);
    }), e;
  }
  function DLe(n, e) {
    NLe(n, e), e.add(n);
  }
  function NLe(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function LLe(n, e, t) {
    return (e = HLe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function HLe(n) {
    var e = $Le(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function $Le(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function fC(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var gb = /* @__PURE__ */ new WeakSet();
  class FLe extends Sy {
    constructor(e, t) {
      super(e, {
        id: t.id,
        stateless: !1
      }), DLe(this, gb), LLe(this, "name", ""), this.name = t.name, this.elements.push(new Ew(this.hot)), this.registerHooks();
    }
    /**
     * Register all necessary hooks.
     *
     * @private
     */
    registerHooks() {
      this.getMultipleSelectElement().addLocalHook("keydown", (e) => fC(gb, this, BLe).call(this, e)).addLocalHook("listTabKeydown", (e) => this.runLocalHooks("listTabKeydown", e)), this.hot.addHook("modifyFiltersMultiSelectValue", (e, t) => fC(gb, this, VLe).call(this, e, t));
    }
    /**
     * Gets the list of elements from which the component is built.
     *
     * @returns {BaseUI[]}
     */
    getElements() {
      const e = this.getMultipleSelectElement();
      return [e.getSearchInputElement(), e.getSelectAllElement(), e.getClearAllElement(), this.getMultipleSelectElement()];
    }
    /**
     * Set state of the component.
     *
     * @param {object} value The component value.
     */
    setState(e) {
      if (this.reset(), e && e.command.key === Td) {
        const t = this.getMultipleSelectElement();
        t.setItems(e.itemsSnapshot), t.setValue(e.args[0]), t.setLocale(e.locale);
      }
    }
    /**
     * Export state of the component (get selected filter and filter arguments).
     *
     * @returns {object} Returns object where `command` key keeps used condition filter and `args` key its arguments.
     */
    getState() {
      const e = this.getMultipleSelectElement(), t = e.getItems();
      return {
        command: {
          key: e.isSelectedAllValues() || !t.length ? ki : Td
        },
        args: [e.getValue()],
        itemsSnapshot: t
      };
    }
    /**
     * Update state of component.
     *
     * @param {object} stateInfo Information about state containing stack of edited column,
     * stack of dependent conditions, data factory and optional condition arguments change. It's described by object containing keys:
     * `editedConditionStack`, `dependentConditionStacks`, `visibleDataFactory` and `conditionArgsChange`.
     */
    updateState(e) {
      const t = (i, r, s, o, a) => {
        const [l] = xc(r, (h) => h.name === Td), c = {}, u = this.hot.getTranslatedPhrase(j_);
        if (l) {
          const h = o(i, a), d = mt(h, (y) => y.value), f = new Map(h.map((y) => [y.value, this.hot.getCellMeta(y.meta.visualRow, y.meta.visualCol)])), g = mI(d);
          s && (l.args[0] = s);
          const p = [], m = K3(g, l.args[0], u, (y) => {
            y.checked && p.push(y.value), fC(gb, this, sW).call(this, y, f);
          }), v = e.editedConditionStack.column;
          c.locale = this.hot.getCellMeta(0, v).locale, c.args = [p], c.command = xd(Td), c.itemsSnapshot = m;
        } else
          c.args = [], c.command = xd(ki);
        this.state.setValueAtIndex(i, c);
      };
      t(e.editedConditionStack.column, e.editedConditionStack.conditions, e.conditionArgsChange, e.filteredRowsFactory), e.dependentConditionStacks.length && t(e.dependentConditionStacks[0].column, e.dependentConditionStacks[0].conditions, e.conditionArgsChange, e.filteredRowsFactory, e.editedConditionStack);
    }
    /**
     * Get multiple select element.
     *
     * @returns {MultipleSelectUI}
     */
    getMultipleSelectElement() {
      return this.elements.filter((e) => e instanceof Ew)[0];
    }
    /**
     * Get object descriptor for menu item entry.
     *
     * @returns {object}
     */
    getMenuItemDescriptor() {
      return {
        key: this.id,
        name: this.name,
        isCommand: !1,
        disableSelection: !0,
        hidden: () => this.isHidden(),
        renderer: (e, t, i, r, s, o) => {
          ue(t.parentNode, "htFiltersMenuValue");
          const a = this.hot.rootDocument.createElement("div");
          return ue(a, "htFiltersMenuLabel"), a.textContent = o, t.appendChild(a), t.parentElement.hasAttribute("ghost-table") || z(this.elements, (l) => t.appendChild(l.element)), t;
        }
      };
    }
    /**
     * Reset elements to their initial state.
     */
    reset() {
      const e = this.hot.getTranslatedPhrase(j_), t = this._getColumnVisibleValues(), i = t.map((l) => l.value), r = new Map(t.map((l) => [l.value, l.meta])), s = mI(i), o = K3(s, s, e, (l) => {
        fC(gb, this, sW).call(this, l, r);
      });
      this.getMultipleSelectElement().setItems(o), super.reset(), this.getMultipleSelectElement().setValue(s);
      const a = this.hot.getPlugin("filters").getSelectedColumn();
      a !== null && this.getMultipleSelectElement().setLocale(this.hot.getCellMeta(0, a.visualIndex).locale);
    }
    /**
     * Get data for currently selected column.
     *
     * @returns {Array}
     * @private
     */
    _getColumnVisibleValues() {
      const e = this.hot.getPlugin("filters").getSelectedColumn();
      return e === null ? [] : mt(this.hot.getDataAtCol(e.visualIndex), (t, i) => ({
        value: FY(t),
        meta: this.hot.getCellMeta(i, e.visualIndex)
      }));
    }
  }
  function BLe(n) {
    Zp(n.keyCode, "ESCAPE") && (this.runLocalHooks("cancel"), bo(n));
  }
  function sW(n, e) {
    this.hot.hasHook("modifyFiltersMultiSelectValue") && (n.visualValue = this.hot.runHooks("modifyFiltersMultiSelectValue", n.visualValue, e.get(n.value)));
  }
  function VLe(n, e) {
    switch (e.type) {
      case "numeric":
        return FG(n, e);
      default:
        return n;
    }
  }
  var YY;
  function WLe(n, e) {
    jLe(n, e), e.add(n);
  }
  function jLe(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function zLe(n, e, t) {
    return (e = ULe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function ULe(n) {
    var e = GLe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function GLe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function YLe(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var oW = /* @__PURE__ */ new WeakSet();
  class xw extends Sy {
    static get BUTTON_OK() {
      return "ok";
    }
    static get BUTTON_CANCEL() {
      return "cancel";
    }
    constructor(e, t) {
      super(e, {
        id: t.id,
        stateless: !0
      }), WLe(this, oW), zLe(this, "name", ""), this.name = t.name, this.elements.push(new Vu(this.hot, {
        type: "button",
        value: dL,
        className: "htUIButton htUIButtonOK",
        identifier: xw.BUTTON_OK
      })), this.elements.push(new Vu(this.hot, {
        type: "button",
        value: fL,
        className: "htUIButton htUIButtonCancel",
        identifier: xw.BUTTON_CANCEL
      })), this.registerHooks();
    }
    /**
     * Register all necessary hooks.
     *
     * @private
     */
    registerHooks() {
      z(this.elements, (e) => {
        e.addLocalHook("click", (t, i) => YLe(oW, this, KLe).call(this, t, i));
      });
    }
    /**
     * Get menu object descriptor.
     *
     * @returns {object}
     */
    getMenuItemDescriptor() {
      return {
        key: this.id,
        name: this.name,
        isCommand: !1,
        disableSelection: !0,
        hidden: () => this.isHidden(),
        renderer: (e, t) => (ue(t.parentNode, "htFiltersMenuActionBar"), z(this.elements, (i) => t.appendChild(i.element)), t)
      };
    }
    /**
     * Fire accept event.
     */
    accept() {
      this.runLocalHooks("accept");
    }
    /**
     * Fire cancel event.
     */
    cancel() {
      this.runLocalHooks("cancel");
    }
  }
  YY = xw;
  function KLe(n, e) {
    e.options.identifier === YY.BUTTON_OK ? this.accept() : this.cancel();
  }
  function gC(n, e, t) {
    return (e = qLe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function qLe(n) {
    var e = XLe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function XLe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  const aW = "ConditionCollection.filteringStates";
  class QL {
    constructor(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
      gC(this, "hot", void 0), gC(this, "isMapRegistrable", void 0), gC(this, "filteringStates", new G1()), gC(this, "previousConditionStack", null), this.hot = e, this.isMapRegistrable = t, this.isMapRegistrable === !0 ? this.hot.columnIndexMapper.registerMap(aW, this.filteringStates) : this.filteringStates.init(this.hot.columnIndexMapper.getNumberOfIndexes());
    }
    /**
     * Check if condition collection is empty (so no needed to filter data).
     *
     * @returns {boolean}
     */
    isEmpty() {
      return this.getFilteredColumns().length === 0;
    }
    /**
     * Check if value is matched to the criteria of conditions chain.
     *
     * @param {object} value Object with `value` and `meta` keys.
     * @param {number} column The physical column index.
     * @returns {boolean}
     */
    isMatch(e, t) {
      var i;
      const r = this.filteringStates.getValueAtIndex(t), s = (i = r == null ? void 0 : r.conditions) !== null && i !== void 0 ? i : [], o = r == null ? void 0 : r.operation;
      return this.isMatchInConditions(s, e, o);
    }
    /**
     * Check if the value is matches the conditions.
     *
     * @param {Array} conditions List of conditions.
     * @param {object} value Object with `value` and `meta` keys.
     * @param {string} [operationType='conjunction'] Type of conditions operation.
     * @returns {boolean}
     */
    isMatchInConditions(e, t) {
      let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : Bu;
      return e.length ? WNe(i)(e, t) : !0;
    }
    /**
     * Add condition to the collection.
     *
     * @param {number} column The physical column index.
     * @param {object} conditionDefinition Object with keys:
     *  * `command` Object, Command object with condition name as `key` property.
     *  * `args` Array, Condition arguments.
     * @param {string} [operation='conjunction'] Type of conditions operation.
     * @param {number} [position] Position to which condition will be added. When argument is undefined
     * the condition will be processed as the last condition.
     * @fires ConditionCollection#beforeAdd
     * @fires ConditionCollection#afterAdd
     */
    addCondition(e, t) {
      let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : Bu, r = arguments.length > 3 ? arguments[3] : void 0;
      const s = this.hot.getCellMeta(0, e).locale, o = mt(t.args, (u) => typeof u == "string" ? u.toLocaleLowerCase(s) : u), a = t.name || t.command.key;
      this.previousConditionStack === null && this.setPreviousConditionStack(this.exportAllConditions()), this.runLocalHooks("beforeAdd", e);
      const l = this.getOperation(e);
      if (l) {
        if (l !== i)
          throw Error(Kt`The column of index ${e} has been already applied with a \`${l}\`\x20
        filter operation. Use \`removeConditions\` to clear the current conditions and then add new ones.\x20
        Mind that you cannot mix different types of operations (for instance, if you use \`conjunction\`,\x20
        use it consequently for a particular column).`);
      } else if (dn(Sw[i]))
        throw new Error(Kt`Unexpected operation named \`${i}\`. Possible ones are\x20
        \`disjunction\` and \`conjunction\`.`);
      const c = this.getConditions(e);
      c.length === 0 ? this.filteringStates.setValueAtIndex(e, {
        operation: i,
        conditions: [{
          name: a,
          args: o,
          func: qu(a, o)
        }]
      }, r) : c.push({
        name: a,
        args: o,
        func: qu(a, o)
      }), this.runLocalHooks("afterAdd", e);
    }
    /**
     * Get all added conditions from the collection at specified column index.
     *
     * @param {number} column The physical column index.
     * @returns {Array} Returns conditions collection as an array.
     */
    getConditions(e) {
      var t, i;
      return (t = (i = this.filteringStates.getValueAtIndex(e)) === null || i === void 0 ? void 0 : i.conditions) !== null && t !== void 0 ? t : [];
    }
    /**
     * Get operation for particular column.
     *
     * @param {number} column The physical column index.
     * @returns {string|undefined}
     */
    getOperation(e) {
      var t;
      return (t = this.filteringStates.getValueAtIndex(e)) === null || t === void 0 ? void 0 : t.operation;
    }
    /**
     * Get all filtered physical columns in the order in which actions are performed.
     *
     * @returns {Array}
     */
    getFilteredColumns() {
      return this.filteringStates.getEntries().map((e) => {
        let [t] = e;
        return t;
      });
    }
    /**
     * Gets position in the filtering states stack for the specific column.
     *
     * @param {number} column The physical column index.
     * @returns {number} Returns -1 when the column doesn't exist in the stack.
     */
    getColumnStackPosition(e) {
      return this.getFilteredColumns().indexOf(e);
    }
    /**
     * Export all previously added conditions.
     *
     * @returns {Array}
     */
    exportAllConditions() {
      return li(this.filteringStates.getEntries(), (e, t) => {
        let [i, {
          operation: r,
          conditions: s
        }] = t;
        return e.push({
          column: i,
          operation: r,
          conditions: mt(s, (o) => {
            let {
              name: a,
              args: l
            } = o;
            return {
              name: a,
              args: l
            };
          })
        }), e;
      }, []);
    }
    /**
     * Import conditions to the collection.
     *
     * @param {Array} conditions The collection of the conditions.
     */
    importAllConditions(e) {
      this.clean(), z(e, (t) => {
        z(t.conditions, (i) => this.addCondition(t.column, i));
      });
    }
    /**
     * Remove conditions at given column index.
     *
     * @param {number} column The physical column index.
     * @fires ConditionCollection#beforeRemove
     * @fires ConditionCollection#afterRemove
     */
    removeConditions(e) {
      this.setPreviousConditionStack(this.exportAllConditions()), this.runLocalHooks("beforeRemove", e), this.filteringStates.clearValue(e), this.runLocalHooks("afterRemove", e);
    }
    /**
     * Clean all conditions collection and reset order stack.
     *
     * @fires ConditionCollection#beforeClean
     * @fires ConditionCollection#afterClean
     */
    clean() {
      this.runLocalHooks("beforeClean"), this.filteringStates.clear(), this.runLocalHooks("afterClean");
    }
    /**
     * Check if at least one condition was added at specified column index. And if second parameter is passed then additionally
     * check if condition exists under its name.
     *
     * @param {number} column The physical column index.
     * @param {string} [name] Condition name.
     * @returns {boolean}
     */
    hasConditions(e, t) {
      const i = this.getConditions(e);
      return t ? i.some((r) => r.name === t) : i.length > 0;
    }
    /**
     * Updates the `previousConditionStack` property with the provided stack.
     * It is used to store the current conditions before they are modified, allowing for undo operations.
     *
     * @param {Array|null} previousConditionStack The stack of previous conditions.
     */
    setPreviousConditionStack(e) {
      this.previousConditionStack = e;
    }
    /**
     * Destroy object.
     */
    destroy() {
      this.isMapRegistrable && this.hot.columnIndexMapper.unregisterMap(aW), this.filteringStates = null, this.clearLocalHooks();
    }
  }
  qt(QL, Ki);
  function lW(n, e, t) {
    return (e = ZLe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function ZLe(n) {
    var e = QLe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function QLe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class KY {
    constructor(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : () => [];
      lW(this, "conditionCollection", void 0), lW(this, "columnDataFactory", void 0), this.conditionCollection = e, this.columnDataFactory = t;
    }
    /**
     * Filter data based on the conditions collection.
     *
     * @returns {Array}
     */
    filter() {
      let e = [];
      return z(this.conditionCollection.getFilteredColumns(), (t, i) => {
        let r = this.columnDataFactory(t);
        i && (r = this._getIntersectData(r, e)), e = this.filterByColumn(t, r);
      }), e;
    }
    /**
     * Filter data based on specified physical column index.
     *
     * @param {number} column The physical column index.
     * @param {Array} [dataSource] Data source as array of objects with `value` and `meta` keys (e.g. `{value: 'foo', meta: {}}`).
     * @returns {Array} Returns filtered data.
     */
    filterByColumn(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      const i = [];
      return z(t, (r) => {
        r !== void 0 && this.conditionCollection.isMatch(r, e) && i.push(r);
      }), i;
    }
    /**
     * Intersect data.
     *
     * @private
     * @param {Array} data The data to intersect.
     * @param {Array} needles The collection intersected rows with the data.
     * @returns {Array}
     */
    _getIntersectData(e, t) {
      const i = [];
      return z(t, (r) => {
        const s = r.meta.visualRow;
        e[s] !== void 0 && (i[s] = e[s]);
      }), i;
    }
  }
  function JLe(n, e) {
    eHe(n, e), e.add(n);
  }
  function eHe(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function Wh(n, e, t) {
    return (e = tHe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function tHe(n) {
    var e = nHe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function nHe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function hM(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var pC = /* @__PURE__ */ new WeakSet();
  class qY {
    constructor(e, t) {
      let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : () => [];
      JLe(this, pC), Wh(this, "hot", void 0), Wh(this, "conditionCollection", void 0), Wh(this, "columnDataFactory", void 0), Wh(this, "changes", []), Wh(this, "grouping", !1), Wh(this, "latestEditedColumnPosition", -1), Wh(this, "latestOrderStack", []), this.hot = e, this.conditionCollection = t, this.columnDataFactory = i, this.conditionCollection.addLocalHook("beforeRemove", (r) => hM(pC, this, iHe).call(this, r)), this.conditionCollection.addLocalHook("afterRemove", (r) => this.updateStatesAtColumn(r)), this.conditionCollection.addLocalHook("afterAdd", (r) => this.updateStatesAtColumn(r)), this.conditionCollection.addLocalHook("beforeClean", () => hM(pC, this, rHe).call(this)), this.conditionCollection.addLocalHook("afterClean", () => hM(pC, this, sHe).call(this));
    }
    /**
     * Enable grouping changes. Grouping is helpful in situations when a lot of conditions is added in one moment. Instead of
     * trigger `update` hook for every condition by adding/removing you can group this changes and call `flush` method to trigger
     * it once.
     */
    groupChanges() {
      this.grouping = !0;
    }
    /**
     * Flush all collected changes. This trigger `update` hook for every previously collected change from condition collection.
     */
    flush() {
      this.grouping = !1, z(this.changes, (e) => {
        this.updateStatesAtColumn(e);
      }), this.changes.length = 0;
    }
    /**
     * Update all related states which should be changed after invoking changes applied to current column.
     *
     * @param {number} column The column index.
     * @param {object} conditionArgsChange Object describing condition changes which can be handled by filters on `update` hook.
     * It contains keys `conditionKey` and `conditionValue` which refers to change specified key of condition to specified value
     * based on referred keys.
     */
    updateStatesAtColumn(e, t) {
      var i = this;
      if (this.grouping) {
        this.changes.indexOf(e) === -1 && this.changes.push(e);
        return;
      }
      const r = this.conditionCollection.exportAllConditions();
      let s = this.conditionCollection.getColumnStackPosition(e);
      s === -1 && (s = this.latestEditedColumnPosition);
      const o = r.slice(0, s), a = r.slice(s);
      a.length && a[0].column === e && a.shift();
      const l = n9(function(u, h) {
        let d = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
        const f = new QL(i.hot, !1), g = [].concat(u, d);
        f.importAllConditions(g);
        const p = i.columnDataFactory(h);
        let m;
        f.isEmpty() ? m = p : m = new KY(f, (y) => i.columnDataFactory(y)).filter(), m = mt(m, (y) => y.meta.visualRow);
        const v = _y(m);
        return f.destroy(), xc(p, (y) => v(y.meta.visualRow));
      })(o), c = [].concat(this.conditionCollection.getConditions(e));
      this.runLocalHooks("update", {
        editedConditionStack: {
          column: e,
          conditions: c
        },
        dependentConditionStacks: a,
        filteredRowsFactory: l,
        conditionArgsChange: t
      });
    }
    /**
     * On before conditions clean listener.
     *
     * @private
     */
    /**
     * Destroy instance.
     */
    destroy() {
      this.clearLocalHooks(), lt(this, (e, t) => {
        this[t] = null;
      });
    }
  }
  function iHe(n) {
    this.latestEditedColumnPosition = this.conditionCollection.getColumnStackPosition(n);
  }
  function rHe() {
    this.latestOrderStack = this.conditionCollection.getFilteredColumns();
  }
  function sHe() {
    z(this.latestOrderStack, (n) => {
      this.updateStatesAtColumn(n);
    });
  }
  qt(qY, Ki);
  function oHe(n) {
    return mY({
      initialPage: 0,
      size: () => n.length,
      onItemSelect: (t, i) => {
        const r = n[t];
        if (r instanceof Ew)
          return i;
        if (r.element && !tf(r.element))
          return !1;
        r.focus();
      }
    });
  }
  const pb = "filters";
  function aHe(n, e) {
    let t = -1;
    const i = oHe(e), r = (l) => () => {
      n.isOpened() && n.getKeyboardShortcutsCtrl().listen(pb), i.setCurrentPage(e.indexOf(l));
    };
    e.forEach((l) => {
      l instanceof Jo && (l.addLocalHook("click", r(l)), l.addLocalHook("focus", r(l)), l.addLocalHook("afterClose", r(l)));
    }), n.addLocalHook("afterSelectionChange", (l) => {
      l.key.startsWith("filter_") || i.clear();
    });
    function s(l) {
      const c = n.getKeyboardShortcutsCtrl(), u = l.getKeyboardShortcutsCtrl();
      i.clear(), u.addCustomShortcuts([{
        keys: [["Tab"], ["Shift", "Tab"]],
        forwardToContext: c.getContext(pb),
        callback: () => {
          l.isSubMenu() && l.close(), c.listen(pb);
        }
      }]), !l.isSubMenu() && c.addCustomShortcuts([{
        keys: [["Tab"], ["Shift", "Tab"]],
        callback: (h) => {
          const d = n.getNavigator();
          d.getCurrentPage() > -1 && (t = d.getCurrentPage()), d.clear(), h.shiftKey ? i.toPreviousItem() : i.toNextItem();
        }
      }, {
        keys: [["Escape"]],
        callback: () => {
          n.close();
        }
      }, {
        keys: [["Enter"], ["Space"]],
        preventDefault: !1,
        callback: (h) => {
          const d = e[i.getCurrentPage()];
          d instanceof _w && (d.openOptions(), h.preventDefault()), d instanceof Rw && (d.activate(), h.preventDefault()), d instanceof Jo || h.preventDefault();
        }
      }], pb);
    }
    n.addLocalHook("afterSubmenuOpen", s), n.addLocalHook("afterOpen", s);
    function o() {
      n.focus(), n.getKeyboardShortcutsCtrl().listen(pb);
    }
    function a() {
      return t;
    }
    return {
      ...i,
      listen: o,
      getLastMenuPage: a
    };
  }
  function lHe(n, e) {
    XY(n, e), e.add(n);
  }
  function cHe(n, e, t) {
    XY(n, e), e.set(n, t);
  }
  function XY(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function mb(n, e, t) {
    return (e = uHe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function uHe(n) {
    var e = hHe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function hHe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function dHe(n, e, t) {
    return n.set(os(n, e), t), t;
  }
  function bb(n, e) {
    return n.get(os(n, e));
  }
  function os(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  const vI = "filters", fHe = 250, cW = vI;
  var jh = /* @__PURE__ */ new WeakMap(), Fs = /* @__PURE__ */ new WeakSet();
  class gHe extends Lt {
    static get PLUGIN_KEY() {
      return vI;
    }
    static get PLUGIN_PRIORITY() {
      return fHe;
    }
    static get PLUGIN_DEPS() {
      return ["plugin:DropdownMenu", "plugin:HiddenRows", "cell-type:checkbox"];
    }
    /**
     * Instance of {@link DropdownMenu}.
     *
     * @private
     * @type {DropdownMenu}
     */
    constructor(e) {
      super(e), lHe(this, Fs), mb(this, "dropdownMenuPlugin", null), mb(this, "conditionCollection", null), mb(this, "conditionUpdateObserver", null), mb(this, "components", /* @__PURE__ */ new Map([["filter_by_condition", null], ["filter_operators", null], ["filter_by_condition2", null], ["filter_by_value", null], ["filter_action_bar", null]])), mb(this, "filtersRowsMap", null), cHe(this, jh, void 0), this.hot.addHook("afterGetColHeader", (t, i) => os(Fs, this, yHe).call(this, t, i));
    }
    /**
     * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link Filters#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return !!this.hot.getSettings()[vI];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
    enablePlugin() {
      if (this.enabled)
        return;
      this.filtersRowsMap = this.hot.rowIndexMapper.registerMap(this.pluginName, new py()), this.dropdownMenuPlugin = this.hot.getPlugin("dropdownMenu");
      const e = this.hot.getSettings().dropdownMenu, t = e && e.uiContainer || this.hot.rootDocument.body, i = (o) => (o.addLocalHook("accept", () => os(Fs, this, uW).call(this, "accept")), o.addLocalHook("cancel", () => os(Fs, this, uW).call(this, "cancel")), o.addLocalHook("change", (a) => os(Fs, this, wHe).call(this, o, a)), o), r = () => `${this.hot.getTranslatedPhrase(aL)}:`, s = () => `${this.hot.getTranslatedPhrase(lL)}:`;
      if (!this.components.get("filter_by_condition")) {
        const o = new bI(this.hot, {
          id: "filter_by_condition",
          name: r,
          addSeparator: !1,
          menuContainer: t
        });
        o.addLocalHook("afterClose", () => os(Fs, this, hW).call(this)), this.components.set("filter_by_condition", i(o));
      }
      if (this.components.get("filter_operators") || this.components.set("filter_operators", new SLe(this.hot, {
        id: "filter_operators",
        name: "Operators"
      })), !this.components.get("filter_by_condition2")) {
        const o = new bI(this.hot, {
          id: "filter_by_condition2",
          name: "",
          addSeparator: !0,
          menuContainer: t
        });
        o.addLocalHook("afterClose", () => os(Fs, this, hW).call(this)), this.components.set("filter_by_condition2", i(o));
      }
      if (this.components.get("filter_by_value") || this.components.set("filter_by_value", i(new FLe(this.hot, {
        id: "filter_by_value",
        name: s
      }))), this.components.get("filter_action_bar") || this.components.set("filter_action_bar", i(new xw(this.hot, {
        id: "filter_action_bar",
        name: "Action bar"
      }))), this.conditionCollection || (this.conditionCollection = new QL(this.hot)), this.conditionUpdateObserver || (this.conditionUpdateObserver = new qY(this.hot, this.conditionCollection, (o) => this.getDataMapAtColumn(o)), this.conditionUpdateObserver.addLocalHook("update", (o) => os(Fs, this, CHe).call(this, o))), this.components.forEach((o) => o.show()), this.addHook("afterDropdownMenuDefaultOptions", (o) => os(Fs, this, vHe).call(this, o)), this.addHook("afterDropdownMenuShow", () => os(Fs, this, mHe).call(this)), this.addHook("afterDropdownMenuHide", () => os(Fs, this, bHe).call(this)), this.addHook("afterChange", (o) => os(Fs, this, pHe).call(this, o)), this.hot.getSettings().dropdownMenu && this.dropdownMenuPlugin && (this.dropdownMenuPlugin.disablePlugin(), this.dropdownMenuPlugin.enablePlugin()), !bb(jh, this) && this.dropdownMenuPlugin.enabled) {
        const o = this.dropdownMenuPlugin.menu, a = [
          // A fake menu item that once focused allows escaping from the focus navigation (using Tab keys)
          // to the menu navigation using arrow keys.
          {
            focus: () => {
              const c = o.getNavigator(), u = bb(jh, this).getLastMenuPage();
              o.focus(), u > 0 ? c.setCurrentPage(u) : c.toFirstItem();
            }
          },
          ...Array.from(this.components).map((c) => {
            let [, u] = c;
            return u.getElements();
          }).flat()
        ];
        dHe(jh, this, aHe(o, a));
        const l = (c) => {
          bb(jh, this).listen(), c.preventDefault(), Zp(c.keyCode, "TAB") && (c.shiftKey ? bb(jh, this).toPreviousItem() : bb(jh, this).toNextItem());
        };
        this.components.get("filter_by_value").addLocalHook("listTabKeydown", l), this.components.get("filter_by_condition").addLocalHook("selectTabKeydown", l);
      }
      this.registerShortcuts(), super.enablePlugin();
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
    disablePlugin() {
      if (this.enabled) {
        var e;
        (e = this.dropdownMenuPlugin) !== null && e !== void 0 && e.enabled && this.dropdownMenuPlugin.menu.clearLocalHooks(), this.components.forEach((t, i) => {
          t.destroy(), this.components.set(i, null);
        }), this.conditionCollection.destroy(), this.conditionCollection = null, this.hot.rowIndexMapper.unregisterMap(this.pluginName);
      }
      this.unregisterShortcuts(), super.disablePlugin();
    }
    /**
     * Register shortcuts responsible for clearing the filters.
     *
     * @private
     */
    registerShortcuts() {
      this.hot.getShortcutManager().getContext("grid").addShortcut({
        keys: [["Alt", "A"]],
        stopPropagation: !0,
        callback: () => {
          const e = this.hot.getSelected();
          this.clearConditions(), this.filter(), e && this.hot.selectCells(e);
        },
        group: cW
      });
    }
    /**
     * Unregister shortcuts responsible for clearing the filters.
     *
     * @private
     */
    unregisterShortcuts() {
      this.hot.getShortcutManager().getContext("grid").removeShortcutsByGroup(cW);
    }
    /* eslint-disable jsdoc/require-description-complete-sentence */
    /**
     * @memberof Filters#
     * @function addCondition
     * @description
     * Adds condition to the conditions collection at specified column index.
     *
     * Possible predefined conditions:
     *  * `begins_with` - Begins with
     *  * `between` - Between
     *  * `by_value` - By value
     *  * `contains` - Contains
     *  * `date_after` - After a date
     *  * `date_before` - Before a date
     *  * `date_today` - Today
     *  * `date_tomorrow` - Tomorrow
     *  * `date_yesterday` - Yesterday
     *  * `empty` - Empty
     *  * `ends_with` - Ends with
     *  * `eq` - Equal
     *  * `gt` - Greater than
     *  * `gte` - Greater than or equal
     *  * `lt` - Less than
     *  * `lte` - Less than or equal
     *  * `none` - None (no filter)
     *  * `not_between` - Not between
     *  * `not_contains` - Not contains
     *  * `not_empty` - Not empty
     *  * `neq` - Not equal.
     *
     * Possible operations on collection of conditions:
     *  * `conjunction` - [**Conjunction**](https://en.wikipedia.org/wiki/Logical_conjunction) on conditions collection (by default), i.e. for such operation: <br/> c1 AND c2 AND c3 AND c4 ... AND cn === TRUE, where c1 ... cn are conditions.
     *  * `disjunction` - [**Disjunction**](https://en.wikipedia.org/wiki/Logical_disjunction) on conditions collection, i.e. for such operation: <br/> c1 OR c2 OR c3 OR c4 ... OR cn === TRUE, where c1, c2, c3, c4 ... cn are conditions.
     *  * `disjunctionWithExtraCondition` - **Disjunction** on first `n - 1`\* conditions from collection with an extra requirement computed from the last condition, i.e. for such operation: <br/> c1 OR c2 OR c3 OR c4 ... OR cn-1 AND cn === TRUE, where c1, c2, c3, c4 ... cn are conditions.
     *
     * \* when `n` is collection size; it's used i.e. for one operation introduced from UI (when choosing from filter's drop-down menu two conditions with OR operator between them, mixed with choosing values from the multiple choice select)
     *
     * **Note**: Mind that you cannot mix different types of operations (for instance, if you use `conjunction`, use it consequently for a particular column).
     *
     * @example
     * ::: only-for javascript
     * ```js
     * const container = document.getElementById('example');
     * const hot = new Handsontable(container, {
     *   data: getData(),
     *   filters: true
     * });
     *
     * // access to filters plugin instance
     * const filtersPlugin = hot.getPlugin('filters');
     *
     * // add filter "Greater than" 95 to column at index 1
     * filtersPlugin.addCondition(1, 'gt', [95]);
     * filtersPlugin.filter();
     *
     * // add filter "By value" to column at index 1
     * // in this case all value's that don't match will be filtered.
     * filtersPlugin.addCondition(1, 'by_value', [['ing', 'ed', 'as', 'on']]);
     * filtersPlugin.filter();
     *
     * // add filter "Begins with" with value "de" AND "Not contains" with value "ing"
     * filtersPlugin.addCondition(1, 'begins_with', ['de'], 'conjunction');
     * filtersPlugin.addCondition(1, 'not_contains', ['ing'], 'conjunction');
     * filtersPlugin.filter();
     *
     * // add filter "Begins with" with value "de" OR "Not contains" with value "ing"
     * filtersPlugin.addCondition(1, 'begins_with', ['de'], 'disjunction');
     * filtersPlugin.addCondition(1, 'not_contains', ['ing'], 'disjunction');
     * filtersPlugin.filter();
     * ```
     * :::
     *
     * ::: only-for react
     * ```jsx
     * const hotRef = useRef(null);
     *
     * ...
     *
     * <HotTable
     *   ref={hotRef}
     *   data={getData()}
     *   filters={true}
     * />
     *
     * // access to filters plugin instance
     * const hot = hotRef.current.hotInstance;
     * const filtersPlugin = hot.getPlugin('filters');
     *
     * // add filter "Greater than" 95 to column at index 1
     * filtersPlugin.addCondition(1, 'gt', [95]);
     * filtersPlugin.filter();
     *
     * // add filter "By value" to column at index 1
     * // in this case all value's that don't match will be filtered.
     * filtersPlugin.addCondition(1, 'by_value', [['ing', 'ed', 'as', 'on']]);
     * filtersPlugin.filter();
     *
     * // add filter "Begins with" with value "de" AND "Not contains" with value "ing"
     * filtersPlugin.addCondition(1, 'begins_with', ['de'], 'conjunction');
     * filtersPlugin.addCondition(1, 'not_contains', ['ing'], 'conjunction');
     * filtersPlugin.filter();
     *
     * // add filter "Begins with" with value "de" OR "Not contains" with value "ing"
     * filtersPlugin.addCondition(1, 'begins_with', ['de'], 'disjunction');
     * filtersPlugin.addCondition(1, 'not_contains', ['ing'], 'disjunction');
     * filtersPlugin.filter();
     * ```
     * :::
     *
     * @param {number} column Visual column index.
     * @param {string} name Condition short name.
     * @param {Array} args Condition arguments.
     * @param {string} [operationId=conjunction] `id` of operation which is performed on the column.
     */
    /* eslint-enable jsdoc/require-description-complete-sentence */
    addCondition(e, t, i) {
      let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : Bu;
      const s = this.hot.toPhysicalColumn(e);
      this.conditionCollection.addCondition(s, {
        command: {
          key: t
        },
        args: i
      }, r);
    }
    /**
     * Removes conditions at specified column index.
     *
     * @param {number} column Visual column index.
     */
    removeConditions(e) {
      const t = this.hot.toPhysicalColumn(e);
      this.conditionCollection.removeConditions(t);
    }
    /**
     * Clears all conditions previously added to the collection for the specified column index or, if the column index
     * was not passed, clear the conditions for all columns.
     *
     * @param {number} [column] Visual column index.
     */
    clearConditions(e) {
      if (e === void 0)
        this.conditionCollection.clean();
      else {
        const t = this.hot.toPhysicalColumn(e);
        this.conditionCollection.removeConditions(t);
      }
    }
    /**
     * Filters data based on added filter conditions.
     *
     * @fires Hooks#beforeFilter
     * @fires Hooks#afterFilter
     */
    filter() {
      const {
        navigableHeaders: e
      } = this.hot.getSettings(), t = this._createDataFilter(), i = !this.conditionCollection.isEmpty();
      let r = [];
      const s = this.conditionCollection.exportAllConditions();
      if (this.hot.runHooks("beforeFilter", s, this.conditionCollection.previousConditionStack) !== !1)
        if (i) {
          const a = [];
          this.hot.batchExecution(() => {
            this.filtersRowsMap.clear(), r = mt(t.filter(), (c) => c.meta.visualRow);
            const l = _y(r);
            $e(this.hot.countSourceRows() - 1, (c) => {
              l(c) || a.push(c);
            }), z(a, (c) => {
              this.filtersRowsMap.setValueAtIndex(c, !0);
            });
          }, !0), !e && !r.length && this.hot.deselectCell();
        } else
          this.filtersRowsMap.clear();
      this.hot.runHooks("afterFilter", s), this.conditionCollection.setPreviousConditionStack(null), this.hot.view.adjustElementsSize(), this.hot.render(), this.hot.selection.isSelected() && this.hot.selectCell(e ? -1 : 0, this.hot.getSelectedRangeLast().highlight.col);
    }
    /**
     * Gets last selected column index.
     *
     * @returns {{visualIndex: number, physicalIndex: number} | null} Returns `null` when a column is
     * not selected. Otherwise, returns an object with `visualIndex` and `physicalIndex` properties containing
     * the index of the column.
     */
    getSelectedColumn() {
      var e;
      const t = (e = this.hot.getSelectedRangeLast()) === null || e === void 0 ? void 0 : e.highlight;
      return t ? {
        visualIndex: t.col,
        physicalIndex: this.hot.toPhysicalColumn(t.col)
      } : null;
    }
    /**
     * Returns handsontable source data with cell meta based on current selection.
     *
     * @param {number} [column] The physical column index. By default column index accept the value of the selected column.
     * @returns {Array} Returns array of objects where keys as row index.
     */
    getDataMapAtColumn(e) {
      const t = this.hot.toVisualColumn(e), i = [];
      return z(this.hot.getSourceDataAtCol(t), (r, s) => {
        var o;
        const {
          row: a,
          col: l,
          visualCol: c,
          visualRow: u,
          type: h,
          instance: d,
          dateFormat: f,
          locale: g
        } = this.hot.getCellMeta(s, t), p = (o = this.hot.getDataAtCell(this.hot.toVisualRow(s), t)) !== null && o !== void 0 ? o : r;
        i.push({
          meta: {
            row: a,
            col: l,
            visualCol: c,
            visualRow: u,
            type: h,
            instance: d,
            dateFormat: f,
            locale: g
          },
          value: FY(p)
        });
      }), i;
    }
    /**
     * Update the condition of ValueComponent, based on the handled changes.
     *
     * @private
     * @param {number} columnIndex Column index of handled ValueComponent condition.
     */
    updateValueComponentCondition(e) {
      const t = this.hot.getDataAtCol(e), i = mI(t);
      this.conditionUpdateObserver.updateStatesAtColumn(e, i);
    }
    /**
     * Restores components to its saved state.
     *
     * @private
     * @param {Array} components List of components.
     */
    restoreComponents(e) {
      var t;
      const i = (t = this.getSelectedColumn()) === null || t === void 0 ? void 0 : t.physicalIndex;
      e.forEach((r) => {
        r.isHidden() || r.restoreState(i);
      }), this.updateDependentComponentsVisibility();
    }
    /**
     * After dropdown menu show listener.
     */
    /**
     * Get an operation, based on the number and types of arguments (where arguments are states of components).
     *
     * @param {string} suggestedOperation Operation which was chosen by user from UI.
     * @param {object} byConditionState1 State of first condition component.
     * @param {object} byConditionState2 State of second condition component.
     * @param {object} byValueState State of value component.
     * @private
     * @returns {string}
     */
    getOperationBasedOnArguments(e, t, i, r) {
      let s = e;
      return s === eR && t.command.key !== ki && i.command.key !== ki && r.command.key !== ki ? s = XL : r.command.key !== ki && (t.command.key === ki || i.command.key === ki) && (s = Bu), s;
    }
    /**
     * On action bar submit listener.
     *
     * @private
     * @param {string} submitType The submit type.
     */
    /**
     * Listen to the keyboard input on document body and forward events to instance of Handsontable
     * created by DropdownMenu plugin.
     *
     * @private
     */
    setListeningDropdownMenu() {
      this.dropdownMenuPlugin && this.dropdownMenuPlugin.setListening();
    }
    /**
     * Updates visibility of some of the components, based on the state of the parent component.
     *
     * @private
     */
    updateDependentComponentsVisibility() {
      const e = this.components.get("filter_by_condition"), {
        command: t
      } = e.getState(), i = [this.components.get("filter_by_condition2"), this.components.get("filter_operators")];
      t.showOperators ? this.showComponents(...i) : this.hideComponents(...i);
    }
    /**
     * On after get column header listener.
     *
     * @param {number} col Visual column index.
     * @param {HTMLTableCellElement} TH Header's TH element.
     */
    /**
     * Creates DataFilter instance based on condition collection.
     *
     * @private
     * @param {ConditionCollection} conditionCollection Condition collection object.
     * @returns {DataFilter}
     */
    _createDataFilter() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.conditionCollection;
      return new KY(e, (t) => this.getDataMapAtColumn(t));
    }
    /**
     * It updates the components state. The state is triggered by ConditionUpdateObserver, which
     * reacts to any condition added to the condition collection. It may be added through the UI
     * components or by API call.
     *
     * @param {object} conditionsState An object with the state generated by UI components.
     */
    /**
     * Returns indexes of passed components inside list of `dropdownMenu` items.
     *
     * @private
     * @param {...BaseComponent} components List of components.
     * @returns {Array}
     */
    getIndexesOfComponents() {
      const e = [];
      if (!this.dropdownMenuPlugin)
        return e;
      const t = this.dropdownMenuPlugin.menu;
      for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
        r[s] = arguments[s];
      return z(r, (o) => {
        z(t.menuItems, (a, l) => {
          a.key === o.getMenuItemDescriptor().key && e.push(l);
        });
      }), e;
    }
    /**
     * Changes visibility of component.
     *
     * @private
     * @param {boolean} visible Determine if components should be visible.
     * @param {...BaseComponent} components List of components.
     */
    changeComponentsVisibility() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;
      if (!this.dropdownMenuPlugin)
        return;
      const i = this.dropdownMenuPlugin.menu.hotMenu, r = i.getPlugin("hiddenRows");
      for (var s = arguments.length, o = new Array(s > 1 ? s - 1 : 0), a = 1; a < s; a++)
        o[a - 1] = arguments[a];
      const l = this.getIndexesOfComponents(...o);
      e ? r.showRows(l) : r.hideRows(l), i.render();
    }
    /**
     * Hides components of filters `dropdownMenu`.
     *
     * @private
     * @param {...BaseComponent} components List of components.
     */
    hideComponents() {
      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++)
        t[i] = arguments[i];
      this.changeComponentsVisibility(!1, ...t);
    }
    /**
     * Shows components of filters `dropdownMenu`.
     *
     * @private
     * @param {...BaseComponent} components List of components.
     */
    showComponents() {
      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++)
        t[i] = arguments[i];
      this.changeComponentsVisibility(!0, ...t);
    }
    /**
     * Destroys the plugin instance.
     */
    destroy() {
      this.enabled && (this.components.forEach((e, t) => {
        e !== null && (e.destroy(), this.components.set(t, null));
      }), this.conditionCollection.destroy(), this.conditionUpdateObserver.destroy(), this.hot.rowIndexMapper.unregisterMap(this.pluginName)), super.destroy();
    }
  }
  function pHe(n) {
    n && z(n, (e) => {
      const [, t] = e, i = this.hot.propToCol(t);
      this.conditionCollection.hasConditions(i) && this.updateValueComponentCondition(i);
    });
  }
  function mHe() {
    const n = this.dropdownMenuPlugin.menu;
    this.restoreComponents(Array.from(this.components.values())), n.updateMenuDimensions();
  }
  function bHe() {
    this.components.get("filter_by_condition").getSelectElement().closeOptions(), this.components.get("filter_by_condition2").getSelectElement().closeOptions();
  }
  function vHe(n) {
    n.items.push({
      name: ut
    }), this.components.forEach((e) => {
      n.items.push(e.getMenuItemDescriptor());
    });
  }
  function uW(n) {
    var e;
    if (n === "accept") {
      const i = this.getSelectedColumn();
      if (i === null) {
        var t;
        (t = this.dropdownMenuPlugin) === null || t === void 0 || t.close();
        return;
      }
      const {
        physicalIndex: r
      } = i, s = this.components.get("filter_by_condition").getState(), o = this.components.get("filter_by_condition2").getState(), a = this.components.get("filter_by_value").getState(), l = this.getOperationBasedOnArguments(this.components.get("filter_operators").getActiveOperationId(), s, o, a);
      this.conditionUpdateObserver.groupChanges();
      let c = this.conditionCollection.getColumnStackPosition(r);
      c === -1 && (c = void 0), this.conditionCollection.removeConditions(r), s.command.key !== ki && (this.conditionCollection.addCondition(r, s, l, c), o.command.key !== ki && this.conditionCollection.addCondition(r, o, l, c)), a.command.key !== ki && this.conditionCollection.addCondition(r, a, l, c), this.conditionUpdateObserver.flush(), this.components.forEach((u) => u.saveState(r)), this.filtersRowsMap.clear(), this.filter();
    }
    (e = this.dropdownMenuPlugin) === null || e === void 0 || e.close();
  }
  function wHe(n, e) {
    this.updateDependentComponentsVisibility(), n.constructor === bI && !e.inputsCount && this.setListeningDropdownMenu();
  }
  function hW() {
    this.setListeningDropdownMenu();
  }
  function yHe(n, e) {
    const t = this.hot.toPhysicalColumn(n);
    this.enabled && this.conditionCollection.hasConditions(t) ? ue(e, "htFiltersActive") : Ze(e, "htFiltersActive");
  }
  function CHe(n) {
    var e;
    if (!((e = this.dropdownMenuPlugin) !== null && e !== void 0 && e.enabled))
      return;
    const {
      editedConditionStack: {
        conditions: t,
        column: i
      }
    } = n, r = t.filter((o) => o.name === Td), s = t.filter((o) => o.name !== Td);
    if (r.length >= 2 || s.length >= 3)
      Yt(Kt`The filter conditions have been applied properly, but couldn’t be displayed visually.\x20
        The overall amount of conditions exceed the capability of the dropdown menu.\x20
        For more details see the documentation.`);
    else {
      const o = this.conditionCollection.getOperation(i);
      this.components.get("filter_by_condition").updateState(s[0], i), this.components.get("filter_by_condition2").updateState(s[1], i), this.components.get("filter_operators").updateState(o, i), this.components.get("filter_by_value").updateState(n);
    }
  }
  const ZY = "internal-use-in-handsontable", wI = {
    licenseKey: ZY,
    useArrayArithmetic: !0,
    useColumnIndex: !1,
    useStats: !1,
    evaluateNullToZero: !0,
    precisionEpsilon: 1e-13,
    precisionRounding: 14,
    smartRounding: !0,
    leapYear1900: !1,
    nullDate: {
      year: 1899,
      month: 12,
      day: 30
    },
    nullYear: 30,
    dateFormats: ["DD/MM/YYYY", "DD/MM/YY"],
    timeFormats: ["hh:mm", "hh:mm:ss.sss"],
    matchWholeCell: !0,
    useRegularExpressions: !1,
    useWildcards: !0,
    functionArgSeparator: ",",
    thousandSeparator: "",
    decimalSeparator: ".",
    language: "enGB"
  };
  function QY(n) {
    var e;
    return {
      maxColumns: n.maxColumns,
      maxRows: n.maxRows,
      language: (e = n[or]) === null || e === void 0 || (e = e.language) === null || e === void 0 ? void 0 : e.langCode
    };
  }
  function JY(n) {
    return Object.keys(n).reduce((e, t) => (t !== "hyperformula" && (e[t] = n[t]), e), {});
  }
  function SHe(n) {
    var e;
    const t = n[or], i = JY(t != null && (e = t.engine) !== null && e !== void 0 && e.hyperformula ? t.engine : {}), r = QY(n);
    return {
      ...wI,
      ...i,
      ...r
    };
  }
  function _He(n) {
    var e;
    const t = n[or], i = JY(t != null && (e = t.engine) !== null && e !== void 0 && e.hyperformula ? t.engine : {}), r = QY(n);
    return {
      ...i,
      ...r
    };
  }
  function RHe(n, e) {
    return Object.keys(e).some((t) => e[t] !== void 0 && e[t] !== n[t]);
  }
  function dE() {
    const n = "engine_relationship", e = ha(or);
    return e.hasItem(n) || e.register(n, /* @__PURE__ */ new Map()), e.getItem(n);
  }
  function JL() {
    const n = "shared_engine_usage", e = ha(or);
    return e.hasItem(n) || e.register(n, /* @__PURE__ */ new Map()), e.getItem(n);
  }
  function EHe(n) {
    const e = n.getSettings(), t = e[or], i = t == null ? void 0 : t.engine;
    if (t === !0 || dn(i))
      return null;
    if (typeof i.hyperformula == "function" || typeof i == "function") {
      var r;
      return xHe((r = i.hyperformula) !== null && r !== void 0 ? r : i, e, n);
    } else if (typeof i == "object" && dn(i.hyperformula)) {
      const s = dE(), o = JL().get(i);
      return s.has(i) || s.set(i, []), s.get(i).push(n), o && o.push(n.guid), i.getConfig().licenseKey || i.updateConfig({
        licenseKey: ZY
      }), (i.getConfig().leapYear1900 !== wI.leapYear1900 || L1(i.getConfig().nullDate, wI.nullDate) === !1) && Yt(Kt`If you use HyperFormula with Handsontable, keep the default \`leapYear1900\` and \`nullDate\` 
      settings. Otherwise, HyperFormula's dates may not sync correctly with Handsontable's dates.`), i;
    }
    return null;
  }
  function xHe(n, e, t) {
    const i = e[or], r = SHe(e), s = dE(), o = JL();
    THe(n, i.functions), MHe(n, i.language);
    const a = n.buildEmpty(r);
    return s.set(a, [t]), o.set(a, [t.guid]), AHe(a, i.namedExpressions), a.on("sheetAdded", () => {
      a.rebuildAndRecalculate();
    }), a.on("sheetRemoved", () => {
      a.rebuildAndRecalculate();
    }), a;
  }
  function dW(n) {
    var e;
    const t = dE(), i = t.size === 0 ? [] : Array.from((e = t.get(n)) !== null && e !== void 0 ? e : []);
    return new Map(i.map((r) => [r.getPlugin("formulas").sheetId, r]));
  }
  function fW(n, e) {
    if (n) {
      const t = dE(), i = t.get(n), r = JL(), s = r.get(n);
      i && i.includes(e) && (i.splice(i.indexOf(e), 1), i.length === 0 && t.delete(n)), s && s.includes(e.guid) && (s.splice(s.indexOf(e.guid), 1), s.length === 0 && (r.delete(n), n.destroy()));
    }
  }
  function THe(n, e) {
    e && e.forEach((t) => {
      const {
        name: i,
        plugin: r,
        translations: s
      } = t;
      try {
        n.registerFunction(i, r, s);
      } catch (o) {
        Yt(o.message);
      }
    });
  }
  function MHe(n, e) {
    if (e) {
      const {
        langCode: t
      } = e;
      try {
        n.registerLanguage(t, e);
      } catch (i) {
        Yt(i.message);
      }
    }
  }
  function AHe(n, e) {
    e && (n.suspendEvaluation(), e.forEach((t) => {
      const {
        name: i,
        expression: r,
        scope: s,
        options: o
      } = t;
      try {
        n.addNamedExpression(i, r, s, o);
      } catch (a) {
        Yt(a.message);
      }
    }), n.resumeEvaluation());
  }
  function PHe(n, e) {
    return (dn(e) || !n.doesSheetExist(e)) && (e = n.addSheet(e)), e;
  }
  const eK = "DD/MM/YYYY";
  function tK(n) {
    return typeof n == "string" && n.charAt(0) === "'" && n.charAt(1) === "=";
  }
  function IHe(n) {
    return tK(n) ? n.substr(1) : n;
  }
  function OHe(n) {
    return typeof n == "string" && n.startsWith("=");
  }
  function eH(n, e) {
    return typeof n == "string" && e === "date";
  }
  function nK(n, e) {
    return he(n, e, !0).isValid();
  }
  function iK(n, e) {
    return he(n, e, !0).format(eK);
  }
  function kHe(n, e) {
    return he(n, eK, !0).format(e);
  }
  function rK(n, e) {
    const i = new Date(Date.UTC(0, 0, n + -1));
    return he(i).format(e);
  }
  function DHe(n, e, t) {
    const i = Array.from(Array(t).keys()).filter((s) => n.includes(s) === !1);
    if (e === 0) {
      var r;
      return (r = i[e]) !== null && r !== void 0 ? r : 0;
    }
    return i[e - 1] + 1;
  }
  function NHe(n, e) {
    const t = [];
    return n.forEach((i) => {
      const r = {
        from: i,
        to: e
      };
      t.forEach((s) => {
        const o = s.from > s.to, a = s.to <= r.from;
        s.from > r.from && a && o && (r.from += 1);
      }), r.from >= e && (e += 1), t.push(r);
    }), t;
  }
  function LHe(n) {
    return n.forEach((e, t) => {
      n.slice(t + 1).forEach((r) => {
        const s = r.from < r.to;
        r.from > e.from && s && (r.from -= 1);
      });
    }), n;
  }
  function tH(n, e, t) {
    const i = NHe(n, DHe(n, e, t));
    return LHe(i);
  }
  function zh(n, e, t) {
    HHe(n, e), e.set(n, t);
  }
  function HHe(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function Cn(n, e) {
    return n.get(sK(n, e));
  }
  function nu(n, e, t) {
    return n.set(sK(n, e), t), t;
  }
  function sK(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var vb = /* @__PURE__ */ new WeakMap(), iu = /* @__PURE__ */ new WeakMap(), ts = /* @__PURE__ */ new WeakMap(), mC = /* @__PURE__ */ new WeakMap(), dM = /* @__PURE__ */ new WeakMap(), fM = /* @__PURE__ */ new WeakMap(), bC = /* @__PURE__ */ new WeakMap();
  class gW {
    constructor(e, t, i) {
      zh(this, vb, void 0), zh(this, iu, void 0), zh(this, ts, void 0), zh(this, mC, []), zh(this, dM, []), zh(this, fM, void 0), zh(this, bC, []), nu(vb, this, e), nu(iu, this, t), nu(ts, this, i);
    }
    /**
     * Sets removed HF indexes (it should be done right before performing move on HOT).
     *
     * @param {Array<number>} removedIndexes List of removed physical indexes.
     * @returns {Array<number>} List of removed visual indexes.
     */
    setRemovedHfIndexes(e) {
      return nu(bC, this, e.map((t) => {
        const i = Cn(iu, this).getVisualFromPhysicalIndex(t);
        return this.getHfIndexFromVisualIndex(i);
      })), Cn(bC, this);
    }
    /**
     * Gets removed HF indexes (right before performing removal on HOT).
     *
     * @returns {Array<number>} List of removed HF indexes.
     */
    getRemovedHfIndexes() {
      return Cn(bC, this);
    }
    /**
     * Gets corresponding HyperFormula index for particular visual index. It's respecting the idea that HF's engine
     * is fed also with trimmed indexes (business requirements for formula result calculation also for trimmed elements).
     *
     * @param {number} visualIndex Visual index.
     * @returns {number}
     */
    getHfIndexFromVisualIndex(e) {
      const t = Cn(iu, this).getIndexesSequence(), i = Cn(iu, this).getNotTrimmedIndexes();
      return t.indexOf(i[e]);
    }
    /**
     * Synchronizes moves done on HOT to HF engine (based on previously calculated positions).
     *
     * @private
     * @param {Array<{from: number, to: number}>} moves Calculated HF's move positions.
     */
    syncMoves(e) {
      const i = `move${pr(Cn(vb, this))}s`;
      Cn(ts, this).getEngine().batch(() => {
        e.forEach((r) => {
          const s = r.from !== r.to, o = r.from + 1 !== r.to;
          s && o && Cn(ts, this).getEngine()[i](Cn(ts, this).getSheetId(), r.from, 1, r.to);
        });
      });
    }
    /**
     * Stores information about performed HOT moves for purpose of calculating where to move HF elements.
     *
     * @param {Array<number>} movedVisualIndexes Sequence of moved visual indexes for certain axis.
     * @param {number} visualFinalIndex Final visual place where to move HOT indexes.
     * @param {boolean} movePossible Indicates if it's possible to move HOT indexes to the desired position.
     */
    storeMovesInformation(e, t, i) {
      i !== !1 && (nu(dM, this, e.map((r) => this.getHfIndexFromVisualIndex(r))), nu(fM, this, this.getHfIndexFromVisualIndex(t)));
    }
    /**
     * Calculating where to move HF elements and performing already calculated moves.
     *
     * @param {boolean} movePossible Indicates if it was possible to move HOT indexes to the desired position.
     * @param {boolean} orderChanged Indicates if order of HOT indexes was changed by move.
     */
    calculateAndSyncMoves(e, t) {
      if (Cn(ts, this).isPerformingUndoRedo() || e === !1 || t === !1)
        return;
      const i = tH(Cn(dM, this), Cn(fM, this), Cn(iu, this).getNumberOfIndexes());
      Cn(ts, this).getSheetId() === null ? Cn(ts, this).getPostponeAction(() => this.syncMoves(i)) : this.syncMoves(i);
    }
    /**
     * Gets callback for hook triggered after performing change of indexes order.
     *
     * @returns {Function}
     */
    getIndexesChangeSyncMethod() {
      const e = `set${pr(Cn(vb, this))}Order`;
      return (t) => {
        if (Cn(ts, this).isPerformingUndoRedo())
          return;
        const i = Cn(iu, this).getIndexesSequence();
        if (t === "update" && i.length > 0) {
          const r = Cn(mC, this).map((l) => i.indexOf(l)), s = Cn(ts, this).getEngine().getSheetDimensions(Cn(ts, this).getSheetId());
          let o;
          Cn(vb, this) === "row" ? o = s.height : o = s.width;
          const a = r.length;
          for (let l = a; l < o; l += 1)
            r.push(l);
          Cn(ts, this).getEngine()[e](Cn(ts, this).getSheetId(), r);
        }
        nu(mC, this, i);
      };
    }
    /**
     * Initialize the AxisSyncer.
     */
    init() {
      nu(mC, this, Cn(iu, this).getIndexesSequence());
    }
  }
  function Uh(n, e, t) {
    $He(n, e), e.set(n, t);
  }
  function $He(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function $l(n, e) {
    return n.get(oK(n, e));
  }
  function Gh(n, e, t) {
    return n.set(oK(n, e), t), t;
  }
  function oK(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var vC = /* @__PURE__ */ new WeakMap(), wC = /* @__PURE__ */ new WeakMap(), gM = /* @__PURE__ */ new WeakMap(), pM = /* @__PURE__ */ new WeakMap(), mM = /* @__PURE__ */ new WeakMap(), bM = /* @__PURE__ */ new WeakMap(), vM = /* @__PURE__ */ new WeakMap();
  class FHe {
    constructor(e, t, i) {
      Uh(this, vC, void 0), Uh(this, wC, void 0), Uh(this, gM, void 0), Uh(this, pM, !1), Uh(this, mM, !1), Uh(this, bM, null), Uh(this, vM, null), Gh(vC, this, new gW("row", e, this)), Gh(wC, this, new gW("column", t, this)), Gh(gM, this, i);
    }
    /**
     * Gets index synchronizer for a particular axis.
     *
     * @param {'row'|'column'} indexType Type of indexes.
     * @returns {AxisSyncer}
     */
    getForAxis(e) {
      return e === "row" ? $l(vC, this) : $l(wC, this);
    }
    /**
     * Sets flag informing whether an undo action is already performed (we don't execute synchronization in such case).
     *
     * @param {boolean} flagValue Boolean value for the flag.
     */
    setPerformUndo(e) {
      Gh(pM, this, e);
    }
    /**
     * Sets flag informing whether a redo action is already performed (we don't execute synchronization in such case).
     *
     * @param {boolean} flagValue Boolean value for the flag.
     */
    setPerformRedo(e) {
      Gh(mM, this, e);
    }
    /**
     * Gets information whether redo or undo action is already performed (we don't execute synchronization in such case).
     *
     * @private
     * @returns {boolean}
     */
    isPerformingUndoRedo() {
      return $l(pM, this) || $l(mM, this);
    }
    /**
     * Gets HyperFormula's sheet id.
     *
     * @returns {string|null}
     */
    getSheetId() {
      return $l(vM, this);
    }
    /**
     * Gets engine instance that will be used for handled instance of Handsontable.
     *
     * @type {HyperFormula|null}
     */
    getEngine() {
      return $l(bM, this);
    }
    /**
     * Gets method which will postpone execution of some action (needed when synchronization endpoint isn't setup yet).
     *
     * @returns {Function}
     */
    getPostponeAction() {
      return $l(gM, this);
    }
    /**
     * Setups a synchronization endpoint.
     *
     * @param {HyperFormula|null} engine The HF's engine instance which will be synced.
     * @param {string|null} sheetId HyperFormula's sheet name.
     */
    setupSyncEndpoint(e, t) {
      Gh(bM, this, e), Gh(vM, this, t), $l(vC, this).init(), $l(wC, this).init();
    }
  }
  function BHe(n, e) {
    aK(n, e), e.add(n);
  }
  function mg(n, e, t) {
    return (e = VHe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function VHe(n) {
    var e = WHe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function WHe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function wM(n, e, t) {
    aK(n, e), e.set(n, t);
  }
  function aK(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function Xu(n, e, t) {
    return n.set(Zt(n, e), t), t;
  }
  function ap(n, e) {
    return n.get(Zt(n, e));
  }
  function Zt(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  const or = "formulas", jHe = ["maxRows", "maxColumns", "language"], zHe = 260;
  Ie.getSingleton().register("afterNamedExpressionAdded");
  Ie.getSingleton().register("afterNamedExpressionRemoved");
  Ie.getSingleton().register("afterSheetAdded");
  Ie.getSingleton().register("afterSheetRemoved");
  Ie.getSingleton().register("afterSheetRenamed");
  Ie.getSingleton().register("afterFormulasValuesUpdate");
  const nm = (n) => n === "UndoRedo.undo" || n === "UndoRedo.redo" || n === "auto";
  var Mc = /* @__PURE__ */ new WeakMap(), nH = /* @__PURE__ */ new WeakMap(), wb = /* @__PURE__ */ new WeakMap(), tn = /* @__PURE__ */ new WeakSet();
  class UHe extends Lt {
    constructor() {
      var e;
      super(...arguments), e = this, BHe(this, tn), wM(this, Mc, !1), wM(this, nH, !1), wM(this, wb, [["valuesUpdated", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Zt(tn, e, a$e).call(e, ...i);
      }], ["namedExpressionAdded", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Zt(tn, e, l$e).call(e, ...i);
      }], ["namedExpressionRemoved", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Zt(tn, e, c$e).call(e, ...i);
      }], ["sheetAdded", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Zt(tn, e, u$e).call(e, ...i);
      }], ["sheetRenamed", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Zt(tn, e, h$e).call(e, ...i);
      }], ["sheetRemoved", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Zt(tn, e, d$e).call(e, ...i);
      }]]), mg(this, "staticRegister", ha("formulas")), mg(this, "engine", null), mg(this, "sheetName", null), mg(this, "indexSyncer", null), mg(this, "rowAxisSyncer", null), mg(this, "columnAxisSyncer", null);
    }
    static get PLUGIN_KEY() {
      return or;
    }
    static get PLUGIN_PRIORITY() {
      return zHe;
    }
    static get SETTING_KEYS() {
      return [or, ...jHe];
    }
    /**
     * HyperFormula's sheet id.
     *
     * @type {number|null}
     */
    get sheetId() {
      return this.sheetName === null ? null : this.engine.getSheetId(this.sheetName);
    }
    /**
     * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link Formulas#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return !!this.hot.getSettings()[or];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
    enablePlugin() {
      var e, t = this;
      if (!this.enabled) {
        if (this.engine = (e = EHe(this.hot)) !== null && e !== void 0 ? e : this.engine, !this.engine) {
          Yt("Missing the required `engine` key in the Formulas settings. Please fill it with either an engine class or an engine instance.");
          return;
        }
        if (this.sheetName !== null && !this.engine.doesSheetExist(this.sheetName)) {
          const i = this.addSheet(this.sheetName, this.hot.getSourceDataArray());
          i !== !1 && (this.sheetName = i);
        }
        this.addHook("beforeLoadData", function() {
          for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
            r[s] = arguments[s];
          return Zt(tn, t, pW).call(t, ...r);
        }), this.addHook("afterLoadData", function() {
          for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
            r[s] = arguments[s];
          return Zt(tn, t, mW).call(t, ...r);
        }), this.addHook("beforeUpdateData", function() {
          for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
            r[s] = arguments[s];
          return Zt(tn, t, pW).call(t, ...r);
        }), this.addHook("afterUpdateData", function() {
          for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
            r[s] = arguments[s];
          return Zt(tn, t, mW).call(t, ...r);
        }), this.addHook("modifyData", function() {
          for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
            r[s] = arguments[s];
          return Zt(tn, t, qHe).call(t, ...r);
        }), this.addHook("modifySourceData", function() {
          for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
            r[s] = arguments[s];
          return Zt(tn, t, XHe).call(t, ...r);
        }), this.addHook("beforeValidate", function() {
          for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
            r[s] = arguments[s];
          return Zt(tn, t, GHe).call(t, ...r);
        }), this.addHook("afterSetSourceDataAtCell", function() {
          for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
            r[s] = arguments[s];
          return Zt(tn, t, ZHe).call(t, ...r);
        }), this.addHook("afterSetDataAtCell", function() {
          for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
            r[s] = arguments[s];
          return Zt(tn, t, bW).call(t, ...r);
        }), this.addHook("afterSetDataAtRowProp", function() {
          for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
            r[s] = arguments[s];
          return Zt(tn, t, bW).call(t, ...r);
        }), this.addHook("beforeCreateRow", function() {
          for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
            r[s] = arguments[s];
          return Zt(tn, t, QHe).call(t, ...r);
        }), this.addHook("beforeCreateCol", function() {
          for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
            r[s] = arguments[s];
          return Zt(tn, t, JHe).call(t, ...r);
        }), this.addHook("afterCreateRow", function() {
          for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
            r[s] = arguments[s];
          return Zt(tn, t, n$e).call(t, ...r);
        }), this.addHook("afterCreateCol", function() {
          for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
            r[s] = arguments[s];
          return Zt(tn, t, i$e).call(t, ...r);
        }), this.addHook("beforeRemoveRow", function() {
          for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
            r[s] = arguments[s];
          return Zt(tn, t, e$e).call(t, ...r);
        }), this.addHook("beforeRemoveCol", function() {
          for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
            r[s] = arguments[s];
          return Zt(tn, t, t$e).call(t, ...r);
        }), this.addHook("afterRemoveRow", function() {
          for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
            r[s] = arguments[s];
          return Zt(tn, t, r$e).call(t, ...r);
        }), this.addHook("afterRemoveCol", function() {
          for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
            r[s] = arguments[s];
          return Zt(tn, t, s$e).call(t, ...r);
        }), this.indexSyncer = new FHe(this.hot.rowIndexMapper, this.hot.columnIndexMapper, (i) => {
          this.hot.addHookOnce("init", () => {
            i();
          });
        }), this.rowAxisSyncer = this.indexSyncer.getForAxis("row"), this.columnAxisSyncer = this.indexSyncer.getForAxis("column"), this.hot.addHook("afterRowSequenceChange", this.rowAxisSyncer.getIndexesChangeSyncMethod()), this.hot.addHook("afterColumnSequenceChange", this.columnAxisSyncer.getIndexesChangeSyncMethod()), this.hot.addHook("beforeRowMove", (i, r, s, o) => {
          this.rowAxisSyncer.storeMovesInformation(i, r, o);
        }), this.hot.addHook("beforeColumnMove", (i, r, s, o) => {
          this.columnAxisSyncer.storeMovesInformation(i, r, o);
        }), this.hot.addHook("afterRowMove", (i, r, s, o, a) => {
          this.rowAxisSyncer.calculateAndSyncMoves(o, a);
        }), this.hot.addHook("afterColumnMove", (i, r, s, o, a) => {
          this.columnAxisSyncer.calculateAndSyncMoves(o, a);
        }), this.hot.addHook("beforeColumnFreeze", (i, r) => {
          this.columnAxisSyncer.storeMovesInformation([i], this.hot.getSettings().fixedColumnsStart, r);
        }), this.hot.addHook("afterColumnFreeze", (i, r) => {
          this.columnAxisSyncer.calculateAndSyncMoves(r, r);
        }), this.hot.addHook("beforeColumnUnfreeze", (i, r) => {
          this.columnAxisSyncer.storeMovesInformation([i], this.hot.getSettings().fixedColumnsStart - 1, r);
        }), this.hot.addHook("afterColumnUnfreeze", (i, r) => {
          this.columnAxisSyncer.calculateAndSyncMoves(r, r);
        }), this.addHook("afterCellMetaReset", function() {
          for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
            r[s] = arguments[s];
          return Zt(tn, t, KHe).call(t, ...r);
        }), this.addHook("beforeUndo", () => {
          this.indexSyncer.setPerformUndo(!0), this.engine.undo();
        }), this.addHook("beforeRedo", () => {
          this.indexSyncer.setPerformRedo(!0), this.engine.redo();
        }), this.addHook("afterUndo", () => {
          this.indexSyncer.setPerformUndo(!1);
        }), this.addHook("afterUndo", () => {
          this.indexSyncer.setPerformRedo(!1);
        }), this.addHook("afterDetachChild", function() {
          for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
            r[s] = arguments[s];
          return Zt(tn, t, o$e).call(t, ...r);
        }), this.addHook("beforeAutofill", function() {
          for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
            r[s] = arguments[s];
          return Zt(tn, t, YHe).call(t, ...r);
        }), ap(wb, this).forEach((i) => {
          let [r, s] = i;
          return this.engine.on(r, s);
        }), super.enablePlugin();
      }
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
    disablePlugin() {
      ap(wb, this).forEach((e) => {
        let [t, i] = e;
        return this.engine.off(t, i);
      }), fW(this.engine, this.hot), this.engine = null, super.disablePlugin();
    }
    /**
     * Triggered on `updateSettings`.
     *
     * @private
     * @param {object} newSettings New set of settings passed to the `updateSettings` method.
     */
    updatePlugin(e) {
      const t = _He(this.hot.getSettings());
      RHe(this.engine.getConfig(), t) && this.engine.updateConfig(t);
      const i = this.hot.getSettings()[or];
      if (ke(i) && ke(i.sheetName) && i.sheetName !== this.sheetName && this.switchSheet(i.sheetName), !e.data && this.sheetName === null) {
        const r = this.hot.getSettings()[or].sheetName;
        r && this.engine.doesSheetExist(r) ? this.switchSheet(this.sheetName) : this.sheetName = this.addSheet(r ?? void 0, this.hot.getSourceDataArray());
      }
      super.updatePlugin(e);
    }
    /**
     * Destroys the plugin instance.
     */
    destroy() {
      ap(wb, this).forEach((e) => {
        var t;
        let [i, r] = e;
        return (t = this.engine) === null || t === void 0 ? void 0 : t.off(i, r);
      }), Xu(wb, this, null), fW(this.engine, this.hot), this.engine = null, super.destroy();
    }
    /**
     * Add a sheet to the shared HyperFormula instance.
     *
     * @param {string|null} [sheetName] The new sheet name. If not provided (or a null is passed), will be
     * auto-generated by HyperFormula.
     * @param {Array} [sheetData] Data passed to the shared HyperFormula instance. Has to be declared as an array of
     * arrays - array of objects is not supported in this scenario.
     * @returns {boolean|string} `false` if the data format is unusable or it is impossible to add a new sheet to the
     * engine, the created sheet name otherwise.
     */
    addSheet(e, t) {
      if (ke(t) && !eG(t))
        return Yt("The provided data should be an array of arrays."), !1;
      if (e != null && this.engine.doesSheetExist(e))
        return Yt("Sheet with the provided name already exists."), !1;
      try {
        const i = this.engine.addSheet(e ?? void 0);
        return t && this.engine.setSheetContent(this.engine.getSheetId(i), t), i;
      } catch (i) {
        return Yt(i.message), !1;
      }
    }
    /**
     * Switch the sheet used as data in the Handsontable instance (it loads the data from the shared HyperFormula
     * instance).
     *
     * @param {string} sheetName Sheet name used in the shared HyperFormula instance.
     */
    switchSheet(e) {
      if (!this.engine.doesSheetExist(e)) {
        TD(`The sheet named \`${e}\` does not exist, switch aborted.`);
        return;
      }
      this.sheetName = e;
      const t = this.engine.getSheetSerialized(this.sheetId);
      t.length > 0 && this.hot.loadData(t, `${pr(or)}.switchSheet`);
    }
    /**
     * Get the cell type under specified visual coordinates.
     *
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {number} [sheet] The target sheet id, defaults to the current sheet.
     * @returns {string} Possible values: 'FORMULA' | 'VALUE' | 'ARRAYFORMULA' | 'EMPTY'.
     */
    getCellType(e, t) {
      let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.sheetId;
      const r = this.hot.toPhysicalRow(e), s = this.hot.toPhysicalColumn(t);
      return r !== null && s !== null ? this.engine.getCellType({
        sheet: i,
        row: this.rowAxisSyncer.getHfIndexFromVisualIndex(e),
        col: this.columnAxisSyncer.getHfIndexFromVisualIndex(t)
      }) : "EMPTY";
    }
    /**
     * Returns `true` if under specified visual coordinates is formula.
     *
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {number} [sheet] The target sheet id, defaults to the current sheet.
     * @returns {boolean}
     */
    isFormulaCellType(e, t) {
      let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.sheetId;
      return this.engine.doesCellHaveFormula({
        sheet: i,
        row: this.rowAxisSyncer.getHfIndexFromVisualIndex(e),
        col: this.columnAxisSyncer.getHfIndexFromVisualIndex(t)
      });
    }
    /**
     * Renders dependent sheets (handsontable instances) based on the changes - list of the
     * recalculated dependent cells.
     *
     * @private
     * @param {object[]} dependentCells The values and location of applied changes within HF engine.
     * @param {boolean} [renderSelf] `true` if it's supposed to render itself, `false` otherwise.
     */
    renderDependentSheets(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
      const i = /* @__PURE__ */ new Set();
      e.forEach((r) => {
        var s;
        const o = r == null || (s = r.address) === null || s === void 0 ? void 0 : s.sheet;
        o !== void 0 && (i.has(o) || i.add(o));
      }), dW(this.engine).forEach((r, s) => {
        if ((t || s !== this.sheetId) && i.has(s)) {
          var o;
          r.render(), (o = r.view) === null || o === void 0 || o.adjustElementsSize();
        }
      });
    }
    /**
     * Validates dependent cells based on the cells that are modified by the change.
     *
     * @private
     * @param {object[]} dependentCells The values and location of applied changes within HF engine.
     * @param {object[]} [changedCells] The values and location of applied changes by developer (through API or UI).
     */
    validateDependentCells(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      const i = (s) => {
        var o;
        const {
          row: a,
          col: l,
          sheet: c
        } = (o = s == null ? void 0 : s.address) !== null && o !== void 0 ? o : {};
        return ke(c) ? `${c}:${a}x${l}` : "";
      }, r = new Set(t.map((s) => i(s)));
      e.forEach((s) => {
        var o, a;
        const {
          row: l,
          col: c
        } = (o = s.address) !== null && o !== void 0 ? o : {};
        if (ke(l) === !1 || ke(c) === !1 || l >= this.hot.countRows() || c >= this.hot.countCols())
          return;
        const u = s == null || (a = s.address) === null || a === void 0 ? void 0 : a.sheet, h = i(s);
        if (u !== void 0 && !r.has(h)) {
          const d = dW(this.engine).get(u);
          if (!d)
            return;
          d.validateCell(d.getDataAtCell(l, c), d.getCellMeta(l, c), () => {
          });
        }
      });
    }
    /**
     * Sync a change from the change-related hooks with the engine.
     *
     * @private
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {Handsontable.CellValue} newValue New value.
     * @returns {Array} Array of changes exported from the engine.
     */
    syncChangeWithEngine(e, t, i) {
      const r = {
        row: this.rowAxisSyncer.getHfIndexFromVisualIndex(e),
        col: this.columnAxisSyncer.getHfIndexFromVisualIndex(t),
        sheet: this.sheetId
      };
      if (!this.engine.isItPossibleToSetCellContents(r)) {
        Yt(`Not possible to set cell data at ${JSON.stringify(r)}`);
        return;
      }
      const s = this.hot.getCellMeta(e, t);
      return eH(i, s.type) && (nK(i, s.dateFormat) ? i = iK(i, s.dateFormat) : OHe(i) === !1 && (i = `'${i}`)), this.engine.setCellContents(r, i);
    }
  }
  function GHe(n, e, t) {
    const i = this.hot.propToCol(t);
    if (this.isFormulaCellType(e, i)) {
      const r = {
        row: this.rowAxisSyncer.getHfIndexFromVisualIndex(e),
        col: this.columnAxisSyncer.getHfIndexFromVisualIndex(i),
        sheet: this.sheetId
      }, s = this.hot.getCellMeta(e, i);
      let o = this.engine.getCellValue(r);
      return s.type === "date" && sr(o) && (o = rK(o, s.dateFormat)), typeof o == "object" && o !== null ? o.value : o;
    }
    return n;
  }
  function YHe(n, e, t) {
    const {
      row: i,
      col: r
    } = e.getTopStartCorner(), {
      row: s,
      col: o
    } = e.getBottomEndCorner(), {
      row: a,
      col: l
    } = t.getTopStartCorner(), {
      row: c,
      col: u
    } = t.getBottomEndCorner(), h = {
      start: {
        row: this.rowAxisSyncer.getHfIndexFromVisualIndex(i),
        col: this.columnAxisSyncer.getHfIndexFromVisualIndex(r),
        sheet: this.sheetId
      },
      end: {
        row: this.rowAxisSyncer.getHfIndexFromVisualIndex(s),
        col: this.columnAxisSyncer.getHfIndexFromVisualIndex(o),
        sheet: this.sheetId
      }
    }, d = {
      start: {
        row: this.rowAxisSyncer.getHfIndexFromVisualIndex(a),
        col: this.columnAxisSyncer.getHfIndexFromVisualIndex(l),
        sheet: this.sheetId
      },
      end: {
        row: this.rowAxisSyncer.getHfIndexFromVisualIndex(c),
        col: this.columnAxisSyncer.getHfIndexFromVisualIndex(u),
        sheet: this.sheetId
      }
    };
    if (this.engine.isItPossibleToSetCellContents(d) === !1)
      return !1;
    const f = this.engine.getFillRangeData(h, d), {
      row: g,
      col: p
    } = h.start, {
      row: m,
      col: v
    } = h.end, y = m - g + 1, w = v - p + 1;
    for (let R = 0; R < f.length; R += 1)
      for (let E = 0; E < f[R].length; E += 1) {
        const C = f[R][E], T = g + R % y, P = p + E % w, x = this.hot.getCellMeta(T, P);
        eH(C, x.type) && (C.startsWith("'") ? f[R][E] = C.slice(1) : this.isFormulaCellType(T, P, this.sheetId) === !1 && (f[R][E] = kHe(C, x.dateFormat)));
      }
    return f;
  }
  function pW(n, e) {
    (arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "").includes(pr(or)) || Xu(nH, this, dn(this.hot.getSettings().data));
  }
  function KHe() {
    const n = this.hot.getSourceDataArray();
    let e = !1;
    n.forEach((t, i) => {
      t.forEach((r, s) => {
        const o = this.hot.getCellMeta(i, s), a = o.dateFormat;
        eH(r, o.type) && (e = !0, nK(r, a) ? n[i][s] = iK(r, a) : this.isFormulaCellType(i, s) === !1 && (n[i][s] = `'${r}`));
      });
    }), e === !0 && (Xu(Mc, this, !0), this.engine.setSheetContent(this.sheetId, n), Xu(Mc, this, !1));
  }
  function mW(n, e) {
    if (!(arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "").includes(pr(or)))
      if (this.sheetName = PHe(this.engine, this.hot.getSettings()[or].sheetName), ap(nH, this))
        this.switchSheet(this.sheetName);
      else {
        const i = this.hot.getSourceDataArray();
        if (this.engine.isItPossibleToReplaceSheetContent(this.sheetId, i)) {
          Xu(Mc, this, !0);
          const r = this.engine.setSheetContent(this.sheetId, i);
          this.indexSyncer.setupSyncEndpoint(this.engine, this.sheetId), this.renderDependentSheets(r), Xu(Mc, this, !1);
        }
      }
  }
  function qHe(n, e, t, i) {
    if (i !== "get" || ap(Mc, this) || this.sheetName === null || !this.engine.doesSheetExist(this.sheetName))
      return;
    const r = this.hot.toVisualRow(n);
    if (r === null || e === null)
      return;
    if (!this.isFormulaCellType(r, e) && this.getCellType(r, e) !== "ARRAY") {
      tK(t.value) && (t.value = IHe(t.value));
      return;
    }
    const o = {
      row: this.rowAxisSyncer.getHfIndexFromVisualIndex(r),
      col: this.columnAxisSyncer.getHfIndexFromVisualIndex(e),
      sheet: this.sheetId
    };
    let a = this.engine.getCellValue(o), l = this.hot.getCellsMeta().find((u) => u.visualRow === r && u.visualCol === e);
    l === void 0 && (l = {}), l.type === "date" && sr(a) && (a = rK(a, l.dateFormat));
    const c = typeof a == "object" && a !== null ? a.value : a;
    t.value = c;
  }
  function XHe(n, e, t, i) {
    if (i !== "get" || ap(Mc, this) || this.sheetName === null || !this.engine.doesSheetExist(this.sheetName))
      return;
    const r = this.hot.toVisualRow(n), s = this.hot.propToCol(e);
    if (r === null || s === null || !this.isFormulaCellType(r, s) && this.getCellType(r, s) !== "ARRAY")
      return;
    const a = this.engine.getSheetDimensions(this.engine.getSheetId(this.sheetName));
    if (a.width === 0 && a.height === 0)
      return;
    const l = {
      row: this.rowAxisSyncer.getHfIndexFromVisualIndex(r),
      col: this.columnAxisSyncer.getHfIndexFromVisualIndex(s),
      sheet: this.sheetId
    };
    t.value = this.engine.getCellSerialized(l);
  }
  function bW(n, e) {
    if (nm(e))
      return;
    const t = [], i = [], r = this.engine.batch(() => {
      n.forEach((s) => {
        let [o, a, , l] = s;
        const c = this.hot.propToCol(a), u = this.hot.toPhysicalRow(o), h = this.hot.toPhysicalColumn(c), d = {
          row: this.rowAxisSyncer.getHfIndexFromVisualIndex(o),
          col: this.columnAxisSyncer.getHfIndexFromVisualIndex(c),
          sheet: this.sheetId
        };
        u !== null && h !== null ? this.syncChangeWithEngine(o, c, l) : t.push([o, c, l]), i.push({
          address: d
        });
      });
    });
    t.length && this.hot.addHookOnce("afterChange", () => {
      const s = this.engine.batch(() => {
        t.forEach((o) => {
          let [a, l, c] = o;
          this.syncChangeWithEngine(a, l, c);
        });
      });
      this.renderDependentSheets(s, !0);
    }), this.renderDependentSheets(r), this.validateDependentCells(r, i);
  }
  function ZHe(n, e) {
    if (nm(e))
      return;
    const t = [], i = [];
    n.forEach((r) => {
      let [s, o, , a] = r;
      const l = this.hot.propToCol(o);
      if (!sr(l))
        return;
      const c = {
        row: this.rowAxisSyncer.getHfIndexFromVisualIndex(s),
        col: this.columnAxisSyncer.getHfIndexFromVisualIndex(l),
        sheet: this.sheetId
      };
      if (!this.engine.isItPossibleToSetCellContents(c)) {
        Yt(`Not possible to set source cell data at ${JSON.stringify(c)}`);
        return;
      }
      i.push({
        address: c
      }), t.push(...this.engine.setCellContents(c, a));
    }), this.renderDependentSheets(t), this.validateDependentCells(t, i);
  }
  function QHe(n, e) {
    let t = this.rowAxisSyncer.getHfIndexFromVisualIndex(n);
    if (n >= this.hot.countRows() && (t = n), this.sheetId === null || !this.engine.doesSheetExist(this.sheetName) || !this.engine.isItPossibleToAddRows(this.sheetId, [t, e]))
      return !1;
  }
  function JHe(n, e) {
    let t = this.columnAxisSyncer.getHfIndexFromVisualIndex(n);
    if (n >= this.hot.countCols() && (t = n), this.sheetId === null || !this.engine.doesSheetExist(this.sheetName) || !this.engine.isItPossibleToAddColumns(this.sheetId, [t, e]))
      return !1;
  }
  function e$e(n, e, t) {
    return this.rowAxisSyncer.setRemovedHfIndexes(t).every((s) => this.engine.isItPossibleToRemoveRows(this.sheetId, [s, 1])) === !1 ? !1 : void 0;
  }
  function t$e(n, e, t) {
    return this.columnAxisSyncer.setRemovedHfIndexes(t).every((s) => this.engine.isItPossibleToRemoveColumns(this.sheetId, [s, 1])) === !1 ? !1 : void 0;
  }
  function n$e(n, e, t) {
    if (nm(t))
      return;
    const i = this.engine.addRows(this.sheetId, [this.rowAxisSyncer.getHfIndexFromVisualIndex(n), e]);
    this.renderDependentSheets(i);
  }
  function i$e(n, e, t) {
    if (nm(t))
      return;
    const i = this.engine.addColumns(this.sheetId, [this.columnAxisSyncer.getHfIndexFromVisualIndex(n), e]);
    this.renderDependentSheets(i);
  }
  function r$e(n, e, t, i) {
    if (nm(i))
      return;
    const r = this.rowAxisSyncer.getRemovedHfIndexes().sort((o, a) => a - o), s = this.engine.batch(() => {
      r.forEach((o) => {
        this.engine.removeRows(this.sheetId, [o, 1]);
      });
    });
    this.renderDependentSheets(s);
  }
  function s$e(n, e, t, i) {
    if (nm(i))
      return;
    const r = this.columnAxisSyncer.getRemovedHfIndexes().sort((o, a) => a - o), s = this.engine.batch(() => {
      r.forEach((o) => {
        this.engine.removeColumns(this.sheetId, [o, 1]);
      });
    });
    this.renderDependentSheets(s);
  }
  function o$e(n, e, t) {
    var i;
    Xu(Mc, this, !0);
    const r = this.hot.getSourceDataArray(t, 0, t + (((i = e.__children) === null || i === void 0 ? void 0 : i.length) || 0), this.hot.countSourceCols());
    Xu(Mc, this, !1), r.forEach((s, o) => {
      s.forEach((a, l) => {
        this.engine.setCellContents({
          col: l,
          row: t + o,
          sheet: this.sheetId
        }, [[a]]);
      });
    });
  }
  function a$e(n) {
    this.hot.runHooks("afterFormulasValuesUpdate", n);
  }
  function l$e(n, e) {
    this.hot.runHooks("afterNamedExpressionAdded", n, e);
  }
  function c$e(n, e) {
    this.hot.runHooks("afterNamedExpressionRemoved", n, e);
  }
  function u$e(n) {
    this.hot.runHooks("afterSheetAdded", n);
  }
  function h$e(n, e) {
    this.sheetName = e, this.hot.runHooks("afterSheetRenamed", n, e);
  }
  function d$e(n, e) {
    this.hot.runHooks("afterSheetRemoved", n, e);
  }
  function f$e(n) {
    return {
      key: "hidden_columns_hide",
      name() {
        const e = this.getSelectedLast();
        let t = 0;
        if (Array.isArray(e)) {
          const [, i, , r] = e;
          i - r !== 0 && (t = 1);
        }
        return this.getTranslatedPhrase($N, t);
      },
      callback() {
        const {
          from: e,
          to: t
        } = this.getSelectedRangeLast(), i = Math.max(Math.min(e.col, t.col), 0), r = Math.max(e.col, t.col), s = [];
        for (let l = i; l <= r; l += 1)
          s.push(l);
        n.hideColumns(s);
        const o = s[s.length - 1], a = this.columnIndexMapper.getNearestNotHiddenIndex(o, 1, !0);
        Number.isInteger(a) && a >= 0 ? this.selectColumns(a) : this.deselectCell(), this.render(), this.view.adjustElementsSize();
      },
      disabled: !1,
      hidden() {
        return !(this.selection.isSelectedByColumnHeader() || this.selection.isSelectedByCorner());
      }
    };
  }
  function g$e(n) {
    const e = [];
    return {
      key: "hidden_columns_show",
      name() {
        const t = e.length > 1 ? 1 : 0;
        return this.getTranslatedPhrase(FN, t);
      },
      callback() {
        var t, i;
        if (e.length === 0)
          return;
        let r = e[0], s = e[e.length - 1];
        r = (t = this.columnIndexMapper.getNearestNotHiddenIndex(r - 1, -1)) !== null && t !== void 0 ? t : 0, s = (i = this.columnIndexMapper.getNearestNotHiddenIndex(s + 1, 1)) !== null && i !== void 0 ? i : this.countCols() - 1, n.showColumns(e), this.render(), this.view.adjustElementsSize(), s - r + 1 === this.countCols() || this.selectColumns(r, s);
      },
      disabled: !1,
      hidden() {
        const t = mt(n.getHiddenColumns(), (h) => this.toPhysicalColumn(h));
        if (!(this.selection.isSelectedByColumnHeader() || this.selection.isSelectedByCorner()) || t.length < 1)
          return !0;
        e.length = 0;
        const i = this.getSelectedRangeLast(), r = i.getTopStartCorner().col, s = i.getBottomEndCorner().col, o = this.columnIndexMapper, a = o.getRenderableFromVisualIndex(r), l = o.getRenderableFromVisualIndex(s), c = o.getNotTrimmedIndexes(), u = [];
        if (r !== s) {
          const h = s - r + 1, d = l - a + 1;
          if (h > d) {
            const f = c.slice(r, s + 1);
            u.push(...f.filter((g) => t.includes(g)));
          }
        } else if (a === 0 && a < r)
          u.push(...c.slice(0, r));
        else if (a === null)
          u.push(...c.slice(0, this.countCols()));
        else {
          const h = this.countCols() - 1, d = o.getRenderableFromVisualIndex(o.getNearestNotHiddenIndex(h, -1));
          l === d && h > s && u.push(...c.slice(s + 1));
        }
        return z(u, (h) => {
          e.push(this.toVisualColumn(h));
        }), e.length === 0;
      }
    };
  }
  function p$e(n, e) {
    lK(n, e), e.add(n);
  }
  function vW(n, e, t) {
    lK(n, e), e.set(n, t);
  }
  function lK(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function ps(n, e) {
    return n.get(du(n, e));
  }
  function yb(n, e, t) {
    return n.set(du(n, e), t), t;
  }
  function du(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  Ie.getSingleton().register("beforeHideColumns");
  Ie.getSingleton().register("afterHideColumns");
  Ie.getSingleton().register("beforeUnhideColumns");
  Ie.getSingleton().register("afterUnhideColumns");
  const yM = "hiddenColumns", m$e = 310;
  var qa = /* @__PURE__ */ new WeakMap(), Sa = /* @__PURE__ */ new WeakMap(), Yh = /* @__PURE__ */ new WeakSet();
  class b$e extends Lt {
    constructor() {
      super(...arguments), p$e(this, Yh), vW(this, qa, {}), vW(this, Sa, null);
    }
    static get PLUGIN_KEY() {
      return yM;
    }
    static get PLUGIN_PRIORITY() {
      return m$e;
    }
    /**
     * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link HiddenColumns#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return !!this.hot.getSettings()[yM];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
    enablePlugin() {
      var e = this;
      if (this.enabled)
        return;
      const t = this.hot.getSettings()[yM];
      at(t) && (yb(qa, this, t), dn(t.copyPasteEnabled) && (t.copyPasteEnabled = !0)), yb(Sa, this, new U1()), ps(Sa, this).addLocalHook("init", () => du(Yh, this, _$e).call(this)), this.hot.columnIndexMapper.registerMap(this.pluginName, ps(Sa, this)), this.addHook("afterContextMenuDefaultOptions", function() {
        for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
          r[s] = arguments[s];
        return du(Yh, e, S$e).call(e, ...r);
      }), this.addHook("afterGetCellMeta", (i, r, s) => du(Yh, this, w$e).call(this, i, r, s)), this.addHook("modifyColWidth", (i, r) => du(Yh, this, v$e).call(this, i, r), 2), this.addHook("afterGetColHeader", function() {
        for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
          r[s] = arguments[s];
        return du(Yh, e, C$e).call(e, ...r);
      }), this.addHook("modifyCopyableRange", (i) => du(Yh, this, y$e).call(this, i)), super.enablePlugin();
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`hiddenColumns`](@/api/options.md#hiddencolumns)
     */
    updatePlugin() {
      this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
    disablePlugin() {
      this.hot.columnIndexMapper.unregisterMap(this.pluginName), yb(qa, this, {}), super.disablePlugin(), this.resetCellsMeta();
    }
    /**
     * Shows the provided columns.
     *
     * @param {number[]} columns Array of visual column indexes.
     */
    showColumns(e) {
      const t = this.getHiddenColumns(), i = this.isValidConfig(e);
      let r = t;
      const s = ps(Sa, this).getValues().slice(), o = e.length > 0;
      if (i && o) {
        const l = e.map((c) => this.hot.toPhysicalColumn(c));
        z(l, (c) => {
          s[c] = !1;
        }), r = li(s, (c, u, h) => (u && c.push(this.hot.toVisualColumn(h)), c), []);
      }
      this.hot.runHooks("beforeUnhideColumns", t, r, i && o) !== !1 && (i && o && ps(Sa, this).setValues(s), this.hot.view.adjustElementsSize(), this.hot.runHooks("afterUnhideColumns", t, r, i && o, i && r.length < t.length));
    }
    /**
     * Shows a single column.
     *
     * @param {...number} column Visual column index.
     */
    showColumn() {
      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++)
        t[i] = arguments[i];
      this.showColumns(t);
    }
    /**
     * Hides the columns provided in the array.
     *
     * @param {number[]} columns Array of visual column indexes.
     */
    hideColumns(e) {
      const t = this.getHiddenColumns(), i = this.isValidConfig(e);
      let r = t;
      i && (r = Array.from(new Set(t.concat(e)))), this.hot.runHooks("beforeHideColumns", t, r, i) !== !1 && (i && this.hot.batchExecution(() => {
        z(e, (o) => {
          ps(Sa, this).setValueAtIndex(this.hot.toPhysicalColumn(o), !0);
        });
      }, !0), this.hot.runHooks("afterHideColumns", t, r, i, i && r.length > t.length));
    }
    /**
     * Hides a single column.
     *
     * @param {...number} column Visual column index.
     */
    hideColumn() {
      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++)
        t[i] = arguments[i];
      this.hideColumns(t);
    }
    /**
     * Returns an array of visual indexes of hidden columns.
     *
     * @returns {number[]}
     */
    getHiddenColumns() {
      return mt(ps(Sa, this).getHiddenIndexes(), (e) => this.hot.toVisualColumn(e));
    }
    /**
     * Checks if the provided column is hidden.
     *
     * @param {number} column Visual column index.
     * @returns {boolean}
     */
    isHidden(e) {
      return ps(Sa, this).getValueAtIndex(this.hot.toPhysicalColumn(e)) || !1;
    }
    /**
     * Get if trim config is valid. Check whether all of the provided column indexes are within the bounds of the table.
     *
     * @param {Array} hiddenColumns List of hidden column indexes.
     * @returns {boolean}
     */
    isValidConfig(e) {
      const t = this.hot.countCols();
      return Array.isArray(e) && e.length > 0 ? e.every((i) => Number.isInteger(i) && i >= 0 && i < t) : !1;
    }
    /**
     * Reset all rendered cells meta.
     *
     * @private
     */
    resetCellsMeta() {
      z(this.hot.getCellsMeta(), (e) => {
        e && (e.skipColumnOnPaste = !1);
      });
    }
    /**
     * Destroys the plugin instance.
     */
    destroy() {
      yb(qa, this, null), yb(Sa, this, null), super.destroy();
    }
  }
  function v$e(n, e) {
    if (this.isHidden(e))
      return 0;
    if (ps(qa, this).indicators && (this.isHidden(e + 1) || this.isHidden(e - 1)) && typeof n == "number" && this.hot.hasColHeaders())
      return n + 15;
  }
  function w$e(n, e, t) {
    if (ps(qa, this).copyPasteEnabled === !1 && this.isHidden(e) && (t.skipColumnOnPaste = !0), this.isHidden(e - 1))
      t.className = t.className || "", t.className.indexOf("afterHiddenColumn") === -1 && (t.className += " afterHiddenColumn");
    else if (t.className) {
      const i = t.className.split(" ");
      if (i.length > 0) {
        const r = i.indexOf("afterHiddenColumn");
        r > -1 && i.splice(r, 1), t.className = i.join(" ");
      }
    }
  }
  function y$e(n) {
    if (ps(qa, this).copyPasteEnabled)
      return n;
    const e = [], t = (i, r, s, o) => {
      e.push({
        startRow: i,
        endRow: r,
        startCol: s,
        endCol: o
      });
    };
    return z(n, (i) => {
      let r = !0, s = 0;
      $e(i.startCol, i.endCol, (o) => {
        this.isHidden(o) ? (r || t(i.startRow, i.endRow, s, o - 1), r = !0) : (r && (s = o), o === i.endCol && t(i.startRow, i.endRow, s, o), r = !1);
      });
    }), e;
  }
  function C$e(n, e) {
    if (!ps(qa, this).indicators || n < 0)
      return;
    const t = [];
    n >= 1 && this.isHidden(n - 1) && t.push("afterHiddenColumn"), n < this.hot.countCols() - 1 && this.isHidden(n + 1) && t.push("beforeHiddenColumn"), ue(e, t);
  }
  function S$e(n) {
    n.items.push({
      name: ut
    }, f$e(this), g$e(this));
  }
  function _$e() {
    Array.isArray(ps(qa, this).columns) && this.hideColumns(ps(qa, this).columns);
  }
  function R$e(n) {
    return {
      key: "hidden_rows_hide",
      name() {
        const e = this.getSelectedLast();
        let t = 0;
        if (Array.isArray(e)) {
          const [i, , r] = e;
          i - r !== 0 && (t = 1);
        }
        return this.getTranslatedPhrase(BN, t);
      },
      callback() {
        const {
          from: e,
          to: t
        } = this.getSelectedRangeLast(), i = Math.max(Math.min(e.row, t.row), 0), r = Math.max(e.row, t.row), s = [];
        for (let l = i; l <= r; l += 1)
          s.push(l);
        n.hideRows(s);
        const o = s[s.length - 1], a = this.rowIndexMapper.getNearestNotHiddenIndex(o, 1, !0);
        Number.isInteger(a) && a >= 0 ? this.selectRows(a) : this.deselectCell(), this.render(), this.view.adjustElementsSize();
      },
      disabled: !1,
      hidden() {
        return !(this.selection.isSelectedByRowHeader() || this.selection.isSelectedByCorner());
      }
    };
  }
  function E$e(n) {
    const e = [];
    return {
      key: "hidden_rows_show",
      name() {
        const t = e.length > 1 ? 1 : 0;
        return this.getTranslatedPhrase(VN, t);
      },
      callback() {
        var t, i;
        if (e.length === 0)
          return;
        let r = e[0], s = e[e.length - 1];
        r = (t = this.rowIndexMapper.getNearestNotHiddenIndex(r - 1, -1)) !== null && t !== void 0 ? t : 0, s = (i = this.rowIndexMapper.getNearestNotHiddenIndex(s + 1, 1)) !== null && i !== void 0 ? i : this.countRows() - 1, n.showRows(e), this.render(), this.view.adjustElementsSize(), s - r + 1 === this.countRows() || this.selectRows(r, s);
      },
      disabled: !1,
      hidden() {
        const t = mt(n.getHiddenRows(), (h) => this.toPhysicalRow(h));
        if (!(this.selection.isSelectedByRowHeader() || this.selection.isSelectedByCorner()) || t.length < 1)
          return !0;
        e.length = 0;
        const i = this.getSelectedRangeLast(), r = i.getTopStartCorner().row, s = i.getBottomEndCorner().row, o = this.rowIndexMapper, a = o.getRenderableFromVisualIndex(r), l = o.getRenderableFromVisualIndex(s), c = o.getNotTrimmedIndexes(), u = [];
        if (r !== s) {
          const h = s - r + 1, d = l - a + 1;
          if (h > d) {
            const f = c.slice(r, s + 1);
            u.push(...f.filter((g) => t.includes(g)));
          }
        } else if (a === 0 && a < r)
          u.push(...c.slice(0, r));
        else if (a === null)
          u.push(...c.slice(0, this.countRows()));
        else {
          const h = this.countRows() - 1, d = o.getRenderableFromVisualIndex(o.getNearestNotHiddenIndex(h, -1));
          l === d && h > s && u.push(...c.slice(s + 1));
        }
        return z(u, (h) => {
          e.push(this.toVisualRow(h));
        }), e.length === 0;
      }
    };
  }
  function x$e(n, e) {
    cK(n, e), e.add(n);
  }
  function wW(n, e, t) {
    cK(n, e), e.set(n, t);
  }
  function cK(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function Ks(n, e) {
    return n.get(fu(n, e));
  }
  function Cb(n, e, t) {
    return n.set(fu(n, e), t), t;
  }
  function fu(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  Ie.getSingleton().register("beforeHideRows");
  Ie.getSingleton().register("afterHideRows");
  Ie.getSingleton().register("beforeUnhideRows");
  Ie.getSingleton().register("afterUnhideRows");
  const CM = "hiddenRows", T$e = 320;
  var pc = /* @__PURE__ */ new WeakMap(), _a = /* @__PURE__ */ new WeakMap(), Kh = /* @__PURE__ */ new WeakSet();
  class M$e extends Lt {
    constructor() {
      super(...arguments), x$e(this, Kh), wW(this, pc, {}), wW(this, _a, null);
    }
    static get PLUGIN_KEY() {
      return CM;
    }
    static get PLUGIN_PRIORITY() {
      return T$e;
    }
    /**
     * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link HiddenRows#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return !!this.hot.getSettings()[CM];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
    enablePlugin() {
      var e = this;
      if (this.enabled)
        return;
      const t = this.hot.getSettings()[CM];
      at(t) && (Cb(pc, this, t), dn(t.copyPasteEnabled) && (t.copyPasteEnabled = !0)), Cb(_a, this, new U1()), Ks(_a, this).addLocalHook("init", () => fu(Kh, this, D$e).call(this)), this.hot.rowIndexMapper.registerMap(this.pluginName, Ks(_a, this)), this.addHook("afterContextMenuDefaultOptions", function() {
        for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
          r[s] = arguments[s];
        return fu(Kh, e, k$e).call(e, ...r);
      }), this.addHook("afterGetCellMeta", (i, r, s) => fu(Kh, this, P$e).call(this, i, r, s)), this.addHook("modifyRowHeight", (i, r) => fu(Kh, this, A$e).call(this, i, r)), this.addHook("afterGetRowHeader", function() {
        for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
          r[s] = arguments[s];
        return fu(Kh, e, O$e).call(e, ...r);
      }), this.addHook("modifyCopyableRange", (i) => fu(Kh, this, I$e).call(this, i)), super.enablePlugin();
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`hiddenRows`](@/api/options.md#hiddenrows)
     */
    updatePlugin() {
      this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
    disablePlugin() {
      this.hot.rowIndexMapper.unregisterMap(this.pluginName), Cb(pc, this, {}), super.disablePlugin(), this.resetCellsMeta();
    }
    /**
     * Shows the rows provided in the array.
     *
     * @param {number[]} rows Array of visual row indexes.
     */
    showRows(e) {
      const t = this.getHiddenRows(), i = this.isValidConfig(e);
      let r = t;
      const s = Ks(_a, this).getValues().slice(), o = e.length > 0;
      if (i && o) {
        const l = e.map((c) => this.hot.toPhysicalRow(c));
        z(l, (c) => {
          s[c] = !1;
        }), r = li(s, (c, u, h) => (u && c.push(this.hot.toVisualRow(h)), c), []);
      }
      this.hot.runHooks("beforeUnhideRows", t, r, i && o) !== !1 && (i && o && Ks(_a, this).setValues(s), this.hot.runHooks("afterUnhideRows", t, r, i && o, i && r.length < t.length));
    }
    /**
     * Shows the row provided as row index (counting from 0).
     *
     * @param {...number} row Visual row index.
     */
    showRow() {
      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++)
        t[i] = arguments[i];
      this.showRows(t);
    }
    /**
     * Hides the rows provided in the array.
     *
     * @param {number[]} rows Array of visual row indexes.
     */
    hideRows(e) {
      const t = this.getHiddenRows(), i = this.isValidConfig(e);
      let r = t;
      i && (r = Array.from(new Set(t.concat(e)))), this.hot.runHooks("beforeHideRows", t, r, i) !== !1 && (i && this.hot.batchExecution(() => {
        z(e, (o) => {
          Ks(_a, this).setValueAtIndex(this.hot.toPhysicalRow(o), !0);
        });
      }, !0), this.hot.runHooks("afterHideRows", t, r, i, i && r.length > t.length));
    }
    /**
     * Hides the row provided as row index (counting from 0).
     *
     * @param {...number} row Visual row index.
     */
    hideRow() {
      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++)
        t[i] = arguments[i];
      this.hideRows(t);
    }
    /**
     * Returns an array of visual indexes of hidden rows.
     *
     * @returns {number[]}
     */
    getHiddenRows() {
      return mt(Ks(_a, this).getHiddenIndexes(), (e) => this.hot.toVisualRow(e));
    }
    /**
     * Checks if the provided row is hidden.
     *
     * @param {number} row Visual row index.
     * @returns {boolean}
     */
    isHidden(e) {
      return Ks(_a, this).getValueAtIndex(this.hot.toPhysicalRow(e)) || !1;
    }
    /**
     * Checks whether all of the provided row indexes are within the bounds of the table.
     *
     * @param {Array} hiddenRows List of hidden visual row indexes.
     * @returns {boolean}
     */
    isValidConfig(e) {
      const t = this.hot.countRows();
      return Array.isArray(e) && e.length > 0 ? e.every((i) => Number.isInteger(i) && i >= 0 && i < t) : !1;
    }
    /**
     * Resets all rendered cells meta.
     *
     * @private
     */
    resetCellsMeta() {
      z(this.hot.getCellsMeta(), (e) => {
        e && (e.skipRowOnPaste = !1);
      });
    }
    /**
     * Destroys the plugin instance.
     */
    destroy() {
      Cb(pc, this, null), Cb(_a, this, null), super.destroy();
    }
  }
  function A$e(n, e) {
    return this.isHidden(e) ? 0 : n;
  }
  function P$e(n, e, t) {
    if (Ks(pc, this).copyPasteEnabled === !1 && this.isHidden(n) && (t.skipRowOnPaste = !0), this.isHidden(n - 1))
      t.className = t.className || "", t.className.indexOf("afterHiddenRow") === -1 && (t.className += " afterHiddenRow");
    else if (t.className) {
      const i = t.className.split(" ");
      if (i.length > 0) {
        const r = i.indexOf("afterHiddenRow");
        r > -1 && i.splice(r, 1), t.className = i.join(" ");
      }
    }
  }
  function I$e(n) {
    if (Ks(pc, this).copyPasteEnabled)
      return n;
    const e = [], t = (i, r, s, o) => {
      e.push({
        startRow: i,
        endRow: r,
        startCol: s,
        endCol: o
      });
    };
    return z(n, (i) => {
      let r = !0, s = 0;
      $e(i.startRow, i.endRow, (o) => {
        this.isHidden(o) ? (r || t(s, o - 1, i.startCol, i.endCol), r = !0) : (r && (s = o), o === i.endRow && t(s, o, i.startCol, i.endCol), r = !1);
      });
    }), e;
  }
  function O$e(n, e) {
    if (!Ks(pc, this).indicators || n < 0)
      return;
    const t = [];
    n >= 1 && this.isHidden(n - 1) && t.push("afterHiddenRow"), n < this.hot.countRows() - 1 && this.isHidden(n + 1) && t.push("beforeHiddenRow"), ue(e, t);
  }
  function k$e(n) {
    n.items.push({
      name: ut
    }, R$e(this), E$e(this));
  }
  function D$e() {
    Array.isArray(Ks(pc, this).rows) && this.hideRows(Ks(pc, this).rows);
  }
  function N$e(n) {
    return {
      key: "freeze_column",
      name() {
        return this.getTranslatedPhrase(CN);
      },
      callback(e, t) {
        const [{
          start: {
            col: i
          }
        }] = t;
        n.freezeColumn(i), this.render(), this.view.adjustElementsSize();
      },
      hidden() {
        const e = this.getSelectedRange();
        let t = !1;
        return (e === void 0 || e.length > 1 || e[0].from.col !== e[0].to.col || e[0].from.col <= this.getSettings().fixedColumnsStart - 1) && (t = !0), t;
      }
    };
  }
  function L$e(n) {
    return {
      key: "unfreeze_column",
      name() {
        return this.getTranslatedPhrase(SN);
      },
      callback(e, t) {
        const [{
          start: {
            col: i
          }
        }] = t;
        n.unfreezeColumn(i), this.render(), this.view.adjustElementsSize();
      },
      hidden() {
        const e = this.getSelectedRange();
        let t = !1;
        return (e === void 0 || e.length > 1 || e[0].from.col !== e[0].to.col || e[0].from.col >= this.getSettings().fixedColumnsStart) && (t = !0), t;
      }
    };
  }
  function H$e(n, e) {
    uK(n, e), e.add(n);
  }
  function $$e(n, e, t) {
    uK(n, e), e.set(n, t);
  }
  function uK(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function yI(n, e) {
    return n.get(nR(n, e));
  }
  function SM(n, e, t) {
    return n.set(nR(n, e), t), t;
  }
  function nR(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  Ie.getSingleton().register("beforeColumnFreeze");
  Ie.getSingleton().register("afterColumnFreeze");
  Ie.getSingleton().register("beforeColumnUnfreeze");
  Ie.getSingleton().register("afterColumnUnfreeze");
  const yW = "manualColumnFreeze", F$e = 110;
  var dd = /* @__PURE__ */ new WeakMap(), _M = /* @__PURE__ */ new WeakSet();
  class B$e extends Lt {
    constructor() {
      super(...arguments), H$e(this, _M), $$e(this, dd, !1);
    }
    static get PLUGIN_KEY() {
      return yW;
    }
    static get PLUGIN_PRIORITY() {
      return F$e;
    }
    /**
     * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link ManualColumnFreeze#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return !!this.hot.getSettings()[yW];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
    enablePlugin() {
      this.enabled || (this.addHook("afterContextMenuDefaultOptions", (e) => nR(_M, this, V$e).call(this, e)), this.addHook("beforeColumnMove", (e, t) => nR(_M, this, W$e).call(this, e, t)), super.enablePlugin());
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
    disablePlugin() {
      SM(dd, this, !1), super.disablePlugin();
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`manualColumnFreeze`](@/api/options.md#manualcolumnfreeze)
     */
    updatePlugin() {
      this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
    }
    /**
     * Freezes the specified column (adds it to fixed columns).
     *
     * `freezeColumn()` doesn't re-render the table,
     * so you need to call the `render()` method afterward.
     *
     * @param {number} column Visual column index.
     */
    freezeColumn(e) {
      const t = this.hot.getSettings(), i = t.fixedColumnsStart < this.hot.countCols() && e > t.fixedColumnsStart - 1;
      yI(dd, this) || SM(dd, this, !0), this.hot.runHooks("beforeColumnFreeze", e, i) !== !1 && (i && (this.hot.columnIndexMapper.moveIndexes(e, t.fixedColumnsStart), t._fixedColumnsStart += 1), this.hot.runHooks("afterColumnFreeze", e, i));
    }
    /**
     * Unfreezes the given column (remove it from fixed columns and bring to it's previous position).
     *
     * @param {number} column Visual column index.
     */
    unfreezeColumn(e) {
      const t = this.hot.getSettings(), i = t.fixedColumnsStart > 0 && e <= t.fixedColumnsStart - 1;
      yI(dd, this) || SM(dd, this, !0), this.hot.runHooks("beforeColumnUnfreeze", e, i) !== !1 && (i && (t._fixedColumnsStart -= 1, this.hot.columnIndexMapper.moveIndexes(e, t.fixedColumnsStart)), this.hot.runHooks("afterColumnUnfreeze", e, i));
    }
  }
  function V$e(n) {
    n.items.push({
      name: "---------"
    }, N$e(this), L$e(this));
  }
  function W$e(n, e) {
    if (yI(dd, this)) {
      const t = this.hot.getSettings().fixedColumnsStart;
      if (e < t || n.some((i) => i < t))
        return !1;
    }
  }
  function yC(n, e, t) {
    return (e = j$e(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function j$e(n) {
    var e = z$e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function z$e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  const RM = 0, CW = 1, SW = 2, bg = "px";
  let hK = class {
    constructor(e) {
      yC(this, "hot", void 0), yC(this, "_element", null), yC(this, "state", RM), yC(this, "inlineProperty", void 0), this.hot = e, this.inlineProperty = e.isRtl() ? "right" : "left";
    }
    /**
     * Add created UI elements to table.
     *
     * @param {HTMLElement} wrapper Element which are parent for our UI element.
     */
    appendTo(e) {
      e.appendChild(this._element), this.state = SW;
    }
    /**
     * Method for create UI element. Only create, without append to table.
     */
    build() {
      this.state === RM && (this._element = this.hot.rootDocument.createElement("div"), this.state = CW);
    }
    /**
     * Method for remove UI element.
     */
    destroy() {
      this.isAppended() && this._element.parentElement.removeChild(this._element), this._element = null, this.state = RM;
    }
    /**
     * Check if UI element are appended.
     *
     * @returns {boolean}
     */
    isAppended() {
      return this.state === SW;
    }
    /**
     * Check if UI element are built.
     *
     * @returns {boolean}
     */
    isBuilt() {
      return this.state >= CW;
    }
    /**
     * Setter for position.
     *
     * @param {number} top New top position of the element.
     * @param {number} inlinePosition New left/right (depends on LTR/RTL document mode) position of the element.
     */
    setPosition(e, t) {
      sr(e) && (this._element.style.top = e + bg), sr(t) && (this._element.style[this.inlineProperty] = t + bg);
    }
    /**
     * Getter for the element position.
     *
     * @returns {object} Object contains left and top position of the element.
     */
    getPosition() {
      const e = this._element.style;
      return {
        top: e.top ? parseInt(e.top, 10) : 0,
        start: e[this.inlineProperty] ? parseInt(e[this.inlineProperty], 10) : 0
      };
    }
    /**
     * Setter for the element size.
     *
     * @param {number} width New width of the element.
     * @param {number} height New height of the element.
     */
    setSize(e, t) {
      sr(e) && (this._element.style.width = e + bg), sr(t) && (this._element.style.height = t + bg);
    }
    /**
     * Getter for the element position.
     *
     * @returns {object} Object contains height and width of the element.
     */
    getSize() {
      return {
        width: this._element.style.width ? parseInt(this._element.style.width, 10) : 0,
        height: this._element.style.height ? parseInt(this._element.style.height, 10) : 0
      };
    }
    /**
     * Setter for the element offset. Offset means marginTop and marginLeft of the element.
     *
     * @param {number} top New margin top of the element.
     * @param {number} inlineOffset New margin left/right (depends on LTR/RTL document mode) of the element.
     */
    setOffset(e, t) {
      sr(e) && (this._element.style.marginTop = e + bg), sr(t) && (this._element.style[`margin${pr(this.inlineProperty)}`] = t + bg);
    }
    /**
     * Getter for the element offset.
     *
     * @returns {object} Object contains top and left offset of the element.
     */
    getOffset() {
      const e = this._element.style, t = `margin${pr(this.inlineProperty)}`;
      return {
        top: e.marginTop ? parseInt(e.marginTop, 10) : 0,
        start: e[t] ? parseInt(e[t], 10) : 0
      };
    }
  };
  const U$e = "ht__manualColumnMove--backlight";
  let G$e = class extends hK {
    /**
     * Custom className on build process.
     */
    build() {
      super.build(), ue(this._element, U$e);
    }
  };
  const Y$e = "ht__manualColumnMove--guideline";
  let K$e = class extends hK {
    /**
     * Custom className on build process.
     */
    build() {
      super.build(), ue(this._element, Y$e);
    }
  };
  function q$e(n, e) {
    dK(n, e), e.add(n);
  }
  function Oo(n, e, t) {
    dK(n, e), e.set(n, t);
  }
  function dK(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function Xr(n, e, t) {
    return n.set(gu(n, e), t), t;
  }
  function Le(n, e) {
    return n.get(gu(n, e));
  }
  function gu(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  Ie.getSingleton().register("beforeColumnMove");
  Ie.getSingleton().register("afterColumnMove");
  const EM = "manualColumnMove", X$e = 120, _W = "ht__manualColumnMove", iR = "show-ui", CI = "on-moving--columns", SI = "after-selection--columns";
  var Tr = /* @__PURE__ */ new WeakMap(), yu = /* @__PURE__ */ new WeakMap(), mc = /* @__PURE__ */ new WeakMap(), DS = /* @__PURE__ */ new WeakMap(), Iu = /* @__PURE__ */ new WeakMap(), Rr = /* @__PURE__ */ new WeakMap(), CC = /* @__PURE__ */ new WeakMap(), js = /* @__PURE__ */ new WeakMap(), kg = /* @__PURE__ */ new WeakMap(), rR = /* @__PURE__ */ new WeakMap(), Pv = /* @__PURE__ */ new WeakMap(), qh = /* @__PURE__ */ new WeakSet();
  class Z$e extends Lt {
    constructor() {
      super(...arguments), q$e(this, qh), Oo(this, Tr, new G$e(this.hot)), Oo(this, yu, new K$e(this.hot)), Oo(this, mc, []), Oo(this, DS, 0), Oo(this, Iu, !1), Oo(this, Rr, {}), Oo(this, CC, void 0), Oo(this, js, void 0), Oo(this, kg, void 0), Oo(this, rR, void 0), Oo(this, Pv, void 0);
    }
    static get PLUGIN_KEY() {
      return EM;
    }
    static get PLUGIN_PRIORITY() {
      return X$e;
    }
    /**
     * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link ManualColumnMove#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return !!this.hot.getSettings()[EM];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
    enablePlugin() {
      var e = this;
      this.enabled || (this.addHook("beforeOnCellMouseDown", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return gu(qh, e, Q$e).call(e, ...i);
      }), this.addHook("beforeOnCellMouseOver", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return gu(qh, e, e2e).call(e, ...i);
      }), this.addHook("afterScrollVertically", () => gu(qh, this, n2e).call(this)), this.addHook("afterLoadData", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return gu(qh, e, i2e).call(e, ...i);
      }), this.buildPluginUI(), this.registerEvents(), ue(this.hot.rootElement, _W), super.enablePlugin());
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`manualColumnMove`](@/api/options.md#manualcolumnmove)
     */
    updatePlugin() {
      this.disablePlugin(), this.enablePlugin(), this.moveBySettingsOrLoad(), super.updatePlugin();
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
    disablePlugin() {
      Ze(this.hot.rootElement, _W), this.unregisterEvents(), Le(Tr, this).destroy(), Le(yu, this).destroy(), super.disablePlugin();
    }
    /**
     * Moves a single column.
     *
     * @param {number} column Visual column index to be moved.
     * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.
     * To check the visualization of the final index, please take a look at [documentation](@/guides/columns/column-moving/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
     * @fires Hooks#beforeColumnMove
     * @fires Hooks#afterColumnMove
     * @returns {boolean}
     */
    moveColumn(e, t) {
      return this.moveColumns([e], t);
    }
    /**
     * Moves a multiple columns.
     *
     * @param {Array} columns Array of visual column indexes to be moved.
     * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.
     * To check the visualization of the final index, please take a look at [documentation](@/guides/columns/column-moving/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
     * @fires Hooks#beforeColumnMove
     * @fires Hooks#afterColumnMove
     * @returns {boolean}
     */
    moveColumns(e, t) {
      const i = Le(CC, this), r = this.isMovePossible(e, t), s = this.hot.runHooks("beforeColumnMove", e, t, i, r);
      if (Xr(CC, this, void 0), s === !1)
        return;
      r && this.hot.columnIndexMapper.moveIndexes(e, t);
      const o = r && this.isColumnOrderChanged(e, t);
      return this.hot.runHooks("afterColumnMove", e, t, i, r, o), o;
    }
    /**
     * Drag a single column to drop index position.
     *
     * @param {number} column Visual column index to be dragged.
     * @param {number} dropIndex Visual column index, being a drop index for the moved columns. Points to where we are going to drop the moved elements.
     * To check visualization of drop index please take a look at [documentation](@/guides/columns/column-moving/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
     * @fires Hooks#beforeColumnMove
     * @fires Hooks#afterColumnMove
     * @returns {boolean}
     */
    dragColumn(e, t) {
      return this.dragColumns([e], t);
    }
    /**
     * Drag multiple columns to drop index position.
     *
     * @param {Array} columns Array of visual column indexes to be dragged.
     * @param {number} dropIndex Visual column index, being a drop index for the moved columns. Points to where we are going to drop the moved elements.
     * To check visualization of drop index please take a look at [documentation](@/guides/columns/column-moving/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
     * @fires Hooks#beforeColumnMove
     * @fires Hooks#afterColumnMove
     * @returns {boolean}
     */
    dragColumns(e, t) {
      const i = this.countFinalIndex(e, t);
      return Xr(CC, this, t), this.moveColumns(e, i);
    }
    /**
     * Indicates if it's possible to move columns to the desired position. Some of the actions aren't
     * possible, i.e. You can’t move more than one element to the last position.
     *
     * @param {Array} movedColumns Array of visual column indexes to be moved.
     * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.
     * To check the visualization of the final index, please take a look at [documentation](@/guides/columns/column-moving/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
     * @returns {boolean}
     */
    isMovePossible(e, t) {
      const i = this.hot.columnIndexMapper.getNotTrimmedIndexesLength(), r = e.length + t > i, s = t < 0, o = e.some((l) => l < 0), a = e.some((l) => l >= i);
      return !(r || s || o || a);
    }
    /**
     * Indicates if order of columns was changed.
     *
     * @private
     * @param {Array} movedColumns Array of visual column indexes to be moved.
     * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.
     * To check the visualization of the final index, please take a look at [documentation](@/guides/columns/column-moving/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
     * @returns {boolean}
     */
    isColumnOrderChanged(e, t) {
      return e.some((i, r) => i - r !== t);
    }
    /**
     * Count the final column index from the drop index.
     *
     * @private
     * @param {Array} movedColumns Array of visual column indexes to be moved.
     * @param {number} dropIndex Visual column index, being a drop index for the moved columns.
     * @returns {number} Visual column index, being a start index for the moved columns.
     */
    countFinalIndex(e, t) {
      const i = li(e, (r, s) => (s < t && (r += 1), r), 0);
      return t - i;
    }
    /**
     * Gets the sum of the widths of columns in the provided range.
     *
     * @private
     * @param {number} fromColumn Visual column index.
     * @param {number} toColumn Visual column index.
     * @returns {number}
     */
    getColumnsWidth(e, t) {
      const i = this.hot.columnIndexMapper;
      let r = 0;
      for (let s = e; s <= t; s += 1) {
        const o = i.getRenderableFromVisualIndex(s);
        s < 0 ? r += this.hot.view._wt.wtViewport.getRowHeaderWidth() || 0 : o !== null && (r += this.hot.view._wt.wtTable.getStretchedColumnWidth(o) || 0);
      }
      return r;
    }
    /**
     * Loads initial settings when persistent state is saved or when plugin was initialized as an array.
     *
     * @private
     */
    moveBySettingsOrLoad() {
      const e = this.hot.getSettings()[EM];
      if (Array.isArray(e))
        this.moveColumns(e, 0);
      else if (e !== void 0) {
        const t = this.persistentStateLoad();
        t.length && this.moveColumns(t, 0);
      }
    }
    /**
     * Checks if the provided column is in the fixedColumnsTop section.
     *
     * @private
     * @param {number} column Visual column index to check.
     * @returns {boolean}
     */
    isFixedColumnsStart(e) {
      return e < this.hot.getSettings().fixedColumnsStart;
    }
    /**
     * Saves the manual column positions to the persistent state (the {@link Options#persistentState} option has to be enabled).
     *
     * @private
     * @fires Hooks#persistentStateSave
     */
    persistentStateSave() {
      this.hot.runHooks("persistentStateSave", "manualColumnMove", this.hot.columnIndexMapper.getIndexesSequence());
    }
    /**
     * Loads the manual column positions from the persistent state (the {@link Options#persistentState} option has to be enabled).
     *
     * @private
     * @fires Hooks#persistentStateLoad
     * @returns {Array} Stored state.
     */
    persistentStateLoad() {
      const e = {};
      return this.hot.runHooks("persistentStateLoad", "manualColumnMove", e), e.value ? e.value : [];
    }
    /**
     * Prepares an array of indexes based on actual selection.
     *
     * @private
     * @param {number} start The start index.
     * @param {number} end The end index.
     * @returns {Array}
     */
    prepareColumnsToMoving(e, t) {
      const i = [];
      return $e(e, t, (r) => {
        i.push(r);
      }), i;
    }
    /**
     * Update the UI visual position.
     *
     * @private
     */
    refreshPositions() {
      const e = this.hot.view.getFirstFullyVisibleColumn();
      this.isFixedColumnsStart(Le(js, this)) && e > 0 && this.hot.scrollViewportTo({
        col: this.hot.columnIndexMapper.getNearestNotHiddenIndex(e - 1, -1)
      });
      const t = this.hot.view._wt.wtTable, i = this.hot.view._wt.wtOverlays.scrollableElement, r = typeof i.scrollX == "number" ? i.scrollX : i.scrollLeft;
      let s = this.hot.view.THEAD.offsetLeft + this.getColumnsWidth(0, Le(js, this) - 1);
      const o = t.hider.offsetWidth, a = t.TBODY.offsetLeft, l = Le(Tr, this).getOffset().start, c = Le(Tr, this).getSize().width;
      let u = 0, h = 0;
      if (this.hot.isRtl()) {
        const g = this.hot.rootWindow, p = fn(this.hot.rootElement), m = g.innerWidth - Le(kg, this) - p;
        h = g.innerWidth - Le(Rr, this).eventPageX - m - (i.scrollX === void 0 ? r : 0);
      } else
        h = Le(Rr, this).eventPageX - (Le(kg, this) - (i.scrollX === void 0 ? r : 0));
      if (Le(rR, this) && (u = this.hot.view._wt.wtOverlays.inlineStartOverlay.clone.wtTable.getColumnHeader(-1).offsetWidth), this.isFixedColumnsStart(Le(js, this)) && (s += r), s += u, Le(js, this) < 0)
        Le(Pv, this) > 0 ? Le(Rr, this).col = 0 : Le(Rr, this).col = e > 0 ? e - 1 : e;
      else if (Le(Rr, this).TD.offsetWidth / 2 + s <= h) {
        const g = Le(js, this) >= Le(DS, this) ? Le(DS, this) - 1 : Le(js, this);
        Le(Rr, this).col = g + 1, s += Le(Rr, this).TD.offsetWidth;
      } else
        Le(Rr, this).col = Le(js, this);
      let d = h, f = s;
      h + c + l >= o ? d = o - c - l : h + l < a + u && (d = a + u + Math.abs(l)), s >= o - 1 ? f = o - 1 : f === 0 ? f = 1 : i.scrollX !== void 0 && Le(js, this) < Le(Pv, this) && (f -= Le(kg, this) <= i.scrollX ? Le(kg, this) : 0), Le(Tr, this).setPosition(null, d), Le(yu, this).setPosition(null, f);
    }
    /**
     * Binds the events used by the plugin.
     *
     * @private
     */
    registerEvents() {
      const {
        documentElement: e
      } = this.hot.rootDocument;
      this.eventManager.addEventListener(e, "mousemove", (t) => gu(qh, this, J$e).call(this, t)), this.eventManager.addEventListener(e, "mouseup", () => gu(qh, this, t2e).call(this));
    }
    /**
     * Unbinds the events used by the plugin.
     *
     * @private
     */
    unregisterEvents() {
      this.eventManager.clear();
    }
    /**
     * Builds the plugin's UI.
     *
     * @private
     */
    buildPluginUI() {
      Le(Tr, this).build(), Le(yu, this).build();
    }
    /**
     * Callback for the `afterLoadData` hook.
     *
     * @private
     */
    /**
     * Destroys the plugin instance.
     */
    destroy() {
      Le(Tr, this).destroy(), Le(yu, this).destroy(), super.destroy();
    }
  }
  function Q$e(n, e, t, i) {
    const r = this.hot.view._wt.wtTable, s = this.hot.selection.isSelectedByColumnHeader(), o = this.hot.getSelectedRangeLast(), a = Ue(n.target, "sortAction");
    if (!o || !s || Le(Iu, this) || n.button !== 0 || a) {
      Xr(Iu, this, !1), Le(mc, this).length = 0, Ze(this.hot.rootElement, [CI, iR]);
      return;
    }
    const l = Le(yu, this).isBuilt() && !Le(yu, this).isAppended(), c = Le(Tr, this).isBuilt() && !Le(Tr, this).isAppended();
    l && c && (Le(yu, this).appendTo(r.hider), Le(Tr, this).appendTo(r.hider));
    const {
      from: u,
      to: h
    } = o, d = Math.min(u.col, h.col), f = Math.max(u.col, h.col);
    if (e.row < 0 && e.col >= d && e.col <= f) {
      i.column = !0, Xr(Iu, this, !0);
      const g = t.firstChild ? v9(n, t.firstChild).x : n.offsetX;
      Le(Rr, this).eventPageX = n.pageX, Xr(js, this, e.col), Le(Rr, this).TD = t, Le(Rr, this).col = e.col, Xr(mc, this, this.prepareColumnsToMoving(d, f)), Xr(rR, this, !!this.hot.getSettings().rowHeaders), Xr(DS, this, this.hot.countCols()), Xr(Pv, this, this.hot.getSettings().fixedColumnsStart), Xr(kg, this, _i(this.hot.rootElement).left);
      const p = Le(rR, this) ? -1 : 0, m = r.holder.scrollTop + r.getColumnHeaderHeight(0) + 1, v = e.col < Le(Pv, this), y = this.hot.view._wt.wtOverlays.inlineStartOverlay.getOverlayOffset(), w = Math.abs(g - (this.hot.isRtl() ? t.offsetWidth : 0)), R = this.getColumnsWidth(d, e.col - 1) + w, E = this.getColumnsWidth(p, d - 1) + (v ? y : 0) + R;
      Le(Tr, this).setPosition(m, E), Le(Tr, this).setSize(this.getColumnsWidth(d, f), r.hider.offsetHeight - m), Le(Tr, this).setOffset(null, -R), ue(this.hot.rootElement, CI);
    } else
      Ze(this.hot.rootElement, SI), Xr(Iu, this, !1), Le(mc, this).length = 0;
  }
  function J$e(n) {
    Le(Iu, this) && (Le(Rr, this).eventPageX = n.pageX, this.refreshPositions());
  }
  function e2e(n, e, t, i) {
    !this.hot.getSelectedRangeLast() || !Le(Iu, this) || (Le(mc, this).indexOf(e.col) > -1 ? Ze(this.hot.rootElement, iR) : ue(this.hot.rootElement, iR), i.row = !0, i.column = !0, i.cell = !0, Xr(js, this, e.col), Le(Rr, this).TD = t);
  }
  function t2e() {
    const n = Le(Rr, this).col, e = Le(mc, this).length;
    if (Xr(js, this, void 0), Xr(Iu, this, !1), Ze(this.hot.rootElement, [CI, iR, SI]), this.hot.selection.isSelectedByColumnHeader() && ue(this.hot.rootElement, SI), e < 1 || n === void 0)
      return;
    const t = Le(mc, this)[0], i = this.hot.toPhysicalColumn(t), r = this.dragColumns(Le(mc, this), n);
    if (Le(mc, this).length = 0, r === !0) {
      this.persistentStateSave(), this.hot.render(), this.hot.view.adjustElementsSize();
      const s = this.hot.toVisualColumn(i), o = s + e - 1;
      this.hot.selectColumns(s, o);
    }
  }
  function n2e() {
    const n = this.hot.view._wt.wtTable, e = n.getColumnHeaderHeight(0) + 1, t = n.holder.scrollTop, i = e + t;
    Le(Tr, this).setPosition(i), Le(Tr, this).setSize(null, n.hider.offsetHeight - i);
  }
  function i2e() {
    this.moveBySettingsOrLoad();
  }
  function r2e(n, e) {
    fK(n, e), e.add(n);
  }
  function Ji(n, e, t) {
    fK(n, e), e.set(n, t);
  }
  function fK(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function Xn(n, e, t) {
    return n.set(Bo(n, e), t), t;
  }
  function Ee(n, e) {
    return n.get(Bo(n, e));
  }
  function Bo(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  const sR = "manualColumnResize", s2e = 130, RW = "manualColumnWidths";
  var Ql = /* @__PURE__ */ new WeakMap(), SC = /* @__PURE__ */ new WeakMap(), hs = /* @__PURE__ */ new WeakMap(), oR = /* @__PURE__ */ new WeakMap(), ja = /* @__PURE__ */ new WeakMap(), o2e = /* @__PURE__ */ new WeakMap(), lp = /* @__PURE__ */ new WeakMap(), _C = /* @__PURE__ */ new WeakMap(), zr = /* @__PURE__ */ new WeakMap(), Gl = /* @__PURE__ */ new WeakMap(), lf = /* @__PURE__ */ new WeakMap(), aR = /* @__PURE__ */ new WeakMap(), Iv = /* @__PURE__ */ new WeakMap(), Ov = /* @__PURE__ */ new WeakMap(), fs = /* @__PURE__ */ new WeakMap(), kv = /* @__PURE__ */ new WeakMap(), Ra = /* @__PURE__ */ new WeakSet();
  class a2e extends Lt {
    static get PLUGIN_KEY() {
      return sR;
    }
    static get PLUGIN_PRIORITY() {
      return s2e;
    }
    /**
     * @type {HTMLTableHeaderCellElement}
     */
    constructor(e) {
      super(e), r2e(this, Ra), Ji(this, Ql, null), Ji(this, SC, null), Ji(this, hs, []), Ji(this, oR, null), Ji(this, ja, null), Ji(this, o2e, null), Ji(this, lp, null), Ji(this, _C, null), Ji(this, zr, this.hot.rootDocument.createElement("DIV")), Ji(this, Gl, this.hot.rootDocument.createElement("DIV")), Ji(this, lf, null), Ji(this, aR, !1), Ji(this, Iv, 0), Ji(this, Ov, null), Ji(this, fs, void 0), Ji(this, kv, void 0), ue(Ee(zr, this), "manualColumnResizer"), ue(Ee(Gl, this), "manualColumnResizerGuide");
    }
    /**
     * @private
     * @returns {string}
     */
    get inlineDir() {
      return this.hot.isRtl() ? "right" : "left";
    }
    /**
     * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link ManualColumnResize#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return this.hot.getSettings()[sR];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
    enablePlugin() {
      this.enabled || (Xn(fs, this, new uh()), Ee(fs, this).addLocalHook("init", () => Bo(Ra, this, l2e).call(this)), this.hot.columnIndexMapper.registerMap(this.pluginName, Ee(fs, this)), this.addHook("modifyColWidth", (e, t) => Bo(Ra, this, g2e).call(this, e, t), 1), this.addHook("beforeStretchingColumnWidth", (e, t) => Bo(Ra, this, p2e).call(this, e, t)), this.addHook("beforeColumnResize", (e, t, i) => Bo(Ra, this, m2e).call(this, e, t, i)), this.bindEvents(), super.enablePlugin());
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`manualColumnResize`](@/api/options.md#manualcolumnresize)
     */
    updatePlugin() {
      this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
    disablePlugin() {
      Xn(kv, this, Ee(fs, this).getValues()), this.hot.columnIndexMapper.unregisterMap(this.pluginName), super.disablePlugin();
    }
    /**
     * Saves the current sizes using the persistentState plugin (the {@link Options#persistentState} option has to be enabled).
     *
     * @fires Hooks#persistentStateSave
     */
    saveManualColumnWidths() {
      this.hot.runHooks("persistentStateSave", RW, Ee(fs, this).getValues());
    }
    /**
     * Loads the previously saved sizes using the persistentState plugin (the {@link Options#persistentState} option has to be enabled).
     *
     * @returns {Array}
     * @fires Hooks#persistentStateLoad
     */
    loadManualColumnWidths() {
      const e = {};
      return this.hot.runHooks("persistentStateLoad", RW, e), e.value;
    }
    /**
     * Sets the new width for specified column index.
     *
     * @param {number} column Visual column index.
     * @param {number} width Column width (no less than 20px).
     * @returns {number} Returns new width.
     */
    setManualSize(e, t) {
      const i = Math.max(t, 20), r = this.hot.toPhysicalColumn(e);
      return Ee(fs, this).setValueAtIndex(r, i), i;
    }
    /**
     * Clears the cache for the specified column index.
     *
     * @param {number} column Visual column index.
     */
    clearManualSize(e) {
      const t = this.hot.toPhysicalColumn(e);
      Ee(fs, this).setValueAtIndex(t, null);
    }
    /**
     * Set the resize handle position.
     *
     * @private
     * @param {HTMLCellElement} TH TH HTML element.
     */
    setupHandlePosition(e) {
      if (!e.parentNode)
        return;
      Xn(Ql, this, e);
      const {
        _wt: t
      } = this.hot.view, i = t.wtTable.getCoords(Ee(Ql, this)), r = i.col;
      if (r < 0)
        return;
      const s = ti(Ee(Ql, this)), o = Ee(Ql, this).getBoundingClientRect(), a = r < t.getSetting("fixedColumnsStart");
      let l;
      a && (l = t.wtOverlays.topInlineStartCornerOverlay.getRelativeCellPosition(Ee(Ql, this), i.row, i.col)), l || (l = t.wtOverlays.topOverlay.getRelativeCellPosition(Ee(Ql, this), i.row, i.col)), Xn(SC, this, this.hot.columnIndexMapper.getVisualFromRenderableIndex(r)), Xn(hs, this, []);
      const c = this.hot.selection.isSelectedByCorner() || this.hot.selection.isSelectedByColumnHeader();
      if (this.hot.selection.isSelected() && c) {
        const u = this.hot.getSelectedRange();
        z(u, (h) => {
          const d = h.getTopStartCorner().col, f = h.getBottomEndCorner().col;
          $e(d, f, (g) => {
            Ee(hs, this).includes(g) || Ee(hs, this).push(g);
          });
        });
      }
      Ee(hs, this).includes(Ee(SC, this)) || Xn(hs, this, [Ee(SC, this)]), Xn(_C, this, l.start - 6), Xn(lp, this, parseInt(o.width, 10)), Ee(zr, this).style.top = `${l.top}px`, Ee(zr, this).style[this.inlineDir] = `${Ee(_C, this) + Ee(lp, this)}px`, Ee(zr, this).style.height = `${s}px`, this.hot.rootElement.appendChild(Ee(zr, this));
    }
    /**
     * Refresh the resize handle position.
     *
     * @private
     */
    refreshHandlePosition() {
      Ee(zr, this).style[this.inlineDir] = `${Ee(_C, this) + Ee(oR, this)}px`;
    }
    /**
     * Sets the resize guide position.
     *
     * @private
     */
    setupGuidePosition() {
      const e = parseInt(ti(Ee(zr, this)), 10), t = parseInt(Ee(zr, this).style.top, 10) + e, i = parseInt(this.hot.view.maximumVisibleElementHeight(0), 10);
      ue(Ee(zr, this), "active"), ue(Ee(Gl, this), "active"), Ee(Gl, this).style.top = `${t}px`, this.refreshGuidePosition(), Ee(Gl, this).style.height = `${i - e}px`, this.hot.rootElement.appendChild(Ee(Gl, this));
    }
    /**
     * Refresh the resize guide position.
     *
     * @private
     */
    refreshGuidePosition() {
      Ee(Gl, this).style[this.inlineDir] = Ee(zr, this).style[this.inlineDir];
    }
    /**
     * Hides both the resize handle and resize guide.
     *
     * @private
     */
    hideHandleAndGuide() {
      Ze(Ee(zr, this), "active"), Ze(Ee(Gl, this), "active");
    }
    /**
     * Checks if provided element is considered a column header.
     *
     * @private
     * @param {HTMLElement} element HTML element.
     * @returns {boolean}
     */
    checkIfColumnHeader(e) {
      const t = Gu(e, ["THEAD"], this.hot.rootElement), {
        topOverlay: i,
        topInlineStartCornerOverlay: r
      } = this.hot.view._wt.wtOverlays;
      return [i.clone.wtTable.THEAD, r.clone.wtTable.THEAD].includes(t);
    }
    /**
     * Gets the TH element from the provided element.
     *
     * @private
     * @param {HTMLElement} element HTML element.
     * @returns {HTMLElement}
     */
    getClosestTHParent(e) {
      return e.tagName !== "TABLE" ? e.tagName === "TH" ? e : this.getClosestTHParent(e.parentNode) : null;
    }
    /**
     * 'mouseover' event callback - set the handle position.
     *
     * @param {MouseEvent} event The mouse event.
     */
    /**
     * Auto-size row after doubleclick - callback.
     *
     * @private
     * @fires Hooks#beforeColumnResize
     * @fires Hooks#afterColumnResize
     */
    afterMouseDownTimeout() {
      const e = () => {
        this.hot.forceFullRender = !0, this.hot.view.render(), this.hot.view.adjustElementsSize();
      }, t = (i, r) => {
        const s = this.hot.runHooks("beforeColumnResize", Ee(ja, this), i, !0);
        s !== void 0 && Xn(ja, this, s), this.hot.getSettings().stretchH === "all" ? this.clearManualSize(i) : this.setManualSize(i, Ee(ja, this)), this.saveManualColumnWidths(), this.hot.runHooks("afterColumnResize", Ee(ja, this), i, !0), r && e();
      };
      Ee(Iv, this) >= 2 && (Ee(hs, this).length > 1 ? (z(Ee(hs, this), (r) => {
        t(r);
      }), e()) : z(Ee(hs, this), (r) => {
        t(r, !0);
      })), Xn(Iv, this, 0), Xn(Ov, this, null);
    }
    /**
     * 'mousedown' event callback.
     *
     * @param {MouseEvent} event The mouse event.
     */
    /**
     * Binds the mouse events.
     *
     * @private
     */
    bindEvents() {
      const {
        rootWindow: e,
        rootElement: t
      } = this.hot;
      this.eventManager.addEventListener(t, "mouseover", (i) => Bo(Ra, this, c2e).call(this, i)), this.eventManager.addEventListener(t, "mousedown", (i) => Bo(Ra, this, u2e).call(this, i)), this.eventManager.addEventListener(e, "mousemove", (i) => Bo(Ra, this, h2e).call(this, i)), this.eventManager.addEventListener(e, "mouseup", () => Bo(Ra, this, d2e).call(this)), this.eventManager.addEventListener(Ee(zr, this), "contextmenu", () => Bo(Ra, this, f2e).call(this));
    }
    /**
     * Modifies the provided column width, based on the plugin settings.
     *
     * @param {number} width Column width.
     * @param {number} column Visual column index.
     * @returns {number}
     */
    /**
     * Destroys the plugin instance.
     */
    destroy() {
      super.destroy();
    }
  }
  function l2e() {
    const n = this.hot.getSettings()[sR], e = this.loadManualColumnWidths();
    typeof e < "u" ? this.hot.batchExecution(() => {
      e.forEach((t, i) => {
        Ee(fs, this).setValueAtIndex(i, t);
      });
    }, !0) : Array.isArray(n) ? (this.hot.batchExecution(() => {
      n.forEach((t, i) => {
        Ee(fs, this).setValueAtIndex(i, t);
      });
    }, !0), Xn(kv, this, n)) : n === !0 && Array.isArray(Ee(kv, this)) && this.hot.batchExecution(() => {
      Ee(kv, this).forEach((t, i) => {
        Ee(fs, this).setValueAtIndex(i, t);
      });
    }, !0);
  }
  function c2e(n) {
    if (!mD(n.target) && Ee(aR, this) !== !0 && this.checkIfColumnHeader(n.target)) {
      const e = this.getClosestTHParent(n.target);
      if (!e)
        return;
      const t = e.getAttribute("colspan");
      e && (t === null || t === "1") && (Ee(lf, this) || this.setupHandlePosition(e));
    }
  }
  function u2e(n) {
    n.target.parentNode === this.hot.rootElement && Ue(n.target, "manualColumnResizer") && (this.setupHandlePosition(Ee(Ql, this)), this.setupGuidePosition(), Xn(lf, this, !0), Ee(Ov, this) === null && (Xn(Ov, this, setTimeout(() => this.afterMouseDownTimeout(), 500)), this.hot._registerTimeout(Ee(Ov, this))), Xn(Iv, this, Ee(Iv, this) + 1), this.startX = n.pageX, Xn(ja, this, Ee(lp, this)));
  }
  function h2e(n) {
    if (Ee(lf, this)) {
      const e = (n.pageX - this.startX) * this.hot.getDirectionFactor();
      Xn(oR, this, Ee(lp, this) + e), z(Ee(hs, this), (t) => {
        Xn(ja, this, this.setManualSize(t, Ee(oR, this)));
      }), this.refreshHandlePosition(), this.refreshGuidePosition();
    }
  }
  function d2e() {
    const n = () => {
      this.hot.forceFullRender = !0, this.hot.view.render(), this.hot.view.adjustElementsSize();
    }, e = (t, i) => {
      this.hot.runHooks("beforeColumnResize", Ee(ja, this), t, !1), i && n(), this.saveManualColumnWidths(), this.hot.runHooks("afterColumnResize", Ee(ja, this), t, !1);
    };
    Ee(lf, this) && (this.hideHandleAndGuide(), Xn(lf, this, !1), Ee(ja, this) !== Ee(lp, this) && (Ee(hs, this).length > 1 ? (z(Ee(hs, this), (i) => {
      e(i);
    }), n()) : z(Ee(hs, this), (i) => {
      e(i, !0);
    })), this.setupHandlePosition(Ee(Ql, this)));
  }
  function f2e() {
    this.hideHandleAndGuide(), this.hot.rootElement.removeChild(Ee(zr, this)), this.hot.rootElement.removeChild(Ee(Gl, this)), Xn(lf, this, !1), Xn(aR, this, !0), this.hot._registerImmediate(() => {
      Xn(aR, this, !1);
    });
  }
  function g2e(n, e) {
    let t = n;
    if (this.enabled) {
      const i = this.hot.toPhysicalColumn(e), r = Ee(fs, this).getValueAtIndex(i);
      this.hot.getSettings()[sR] && r && (t = r);
    }
    return t;
  }
  function p2e(n, e) {
    let t = Ee(fs, this).getValueAtIndex(e);
    return t === null && (t = n), t;
  }
  function m2e() {
    this.hot.view._wt.wtViewport.resetHasOversizedColumnHeadersMarked();
  }
  function xM(n, e, t) {
    return (e = b2e(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function b2e(n) {
    var e = v2e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function v2e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  const TM = 0, EW = 1, xW = 2, vg = "px";
  let gK = class {
    constructor(e) {
      xM(this, "hot", void 0), xM(this, "_element", null), xM(this, "state", TM), this.hot = e;
    }
    /**
     * Add created UI elements to table.
     *
     * @param {HTMLElement} wrapper Element which are parent for our UI element.
     */
    appendTo(e) {
      e.appendChild(this._element), this.state = xW;
    }
    /**
     * Method for create UI element. Only create, without append to table.
     */
    build() {
      this.state === TM && (this._element = this.hot.rootDocument.createElement("div"), this.state = EW);
    }
    /**
     * Method for remove UI element.
     */
    destroy() {
      this.isAppended() && this._element.parentElement.removeChild(this._element), this._element = null, this.state = TM;
    }
    /**
     * Check if UI element are appended.
     *
     * @returns {boolean}
     */
    isAppended() {
      return this.state === xW;
    }
    /**
     * Check if UI element are built.
     *
     * @returns {boolean}
     */
    isBuilt() {
      return this.state >= EW;
    }
    /**
     * Setter for position.
     *
     * @param {number} top New top position of the element.
     * @param {number} left New left position of the element.
     */
    setPosition(e, t) {
      e !== void 0 && (this._element.style.top = e + vg), t !== void 0 && (this._element.style.left = t + vg);
    }
    /**
     * Getter for the element position.
     *
     * @returns {object} Object contains left and top position of the element.
     */
    getPosition() {
      return {
        top: this._element.style.top ? parseInt(this._element.style.top, 10) : 0,
        left: this._element.style.left ? parseInt(this._element.style.left, 10) : 0
      };
    }
    /**
     * Setter for the element size.
     *
     * @param {number} width New width of the element.
     * @param {number} height New height of the element.
     */
    setSize(e, t) {
      e && (this._element.style.width = e + vg), t && (this._element.style.height = t + vg);
    }
    /**
     * Getter for the element position.
     *
     * @returns {object} Object contains height and width of the element.
     */
    getSize() {
      return {
        width: this._element.style.width ? parseInt(this._element.style.width, 10) : 0,
        height: this._element.style.height ? parseInt(this._element.style.height, 10) : 0
      };
    }
    /**
     * Setter for the element offset. Offset means marginTop and marginLeft of the element.
     *
     * @param {number} top New margin top of the element.
     * @param {number} left New margin left of the element.
     */
    setOffset(e, t) {
      e && (this._element.style.marginTop = e + vg), t && (this._element.style.marginLeft = t + vg);
    }
    /**
     * Getter for the element offset.
     *
     * @returns {object} Object contains top and left offset of the element.
     */
    getOffset() {
      return {
        top: this._element.style.marginTop ? parseInt(this._element.style.marginTop, 10) : 0,
        left: this._element.style.marginLeft ? parseInt(this._element.style.marginLeft, 10) : 0
      };
    }
  };
  const w2e = "ht__manualRowMove--backlight";
  class y2e extends gK {
    /**
     * Custom className on build process.
     */
    build() {
      super.build(), ue(this._element, w2e);
    }
  }
  const C2e = "ht__manualRowMove--guideline";
  class S2e extends gK {
    /**
     * Custom className on build process.
     */
    build() {
      super.build(), ue(this._element, C2e);
    }
  }
  function _2e(n, e) {
    pK(n, e), e.add(n);
  }
  function wg(n, e, t) {
    pK(n, e), e.set(n, t);
  }
  function pK(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function Md(n, e, t) {
    return n.set(pu(n, e), t), t;
  }
  function et(n, e) {
    return n.get(pu(n, e));
  }
  function pu(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  Ie.getSingleton().register("beforeRowMove");
  Ie.getSingleton().register("afterRowMove");
  const MM = "manualRowMove", R2e = 140, TW = "ht__manualRowMove", lR = "show-ui", _I = "on-moving--rows", RI = "after-selection--rows";
  var Mr = /* @__PURE__ */ new WeakMap(), Cu = /* @__PURE__ */ new WeakMap(), bc = /* @__PURE__ */ new WeakMap(), Ou = /* @__PURE__ */ new WeakMap(), Zr = /* @__PURE__ */ new WeakMap(), RC = /* @__PURE__ */ new WeakMap(), Xh = /* @__PURE__ */ new WeakSet();
  class E2e extends Lt {
    constructor() {
      super(...arguments), _2e(this, Xh), wg(this, Mr, new y2e(this.hot)), wg(this, Cu, new S2e(this.hot)), wg(this, bc, []), wg(this, Ou, void 0), wg(this, Zr, {}), wg(this, RC, void 0);
    }
    static get PLUGIN_KEY() {
      return MM;
    }
    static get PLUGIN_PRIORITY() {
      return R2e;
    }
    /**
     * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link ManualRowMove#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return !!this.hot.getSettings()[MM];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
    enablePlugin() {
      var e = this;
      this.enabled || (this.addHook("beforeOnCellMouseDown", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return pu(Xh, e, x2e).call(e, ...i);
      }), this.addHook("beforeOnCellMouseOver", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return pu(Xh, e, M2e).call(e, ...i);
      }), this.addHook("afterScrollHorizontally", () => pu(Xh, this, P2e).call(this)), this.addHook("afterLoadData", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return pu(Xh, e, I2e).call(e, ...i);
      }), this.buildPluginUI(), this.registerEvents(), ue(this.hot.rootElement, TW), super.enablePlugin());
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`manualRowMove`](@/api/options.md#manualrowmove)
     */
    updatePlugin() {
      this.disablePlugin(), this.enablePlugin(), this.moveBySettingsOrLoad(), super.updatePlugin();
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
    disablePlugin() {
      Ze(this.hot.rootElement, TW), this.unregisterEvents(), et(Mr, this).destroy(), et(Cu, this).destroy(), super.disablePlugin();
    }
    /**
     * Moves a single row.
     *
     * To see the outcome, rerender your grid by calling [`render()`](@/api/core.md#render).
     *
     * @param {number} row Visual row index to be moved.
     * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.
     * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
     * @fires Hooks#beforeRowMove
     * @fires Hooks#afterRowMove
     * @returns {boolean}
     */
    moveRow(e, t) {
      return this.moveRows([e], t);
    }
    /**
     * Moves multiple rows.
     *
     * To see the outcome, rerender your grid by calling [`render()`](@/api/core.md#render).
     *
     * @param {Array} rows Array of visual row indexes to be moved.
     * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.
     * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
     * @fires Hooks#beforeRowMove
     * @fires Hooks#afterRowMove
     * @returns {boolean}
     */
    moveRows(e, t) {
      const i = et(RC, this), r = this.isMovePossible(e, t), s = this.hot.runHooks("beforeRowMove", e, t, i, r);
      if (Md(RC, this, void 0), s === !1)
        return;
      r && this.hot.rowIndexMapper.moveIndexes(e, t);
      const o = r && this.isRowOrderChanged(e, t);
      return this.hot.runHooks("afterRowMove", e, t, i, r, o), o;
    }
    /**
     * Drag a single row to drop index position.
     *
     * @param {number} row Visual row index to be dragged.
     * @param {number} dropIndex Visual row index, being a drop index for the moved rows. Points to where we are going to drop the moved elements.
     * To check visualization of drop index please take a look at [documentation](@/guides/rows/row-moving/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
     * @fires Hooks#beforeRowMove
     * @fires Hooks#afterRowMove
     * @returns {boolean}
     */
    dragRow(e, t) {
      return this.dragRows([e], t);
    }
    /**
     * Drag multiple rows to drop index position.
     *
     * @param {Array} rows Array of visual row indexes to be dragged.
     * @param {number} dropIndex Visual row index, being a drop index for the moved rows. Points to where we are going to drop the moved elements.
     * To check visualization of drop index please take a look at [documentation](@/guides/rows/row-moving/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
     * @fires Hooks#beforeRowMove
     * @fires Hooks#afterRowMove
     * @returns {boolean}
     */
    dragRows(e, t) {
      const i = this.countFinalIndex(e, t);
      return Md(RC, this, t), this.moveRows(e, i);
    }
    /**
     * Indicates if it's possible to move rows to the desired position. Some of the actions aren't possible, i.e. You can’t move more than one element to the last position.
     *
     * @param {Array} movedRows Array of visual row indexes to be moved.
     * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.
     * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
     * @returns {boolean}
     */
    isMovePossible(e, t) {
      const i = this.hot.rowIndexMapper.getNotTrimmedIndexesLength(), r = e.length + t > i, s = t < 0, o = e.some((l) => l < 0), a = e.some((l) => l >= i);
      return !(r || s || o || a);
    }
    /**
     * Indicates if order of rows was changed.
     *
     * @private
     * @param {Array} movedRows Array of visual row indexes to be moved.
     * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.
     * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
     * @returns {boolean}
     */
    isRowOrderChanged(e, t) {
      return e.some((i, r) => i - r !== t);
    }
    /**
     * Count the final row index from the drop index.
     *
     * @private
     * @param {Array} movedRows Array of visual row indexes to be moved.
     * @param {number} dropIndex Visual row index, being a drop index for the moved rows.
     * @returns {number} Visual row index, being a start index for the moved rows.
     */
    countFinalIndex(e, t) {
      const i = li(e, (r, s) => (s < t && (r += 1), r), 0);
      return t - i;
    }
    /**
     * Gets the sum of the heights of rows in the provided range.
     *
     * @private
     * @param {number} fromRow Visual row index.
     * @param {number} toRow Visual row index.
     * @returns {number}
     */
    getRowsHeight(e, t) {
      const i = this.hot.rowIndexMapper;
      let r = 0;
      for (let s = e; s <= t; s++) {
        const o = i.getRenderableFromVisualIndex(s);
        o !== null && (r += this.hot.view._wt.wtTable.getRowHeight(o) || 23);
      }
      return r;
    }
    /**
     * Loads initial settings when persistent state is saved or when plugin was initialized as an array.
     *
     * @private
     */
    moveBySettingsOrLoad() {
      const e = this.hot.getSettings()[MM];
      if (Array.isArray(e))
        this.moveRows(e, 0);
      else if (e !== void 0) {
        const t = this.persistentStateLoad();
        t.length && this.moveRows(t, 0);
      }
    }
    /**
     * Checks if the provided row is in the fixedRowsTop section.
     *
     * @private
     * @param {number} row Visual row index to check.
     * @returns {boolean}
     */
    isFixedRowTop(e) {
      return e < this.hot.getSettings().fixedRowsTop;
    }
    /**
     * Checks if the provided row is in the fixedRowsBottom section.
     *
     * @private
     * @param {number} row Visual row index to check.
     * @returns {boolean}
     */
    isFixedRowBottom(e) {
      return e > this.hot.countRows() - 1 - this.hot.getSettings().fixedRowsBottom;
    }
    /**
     * Saves the manual row positions to the persistent state (the {@link Options#persistentState} option has to be enabled).
     *
     * @private
     * @fires Hooks#persistentStateSave
     */
    persistentStateSave() {
      this.hot.runHooks("persistentStateSave", "manualRowMove", this.hot.rowIndexMapper.getIndexesSequence());
    }
    /**
     * Loads the manual row positions from the persistent state (the {@link Options#persistentState} option has to be enabled).
     *
     * @private
     * @fires Hooks#persistentStateLoad
     * @returns {Array} Stored state.
     */
    persistentStateLoad() {
      const e = {};
      return this.hot.runHooks("persistentStateLoad", "manualRowMove", e), e.value ? e.value : [];
    }
    /**
     * Prepares an array of indexes based on actual selection.
     *
     * @private
     * @returns {Array}
     */
    prepareRowsToMoving() {
      const e = this.hot.getSelectedRangeLast(), t = [];
      if (!e)
        return t;
      const {
        from: i,
        to: r
      } = e, s = Math.min(i.row, r.row), o = Math.max(i.row, r.row);
      return $e(s, o, (a) => {
        t.push(a);
      }), t;
    }
    /**
     * Update the UI visual position.
     *
     * @private
     */
    refreshPositions() {
      const e = et(Zr, this).coords, t = this.hot.view.getFirstFullyVisibleRow(), i = this.hot.view.getLastFullyVisibleRow(), r = this.hot.countRows();
      this.isFixedRowTop(e.row) && t > 0 && this.hot.scrollViewportTo(this.hot.rowIndexMapper.getNearestNotHiddenIndex(t - 1, -1)), this.isFixedRowBottom(e.row) && i < r && this.hot.scrollViewportTo(this.hot.rowIndexMapper.getNearestNotHiddenIndex(i + 1, 1), void 0, !0);
      const s = this.hot.view._wt.wtTable, o = et(Zr, this).TD, a = this.hot.rootElement, l = _i(a), c = nf(a), u = s.holder.scrollTop, h = this.hot.rootWindow !== c ? c.scrollTop : 0, d = l.top - h, f = et(Zr, this).eventPageY - d + u, g = s.hider.offsetHeight, p = s.TBODY.offsetTop, m = et(Mr, this).getOffset().top, v = et(Mr, this).getSize().height, y = o.offsetHeight / 2, w = o.offsetHeight;
      let R = this.hot.view.THEAD.offsetHeight + this.getRowsHeight(0, e.row - 1);
      const E = f >= R + y;
      this.isFixedRowTop(e.row) && (R += this.hot.view._wt.wtOverlays.topOverlay.getOverlayOffset()), e.row < 0 ? et(Zr, this).row = t > 0 ? t - 1 : t : E ? (et(Zr, this).row = e.row + 1, R += e.row === 0 ? w - 1 : w) : et(Zr, this).row = e.row;
      let C = f, T = R;
      f + v + m >= g ? C = g - v - m : f + m < p && (C = p + Math.abs(m)), R >= g - 1 && (T = g - 1), et(Mr, this).setPosition(C), et(Cu, this).setPosition(T);
    }
    /**
     * Binds the events used by the plugin.
     *
     * @private
     */
    registerEvents() {
      const {
        documentElement: e
      } = this.hot.rootDocument;
      this.eventManager.addEventListener(e, "mousemove", (t) => pu(Xh, this, T2e).call(this, t)), this.eventManager.addEventListener(e, "mouseup", () => pu(Xh, this, A2e).call(this));
    }
    /**
     * Unbinds the events used by the plugin.
     *
     * @private
     */
    unregisterEvents() {
      this.eventManager.clear();
    }
    /**
     * Builds the plugin's UI.
     *
     * @private
     */
    buildPluginUI() {
      et(Mr, this).build(), et(Cu, this).build();
    }
    /**
     * Callback for the `afterLoadData` hook.
     */
    /**
     * Destroys the plugin instance.
     */
    destroy() {
      et(Mr, this).destroy(), et(Cu, this).destroy(), super.destroy();
    }
  }
  function x2e(n, e, t, i) {
    const {
      wtTable: r,
      wtViewport: s
    } = this.hot.view._wt, o = this.hot.selection.isSelectedByRowHeader(), a = this.hot.getSelectedRangeLast();
    if (!a || !o || et(Ou, this) || n.button !== 0) {
      Md(Ou, this, !1), et(bc, this).length = 0, Ze(this.hot.rootElement, [_I, lR]);
      return;
    }
    const l = et(Cu, this).isBuilt() && !et(Cu, this).isAppended(), c = et(Mr, this).isBuilt() && !et(Mr, this).isAppended();
    l && c && (et(Cu, this).appendTo(r.hider), et(Mr, this).appendTo(r.hider));
    const {
      from: u,
      to: h
    } = a, d = Math.min(u.row, h.row), f = Math.max(u.row, h.row);
    if (e.col < 0 && e.row >= d && e.row <= f) {
      i.row = !0, Md(Ou, this, !0), et(Zr, this).eventPageY = n.pageY, et(Zr, this).coords = e, et(Zr, this).TD = t, Md(bc, this, this.prepareRowsToMoving());
      const g = r.holder.scrollLeft + s.getRowHeaderWidth(), p = this.getRowsHeight(d, e.row - 1) + n.offsetY;
      et(Mr, this).setPosition(null, g), et(Mr, this).setSize(r.hider.offsetWidth - g, this.getRowsHeight(d, f)), et(Mr, this).setOffset(-p, null), ue(this.hot.rootElement, _I), this.refreshPositions();
    } else
      Ze(this.hot.rootElement, RI), Md(Ou, this, !1), et(bc, this).length = 0;
  }
  function T2e(n) {
    et(Ou, this) && (et(Zr, this).eventPageY = n.pageY, this.refreshPositions());
  }
  function M2e(n, e, t, i) {
    !this.hot.getSelectedRangeLast() || !et(Ou, this) || (et(bc, this).indexOf(e.row) > -1 ? Ze(this.hot.rootElement, lR) : ue(this.hot.rootElement, lR), i.row = !0, i.column = !0, i.cell = !0, et(Zr, this).coords = e, et(Zr, this).TD = t);
  }
  function A2e() {
    const n = et(Zr, this).row, e = et(bc, this).length;
    if (Md(Ou, this, !1), Ze(this.hot.rootElement, [_I, lR, RI]), this.hot.selection.isSelectedByRowHeader() && ue(this.hot.rootElement, RI), e < 1 || n === void 0)
      return;
    const t = et(bc, this)[0], i = this.hot.toPhysicalRow(t), r = this.dragRows(et(bc, this), n);
    if (et(bc, this).length = 0, r === !0) {
      this.persistentStateSave(), this.hot.render(), this.hot.view.adjustElementsSize();
      const s = this.hot.toVisualRow(i), o = s + e - 1;
      this.hot.selectRows(s, o);
    }
  }
  function P2e() {
    const n = this.hot.view._wt.wtTable, e = this.hot.view._wt.wtViewport.getRowHeaderWidth(), t = n.holder.scrollLeft, i = e + t;
    et(Mr, this).setPosition(null, i), et(Mr, this).setSize(n.hider.offsetWidth - i);
  }
  function I2e() {
    this.moveBySettingsOrLoad();
  }
  function O2e(n, e) {
    mK(n, e), e.add(n);
  }
  function er(n, e, t) {
    mK(n, e), e.set(n, t);
  }
  function mK(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function $n(n, e, t) {
    return n.set(Jl(n, e), t), t;
  }
  function Re(n, e) {
    return n.get(Jl(n, e));
  }
  function Jl(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  const cR = "manualRowResize", k2e = 30, MW = "manualRowHeights";
  var Da = /* @__PURE__ */ new WeakMap(), EC = /* @__PURE__ */ new WeakMap(), ds = /* @__PURE__ */ new WeakMap(), Dv = /* @__PURE__ */ new WeakMap(), Su = /* @__PURE__ */ new WeakMap(), iH = /* @__PURE__ */ new WeakMap(), cp = /* @__PURE__ */ new WeakMap(), xC = /* @__PURE__ */ new WeakMap(), Sr = /* @__PURE__ */ new WeakMap(), Oa = /* @__PURE__ */ new WeakMap(), cf = /* @__PURE__ */ new WeakMap(), uR = /* @__PURE__ */ new WeakMap(), Nv = /* @__PURE__ */ new WeakMap(), Lv = /* @__PURE__ */ new WeakMap(), Wo = /* @__PURE__ */ new WeakMap(), Hv = /* @__PURE__ */ new WeakMap(), ru = /* @__PURE__ */ new WeakSet();
  class D2e extends Lt {
    static get PLUGIN_KEY() {
      return cR;
    }
    static get PLUGIN_PRIORITY() {
      return k2e;
    }
    /**
     * @type {HTMLTableCellElement}
     */
    constructor(e) {
      super(e), O2e(this, ru), er(this, Da, null), er(this, EC, null), er(this, ds, []), er(this, Dv, null), er(this, Su, null), er(this, iH, null), er(this, cp, null), er(this, xC, null), er(this, Sr, this.hot.rootDocument.createElement("DIV")), er(this, Oa, this.hot.rootDocument.createElement("DIV")), er(this, cf, !1), er(this, uR, !1), er(this, Nv, 0), er(this, Lv, null), er(this, Wo, void 0), er(this, Hv, void 0), ue(Re(Sr, this), "manualRowResizer"), ue(Re(Oa, this), "manualRowResizerGuide");
    }
    /**
     * @private
     * @returns {string}
     */
    get inlineDir() {
      return this.hot.isRtl() ? "right" : "left";
    }
    /**
     * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link ManualRowResize#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return this.hot.getSettings()[cR];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
    enablePlugin() {
      this.enabled || ($n(Wo, this, new uh()), Re(Wo, this).addLocalHook("init", () => Jl(ru, this, V2e).call(this)), this.hot.rowIndexMapper.registerMap(this.pluginName, Re(Wo, this)), this.addHook("modifyRowHeight", (e, t) => Jl(ru, this, B2e).call(this, e, t)), this.bindEvents(), super.enablePlugin());
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`manualRowResize`](@/api/options.md#manualrowresize)
     */
    updatePlugin() {
      this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
    disablePlugin() {
      $n(Hv, this, Re(Wo, this).getValues()), this.hot.rowIndexMapper.unregisterMap(this.pluginName), super.disablePlugin();
    }
    /**
     * Saves the current sizes using the persistentState plugin (the {@link Options#persistentState} option has to be
     * enabled).
     *
     * @fires Hooks#persistentStateSave
     */
    saveManualRowHeights() {
      this.hot.runHooks("persistentStateSave", MW, Re(Wo, this).getValues());
    }
    /**
     * Loads the previously saved sizes using the persistentState plugin (the {@link Options#persistentState} option
     * has be enabled).
     *
     * @returns {Array}
     * @fires Hooks#persistentStateLoad
     */
    loadManualRowHeights() {
      const e = {};
      return this.hot.runHooks("persistentStateLoad", MW, e), e.value;
    }
    /**
     * Sets the new height for specified row index.
     *
     * @param {number} row Visual row index.
     * @param {number} height Row height.
     * @returns {number} Returns new height.
     */
    setManualSize(e, t) {
      const i = this.hot.toPhysicalRow(e), r = Math.max(t, L9);
      return Re(Wo, this).setValueAtIndex(i, r), r;
    }
    /**
     * Returns the last desired row height set manually with the resize handle.
     *
     * @returns {number} The last desired row height.
     */
    getLastDesiredRowHeight() {
      return Re(Dv, this);
    }
    /**
     * Sets the resize handle position.
     *
     * @private
     * @param {HTMLCellElement} TH TH HTML element.
     */
    setupHandlePosition(e) {
      $n(Da, this, e);
      const {
        view: t
      } = this.hot, {
        _wt: i
      } = t, r = i.wtTable.getCoords(Re(Da, this)), s = r.row;
      if (s < 0)
        return;
      const o = fn(Re(Da, this)), a = Re(Da, this).getBoundingClientRect(), l = s < i.getSetting("fixedRowsTop"), c = s >= t.countNotHiddenRowIndexes(0, 1) - i.getSetting("fixedRowsBottom");
      let u;
      l ? u = i.wtOverlays.topInlineStartCornerOverlay.getRelativeCellPosition(Re(Da, this), r.row, r.col) : c && (u = i.wtOverlays.bottomInlineStartCornerOverlay.getRelativeCellPosition(Re(Da, this), r.row, r.col)), u || (u = i.wtOverlays.inlineStartOverlay.getRelativeCellPosition(Re(Da, this), r.row, r.col)), $n(EC, this, this.hot.rowIndexMapper.getVisualFromRenderableIndex(s)), $n(ds, this, []);
      const h = this.hot.selection.isSelectedByCorner() || this.hot.selection.isSelectedByRowHeader();
      if (this.hot.selection.isSelected() && h) {
        const d = this.hot.getSelectedRange();
        z(d, (f) => {
          const g = f.getTopStartCorner().row, p = f.getBottomStartCorner().row;
          $e(g, p, (m) => {
            Re(ds, this).includes(m) || Re(ds, this).push(m);
          });
        });
      }
      Re(ds, this).includes(Re(EC, this)) || $n(ds, this, [Re(EC, this)]), $n(xC, this, u.top - 6), $n(cp, this, parseInt(a.height, 10)), Re(Sr, this).style.top = `${Re(xC, this) + Re(cp, this)}px`, Re(Sr, this).style[this.inlineDir] = `${u.start}px`, Re(Sr, this).style.width = `${o}px`, this.hot.rootElement.appendChild(Re(Sr, this));
    }
    /**
     * Refresh the resize handle position.
     *
     * @private
     */
    refreshHandlePosition() {
      Re(Sr, this).style.top = `${Re(xC, this) + Re(Dv, this)}px`;
    }
    /**
     * Sets the resize guide position.
     *
     * @private
     */
    setupGuidePosition() {
      const e = parseInt(fn(Re(Sr, this)), 10), t = parseInt(Re(Sr, this).style[this.inlineDir], 10) + e, i = parseInt(this.hot.view.maximumVisibleElementWidth(0), 10);
      ue(Re(Sr, this), "active"), ue(Re(Oa, this), "active"), Re(Oa, this).style.top = Re(Sr, this).style.top, Re(Oa, this).style[this.inlineDir] = `${t}px`, Re(Oa, this).style.width = `${i - e}px`, this.hot.rootElement.appendChild(Re(Oa, this));
    }
    /**
     * Refresh the resize guide position.
     *
     * @private
     */
    refreshGuidePosition() {
      Re(Oa, this).style.top = Re(Sr, this).style.top;
    }
    /**
     * Hides both the resize handle and resize guide.
     *
     * @private
     */
    hideHandleAndGuide() {
      Ze(Re(Sr, this), "active"), Ze(Re(Oa, this), "active");
    }
    /**
     * Checks if provided element is considered as a row header.
     *
     * @private
     * @param {HTMLElement} element HTML element.
     * @returns {boolean}
     */
    checkIfRowHeader(e) {
      const t = Gu(e, ["TBODY"], this.hot.rootElement), {
        inlineStartOverlay: i,
        topInlineStartCornerOverlay: r,
        bottomInlineStartCornerOverlay: s
      } = this.hot.view._wt.wtOverlays;
      return [i.clone.wtTable.TBODY, r.clone.wtTable.TBODY, s.clone.wtTable.TBODY].includes(t);
    }
    /**
     * Gets the TH element from the provided element.
     *
     * @private
     * @param {HTMLElement} element HTML element.
     * @returns {HTMLElement}
     */
    getClosestTHParent(e) {
      return e.tagName !== "TABLE" ? e.tagName === "TH" ? e : this.getClosestTHParent(e.parentNode) : null;
    }
    /**
     * Returns the actual height for the provided row index.
     *
     * @private
     * @param {number} row Visual row index.
     * @returns {number} Actual row height.
     */
    getActualRowHeight(e) {
      const t = this.hot.view._wt.wtTable.getRowHeight(e);
      return t !== void 0 && Re(Su, this) < t ? t : Re(Su, this);
    }
    /**
     * Auto-size row after doubleclick - callback.
     *
     * @private
     * @fires Hooks#beforeRowResize
     * @fires Hooks#afterRowResize
     */
    afterMouseDownTimeout() {
      const e = () => {
        this.hot.forceFullRender = !0, this.hot.view.render(), this.hot.view.adjustElementsSize();
      }, t = (i, r) => {
        const s = this.hot.runHooks("beforeRowResize", this.getActualRowHeight(i), i, !0);
        s !== void 0 && $n(Su, this, s), this.setManualSize(i, Re(Su, this)), this.hot.runHooks("afterRowResize", this.getActualRowHeight(i), i, !0), r && e();
      };
      Re(Nv, this) >= 2 && (Re(ds, this).length > 1 ? (z(Re(ds, this), (r) => {
        t(r);
      }), e()) : z(Re(ds, this), (r) => {
        t(r, !0);
      })), $n(Nv, this, 0), $n(Lv, this, null);
    }
    /**
     * 'mousedown' event callback.
     *
     * @param {MouseEvent} event The mouse event.
     */
    /**
     * Binds the mouse events.
     *
     * @private
     */
    bindEvents() {
      const {
        rootElement: e,
        rootWindow: t
      } = this.hot;
      this.eventManager.addEventListener(e, "mouseover", (i) => Jl(ru, this, N2e).call(this, i)), this.eventManager.addEventListener(e, "mousedown", (i) => Jl(ru, this, L2e).call(this, i)), this.eventManager.addEventListener(t, "mousemove", (i) => Jl(ru, this, H2e).call(this, i)), this.eventManager.addEventListener(t, "mouseup", () => Jl(ru, this, $2e).call(this)), this.eventManager.addEventListener(Re(Sr, this), "contextmenu", () => Jl(ru, this, F2e).call(this));
    }
    /**
     * Modifies the provided row height, based on the plugin settings.
     *
     * @param {number} height Row height.
     * @param {number} row Visual row index.
     * @returns {number}
     */
    /**
     * Destroys the plugin instance.
     */
    destroy() {
      super.destroy();
    }
  }
  function N2e(n) {
    if (!mD(n.target) && Re(uR, this) !== !0 && this.checkIfRowHeader(n.target)) {
      const e = this.getClosestTHParent(n.target);
      e && (Re(cf, this) || this.setupHandlePosition(e));
    }
  }
  function L2e(n) {
    Ue(n.target, "manualRowResizer") && (this.setupHandlePosition(Re(Da, this)), this.setupGuidePosition(), $n(cf, this, !0), Re(Lv, this) === null && ($n(Lv, this, setTimeout(() => this.afterMouseDownTimeout(), 500)), this.hot._registerTimeout(Re(Lv, this))), $n(Nv, this, Re(Nv, this) + 1), $n(iH, this, n.pageY), $n(Su, this, Re(cp, this)));
  }
  function H2e(n) {
    Re(cf, this) && ($n(Dv, this, Re(cp, this) + (n.pageY - Re(iH, this))), z(Re(ds, this), (e) => {
      $n(Su, this, this.setManualSize(e, Re(Dv, this)));
    }), this.refreshHandlePosition(), this.refreshGuidePosition());
  }
  function $2e() {
    const n = () => {
      this.hot.forceFullRender = !0, this.hot.view.render(), this.hot.view.adjustElementsSize();
    }, e = (t, i) => {
      this.hot.runHooks("beforeRowResize", this.getActualRowHeight(t), t, !1), i && n(), this.saveManualRowHeights(), this.hot.runHooks("afterRowResize", this.getActualRowHeight(t), t, !1);
    };
    Re(cf, this) && (this.hideHandleAndGuide(), $n(cf, this, !1), Re(Su, this) !== Re(cp, this) && (Re(ds, this).length > 1 ? (z(Re(ds, this), (i) => {
      e(i);
    }), n()) : z(Re(ds, this), (i) => {
      e(i, !0);
    })), this.setupHandlePosition(Re(Da, this)));
  }
  function F2e() {
    this.hideHandleAndGuide(), this.hot.rootElement.removeChild(Re(Sr, this)), this.hot.rootElement.removeChild(Re(Oa, this)), $n(cf, this, !1), $n(uR, this, !0), this.hot._registerImmediate(() => {
      $n(uR, this, !1);
    });
  }
  function B2e(n, e) {
    let t = n;
    if (this.enabled) {
      const i = this.hot.toPhysicalRow(e), r = Re(Wo, this).getValueAtIndex(i);
      this.hot.getSettings()[cR] && r && (t = r);
    }
    return t;
  }
  function V2e() {
    const n = this.hot.getSettings()[cR], e = this.loadManualRowHeights();
    this.hot.batchExecution(() => {
      typeof e < "u" ? e.forEach((t, i) => {
        Re(Wo, this).setValueAtIndex(i, t);
      }) : Array.isArray(n) ? (n.forEach((t, i) => {
        Re(Wo, this).setValueAtIndex(i, t);
      }), $n(Hv, this, n)) : n === !0 && Array.isArray(Re(Hv, this)) && Re(Hv, this).forEach((t, i) => {
        Re(Wo, this).setValueAtIndex(i, t);
      });
    }, !0);
  }
  function W2e(n, e, t) {
    j2e(n, e), e.set(n, t);
  }
  function j2e(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function Zh(n, e, t) {
    return (e = z2e(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function z2e(n) {
    var e = U2e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function U2e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function AW(n, e) {
    return n.get(bK(n, e));
  }
  function TC(n, e, t) {
    return n.set(bK(n, e), t), t;
  }
  function bK(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var Qh = /* @__PURE__ */ new WeakMap();
  class Na {
    constructor(e, t, i, r, s, o) {
      Zh(this, "row", void 0), Zh(this, "col", void 0), Zh(this, "rowspan", void 0), Zh(this, "colspan", void 0), Zh(this, "removed", !1), Zh(this, "cellCoordsFactory", void 0), Zh(this, "cellRangeFactory", void 0), W2e(this, Qh, null), this.row = e, this.col = t, this.rowspan = i, this.colspan = r, this.cellCoordsFactory = s, this.cellRangeFactory = o;
    }
    /**
     * Get a warning message for when the declared merged cell data contains negative values.
     *
     * @param {{ row: number, col: number, rowspan: number, colspan: number }} mergedCell Object containing information
     * about the merged cells that was about to be added.
     * @returns {string}
     */
    static NEGATIVE_VALUES_WARNING(e) {
      let {
        row: t,
        col: i,
        rowspan: r,
        colspan: s
      } = e;
      return Kt`The merged cell declared with {row: ${t}, col: ${i},\x20
      rowspan: ${r}, colspan: ${s}} contains negative values, which is\x20
      not supported. It will not be added to the collection.`;
    }
    /**
     * Get a warning message for when the declared merged cell data contains values exceeding the table limits.
     *
     * @param {{ row: number, col: number, rowspan: number, colspan: number }} mergedCell Object containing information
     * about the merged cells that was about to be added.
     * @returns {string}
     */
    static IS_OUT_OF_BOUNDS_WARNING(e) {
      let {
        row: t,
        col: i
      } = e;
      return Kt`The merged cell declared at [${t}, ${i}] is positioned\x20
      (or positioned partially) outside of the table range. It was not added to the table, please fix your setup.`;
    }
    /**
     * Get a warning message for when the declared merged cell data represents a single cell.
     *
     * @param {{ row: number, col: number, rowspan: number, colspan: number }} mergedCell Object containing information
     * about the merged cells that was about to be added.
     * @returns {string}
     */
    static IS_SINGLE_CELL(e) {
      let {
        row: t,
        col: i
      } = e;
      return Kt`The merged cell declared at [${t}, ${i}] has both "rowspan"\x20
      and "colspan" declared as "1", which makes it a single cell. It cannot be added to the collection.`;
    }
    /**
     * Get a warning message for when the declared merged cell data contains "colspan" or "rowspan", that equals 0.
     *
     * @param {{ row: number, col: number, rowspan: number, colspan: number }} mergedCell Object containing information
     * about the merged cells that was about to be added.
     * @returns {string}
     */
    static ZERO_SPAN_WARNING(e) {
      let {
        row: t,
        col: i
      } = e;
      return Kt`The merged cell declared at [${t}, ${i}] has "rowspan"\x20
      or "colspan" declared as "0", which is not supported. It cannot be added to the collection.`;
    }
    /**
     * Check whether the values provided for a merged cell contain any negative values.
     *
     * @param {{ row: number, col: number, rowspan: number, colspan: number }} mergedCell Object containing information
     * about the merged cells that was about to be added.
     * @returns {boolean}
     */
    static containsNegativeValues(e) {
      let {
        row: t,
        col: i,
        rowspan: r,
        colspan: s
      } = e;
      return t < 0 || i < 0 || r < 0 || s < 0;
    }
    /**
     * Check whether the provided merged cell information object represents a single cell.
     *
     * @private
     * @param {{ row: number, col: number, rowspan: number, colspan: number }} mergedCell Object containing information
     * about the merged cells that was about to be added.
     * @returns {boolean}
     */
    static isSingleCell(e) {
      let {
        rowspan: t,
        colspan: i
      } = e;
      return i === 1 && t === 1;
    }
    /**
     * Check whether the provided merged cell information object contains a rowspan or colspan of 0.
     *
     * @private
     * @param {{ row: number, col: number, rowspan: number, colspan: number }} mergedCell Object containing information
     * about the merged cells that was about to be added.
     * @returns {boolean}
     */
    static containsZeroSpan(e) {
      let {
        rowspan: t,
        colspan: i
      } = e;
      return i === 0 || t === 0;
    }
    /**
     * Check whether the provided merged cell object is to be declared out of bounds of the table.
     *
     * @param {object} mergeCell Object containing the `row`, `col`, `rowspan` and `colspan` properties.
     * @param {number} rowCount Number of rows in the table.
     * @param {number} columnCount Number of rows in the table.
     * @returns {boolean}
     */
    static isOutOfBounds(e, t, i) {
      return e.row < 0 || e.col < 0 || e.row >= t || e.row + e.rowspan - 1 >= t || e.col >= i || e.col + e.colspan - 1 >= i;
    }
    /**
     * Sanitize (prevent from going outside the boundaries) the merged cell.
     *
     * @param {Core} hotInstance The Handsontable instance.
     */
    normalize(e) {
      const t = e.countRows(), i = e.countCols();
      this.row < 0 ? this.row = 0 : this.row > t - 1 && (this.row = t - 1), this.col < 0 ? this.col = 0 : this.col > i - 1 && (this.col = i - 1), this.row + this.rowspan > t - 1 && (this.rowspan = t - this.row), this.col + this.colspan > i - 1 && (this.colspan = i - this.col), TC(Qh, this, null);
    }
    /**
     * Returns `true` if the provided coordinates are inside the merged cell.
     *
     * @param {number} row The row index.
     * @param {number} column The column index.
     * @returns {boolean}
     */
    includes(e, t) {
      return this.row <= e && this.col <= t && this.row + this.rowspan - 1 >= e && this.col + this.colspan - 1 >= t;
    }
    /**
     * Returns `true` if the provided `column` property is within the column span of the merged cell.
     *
     * @param {number} column The column index.
     * @returns {boolean}
     */
    includesHorizontally(e) {
      return this.col <= e && this.col + this.colspan - 1 >= e;
    }
    /**
     * Returns `true` if the provided `row` property is within the row span of the merged cell.
     *
     * @param {number} row Row index.
     * @returns {boolean}
     */
    includesVertically(e) {
      return this.row <= e && this.row + this.rowspan - 1 >= e;
    }
    /**
     * Shift (and possibly resize, if needed) the merged cell.
     *
     * @param {Array} shiftVector 2-element array containing the information on the shifting in the `x` and `y` axis.
     * @param {number} indexOfChange Index of the preceding change.
     * @returns {boolean} Returns `false` if the whole merged cell was removed.
     */
    shift(e, t) {
      const i = e[0] || e[1], r = t + Math.abs(e[0] || e[1]) - 1, s = e[0] ? "colspan" : "rowspan", o = e[0] ? "col" : "row", a = Math.min(t, r), l = Math.max(t, r), c = this[o], u = this[o] + this[s] - 1;
      if (c >= t && (this[o] += i), i > 0)
        t <= u && t > c && (this[s] += i);
      else if (i < 0) {
        if (a <= c && l >= u)
          return this.removed = !0, TC(Qh, this, null), !1;
        if (c >= a && c <= l) {
          const h = l - c + 1, d = Math.abs(i) - h;
          this[o] -= d + i, this[s] -= h;
        } else if (c <= a && u >= l)
          this[s] += i;
        else if (c <= a && u >= a && u < l) {
          const h = u - a + 1;
          this[s] -= h;
        }
      }
      return TC(Qh, this, null), !0;
    }
    /**
     * Check if the second provided merged cell is "farther" in the provided direction.
     *
     * @param {MergedCellCoords} mergedCell The merged cell to check.
     * @param {string} direction Drag direction.
     * @returns {boolean|null} `true` if the second provided merged cell is "farther".
     */
    isFarther(e, t) {
      return e ? t === "down" ? e.row + e.rowspan - 1 < this.row + this.rowspan - 1 : t === "up" ? e.row > this.row : t === "right" ? e.col + e.colspan - 1 < this.col + this.colspan - 1 : t === "left" ? e.col > this.col : null : !0;
    }
    /**
     * Get the bottom row index of the merged cell.
     *
     * @returns {number}
     */
    getLastRow() {
      return this.row + this.rowspan - 1;
    }
    /**
     * Get the rightmost column index of the merged cell.
     *
     * @returns {number}
     */
    getLastColumn() {
      return this.col + this.colspan - 1;
    }
    /**
     * Get the range coordinates of the merged cell.
     *
     * @returns {CellRange}
     */
    getRange() {
      return AW(Qh, this) || TC(Qh, this, this.cellRangeFactory(this.cellCoordsFactory(this.row, this.col), this.cellCoordsFactory(this.row, this.col), this.cellCoordsFactory(this.getLastRow(), this.getLastColumn()))), AW(Qh, this);
    }
  }
  function G2e(n, e) {
    Y2e(n, e), e.add(n);
  }
  function Y2e(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function MC(n, e, t) {
    return (e = K2e(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function K2e(n) {
    var e = q2e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function q2e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function Jh(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var su = /* @__PURE__ */ new WeakSet();
  class hR {
    constructor(e) {
      G2e(this, su), MC(this, "plugin", void 0), MC(this, "mergedCells", []), MC(this, "mergedCellsMatrix", /* @__PURE__ */ new Map()), MC(this, "hot", void 0), this.plugin = e, this.hot = e.hot;
    }
    /**
     * Get a warning message for when the declared merged cell data overlaps already existing merged cells.
     *
     * @param {{ row: number, col: number, rowspan: number, colspan: number }} mergedCell Object containing information
     * about the merged cells that was about to be added.
     * @returns {string}
     */
    static IS_OVERLAPPING_WARNING(e) {
      let {
        row: t,
        col: i
      } = e;
      return Kt`The merged cell declared at [${t}, ${i}], overlaps\x20
      with the other declared merged cell. The overlapping merged cell was not added to the table, please\x20
      fix your setup.`;
    }
    /**
     * Get a merged cell from the container, based on the provided arguments. You can provide either the "starting coordinates"
     * of a merged cell, or any coordinates from the body of the merged cell.
     *
     * @param {number} row Row index.
     * @param {number} column Column index.
     * @returns {MergedCellCoords|boolean} Returns a wanted merged cell on success and `false` on failure.
     */
    get(e, t) {
      var i;
      return this.mergedCellsMatrix.has(e) && (i = this.mergedCellsMatrix.get(e).get(t)) !== null && i !== void 0 ? i : !1;
    }
    /**
     * Get the first-found merged cell containing the provided range.
     *
     * @param {CellRange|object} range The range to search merged cells for.
     * @returns {MergedCellCoords|boolean}
     */
    getByRange(e) {
      let t = !1;
      return z(this.mergedCells, (i) => i.row <= e.from.row && i.row + i.rowspan - 1 >= e.to.row && i.col <= e.from.col && i.col + i.colspan - 1 >= e.to.col ? (t = i, t) : !0), t;
    }
    /**
     * Filters merge cells objects provided by users from overlapping cells.
     *
     * @param {{ row: number, col: number, rowspan: number, colspan: number }} mergedCellsInfo The merged cell information object.
     * Has to contain `row`, `col`, `colspan` and `rowspan` properties.
     * @returns {Array<{ row: number, col: number, rowspan: number, colspan: number }>}
     */
    filterOverlappingMergeCells(e) {
      const t = /* @__PURE__ */ new Set();
      return this.mergedCells.forEach((r) => {
        const {
          row: s,
          col: o,
          colspan: a,
          rowspan: l
        } = r;
        for (let c = s; c < s + l; c++)
          for (let u = o; u < o + a; u++)
            t.add(`r${c},c${u}`);
      }), e.filter((r) => {
        const {
          row: s,
          col: o,
          colspan: a,
          rowspan: l
        } = r, c = /* @__PURE__ */ new Set();
        let u = !1;
        for (let h = s; h < s + l; h++) {
          for (let d = o; d < o + a; d++) {
            const f = `r${h},c${d}`;
            if (t.has(f)) {
              Yt(hR.IS_OVERLAPPING_WARNING(r)), u = !0;
              break;
            }
            c.add(f);
          }
          if (u)
            break;
        }
        return u || t.add(...c), !u;
      });
    }
    /**
     * Get a merged cell contained in the provided range.
     *
     * @param {CellRange} range The range to search merged cells in.
     * @param {boolean} [countPartials=false] If set to `true`, all the merged cells overlapping the range will be taken into calculation.
     * @returns {MergedCellCoords[]} Array of found merged cells.
     */
    getWithinRange(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
      const {
        row: i,
        col: r
      } = e.getTopStartCorner(), {
        row: s,
        col: o
      } = e.getBottomEndCorner(), a = [];
      for (let l = i; l <= s; l++)
        for (let c = r; c <= o; c++) {
          const u = this.get(l, c);
          u && (t || !t && u.row === l && u.col === c) && a.push(u);
        }
      return a;
    }
    /**
     * Add a merged cell to the container.
     *
     * @param {object} mergedCellInfo The merged cell information object. Has to contain `row`, `col`, `colspan` and `rowspan` properties.
     * @param {boolean} [auto=false] `true` if called internally by the plugin (usually in batch).
     * @returns {MergedCellCoords|boolean} Returns the new merged cell on success and `false` on failure.
     */
    add(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
      const i = e.row, r = e.col, s = e.rowspan, o = e.colspan, a = new Na(i, r, s, o, this.hot._createCellCoords, this.hot._createCellRange), l = this.get(i, r), c = t ? !1 : this.isOverlapping(a);
      return !l && !c ? (this.hot && a.normalize(this.hot), this.mergedCells.push(a), Jh(su, this, PW).call(this, a), a) : (Yt(hR.IS_OVERLAPPING_WARNING(a)), !1);
    }
    /**
     * Remove a merged cell from the container. You can provide either the "starting coordinates"
     * of a merged cell, or any coordinates from the body of the merged cell.
     *
     * @param {number} row Row index.
     * @param {number} column Column index.
     * @returns {MergedCellCoords|boolean} Returns the removed merged cell on success and `false` on failure.
     */
    remove(e, t) {
      const i = this.get(e, t), r = i ? this.mergedCells.indexOf(i) : -1;
      return i && r !== -1 ? (this.mergedCells.splice(r, 1), Jh(su, this, X2e).call(this, i), i) : !1;
    }
    /**
     * Clear all the merged cells.
     */
    clear() {
      z(this.mergedCells, (e) => {
        let {
          row: t,
          col: i,
          rowspan: r,
          colspan: s
        } = e;
        $e(t, t + r, (o) => {
          $e(i, i + s, (a) => {
            const l = this.hot.getCell(o, a);
            l && (l.removeAttribute("rowspan"), l.removeAttribute("colspan"), l.style.display = "");
          });
        });
      }), this.mergedCells.length = 0, this.mergedCellsMatrix = /* @__PURE__ */ new Map();
    }
    /**
     * Check if the provided merged cell overlaps with the others already added.
     *
     * @param {MergedCellCoords} mergedCell The merged cell to check against all others in the container.
     * @returns {boolean} `true` if the provided merged cell overlaps with the others, `false` otherwise.
     */
    isOverlapping(e) {
      const t = e.getRange();
      for (let i = 0; i < this.mergedCells.length; i++)
        if (this.mergedCells[i].getRange().overlaps(t))
          return !0;
      return !1;
    }
    /**
     * Check whether the provided row/col coordinates direct to a first not hidden cell within merge area.
     *
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @returns {boolean}
     */
    isFirstRenderableMergedCell(e, t) {
      const i = this.get(e, t);
      return i && this.hot.rowIndexMapper.getNearestNotHiddenIndex(i.row, 1) === e && this.hot.columnIndexMapper.getNearestNotHiddenIndex(i.col, 1) === t;
    }
    /**
     * Get the first renderable coords of the merged cell at the provided coordinates.
     *
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @returns {CellCoords} A `CellCoords` object with the coordinates to the first renderable cell within the
     *                        merged cell.
     */
    getFirstRenderableCoords(e, t) {
      const i = this.get(e, t);
      if (!i || this.isFirstRenderableMergedCell(e, t))
        return this.hot._createCellCoords(e, t);
      const r = this.hot.rowIndexMapper.getNearestNotHiddenIndex(i.row, 1), s = this.hot.columnIndexMapper.getNearestNotHiddenIndex(i.col, 1);
      return this.hot._createCellCoords(r, s);
    }
    /**
     * Gets the start-most visual column index that do not intersect with other merged cells within the provided range.
     *
     * @param {CellRange} range The range to search within.
     * @param {number} visualColumnIndex The visual column index to start the search from.
     * @returns {number}
     */
    getStartMostColumnIndex(e, t) {
      const i = Jh(su, this, AC).call(this, e, "col", -1);
      let r = t;
      for (let s = 0; s < i.length; s++)
        if (i[s] <= t) {
          r = i[s];
          break;
        }
      return r;
    }
    /**
     * Gets the end-most visual column index that do not intersect with other merged cells within the provided range.
     *
     * @param {CellRange} range The range to search within.
     * @param {number} visualColumnIndex The visual column index to start the search from.
     * @returns {number}
     */
    getEndMostColumnIndex(e, t) {
      const i = Jh(su, this, AC).call(this, e, "col", 1);
      let r = t;
      for (let s = 0; s < i.length; s++)
        if (i[s] >= t) {
          r = i[s];
          break;
        }
      return r;
    }
    /**
     * Gets the top-most visual row index that do not intersect with other merged cells within the provided range.
     *
     * @param {CellRange} range The range to search within.
     * @param {number} visualRowIndex The visual row index to start the search from.
     * @returns {number}
     */
    getTopMostRowIndex(e, t) {
      const i = Jh(su, this, AC).call(this, e, "row", -1);
      let r = t;
      for (let s = 0; s < i.length; s++)
        if (i[s] <= t) {
          r = i[s];
          break;
        }
      return r;
    }
    /**
     * Gets the bottom-most visual row index that do not intersect with other merged cells within the provided range.
     *
     * @param {CellRange} range The range to search within.
     * @param {number} visualRowIndex The visual row index to start the search from.
     * @returns {number}
     */
    getBottomMostRowIndex(e, t) {
      const i = Jh(su, this, AC).call(this, e, "row", 1);
      let r = t;
      for (let s = 0; s < i.length; s++)
        if (i[s] >= t) {
          r = i[s];
          break;
        }
      return r;
    }
    /**
     * Shift the merged cell in the direction and by an offset defined in the arguments.
     *
     * @param {string} direction `right`, `left`, `up` or `down`.
     * @param {number} index Index where the change, which caused the shifting took place.
     * @param {number} count Number of rows/columns added/removed in the preceding action.
     */
    shiftCollections(e, t, i) {
      const r = [0, 0];
      switch (e) {
        case "right":
          r[0] += i;
          break;
        case "left":
          r[0] -= i;
          break;
        case "down":
          r[1] += i;
          break;
        case "up":
          r[1] -= i;
          break;
      }
      const s = [];
      this.mergedCells.forEach((o) => {
        o.shift(r, t), o.removed && s.push(o);
      }), s.forEach((o) => {
        this.mergedCells.splice(this.mergedCells.indexOf(o), 1);
      }), this.mergedCellsMatrix.clear(), this.mergedCells.forEach((o) => {
        Jh(su, this, PW).call(this, o);
      });
    }
    /**
     * Adds a merged cell to the matrix.
     *
     * @param {MergedCellCoords} mergedCell The merged cell to add.
     */
  }
  function AC(n, e) {
    let t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
    const i = /* @__PURE__ */ new Map(), r = t === 1 ? n.getTopStartCorner() : n.getBottomEndCorner(), s = t === 1 ? n.getBottomEndCorner() : n.getTopStartCorner();
    for (let o = r.row; t === 1 ? o <= s.row : o >= s.row; o += t)
      for (let a = r.col; t === 1 ? a <= s.col : a >= s.col; a += t) {
        const l = e === "row" ? o : a, c = this.get(o, a);
        let u = l;
        c && (u = t === 1 ? c[e] + c[`${e}span`] - 1 : c[e]), i.has(l) || i.set(l, /* @__PURE__ */ new Set()), i.get(l).add(u);
      }
    return Array.from(new Set(Array.from(i.entries()).filter((o) => {
      let [, a] = o;
      return a.size === 1;
    }).flatMap((o) => {
      let [, a] = o;
      return Array.from(a);
    })));
  }
  function PW(n) {
    for (let e = n.row; e < n.row + n.rowspan; e++)
      for (let t = n.col; t < n.col + n.colspan; t++)
        this.mergedCellsMatrix.has(e) || this.mergedCellsMatrix.set(e, /* @__PURE__ */ new Map()), this.mergedCellsMatrix.get(e).set(t, n);
  }
  function X2e(n) {
    for (let e = n.row; e < n.row + n.rowspan; e++)
      for (let t = n.col; t < n.col + n.colspan; t++)
        this.mergedCellsMatrix.get(e).delete(t);
  }
  function AM(n, e, t) {
    return (e = Z2e(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function Z2e(n) {
    var e = Q2e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function Q2e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class J2e {
    constructor(e) {
      AM(this, "plugin", void 0), AM(this, "mergedCellsCollection", void 0), AM(this, "currentFillData", null), this.plugin = e, this.mergedCellsCollection = this.plugin.mergedCellsCollection;
    }
    /**
     * Correct the provided selection area, so it's not selecting only a part of a merged cell.
     *
     * @param {Array} selectionArea The selection to correct.
     */
    correctSelectionAreaSize(e) {
      if (e[0] === e[2] && e[1] === e[3]) {
        const t = this.mergedCellsCollection.get(e[0], e[1]);
        t && (e[2] = e[0] + t.rowspan - 1, e[3] = e[1] + t.colspan - 1);
      }
    }
    /**
     * Get the direction of the autofill process.
     *
     * @param {Array} selectionArea The selection area.
     * @param {Array} finalArea The final area (base + drag).
     * @returns {string} `up`, `down`, `left` or `right`.
     */
    getDirection(e, t) {
      let i = null;
      return t[0] === e[0] && t[1] === e[1] && t[3] === e[3] ? i = "down" : t[2] === e[2] && t[1] === e[1] && t[3] === e[3] ? i = "up" : t[1] === e[1] && t[2] === e[2] ? i = "right" : i = "left", i;
    }
    /**
     * Snap the drag area to the farthest merged cell, so it won't clip any of the merged cells.
     *
     * @param {Array} baseArea The base selected area.
     * @param {Array} dragArea The drag area.
     * @param {string} dragDirection The autofill drag direction.
     * @param {Array} foundMergedCells MergeCellCoords found in the base selection area.
     * @returns {Array} The new drag area.
     */
    snapDragArea(e, t, i, r) {
      const s = t.slice(0), o = this.getAutofillSize(e, t, i), [a, l, c, u] = e, d = ["up", "down"].indexOf(i) > -1 ? c - a + 1 : u - l + 1, f = Math.floor(o / d) * d, g = o - f, p = this.getFarthestCollection(e, t, i, r);
      if (p) {
        if (i === "down") {
          const m = p.row + p.rowspan - a - g;
          s[2] + m >= this.plugin.hot.countRows() ? s[2] -= g : s[2] += g ? m : 0;
        } else if (i === "right") {
          const m = p.col + p.colspan - l - g;
          s[3] + m >= this.plugin.hot.countCols() ? s[3] -= g : s[3] += g ? m : 0;
        } else if (i === "up") {
          const m = c - g - p.row + 1;
          s[0] + m < 0 ? s[0] += g : s[0] -= g ? m : 0;
        } else if (i === "left") {
          const m = u - g - p.col + 1;
          s[1] + m < 0 ? s[1] += g : s[1] -= g ? m : 0;
        }
      }
      return this.updateCurrentFillCache({
        baseArea: e,
        dragDirection: i,
        foundMergedCells: r,
        fillSize: o,
        dragArea: s,
        cycleLength: d
      }), s;
    }
    /**
     * Update the current fill cache with the provided object.
     *
     * @private
     * @param {object} updateObject The current filled object cache.
     */
    updateCurrentFillCache(e) {
      this.currentFillData || (this.currentFillData = {}), ai(this.currentFillData, e);
    }
    /**
     * Get the "length" of the drag area.
     *
     * @private
     * @param {Array} baseArea The base selection area.
     * @param {Array} dragArea The drag area (containing the base area).
     * @param {string} direction The drag direction.
     * @returns {number|null} The "length" (height or width, depending on the direction) of the drag.
     */
    getAutofillSize(e, t, i) {
      const [r, s, o, a] = e, [l, c, u, h] = t;
      switch (i) {
        case "up":
          return r - l;
        case "down":
          return u - o;
        case "left":
          return s - c;
        case "right":
          return h - a;
        default:
          return null;
      }
    }
    /**
     * Trim the default drag area (containing the selection area) to the drag-only area.
     *
     * @private
     * @param {Array} baseArea The base selection area.
     * @param {Array} dragArea The base selection area extended by the drag area.
     * @param {string} direction Drag direction.
     * @returns {Array|null} Array representing the drag area coordinates.
     */
    getDragArea(e, t, i) {
      const [r, s, o, a] = e, [l, c, u, h] = t;
      switch (i) {
        case "up":
          return [l, c, r - 1, a];
        case "down":
          return [o + 1, s, u, a];
        case "left":
          return [l, c, o, s - 1];
        case "right":
          return [r, a + 1, u, h];
        default:
          return null;
      }
    }
    /**
     * Get the to-be-farthest merged cell in the newly filled area.
     *
     * @private
     * @param {Array} baseArea The base selection area.
     * @param {Array} dragArea The drag area (containing the base area).
     * @param {string} direction The drag direction.
     * @param {Array} mergedCellArray Array of the merged cells found in the base area.
     * @returns {MergedCellCoords|null}
     */
    getFarthestCollection(e, t, i, r) {
      const [s, o, a, l] = e, c = ["up", "down"].indexOf(i) > -1, u = c ? a : l, h = c ? s : o, d = this.getAutofillSize(e, t, i), f = c ? a - s + 1 : l - o + 1, g = Math.floor(d / f) * f, p = d - g;
      let m = null, v = null, y = null;
      switch (i) {
        case "up":
          m = "includesVertically", y = u - p + 1;
          break;
        case "left":
          m = "includesHorizontally", y = u - p + 1;
          break;
        case "down":
          m = "includesVertically", y = h + p - 1;
          break;
        case "right":
          m = "includesHorizontally", y = h + p - 1;
          break;
      }
      return z(r, (w) => {
        w[m](y) && w.isFarther(v, i) && (v = w);
      }), v;
    }
    /**
     * Recreate the merged cells after the autofill process.
     *
     * @param {Array} changes Changes made.
     */
    recreateAfterDataPopulation(e) {
      if (!this.currentFillData)
        return;
      const t = this.getRangeFromChanges(e), i = this.currentFillData.foundMergedCells, r = this.currentFillData.dragDirection, s = (c, u) => {
        switch (r) {
          case "up":
            return c.row - u >= t.from.row;
          case "down":
            return c.row + c.rowspan - 1 + u <= t.to.row;
          case "left":
            return c.col - u >= t.from.column;
          case "right":
            return c.col + c.colspan - 1 + u <= t.to.column;
          default:
            return null;
        }
      };
      let o = 0, a = null, l = 1;
      do
        for (let c = 0; c < i.length; c += 1) {
          if (a = i[c], o = l * this.currentFillData.cycleLength, s(a, o))
            switch (r) {
              case "up":
                this.plugin.mergedCellsCollection.add({
                  row: a.row - o,
                  rowspan: a.rowspan,
                  col: a.col,
                  colspan: a.colspan
                });
                break;
              case "down":
                this.plugin.mergedCellsCollection.add({
                  row: a.row + o,
                  rowspan: a.rowspan,
                  col: a.col,
                  colspan: a.colspan
                });
                break;
              case "left":
                this.plugin.mergedCellsCollection.add({
                  row: a.row,
                  rowspan: a.rowspan,
                  col: a.col - o,
                  colspan: a.colspan
                });
                break;
              case "right":
                this.plugin.mergedCellsCollection.add({
                  row: a.row,
                  rowspan: a.rowspan,
                  col: a.col + o,
                  colspan: a.colspan
                });
                break;
            }
          c === i.length - 1 && (l += 1);
        }
      while (s(a, o));
      this.currentFillData = null, this.plugin.hot.render(), i.length > 0 && this.plugin.ifChromeForceRepaint();
    }
    /**
     * Get the drag range from the changes made.
     *
     * @private
     * @param {Array} changes The changes made.
     * @returns {object} Object with `from` and `to` properties, both containing `row` and `column` keys.
     */
    getRangeFromChanges(e) {
      const t = {
        min: null,
        max: null
      }, i = {
        min: null,
        max: null
      };
      return z(e, (r) => {
        const s = r[0], o = this.plugin.hot.propToCol(r[1]);
        (t.min === null || s < t.min) && (t.min = s), (t.max === null || s > t.max) && (t.max = s), (i.min === null || o < i.min) && (i.min = o), (i.max === null || o > i.max) && (i.max = o);
      }), {
        from: {
          row: t.min,
          column: i.min
        },
        to: {
          row: t.max,
          column: i.max
        }
      };
    }
    /**
     * Check if the drag area contains any merged cells.
     *
     * @param {Array} baseArea The base selection area.
     * @param {Array} fullArea The base area extended by the drag area.
     * @param {string} direction Drag direction.
     * @returns {boolean}
     */
    dragAreaOverlapsCollections(e, t, i) {
      const r = this.getDragArea(e, t, i), [s, o, a, l] = r, c = this.plugin.hot._createCellCoords(s, o), u = this.plugin.hot._createCellCoords(a, l), h = this.plugin.hot._createCellRange(c, c, u);
      return this.mergedCellsCollection.getWithinRange(h, !0).length > 0;
    }
  }
  function PM(n, e, t) {
    return (e = eFe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function eFe(n) {
    var e = tFe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function tFe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class nFe {
    constructor(e) {
      PM(this, "plugin", void 0), PM(this, "hot", void 0), PM(this, "fullySelectedMergedCellClassName", "fullySelectedMergedCell"), this.plugin = e, this.hot = e.hot;
    }
    /**
     * Generate an additional class name for the entirely-selected merged cells.
     *
     * @param {number} currentRow Visual row index of the currently processed cell.
     * @param {number} currentColumn Visual column index of the currently cell.
     * @param {Array} cornersOfSelection Array of the current selection in a form of `[startRow, startColumn, endRow, endColumn]`.
     * @param {number|undefined} layerLevel Number indicating which layer of selection is currently processed.
     * @returns {string|undefined} A `String`, which will act as an additional `className` to be added to the currently processed cell.
     */
    getSelectedMergedCellClassName(e, t, i, r) {
      const s = Math.min(i[0], i[2]), o = Math.min(i[1], i[3]), a = Math.max(i[0], i[2]), l = Math.max(i[1], i[3]);
      if (r === void 0 || !this.plugin.mergedCellsCollection.isFirstRenderableMergedCell(e, t))
        return;
      const u = this.plugin.mergedCellsCollection.get(e, t);
      if (!u)
        return;
      const h = u.getLastRow(), d = u.getLastColumn();
      if (s <= u.row && o <= u.col && a >= h && l >= d)
        return `${this.fullySelectedMergedCellClassName}-${r}`;
      if (this.isMergeCellFullySelected(u, this.plugin.hot.getSelectedRange()))
        return `${this.fullySelectedMergedCellClassName}-multiple`;
    }
    /**
     * Check if the provided merged cell is fully selected (by one or many layers of selection).
     *
     * @param {MergedCellCoords} mergedCell The merged cell to be processed.
     * @param {CellRange[]} selectionRangesArray Array of selection ranges.
     * @returns {boolean}
     */
    isMergeCellFullySelected(e, t) {
      const i = [];
      if (!t || !e)
        return !1;
      for (let r = 0; r < e.rowspan; r += 1)
        for (let s = 0; s < e.colspan; s += 1)
          i.push(this.hot._createCellCoords(e.row + r, e.col + s));
      for (let r = 0; r < i.length; r += 1) {
        const s = [];
        for (let o = 0; o < t.length; o += 1)
          s[o] = t[o].includes(i[r]);
        if (!s.includes(!0))
          return !1;
      }
      return !0;
    }
    /**
     * Generate an array of the entirely-selected merged cells' class names.
     *
     * @returns {string[]} An `Array` of `String`s. Each of these strings will act like class names to be removed from all the cells in the table.
     */
    getSelectedMergedCellClassNameToRemove() {
      const e = [];
      for (let t = 0; t <= 7; t += 1)
        e.push(`${this.fullySelectedMergedCellClassName}-${t}`);
      return e.push(`${this.fullySelectedMergedCellClassName}-multiple`), e;
    }
  }
  function iFe(n) {
    return {
      key: "mergeCells",
      name() {
        const e = this.getSelectedLast();
        if (e) {
          const t = n.mergedCellsCollection.get(e[0], e[1]);
          if (t.row === e[0] && t.col === e[1] && t.row + t.rowspan - 1 === e[2] && t.col + t.colspan - 1 === e[3])
            return this.getTranslatedPhrase(RN);
        }
        return this.getTranslatedPhrase(_N);
      },
      callback() {
        const e = this.getSelectedRangeLast();
        if (!e)
          return;
        e.setDirection(this.isRtl() ? "NE-SW" : "NW-SE");
        const {
          from: t,
          to: i
        } = e;
        n.toggleMerge(e), this.selectCell(t.row, t.col, i.row, i.col, !1);
      },
      disabled() {
        const e = this.getSelectedLast();
        return e ? Na.isSingleCell({
          row: e[0],
          col: e[1],
          rowspan: e[2] - e[0] + 1,
          colspan: e[3] - e[1] + 1
        }) || this.selection.isSelectedByCorner() : !0;
      },
      hidden: !1
    };
  }
  function $v(n, e, t) {
    return (e = rFe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function rFe(n) {
    var e = sFe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function sFe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class IW {
    constructor(e) {
      $v(this, "data", void 0), $v(this, "next", null), $v(this, "prev", null), this.data = e;
    }
  }
  class PC {
    constructor() {
      $v(this, "first", null), $v(this, "last", null);
    }
    /**
     * Add data to the end of linked list.
     *
     * @param {object} data Data which should be added.
     * @returns {NodeStructure} Returns the node which has been added.
     */
    push(e) {
      const t = new IW(e);
      if (this.first === null)
        this.first = t, this.last = t;
      else {
        const i = this.last;
        this.last = t, t.prev = i, i.next = t;
      }
      return t;
    }
    /**
     * Add data to the beginning of linked list.
     *
     * @param {object} data Data which should be added.
     */
    unshift(e) {
      const t = new IW(e);
      if (this.first === null)
        this.first = t, this.last = t;
      else {
        const i = this.first;
        this.first = t, t.next = i, i.prev = t;
      }
    }
    /**
     * In order traversal of the linked list.
     *
     * @param {Function} callback Callback which should be executed on each node.
     */
    inorder(e) {
      let t = this.first;
      for (; t; ) {
        const i = e(t);
        if (t === this.last || i === !0)
          break;
        t = t.next;
      }
    }
    /**
     * Remove data from the linked list.
     *
     * @param {object} data Data which should be removed.
     * @returns {boolean} Returns true if data has been removed.
     */
    remove(e) {
      if (this.first === null)
        return !1;
      let t = this.first, i, r;
      for (; t; ) {
        if (t.data === e)
          return i = t.next, r = t.prev, i && (i.prev = r), r && (r.next = i), t === this.first && (this.first = i), t === this.last && (this.last = r), !0;
        t = t.next;
      }
      return !1;
    }
    /**
     * Check if linked list contains cycle.
     *
     * @returns {boolean} Returns true if linked list contains cycle.
     */
    hasCycle() {
      let e = this.first, t = this.first;
      for (; ; ) {
        if (e === null || (e = e.next, e === null))
          return !1;
        if (e = e.next, t = t.next, e === t)
          return !0;
      }
    }
    /**
     * Return last node from the linked list.
     *
     * @returns {NodeStructure} Last node.
     */
    pop() {
      if (this.last === null)
        return null;
      const e = this.last;
      return this.last = this.last.prev, e;
    }
    /**
     * Return first node from the linked list.
     *
     * @returns {NodeStructure} First node.
     */
    shift() {
      if (this.first === null)
        return null;
      const e = this.first;
      return this.first = this.first.next, e;
    }
    /**
     * Reverses the linked list recursively.
     */
    recursiveReverse() {
      function e(i, r) {
        r && (e(r, r.next), r.next = i);
      }
      if (!this.first)
        return;
      e(this.first, this.first.next), this.first.next = null;
      const t = this.first;
      this.first = this.last, this.last = t;
    }
    /**
     * Reverses the linked list iteratively.
     */
    reverse() {
      if (!this.first || !this.first.next)
        return;
      let e = this.first.next, t = this.first, i;
      for (; e; )
        i = e.next, e.next = t, t.prev = e, t = e, e = i;
      this.first.next = null, this.last.prev = null, i = this.first, this.first = t, this.last = i;
    }
  }
  function oFe(n, e) {
    vK(n, e), e.add(n);
  }
  function ed(n, e, t) {
    vK(n, e), e.set(n, t);
  }
  function vK(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function Vt(n, e) {
    return n.get(dR(n, e));
  }
  function ns(n, e, t) {
    return n.set(dR(n, e), t), t;
  }
  function dR(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var Ea = /* @__PURE__ */ new WeakMap(), xa = /* @__PURE__ */ new WeakMap(), Ta = /* @__PURE__ */ new WeakMap(), Ma = /* @__PURE__ */ new WeakMap(), EI = /* @__PURE__ */ new WeakMap(), IC = /* @__PURE__ */ new WeakMap(), OC = /* @__PURE__ */ new WeakMap(), IM = /* @__PURE__ */ new WeakSet();
  class aFe {
    constructor(e) {
      let {
        mergedCellsGetter: t,
        rowIndexMapper: i,
        columnIndexMapper: r
      } = e;
      oFe(this, IM), ed(this, Ea, new PC()), ed(this, xa, new PC()), ed(this, Ta, null), ed(this, Ma, null), ed(this, EI, null), ed(this, IC, null), ed(this, OC, null), ns(EI, this, t), ns(IC, this, i), ns(OC, this, r);
    }
    /**
     * Gets the currently selected node data from the vertical focus order list.
     *
     * @returns {NodeStructure}
     */
    getCurrentVerticalNode() {
      return Vt(Ma, this).data;
    }
    /**
     * Gets the first node data from the vertical focus order list.
     *
     * @returns {NodeStructure}
     */
    getFirstVerticalNode() {
      return Vt(xa, this).first.data;
    }
    /**
     * Gets the next selected node data from the vertical focus order list.
     *
     * @returns {NodeStructure}
     */
    getNextVerticalNode() {
      return Vt(Ma, this).next.data;
    }
    /**
     * Gets the previous selected node data from the vertical focus order list.
     *
     * @returns {NodeStructure}
     */
    getPrevVerticalNode() {
      return Vt(Ma, this).prev.data;
    }
    /**
     * Gets the currently selected node data from the horizontal focus order list.
     *
     * @returns {NodeStructure}
     */
    getCurrentHorizontalNode() {
      return Vt(Ta, this).data;
    }
    /**
     * Gets the first node data from the horizontal focus order list.
     *
     * @returns {NodeStructure}
     */
    getFirstHorizontalNode() {
      return Vt(Ea, this).first.data;
    }
    /**
     * Gets the next selected node data from the horizontal focus order list.
     *
     * @returns {NodeStructure}
     */
    getNextHorizontalNode() {
      return Vt(Ta, this).next.data;
    }
    /**
     * Gets the previous selected node data from the horizontal focus order list.
     *
     * @returns {NodeStructure}
     */
    getPrevHorizontalNode() {
      return Vt(Ta, this).prev.data;
    }
    /**
     * Sets the previous node from the vertical focus order list as active.
     */
    setPrevNodeAsActive() {
      ns(Ma, this, Vt(Ma, this).prev), ns(Ta, this, Vt(Ta, this).prev);
    }
    /**
     * Sets the previous node from the horizontal focus order list as active.
     */
    setNextNodeAsActive() {
      ns(Ma, this, Vt(Ma, this).next), ns(Ta, this, Vt(Ta, this).next);
    }
    /**
     * Rebuilds the focus order list based on the provided selection.
     *
     * @param {CellRange} selectedRange The selected range to build the focus order for.
     */
    buildFocusOrder(e) {
      const t = e.getTopStartCorner(), i = e.getBottomEndCorner(), r = /* @__PURE__ */ new WeakSet();
      ns(Ea, this, new PC());
      for (let o = t.row; o <= i.row; o++)
        if (!Vt(IC, this).isHidden(o))
          for (let a = t.col; a <= i.col; a++) {
            if (Vt(OC, this).isHidden(a))
              continue;
            const l = dR(IM, this, OW).call(this, e, Vt(Ea, this), r, o, a);
            l && ns(Ta, this, l);
          }
      Vt(Ea, this).first && (Vt(Ea, this).first.prev = Vt(Ea, this).last, Vt(Ea, this).last.next = Vt(Ea, this).first);
      const s = /* @__PURE__ */ new WeakSet();
      ns(xa, this, new PC());
      for (let o = t.col; o <= i.col; o++)
        if (!Vt(OC, this).isHidden(o))
          for (let a = t.row; a <= i.row; a++) {
            if (Vt(IC, this).isHidden(a))
              continue;
            const l = dR(IM, this, OW).call(this, e, Vt(xa, this), s, a, o);
            l && ns(Ma, this, l);
          }
      Vt(xa, this).first && (Vt(xa, this).first.prev = Vt(xa, this).last, Vt(xa, this).last.next = Vt(xa, this).first);
    }
    /**
     * Sets the active node based on the provided row and column.
     *
     * @param {number} row The visual row index.
     * @param {number} column The visual column index.
     * @returns {FocusOrder}
     */
    setActiveNode(e, t) {
      return Vt(Ea, this).inorder((i) => {
        const {
          rowStart: r,
          rowEnd: s,
          colStart: o,
          colEnd: a
        } = i.data;
        if (e >= r && e <= s && t >= o && t <= a)
          return ns(Ta, this, i), !1;
      }), Vt(xa, this).inorder((i) => {
        const {
          rowStart: r,
          rowEnd: s,
          colStart: o,
          colEnd: a
        } = i.data;
        if (e >= r && e <= s && t >= o && t <= a)
          return ns(Ma, this, i), !1;
      }), this;
    }
  }
  function OW(n, e, t, i, r) {
    const s = n.getTopStartCorner(), o = n.getBottomEndCorner(), a = n.highlight.clone().normalize(), l = Vt(EI, this).call(this, i, r);
    if (l && t.has(l))
      return null;
    const c = {
      colStart: r,
      colEnd: r,
      rowStart: i,
      rowEnd: i
    };
    if (l) {
      if (t.add(l), l.row < s.row || l.row + l.rowspan - 1 > o.row || l.col < s.col || l.col + l.colspan - 1 > o.col)
        return null;
      c.colStart = l.col, c.colEnd = l.col + l.colspan - 1, c.rowStart = l.row, c.rowEnd = l.row + l.rowspan - 1;
    }
    const u = e.push(c);
    return i === a.row && r === a.col || l && a.row >= l.row && a.row <= l.row + l.rowspan - 1 && a.col >= l.col && a.col <= l.col + l.colspan - 1 ? u : null;
  }
  function lFe(n) {
    const {
      hot: e
    } = n, {
      rowIndexMapper: t,
      columnIndexMapper: i
    } = e;
    function r() {
    }
    function s(o, a, l) {
      const c = n.mergedCellsCollection.get(a, l);
      if (!at(c)) {
        o.removeAttribute("rowspan"), o.removeAttribute("colspan"), o.style.display = "";
        return;
      }
      const {
        row: u,
        col: h,
        colspan: d,
        rowspan: f
      } = c, [g, p] = n.translateMergedCellToRenderable(u, f, h, d), m = t.getRenderableFromVisualIndex(a), v = i.getRenderableFromVisualIndex(l), y = g - m + 1, w = p - v + 1, R = t.getNearestNotHiddenIndex(u, 1), E = i.getNearestNotHiddenIndex(h, 1), C = Math.min(f, y), T = Math.min(d, w);
      R === a && E === l ? (o.setAttribute("rowspan", C), o.setAttribute("colspan", T)) : (o.removeAttribute("rowspan"), o.removeAttribute("colspan"), o.style.display = "none");
    }
    return {
      before: r,
      after: s
    };
  }
  function cFe(n, e) {
    wK(n, e), e.add(n);
  }
  function kC(n, e, t) {
    wK(n, e), e.set(n, t);
  }
  function wK(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function OM(n, e, t) {
    return (e = uFe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function uFe(n) {
    var e = hFe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function hFe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function Tw(n, e, t) {
    return n.set(Ut(n, e), t), t;
  }
  function un(n, e) {
    return n.get(Ut(n, e));
  }
  function Ut(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  Ie.getSingleton().register("beforeMergeCells");
  Ie.getSingleton().register("afterMergeCells");
  Ie.getSingleton().register("beforeUnmergeCells");
  Ie.getSingleton().register("afterUnmergeCells");
  const Fv = "mergeCells", dFe = 150, kW = Fv;
  var Xs = /* @__PURE__ */ new WeakMap(), Zs = /* @__PURE__ */ new WeakMap(), za = /* @__PURE__ */ new WeakMap(), DW = /* @__PURE__ */ new WeakMap(), Xt = /* @__PURE__ */ new WeakSet();
  class fFe extends Lt {
    constructor() {
      super(...arguments), cFe(this, Xt), OM(this, "mergedCellsCollection", null), OM(this, "autofillCalculations", null), OM(this, "selectionCalculations", null), kC(this, Xs, null), kC(this, Zs, {
        row: 0,
        col: 0
      }), kC(this, za, new aFe({
        mergedCellsGetter: (e, t) => this.mergedCellsCollection.get(e, t),
        rowIndexMapper: this.hot.rowIndexMapper,
        columnIndexMapper: this.hot.columnIndexMapper
      })), kC(this, DW, lFe(this));
    }
    static get PLUGIN_KEY() {
      return Fv;
    }
    static get PLUGIN_PRIORITY() {
      return dFe;
    }
    /**
     * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link MergeCells#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return !!this.hot.getSettings()[Fv];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
    enablePlugin() {
      var e = this;
      this.enabled || (this.mergedCellsCollection = new hR(this), this.autofillCalculations = new J2e(this), this.selectionCalculations = new nFe(this), this.addHook("afterInit", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ut(Xt, e, gFe).call(e, ...i);
      }), this.addHook("modifyTransformFocus", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ut(Xt, e, mFe).call(e, ...i);
      }), this.addHook("modifyTransformStart", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ut(Xt, e, bFe).call(e, ...i);
      }), this.addHook("modifyTransformEnd", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ut(Xt, e, vFe).call(e, ...i);
      }), this.addHook("beforeSelectionHighlightSet", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ut(Xt, e, wFe).call(e, ...i);
      }), this.addHook("beforeSetRangeStart", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ut(Xt, e, NW).call(e, ...i);
      }), this.addHook("beforeSetRangeStartOnly", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ut(Xt, e, NW).call(e, ...i);
      }), this.addHook("beforeSelectionFocusSet", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ut(Xt, e, SFe).call(e, ...i);
      }), this.addHook("afterSelectionFocusSet", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ut(Xt, e, _Fe).call(e, ...i);
      }), this.addHook("afterSelectionEnd", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ut(Xt, e, RFe).call(e, ...i);
      }), this.addHook("modifyGetCellCoords", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ut(Xt, e, yFe).call(e, ...i);
      }), this.addHook("afterIsMultipleSelection", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ut(Xt, e, pFe).call(e, ...i);
      }), this.addHook("afterRenderer", function() {
        return un(DW, e).after(...arguments);
      }), this.addHook("afterContextMenuDefaultOptions", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ut(Xt, e, CFe).call(e, ...i);
      }), this.addHook("afterGetCellMeta", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ut(Xt, e, EFe).call(e, ...i);
      }), this.addHook("afterViewportRowCalculatorOverride", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ut(Xt, e, xFe).call(e, ...i);
      }), this.addHook("afterViewportColumnCalculatorOverride", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ut(Xt, e, TFe).call(e, ...i);
      }), this.addHook("modifyAutofillRange", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ut(Xt, e, MFe).call(e, ...i);
      }), this.addHook("afterCreateCol", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ut(Xt, e, AFe).call(e, ...i);
      }), this.addHook("afterRemoveCol", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ut(Xt, e, PFe).call(e, ...i);
      }), this.addHook("afterCreateRow", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ut(Xt, e, IFe).call(e, ...i);
      }), this.addHook("afterRemoveRow", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ut(Xt, e, OFe).call(e, ...i);
      }), this.addHook("afterChange", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ut(Xt, e, kFe).call(e, ...i);
      }), this.addHook("beforeDrawBorders", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ut(Xt, e, DFe).call(e, ...i);
      }), this.addHook("afterDrawSelection", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ut(Xt, e, NFe).call(e, ...i);
      }), this.addHook("beforeRemoveCellClassNames", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ut(Xt, e, LFe).call(e, ...i);
      }), this.addHook("beforeBeginEditing", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ut(Xt, e, HFe).call(e, ...i);
      }), this.addHook("modifyRowHeightByOverlayName", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ut(Xt, e, $Fe).call(e, ...i);
      }), this.addHook("beforeUndoStackChange", (t, i) => {
        if (i === "MergeCells")
          return !1;
      }), this.registerShortcuts(), super.enablePlugin());
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
    disablePlugin() {
      this.clearCollections(), this.unregisterShortcuts(), this.hot.render(), super.disablePlugin();
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the
     * following configuration options:
     *  - [`mergeCells`](@/api/options.md#mergecells)
     */
    updatePlugin() {
      const e = this.hot.getSettings()[Fv];
      this.disablePlugin(), this.enablePlugin(), this.generateFromSettings(e), super.updatePlugin();
    }
    /**
     * If the browser is recognized as Chrome, force an additional repaint to prevent showing the effects of a Chrome bug.
     *
     * Issue described in https://github.com/handsontable/dev-handsontable/issues/521.
     *
     * @private
     */
    ifChromeForceRepaint() {
      if (!CD())
        return;
      const e = [];
      let t = [];
      this.mergedCellsCollection.mergedCells.forEach((i) => {
        const {
          row: r,
          rowspan: s
        } = i;
        for (let o = r + 1; o < r + s; o++)
          t.push(o);
      }), t = [...new Set(t)], t.forEach((i) => {
        const r = this.hot.rowIndexMapper.getRenderableFromVisualIndex(i);
        this.hot.view._wt.wtOverlays.getOverlays(!0).map((s) => (s == null ? void 0 : s.name) === "master" ? s : s.clone.wtTable).forEach((s) => {
          const o = s.getRow(r);
          o && (o.style.background = Cp(o, "backgroundColor").replace(")", ", 0.99)"), e.push(o));
        });
      }), this.hot._registerTimeout(() => {
        e.forEach((i) => {
          i.style.background = Cp(i, "backgroundColor").replace(", 0.99)", ")");
        });
      }, 1);
    }
    /**
     * Validates a single setting object, represented by a single merged cell information object.
     *
     * @private
     * @param {object} setting An object with `row`, `col`, `rowspan` and `colspan` properties.
     * @returns {boolean}
     */
    validateSetting(e) {
      return e ? Na.containsNegativeValues(e) ? (Yt(Na.NEGATIVE_VALUES_WARNING(e)), !1) : Na.isOutOfBounds(e, this.hot.countRows(), this.hot.countCols()) ? (Yt(Na.IS_OUT_OF_BOUNDS_WARNING(e)), !1) : Na.isSingleCell(e) ? (Yt(Na.IS_SINGLE_CELL(e)), !1) : Na.containsZeroSpan(e) ? (Yt(Na.ZERO_SPAN_WARNING(e)), !1) : !0 : !1;
    }
    /**
     * Generates the merged cells from the settings provided to the plugin.
     *
     * @private
     * @param {Array|boolean} settings The settings provided to the plugin.
     */
    generateFromSettings(e) {
      if (!Array.isArray(e))
        return;
      const t = e.filter((s) => this.validateSetting(s)), i = this.mergedCellsCollection.filterOverlappingMergeCells(t), r = [];
      i.forEach((s) => {
        const {
          row: o,
          col: a,
          rowspan: l,
          colspan: c
        } = s, u = this.hot._createCellCoords(o, a), h = this.hot._createCellCoords(o + l - 1, a + c - 1), d = this.hot._createCellRange(u, u, h);
        this.mergeRange(d, !0, !0);
        for (let f = o; f < o + l; f++)
          for (let g = a; g < a + c; g++)
            (f !== o || g !== a) && r.push([f, g, null]);
      }), r.length !== 0 && this.hot.setDataAtCell(r, void 0, void 0, this.pluginName);
    }
    /**
     * Clears the merged cells from the merged cell container.
     */
    clearCollections() {
      this.mergedCellsCollection.clear();
    }
    /**
     * Returns `true` if a range is mergeable.
     *
     * @private
     * @param {object} newMergedCellInfo Merged cell information object to test.
     * @param {boolean} [auto=false] `true` if triggered at initialization.
     * @returns {boolean}
     */
    canMergeRange(e) {
      return (arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1) ? !0 : this.validateSetting(e);
    }
    /**
     * Merges the selection provided as a cell range.
     *
     * @param {CellRange} [cellRange] Selection cell range.
     */
    mergeSelection() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.hot.getSelectedRangeLast();
      if (!e)
        return;
      e.setDirection(this.hot.isRtl() ? "NE-SW" : "NW-SE");
      const {
        from: t,
        to: i
      } = e;
      this.unmergeRange(e, !0), this.mergeRange(e), this.hot.selectCell(t.row, t.col, i.row, i.col, !1);
    }
    /**
     * Unmerges the selection provided as a cell range.
     *
     * @param {CellRange} [cellRange] Selection cell range.
     */
    unmergeSelection() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.hot.getSelectedRangeLast();
      if (!e)
        return;
      const {
        from: t,
        to: i
      } = e;
      this.unmergeRange(e, !0), this.hot.selectCell(t.row, t.col, i.row, i.col, !1);
    }
    /**
     * Merges cells in the provided cell range.
     *
     * @private
     * @param {CellRange} cellRange Cell range to merge.
     * @param {boolean} [auto=false] `true` if is called automatically, e.g. At initialization.
     * @param {boolean} [preventPopulation=false] `true`, if the method should not run `populateFromArray` at the end,
     *   but rather return its arguments.
     * @returns {Array|boolean} Returns an array of [row, column, dataUnderCollection] if preventPopulation is set to
     *   true. If the the merging process went successful, it returns `true`, otherwise - `false`.
     * @fires Hooks#beforeMergeCells
     * @fires Hooks#afterMergeCells
     */
    mergeRange(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
      const r = e.getTopStartCorner(), s = e.getBottomEndCorner(), o = {
        row: r.row,
        col: r.col,
        rowspan: s.row - r.row + 1,
        colspan: s.col - r.col + 1
      }, a = [];
      let l = null;
      return this.canMergeRange(o, t) ? (this.hot.runHooks("beforeMergeCells", e, t), $e(0, o.rowspan - 1, (u) => {
        $e(0, o.colspan - 1, (h) => {
          let d = null;
          a[u] || (a[u] = []), u === 0 && h === 0 ? d = this.hot.getSourceDataAtCell(this.hot.toPhysicalRow(o.row), this.hot.toPhysicalColumn(o.col)) : this.hot.setCellMeta(o.row + u, o.col + h, "hidden", !0), a[u][h] = d;
        });
      }), this.hot.setCellMeta(o.row, o.col, "spanned", !0), this.mergedCellsCollection.add(o, t) ? (i ? l = [o.row, o.col, a] : this.hot.populateFromArray(o.row, o.col, a, void 0, void 0, this.pluginName), t || this.ifChromeForceRepaint(), this.hot.runHooks("afterMergeCells", e, o, t), l) : !0) : !1;
    }
    /**
     * Unmerges the selection provided as a cell range. If no cell range is provided, it uses the current selection.
     *
     * @private
     * @param {CellRange} cellRange Selection cell range.
     * @param {boolean} [auto=false] `true` if called automatically by the plugin.
     *
     * @fires Hooks#beforeUnmergeCells
     * @fires Hooks#afterUnmergeCells
     */
    unmergeRange(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
      const i = this.mergedCellsCollection.getWithinRange(e);
      i.length !== 0 && (this.hot.runHooks("beforeUnmergeCells", e, t), z(i, (r) => {
        this.mergedCellsCollection.remove(r.row, r.col), $e(0, r.rowspan - 1, (s) => {
          $e(0, r.colspan - 1, (o) => {
            this.hot.removeCellMeta(r.row + s, r.col + o, "hidden"), this.hot.removeCellMeta(r.row + s, r.col + o, "copyable");
          });
        }), this.hot.removeCellMeta(r.row, r.col, "spanned");
      }), this.hot.runHooks("afterUnmergeCells", e, t), this.hot.render());
    }
    /**
     * Merges or unmerges, based on the cell range provided as `cellRange`.
     *
     * @private
     * @param {CellRange} cellRange The cell range to merge or unmerged.
     */
    toggleMerge(e) {
      const t = this.mergedCellsCollection.get(e.from.row, e.from.col);
      t.row === e.from.row && t.col === e.from.col && t.row + t.rowspan - 1 === e.to.row && t.col + t.colspan - 1 === e.to.col ? this.unmergeRange(e) : this.mergeSelection(e);
    }
    /**
     * Merges the specified range.
     *
     * @param {number} startRow Start row of the merged cell.
     * @param {number} startColumn Start column of the merged cell.
     * @param {number} endRow End row of the merged cell.
     * @param {number} endColumn End column of the merged cell.
     * @fires Hooks#beforeMergeCells
     * @fires Hooks#afterMergeCells
     */
    merge(e, t, i, r) {
      const s = this.hot._createCellCoords(e, t), o = this.hot._createCellCoords(i, r);
      this.mergeRange(this.hot._createCellRange(s, s, o));
    }
    /**
     * Unmerges the merged cell in the provided range.
     *
     * @param {number} startRow Start row of the merged cell.
     * @param {number} startColumn Start column of the merged cell.
     * @param {number} endRow End row of the merged cell.
     * @param {number} endColumn End column of the merged cell.
     * @fires Hooks#beforeUnmergeCells
     * @fires Hooks#afterUnmergeCells
     */
    unmerge(e, t, i, r) {
      const s = this.hot._createCellCoords(e, t), o = this.hot._createCellCoords(i, r);
      this.unmergeRange(this.hot._createCellRange(s, s, o));
    }
    /**
     * Register shortcuts responsible for toggling a merge.
     *
     * @private
     */
    registerShortcuts() {
      this.hot.getShortcutManager().getContext("grid").addShortcut({
        keys: [["Control", "m"]],
        callback: () => {
          const i = this.hot.getSelectedRangeLast();
          i && !i.isSingleHeader() && (this.toggleMerge(i), this.hot.render());
        },
        runOnlyIf: (i) => !i.altKey,
        // right ALT in some systems triggers ALT+CTRL
        group: kW
      });
    }
    /**
     * Unregister shortcuts responsible for toggling a merge.
     *
     * @private
     */
    unregisterShortcuts() {
      this.hot.getShortcutManager().getContext("grid").removeShortcutsByGroup(kW);
    }
    /**
     * Modifies the information on whether the current selection contains multiple cells. The `afterIsMultipleSelection`
     * hook callback.
     *
     * @param {boolean} isMultiple Determines whether the current selection contains multiple cells.
     * @returns {boolean}
     */
    /**
     * Modify viewport start when needed. We extend viewport when merged cells aren't fully visible.
     *
     * @private
     * @param {object} calc The row calculator object.
     * @param {number} nrOfColumns Number of visual columns.
     */
    modifyViewportRowStart(e, t) {
      const i = this.hot.rowIndexMapper, r = i.getVisualFromRenderableIndex(e.startRow);
      for (let s = 0; s < t; s += 1) {
        const o = this.mergedCellsCollection.get(r, s);
        if (at(o)) {
          const a = i.getRenderableFromVisualIndex(i.getNearestNotHiddenIndex(o.row, 1));
          if (a < e.startRow) {
            e.startRow = a, this.modifyViewportRowStart(e, t);
            return;
          }
        }
      }
    }
    /**
     *  Modify viewport end when needed. We extend viewport when merged cells aren't fully visible.
     *
     * @private
     * @param {object} calc The row calculator object.
     * @param {number} nrOfColumns Number of visual columns.
     */
    modifyViewportRowEnd(e, t) {
      const i = this.hot.rowIndexMapper, r = i.getVisualFromRenderableIndex(e.endRow);
      for (let s = 0; s < t; s += 1) {
        const o = this.mergedCellsCollection.get(r, s);
        if (at(o)) {
          const a = o.row + o.rowspan - 1, l = i.getRenderableFromVisualIndex(i.getNearestNotHiddenIndex(a, -1));
          if (l > e.endRow) {
            e.endRow = l, this.modifyViewportRowEnd(e, t);
            return;
          }
        }
      }
    }
    /**
     * `afterViewportColumnCalculatorOverride` hook callback.
     *
     * @param {object} calc The column calculator object.
     */
    /**
     * Modify viewport start when needed. We extend viewport when merged cells aren't fully visible.
     *
     * @private
     * @param {object} calc The column calculator object.
     * @param {number} nrOfRows Number of visual rows.
     */
    modifyViewportColumnStart(e, t) {
      const i = this.hot.columnIndexMapper, r = i.getVisualFromRenderableIndex(e.startColumn);
      for (let s = 0; s < t; s += 1) {
        const o = this.mergedCellsCollection.get(s, r);
        if (at(o)) {
          const a = i.getRenderableFromVisualIndex(i.getNearestNotHiddenIndex(o.col, 1));
          if (a < e.startColumn) {
            e.startColumn = a, this.modifyViewportColumnStart(e, t);
            return;
          }
        }
      }
    }
    /**
     *  Modify viewport end when needed. We extend viewport when merged cells aren't fully visible.
     *
     * @private
     * @param {object} calc The column calculator object.
     * @param {number} nrOfRows Number of visual rows.
     */
    modifyViewportColumnEnd(e, t) {
      const i = this.hot.columnIndexMapper, r = i.getVisualFromRenderableIndex(e.endColumn);
      for (let s = 0; s < t; s += 1) {
        const o = this.mergedCellsCollection.get(s, r);
        if (at(o)) {
          const a = o.col + o.colspan - 1, l = i.getRenderableFromVisualIndex(i.getNearestNotHiddenIndex(a, -1));
          if (l > e.endColumn) {
            e.endColumn = l, this.modifyViewportColumnEnd(e, t);
            return;
          }
        }
      }
    }
    /**
     * Translates merged cell coordinates to renderable indexes.
     *
     * @private
     * @param {number} parentRow Visual row index.
     * @param {number} rowspan Rowspan which describes shift which will be applied to parent row
     *                         to calculate renderable index which points to the most bottom
     *                         index position. Pass rowspan as `0` to calculate the most top
     *                         index position.
     * @param {number} parentColumn Visual column index.
     * @param {number} colspan Colspan which describes shift which will be applied to parent column
     *                         to calculate renderable index which points to the most right
     *                         index position. Pass colspan as `0` to calculate the most left
     *                         index position.
     * @returns {number[]}
     */
    translateMergedCellToRenderable(e, t, i, r) {
      const {
        rowIndexMapper: s,
        columnIndexMapper: o
      } = this.hot;
      let a, l;
      t === 0 ? a = s.getNearestNotHiddenIndex(e, 1) : a = s.getNearestNotHiddenIndex(e + t - 1, -1), r === 0 ? l = o.getNearestNotHiddenIndex(i, 1) : l = o.getNearestNotHiddenIndex(i + r - 1, -1);
      const c = e >= 0 ? s.getRenderableFromVisualIndex(a) : e, u = i >= 0 ? o.getRenderableFromVisualIndex(l) : i;
      return [c, u];
    }
    /**
     * The `modifyAutofillRange` hook callback.
     *
     * @param {Array} drag The drag area coordinates.
     * @param {Array} select The selection information.
     * @returns {Array} The new drag area.
     */
  }
  function gFe() {
    this.generateFromSettings(this.hot.getSettings()[Fv]), this.hot.render();
  }
  function pFe(n) {
    if (n) {
      const e = this.mergedCellsCollection.mergedCells, t = this.hot.getSelectedRangeLast(), i = t.getTopStartCorner(), r = t.getBottomEndCorner();
      for (let s = 0; s < e.length; s += 1)
        if (i.row === e[s].row && i.col === e[s].col && r.row === e[s].row + e[s].rowspan - 1 && r.col === e[s].col + e[s].colspan - 1)
          return !1;
    }
    return n;
  }
  function mFe(n) {
    un(Zs, this).row = n.row, un(Zs, this).col = n.col;
  }
  function bFe(n) {
    const e = this.hot.getSelectedRangeLast(), {
      highlight: t
    } = e, {
      columnIndexMapper: i,
      rowIndexMapper: r
    } = this.hot;
    un(Xs, this) && (r.getRenderableFromVisualIndex(un(Xs, this).row) !== null && (t.row = un(Xs, this).row), i.getRenderableFromVisualIndex(un(Xs, this).col) !== null && (t.col = un(Xs, this).col), Tw(Xs, this, null));
    const s = this.mergedCellsCollection.get(t.row, t.col);
    if (!s)
      return;
    const o = s.col, a = s.col + s.colspan - 1;
    if (n.col < 0) {
      const u = t.col >= o && t.col <= a ? o - 1 : a, h = i.getNearestNotHiddenIndex(u, -1);
      h === null ? n.col = -this.hot.view.countRenderableColumnsInRange(0, t.col) : n.col = -Math.max(this.hot.view.countRenderableColumnsInRange(h, t.col) - 1, 1);
    } else if (n.col > 0) {
      const u = t.col >= o && t.col <= a ? a + 1 : o, h = i.getNearestNotHiddenIndex(u, 1);
      h === null ? n.col = this.hot.view.countRenderableColumnsInRange(t.col, this.hot.countCols()) : n.col = Math.max(this.hot.view.countRenderableColumnsInRange(t.col, h) - 1, 1);
    }
    const l = s.row, c = s.row + s.rowspan - 1;
    if (n.row < 0) {
      const u = t.row >= l && t.row <= c ? l - 1 : c, h = r.getNearestNotHiddenIndex(u, -1);
      h === null ? n.row = -this.hot.view.countRenderableRowsInRange(0, t.row) : n.row = -Math.max(this.hot.view.countRenderableRowsInRange(h, t.row) - 1, 1);
    } else if (n.row > 0) {
      const u = t.row >= l && t.row <= c ? c + 1 : l, h = r.getNearestNotHiddenIndex(u, 1);
      h === null ? n.row = this.hot.view.countRenderableRowsInRange(t.row, this.hot.countRows()) : n.row = Math.max(this.hot.view.countRenderableRowsInRange(t.row, h) - 1, 1);
    }
  }
  function vFe(n) {
    const e = this.hot.getSelectedRangeLast(), t = e.clone(), {
      to: i
    } = e, {
      columnIndexMapper: r,
      rowIndexMapper: s
    } = this.hot, o = (a, l) => {
      t.expand(this.hot._createCellCoords(a, l));
      for (let c = 0; c < this.mergedCellsCollection.mergedCells.length; c += 1)
        t.expandByRange(this.mergedCellsCollection.mergedCells[c].getRange());
    };
    if (n.col < 0) {
      let a = this.mergedCellsCollection.getStartMostColumnIndex(e, i.col) + n.col;
      o(i.row, a), e.getHorizontalDirection() === "E-W" && t.getHorizontalDirection() === "E-W" && (a = t.getTopStartCorner().col);
      const l = r.getNearestNotHiddenIndex(a, 1);
      l !== null && (n.col = -Math.max(this.hot.view.countRenderableColumnsInRange(l, i.col) - 1, 1));
    } else if (n.col > 0) {
      let a = this.mergedCellsCollection.getEndMostColumnIndex(e, i.col) + n.col;
      o(i.row, a), e.getHorizontalDirection() === "W-E" && t.getHorizontalDirection() === "W-E" && (a = t.getBottomEndCorner().col);
      const l = r.getNearestNotHiddenIndex(a, -1);
      l !== null && (n.col = Math.max(this.hot.view.countRenderableColumnsInRange(i.col, l) - 1, 1));
    }
    if (n.row < 0) {
      let a = this.mergedCellsCollection.getTopMostRowIndex(e, i.row) + n.row;
      o(a, i.col), e.getVerticalDirection() === "S-N" && t.getVerticalDirection() === "S-N" && (a = t.getTopStartCorner().row);
      const l = s.getNearestNotHiddenIndex(a, 1);
      l !== null && (n.row = -Math.max(this.hot.view.countRenderableRowsInRange(l, i.row) - 1, 1));
    } else if (n.row > 0) {
      let a = this.mergedCellsCollection.getBottomMostRowIndex(e, i.row) + n.row;
      o(a, i.col), e.getVerticalDirection() === "N-S" && t.getVerticalDirection() === "N-S" && (a = t.getBottomStartCorner().row);
      const l = s.getNearestNotHiddenIndex(a, -1);
      l !== null && (n.row = Math.max(this.hot.view.countRenderableRowsInRange(i.row, l) - 1, 1));
    }
  }
  function wFe() {
    const n = this.hot.getSelectedRangeLast(), {
      highlight: e
    } = n;
    if (this.hot.selection.isSelectedByColumnHeader() || this.hot.selection.isSelectedByRowHeader()) {
      Tw(Xs, this, e.clone());
      return;
    }
    for (let i = 0; i < this.mergedCellsCollection.mergedCells.length; i += 1)
      n.expandByRange(this.mergedCellsCollection.mergedCells[i].getRange(), !1);
    for (let i = 0; i < this.mergedCellsCollection.mergedCells.length; i += 1)
      n.expandByRange(this.mergedCellsCollection.mergedCells[i].getRange(), !1);
    const t = this.mergedCellsCollection.get(e.row, e.col);
    Tw(Xs, this, e.clone()), t && e.assign(t);
  }
  function yFe(n, e) {
    if (n < 0 || e < 0)
      return;
    const t = this.mergedCellsCollection.get(n, e);
    if (!t)
      return;
    const {
      row: i,
      col: r,
      colspan: s,
      rowspan: o
    } = t;
    return [
      // Most top-left merged cell coords.
      i,
      r,
      // Most bottom-right merged cell coords.
      i + o - 1,
      r + s - 1
    ];
  }
  function CFe(n) {
    n.items.push({
      name: "---------"
    }, iFe(this));
  }
  function NW() {
    Tw(Xs, this, null);
  }
  function SFe() {
    if (un(Xs, this).isCell())
      return;
    const n = this.hot.getSelectedRangeLast(), e = n.getVerticalDirection(), t = n.getHorizontalDirection(), i = un(Xs, this).clone().normalize();
    un(za, this).setActiveNode(i.row, i.col), un(Zs, this).row > 0 || un(Zs, this).col > 0 ? un(za, this).setPrevNodeAsActive() : (t === "E-W" && un(Zs, this).col < 0 || e === "S-N" && un(Zs, this).row < 0) && un(za, this).setNextNodeAsActive();
  }
  function _Fe(n, e) {
    const t = this.hot.getSelectedRangeLast(), {
      columnIndexMapper: i,
      rowIndexMapper: r
    } = this.hot;
    let s = null, o = null;
    if (un(Zs, this).col < 0) {
      const {
        rowEnd: a,
        colEnd: l
      } = un(za, this).getPrevHorizontalNode();
      o = i.getNearestNotHiddenIndex(l, -1), s = r.getNearestNotHiddenIndex(a, -1);
    } else if (un(Zs, this).col > 0) {
      const {
        rowStart: a,
        colStart: l
      } = un(za, this).getNextHorizontalNode();
      o = i.getNearestNotHiddenIndex(l, 1), s = r.getNearestNotHiddenIndex(a, 1);
    } else if (un(Zs, this).row < 0) {
      const {
        rowEnd: a,
        colEnd: l
      } = un(za, this).getPrevVerticalNode();
      o = i.getNearestNotHiddenIndex(l, -1), s = r.getNearestNotHiddenIndex(a, -1);
    } else if (un(Zs, this).row > 0) {
      const {
        rowStart: a,
        colStart: l
      } = un(za, this).getNextVerticalNode();
      o = i.getNearestNotHiddenIndex(l, 1), s = r.getNearestNotHiddenIndex(a, 1);
    }
    if (s !== null || o !== null) {
      const a = this.hot._createCellCoords(s, o), l = this.mergedCellsCollection.get(a.row, a.col), c = this.hot.selection.highlight.getFocus();
      n = a.row, e = a.col, l ? t.highlight.assign({
        row: this.hot.rowIndexMapper.getNearestNotHiddenIndex(l.row, 1),
        col: this.hot.columnIndexMapper.getNearestNotHiddenIndex(l.col, 1)
      }) : t.highlight.assign(a), c.clear(), c.add(a).commit();
    }
    un(za, this).setActiveNode(n, e), Tw(Zs, this, {
      row: 0,
      col: 0
    });
  }
  function RFe() {
    this.hot.getSelectedRangeLast().isHeader() || un(za, this).buildFocusOrder(this.hot.getSelectedRangeLast());
  }
  function EFe(n, e, t) {
    const i = this.mergedCellsCollection.get(n, e);
    i && (i.row !== n || i.col !== e ? t.copyable = !1 : (t.rowspan = i.rowspan, t.colspan = i.colspan));
  }
  function xFe(n) {
    const e = this.hot.countCols();
    this.modifyViewportRowStart(n, e), this.modifyViewportRowEnd(n, e);
  }
  function TFe(n) {
    const e = this.hot.countRows();
    this.modifyViewportColumnStart(n, e), this.modifyViewportColumnEnd(n, e);
  }
  function MFe(n, e) {
    this.autofillCalculations.correctSelectionAreaSize(e);
    const t = this.autofillCalculations.getDirection(e, n);
    let i = n;
    if (this.autofillCalculations.dragAreaOverlapsCollections(e, i, t))
      return i = e, i;
    const r = this.hot._createCellCoords(e[0], e[1]), s = this.hot._createCellCoords(e[2], e[3]), o = this.hot._createCellRange(r, r, s), a = this.mergedCellsCollection.getWithinRange(o);
    return a.length === 0 || (i = this.autofillCalculations.snapDragArea(e, i, t, a)), i;
  }
  function AFe(n, e) {
    this.mergedCellsCollection.shiftCollections("right", n, e);
  }
  function PFe(n, e) {
    this.mergedCellsCollection.shiftCollections("left", n, e);
  }
  function IFe(n, e, t) {
    t !== "auto" && this.mergedCellsCollection.shiftCollections("down", n, e);
  }
  function OFe(n, e) {
    this.mergedCellsCollection.shiftCollections("up", n, e);
  }
  function kFe(n, e) {
    e === "Autofill.fill" && this.autofillCalculations.recreateAfterDataPopulation(n);
  }
  function DFe(n, e) {
    if (e && e === "area") {
      const t = this.hot.getSelectedRangeLast(), i = this.mergedCellsCollection.getWithinRange(t);
      z(i, (r) => {
        t.getBottomEndCorner().row === r.getLastRow() && t.getBottomEndCorner().col === r.getLastColumn() && (n[2] = r.row, n[3] = r.col);
      });
    }
  }
  function NFe(n, e, t, i) {
    if (t)
      return this.selectionCalculations.getSelectedMergedCellClassName(n, e, t, i);
  }
  function LFe() {
    return this.selectionCalculations.getSelectedMergedCellClassNameToRemove();
  }
  function HFe(n, e, t, i) {
    if (!(i instanceof MouseEvent))
      return;
    const r = this.hot.getSelectedRangeLast(), s = this.mergedCellsCollection.getByRange(r);
    if (!s)
      return;
    const o = this.hot._createCellCoords(s.row, s.col), a = this.hot._createCellCoords(s.row + s.rowspan - 1, s.col + s.colspan - 1);
    return this.hot.selection.getLayerLevel() === 0 && r.isEqual(this.hot._createCellRange(o, o, a));
  }
  function $Fe(n, e, t) {
    if (this.hot.getSettings().rowHeaders || // merged cells do not work with the bottom overlays
    t === "bottom" || t === "bottom_inline_start_corner")
      return n;
    let i, r;
    if (t === "master")
      i = this.hot.view.getFirstRenderedVisibleColumn(), r = this.hot.view.getLastRenderedVisibleColumn();
    else {
      const d = this.hot.view.getOverlayByName(t);
      i = this.hot.columnIndexMapper.getVisualFromRenderableIndex(d.clone.wtTable.getFirstRenderedColumn()), r = this.hot.columnIndexMapper.getVisualFromRenderableIndex(d.clone.wtTable.getLastRenderedColumn());
    }
    if (!this.mergedCellsCollection.get(e, i))
      return n;
    const o = this.hot._createCellCoords(e, i), a = this.hot._createCellCoords(e, r), l = this.hot._createCellRange(o, o, a), c = this.mergedCellsCollection.getWithinRange(l), u = c.reduce((d, f) => {
      let {
        rowspan: g
      } = f;
      return Math.max(d, g);
    }, 1);
    let h = 0;
    return c.length > 1 && c[0].rowspan < u && (h = u - c[0].rowspan), c.forEach((d) => {
      var f;
      let {
        rowspan: g
      } = d, p = 0;
      t === "top" || t === "top_inline_start_corner" ? p = Math.min(u, this.hot.view.countNotHiddenFixedRowsTop() - e) : p = g - h, n = Math.max((f = n) !== null && f !== void 0 ? f : 0, Ut(Xt, this, FFe).call(this, e, p));
    }), n;
  }
  function FFe(n, e) {
    const t = this.hot.view._wt.wtSettings.getSettingPure("defaultRowHeight"), i = this.hot.getPlugin("autoRowSize");
    let r = 0;
    for (let o = n; o < n + e; o++)
      if (!this.hot.rowIndexMapper.isHidden(o)) {
        var s;
        r += (s = i == null ? void 0 : i.getRowHeight(o)) !== null && s !== void 0 ? s : t;
      }
    return r;
  }
  function BFe(n, e) {
    return function(t, i) {
      const [, ...r] = t, [, ...s] = i;
      return function o(a) {
        const l = n[a], c = e[a], u = r[a], h = s[a], d = c.multiColumnSorting, g = (d.compareFunctionFactory ? d.compareFunctionFactory : XG(c.type))(l, c, d)(u, h);
        if (g === Ja) {
          const p = a + 1;
          if (typeof e[p] < "u")
            return o(p);
        }
        return g;
      }(0);
    };
  }
  function LW() {
    Yt(Kt`Plugins \`columnSorting\` and \`multiColumnSorting\` should not be enabled simultaneously. 
    Only \`multiColumnSorting\` will work. The \`columnSorting\` plugin will be disabled.`);
  }
  const yK = "sort";
  function VFe(n, e, t) {
    const i = [];
    return t === !1 || n.isColumnSorted(e) && n.getNumberOfSortedColumns() > 1 && i.push(`${yK}-${n.getIndexOfColumnInSortQueue(e) + 1}`), i;
  }
  function WFe(n) {
    const e = n.className.split(" "), t = new RegExp(`^${yK}-[0-9]{1,2}$`);
    return e.filter((i) => t.test(i));
  }
  function jFe(n, e, t) {
    return (e = zFe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function zFe(n) {
    var e = UFe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function UFe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  const fR = "multiColumnSorting", GFe = 170, kM = "columnSorting", HW = fR;
  qG(fR, BFe);
  class YFe extends sY {
    constructor() {
      super(...arguments), jFe(this, "pluginKey", fR);
    }
    static get PLUGIN_KEY() {
      return fR;
    }
    static get PLUGIN_PRIORITY() {
      return GFe;
    }
    /**
     * Checks if the plugin is enabled in the Handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link MultiColumnSorting#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return super.isEnabled();
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
    enablePlugin() {
      !this.enabled && this.hot.getSettings()[this.pluginKey] && this.hot.getSettings()[kM] && (LW(), this.hot.getPlugin(kM).disablePlugin()), super.enablePlugin();
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
    disablePlugin() {
      super.disablePlugin();
    }
    /**
     * Register shortcuts responsible for toggling column sorting functionality.
     *
     * @private
     */
    registerShortcuts() {
      super.registerShortcuts(), this.hot.getShortcutManager().getContext("grid").addShortcut({
        keys: [["Shift", "Enter"]],
        callback: () => {
          const {
            highlight: e
          } = this.hot.getSelectedRangeLast();
          return e.row === -1 && e.col >= 0 && this.sort(this.getNextSortConfig(e.col, q_)), !1;
        },
        runOnlyIf: () => {
          var e, t;
          const i = (e = this.hot.getSelectedRangeLast()) === null || e === void 0 ? void 0 : e.highlight;
          return i && ((t = this.hot.getSelectedRangeLast()) === null || t === void 0 ? void 0 : t.isSingle()) && this.hot.selection.isCellVisible(i) && i.isHeader();
        },
        relativeToGroup: hh,
        position: "before",
        group: HW
      });
    }
    /**
     * Unregister shortcuts responsible for toggling column sorting functionality.
     *
     * @private
     */
    unregisterShortcuts() {
      super.unregisterShortcuts(), this.hot.getShortcutManager().getContext("grid").removeShortcutsByGroup(HW);
    }
    /**
     * Sorts the table by chosen columns and orders.
     *
     * @param {undefined|object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).
     * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains
     * sort order (`asc` for ascending, `desc` for descending).
     *
     * **Note**: Please keep in mind that every call of `sort` function set an entirely new sort order. Previous sort configs aren't preserved.
     *
     * @example
     * ```js
     * // sort ascending first visual column
     * hot.getPlugin('multiColumnSorting').sort({ column: 0, sortOrder: 'asc' });
     *
     * // sort first two visual column in the defined sequence
     * hot.getPlugin('multiColumnSorting').sort([{
     *   column: 1, sortOrder: 'asc'
     * }, {
     *   column: 0, sortOrder: 'desc'
     * }]);
     * ```
     *
     * @fires Hooks#beforeColumnSort
     * @fires Hooks#afterColumnSort
     */
    sort(e) {
      super.sort(e);
    }
    /**
     * Clear the sort performed on the table.
     */
    clearSort() {
      super.clearSort();
    }
    /**
     * Checks if the table is sorted (any column have to be sorted).
     *
     * @returns {boolean}
     */
    isSorted() {
      return super.isSorted();
    }
    /**
     * Get sort configuration for particular column or for all sorted columns. Objects contain `column` and `sortOrder` properties.
     *
     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key. They are handled by the `sort` function.
     *
     * @param {number} [column] Visual column index.
     * @returns {undefined|object|Array}
     */
    getSortConfig(e) {
      return super.getSortConfig(e);
    }
    /**
     * @description
     * Warn: Useful mainly for providing server side sort implementation (see in the example below). It doesn't sort the data set. It just sets sort configuration for all sorted columns.
     * Note: Please keep in mind that this method doesn't re-render the table.
     *
     * @example
     * ```js
     * beforeColumnSort: function(currentSortConfig, destinationSortConfigs) {
     *   const columnSortPlugin = this.getPlugin('multiColumnSorting');
     *
     *   columnSortPlugin.setSortConfig(destinationSortConfigs);
     *
     *   // const newData = ... // Calculated data set, ie. from an AJAX call.
     *
     *   this.loadData(newData); // Load new data set and re-render the table.
     *
     *   return false; // The blockade for the default sort action.
     * }
     * ```
     *
     * @param {undefined|object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).
     * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains
     * sort order (`asc` for ascending, `desc` for descending).
     */
    setSortConfig(e) {
      super.setSortConfig(e);
    }
    /**
     * Get normalized sort configs.
     *
     * @private
     * @param {object|Array} [sortConfig=[]] Single column sort configuration or full sort configuration (for all sorted columns).
     * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains
     * sort order (`asc` for ascending, `desc` for descending).
     * @returns {Array}
     */
    getNormalizedSortConfigs() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      return Array.isArray(e) ? e : [e];
    }
    /**
     * Update header classes.
     *
     * @private
     * @param {HTMLElement} headerSpanElement Header span element.
     * @param {...*} args Extra arguments for helpers.
     */
    updateHeaderClasses(e) {
      for (var t = arguments.length, i = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++)
        i[r - 1] = arguments[r];
      super.updateHeaderClasses(e, ...i), Ze(e, WFe(e)), this.enabled !== !1 && ue(e, VFe(...i));
    }
    /**
     * Overwriting base plugin's `onUpdateSettings` method. Please keep in mind that `onAfterUpdateSettings` isn't called
     * for `updateSettings` in specific situations.
     *
     * @private
     * @param {object} newSettings New settings object.
     */
    onUpdateSettings(e) {
      this.hot.getSettings()[this.pluginKey] && this.hot.getSettings()[kM] && LW(), super.onUpdateSettings(e);
    }
    /**
     * Callback for the `onAfterOnCellMouseDown` hook.
     *
     * @private
     * @param {Event} event Event which are provided by hook.
     * @param {CellCoords} coords Visual coords of the selected cell.
     */
    onAfterOnCellMouseDown(e, t) {
      jL(t.row, t.col, e) !== !1 && this.wasClickableHeaderClicked(e, t.col) && (this.hot.getShortcutManager().isCtrlPressed() ? (this.hot.deselectCell(), this.hot.selectColumns(t.col), this.sort(this.getNextSortConfig(t.col, q_))) : this.sort(this.getColumnNextConfig(t.col)));
    }
  }
  function $W(n, e, t) {
    return (e = KFe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function KFe(n) {
    var e = qFe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function qFe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  const XFe = "multipleSelectionHandles", ZFe = 160;
  class QFe extends Lt {
    constructor() {
      super(...arguments), $W(this, "dragged", []), $W(this, "lastSetCell", null);
    }
    static get PLUGIN_KEY() {
      return XFe;
    }
    static get PLUGIN_PRIORITY() {
      return ZFe;
    }
    /**
     * Check if the plugin is enabled in the handsontable settings.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return fc();
    }
    /**
     * Enable plugin for this Handsontable instance.
     */
    enablePlugin() {
      this.enabled || (this.registerListeners(), super.enablePlugin());
    }
    /**
     * Bind the touch events.
     *
     * @private
     */
    registerListeners() {
      const e = this, {
        rootElement: t
      } = this.hot;
      function i(r) {
        if (e.dragged.length === 1)
          return e.dragged.splice(0, e.dragged.length), !0;
        const s = e.dragged.indexOf(r);
        if (s === -1)
          return !1;
        s === 0 ? e.dragged = e.dragged.slice(0, 1) : s === 1 && (e.dragged = e.dragged.slice(-1));
      }
      this.eventManager.addEventListener(t, "touchstart", (r) => {
        let s;
        if (Ue(r.target, "topSelectionHandle-HitArea"))
          return s = e.hot.getSelectedRangeLast(), e.dragged.push("top"), e.touchStartRange = {
            width: s.getWidth(),
            height: s.getHeight(),
            direction: s.getDirection()
          }, r.preventDefault(), !1;
        if (Ue(r.target, "bottomSelectionHandle-HitArea"))
          return s = e.hot.getSelectedRangeLast(), e.dragged.push("bottom"), e.touchStartRange = {
            width: s.getWidth(),
            height: s.getHeight(),
            direction: s.getDirection()
          }, r.preventDefault(), !1;
      }), this.eventManager.addEventListener(t, "touchend", (r) => {
        if (Ue(r.target, "topSelectionHandle-HitArea"))
          return i.call(e, "top"), e.touchStartRange = void 0, r.preventDefault(), !1;
        if (Ue(r.target, "bottomSelectionHandle-HitArea"))
          return i.call(e, "bottom"), e.touchStartRange = void 0, r.preventDefault(), !1;
      }), this.eventManager.addEventListener(t, "touchmove", (r) => {
        const {
          rootDocument: s
        } = this.hot;
        let o, a, l, c, u, h;
        if (e.dragged.length === 0)
          return;
        const d = s.elementFromPoint(r.touches[0].clientX, r.touches[0].clientY);
        !d || d === e.lastSetCell || ((d.nodeName === "TD" || d.nodeName === "TH") && (o = e.hot.getCoords(d), o.col === -1 && (o.col = 0), a = e.hot.getSelectedRangeLast(), l = a.getWidth(), c = a.getHeight(), u = a.getDirection(), l === 1 && c === 1 && e.hot.selection.setRangeEnd(o), h = e.getCurrentRangeCoords(a, o, e.touchStartRange.direction, u, e.dragged[0]), h.start !== null && e.hot.selection.setRangeStart(h.start), e.hot.selection.setRangeEnd(h.end), e.lastSetCell = d), r.preventDefault());
      });
    }
    getCurrentRangeCoords(e, t, i, r, s) {
      const o = e.getTopStartCorner(), a = e.getBottomEndCorner(), l = e.getBottomStartCorner(), c = e.getTopEndCorner();
      let u = {
        start: null,
        end: null
      };
      switch (i) {
        case "NE-SW":
          switch (r) {
            case "NE-SW":
            case "NW-SE":
              s === "top" ? u = {
                start: this.hot._createCellCoords(t.row, e.highlight.col),
                end: this.hot._createCellCoords(l.row, t.col)
              } : u = {
                start: this.hot._createCellCoords(e.highlight.row, t.col),
                end: this.hot._createCellCoords(t.row, o.col)
              };
              break;
            case "SE-NW":
              s === "bottom" && (u = {
                start: this.hot._createCellCoords(a.row, t.col),
                end: this.hot._createCellCoords(t.row, o.col)
              });
              break;
          }
          break;
        case "NW-SE":
          switch (r) {
            case "NE-SW":
              s === "top" ? u = {
                start: t,
                end: l
              } : u.end = t;
              break;
            case "NW-SE":
              s === "top" ? u = {
                start: t,
                end: a
              } : u.end = t;
              break;
            case "SE-NW":
              s === "top" ? u = {
                start: t,
                end: o
              } : u.end = t;
              break;
            case "SW-NE":
              s === "top" ? u = {
                start: t,
                end: c
              } : u.end = t;
              break;
          }
          break;
        case "SW-NE":
          switch (r) {
            case "NW-SE":
              s === "bottom" ? u = {
                start: this.hot._createCellCoords(t.row, o.col),
                end: this.hot._createCellCoords(l.row, t.col)
              } : u = {
                start: this.hot._createCellCoords(o.row, t.col),
                end: this.hot._createCellCoords(t.row, a.col)
              };
              break;
            case "SW-NE":
              s === "top" ? u = {
                start: this.hot._createCellCoords(e.highlight.row, t.col),
                end: this.hot._createCellCoords(t.row, a.col)
              } : u = {
                start: this.hot._createCellCoords(t.row, o.col),
                end: this.hot._createCellCoords(o.row, t.col)
              };
              break;
            case "SE-NW":
              s === "bottom" ? u = {
                start: this.hot._createCellCoords(t.row, c.col),
                end: this.hot._createCellCoords(o.row, t.col)
              } : s === "top" && (u = {
                start: l,
                end: t
              });
              break;
          }
          break;
        case "SE-NW":
          switch (r) {
            case "NW-SE":
            case "NE-SW":
            case "SW-NE":
              s === "top" && (u.end = t);
              break;
            case "SE-NW":
              s === "top" ? u.end = t : u = {
                start: t,
                end: o
              };
              break;
          }
          break;
      }
      return u;
    }
    /**
     * Check if user is currently dragging the handle.
     *
     * @returns {boolean} Dragging state.
     */
    isDragged() {
      return this.dragged.length > 0;
    }
  }
  function xI() {
    let {
      label: n = "",
      colspan: e = 1,
      origColspan: t = 1,
      collapsible: i = !1,
      crossHiddenColumns: r = [],
      isCollapsed: s = !1,
      isHidden: o = !1,
      isRoot: a = !1,
      isPlaceholder: l = !1,
      headerClassNames: c = []
    } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return {
      label: n,
      colspan: e,
      origColspan: t,
      collapsible: i,
      isCollapsed: s,
      crossHiddenColumns: r,
      isHidden: o,
      isRoot: a,
      isPlaceholder: l,
      headerClassNames: c
    };
  }
  function CK() {
    return {
      label: "",
      isPlaceholder: !0
    };
  }
  function JFe(n) {
    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1 / 0;
    const t = [];
    if (e === 0)
      return t;
    z(n, (r) => {
      const s = [];
      let o = 0;
      t.push(s), z(r, (a) => {
        const l = xI();
        if (at(a)) {
          const {
            label: u,
            colspan: h,
            headerClassName: d
          } = a;
          l.label = Vn(u), typeof h == "number" && h > 1 && (l.colspan = h, l.origColspan = h), typeof d == "string" && (l.headerClassNames = [...d.split(" ")]);
        } else
          l.label = Vn(a);
        o += l.origColspan;
        let c = !1;
        if (o >= e && (l.colspan = l.origColspan - (o - e), l.origColspan = l.colspan, c = !0), s.push(l), l.colspan > 1)
          for (let u = 0; u < l.colspan - 1; u++)
            s.push(CK());
        return !c;
      });
    });
    const i = Math.max(...mt(t, (r) => r.length));
    return z(t, (r) => {
      if (r.length < i) {
        const s = mt(new Array(i - r.length), () => xI());
        r.splice(r.length, 0, ...s);
      }
    }), t;
  }
  function DM(n, e, t) {
    eBe(n, e), e.set(n, t);
  }
  function eBe(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function ko(n, e) {
    return n.get(SK(n, e));
  }
  function Sb(n, e, t) {
    return n.set(SK(n, e), t), t;
  }
  function SK(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  const FW = ["label", "collapsible"];
  var Fl = /* @__PURE__ */ new WeakMap(), td = /* @__PURE__ */ new WeakMap(), NM = /* @__PURE__ */ new WeakMap();
  class tBe {
    constructor() {
      DM(this, Fl, []), DM(this, td, 0), DM(this, NM, 1 / 0);
    }
    /**
     * Sets columns limit to the source settings will be trimmed. All headers which
     * overlap the column limit will be reduced to keep the structure solid.
     *
     * @param {number} columnsCount The number of columns to limit to.
     */
    setColumnsLimit(e) {
      Sb(NM, this, e);
    }
    /**
     * Sets a new nested header configuration.
     *
     * @param {Array[]} [nestedHeadersSettings=[]] The user-defined nested headers settings.
     */
    setData() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      Sb(Fl, this, JFe(e, ko(NM, this))), Sb(td, this, ko(Fl, this).length);
    }
    /**
     * Gets normalized source settings.
     *
     * @returns {Array[]}
     */
    getData() {
      return ko(Fl, this);
    }
    /**
     * Merges settings with current source settings.
     *
     * @param {object[]} additionalSettings An array of objects with `row`, `col` and additional
     *                                      properties to merge with current source settings.
     */
    mergeWith(e) {
      z(e, (t) => {
        let {
          row: i,
          col: r,
          ...s
        } = t;
        const o = this.getHeaderSettings(i, r);
        o !== null && ai(o, s, FW);
      });
    }
    /**
     * Maps the current state with a callback. For each source settings the callback function
     * is called. If the function returns value that value is merged with the source settings.
     *
     * @param {Function} callback A function that is called for every header settings.
     *                            Each time the callback is called, the returned value extends
     *                            header settings.
     */
    map(e) {
      z(ko(Fl, this), (t) => {
        z(t, (i) => {
          const r = e({
            ...i
          });
          at(r) && ai(i, r, FW);
        });
      });
    }
    /**
     * Gets source column header settings for a specified header. The returned
     * object contains information about the header label, its colspan length,
     * or if it is hidden in the header renderers.
     *
     * @param {number} headerLevel Header level (0 = most distant to the table).
     * @param {number} columnIndex A visual column index.
     * @returns {object|null}
     */
    getHeaderSettings(e, t) {
      var i;
      if (e >= ko(td, this) || e < 0)
        return null;
      const r = ko(Fl, this)[e];
      return Array.isArray(r) === !1 || t >= r.length ? null : (i = r[t]) !== null && i !== void 0 ? i : null;
    }
    /**
     * Gets source of column headers settings for specified headers. If the retrieved column
     * settings overlap the range "box" determined by "columnIndex" and "columnsLength"
     * the exception will be thrown.
     *
     * @param {number} headerLevel Header level (0 = most distant to the table).
     * @param {number} columnIndex A visual column index from which the settings will be extracted.
     * @param {number} [columnsLength=1] The number of columns involved in the extraction of settings.
     * @returns {object}
     */
    getHeadersSettings(e, t) {
      let i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
      const r = [];
      if (e >= ko(td, this) || e < 0)
        return r;
      const s = ko(Fl, this)[e];
      let o = 0;
      for (let a = t; a < s.length; a++) {
        const l = s[a];
        if (l.isPlaceholder)
          throw new Error("The first column settings cannot overlap the other header layers");
        if (o += l.colspan, r.push(l), l.colspan > 1 && (a += l.colspan - 1), o === i)
          break;
        if (o > i)
          throw new Error("The last column settings cannot overlap the other header layers");
      }
      return r;
    }
    /**
     * Gets a total number of headers levels.
     *
     * @returns {number}
     */
    getLayersCount() {
      return ko(td, this);
    }
    /**
     * Gets a total number of columns count.
     *
     * @returns {number}
     */
    getColumnsCount() {
      return ko(td, this) > 0 ? ko(Fl, this)[0].length : 0;
    }
    /**
     * Clears the data.
     */
    clear() {
      Sb(Fl, this, []), Sb(td, this, 0);
    }
  }
  function LM(n, e, t) {
    return (e = nBe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function nBe(n) {
    var e = iBe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function iBe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  const _K = "DF-pre-order";
  function RK(n, e) {
    let t = n.call(e, this);
    for (let i = 0; i < this.childs.length; i++) {
      if (t === !1)
        return !1;
      t = RK.call(this.childs[i], n, e);
    }
    return t;
  }
  const rBe = "DF-post-order";
  function EK(n, e) {
    for (let t = 0; t < this.childs.length; t++)
      if (EK.call(this.childs[t], n, e) === !1)
        return !1;
    return n.call(e, this);
  }
  const xK = "BF";
  function sBe(n, e) {
    const t = [this];
    function i() {
      if (t.length === 0)
        return;
      const r = t.shift();
      t.push(...r.childs), n.call(e, r) !== !1 && i();
    }
    i();
  }
  const oBe = xK, BW = /* @__PURE__ */ new Map([[_K, RK], [rBe, EK], [xK, sBe]]);
  class gR {
    constructor(e) {
      LM(this, "data", {}), LM(this, "parent", null), LM(this, "childs", []), this.data = e;
    }
    /**
     * Adds a node to tree leaves. Added node is linked with the parent node through "parent" property.
     *
     * @param {TreeNode} node A TreeNode to add.
     */
    addChild(e) {
      e.parent = this, this.childs.push(e);
    }
    /* eslint-disable jsdoc/require-description-complete-sentence */
    /**
     * @memberof TreeNode#
     * @function cloneTree
     *
     * Clones a tree structure deeply.
     *
     * For example, for giving a tree structure:
     *      .--(B1)--.
     *   .-(C1)   .-(C2)-.----.
     *  (D1)     (D2)   (D3) (D4)
     *
     * Cloning a tree starting from C2 node creates a mirrored tree structure.
     *     .-(C2')-.-----.
     *    (D2')   (D3') (D4')
     *
     * The cloned tree can be safely modified without affecting the original structure.
     * After modification, the clone can be merged with a tree using the "replaceTreeWith" method.
     *
     * @param {TreeNode} [nodeTree=this] A TreeNode to clone.
     * @returns {TreeNode}
     */
    /* eslint-enable jsdoc/require-description-complete-sentence */
    cloneTree() {
      let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this;
      const t = new gR({
        ...e.data
      });
      for (let i = 0; i < e.childs.length; i++)
        t.addChild(this.cloneTree(e.childs[i]));
      return t;
    }
    /**
     * Replaces the current node with a passed tree structure.
     *
     * @param {TreeNode} nodeTree A TreeNode to replace with.
     */
    replaceTreeWith(e) {
      this.data = {
        ...e.data
      }, this.childs = [];
      for (let t = 0; t < e.childs.length; t++)
        this.addChild(e.childs[t]);
    }
    /**
     * Traverses the tree structure through node childs. The walk down traversing supports
     * a three different strategies.
     *  - Depth-first pre-order strategy (https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR));
     *  - Depth-first post-order strategy (https://en.wikipedia.org/wiki/Tree_traversal#Post-order_(NLR));
     *  - Breadth-first traversal strategy (https://en.wikipedia.org/wiki/Tree_traversal#Breadth-first_search_/_level_order).
     *
     * @param {Function} callback The callback function which will be called for each node.
     * @param {string} [traversalStrategy=DEFAULT_TRAVERSAL_STRATEGY] Traversing strategy.
     */
    walkDown(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : oBe;
      if (!BW.has(t))
        throw new Error(`Traversal strategy "${t}" does not exist`);
      BW.get(t).call(this, e, this);
    }
    /**
     * Traverses the tree structure through node parents.
     *
     * @param {Function} callback The callback function which will be called for each node.
     */
    walkUp(e) {
      const t = this, i = (r) => {
        e.call(t, r) !== !1 && r.parent !== null && i(r.parent);
      };
      i(this);
    }
  }
  function HM(n, e, t) {
    aBe(n, e), e.set(n, t);
  }
  function aBe(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function Cr(n, e) {
    return n.get(TK(n, e));
  }
  function lBe(n, e, t) {
    return n.set(TK(n, e), t), t;
  }
  function TK(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var yg = /* @__PURE__ */ new WeakMap(), nd = /* @__PURE__ */ new WeakMap(), Cg = /* @__PURE__ */ new WeakMap();
  class cBe {
    constructor(e) {
      HM(this, yg, /* @__PURE__ */ new Map()), HM(this, nd, /* @__PURE__ */ new Map()), HM(this, Cg, null), lBe(Cg, this, e);
    }
    /**
     * Gets an array of the all root nodes.
     *
     * @returns {TreeNode[]}
     */
    getRoots() {
      return Array.from(Cr(yg, this).values());
    }
    /**
     * Gets a root node by specified visual column index.
     *
     * @param {number} columnIndex A visual column index.
     * @returns {TreeNode|undefined}
     */
    getRootByColumn(e) {
      let t;
      return Cr(nd, this).has(e) && (t = Cr(yg, this).get(Cr(nd, this).get(e))), t;
    }
    /**
     * Gets a tree node by its position in the grid settings.
     *
     * @param {number} headerLevel Header level index (there is support only for positive values).
     * @param {number} columnIndex A visual column index.
     * @returns {TreeNode|undefined}
     */
    getNode(e, t) {
      const i = this.getRootByColumn(t);
      if (!i)
        return;
      const r = t - Cr(nd, this).get(t);
      let s = 0, o;
      return i.walkDown((a) => {
        const {
          data: {
            origColspan: l,
            headerLevel: c
          }
        } = a;
        if (e === c) {
          if (r >= s && r <= s + l - 1)
            return o = a, o.data.isRoot = t === o.data.columnIndex, !1;
          s += l;
        }
      }), o;
    }
    /**
     * Builds (or rebuilds if called again) root nodes indexes.
     */
    rebuildTreeIndex() {
      let e = 0;
      Cr(nd, this).clear(), z(Cr(yg, this), (t) => {
        let [, {
          data: {
            colspan: i
          }
        }] = t;
        for (let r = e; r < e + i; r++)
          Cr(nd, this).set(r, e);
        e += i;
      });
    }
    /**
     * Builds trees based on SourceSettings class. Calling a method causes clearing the tree state built
     * from the previous call.
     */
    buildTree() {
      this.clear();
      const e = Cr(Cg, this).getColumnsCount();
      let t = 0;
      for (; t < e; ) {
        const i = Cr(Cg, this).getHeaderSettings(0, t), r = new gR();
        Cr(yg, this).set(t, r), this.buildLeaves(r, t, 0, i.origColspan), t += i.origColspan;
      }
      this.rebuildTreeIndex();
    }
    /**
     * Builds leaves for specified tree node.
     *
     * @param {TreeNode} parentNode A node to which the leaves applies.
     * @param {number} columnIndex A visual column index.
     * @param {number} headerLevel Currently processed header level.
     * @param {number} [extractionLength=1] Determines column extraction length for node children.
     */
    buildLeaves(e, t, i) {
      let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
      const s = Cr(Cg, this).getHeadersSettings(i, t, r);
      i += 1, z(s, (o) => {
        const a = {
          ...o,
          /**
           * The header level (tree node depth level).
           *
           * @type {number}
           */
          headerLevel: i - 1,
          /**
           * A visual column index.
           *
           * @type {number}
           */
          columnIndex: t
        };
        let l;
        i === 1 ? (e.data = a, l = e) : (l = new gR(a), e.addChild(l)), i < Cr(Cg, this).getLayersCount() && this.buildLeaves(l, t, i, o.origColspan), t += o.origColspan;
      });
    }
    /**
     * Clears the tree to the initial state.
     */
    clear() {
      Cr(yg, this).clear(), Cr(nd, this).clear();
    }
  }
  function MK(n, e) {
    n.walkDown((t) => {
      let {
        data: i,
        childs: r
      } = t;
      if (!i.isHidden && (e(i.columnIndex), r.length === 0))
        for (let s = 1; s < i.colspan; s++)
          e(i.columnIndex + s);
    });
  }
  function pR(n, e) {
    let {
      childs: t
    } = n;
    if (t.length !== 0)
      return t[0].data[e];
  }
  function mR(n) {
    return pR(n, "origColspan") === n.data.origColspan;
  }
  function rH(n) {
    const {
      data: e,
      childs: t
    } = n;
    if (!e.isCollapsed || e.isHidden || e.origColspan <= 1)
      return {
        rollbackModification: () => {
        },
        affectedColumns: [],
        colspanCompensation: 0
      };
    if (mR(n))
      return rH(t[0]);
    e.isCollapsed = !1;
    const r = t.slice(1), s = /* @__PURE__ */ new Set();
    let o = 0;
    if (r.length > 0)
      z(r, (a) => {
        a.replaceTreeWith(a.data.clonedTree), a.data.clonedTree = null;
        const l = a.data;
        o += l.colspan, MK(a, (c) => {
          s.add(c);
        });
      });
    else {
      const {
        colspan: a,
        origColspan: l,
        columnIndex: c
      } = e;
      o = l - a;
      for (let u = 1; u < l; u++)
        s.add(c + u);
    }
    return n.walkUp((a) => {
      const {
        data: l
      } = a;
      l.colspan += o, l.colspan >= l.origColspan ? (l.colspan = l.origColspan, l.isCollapsed = !1) : mR(a) && (l.isCollapsed = pR(a, "isCollapsed"));
    }), {
      rollbackModification: () => sH(n),
      affectedColumns: Array.from(s),
      colspanCompensation: o
    };
  }
  function sH(n) {
    var e;
    const {
      data: t,
      childs: i
    } = n;
    if (t.isCollapsed || t.isHidden || t.origColspan <= 1)
      return {
        rollbackModification: () => {
        },
        affectedColumns: [],
        colspanCompensation: 0
      };
    if (mR(n))
      return sH(i[0]);
    t.isCollapsed = !0;
    const s = i.slice(1), o = /* @__PURE__ */ new Set();
    if (s.length > 0)
      z(s, (l) => {
        MK(l, (c) => {
          o.add(c);
        }), l.data.clonedTree = l.cloneTree(), l.walkDown((c) => {
          let {
            data: u
          } = c;
          u.isHidden = !0;
        });
      });
    else {
      const {
        origColspan: l,
        columnIndex: c
      } = t;
      for (let u = 1; u < l; u++) {
        const h = c + u;
        o.add(h);
      }
    }
    const a = t.colspan - ((e = pR(n, "colspan")) !== null && e !== void 0 ? e : 1);
    return n.walkUp((l) => {
      const {
        data: c
      } = l;
      c.colspan -= a, c.colspan <= 1 ? (c.colspan = 1, c.isCollapsed = !0) : mR(l) && (c.isCollapsed = pR(l, "isCollapsed"));
    }), {
      rollbackModification: () => rH(n),
      affectedColumns: Array.from(o),
      colspanCompensation: a
    };
  }
  function uBe(n, e) {
    if (!Number.isInteger(e))
      throw new Error("The passed gridColumnIndex argument has invalid type.");
    if (n.childs.length > 0)
      throw new Error(Kt`The passed node is not the last node on the tree. Only for\x20
the last node, the hide column modification can be applied.`);
    const {
      crossHiddenColumns: t
    } = n.data;
    if (t.includes(e))
      return;
    let i = !1;
    n.walkUp((r) => {
      const {
        data: {
          collapsible: s
        }
      } = r;
      if (s)
        return i = !0, !1;
    }), !i && n.walkUp((r) => {
      const {
        data: s
      } = r;
      s.crossHiddenColumns.push(e), s.colspan > 1 ? s.colspan -= 1 : s.isHidden = !0;
    });
  }
  function hBe(n, e) {
    if (!Number.isInteger(e))
      throw new Error("The passed gridColumnIndex argument has invalid type.");
    if (n.childs.length > 0)
      throw new Error(Kt`The passed node is not the last node on the tree. Only for\x20
the last node, the show column modification can be applied.`);
    const {
      crossHiddenColumns: t
    } = n.data;
    if (!t.includes(e))
      return;
    let i = !1;
    n.walkUp((r) => {
      const {
        data: {
          collapsible: s
        }
      } = r;
      if (s)
        return i = !0, !1;
    }), !i && n.walkUp((r) => {
      const {
        data: s
      } = r;
      s.crossHiddenColumns.splice(s.crossHiddenColumns.indexOf(e), 1), !s.isHidden && s.colspan < s.origColspan && (s.colspan += 1), s.isHidden = !1;
    });
  }
  const VW = /* @__PURE__ */ new Map([["collapse", sH], ["expand", rH], ["hide-column", uBe], ["show-column", hBe]]);
  function dBe(n, e, t) {
    if (!VW.has(n))
      throw new Error(`The node modifier action ("${n}") does not exist.`);
    return VW.get(n)(e, t);
  }
  function DC(n) {
    const e = [];
    return z(n, (t) => {
      t.walkDown((i) => {
        const r = i.data, {
          origColspan: s,
          columnIndex: o,
          headerLevel: a,
          crossHiddenColumns: l
        } = r, c = gBe(e, a);
        let u = !1;
        for (let h = o; h < o + s; h++)
          if (l.includes(h) || u)
            c.push(CK());
          else {
            const f = fBe(r);
            f.isRoot = !0, c.push(f), u = !0;
          }
      });
    }), e;
  }
  function fBe(n) {
    const {
      crossHiddenColumns: e,
      ...t
    } = xI(n);
    return t;
  }
  function gBe(n, e) {
    let t;
    return Array.isArray(n[e]) ? t = n[e] : (t = [], n[e] = t), t;
  }
  function $M(n, e, t) {
    pBe(n, e), e.set(n, t);
  }
  function pBe(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function _b(n, e, t) {
    return n.set(AK(n, e), t), t;
  }
  function Ln(n, e) {
    return n.get(AK(n, e));
  }
  function AK(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var Aa = /* @__PURE__ */ new WeakMap(), Wr = /* @__PURE__ */ new WeakMap(), id = /* @__PURE__ */ new WeakMap();
  class mBe {
    constructor() {
      $M(this, Aa, new tBe()), $M(this, Wr, new cBe(Ln(Aa, this))), $M(this, id, [[]]);
    }
    /**
     * Sets a new state for the nested headers plugin based on settings passed
     * directly to the plugin.
     *
     * @param {Array[]} nestedHeadersSettings The user-defined settings.
     * @returns {boolean} Returns `true` if the settings are processed correctly, `false` otherwise.
     */
    setState(e) {
      Ln(Aa, this).setData(e);
      let t = !1;
      try {
        Ln(Wr, this).buildTree();
      } catch {
        Ln(Wr, this).clear(), Ln(Aa, this).clear(), t = !0;
      }
      return _b(id, this, DC(Ln(Wr, this).getRoots())), t;
    }
    /**
     * Sets columns limit to the state will be trimmed. All headers (colspans) which
     * overlap the column limit will be reduced to keep the structure solid.
     *
     * @param {number} columnsCount The number of columns to limit to.
     */
    setColumnsLimit(e) {
      Ln(Aa, this).setColumnsLimit(e);
    }
    /**
     * Merges settings with current plugin state.
     *
     * By default only foreign keys are merged with source state and passed to the tree. But only
     * known keys are exported to matrix.
     *
     * @param {object[]} settings An array of objects to merge with the current source settings.
     *                            It is a requirement that every object has `row` and `col` properties
     *                            which points to the specific header settings object.
     */
    mergeStateWith(e) {
      const t = mt(e, (i) => {
        let {
          row: r,
          ...s
        } = i;
        return {
          row: r < 0 ? this.rowCoordsToLevel(r) : r,
          ...s
        };
      });
      Ln(Aa, this).mergeWith(t), Ln(Wr, this).buildTree(), _b(id, this, DC(Ln(Wr, this).getRoots()));
    }
    /**
     * Maps the current state with a callback. For each header settings the callback function
     * is called. If the function returns value that value is merged with the state.
     *
     * By default only foreign keys are merged with source state and passed to the tree. But only
     * known keys are exported to matrix.
     *
     * @param {Function} callback A function that is called for every header source settings.
     *                            Each time the callback is called, the returned value extends
     *                            header settings.
     */
    mapState(e) {
      Ln(Aa, this).map(e), Ln(Wr, this).buildTree(), _b(id, this, DC(Ln(Wr, this).getRoots()));
    }
    /**
     * Maps the current tree nodes with a callback. For each node the callback function
     * is called. If the function returns value that value is added to returned array.
     *
     * @param {Function} callback A function that is called for every tree node.
     *                            Each time the callback is called, the returned value is
     *                            added to returned array.
     * @returns {Array}
     */
    mapNodes(e) {
      return li(Ln(Wr, this).getRoots(), (t, i) => (i.walkDown((r) => {
        const s = e(r.data);
        s !== void 0 && t.push(s);
      }), t), []);
    }
    /**
     * Triggers an action (e.g. "collapse") from the NodeModifiers module. The module
     * modifies a tree structure in such a way as to obtain the correct structure consistent with the
     * called action.
     *
     * @param {string} action An action name to trigger.
     * @param {number} headerLevel Header level index (there is support for negative and positive values).
     * @param {number} columnIndex A visual column index.
     * @returns {object|undefined}
     */
    triggerNodeModification(e, t, i) {
      t < 0 && (t = this.rowCoordsToLevel(t));
      const r = Ln(Wr, this).getNode(t, i);
      let s;
      return r && (s = dBe(e, r, i), _b(id, this, DC(Ln(Wr, this).getRoots()))), s;
    }
    /**
     * Triggers an action (e.g. "hide-column") from the NodeModifiers module. The action is
     * triggered starting from the lowest header. The module modifies a tree structure in
     * such a way as to obtain the correct structure consistent with the called action.
     *
     * @param {string} action An action name to trigger.
     * @param {number} columnIndex A visual column index.
     * @returns {object|undefined}
     */
    triggerColumnModification(e, t) {
      return this.triggerNodeModification(e, -1, t);
    }
    /* eslint-disable jsdoc/require-description-complete-sentence */
    /**
     * @memberof StateManager#
     * @function rowCoordsToLevel
     *
     * Translates row coordinates into header level. The row coordinates counts from -1 to -N
     * and describes headers counting from most closest to most distant from the table.
     * The header levels are counted from 0 to N where 0 describes most distant header
     * from the table.
     *
     *  Row coords             Header level
     *           +--------------+
     *       -3  │ A1 │ A1      │  0
     *           +--------------+
     *       -2  │ B1 │ B2 │ B3 │  1
     *           +--------------+
     *       -1  │ C1 │ C2 │ C3 │  2
     *           +==============+
     *           │    │    │    │
     *           +--------------+
     *           │    │    │    │
     *
     * @param {number} rowIndex A visual row index.
     * @returns {number|null} Returns unsigned number.
     */
    /* eslint-enable jsdoc/require-description-complete-sentence */
    rowCoordsToLevel(e) {
      if (e >= 0)
        return null;
      const t = e + Math.max(this.getLayersCount(), 1);
      return t < 0 ? null : t;
    }
    /* eslint-disable jsdoc/require-description-complete-sentence */
    /**
     * @memberof StateManager#
     * @function levelToRowCoords
     *
     * Translates header level into row coordinates. The row coordinates counts from -1 to -N
     * and describes headers counting from most closest to most distant from the table.
     * The header levels are counted from 0 to N where 0 describes most distant header
     * from the table.
     *
     *  Header level            Row coords
     *           +--------------+
     *        0  │ A1 │ A1      │  -3
     *           +--------------+
     *        1  │ B1 │ B2 │ B3 │  -2
     *           +--------------+
     *        2  │ C1 │ C2 │ C3 │  -1
     *           +==============+
     *           │    │    │    │
     *           +--------------+
     *           │    │    │    │
     *
     * @param {number} headerLevel Header level index.
     * @returns {number} Returns negative number.
     */
    /* eslint-enable jsdoc/require-description-complete-sentence */
    levelToRowCoords(e) {
      if (e < 0)
        return null;
      const t = e - Math.max(this.getLayersCount(), 1);
      return t >= 0 ? null : t;
    }
    /**
     * Gets column header settings for a specified column and header index. The returned object contains
     * all information necessary for header renderers. It contains header label, colspan length, or hidden
     * flag.
     *
     * @param {number} headerLevel Header level (there is support for negative and positive values).
     * @param {number} columnIndex A visual column index.
     * @returns {object|null}
     */
    getHeaderSettings(e, t) {
      var i, r;
      return e < 0 && (e = this.rowCoordsToLevel(e)), e === null || e >= this.getLayersCount() ? null : (i = (r = Ln(id, this)[e]) === null || r === void 0 ? void 0 : r[t]) !== null && i !== void 0 ? i : null;
    }
    /**
     * Gets tree data that is connected to the column header. The returned object contains all information
     * necessary for modifying tree structure (column collapsing, hiding, etc.). It contains a header
     * label, colspan length, or visual column index that indicates which column index the node is rendered from.
     *
     * @param {number} headerLevel Header level (there is support for negative and positive values).
     * @param {number} columnIndex A visual column index.
     * @returns {object|null}
     */
    getHeaderTreeNodeData(e, t) {
      const i = this.getHeaderTreeNode(e, t);
      return i ? {
        ...i.data
      } : null;
    }
    /**
     * Gets tree node that is connected to the column header.
     *
     * @param {number} headerLevel Header level (there is support for negative and positive values).
     * @param {number} columnIndex A visual column index.
     * @returns {TreeNode|null}
     */
    getHeaderTreeNode(e, t) {
      if (e < 0 && (e = this.rowCoordsToLevel(e)), e === null || e >= this.getLayersCount())
        return null;
      const i = Ln(Wr, this).getNode(e, t);
      return i || null;
    }
    /**
     * Finds the most top header level of the column header that is rendered entirely within
     * the passed visual columns range. If multiple columns headers are found within the range the
     * most top header level value will be returned.
     *
     * @param {number} columnIndexFrom A visual column index.
     * @param {number} [columnIndexTo] A visual column index.
     * @returns {number} Returns a header level in format -1 to -N.
     */
    findTopMostEntireHeaderLevel(e) {
      var t;
      let i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : e;
      const r = i - e + 1;
      let s = !1, o = null;
      for (let a = e; a <= i; a++) {
        const l = Ln(Wr, this).getRootByColumn(a);
        if (!l)
          break;
        s = !0, l.walkDown((c) => {
          const {
            columnIndex: u,
            headerLevel: h,
            origColspan: d,
            isHidden: f
          } = c.data;
          f || d <= r && u >= e && u + d - 1 <= i && (o === null || h < o) && (o = h);
        }, _K);
      }
      return s && o === null ? -1 : this.levelToRowCoords((t = o) !== null && t !== void 0 ? t : 0);
    }
    /**
     * The method is helpful in cases where the column index targets in-between currently
     * collapsed column. In that case, the method returns the left-most column index
     * where the nested header begins.
     *
     * @param {number} headerLevel Header level (there is support for negative and positive values).
     * @param {number} columnIndex A visual column index.
     * @returns {number}
     */
    findLeftMostColumnIndex(e, t) {
      var i;
      const {
        isRoot: r
      } = (i = this.getHeaderSettings(e, t)) !== null && i !== void 0 ? i : {
        isRoot: !0
      };
      if (r)
        return t;
      let s = t - 1;
      for (; s >= 0; ) {
        var o;
        const {
          isRoot: a
        } = (o = this.getHeaderSettings(e, s)) !== null && o !== void 0 ? o : {
          isRoot: !0
        };
        if (a)
          break;
        s -= 1;
      }
      return s;
    }
    /**
     * The method is helpful in cases where the column index targets in-between currently
     * collapsed column. In that case, the method returns the right-most column index
     * where the nested header ends.
     *
     * @param {number} headerLevel Header level (there is support for negative and positive values).
     * @param {number} columnIndex A visual column index.
     * @returns {number}
     */
    findRightMostColumnIndex(e, t) {
      var i;
      const {
        isRoot: r,
        origColspan: s
      } = (i = this.getHeaderSettings(e, t)) !== null && i !== void 0 ? i : {
        isRoot: !0,
        origColspan: 1
      };
      if (r)
        return t + s - 1;
      let o = t + 1;
      for (; o < this.getColumnsCount(); ) {
        var a;
        const {
          isRoot: l
        } = (a = this.getHeaderSettings(e, o)) !== null && a !== void 0 ? a : {
          isRoot: !0
        };
        if (l)
          break;
        o += 1;
      }
      return o - 1;
    }
    /**
     * Gets a total number of headers levels.
     *
     * @returns {number}
     */
    getLayersCount() {
      return Ln(Aa, this).getLayersCount();
    }
    /**
     * Gets a total number of columns count.
     *
     * @returns {number}
     */
    getColumnsCount() {
      return Ln(Aa, this).getColumnsCount();
    }
    /**
     * Clears the column state manager to the initial state.
     */
    clear() {
      _b(id, this, []), Ln(Aa, this).clear(), Ln(Wr, this).clear();
    }
  }
  function Rb(n, e, t) {
    return (e = bBe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function bBe(n) {
    var e = vBe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function vBe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class wBe {
    constructor(e, t) {
      Rb(this, "hot", void 0), Rb(this, "nestedHeaderSettingsGetter", void 0), Rb(this, "layersCount", 0), Rb(this, "container", void 0), Rb(this, "widthsMap", void 0), this.hot = e, this.nestedHeaderSettingsGetter = t, this.widthsMap = this.hot.columnIndexMapper.createAndRegisterIndexMap("nestedHeaders.widthsMap", "physicalIndexToValue");
    }
    /**
     * Sets the number of nested headers layers count.
     *
     * @param {number} layersCount Total number of headers levels.
     * @returns {GhostTable}
     */
    setLayersCount(e) {
      return this.layersCount = e, this;
    }
    /**
     * Gets the column width based on the visual column index.
     *
     * @param {number} visualColumn Visual column index.
     * @returns {number|null}
     */
    getWidth(e) {
      return this.widthsMap.getValueAtIndex(this.hot.toPhysicalColumn(e));
    }
    /**
     * Build cache of the headers widths.
     */
    buildWidthsMap() {
      this.container = this.hot.rootDocument.createElement("div"), this.container.classList.add("handsontable", "htGhostTable", "htAutoSize"), this._buildGhostTable(this.container), this.hot.rootDocument.body.appendChild(this.container);
      const e = this.container.querySelectorAll("tr:last-of-type th"), t = e.length;
      this.widthsMap.clear();
      for (let i = 0; i < t; i++) {
        const r = this.hot.columnIndexMapper.getVisualFromRenderableIndex(i), s = this.hot.toPhysicalColumn(r);
        this.widthsMap.setValueAtIndex(s, e[i].offsetWidth);
      }
      this.container.parentNode.removeChild(this.container), this.container = null;
    }
    /**
     * Build temporary table for getting minimal columns widths.
     *
     * @private
     * @param {HTMLElement} container The element where the DOM nodes are injected.
     */
    _buildGhostTable(e) {
      const {
        rootDocument: t,
        columnIndexMapper: i
      } = this.hot, r = t.createDocumentFragment(), s = t.createElement("table"), o = !!this.hot.getSettings().dropdownMenu, a = i.getRenderableIndexesLength();
      for (let l = 0; l < this.layersCount; l++) {
        const c = t.createElement("tr");
        for (let u = 0; u < a; u++) {
          let h = i.getVisualFromRenderableIndex(u);
          h === null && (h = u);
          const d = t.createElement("th"), f = this.nestedHeaderSettingsGetter(l, h);
          if (f && (!f.isPlaceholder || f.isHidden)) {
            let g = f.label;
            o && (g += '<button class="changeType"></button>'), Mf(d, g), d.colSpan = f.colspan, c.appendChild(d);
          }
        }
        s.appendChild(c);
      }
      r.appendChild(s), e.appendChild(r);
    }
    /**
     * Clear the widths cache.
     */
    clear() {
      this.widthsMap.clear(), this.container = null;
    }
  }
  function yBe(n, e) {
    PK(n, e), e.add(n);
  }
  function WW(n, e, t) {
    return (e = CBe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function CBe(n) {
    var e = SBe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function SBe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function NC(n, e, t) {
    PK(n, e), e.set(n, t);
  }
  function PK(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function Ad(n, e, t) {
    return n.set(Hn(n, e), t), t;
  }
  function Tt(n, e) {
    return n.get(Hn(n, e));
  }
  function Hn(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  const jW = "nestedHeaders", _Be = 280;
  var Qt = /* @__PURE__ */ new WeakMap(), ou = /* @__PURE__ */ new WeakMap(), Bv = /* @__PURE__ */ new WeakMap(), fE = /* @__PURE__ */ new WeakMap(), Gn = /* @__PURE__ */ new WeakSet();
  class RBe extends Lt {
    constructor() {
      super(...arguments), yBe(this, Gn), NC(this, Qt, new mBe()), NC(this, ou, null), NC(this, Bv, null), NC(this, fE, !1), WW(this, "ghostTable", new wBe(this.hot, (e, t) => this.getHeaderSettings(e, t))), WW(this, "detectedOverlappedHeaders", !1);
    }
    static get PLUGIN_KEY() {
      return jW;
    }
    static get PLUGIN_PRIORITY() {
      return _Be;
    }
    /**
     * Check if plugin is enabled.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return !!this.hot.getSettings()[jW];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
    enablePlugin() {
      var e = this;
      if (this.enabled)
        return;
      const {
        nestedHeaders: t
      } = this.hot.getSettings();
      (!Array.isArray(t) || !Array.isArray(t[0])) && Yt(Kt`Your Nested Headers plugin configuration is invalid. The settings has to be\x20
                        passed as an array of arrays e.q. [['A1', { label: 'A2', colspan: 2 }]]`), this.addHook("init", () => Hn(Gn, this, BBe).call(this)), this.addHook("afterLoadData", function() {
        for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
          r[s] = arguments[s];
        return Hn(Gn, e, VBe).call(e, ...r);
      }), this.addHook("beforeOnCellMouseDown", function() {
        for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
          r[s] = arguments[s];
        return Hn(Gn, e, MBe).call(e, ...r);
      }), this.addHook("afterOnCellMouseDown", function() {
        for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
          r[s] = arguments[s];
        return Hn(Gn, e, ABe).call(e, ...r);
      }), this.addHook("beforeOnCellMouseOver", function() {
        for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
          r[s] = arguments[s];
        return Hn(Gn, e, PBe).call(e, ...r);
      }), this.addHook("beforeOnCellMouseUp", function() {
        for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
          r[s] = arguments[s];
        return Hn(Gn, e, IBe).call(e, ...r);
      }), this.addHook("beforeSelectionHighlightSet", function() {
        for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
          r[s] = arguments[s];
        return Hn(Gn, e, OBe).call(e, ...r);
      }), this.addHook("modifyTransformStart", function() {
        for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
          r[s] = arguments[s];
        return Hn(Gn, e, kBe).call(e, ...r);
      }), this.addHook("afterSelection", () => Hn(Gn, this, LC).call(this)), this.addHook("afterSelectionFocusSet", () => Hn(Gn, this, LC).call(this)), this.addHook("beforeViewportScrollHorizontally", function() {
        for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
          r[s] = arguments[s];
        return Hn(Gn, e, EBe).call(e, ...r);
      }), this.addHook("afterGetColumnHeaderRenderers", (i) => Hn(Gn, this, NBe).call(this, i)), this.addHook("modifyColWidth", function() {
        for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
          r[s] = arguments[s];
        return Hn(Gn, e, HBe).call(e, ...r);
      }), this.addHook("modifyColumnHeaderValue", function() {
        for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
          r[s] = arguments[s];
        return Hn(Gn, e, $Be).call(e, ...r);
      }), this.addHook("beforeHighlightingColumnHeader", function() {
        for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
          r[s] = arguments[s];
        return Hn(Gn, e, xBe).call(e, ...r);
      }), this.addHook("beforeCopy", function() {
        for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
          r[s] = arguments[s];
        return Hn(Gn, e, TBe).call(e, ...r);
      }), this.addHook("beforeSelectColumns", function() {
        for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
          r[s] = arguments[s];
        return Hn(Gn, e, DBe).call(e, ...r);
      }), this.addHook("afterViewportColumnCalculatorOverride", function() {
        for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
          r[s] = arguments[s];
        return Hn(Gn, e, LBe).call(e, ...r);
      }), this.addHook("modifyFocusedElement", function() {
        for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
          r[s] = arguments[s];
        return Hn(Gn, e, FBe).call(e, ...r);
      }), this.hot.columnIndexMapper.addLocalHook("cacheUpdated", () => Hn(Gn, this, LC).call(this)), this.hot.rowIndexMapper.addLocalHook("cacheUpdated", () => Hn(Gn, this, LC).call(this)), super.enablePlugin(), this.updatePlugin();
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`nestedHeaders`](@/api/options.md#nestedheaders)
     */
    updatePlugin() {
      if (!this.hot.view)
        return;
      const {
        nestedHeaders: e
      } = this.hot.getSettings();
      Tt(Qt, this).setColumnsLimit(this.hot.countCols()), Array.isArray(e) && (this.detectedOverlappedHeaders = Tt(Qt, this).setState(e)), this.detectedOverlappedHeaders && Yt(Kt`Your Nested Headers plugin setup contains overlapping headers. This kind of configuration\x20
                        is currently not supported.`), this.enabled && this.hot.columnIndexMapper.hidingMapsCollection.getMergedValues().forEach((t, i) => {
        const r = t === !0 ? "hide-column" : "show-column";
        Tt(Qt, this).triggerColumnModification(r, i);
      }), !Tt(ou, this) && this.enabled && Ad(ou, this, this.hot.columnIndexMapper.createChangesObserver("hiding").subscribe((t) => {
        t.forEach((i) => {
          let {
            op: r,
            index: s,
            newValue: o
          } = i;
          if (r === "replace") {
            const a = o === !0 ? "hide-column" : "show-column";
            Tt(Qt, this).triggerColumnModification(a, s);
          }
        }), this.ghostTable.buildWidthsMap();
      })), this.ghostTable.setLayersCount(this.getLayersCount()).buildWidthsMap(), super.updatePlugin();
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
    disablePlugin() {
      this.clearColspans(), Tt(Qt, this).clear(), Tt(ou, this).unsubscribe(), Ad(ou, this, null), this.ghostTable.clear(), super.disablePlugin();
    }
    /**
     * Returns an instance of the internal state manager of the plugin.
     *
     * @private
     * @returns {StateManager}
     */
    getStateManager() {
      return Tt(Qt, this);
    }
    /**
     * Gets a total number of headers levels.
     *
     * @private
     * @returns {number}
     */
    getLayersCount() {
      return Tt(Qt, this).getLayersCount();
    }
    /**
     * Gets column settings for a specified header. The returned object contains
     * information about the header label, its colspan length, or if it is hidden
     * in the header renderers.
     *
     * @private
     * @param {number} headerLevel Header level (0 = most distant to the table).
     * @param {number} columnIndex A visual column index.
     * @returns {object}
     */
    getHeaderSettings(e, t) {
      return Tt(Qt, this).getHeaderSettings(e, t);
    }
    /**
     * Clear the colspans remaining after plugin usage.
     *
     * @private
     */
    clearColspans() {
      if (!this.hot.view)
        return;
      const {
        _wt: e
      } = this.hot.view, t = e.getSetting("columnHeaders").length, i = e.wtTable.THEAD, r = e.wtOverlays.topOverlay.clone.wtTable.THEAD, s = e.wtOverlays.topInlineStartCornerOverlay ? e.wtOverlays.topInlineStartCornerOverlay.clone.wtTable.THEAD : null;
      for (let o = 0; o < t; o++) {
        const a = i.childNodes[o];
        if (!a)
          break;
        const l = r.childNodes[o], c = s ? s.childNodes[o] : null;
        for (let u = 0, h = a.childNodes.length; u < h; u++)
          a.childNodes[u].removeAttribute("colspan"), Ze(a.childNodes[u], "hiddenHeader"), l && l.childNodes[u] && (l.childNodes[u].removeAttribute("colspan"), Ze(l.childNodes[u], "hiddenHeader")), s && c && c.childNodes[u] && (c.childNodes[u].removeAttribute("colspan"), Ze(c.childNodes[u], "hiddenHeader"));
      }
    }
    /**
     * Generates the appropriate header renderer for a header row.
     *
     * @private
     * @param {number} headerLevel The index of header level counting from the top (positive
     *                             values counting from 0 to N).
     * @returns {Function}
     * @fires Hooks#afterGetColHeader
     */
    headerRendererFactory(e) {
      var t = this;
      const i = this.hot.view._wt.getSetting("fixedColumnsStart");
      return (r, s) => {
        var o;
        const {
          columnIndexMapper: a,
          view: l
        } = this.hot;
        let c = a.getVisualFromRenderableIndex(r);
        c === null && (c = r), s.removeAttribute("colspan"), Ze(s, "hiddenHeader");
        const {
          colspan: u,
          isHidden: h,
          isPlaceholder: d,
          headerClassNames: f
        } = (o = Tt(Qt, this).getHeaderSettings(e, c)) !== null && o !== void 0 ? o : {
          label: ""
        };
        if (d || h)
          ue(s, "hiddenHeader");
        else if (u > 1) {
          var g, p;
          const {
            wtOverlays: m
          } = l._wt, v = (g = m.topInlineStartCornerOverlay) === null || g === void 0 ? void 0 : g.clone.wtTable.THEAD.contains(s), y = (p = m.inlineStartOverlay) === null || p === void 0 ? void 0 : p.clone.wtTable.THEAD.contains(s), w = v || y ? Math.min(u, i - r) : u;
          w > 1 && s.setAttribute("colspan", w);
        }
        if (this.hot.view.appendColHeader(c, s, function() {
          return t.getColumnHeaderValue(...arguments);
        }, e), !d && !h) {
          const m = s.querySelector("div.relative");
          m && f && f.length > 0 && (Ze(m, this.hot.getColumnMeta(c).headerClassName), ue(m, f));
        }
      };
    }
    /**
     * Returns the column header value for specified column and header level index.
     *
     * @private
     * @param {number} visualColumnIndex Visual column index.
     * @param {number} headerLevel The index of header level. The header level accepts positive (0 to N)
     *                             and negative (-1 to -N) values. For positive values, 0 points to the
     *                             top most header, and for negative direction, -1 points to the most bottom
     *                             header (the header closest to the cells).
     * @returns {string} Returns the column header value to update.
     */
    getColumnHeaderValue(e, t) {
      var i;
      const {
        isHidden: r,
        isPlaceholder: s
      } = (i = Tt(Qt, this).getHeaderSettings(t, e)) !== null && i !== void 0 ? i : {};
      return s || r ? "" : this.hot.getColHeader(e, t);
    }
    /**
     * Destroys the plugin instance.
     */
    destroy() {
      Ad(Qt, this, null), Tt(ou, this) !== null && (Tt(ou, this).unsubscribe(), Ad(ou, this, null)), super.destroy();
    }
    /**
     * Gets the tree data that belongs to the column headers pointed by the passed coordinates.
     *
     * @private
     * @param {CellCoords} coords The CellCoords instance.
     * @returns {object|undefined}
     */
    _getHeaderTreeNodeDataByCoords(e) {
      if (!(e.row >= 0 || e.col < 0))
        return Tt(Qt, this).getHeaderTreeNodeData(e.row, e.col);
    }
  }
  function LC() {
    var n;
    const e = (n = this.hot) === null || n === void 0 ? void 0 : n.getSelectedRangeLast();
    if (!e)
      return;
    const {
      highlight: t
    } = e;
    if (t.isHeader() && t.col >= 0) {
      const r = Tt(Qt, this).findLeftMostColumnIndex(t.row, t.col), s = this.hot.selection.highlight.getFocus();
      s.visualCellRange.highlight.col = r, s.visualCellRange.from.col = r, s.visualCellRange.to.col = r, s.commit();
    }
  }
  function EBe(n) {
    const e = this.hot.getSelectedRangeLast();
    if (!e)
      return n;
    const {
      highlight: t
    } = e;
    if (!(t.isHeader() && t.col >= 0))
      return n;
    const r = this.hot.view.getFirstFullyVisibleColumn(), s = this.hot.view.getLastFullyVisibleColumn(), o = Tt(Qt, this).findLeftMostColumnIndex(t.row, t.col), a = Tt(Qt, this).findRightMostColumnIndex(t.row, t.col);
    return o < r && a > s ? n : o < r ? o : a;
  }
  function xBe(n, e, t) {
    const i = Tt(Qt, this).getHeaderTreeNodeData(e, n);
    if (!i)
      return n;
    const {
      columnCursor: r,
      selectionType: s,
      selectionWidth: o
    } = t, {
      isRoot: a,
      colspan: l
    } = Tt(Qt, this).getHeaderSettings(e, n);
    if (s === VD) {
      if (!a)
        return i.columnIndex;
    } else if (s === G9 && (l > o - r || !a))
      return null;
    return n;
  }
  function TBe(n, e, t) {
    let {
      columnHeadersCount: i
    } = t;
    if (i !== 0)
      for (let s = 0; s < e.length; s++) {
        const {
          startRow: o,
          startCol: a,
          endRow: l,
          endCol: c
        } = e[s], u = l - o + 1, h = a - c + 1;
        if (o >= 0 || h === 1)
          break;
        for (let d = a; d <= c; d++)
          for (let f = o; f <= l; f++) {
            var r;
            const g = u + f, p = d - a;
            if (p === 0)
              continue;
            ((r = Tt(Qt, this).getHeaderTreeNodeData(f, d)) === null || r === void 0 ? void 0 : r.isRoot) === !1 && (n[g][p] = "");
          }
      }
  }
  function MBe(n, e, t, i) {
    this._getHeaderTreeNodeDataByCoords(e) && (i.column = !0);
  }
  function ABe(n, e) {
    const t = this._getHeaderTreeNodeDataByCoords(e);
    if (!t)
      return;
    Ad(Bv, this, e.clone()), Ad(fE, this, !0);
    const {
      selection: i
    } = this.hot, r = i.isSelected() ? i.getSelectedRange().current() : null, s = [], {
      columnIndex: o,
      origColspan: a
    } = t, l = !i.inInSelection(e);
    n.shiftKey && r ? e.col < r.from.col ? s.push(r.getTopEndCorner().col, o, e.row) : e.col > r.from.col ? s.push(r.getTopStartCorner().col, o + a - 1, e.row) : s.push(o, o + a - 1, e.row) : (F1(n) || Ku(n) && l || b9(n)) && s.push(o, o + a - 1, e.row), i.selectColumns(...s);
  }
  function PBe(n, e, t, i) {
    if (!this.hot.view.isMouseDown())
      return;
    const r = this._getHeaderTreeNodeDataByCoords(e);
    if (!r)
      return;
    const {
      columnIndex: s,
      origColspan: o
    } = r, a = this.hot.getSelectedRangeLast(), l = a.getTopStartCorner(), c = a.getBottomEndCorner(), {
      from: u
    } = a;
    i.column = !0, i.cell = !0;
    const h = [], d = Gt(e.row, -1 / 0, -1);
    e.col < u.col ? h.push(c.col, s, d) : e.col > u.col ? h.push(l.col, s + o - 1, d) : h.push(s, s + o - 1, d), this.hot.selection.selectColumns(...h);
  }
  function IBe() {
    Ad(fE, this, !1);
  }
  function OBe() {
    const {
      navigableHeaders: n
    } = this.hot.getSettings();
    if (!this.hot.view.isMouseDown() || !Tt(fE, this) || !n)
      return;
    const e = this.hot.getSelectedRangeLast(), t = e.getTopStartCorner().col, i = e.getBottomEndCorner().col, {
      columnIndex: r,
      origColspan: s
    } = Tt(Qt, this).getHeaderTreeNodeData(Tt(Bv, this).row, Tt(Bv, this).col);
    if (e.setHighlight(Tt(Bv, this)), s > e.getWidth() || r < t || r + s - 1 > i) {
      const o = Tt(Qt, this).findTopMostEntireHeaderLevel(Gt(t, r, r + s - 1), Gt(i, r, r + s - 1));
      e.highlight.row = o, e.highlight.col = e.from.col;
    }
  }
  function kBe(n) {
    const {
      highlight: e
    } = this.hot.getSelectedRangeLast(), t = this.hot._createCellCoords(e.row + n.row, e.col + n.col);
    if (!(t.isHeader() && t.col >= 0))
      return;
    const r = Tt(Qt, this).findLeftMostColumnIndex(t.row, t.col), s = Tt(Qt, this).findRightMostColumnIndex(t.row, t.col);
    if (n.col < 0) {
      const o = e.col >= r && e.col <= s ? r - 1 : s, a = this.hot.columnIndexMapper.getNearestNotHiddenIndex(o, -1);
      a === null ? n.col = -this.hot.view.countRenderableColumnsInRange(0, e.col) : n.col = -Math.max(this.hot.view.countRenderableColumnsInRange(a, e.col) - 1, 1);
    } else if (n.col > 0) {
      const o = e.col >= r && e.col <= s ? s + 1 : r, a = this.hot.columnIndexMapper.getNearestNotHiddenIndex(o, 1);
      a === null ? n.col = this.hot.view.countRenderableColumnsInRange(e.col, this.hot.countCols()) : n.col = Math.max(this.hot.view.countRenderableColumnsInRange(e.col, a) - 1, 1);
    }
  }
  function DBe(n, e) {
    const t = n.row, i = this._getHeaderTreeNodeDataByCoords({
      row: t,
      col: n.col
    }), r = this._getHeaderTreeNodeDataByCoords({
      row: t,
      col: e.col
    });
    e.col < n.col ? (i && (n.col = i.columnIndex + i.origColspan - 1), r && (e.col = r.columnIndex)) : e.col >= n.col && (i && (n.col = i.columnIndex), r && (e.col = r.columnIndex + r.origColspan - 1));
  }
  function NBe(n) {
    n.length = 0;
    for (let e = 0; e < Tt(Qt, this).getLayersCount(); e++)
      n.push(this.headerRendererFactory(e));
  }
  function LBe(n) {
    const e = Tt(Qt, this).getLayersCount();
    let t = n.startColumn, i = !!e;
    for (let r = 0; r < e; r++) {
      const s = Tt(Qt, this).findLeftMostColumnIndex(r, n.startColumn), o = this.hot.columnIndexMapper.getRenderableFromVisualIndex(s);
      if (s >= 0 && (i = !1), sr(o) && o < n.startColumn) {
        t = o;
        break;
      }
    }
    n.startColumn = i ? Tt(Qt, this).getHeaderTreeNodeData(0, t).columnIndex : t;
  }
  function HBe(n, e) {
    const t = this.ghostTable.getWidth(e);
    return n > t ? n : t;
  }
  function $Be(n, e, t) {
    var i;
    const {
      label: r
    } = (i = Tt(Qt, this).getHeaderTreeNodeData(t, e)) !== null && i !== void 0 ? i : {
      label: ""
    };
    return r;
  }
  function FBe(n, e) {
    if (n < 0)
      return this.hot.getCell(n, Tt(Qt, this).findLeftMostColumnIndex(n, e), !0);
  }
  function BBe() {
    this.updatePlugin();
  }
  function VBe(n, e) {
    e || this.updatePlugin();
  }
  function Eb(n, e, t) {
    return (e = WBe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function WBe(n) {
    var e = jBe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function jBe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class zBe {
    constructor(e, t) {
      Eb(this, "hot", void 0), Eb(this, "data", null), Eb(this, "plugin", void 0), Eb(this, "parentReference", /* @__PURE__ */ new WeakMap()), Eb(this, "cache", {
        levels: [],
        levelCount: 0,
        rows: [],
        nodeInfo: /* @__PURE__ */ new WeakMap()
      }), this.hot = t, this.plugin = e;
    }
    /**
     * Set the data for the manager.
     *
     * @param {Handsontable.CellValue[][]|Handsontable.RowObject[]} data Data for the manager.
     */
    setData(e) {
      this.data = e;
    }
    /**
     * Get the data cached in the manager.
     *
     * @returns {Handsontable.CellValue[][]|Handsontable.RowObject[]}
     */
    getData() {
      return this.data;
    }
    /**
     * Load the "raw" source data, without NestedRows' modifications.
     *
     * @returns {Handsontable.CellValue[][]|Handsontable.RowObject[]}
     */
    getRawSourceData() {
      let e = null;
      return this.plugin.disableCoreAPIModifiers(), e = this.hot.getSourceData(), this.plugin.enableCoreAPIModifiers(), e;
    }
    /**
     * Update the Data Manager with new data and refresh cache.
     *
     * @param {Handsontable.CellValue[][]|Handsontable.RowObject[]} data Data for the manager.
     */
    updateWithData(e) {
      this.setData(e), this.rewriteCache();
    }
    /**
     * Rewrite the nested structure cache.
     *
     * @private
     */
    rewriteCache() {
      this.cache = {
        levels: [],
        levelCount: 0,
        rows: [],
        nodeInfo: /* @__PURE__ */ new WeakMap()
      }, $e(0, this.data.length - 1, (e) => {
        this.cacheNode(this.data[e], 0, null);
      });
    }
    /**
     * Cache a data node.
     *
     * @private
     * @param {object} node Node to cache.
     * @param {number} level Level of the node.
     * @param {object} parent Parent of the node.
     */
    cacheNode(e, t, i) {
      this.cache.levels[t] || (this.cache.levels[t] = [], this.cache.levelCount += 1), this.cache.levels[t].push(e), this.cache.rows.push(e), this.cache.nodeInfo.set(e, {
        parent: i,
        row: this.cache.rows.length - 1,
        level: t
      }), this.hasChildren(e) && z(e.__children, (r) => {
        this.cacheNode(r, t + 1, e);
      });
    }
    /**
     * Get the date for the provided visual row number.
     *
     * @param {number} row Row index.
     * @returns {object}
     */
    getDataObject(e) {
      return e == null ? null : this.cache.rows[e];
    }
    /**
     * Read the row tree in search for a specific row index or row object.
     *
     * @private
     * @param {object} parent The initial parent object.
     * @param {number} readCount Number of read nodes.
     * @param {number} neededIndex The row index we search for.
     * @param {object} neededObject The row object we search for.
     * @returns {number|object}
     */
    readTreeNodes(e, t, i, r) {
      let s = !1, o = t;
      if (isNaN(o) && o.end)
        return o;
      let a = e;
      return a || (a = {
        __children: this.data
      }, s = !0, o -= 1), i != null && o === i ? {
        result: a,
        end: !0
      } : r != null && a === r ? {
        result: o,
        end: !0
      } : (o += 1, a.__children && z(a.__children, (l) => {
        if (this.parentReference.set(l, s ? null : a), o = this.readTreeNodes(l, o, i, r), isNaN(o) && o.end)
          return !1;
      }), o);
    }
    /**
     * Mock a parent node.
     *
     * @private
     * @returns {*}
     */
    mockParent() {
      const e = this.mockNode();
      return e.__children = this.data, e;
    }
    /**
     * Mock a data node.
     *
     * @private
     * @returns {{}}
     */
    mockNode() {
      const e = {};
      return lt(this.data[0], (t, i) => {
        e[i] = null;
      }), e;
    }
    /**
     * Get the row index for the provided row object.
     *
     * @param {object} rowObj The row object.
     * @returns {number} Row index.
     */
    getRowIndex(e) {
      return e == null ? null : this.cache.nodeInfo.get(e).row;
    }
    /**
     * Get the index of the provided row index/row object within its parent.
     *
     * @param {number|object} row Row index / row object.
     * @returns {number}
     */
    getRowIndexWithinParent(e) {
      let t = null;
      isNaN(e) ? t = e : t = this.getDataObject(e);
      const i = this.getRowParent(e);
      return i == null ? this.data.indexOf(t) : i.__children.indexOf(t);
    }
    /**
     * Count all rows (including all parents and children).
     *
     * @returns {number}
     */
    countAllRows() {
      const e = {
        __children: this.data
      };
      return this.countChildren(e);
    }
    /**
     * Count children of the provided parent.
     *
     * @param {object|number} parent Parent node.
     * @returns {number} Children count.
     */
    countChildren(e) {
      let t = 0, i = e;
      return isNaN(i) || (i = this.getDataObject(i)), !i || !i.__children ? 0 : (z(i.__children, (r) => {
        t += 1, r.__children && (t += this.countChildren(r));
      }), t);
    }
    /**
     * Get the parent of the row at the provided index.
     *
     * @param {number|object} row Physical row index.
     * @returns {object}
     */
    getRowParent(e) {
      let t;
      return isNaN(e) ? t = e : t = this.getDataObject(e), this.getRowObjectParent(t);
    }
    /**
     * Get the parent of the provided row object.
     *
     * @private
     * @param {object} rowObject The row object (tree node).
     * @returns {object|null}
     */
    getRowObjectParent(e) {
      return !e || typeof e != "object" ? null : this.cache.nodeInfo.get(e).parent;
    }
    /**
     * Get the nesting level for the row with the provided row index.
     *
     * @param {number} row Row index.
     * @returns {number|null} Row level or null, when row doesn't exist.
     */
    getRowLevel(e) {
      let t = null;
      return isNaN(e) ? t = e : t = this.getDataObject(e), t ? this.getRowObjectLevel(t) : null;
    }
    /**
     * Get the nesting level for the row with the provided row index.
     *
     * @private
     * @param {object} rowObject Row object.
     * @returns {number} Row level.
     */
    getRowObjectLevel(e) {
      return e == null ? null : this.cache.nodeInfo.get(e).level;
    }
    /**
     * Check if the provided row/row element has children.
     *
     * @param {number|object} row Row number or row element.
     * @returns {boolean}
     */
    hasChildren(e) {
      let t = e;
      return isNaN(t) || (t = this.getDataObject(t)), !!(t.__children && t.__children.length);
    }
    /**
     * Returns `true` if the row at the provided index has a parent.
     *
     * @param {number} index Row index.
     * @returns {boolean} `true` if the row at the provided index has a parent, `false` otherwise.
     */
    isChild(e) {
      return this.getRowParent(e) !== null;
    }
    /**
     * Get child at a provided index from the parent element.
     *
     * @param {object} parent The parent row object.
     * @param {number} index Index of the child element to be retrieved.
     * @returns {object|null} The child element or `null` if the child doesn't exist.
     */
    getChild(e, t) {
      var i;
      return ((i = e.__children) === null || i === void 0 ? void 0 : i[t]) || null;
    }
    /**
     * Return `true` of the row at the provided index is located at the topmost level.
     *
     * @param {number} index Row index.
     * @returns {boolean} `true` of the row at the provided index is located at the topmost level, `false` otherwise.
     */
    isRowHighestLevel(e) {
      return !this.isChild(e);
    }
    /**
     * Return `true` if the provided row index / row object represents a parent in the nested structure.
     *
     * @param {number|object} row Row index / row object.
     * @returns {boolean} `true` if the row is a parent, `false` otherwise.
     */
    isParent(e) {
      var t;
      let i = e;
      return isNaN(i) || (i = this.getDataObject(i)), i && !!i.__children && ((t = i.__children) === null || t === void 0 ? void 0 : t.length) !== 0;
    }
    /**
     * Add a child to the provided parent. It's optional to add a row object as the "element".
     *
     * @param {object} parent The parent row object.
     * @param {object} [element] The element to add as a child.
     */
    addChild(e, t) {
      let i = t;
      this.hot.runHooks("beforeAddChild", e, i);
      let r = null;
      e && (r = this.getRowIndex(e)), this.hot.runHooks("beforeCreateRow", r + this.countChildren(e) + 1, 1);
      let s = e;
      e || (s = this.mockParent()), s.__children || (s.__children = []), i || (i = this.mockNode()), s.__children.push(i), this.rewriteCache();
      const o = this.getRowIndex(i);
      this.hot.rowIndexMapper.insertIndexes(o, 1), this.hot.runHooks("afterCreateRow", o, 1), this.hot.runHooks("afterAddChild", e, i);
    }
    /**
     * Add a child node to the provided parent at a specified index.
     *
     * @param {object} parent Parent node.
     * @param {number} index Index to insert the child element at.
     * @param {object} [element] Element (node) to insert.
     */
    addChildAtIndex(e, t, i) {
      let r = i, s;
      if (r || (r = this.mockNode()), this.hot.runHooks("beforeAddChild", e, r, t), e) {
        const a = this.getRowIndex(e) + t + 1;
        this.hot.runHooks("beforeCreateRow", a, 1), e.__children.splice(t, null, r), this.rewriteCache(), this.plugin.disableCoreAPIModifiers(), this.hot.setSourceDataAtCell(this.getRowIndexWithinParent(e), "__children", e.__children, "NestedRows.addChildAtIndex"), this.hot.rowIndexMapper.insertIndexes(a, 1), this.plugin.enableCoreAPIModifiers(), this.hot.runHooks("afterCreateRow", a, 1), s = a;
      } else
        this.plugin.disableCoreAPIModifiers(), this.hot.alter("insert_row_above", t, 1, "NestedRows.addChildAtIndex"), this.plugin.enableCoreAPIModifiers(), s = this.getRowIndex(this.data[t]);
      r = this.getDataObject(s), this.hot.runHooks("afterAddChild", e, r, t);
    }
    /**
     * Add a sibling element at the specified index.
     *
     * @param {number} index New element sibling's index.
     * @param {('above'|'below')} where Direction in which the sibling is to be created.
     */
    addSibling(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "below";
      const i = this.translateTrimmedRow(e), r = this.getRowParent(i), s = this.getRowIndexWithinParent(i);
      switch (t) {
        case "below":
          this.addChildAtIndex(r, s + 1, null);
          break;
        case "above":
          this.addChildAtIndex(r, s, null);
          break;
      }
    }
    /**
     * Detach the provided element from its parent and add it right after it.
     *
     * @param {object|Array} elements Row object or an array of selected coordinates.
     * @param {boolean} [forceRender=true] If true (default), it triggers render after finished.
     */
    detachFromParent(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, i = null;
      const r = [];
      Array.isArray(e) ? ($e(e[0], e[2], (d) => {
        const f = this.translateTrimmedRow(d);
        r.push(this.getDataObject(f));
      }), $e(0, r.length - 2, (d) => {
        this.detachFromParent(r[d], !1);
      }), i = r[r.length - 1]) : i = e;
      const s = this.getRowIndex(i), o = this.countChildren(i), a = this.getRowIndexWithinParent(i), l = this.getRowParent(i), c = this.getRowParent(l), u = this.getRowIndex(c);
      let h = null;
      if (this.hot.runHooks("beforeDetachChild", l, i), a != null) {
        const d = Array.from(new Array(s + o + 1).keys()).splice(-1 * (o + 1));
        if (this.hot.runHooks("beforeRemoveRow", s, o + 1, d, this.plugin.pluginName), l.__children.splice(a, 1), this.rewriteCache(), this.hot.runHooks("afterRemoveRow", s, o + 1, d, this.plugin.pluginName), c) {
          h = u + this.countChildren(c);
          const f = this.getChild(c, this.countChildren(c) - 1), g = this.getRowIndex(f);
          this.hot.runHooks("beforeCreateRow", g + 1, o + 1, this.plugin.pluginName), c.__children.push(i);
        } else
          h = this.hot.countRows() + 1, this.hot.runHooks("beforeCreateRow", h - 2, o + 1, this.plugin.pluginName), this.data.push(i);
      }
      this.rewriteCache(), this.hot.runHooks("afterCreateRow", h - 2, o + 1, this.plugin.pluginName), this.hot.runHooks("afterDetachChild", l, i, this.getRowIndex(i)), t && this.hot.render();
    }
    /**
     * Filter the data by the `logicRows` array.
     *
     * @private
     * @param {number} index Index of the first row to remove.
     * @param {number} amount Number of elements to remove.
     * @param {Array} logicRows Array of indexes to remove.
     */
    filterData(e, t, i) {
      const r = [];
      z(i, (s) => {
        r.push(this.getDataObject(s));
      }), z(r, (s) => {
        const o = this.getRowIndexWithinParent(s), a = this.getRowParent(s);
        a === null ? this.data.splice(o, 1) : a.__children.splice(o, 1);
      }), this.rewriteCache();
    }
    /**
     * Used to splice the source data. Needed to properly modify the nested structure, which wouldn't work with the
     * default script.
     *
     * @private
     * @param {number} index Physical index of the element at the splice beginning.
     * @param {number} amount Number of elements to be removed.
     * @param {object[]} elements Array of row objects to add.
     */
    spliceData(e, t, i) {
      const r = this.getDataObject(e - 1);
      let s = null, o = e;
      r && r.__children && r.__children.length === 0 ? (s = r, o = 0) : e < this.countAllRows() && (s = this.getRowParent(e), o = this.getRowIndexWithinParent(e)), s ? i ? s.__children.splice(o, t, ...i) : s.__children.splice(o, t) : i ? this.data.splice(o, t, ...i) : this.data.splice(o, t), this.rewriteCache();
    }
    /**
     * Update the `__children` key of the upmost parent of the provided row object.
     *
     * @private
     * @param {object} rowElement Row object.
     */
    syncRowWithRawSource(e) {
      let t = e, i = null;
      do
        i = this.getRowParent(i), i !== null && (t = i);
      while (i !== null);
      this.plugin.disableCoreAPIModifiers(), this.hot.setSourceDataAtCell(this.getRowIndex(t), "__children", t.__children, "NestedRows.syncRowWithRawSource"), this.plugin.enableCoreAPIModifiers();
    }
    /* eslint-disable jsdoc/require-param */
    /**
     * Move a single row.
     *
     * @param {number} fromIndex Index of the row to be moved.
     * @param {number} toIndex Index of the destination.
     * @param {boolean} moveToCollapsed `true` if moving a row to a collapsed parent.
     * @param {boolean} moveToLastChild `true` if moving a row to be a last child of the new parent.
     */
    /* eslint-enable jsdoc/require-param */
    moveRow(e, t, i, r) {
      const s = t === this.hot.countRows(), o = this.getRowParent(e), a = this.getRowIndexWithinParent(e), l = o.__children.slice(a, a + 1), c = e > t;
      let u = s ? this.getRowParent(t - 1) : this.getRowParent(t);
      u == null && (u = this.getRowParent(t - 1)), u == null && (u = this.getDataObject(t - 1)), u ? u.__children || (u.__children = []) : (u = this.getDataObject(t), u.__children = []);
      const h = s || i || r ? u.__children.length : this.getRowIndexWithinParent(t), d = o === u;
      u.__children.splice(h, 0, l[0]), o.__children.splice(a + (c && d ? 1 : 0), 1), this.syncRowWithRawSource(o), d || this.syncRowWithRawSource(u);
    }
    /**
     * Translate the visual row index to the physical index, taking into consideration the state of collapsed rows.
     *
     * @private
     * @param {number} row Row index.
     * @returns {number}
     */
    translateTrimmedRow(e) {
      return this.plugin.collapsingUI ? this.plugin.collapsingUI.translateTrimmedRow(e) : e;
    }
    /**
     * Translate the physical row index to the visual index, taking into consideration the state of collapsed rows.
     *
     * @private
     * @param {number} row Row index.
     * @returns {number}
     */
    untranslateTrimmedRow(e) {
      return this.plugin.collapsingUI ? this.plugin.collapsingUI.untranslateTrimmedRow(e) : e;
    }
  }
  function zW(n, e, t) {
    return (e = UBe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function UBe(n) {
    var e = GBe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function GBe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class oH {
    constructor(e, t) {
      zW(this, "hot", void 0), zW(this, "plugin", void 0), this.hot = t, this.plugin = e;
    }
  }
  class $a extends oH {
    /**
     * CSS classes used in the row headers.
     *
     * @type {object}
     */
    static get CSS_CLASSES() {
      return {
        indicatorContainer: "ht_nestingLevels",
        parent: "ht_nestingParent",
        indicator: "ht_nestingLevel",
        emptyIndicator: "ht_nestingLevel_empty",
        button: "ht_nestingButton",
        expandButton: "ht_nestingExpand",
        collapseButton: "ht_nestingCollapse"
      };
    }
    constructor(e, t) {
      super(e, t), this.dataManager = this.plugin.dataManager, this.collapsingUI = this.plugin.collapsingUI, this.rowHeaderWidthCache = null;
    }
    /**
     * Append nesting indicators and buttons to the row headers.
     *
     * @private
     * @param {number} row Row index.
     * @param {HTMLElement} TH TH 3element.
     */
    appendLevelIndicators(e, t) {
      const i = this.hot.toPhysicalRow(e), r = this.dataManager.getRowLevel(i), s = this.dataManager.getDataObject(i), o = t.getElementsByTagName("DIV")[0], a = o.querySelector("span.rowHeader"), l = o.querySelectorAll('[class^="ht_nesting"]'), c = this.hot.getSettings().ariaTags;
      if (z(l, (u) => {
        u && o.removeChild(u);
      }), ue(t, $a.CSS_CLASSES.indicatorContainer), r) {
        const {
          rootDocument: u
        } = this.hot, h = a.cloneNode(!0);
        o.innerHTML = "", $e(0, r - 1, () => {
          const d = u.createElement("SPAN");
          ue(d, $a.CSS_CLASSES.emptyIndicator), o.appendChild(d);
        }), o.appendChild(h);
      }
      if (this.dataManager.hasChildren(s)) {
        const u = this.hot.rootDocument.createElement("DIV");
        c && ze(u, [xf()]), ue(t, $a.CSS_CLASSES.parent), this.collapsingUI.areChildrenCollapsed(i) ? (ue(u, `${$a.CSS_CLASSES.button} ${$a.CSS_CLASSES.expandButton}`), c && ze(t, [no(!1)])) : (ue(u, `${$a.CSS_CLASSES.button} ${$a.CSS_CLASSES.collapseButton}`), c && ze(t, [no(!0)])), o.appendChild(u);
      }
    }
    /**
     * Update the row header width according to number of levels in the dataset.
     *
     * @private
     * @param {number} deepestLevel Cached deepest level of nesting.
     */
    updateRowHeaderWidth(e) {
      let t = e;
      t || (t = this.dataManager.cache.levelCount), this.rowHeaderWidthCache = Math.max(50, 11 + 10 * t + 25), this.hot.render();
    }
  }
  class YBe extends oH {
    constructor(e, t) {
      var i;
      super(e, t), i = this, this.dataManager = this.plugin.dataManager, this.collapsedRows = [], this.collapsedRowsStash = {
        stash: function() {
          let r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
          i.lastCollapsedRows = i.collapsedRows.slice(0), i.expandMultipleChildren(i.lastCollapsedRows, r);
        },
        shiftStash: function(r, s) {
          let o = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
          s == null && (s = 1 / 0), z(i.lastCollapsedRows, (a, l) => {
            a >= r && a < s && (i.lastCollapsedRows[l] = a + o);
          });
        },
        applyStash: function() {
          let r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;
          i.collapseMultipleChildren(i.lastCollapsedRows, r), i.lastCollapsedRows = void 0;
        },
        trimStash: (r, s) => {
          $e(r, r + s - 1, (o) => {
            const a = this.lastCollapsedRows.indexOf(o);
            a > -1 && this.lastCollapsedRows.splice(a, 1);
          });
        }
      };
    }
    /**
     * Collapse the children of the row passed as an argument.
     *
     * @param {number|object} row The parent row.
     * @param {boolean} [forceRender=true] Whether to render the table after the function ends.
     * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.
     * @returns {Array}
     */
    collapseChildren(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
      const r = [];
      let s = null, o = null, a = null;
      return isNaN(e) ? (s = e, o = this.dataManager.getRowIndex(s)) : (s = this.dataManager.getDataObject(e), o = e), this.dataManager.hasChildren(s) && z(s.__children, (l) => {
        r.push(this.dataManager.getRowIndex(l));
      }), a = this.collapseRows(r, !0, !1), i && this.trimRows(a), t && this.renderAndAdjust(), this.collapsedRows.indexOf(o) === -1 && this.collapsedRows.push(o), a;
    }
    /**
     * Collapse multiple children.
     *
     * @param {Array} rows Rows to collapse (including their children).
     * @param {boolean} [forceRender=true] `true` if the table should be rendered after finishing the function.
     * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.
     */
    collapseMultipleChildren(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
      const r = [];
      z(e, (s) => {
        r.push(...this.collapseChildren(s, !1, !1));
      }), i && this.trimRows(r), t && this.renderAndAdjust();
    }
    /**
     * Collapse a single row.
     *
     * @param {number} rowIndex Index of the row to collapse.
     * @param {boolean} [recursive=true] `true` if it should collapse the row's children.
     */
    collapseRow(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
      this.collapseRows([e], t);
    }
    /**
     * Collapse multiple rows.
     *
     * @param {Array} rowIndexes Array of row indexes to collapse.
     * @param {boolean} [recursive=true] `true` if it should collapse the rows' children.
     * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.
     * @returns {Array} Rows prepared for trimming (or trimmed, if doTrimming == true).
     */
    collapseRows(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
      const r = [];
      return z(e, (s) => {
        r.push(s), t && this.collapseChildRows(s, r);
      }), i && this.trimRows(r), r;
    }
    /**
     * Collapse child rows of the row at the provided index.
     *
     * @param {number} parentIndex Index of the parent node.
     * @param {Array} [rowsToTrim=[]] Array of rows to trim. Defaults to an empty array.
     * @param {boolean} [recursive] `true` if the collapsing process should be recursive.
     * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.
     */
    collapseChildRows(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
      if (this.dataManager.hasChildren(e)) {
        const r = this.dataManager.getDataObject(e);
        z(r.__children, (s) => {
          const o = this.dataManager.getRowIndex(s);
          t.push(o), this.collapseChildRows(o, t);
        });
      }
      i && this.trimRows(t);
    }
    /**
     * Expand a single row.
     *
     * @param {number} rowIndex Index of the row to expand.
     * @param {boolean} [recursive=true] `true` if it should expand the row's children recursively.
     */
    expandRow(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
      this.expandRows([e], t);
    }
    /**
     * Expand multiple rows.
     *
     * @param {Array} rowIndexes Array of indexes of the rows to expand.
     * @param {boolean} [recursive=true] `true` if it should expand the rows' children recursively.
     * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.
     * @returns {Array} Array of row indexes to be untrimmed.
     */
    expandRows(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
      const r = [];
      return z(e, (s) => {
        r.push(s), t && this.expandChildRows(s, r);
      }), i && this.untrimRows(r), r;
    }
    /**
     * Expand child rows of the provided index.
     *
     * @param {number} parentIndex Index of the parent row.
     * @param {Array} [rowsToUntrim=[]] Array of the rows to be untrimmed.
     * @param {boolean} [recursive] `true` if it should expand the rows' children recursively.
     * @param {boolean} [doTrimming=false] I determine whether collapsing should envolve trimming rows.
     */
    expandChildRows(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
      if (this.dataManager.hasChildren(e)) {
        const r = this.dataManager.getDataObject(e);
        z(r.__children, (s) => {
          if (!this.isAnyParentCollapsed(s)) {
            const o = this.dataManager.getRowIndex(s);
            t.push(o), this.expandChildRows(o, t);
          }
        });
      }
      i && this.untrimRows(t);
    }
    /**
     * Expand the children of the row passed as an argument.
     *
     * @param {number|object} row Parent row.
     * @param {boolean} [forceRender=true] Whether to render the table after the function ends.
     * @param {boolean} [doTrimming=true] If set to `true`, the trimming will be applied when the function finishes.
     * @returns {number[]}
     */
    expandChildren(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
      const r = [];
      let s = null, o = null, a = null;
      return isNaN(e) ? (s = e, o = this.dataManager.getRowIndex(e)) : (s = this.dataManager.getDataObject(e), o = e), this.collapsedRows.splice(this.collapsedRows.indexOf(o), 1), this.dataManager.hasChildren(s) && z(s.__children, (l) => {
        const c = this.dataManager.getRowIndex(l);
        r.push(c);
      }), a = this.expandRows(r, !0, !1), i && this.untrimRows(a), t && this.renderAndAdjust(), a;
    }
    /**
     * Expand multiple rows' children.
     *
     * @param {Array} rows Array of rows which children are about to be expanded.
     * @param {boolean} [forceRender=true] `true` if the table should render after finishing the function.
     * @param {boolean} [doTrimming=true] `true` if the rows should be untrimmed after finishing the function.
     */
    expandMultipleChildren(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
      const r = [];
      z(e, (s) => {
        r.push(...this.expandChildren(s, !1, !1));
      }), i && this.untrimRows(r), t && this.renderAndAdjust();
    }
    /**
     * Collapse all collapsable rows.
     */
    collapseAll() {
      const e = this.dataManager.getData(), t = [];
      z(e, (i) => {
        this.dataManager.hasChildren(i) && t.push(i);
      }), this.collapseMultipleChildren(t), this.renderAndAdjust();
    }
    /**
     * Expand all collapsable rows.
     */
    expandAll() {
      const e = this.dataManager.getData(), t = [];
      z(e, (i) => {
        this.dataManager.hasChildren(i) && t.push(i);
      }), this.expandMultipleChildren(t), this.renderAndAdjust();
    }
    /**
     * Trim rows.
     *
     * @param {Array} rows Physical row indexes.
     */
    trimRows(e) {
      this.hot.batchExecution(() => {
        z(e, (t) => {
          this.plugin.collapsedRowsMap.setValueAtIndex(t, !0);
        });
      }, !0);
    }
    /**
     * Untrim rows.
     *
     * @param {Array} rows Physical row indexes.
     */
    untrimRows(e) {
      this.hot.batchExecution(() => {
        z(e, (t) => {
          this.plugin.collapsedRowsMap.setValueAtIndex(t, !1);
        });
      }, !0);
    }
    /**
     * Check if all child rows are collapsed.
     *
     * @private
     * @param {number|object|null} row The parent row. `null` for the top level.
     * @returns {boolean}
     */
    areChildrenCollapsed(e) {
      let t = isNaN(e) ? e : this.dataManager.getDataObject(e), i = !0;
      return t === null && (t = {
        __children: this.dataManager.data
      }), this.dataManager.hasChildren(t) && z(t.__children, (r) => {
        const s = this.dataManager.getRowIndex(r);
        if (!this.plugin.collapsedRowsMap.getValueAtIndex(s))
          return i = !1, !1;
      }), i;
    }
    /**
     * Check if any of the row object parents are collapsed.
     *
     * @private
     * @param {object} rowObj Row object.
     * @returns {boolean}
     */
    isAnyParentCollapsed(e) {
      let t = e;
      for (; t !== null; ) {
        t = this.dataManager.getRowParent(t);
        const i = this.dataManager.getRowIndex(t);
        if (this.collapsedRows.indexOf(i) > -1)
          return !0;
      }
      return !1;
    }
    /**
     * Toggle collapsed state. Callback for the `beforeOnCellMousedown` hook.
     *
     * @private
     * @param {MouseEvent} event `mousedown` event.
     * @param {object} coords Coordinates of the clicked cell/header.
     */
    toggleState(e, t) {
      if (t.col >= 0)
        return;
      const i = this.translateTrimmedRow(t.row);
      Ue(e.target, $a.CSS_CLASSES.button) && (this.areChildrenCollapsed(i) ? this.expandChildren(i) : this.collapseChildren(i), bo(e));
    }
    /**
     * Translate visual row after trimming to physical base row index.
     *
     * @private
     * @param {number} row Row index.
     * @returns {number} Base row index.
     */
    translateTrimmedRow(e) {
      return this.hot.toPhysicalRow(e);
    }
    /**
     * Translate physical row after trimming to visual base row index.
     *
     * @private
     * @param {number} row Row index.
     * @returns {number} Base row index.
     */
    untranslateTrimmedRow(e) {
      return this.hot.toVisualRow(e);
    }
    /**
     * Helper function to render the table and call the `adjustElementsSize` method.
     *
     * @private
     */
    renderAndAdjust() {
      this.hot.render(), this.hot.view.adjustElementsSize();
    }
  }
  function KBe(n, e, t) {
    qBe(n, e), e.set(n, t);
  }
  function qBe(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function XBe(n, e, t) {
    return (e = ZBe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function ZBe(n) {
    var e = QBe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function QBe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function JBe(n, e) {
    return n.get(eVe(n, e));
  }
  function eVe(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  var UW = /* @__PURE__ */ new WeakMap();
  class tVe extends oH {
    constructor() {
      super(...arguments), XBe(this, "dataManager", this.plugin.dataManager), KBe(this, UW, {
        row_above: (e, t) => {
          const i = t[t.length - 1];
          this.dataManager.addSibling(i.start.row, "above");
        },
        row_below: (e, t) => {
          const i = t[t.length - 1];
          this.dataManager.addSibling(i.start.row, "below");
        }
      });
    }
    /**
     * Append options to the context menu. (Propagated from the `afterContextMenuDefaultOptions` hook callback)
     * f.
     *
     * @private
     * @param {object} defaultOptions Default context menu options.
     * @returns {*}
     */
    appendOptions(e) {
      const t = [{
        key: "add_child",
        name() {
          return this.getTranslatedPhrase(LN);
        },
        callback: () => {
          const i = this.dataManager.translateTrimmedRow(this.hot.getSelectedLast()[0]), r = this.dataManager.getDataObject(i);
          this.dataManager.addChild(r);
        },
        disabled: () => {
          const i = this.hot.getSelectedLast();
          return !i || i[0] < 0 || this.hot.selection.isSelectedByColumnHeader() || this.hot.countRows() >= this.hot.getSettings().maxRows;
        }
      }, {
        key: "detach_from_parent",
        name() {
          return this.getTranslatedPhrase(HN);
        },
        callback: () => {
          this.dataManager.detachFromParent(this.hot.getSelectedLast());
        },
        disabled: () => {
          const i = this.hot.getSelectedLast(), r = this.dataManager.translateTrimmedRow(i[0]);
          return !this.dataManager.getRowParent(r) || !i || i[0] < 0 || this.hot.selection.isSelectedByColumnHeader() || this.hot.countRows() >= this.hot.getSettings().maxRows;
        }
      }, {
        name: "---------"
      }];
      return $e(0, e.items.length - 1, (i) => {
        if (i === 0)
          return z(t, (r, s) => {
            e.items.splice(i + s, 0, r);
          }), !1;
      }), this.modifyRowInsertingOptions(e);
    }
    /**
     * Modify how the row inserting options work.
     *
     * @private
     * @param {object} defaultOptions Default context menu items.
     * @returns {*}
     */
    modifyRowInsertingOptions(e) {
      return $e(0, e.items.length - 1, (t) => {
        const i = JBe(UW, this)[e.items[t].key];
        i != null && (e.items[t].callback = i);
      }), e;
    }
  }
  function HC(n, e, t) {
    return (e = nVe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function nVe(n) {
    var e = iVe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function iVe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class rVe {
    constructor(e) {
      HC(this, "plugin", void 0), HC(this, "hot", void 0), HC(this, "dataManager", void 0), HC(this, "collapsingUI", void 0), this.plugin = e, this.hot = e.hot, this.dataManager = e.dataManager, this.collapsingUI = e.collapsingUI;
    }
    /**
     * `beforeRowMove` hook callback.
     *
     * @param {Array} rows Array of visual row indexes to be moved.
     * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements
     *   will be placed after the moving action. To check the visualization of the final index, please take a look at
     *   [documentation](@/guides/rows/row-moving/row-moving.md).
     * @param {undefined|number} dropIndex Visual row index, being a drop index for the moved rows. Points to where we
     *   are going to drop the moved elements. To check visualization of drop index please take a look at
     *   [documentation](@/guides/rows/row-moving/row-moving.md).
     * @param {boolean} movePossible Indicates if it's possible to move rows to the desired position.
     * @fires Hooks#afterRowMove
     * @returns {boolean}
     */
    onBeforeRowMove(e, t, i, r) {
      if (this.displayAPICompatibilityWarning({
        rows: e,
        finalIndex: t,
        dropIndex: i,
        movePossible: r
      }))
        return !1;
      this.movedToCollapsed = !1;
      const o = i === this.hot.countRows(), a = o ? this.hot.countSourceRows() : this.dataManager.translateTrimmedRow(i);
      let l = !0;
      const c = e.map((g) => {
        if (!l)
          return !1;
        const p = this.dataManager.translateTrimmedRow(g);
        return l = this.shouldAllowMoving(p, a), p;
      }), u = c.indexOf(a) === -1;
      if (!l || !u)
        return !1;
      const h = this.getBaseParent(c), d = this.getTargetParent(o, a), f = h === d;
      return this.movedToCollapsed = this.collapsingUI.areChildrenCollapsed(d), this.collapsingUI.collapsedRowsStash.stash(), this.shiftCollapsibleParentsLocations(c, a, f), this.moveRows(c, a, d), this.dataManager.rewriteCache(), this.moveCellsMeta(c, a), this.collapsingUI.collapsedRowsStash.applyStash(!1), this.hot.runHooks("afterRowMove", e, t, i, r, r && this.isRowOrderChanged(e, t)), this.hot.render(), this.selectCells(e, i), !1;
    }
    /**
     * Display a `dragRows`/`moveRows` method compatibility warning if needed.
     *
     * @param {object} beforeMoveRowHookArgs A set of arguments from the `beforeMoveRow` hook.
     * @returns {boolean} `true` if is a result of an improper usage of the moving API.
     */
    displayAPICompatibilityWarning(e) {
      const {
        rows: t,
        finalIndex: i,
        dropIndex: r,
        movePossible: s
      } = e;
      let o = !1;
      return dn(r) && (Yt(Kt`Since version 8.0.0 of the Handsontable the 'moveRows' method isn't used for moving rows\x20
      when the NestedRows plugin is enabled. Please use the 'dragRows' method instead.`), this.hot.runHooks("afterRowMove", t, i, r, s, !1), o = !0), o;
    }
    /**
     * Check if the moving action should be allowed.
     *
     * @param {number} physicalRowIndex Physical start row index.
     * @param {number} physicalDropIndex Physical drop index.
     * @returns {boolean} `true` if it should continue with the moving action.
     */
    shouldAllowMoving(e, t) {
      return !(this.dataManager.isParent(e) || this.dataManager.isRowHighestLevel(e) || e === t || t === 0);
    }
    /**
     * Get the base row parent.
     *
     * @param {number} physicalStartIndexes Physical start row index.
     * @returns {object|null} The base row parent.
     */
    getBaseParent(e) {
      return this.dataManager.getRowParent(e[0]);
    }
    /**
     * Get the target row parent.
     *
     * @param {boolean} dropToLastRow `true` if the row is moved to the last row of the table.
     * @param {number} physicalDropIndex Physical drop row index.
     * @returns {object|null} The target row parent.
     */
    getTargetParent(e, t) {
      let i = this.dataManager.getRowParent(e ? t - 1 : t);
      return i == null && (i = this.dataManager.getRowParent(t - 1)), i;
    }
    /**
     * Shift the cached collapsible rows position according to the move action.
     *
     * @param {number[]} physicalStartIndexes Physical start row indexes.
     * @param {number} physicalDropIndex Physical drop index.
     * @param {boolean} sameParent `true` if the row's being moved between siblings of the same parent.
     */
    shiftCollapsibleParentsLocations(e, t, i) {
      i || (Math.max(...e) <= t ? this.collapsingUI.collapsedRowsStash.shiftStash(e[0], t, -1 * e.length) : this.collapsingUI.collapsedRowsStash.shiftStash(t, e[0], e.length));
    }
    /**
     * Move the rows at the provided coordinates.
     *
     * @param {number[]} physicalStartIndexes Physical indexes of the rows about to be moved.
     * @param {number} physicalDropIndex Physical drop index.
     * @param {object} targetParent Parent of the destination row.
     */
    moveRows(e, t, i) {
      const r = t === this.dataManager.getRowIndex(i) + this.dataManager.countChildren(i) + 1;
      this.hot.batchRender(() => {
        e.forEach((s) => {
          this.dataManager.moveRow(s, t, this.movedToCollapsed, r);
        });
      });
    }
    /**
     * Move the cell meta for multiple rows.
     *
     * @param {number[]} baseIndexes Array of indexes for the rows being moved.
     * @param {number} targetIndex Index of the destination of the move.
     */
    moveCellsMeta(e, t) {
      const i = [], r = Math.max(...e) < t;
      e.forEach((s) => {
        i.push(this.hot.getCellMetaAtRow(s));
      }), this.hot.spliceCellsMeta(e[0], e.length), this.hot.spliceCellsMeta(t - (r ? i.length : 0), 0, ...i);
    }
    /**
     * Select cells after the move.
     *
     * @param {Array} rows Array of visual row indexes to be moved.
     * @param {undefined|number} dropIndex Visual row index, being a drop index for the moved rows. Points to where we
     *   are going to drop the moved elements. To check visualization of drop index please take a look at
     *   [documentation](@/guides/rows/row-moving/row-moving.md).
     */
    selectCells(e, t) {
      const i = e.length;
      let r = 0, s = 0, o = null, a = null;
      if (this.movedToCollapsed) {
        let l = null;
        e[i - 1] < t ? l = this.dataManager.translateTrimmedRow(t - i) : l = this.dataManager.translateTrimmedRow(t);
        const c = this.dataManager.getRowParent(l === null ? this.hot.countSourceRows() - 1 : l - 1), u = this.dataManager.getRowIndex(c);
        r = this.dataManager.untranslateTrimmedRow(u), s = r;
      } else e[i - 1] < t ? (s = t - 1, r = s - i + 1) : (r = t, s = r + i - 1);
      o = this.hot.selection, a = this.hot.countCols() - 1, o.setRangeStart(this.hot._createCellCoords(r, 0)), o.setRangeEnd(this.hot._createCellCoords(s, a), !0);
    }
    // TODO: Reimplementation of function which is inside the `ManualRowMove` plugin.
    /**
     * Indicates if order of rows was changed.
     *
     * @param {Array} movedRows Array of visual row indexes to be moved.
     * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements
     *   will be placed after the moving action. To check the visualization of the final index, please take a look at
     *   [documentation](@/guides/rows/row-moving/row-moving.md).
     * @returns {boolean}
     */
    isRowOrderChanged(e, t) {
      return e.some((i, r) => i - r !== t);
    }
  }
  function sVe(n, e) {
    IK(n, e), e.add(n);
  }
  function GW(n, e, t) {
    IK(n, e), e.set(n, t);
  }
  function IK(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function FM(n, e, t) {
    return (e = oVe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function oVe(n) {
    var e = aVe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function aVe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function NS(n, e) {
    return n.get(Ci(n, e));
  }
  function bR(n, e, t) {
    return n.set(Ci(n, e), t), t;
  }
  function Ci(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  const vR = "nestedRows", lVe = 300, YW = vR, cVe = "The Nested Rows plugin requires an Array of Objects as a dataset to be provided. The plugin has been disabled.";
  var gE = /* @__PURE__ */ new WeakMap(), Sg = /* @__PURE__ */ new WeakMap(), Ai = /* @__PURE__ */ new WeakSet();
  class uVe extends Lt {
    constructor() {
      super(...arguments), sVe(this, Ai), FM(this, "dataManager", null), FM(this, "headersUI", null), FM(this, "collapsedRowsMap", null), GW(this, gE, !1), GW(this, Sg, !1);
    }
    static get PLUGIN_KEY() {
      return vR;
    }
    static get PLUGIN_PRIORITY() {
      return lVe;
    }
    /**
     * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link NestedRows#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return !!this.hot.getSettings()[vR];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
    enablePlugin() {
      var e = this;
      this.enabled || (this.collapsedRowsMap = this.hot.rowIndexMapper.registerMap("nestedRows", new py()), this.dataManager = new zBe(this, this.hot), this.collapsingUI = new YBe(this, this.hot), this.headersUI = new $a(this, this.hot), this.contextMenuUI = new tVe(this, this.hot), this.rowMoveController = new rVe(this), this.addHook("afterInit", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ci(Ai, e, RVe).call(e, ...i);
      }), this.addHook("beforeViewRender", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ci(Ai, e, EVe).call(e, ...i);
      }), this.addHook("modifyRowData", function() {
        return e.onModifyRowData(...arguments);
      }), this.addHook("modifySourceLength", function() {
        return e.onModifySourceLength(...arguments);
      }), this.addHook("beforeDataSplice", function() {
        return e.onBeforeDataSplice(...arguments);
      }), this.addHook("filterData", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ci(Ai, e, fVe).call(e, ...i);
      }), this.addHook("afterContextMenuDefaultOptions", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ci(Ai, e, gVe).call(e, ...i);
      }), this.addHook("afterGetRowHeader", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ci(Ai, e, pVe).call(e, ...i);
      }), this.addHook("beforeOnCellMouseDown", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ci(Ai, e, dVe).call(e, ...i);
      }), this.addHook("beforeRemoveRow", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ci(Ai, e, vVe).call(e, ...i);
      }), this.addHook("afterRemoveRow", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ci(Ai, e, bVe).call(e, ...i);
      }), this.addHook("beforeAddChild", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ci(Ai, e, wVe).call(e, ...i);
      }), this.addHook("afterAddChild", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ci(Ai, e, yVe).call(e, ...i);
      }), this.addHook("beforeDetachChild", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ci(Ai, e, CVe).call(e, ...i);
      }), this.addHook("afterDetachChild", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ci(Ai, e, SVe).call(e, ...i);
      }), this.addHook("modifyRowHeaderWidth", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ci(Ai, e, mVe).call(e, ...i);
      }), this.addHook("afterCreateRow", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ci(Ai, e, _Ve).call(e, ...i);
      }), this.addHook("beforeRowMove", function() {
        for (var t = arguments.length, i = new Array(t), r = 0; r < t; r++)
          i[r] = arguments[r];
        return Ci(Ai, e, hVe).call(e, ...i);
      }), this.addHook("beforeLoadData", (t) => Ci(Ai, this, KW).call(this, t)), this.addHook("beforeUpdateData", (t) => Ci(Ai, this, KW).call(this, t)), this.registerShortcuts(), super.enablePlugin());
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
    disablePlugin() {
      this.hot.rowIndexMapper.unregisterMap("nestedRows"), this.unregisterShortcuts(), super.disablePlugin();
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`nestedRows`](@/api/options.md#nestedrows)
     */
    updatePlugin() {
      this.disablePlugin();
      const e = this.dataManager.getData();
      this.enablePlugin(), this.dataManager.updateWithData(e), super.updatePlugin();
    }
    /**
     * Register shortcuts responsible for toggling collapsible columns.
     *
     * @private
     */
    registerShortcuts() {
      this.hot.getShortcutManager().getContext("grid").addShortcut({
        keys: [["Enter"]],
        callback: () => {
          const {
            highlight: e
          } = this.hot.getSelectedRangeLast(), t = this.collapsingUI.translateTrimmedRow(e.row);
          return this.collapsingUI.areChildrenCollapsed(t) ? this.collapsingUI.expandChildren(t) : this.collapsingUI.collapseChildren(t), !1;
        },
        runOnlyIf: () => {
          var e, t;
          const i = (e = this.hot.getSelectedRangeLast()) === null || e === void 0 ? void 0 : e.highlight;
          return i && ((t = this.hot.getSelectedRangeLast()) === null || t === void 0 ? void 0 : t.isSingle()) && this.hot.selection.isCellVisible(i) && i.col === -1 && i.row >= 0;
        },
        group: YW,
        relativeToGroup: hh,
        position: "before"
      });
    }
    /**
     * Unregister shortcuts responsible for toggling collapsible columns.
     *
     * @private
     */
    unregisterShortcuts() {
      this.hot.getShortcutManager().getContext("grid").removeShortcutsByGroup(YW);
    }
    /**
     * Enable the modify hook skipping flag - allows retrieving the data from Handsontable without this plugin's
     * modifications.
     *
     * @private
     */
    disableCoreAPIModifiers() {
      bR(Sg, this, !0);
    }
    /**
     * Disable the modify hook skipping flag.
     *
     * @private
     */
    enableCoreAPIModifiers() {
      bR(Sg, this, !1);
    }
    /**
     * `beforeOnCellMousedown` hook callback.
     *
     * @param {MouseEvent} event Mousedown event.
     * @param {object} coords Cell coords.
     * @param {HTMLElement} TD Clicked cell.
     */
    /**
     * The modifyRowData hook callback.
     *
     * @private
     * @param {number} row Visual row index.
     * @returns {boolean}
     */
    onModifyRowData(e) {
      if (!NS(Sg, this))
        return this.dataManager.getDataObject(e);
    }
    /**
     * Modify the source data length to match the length of the nested structure.
     *
     * @private
     * @returns {number}
     */
    onModifySourceLength() {
      if (!NS(Sg, this))
        return this.dataManager.countAllRows();
    }
    /**
     * @private
     * @param {number} index The index where the data was spliced.
     * @param {number} amount An amount of items to remove.
     * @param {object} element An element to add.
     * @returns {boolean}
     */
    onBeforeDataSplice(e, t, i) {
      return NS(Sg, this) || this.dataManager.isRowHighestLevel(e) ? !0 : (this.dataManager.spliceData(e, t, i), !1);
    }
    /**
     * Provide custom source data filtering. It's handled by core method and replaces the native filtering.
     *
     * @param {number} index The index where the data filtering starts.
     * @param {number} amount An amount of rows which filtering applies to.
     * @param {number} physicalRows Physical row indexes.
     * @returns {Array}
     */
    /**
     * Destroys the plugin instance.
     */
    destroy() {
      super.destroy();
    }
  }
  function hVe(n, e, t, i) {
    return this.rowMoveController.onBeforeRowMove(n, e, t, i);
  }
  function dVe(n, e, t) {
    this.collapsingUI.toggleState(n, e, t);
  }
  function fVe(n, e, t) {
    return this.collapsingUI.collapsedRowsStash.stash(), this.collapsingUI.collapsedRowsStash.trimStash(t[0], e), this.collapsingUI.collapsedRowsStash.shiftStash(t[0], null, -1 * e), this.dataManager.filterData(n, e, t), bR(gE, this, !0), this.dataManager.getData().slice();
  }
  function gVe(n) {
    return this.contextMenuUI.appendOptions(n);
  }
  function pVe(n, e) {
    this.headersUI.appendLevelIndicators(n, e);
  }
  function mVe(n) {
    return Math.max(this.headersUI.rowHeaderWidthCache, n);
  }
  function bVe(n, e, t, i) {
    i !== this.pluginName && this.hot._registerTimeout(() => {
      bR(gE, this, !1), this.headersUI.updateRowHeaderWidth(), this.collapsingUI.collapsedRowsStash.applyStash();
    });
  }
  function vVe(n, e, t) {
    const i = Array.from(t.reduce((r, s) => {
      if (this.dataManager.isParent(s)) {
        const o = this.dataManager.getDataObject(s).__children;
        return r.add(s), Array.isArray(o) && o.forEach((a) => r.add(this.dataManager.getRowIndex(a))), r;
      }
      return r.add(s);
    }, /* @__PURE__ */ new Set()));
    t.length = 0, t.push(...i);
  }
  function wVe() {
    this.collapsingUI.collapsedRowsStash.stash();
  }
  function yVe(n, e) {
    this.collapsingUI.collapsedRowsStash.shiftStash(this.dataManager.getRowIndex(e)), this.collapsingUI.collapsedRowsStash.applyStash(), this.headersUI.updateRowHeaderWidth();
  }
  function CVe() {
    this.collapsingUI.collapsedRowsStash.stash();
  }
  function SVe(n, e, t) {
    this.collapsingUI.collapsedRowsStash.shiftStash(t, null, -1), this.collapsingUI.collapsedRowsStash.applyStash(), this.headersUI.updateRowHeaderWidth();
  }
  function _Ve() {
    this.dataManager.rewriteCache();
  }
  function RVe() {
    this.headersUI.updateRowHeaderWidth();
  }
  function EVe(n, e) {
    NS(gE, this) && (e.skipRender = !0);
  }
  function KW(n) {
    if (!tG(n)) {
      TD(cVe), this.hot.getSettings()[vR] = !1, this.disablePlugin();
      return;
    }
    this.dataManager.setData(n), this.dataManager.rewriteCache();
  }
  function BM(n, e, t) {
    return (e = xVe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function xVe(n) {
    var e = TVe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function TVe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  class MVe {
    // eslint-disable-next-line no-restricted-globals
    constructor(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : window;
      BM(this, "rootWindow", void 0), BM(this, "prefix", void 0), BM(this, "savedKeys", []), this.rootWindow = t, this.prefix = e, this.loadSavedKeys();
    }
    /**
     * Save data to localStorage.
     *
     * @param {string} key Key string.
     * @param {Mixed} value Value to save.
     */
    saveValue(e, t) {
      this.rootWindow.localStorage.setItem(`${this.prefix}_${e}`, JSON.stringify(t)), this.savedKeys.indexOf(e) === -1 && (this.savedKeys.push(e), this.saveSavedKeys());
    }
    /**
     * Load data from localStorage.
     *
     * @param {string} key Key string.
     * @param {object} defaultValue Object containing the loaded data.
     *
     * @returns {object|undefined}
     */
    loadValue(e, t) {
      const i = typeof e > "u" ? t : e, r = this.rootWindow.localStorage.getItem(`${this.prefix}_${i}`);
      return r === null ? void 0 : JSON.parse(r);
    }
    /**
     * Reset given data from localStorage.
     *
     * @param {string} key Key string.
     */
    reset(e) {
      this.rootWindow.localStorage.removeItem(`${this.prefix}_${e}`);
    }
    /**
     * Reset all data from localStorage.
     *
     */
    resetAll() {
      z(this.savedKeys, (e, t) => {
        this.rootWindow.localStorage.removeItem(`${this.prefix}_${this.savedKeys[t]}`);
      }), this.clearSavedKeys();
    }
    /**
     * Load and save all keys from localStorage.
     *
     * @private
     */
    loadSavedKeys() {
      const e = this.rootWindow.localStorage.getItem(`${this.prefix}__persistentStateKeys`), t = typeof e == "string" ? JSON.parse(e) : void 0;
      this.savedKeys = t || [];
    }
    /**
     * Save saved key in localStorage.
     *
     * @private
     */
    saveSavedKeys() {
      this.rootWindow.localStorage.setItem(`${this.prefix}__persistentStateKeys`, JSON.stringify(this.savedKeys));
    }
    /**
     * Clear saved key from localStorage.
     *
     * @private
     */
    clearSavedKeys() {
      this.savedKeys.length = 0, this.saveSavedKeys();
    }
  }
  function AVe(n, e, t) {
    return (e = PVe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function PVe(n) {
    var e = IVe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function IVe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  Ie.getSingleton().register("persistentStateSave");
  Ie.getSingleton().register("persistentStateLoad");
  Ie.getSingleton().register("persistentStateReset");
  const qW = "persistentState", OVe = 0;
  class kVe extends Lt {
    constructor() {
      super(...arguments), AVe(this, "storage", void 0);
    }
    static get PLUGIN_KEY() {
      return qW;
    }
    static get PLUGIN_PRIORITY() {
      return OVe;
    }
    /**
     * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link PersistentState#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return !!this.hot.getSettings()[qW];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
    enablePlugin() {
      this.enabled || (this.storage || (this.storage = new MVe(this.hot.rootElement.id, this.hot.rootWindow)), this.addHook("persistentStateSave", (e, t) => this.saveValue(e, t)), this.addHook("persistentStateLoad", (e, t) => this.loadValue(e, t)), this.addHook("persistentStateReset", () => this.resetValue()), super.enablePlugin());
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
    disablePlugin() {
      this.storage = void 0, super.disablePlugin();
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`persistentState`](@/api/options.md#persistentstate)
     */
    updatePlugin() {
      this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
    }
    /**
     * Loads the value from local storage.
     *
     * @param {string} key Storage key.
     * @param {object} saveTo Saved value from local storage.
     */
    loadValue(e, t) {
      t.value = this.storage.loadValue(e);
    }
    /**
     * Saves the data to local storage.
     *
     * @param {string} key Storage key.
     * @param {Mixed} value Value to save.
     */
    saveValue(e, t) {
      this.storage.saveValue(e, t);
    }
    /**
     * Resets the data or all data from local storage.
     *
     * @param {string} key [optional] Storage key.
     */
    resetValue(e) {
      typeof e > "u" ? this.storage.resetAll() : this.storage.reset(e);
    }
    /**
     * Destroys the plugin instance.
     */
    destroy() {
      super.destroy();
    }
  }
  function DVe(n, e) {
    NVe(n, e), e.add(n);
  }
  function NVe(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function VM(n, e, t) {
    return (e = LVe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function LVe(n) {
    var e = HVe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function HVe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function XW(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  const WM = "search", $Ve = 190, FVe = "htSearchResult", BVe = function(n, e, t, i, r) {
    n.getCellMeta(e, t).isSearchResult = r;
  }, VVe = function(n, e, t) {
    return dn(n) || n === null || !n.toLocaleLowerCase || n.length === 0 || dn(e) || e === null ? !1 : e.toString().toLocaleLowerCase(t.locale).indexOf(n.toLocaleLowerCase(t.locale)) !== -1;
  };
  var jM = /* @__PURE__ */ new WeakSet();
  class WVe extends Lt {
    constructor() {
      super(...arguments), DVe(this, jM), VM(this, "callback", BVe), VM(this, "queryMethod", VVe), VM(this, "searchResultClass", FVe);
    }
    static get PLUGIN_KEY() {
      return WM;
    }
    static get PLUGIN_PRIORITY() {
      return $Ve;
    }
    /**
     * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link AutoRowSize#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return this.hot.getSettings()[WM];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
    enablePlugin() {
      var e = this;
      if (this.enabled)
        return;
      const t = this.hot.getSettings()[WM];
      this.updatePluginSettings(t), this.addHook("beforeRenderer", function() {
        for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
          r[s] = arguments[s];
        return XW(jM, e, ZW).call(e, ...r);
      }), super.enablePlugin();
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
    disablePlugin() {
      var e = this;
      const t = function() {
        for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
          r[s] = arguments[s];
        return XW(jM, e, ZW).call(e, ...r);
      };
      this.hot.addHook("beforeRenderer", t), this.hot.addHookOnce("afterViewRender", () => {
        this.hot.removeHook("beforeRenderer", t);
      }), super.disablePlugin();
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`search`](@/api/options.md#search)
     */
    updatePlugin() {
      this.disablePlugin(), this.enablePlugin(), super.updatePlugin();
    }
    /**
     * Makes the query.
     *
     * @param {string} queryStr Value to be search.
     * @param {Function} [callback] Callback function performed on cells with values which matches to the searched query.
     * @param {Function} [queryMethod] Query function responsible for determining whether a query matches the value stored in a cell.
     * @returns {object[]} Return an array of objects with `row`, `col`, `data` properties or empty array.
     */
    query(e) {
      let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.getCallback(), i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.getQueryMethod();
      const r = this.hot.countRows(), s = this.hot.countCols(), o = [], a = this.hot;
      return $e(0, r - 1, (l) => {
        $e(0, s - 1, (c) => {
          const u = this.hot.getDataAtCell(l, c), h = this.hot.getCellMeta(l, c), d = h.search.callback || t, g = (h.search.queryMethod || i)(e, u, h);
          if (g) {
            const p = {
              row: l,
              col: c,
              data: u
            };
            o.push(p);
          }
          d && d(a, l, c, u, g);
        });
      }), o;
    }
    /**
     * Gets the callback function.
     *
     * @returns {Function} Return the callback function.
     */
    getCallback() {
      return this.callback;
    }
    /**
     * Sets the callback function. This function will be called during querying for each cell.
     *
     * @param {Function} newCallback A callback function.
     */
    setCallback(e) {
      this.callback = e;
    }
    /**
     * Gets the query method function.
     *
     * @returns {Function} Return the query method.
     */
    getQueryMethod() {
      return this.queryMethod;
    }
    /**
     * Sets the query method function. The function is responsible for determining whether a query matches the value stored in a cell.
     *
     * @param {Function} newQueryMethod A function with specific match logic.
     */
    setQueryMethod(e) {
      this.queryMethod = e;
    }
    /**
     * Gets search result cells class name.
     *
     * @returns {string} Return the cell class name.
     */
    getSearchResultClass() {
      return this.searchResultClass;
    }
    /**
     * Sets search result cells class name. This class name will be added to each cell that belongs to the searched query.
     *
     * @param {string} newElementClass CSS class name.
     */
    setSearchResultClass(e) {
      this.searchResultClass = e;
    }
    /**
     * Updates the settings of the plugin.
     *
     * @param {object} searchSettings The plugin settings, taken from Handsontable configuration.
     * @private
     */
    updatePluginSettings(e) {
      at(e) && (e.searchResultClass && this.setSearchResultClass(e.searchResultClass), e.queryMethod && this.setQueryMethod(e.queryMethod), e.callback && this.setCallback(e.callback));
    }
    /**
     * Destroys the plugin instance.
     */
    destroy() {
      super.destroy();
    }
  }
  function ZW(n, e, t, i, r, s) {
    const o = s.className || [];
    let a = [];
    typeof o == "string" ? a = o.split(" ") : a.push(...o), this.isEnabled() && s.isSearchResult ? a.includes(this.searchResultClass) || a.push(`${this.searchResultClass}`) : a.includes(this.searchResultClass) && a.splice(a.indexOf(this.searchResultClass), 1), s.className = a.join(" ");
  }
  function jVe(n, e) {
    zVe(n, e), e.add(n);
  }
  function zVe(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function $C(n, e, t) {
    return (e = UVe(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function UVe(n) {
    var e = GVe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function GVe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function zM(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  const YVe = "touchScroll", KVe = 200;
  var FC = /* @__PURE__ */ new WeakSet();
  class qVe extends Lt {
    constructor() {
      super(...arguments), jVe(this, FC), $C(this, "scrollbars", []), $C(this, "clones", []), $C(this, "lockedCollection", !1), $C(this, "freezeOverlays", !1);
    }
    static get PLUGIN_KEY() {
      return YVe;
    }
    static get PLUGIN_PRIORITY() {
      return KVe;
    }
    static get SETTING_KEYS() {
      return !0;
    }
    /**
     * Check if plugin is enabled.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return yD();
    }
    /**
     * Enable the plugin.
     */
    enablePlugin() {
      this.enabled || (this.addHook("afterViewRender", () => zM(FC, this, XVe).call(this)), this.registerEvents(), super.enablePlugin());
    }
    /**
     * Updates the plugin to use the latest options you have specified.
     */
    updatePlugin() {
      this.lockedCollection = !1, super.updatePlugin();
    }
    /**
     * Disable plugin for this Handsontable instance.
     */
    disablePlugin() {
      super.disablePlugin();
    }
    /**
     * Register all necessary events.
     *
     * @private
     */
    registerEvents() {
      this.addHook("beforeTouchScroll", () => zM(FC, this, ZVe).call(this)), this.addHook("afterMomentumScroll", () => zM(FC, this, QVe).call(this));
    }
  }
  function XVe() {
    if (this.lockedCollection)
      return;
    const {
      topOverlay: n,
      bottomOverlay: e,
      inlineStartOverlay: t,
      topInlineStartCornerOverlay: i,
      bottomInlineStartCornerOverlay: r
    } = this.hot.view._wt.wtOverlays;
    this.lockedCollection = !0, this.scrollbars.length = 0, this.scrollbars.push(n), e.clone && this.scrollbars.push(e), this.scrollbars.push(t), i && this.scrollbars.push(i), r && r.clone && this.scrollbars.push(r), this.clones = [], n.needFullRender && this.clones.push(n.clone.wtTable.holder.parentNode), e.needFullRender && this.clones.push(e.clone.wtTable.holder.parentNode), t.needFullRender && this.clones.push(t.clone.wtTable.holder.parentNode), i && this.clones.push(i.clone.wtTable.holder.parentNode), r && r.clone && this.clones.push(r.clone.wtTable.holder.parentNode);
  }
  function ZVe() {
    this.freezeOverlays = !0, z(this.clones, (n) => {
      ue(n, "hide-tween");
    });
  }
  function QVe() {
    this.freezeOverlays = !1, z(this.clones, (n) => {
      Ze(n, "hide-tween"), ue(n, "show-tween");
    }), this.hot._registerTimeout(() => {
      z(this.clones, (n) => {
        Ze(n, "show-tween");
      });
    }, 400), z(this.scrollbars, (n) => {
      n.refresh(), n.resetFixedPosition();
    }), this.hot.view._wt.wtOverlays.syncScrollWithMaster();
  }
  function JVe(n, e) {
    e3e(n, e), e.add(n);
  }
  function e3e(n, e) {
    if (e.has(n)) throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
  function t3e(n, e, t) {
    return (e = n3e(e)) in n ? Object.defineProperty(n, e, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : n[e] = t, n;
  }
  function n3e(n) {
    var e = i3e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function i3e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function r3e(n, e, t) {
    if (typeof n == "function" ? n === e : n.has(e)) return arguments.length < 3 ? e : t;
    throw new TypeError("Private element is not present on this object");
  }
  const LS = "trimRows", s3e = 330;
  var QW = /* @__PURE__ */ new WeakSet();
  class o3e extends Lt {
    constructor() {
      super(...arguments), JVe(this, QW), t3e(this, "trimmedRowsMap", null);
    }
    static get PLUGIN_KEY() {
      return LS;
    }
    static get PLUGIN_PRIORITY() {
      return s3e;
    }
    /**
     * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link AutoRowSize#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
    isEnabled() {
      return !!this.hot.getSettings()[LS];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
    enablePlugin() {
      this.enabled || (this.trimmedRowsMap = this.hot.rowIndexMapper.registerMap("trimRows", new py()), this.trimmedRowsMap.addLocalHook("init", () => r3e(QW, this, a3e).call(this)), super.enablePlugin());
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`trimRows`](@/api/options.md#trimrows)
     */
    updatePlugin() {
      const e = this.hot.getSettings()[LS];
      Array.isArray(e) && this.hot.batchExecution(() => {
        this.trimmedRowsMap.clear(), z(e, (t) => {
          this.trimmedRowsMap.setValueAtIndex(t, !0);
        });
      }, !0), super.updatePlugin();
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
    disablePlugin() {
      this.hot.rowIndexMapper.unregisterMap("trimRows"), super.disablePlugin();
    }
    /**
     * Get list of trimmed rows.
     *
     * @returns {Array} Physical rows.
     */
    getTrimmedRows() {
      return this.trimmedRowsMap.getTrimmedIndexes();
    }
    /**
     * Trims the rows provided in the array.
     *
     * @param {number[]} rows Array of physical row indexes.
     * @fires Hooks#beforeTrimRow
     * @fires Hooks#afterTrimRow
     */
    trimRows(e) {
      const t = this.getTrimmedRows(), i = this.isValidConfig(e);
      let r = t;
      i && (r = Array.from(new Set(t.concat(e)))), this.hot.runHooks("beforeTrimRow", t, r, i) !== !1 && (i && this.hot.batchExecution(() => {
        z(e, (o) => {
          this.trimmedRowsMap.setValueAtIndex(o, !0);
        });
      }, !0), this.hot.runHooks("afterTrimRow", t, r, i, i && r.length > t.length));
    }
    /**
     * Trims the row provided as a physical row index (counting from 0).
     *
     * @param {...number} row Physical row index.
     */
    trimRow() {
      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++)
        t[i] = arguments[i];
      this.trimRows(t);
    }
    /**
     * Untrims the rows provided in the array.
     *
     * @param {number[]} rows Array of physical row indexes.
     * @fires Hooks#beforeUntrimRow
     * @fires Hooks#afterUntrimRow
     */
    untrimRows(e) {
      const t = this.getTrimmedRows(), i = this.isValidConfig(e);
      let r = t;
      const s = this.trimmedRowsMap.getValues().slice(), o = e.length > 0;
      i && o && (z(e, (l) => {
        s[l] = !1;
      }), r = li(s, (l, c, u) => (c && l.push(u), l), [])), this.hot.runHooks("beforeUntrimRow", t, r, i && o) !== !1 && (i && o && this.trimmedRowsMap.setValues(s), this.hot.runHooks("afterUntrimRow", t, r, i && o, i && r.length < t.length));
    }
    /**
     * Untrims the row provided as a physical row index (counting from 0).
     *
     * @param {...number} row Physical row index.
     */
    untrimRow() {
      for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++)
        t[i] = arguments[i];
      this.untrimRows(t);
    }
    /**
     * Checks if given row is hidden.
     *
     * @param {number} physicalRow Physical row index.
     * @returns {boolean}
     */
    isTrimmed(e) {
      return this.trimmedRowsMap.getValueAtIndex(e) || !1;
    }
    /**
     * Untrims all trimmed rows.
     */
    untrimAll() {
      this.untrimRows(this.getTrimmedRows());
    }
    /**
     * Get if trim config is valid. Check whether all of the provided physical row indexes are within source data.
     *
     * @param {Array} trimmedRows List of physical row indexes.
     * @returns {boolean}
     */
    isValidConfig(e) {
      const t = this.hot.countSourceRows();
      return e.every((i) => Number.isInteger(i) && i >= 0 && i < t);
    }
    /**
     * Destroys the plugin instance.
     */
    destroy() {
      super.destroy();
    }
  }
  function a3e() {
    const n = this.hot.getSettings()[LS];
    Array.isArray(n) && this.hot.batchExecution(() => {
      z(n, (e) => {
        this.trimmedRowsMap.setValueAtIndex(e, !0);
      });
    }, !0);
  }
  var OK = {}, l3e = lh, c3e = OK, u3e = l3e("iterator"), h3e = Array.prototype, d3e = function(n) {
    return n !== void 0 && (c3e.Array === n || h3e[u3e] === n);
  }, f3e = fU, JW = p1, g3e = u1, p3e = OK, m3e = lh, b3e = m3e("iterator"), kK = function(n) {
    if (!g3e(n)) return JW(n, b3e) || JW(n, "@@iterator") || p3e[f3e(n)];
  }, v3e = la, w3e = qw, y3e = Hc, C3e = g1, S3e = kK, _3e = TypeError, R3e = function(n, e) {
    var t = arguments.length < 2 ? S3e(n) : e;
    if (w3e(t)) return y3e(v3e(t, n));
    throw new _3e(C3e(n) + " is not iterable");
  }, E3e = AU, x3e = la, T3e = Hc, M3e = g1, A3e = d3e, P3e = Jw, ej = d1, I3e = R3e, O3e = kK, tj = kk, k3e = TypeError, HS = function(n, e) {
    this.stopped = n, this.result = e;
  }, nj = HS.prototype, D3e = function(n, e, t) {
    var i = t && t.that, r = !!(t && t.AS_ENTRIES), s = !!(t && t.IS_RECORD), o = !!(t && t.IS_ITERATOR), a = !!(t && t.INTERRUPTED), l = E3e(e, i), c, u, h, d, f, g, p, m = function(y) {
      return c && tj(c, "normal", y), new HS(!0, y);
    }, v = function(y) {
      return r ? (T3e(y), a ? l(y[0], y[1], m) : l(y[0], y[1])) : a ? l(y, m) : l(y);
    };
    if (s)
      c = n.iterator;
    else if (o)
      c = n;
    else {
      if (u = O3e(n), !u) throw new k3e(M3e(n) + " is not iterable");
      if (A3e(u)) {
        for (h = 0, d = P3e(n); d > h; h++)
          if (f = v(n[h]), f && ej(nj, f)) return f;
        return new HS(!1);
      }
      c = I3e(n, u);
    }
    for (g = s ? n.next : c.next; !(p = x3e(g, c)).done; ) {
      try {
        f = v(p.value);
      } catch (y) {
        tj(c, "throw", y);
      }
      if (typeof f == "object" && f && ej(nj, f)) return f;
    }
    return new HS(!1);
  }, N3e = aa, L3e = ch, H3e = c1, $3e = function(n, e, t) {
    N3e ? L3e.f(n, e, H3e(0, t)) : n[e] = t;
  }, F3e = Yi, B3e = D3e, V3e = $3e;
  F3e({
    target: "Object",
    stat: !0
  }, {
    fromEntries: function(e) {
      var t = {};
      return B3e(e, function(i, r) {
        V3e(t, i, r);
      }, {
        AS_ENTRIES: !0
      }), t;
    }
  });
  const DK = "undoRedo", W3e = "undoRedo";
  function Se(n) {
    const e = this;
    this.instance = n, this.doneActions = [], this.undoneActions = [], this.ignoreNewActions = !1, this.enabled = !1, n.addHook("afterChange", function(i, r) {
      const s = i && i.length;
      if (!s || !i.find((l) => {
        const [, , c, u] = l;
        return c !== u;
      }))
        return;
      const a = () => {
        const l = i.reduce((u, h) => (u.push([...h]), u), []);
        z(l, (u) => {
          u[1] = n.propToCol(u[1]);
        });
        const c = s > 1 ? this.getSelected() : [[l[0][0], l[0][1]]];
        return new Se.ChangeAction(l, c);
      };
      e.done(a, r);
    }), n.addHook("afterCreateRow", (i, r, s) => {
      e.done(() => new Se.CreateRowAction(i, r), s);
    });
    const t = (i, r, s, o) => {
      const a = ["visualRow", "visualCol", "row", "col", "prop"], l = a.length, c = [];
      return $e(s, o, (u) => {
        $e(i, r, (h) => {
          const d = n.getCellMeta(h, u);
          if (Object.keys(d).length !== l) {
            const f = Object.fromEntries(Object.entries(d).filter((g) => {
              let [p] = g;
              return a.includes(p) === !1;
            }));
            c.push([d.visualRow, d.visualCol, f]);
          }
        });
      }), c;
    };
    n.addHook("beforeRemoveRow", (i, r, s, o) => {
      const a = () => {
        const l = n.toPhysicalRow(i), c = l + r - 1, u = mr(e.instance.getSourceData(l, 0, l + r - 1, e.instance.countSourceCols() - 1));
        return new Se.RemoveRowAction(l, u, n.getSettings().fixedRowsBottom, n.getSettings().fixedRowsTop, n.rowIndexMapper.getIndexesSequence(), t(l, c, 0, n.countCols() - 1));
      };
      e.done(a, o);
    }), n.addHook("afterCreateCol", (i, r, s) => {
      e.done(() => new Se.CreateColumnAction(i, r), s);
    }), n.addHook("beforeRemoveCol", (i, r, s, o) => {
      const a = () => {
        const l = e.instance.getSourceDataArray(), c = (e.instance.countCols() + i) % e.instance.countCols(), u = c + r - 1, h = [], d = [], f = [];
        $e(l.length - 1, (m) => {
          const v = [], y = l[m];
          $e(c, u, (w) => {
            v.push(y[n.toPhysicalColumn(w)]);
          }), h.push(v);
        }), $e(r - 1, (m) => {
          f.push(n.toPhysicalColumn(c + m));
        }), Array.isArray(n.getSettings().colHeaders) && $e(r - 1, (m) => {
          d.push(n.getSettings().colHeaders[n.toPhysicalColumn(c + m)] || null);
        });
        const g = n.columnIndexMapper.getIndexesSequence(), p = n.rowIndexMapper.getIndexesSequence();
        return new Se.RemoveColumnAction(c, f, h, d, g, p, n.getSettings().fixedColumnsStart, t(0, n.countRows(), c, u));
      };
      e.done(a, o);
    }), n.addHook("beforeCellAlignment", (i, r, s, o) => {
      e.done(() => new Se.CellAlignmentAction(i, r, s, o));
    }), n.addHook("beforeFilter", (i, r) => {
      e.done(() => new Se.FiltersAction(i, r));
    }), n.addHook("beforeRowMove", (i, r) => {
      i !== !1 && e.done(() => new Se.RowMoveAction(i, r));
    }), n.addHook("beforeColumnMove", (i, r) => {
      i !== !1 && e.done(() => new Se.ColumnMoveAction(i, r));
    }), n.addHook("beforeMergeCells", (i, r) => {
      r || e.done(() => new Se.MergeCellsAction(n, i));
    }), n.addHook("afterUnmergeCells", (i, r) => {
      r || e.done(() => new Se.UnmergeCellsAction(n, i));
    }), n.addHook("beforeColumnSort", (i, r, s) => {
      s && e.done(() => new Se.ColumnSortAction(i, r));
    }), n.addHook("afterInit", () => {
      e.init();
    });
  }
  Se.prototype.done = function(n, e) {
    if (this.ignoreNewActions || e === "UndoRedo.undo" || e === "UndoRedo.redo" || e === "auto")
      return;
    const i = this.doneActions.slice();
    if (this.instance.runHooks("beforeUndoStackChange", i, e) === !1)
      return;
    const s = n(), o = this.undoneActions.slice();
    this.doneActions.push(s), this.instance.runHooks("afterUndoStackChange", i, this.doneActions.slice()), this.instance.runHooks("beforeRedoStackChange", o), this.undoneActions.length = 0, this.instance.runHooks("afterRedoStackChange", o, this.undoneActions.slice());
  };
  Se.prototype.undo = function() {
    if (this.isUndoAvailable()) {
      const n = this.doneActions.slice();
      this.instance.runHooks("beforeUndoStackChange", n);
      const e = this.doneActions.pop();
      this.instance.runHooks("afterUndoStackChange", n, this.doneActions.slice());
      const t = mr(e);
      if (this.instance.runHooks("beforeUndo", t) === !1)
        return;
      this.ignoreNewActions = !0;
      const r = this, s = this.undoneActions.slice();
      this.instance.runHooks("beforeRedoStackChange", s), e.undo(this.instance, () => {
        r.ignoreNewActions = !1, r.undoneActions.push(e);
      }), this.instance.runHooks("afterRedoStackChange", s, this.undoneActions.slice()), this.instance.runHooks("afterUndo", t);
    }
  };
  Se.prototype.redo = function() {
    if (this.isRedoAvailable()) {
      const n = this.undoneActions.slice();
      this.instance.runHooks("beforeRedoStackChange", n);
      const e = this.undoneActions.pop();
      this.instance.runHooks("afterRedoStackChange", n, this.undoneActions.slice());
      const t = mr(e);
      if (this.instance.runHooks("beforeRedo", t) === !1)
        return;
      this.ignoreNewActions = !0;
      const r = this, s = this.doneActions.slice();
      this.instance.runHooks("beforeUndoStackChange", s), e.redo(this.instance, () => {
        r.ignoreNewActions = !1, r.doneActions.push(e);
      }), this.instance.runHooks("afterUndoStackChange", s, this.doneActions.slice()), this.instance.runHooks("afterRedo", t);
    }
  };
  Se.prototype.isUndoAvailable = function() {
    return this.doneActions.length > 0;
  };
  Se.prototype.isRedoAvailable = function() {
    return this.undoneActions.length > 0;
  };
  Se.prototype.clear = function() {
    this.doneActions.length = 0, this.undoneActions.length = 0;
  };
  Se.prototype.isEnabled = function() {
    return this.enabled;
  };
  Se.prototype.enable = function() {
    if (this.isEnabled())
      return;
    const n = this.instance;
    this.enabled = !0, U3e(n), this.registerShortcuts(), n.addHook("afterChange", NK);
  };
  Se.prototype.disable = function() {
    if (!this.isEnabled())
      return;
    const n = this.instance;
    this.enabled = !1, G3e(n), this.unregisterShortcuts(), n.removeHook("afterChange", NK);
  };
  Se.prototype.destroy = function() {
    this.clear(), this.instance = null, this.doneActions = null, this.undoneActions = null;
  };
  Se.Action = function() {
  };
  Se.Action.prototype.undo = function() {
  };
  Se.Action.prototype.redo = function() {
  };
  Se.ChangeAction = function(n, e) {
    this.changes = n, this.selected = e, this.actionType = "change";
  };
  ua(Se.ChangeAction, Se.Action);
  Se.ChangeAction.prototype.undo = function(n, e) {
    const t = mr(this.changes), i = n.countEmptyRows(!0), r = n.countEmptyCols(!0);
    for (let o = 0, a = t.length; o < a; o++)
      t[o].splice(3, 1);
    n.addHookOnce("afterChange", e), n.setDataAtCell(t, null, null, "UndoRedo.undo");
    for (let o = 0, a = t.length; o < a; o++) {
      const [l, c] = t[o];
      n.getSettings().minSpareRows && l + 1 + n.getSettings().minSpareRows === n.countRows() && i === n.getSettings().minSpareRows && (n.alter("remove_row", parseInt(l + 1, 10), n.getSettings().minSpareRows), n.undoRedo.doneActions.pop()), n.getSettings().minSpareCols && c + 1 + n.getSettings().minSpareCols === n.countCols() && r === n.getSettings().minSpareCols && (n.alter("remove_col", parseInt(c + 1, 10), n.getSettings().minSpareCols), n.undoRedo.doneActions.pop());
    }
    const s = n.getSelectedLast();
    if (s !== void 0) {
      const [o, a] = t[0], [l, c] = s, u = n.view.getFirstFullyVisibleRow(), h = n.view.getFirstFullyVisibleColumn(), d = o >= u, f = a >= h;
      if ((d && f) === !1 && (l !== o || c !== a) === !0) {
        const m = {
          row: o,
          col: a
        };
        d === !1 && (m.verticalSnap = "top"), f === !1 && (m.horizontalSnap = "start"), n.scrollViewportTo(m);
      }
    }
    n.selectCells(this.selected, !1, !1);
  };
  Se.ChangeAction.prototype.redo = function(n, e) {
    const t = mr(this.changes);
    for (let i = 0, r = t.length; i < r; i++)
      t[i].splice(2, 1);
    n.addHookOnce("afterChange", e), n.setDataAtCell(t, null, null, "UndoRedo.redo"), this.selected && n.selectCells(this.selected, !1, !1);
  };
  Se.CreateRowAction = function(n, e) {
    this.index = n, this.amount = e, this.actionType = "insert_row";
  };
  ua(Se.CreateRowAction, Se.Action);
  Se.CreateRowAction.prototype.undo = function(n, e) {
    const t = n.countRows(), i = n.getSettings().minSpareRows;
    this.index >= t && this.index - i < t && (this.index -= i), n.addHookOnce("afterRemoveRow", e), n.alter("remove_row", this.index, this.amount, "UndoRedo.undo");
  };
  Se.CreateRowAction.prototype.redo = function(n, e) {
    n.addHookOnce("afterCreateRow", e), n.alter("insert_row_above", this.index, this.amount, "UndoRedo.redo");
  };
  Se.RemoveRowAction = function(n, e, t, i, r, s) {
    this.index = n, this.data = e, this.actionType = "remove_row", this.fixedRowsBottom = t, this.fixedRowsTop = i, this.rowIndexesSequence = r, this.removedCellMetas = s;
  };
  ua(Se.RemoveRowAction, Se.Action);
  Se.RemoveRowAction.prototype.undo = function(n, e) {
    const t = n.getSettings(), i = [];
    t.fixedRowsBottom = this.fixedRowsBottom, t.fixedRowsTop = this.fixedRowsTop, this.data.forEach((r, s) => {
      Object.keys(r).forEach((o) => {
        const a = parseInt(o, 10);
        i.push([this.index + s, isNaN(a) ? o : a, r[o]]);
      });
    }), n.alter("insert_row_above", this.index, this.data.length, "UndoRedo.undo"), this.removedCellMetas.forEach((r) => {
      let [s, o, a] = r;
      n.setCellMetaObject(s, o, a);
    }), n.addHookOnce("afterViewRender", e), n.setSourceDataAtCell(i, null, null, "UndoRedo.undo"), n.rowIndexMapper.setIndexesSequence(this.rowIndexesSequence);
  };
  Se.RemoveRowAction.prototype.redo = function(n, e) {
    n.addHookOnce("afterRemoveRow", e), n.alter("remove_row", this.index, this.data.length, "UndoRedo.redo");
  };
  Se.CreateColumnAction = function(n, e) {
    this.index = n, this.amount = e, this.actionType = "insert_col";
  };
  ua(Se.CreateColumnAction, Se.Action);
  Se.CreateColumnAction.prototype.undo = function(n, e) {
    n.addHookOnce("afterRemoveCol", e), n.alter("remove_col", this.index, this.amount, "UndoRedo.undo");
  };
  Se.CreateColumnAction.prototype.redo = function(n, e) {
    n.addHookOnce("afterCreateCol", e), n.alter("insert_col_start", this.index, this.amount, "UndoRedo.redo");
  };
  Se.RemoveColumnAction = function(n, e, t, i, r, s, o, a) {
    this.index = n, this.indexes = e, this.data = t, this.amount = this.data[0].length, this.headers = i, this.columnPositions = r.slice(0), this.rowPositions = s.slice(0), this.actionType = "remove_col", this.fixedColumnsStart = o, this.removedCellMetas = a;
  };
  ua(Se.RemoveColumnAction, Se.Action);
  Se.RemoveColumnAction.prototype.undo = function(n, e) {
    const t = n.getSettings();
    t.fixedColumnsStart = this.fixedColumnsStart;
    const i = this.indexes.slice(0).sort(), r = (c, u, h) => h[this.indexes.indexOf(i[u])], s = this.data.length, o = [];
    for (let c = 0; c < s; c++)
      o.push(mt(this.data[c], r));
    const a = mt(this.headers, r), l = [];
    n.alter("insert_col_start", this.indexes[0], this.indexes.length, "UndoRedo.undo"), z(n.getSourceDataArray(), (c, u) => {
      z(i, (h, d) => {
        c[h] = o[u][d], l.push([u, h, c[h]]);
      });
    }), n.setSourceDataAtCell(l, void 0, void 0, "UndoRedo.undo"), typeof this.headers < "u" && z(a, (c, u) => {
      n.getSettings().colHeaders[i[u]] = c;
    }), this.removedCellMetas.forEach((c) => {
      let [u, h, d] = c;
      n.setCellMetaObject(u, h, d);
    }), n.batchExecution(() => {
      n.rowIndexMapper.setIndexesSequence(this.rowPositions), n.columnIndexMapper.setIndexesSequence(this.columnPositions);
    }, !0), n.addHookOnce("afterViewRender", e), n.render();
  };
  Se.RemoveColumnAction.prototype.redo = function(n, e) {
    n.addHookOnce("afterRemoveCol", e), n.alter("remove_col", this.index, this.amount, "UndoRedo.redo");
  };
  Se.CellAlignmentAction = function(n, e, t, i) {
    this.stateBefore = n, this.range = e, this.type = t, this.alignment = i;
  };
  Se.CellAlignmentAction.prototype.undo = function(n, e) {
    z(this.range, (t) => {
      t.forAll((i, r) => {
        i >= 0 && r >= 0 && n.setCellMeta(i, r, "className", this.stateBefore[i][r] || " htLeft");
      });
    }), n.addHookOnce("afterViewRender", e), n.render();
  };
  Se.CellAlignmentAction.prototype.redo = function(n, e) {
    cu(this.range, this.type, this.alignment, (t, i) => n.getCellMeta(t, i), (t, i, r, s) => n.setCellMeta(t, i, r, s)), n.addHookOnce("afterViewRender", e), n.render();
  };
  Se.FiltersAction = function(n, e) {
    this.previousConditionsStack = e, this.conditionsStack = n, this.actionType = "filter";
  };
  ua(Se.FiltersAction, Se.Action);
  Se.FiltersAction.prototype.undo = function(n, e) {
    const t = n.getPlugin("filters");
    n.addHookOnce("afterViewRender", e), this.previousConditionsStack && t.conditionCollection.importAllConditions(this.previousConditionsStack), t.filter();
  };
  Se.FiltersAction.prototype.redo = function(n, e) {
    const t = n.getPlugin("filters");
    n.addHookOnce("afterViewRender", e), t.conditionCollection.importAllConditions(this.conditionsStack), t.filter();
  };
  class j3e extends Se.Action {
    constructor(e, t) {
      super(), this.cellRange = t;
      const i = this.cellRange.getTopStartCorner(), r = this.cellRange.getBottomEndCorner();
      this.rangeData = e.getData(i.row, i.col, r.row, r.col);
    }
    undo(e, t) {
      const i = e.getPlugin("mergeCells");
      e.addHookOnce("afterViewRender", t), i.unmergeRange(this.cellRange, !0);
      const r = this.cellRange.getTopStartCorner();
      e.populateFromArray(r.row, r.col, this.rangeData, void 0, void 0, "MergeCells");
    }
    redo(e, t) {
      const i = e.getPlugin("mergeCells");
      e.addHookOnce("afterViewRender", t), i.mergeRange(this.cellRange);
    }
  }
  Se.MergeCellsAction = j3e;
  class z3e extends Se.Action {
    constructor(e, t) {
      super(), this.cellRange = t;
    }
    undo(e, t) {
      const i = e.getPlugin("mergeCells");
      e.addHookOnce("afterViewRender", t), i.mergeRange(this.cellRange, !0);
    }
    redo(e, t) {
      const i = e.getPlugin("mergeCells");
      e.addHookOnce("afterViewRender", t), i.unmergeRange(this.cellRange, !0), e.render();
    }
  }
  Se.UnmergeCellsAction = z3e;
  Se.RowMoveAction = function(n, e) {
    this.rows = n.slice(), this.finalRowIndex = e, this.actionType = "row_move";
  };
  ua(Se.RowMoveAction, Se.Action);
  Se.RowMoveAction.prototype.undo = function(n, e) {
    const t = n.getPlugin("manualRowMove");
    n.addHookOnce("afterViewRender", e), tH(this.rows, this.finalRowIndex, n.rowIndexMapper.getNumberOfIndexes()).reverse().forEach((r) => {
      let {
        from: s,
        to: o
      } = r;
      s < o && (o -= 1), t.moveRow(o, s);
    }), n.render(), n.deselectCell(), n.selectRows(this.rows[0], this.rows[0] + this.rows.length - 1);
  };
  Se.RowMoveAction.prototype.redo = function(n, e) {
    const t = n.getPlugin("manualRowMove");
    n.addHookOnce("afterViewRender", e), t.moveRows(this.rows.slice(), this.finalRowIndex), n.render(), n.deselectCell(), n.selectRows(this.finalRowIndex, this.finalRowIndex + this.rows.length - 1);
  };
  Se.ColumnMoveAction = function(n, e) {
    this.columns = n.slice(), this.finalColumnIndex = e, this.actionType = "col_move";
  };
  ua(Se.ColumnMoveAction, Se.Action);
  Se.ColumnMoveAction.prototype.undo = function(n, e) {
    const t = n.getPlugin("manualColumnMove");
    n.addHookOnce("afterViewRender", e), tH(this.columns, this.finalColumnIndex, n.columnIndexMapper.getNumberOfIndexes()).reverse().forEach((r) => {
      let {
        from: s,
        to: o
      } = r;
      s < o && (o -= 1), t.moveColumn(o, s);
    }), n.render(), n.deselectCell(), n.selectColumns(this.columns[0], this.columns[0] + this.columns.length - 1);
  };
  Se.ColumnMoveAction.prototype.redo = function(n, e) {
    const t = n.getPlugin("manualColumnMove");
    n.addHookOnce("afterViewRender", e), t.moveColumns(this.columns.slice(), this.finalColumnIndex), n.render(), n.deselectCell(), n.selectColumns(this.finalColumnIndex, this.finalColumnIndex + this.columns.length - 1);
  };
  Se.ColumnSortAction = function(n, e) {
    this.previousSortState = n, this.nextSortState = e;
  };
  ua(Se.ColumnSortAction, Se.Action);
  Se.ColumnSortAction.prototype.undo = function(n, e) {
    const t = n.getPlugin("columnSorting"), i = n.getPlugin("multiColumnSorting"), r = i.isEnabled() ? i : t;
    this.previousSortState.length ? r.sort(this.previousSortState) : r.clearSort(), e();
  };
  Se.ColumnSortAction.prototype.redo = function(n, e) {
    const t = n.getPlugin("columnSorting"), i = n.getPlugin("multiColumnSorting");
    (i.isEnabled() ? i : t).sort(this.nextSortState), e();
  };
  Se.prototype.init = function() {
    const n = this.instance.getSettings().undo, e = typeof n > "u" || n;
    this.instance.undoRedo || (this.instance.undoRedo = this), e ? this.instance.undoRedo.enable() : this.instance.undoRedo.disable();
  };
  Se.prototype.registerShortcuts = function() {
    const e = this.instance.getShortcutManager().getContext("grid"), i = {
      runOnlyIf: (r) => !r.altKey,
      group: DK
    };
    e.addShortcuts([{
      keys: [["Control/Meta", "z"]],
      callback: () => {
        this.undo();
      }
    }, {
      keys: [["Control/Meta", "y"], ["Control/Meta", "Shift", "z"]],
      callback: () => {
        this.redo();
      }
    }], i);
  };
  Se.prototype.unregisterShortcuts = function() {
    this.instance.getShortcutManager().getContext("grid").removeShortcutsByGroup(DK);
  };
  function NK(n, e) {
    const t = this;
    if (e === "loadData")
      return t.undoRedo.clear();
  }
  function U3e(n) {
    n.undo = function() {
      return n.undoRedo.undo();
    }, n.redo = function() {
      return n.undoRedo.redo();
    }, n.isUndoAvailable = function() {
      return n.undoRedo.isUndoAvailable();
    }, n.isRedoAvailable = function() {
      return n.undoRedo.isRedoAvailable();
    }, n.clearUndo = function() {
      return n.undoRedo.clear();
    };
  }
  function G3e(n) {
    delete n.undo, delete n.redo, delete n.isUndoAvailable, delete n.isRedoAvailable, delete n.clearUndo;
  }
  const Ry = Ie.getSingleton();
  Ry.add("afterUpdateSettings", function() {
    var n;
    (n = this.getPlugin("undoRedo")) === null || n === void 0 || n.init();
  });
  Ry.register("beforeUndo");
  Ry.register("afterUndo");
  Ry.register("beforeRedo");
  Ry.register("afterRedo");
  Se.PLUGIN_KEY = W3e;
  Se.SETTING_KEYS = !0;
  function Y3e() {
    Mt(_v), Mt(SPe), Mt(Rv), Mt(nIe), Mt(uIe), Mt(sY), Mt(rOe), Mt(jOe), Mt(lE), Mt(lDe), Mt(DDe), Mt(WDe), Mt(hE), Mt(mNe), Mt(gHe), Mt(UHe), Mt(b$e), Mt(M$e), Mt(B$e), Mt(Z$e), Mt(a2e), Mt(E2e), Mt(D2e), Mt(fFe), Mt(YFe), Mt(QFe), Mt(RBe), Mt(uVe), Mt(kVe), Mt(WVe), Mt(qVe), Mt(o3e), Mt(Se);
  }
  function K3e() {
    ZMe(), pAe(), RAe(), zAe(), Y3e();
  }
  function q3e(n) {
    const e = typeof window > "u" ? !1 : window.jQuery;
    e && (e.fn.handsontable = function(t) {
      const i = this.first();
      let r = i.data("handsontable");
      if (typeof t != "string") {
        const c = t || {};
        return r ? r.updateSettings(c) : (r = new n.Core(i[0], c), i.data("handsontable", r), r.init()), i;
      }
      let s;
      if (r)
        if (typeof r[t] < "u") {
          for (var o = arguments.length, a = new Array(o > 1 ? o - 1 : 0), l = 1; l < o; l++)
            a[l - 1] = arguments[l];
          s = r[t].call(r, ...a), t === "destroy" && i.removeData();
        } else
          throw new Error(`Handsontable do not provide action: ${t}`);
      return s;
    });
  }
  var UM, GM, YM, KM, qM;
  K3e();
  q3e(Qe);
  Qe.__GhostTable = BL;
  Qe._getListenersCounter = QCe;
  Qe._getRegisteredMapsCounter = CEe;
  Qe.EventManager = lo;
  const X3e = [s0e, fCe, lEe, bAe, uCe, Y0e, c0e, WSe, cCe, h0e, mCe, VSe], Z3e = [j0e, bCe];
  Qe.helper = {};
  Qe.dom = {};
  z(X3e, (n) => {
    z(Object.getOwnPropertyNames(n), (e) => {
      e.charAt(0) !== "_" && (Qe.helper[e] = n[e]);
    });
  });
  z(Z3e, (n) => {
    z(Object.getOwnPropertyNames(n), (e) => {
      e.charAt(0) !== "_" && (Qe.dom[e] = n[e]);
    });
  });
  Qe.cellTypes = (UM = Qe.cellTypes) !== null && UM !== void 0 ? UM : {};
  z(xxe(), (n) => {
    Qe.cellTypes[n] = SL(n);
  });
  Qe.cellTypes.registerCellType = Ws;
  Qe.cellTypes.getCellType = SL;
  Qe.editors = (GM = Qe.editors) !== null && GM !== void 0 ? GM : {};
  z(GCe(), (n) => {
    Qe.editors[`${pr(n)}Editor`] = I_(n);
  });
  Qe.editors.registerEditor = Gr;
  Qe.editors.getEditor = I_;
  Qe.renderers = (YM = Qe.renderers) !== null && YM !== void 0 ? YM : {};
  z(i_e(), (n) => {
    const e = O_(n);
    n === "base" && (Qe.renderers.cellDecorator = e), Qe.renderers[`${pr(n)}Renderer`] = e;
  });
  Qe.renderers.registerRenderer = ss;
  Qe.renderers.getRenderer = O_;
  Qe.validators = (KM = Qe.validators) !== null && KM !== void 0 ? KM : {};
  z(o_e(), (n) => {
    Qe.validators[`${pr(n)}Validator`] = DD(n);
  });
  Qe.validators.registerValidator = vd;
  Qe.validators.getValidator = DD;
  Qe.plugins = (qM = Qe.plugins) !== null && qM !== void 0 ? qM : {};
  z(kD(), (n) => {
    Qe.plugins[n] = hy(n);
  });
  Qe.plugins[`${pr(Lt.PLUGIN_KEY)}Plugin`] = Lt;
  Qe.plugins.registerPlugin = Mt;
  Qe.plugins.getPlugin = hy;
  var LK;
  let HK, $K, FK, BK, VK, WK, jK;
  function Q3e(n, e, t, i, r, s) {
    var o, a, l, c, u, h, d, f = Symbol.metadata || Symbol.for("Symbol.metadata"), g = Object.defineProperty, p = Object.create, m = [p(null), p(null)], v = e.length;
    function y(C, T, P) {
      return function(x, A) {
        T && (A = x, x = n);
        for (var D = 0; D < C.length; D++) A = C[D].apply(x, P ? [A] : []);
        return P ? A : x;
      };
    }
    function w(C, T, P, x) {
      if (typeof C != "function" && (x || C !== void 0)) throw new TypeError(T + " must " + (P || "be") + " a function" + (x ? "" : " or undefined"));
      return C;
    }
    function R(C, T, P, x, A, D, B, F, W, N, O) {
      function V(ee) {
        if (!O(ee)) throw new TypeError("Attempted to access private element on non-instance");
      }
      var G = [].concat(T[0]), U = T[3], se = !B, b = A === 1, S = A === 3, _ = A === 4, I = A === 2;
      function H(ee, ae, Ne) {
        return function(fe, ye) {
          return ae && (ye = fe, fe = C), Ne && Ne(fe), M[ee].call(fe, ye);
        };
      }
      if (!se) {
        var M = {}, $ = [], Y = S ? "get" : _ || b ? "set" : "value";
        if (W ? (N || b ? M = { get: ij(function() {
          return U(this);
        }, x, "get"), set: function(ee) {
          T[4](this, ee);
        } } : M[Y] = U, N || ij(M[Y], x, I ? "" : Y)) : N || (M = Object.getOwnPropertyDescriptor(C, x)), !N && !W) {
          if ((a = m[+F][x]) && (a ^ A) != 7) throw Error("Decorating two elements with the same name (" + M[Y].name + ") is not supported yet");
          m[+F][x] = A < 3 ? 1 : A;
        }
      }
      for (var K = C, ce = G.length - 1; ce >= 0; ce -= P ? 2 : 1) {
        var le = w(G[ce], "A decorator", "be", !0), _e = P ? G[ce - 1] : void 0, be = {}, Z = { kind: ["field", "accessor", "method", "getter", "setter", "class"][A], name: x, metadata: o, addInitializer: (function(ee, ae) {
          if (ee.v) throw new TypeError("attempted to call addInitializer after decoration was finished");
          w(ae, "An initializer", "be", !0), D.push(ae);
        }).bind(null, be) };
        if (se) a = le.call(_e, K, Z), be.v = 1, w(a, "class decorators", "return") && (K = a);
        else if (Z.static = F, Z.private = W, a = Z.access = { has: W ? O.bind() : function(ee) {
          return x in ee;
        } }, _ || (a.get = W ? I ? function(ee) {
          return V(ee), M.value;
        } : H("get", 0, V) : function(ee) {
          return ee[x];
        }), I || S || (a.set = W ? H("set", 0, V) : function(ee, ae) {
          ee[x] = ae;
        }), K = le.call(_e, b ? { get: M.get, set: M.set } : M[Y], Z), be.v = 1, b) {
          if (typeof K == "object" && K) (a = w(K.get, "accessor.get")) && (M.get = a), (a = w(K.set, "accessor.set")) && (M.set = a), (a = w(K.init, "accessor.init")) && $.unshift(a);
          else if (K !== void 0) throw new TypeError("accessor decorators must return an object with get, set, or init properties or undefined");
        } else w(K, (N ? "field" : "method") + " decorators", "return") && (N ? $.unshift(K) : M[Y] = K);
      }
      return A < 2 && B.push(y($, F, 1), y(D, F, 0)), N || se || (W ? b ? B.splice(-1, 0, H("get", F), H("set", F)) : B.push(I ? M[Y] : w.call.bind(M[Y])) : g(C, x, M)), K;
    }
    function E(C) {
      return g(C, f, { configurable: !0, enumerable: !0, value: o });
    }
    return o = p(o ?? null), u = [], h = function(C) {
      C && u.push(y(C));
    }, d = function(C, T) {
      for (var P = 0; P < t.length; P++) {
        var x = t[P], A = x[1], D = 7 & A;
        if ((8 & A) == C && !D == T) {
          var B = x[2], F = !!x[3], W = 16 & A;
          R(C ? n : n.prototype, x, W, F ? "#" + B : J3e(B), D, D < 2 ? [] : C ? c = c || [] : l = l || [], u, !!C, F, T, C && F ? function(N) {
            return tWe(N) === n;
          } : r);
        }
      }
    }, d(8, 0), d(0, 0), d(8, 1), d(0, 1), h(l), h(c), a = u, v || E(n), { e: a, get c() {
      var C = [];
      return v && [E(n = R(n, [e], i, n.name, 5, C)), y(C, 1)];
    } };
  }
  function J3e(n) {
    var e = eWe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function eWe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function ij(n, e, t) {
    typeof e == "symbol" && (e = (e = e.description) ? "[" + e + "]" : "");
    try {
      Object.defineProperty(n, "name", { configurable: !0, value: t ? t + " " + e : e });
    } catch {
    }
    return n;
  }
  function tWe(n) {
    if (Object(n) !== n) throw TypeError("right-hand side of 'in' should be an object, got " + (n !== null ? typeof n : "null"));
    return n;
  }
  let pE;
  class nWe {
    constructor() {
      this.ea = ge(dO), this.mytable = void 0, this.hot = void 0, this.datachannel = $K(this), this.tabid = (FK(this), BK(this)), this.datatype = (VK(this), WK(this, "all")), this.showtable = (jK(this), !0), this.data = [];
    }
    attached() {
      this.data = [["Gene", "Type", "CEA", "CA19_9", "Tumor Size", "Metabolic Activity", "ctDNA", "CRP", "Bowel MovementPatterns", "Ki-67", "Cascpase-3", "MMP-1", "Cell Proliferation"], ["APC", "Tumor suppressor gene", 0.8, 0.3, 0.9, 0.7, 0.6, 0.2, 0.1, 0.9, -0.6, -0.7, 0.9], ["KRAS", "Kirsten Rat Sarcoma Viral Oncogene Homolog", 0.7, 0.4, 0.8, 0.6, 0.5, 0.3, 0, 0.8, -0.5, 0.2, 0.8], ["TP53", "Tumor Protein 53", 0.6, 0.2, 0.7, 0.5, 0.4, 0.4, 0.1, 0.7, 0.9, -0.4, 0.7], ["MLH1", "Mismatch Repair gene", 0.5, 0.3, 0.6, 0.4, 0.7, 0.5, 0.2, 0.6, 0.7, -0.3, 0.6], ["MSH2", "Mismatch Repair gene", 0.5, 0.3, 0.6, 0.4, 0.7, 0.5, 0.2, 0.6, 0.7, -0.3, 0.6], ["BRAF", "Oncogene MAPK/ERK signaling pathway", 0.4, 0.5, 0.5, 0.8, 0.3, 0.3, 0, 0.5, -0.2, 0.5, 0.5], ["SMAD4", "Tumor suppressor gene", 0.3, 0.2, 0.4, 0.3, 0.2, 0.4, 0.1, 0.4, 0.6, -0.5, 0.4], ["PIK3CA", "Oncogene", 0.6, 0.4, 0.7, 0.6, 0.5, 0.3, 0, 0.7, -0.4, 0.3, 0.7], ["NRAS", "Oncogene", 0.4, 0.3, 0.5, 0.5, 0.4, 0.2, 0.1, 0.5, -0.3, 0.2, 0.5], ["CTNNB1", "Cell adhesion signaling pathway", 0.3, 0.2, 0.4, 0.3, 0.3, 0.1, 0, 0.4, -0.2, -0.1, 0.4], ["FBXW7", "Tumor suppressor gene", 0.2, 0.1, 0.3, 0.2, 0.2, 0.3, 0.1, 0.3, 0.5, -0.4, 0.3]], this.datatype == "nodes" ? this.data = this.getNodesData(this.data) : this.datatype == "edges" && (this.data = this.getEdgesData(this.data));
      let e = this;
      this.hot = new Qe(this.mytable, {
        data: this.data,
        rowHeaders: !0,
        colHeaders: !0,
        autoWrapRow: !0,
        autoWrapCol: !0,
        licenseKey: "non-commercial-and-evaluation",
        // for non-commercial use only
        // Define the afterChange hook
        afterChange: function(t, i) {
          i === "loadData" || !t || t.forEach(([r, s, o, a]) => {
            e.changeContent(r, s, o, a);
          });
        }
      }), this.ea.subscribe("showtab", (t) => {
        this.tabid === t && (console.log("Table refresh dimension for ", t), this.hot.refreshDimensions(), this.hot.render());
      }), this.hot.addHook("beforeKeyDown", (t) => {
        t.keyCode === 45 && !t.shiftKey ? (t.preventDefault(), this.addRow()) : t.keyCode === 45 && t.shiftKey && (t.preventDefault(), this.addColumn());
      });
    }
    changeContent(e, t, i, r) {
      if (this.datatype === "all")
        if (console.log(`Cell at row ${e}, column ${t} changed from "${i}" to "${r}".`), e == 0)
          this.ea.publish(this.datachannel, {
            type: "changeNode",
            old: i,
            value: r
          });
        else if (t == 0)
          this.ea.publish(this.datachannel, {
            type: "changeNode",
            old: i,
            value: r
          });
        else if (t == 1) {
          const s = this.hot.getDataAtCell(e, 0);
          this.ea.publish(this.datachannel, {
            type: "changeType",
            node: s,
            old: i,
            value: r
          });
        } else {
          const s = this.hot.getDataAtCell(e, 0), o = this.hot.getDataAtCell(0, t);
          this.ea.publish(this.datachannel, {
            type: "changeEdge",
            subject: s,
            object: o,
            old: i,
            value: r
          });
        }
      else if (this.datatype === "nodes")
        console.log(`Add node.Cell at row ${e}, column ${t} changed from "${i}" to "${r}".`), (t == 0 || oldvalue) && (console.log("publishing"), this.ea.publish(this.datachannel, {
          type: "changeNode",
          old: i,
          value: r
        }));
      else if (this.datatype === "edges" && (console.log(`Add edge.Cell at row ${e}, column ${t} changed from "${i}" to "${r}".`), t == 1 || oldvalue)) {
        const s = this.hot.getDataAtCell(e, 0), o = this.hot.getDataAtCell(e, t);
        this.ea.publish(this.datachannel, {
          type: "changeEdge",
          subject: s,
          object: o,
          old: i,
          value: r
        });
      }
    }
    submit() {
      let e = this.hot.getData();
      console.log("submit data:", e), this.ea.publish(this.datachannel, e);
    }
    showHide() {
      this.showtable = !this.showtable;
    }
    addRow(e = "Subject name") {
      let t = prompt(e, "");
      if (t) {
        let i = t.split(",");
        const r = this.hot.countRows();
        this.hot.alter("insert_row_below", r), this.hot.setDataAtCell(r, 0, i[0]), this.hot.setDataAtCell(r, 1, i.length > 1 ? i[1] : ""), this.hot.selectCell(r, 0);
      }
    }
    addColumn(e = "Object name") {
      let t = prompt(e, "");
      if (t) {
        const i = this.hot.countCols();
        this.hot.alter("insert_col_end", i), this.hot.setDataAtCell(0, i, t), this.hot.selectCell(0, i);
      }
    }
    switchTo1Table() {
    }
    switchTo2Table() {
    }
    getNodesData(e) {
      let t = [];
      for (let i = 1; i < e.length; i++) {
        let r = [e[i][0], e[i][1]];
        t.push(r);
      }
      for (let i = 2; i < e[0].length; i++) {
        let r = [e[0][i]];
        t.push(r);
      }
      return t;
    }
    getEdgesData(e) {
      let t = [];
      for (let i = 1; i < e.length; i++) for (let r = 2; r < e[i].length; r++) {
        let s = e[i][r], o = [e[i][0], e[0][r], s];
        t.push(o);
      }
      return t;
    }
  }
  LK = nWe;
  ({
    e: [$K, FK, BK, VK, WK, jK],
    c: [pE, HK]
  } = Q3e(LK, [Lc({
    ...vce,
    name: "sv-table"
  })], [[Qr, 0, "datachannel"], [Qr, 0, "tabid"], [Qr, 0, "datatype"]]));
  HK();
  const zK = "chartjs-geo", TI = `<div class="chartjsgeocontainer">
  <div class="w3-bar w3-light-grey w3-small">
    <button class="w3-bar-item w3-button" click.trigger="resetView()">Home</button>
    <button class="w3-bar-item w3-button" click.trigger="toggleAnimation()">Animate</button>
    <div class="w3-dropdown-hover">
      <button class="w3-button">Projection</button>
      <div class="w3-dropdown-content w3-bar-block w3-card-4">
        <button repeat.for="item of projections" click.trigger='switchProjection(item)'
          class="w3-bar-item w3-button w3-ripple">\${item}</button>
      </div>
    </div>
    <div class="w3-dropdown-hover">
      <button class="w3-button">Continent</button>
      <div class="w3-dropdown-content w3-bar-block w3-card-4">
        <button click.trigger='switchToEurope()' class="w3-bar-item w3-button w3-ripple">Europe</button>
        <button click.trigger='switchToAsia()' class="w3-bar-item w3-button w3-ripple">Asia</button>
        <button click.trigger='switchToNAmerica()' class="w3-bar-item w3-button w3-ripple">N.America</button>
        <button click.trigger='switchToSAmerica()' class="w3-bar-item w3-button w3-ripple">S.America</button>
        <button click.trigger='switchToAfrica()' class="w3-bar-item w3-button w3-ripple">Africa</button>
        <button click.trigger='switchToPacific()' class="w3-bar-item w3-button w3-ripple">Australia &amp;
          Oceania</button>
        <button click.trigger='switchToWorld()' class="w3-bar-item w3-button w3-ripple">World</button>
      </div>
    </div>
  </div>
  <canvas ref="geochart" class="chartjsgeo"></canvas>
  <div class="chartjsgeodesc">
    click country for details: <b>\${countryName}</b><br />
    <span>\${projectName} \${projectStatus} \${projectStatusText}</span><br />
    <i>\${projectPublication}</i><br />
    <span repeat.for="url of projecturls"><a href.bind='url' target="_blank" class="truncate">\${url}</a><br /></span>
  </div>
</div>`, UK = [], GK = {};
  let XM;
  function iWe(n) {
    XM || (XM = Li.define({ name: zK, template: TI, dependencies: UK, bindables: GK })), n.register(XM);
  }
  const rWe = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    bindables: GK,
    default: TI,
    dependencies: UK,
    name: zK,
    register: iWe,
    template: TI
  }, Symbol.toStringTag, { value: "Module" }));
  class Zu {
    constructor() {
      this._partials = new Float64Array(32), this._n = 0;
    }
    add(e) {
      const t = this._partials;
      let i = 0;
      for (let r = 0; r < this._n && r < 32; r++) {
        const s = t[r], o = e + s, a = Math.abs(e) < Math.abs(s) ? e - (o - s) : s - (o - e);
        a && (t[i++] = a), e = o;
      }
      return t[i] = e, this._n = i + 1, this;
    }
    valueOf() {
      const e = this._partials;
      let t = this._n, i, r, s, o = 0;
      if (t > 0) {
        for (o = e[--t]; t > 0 && (i = o, r = e[--t], o = i + r, s = r - (o - i), !s); )
          ;
        t > 0 && (s < 0 && e[t - 1] < 0 || s > 0 && e[t - 1] > 0) && (r = s * 2, i = o + r, r == i - o && (o = i));
      }
      return o;
    }
  }
  function* sWe(n) {
    for (const e of n)
      yield* e;
  }
  function YK(n) {
    return Array.from(sWe(n));
  }
  function qg(n, e, t) {
    n = +n, e = +e, t = (r = arguments.length) < 2 ? (e = n, n = 0, 1) : r < 3 ? 1 : +t;
    for (var i = -1, r = Math.max(0, Math.ceil((e - n) / t)) | 0, s = new Array(r); ++i < r; )
      s[i] = n + i * t;
    return s;
  }
  var qe = 1e-6, aH = 1e-12, bt = Math.PI, Qn = bt / 2, rj = bt / 4, Es = bt * 2, Er = 180 / bt, rn = bt / 180, Dt = Math.abs, im = Math.atan, ll = Math.atan2, ot = Math.cos, BC = Math.ceil, KK = Math.exp, wR = Math.log, ZM = Math.pow, nt = Math.sin, to = Math.sign || function(n) {
    return n > 0 ? 1 : n < 0 ? -1 : 0;
  }, Dr = Math.sqrt, lH = Math.tan;
  function qK(n) {
    return n > 1 ? 0 : n < -1 ? bt : Math.acos(n);
  }
  function co(n) {
    return n > 1 ? Qn : n < -1 ? -Qn : Math.asin(n);
  }
  function Ni() {
  }
  function yR(n, e) {
    n && oj.hasOwnProperty(n.type) && oj[n.type](n, e);
  }
  var sj = {
    Feature: function(n, e) {
      yR(n.geometry, e);
    },
    FeatureCollection: function(n, e) {
      for (var t = n.features, i = -1, r = t.length; ++i < r; ) yR(t[i].geometry, e);
    }
  }, oj = {
    Sphere: function(n, e) {
      e.sphere();
    },
    Point: function(n, e) {
      n = n.coordinates, e.point(n[0], n[1], n[2]);
    },
    MultiPoint: function(n, e) {
      for (var t = n.coordinates, i = -1, r = t.length; ++i < r; ) n = t[i], e.point(n[0], n[1], n[2]);
    },
    LineString: function(n, e) {
      MI(n.coordinates, e, 0);
    },
    MultiLineString: function(n, e) {
      for (var t = n.coordinates, i = -1, r = t.length; ++i < r; ) MI(t[i], e, 0);
    },
    Polygon: function(n, e) {
      aj(n.coordinates, e);
    },
    MultiPolygon: function(n, e) {
      for (var t = n.coordinates, i = -1, r = t.length; ++i < r; ) aj(t[i], e);
    },
    GeometryCollection: function(n, e) {
      for (var t = n.geometries, i = -1, r = t.length; ++i < r; ) yR(t[i], e);
    }
  };
  function MI(n, e, t) {
    var i = -1, r = n.length - t, s;
    for (e.lineStart(); ++i < r; ) s = n[i], e.point(s[0], s[1], s[2]);
    e.lineEnd();
  }
  function aj(n, e) {
    var t = -1, i = n.length;
    for (e.polygonStart(); ++t < i; ) MI(n[t], e, 1);
    e.polygonEnd();
  }
  function wd(n, e) {
    n && sj.hasOwnProperty(n.type) ? sj[n.type](n, e) : yR(n, e);
  }
  function AI(n) {
    return [ll(n[1], n[0]), co(n[2])];
  }
  function Tp(n) {
    var e = n[0], t = n[1], i = ot(t);
    return [i * ot(e), i * nt(e), nt(t)];
  }
  function VC(n, e) {
    return n[0] * e[0] + n[1] * e[1] + n[2] * e[2];
  }
  function CR(n, e) {
    return [n[1] * e[2] - n[2] * e[1], n[2] * e[0] - n[0] * e[2], n[0] * e[1] - n[1] * e[0]];
  }
  function QM(n, e) {
    n[0] += e[0], n[1] += e[1], n[2] += e[2];
  }
  function WC(n, e) {
    return [n[0] * e, n[1] * e, n[2] * e];
  }
  function PI(n) {
    var e = Dr(n[0] * n[0] + n[1] * n[1] + n[2] * n[2]);
    n[0] /= e, n[1] /= e, n[2] /= e;
  }
  function II(n, e) {
    function t(i, r) {
      return i = n(i, r), e(i[0], i[1]);
    }
    return n.invert && e.invert && (t.invert = function(i, r) {
      return i = e.invert(i, r), i && n.invert(i[0], i[1]);
    }), t;
  }
  function OI(n, e) {
    return Dt(n) > bt && (n -= Math.round(n / Es) * Es), [n, e];
  }
  OI.invert = OI;
  function XK(n, e, t) {
    return (n %= Es) ? e || t ? II(cj(n), uj(e, t)) : cj(n) : e || t ? uj(e, t) : OI;
  }
  function lj(n) {
    return function(e, t) {
      return e += n, Dt(e) > bt && (e -= Math.round(e / Es) * Es), [e, t];
    };
  }
  function cj(n) {
    var e = lj(n);
    return e.invert = lj(-n), e;
  }
  function uj(n, e) {
    var t = ot(n), i = nt(n), r = ot(e), s = nt(e);
    function o(a, l) {
      var c = ot(l), u = ot(a) * c, h = nt(a) * c, d = nt(l), f = d * t + u * i;
      return [ll(h * r - f * s, u * t - d * i), co(f * r + h * s)];
    }
    return o.invert = function(a, l) {
      var c = ot(l), u = ot(a) * c, h = nt(a) * c, d = nt(l), f = d * r - h * s;
      return [ll(h * r + d * s, u * t + f * i), co(f * t - u * i)];
    }, o;
  }
  function oWe(n) {
    n = XK(n[0] * rn, n[1] * rn, n.length > 2 ? n[2] * rn : 0);
    function e(t) {
      return t = n(t[0] * rn, t[1] * rn), t[0] *= Er, t[1] *= Er, t;
    }
    return e.invert = function(t) {
      return t = n.invert(t[0] * rn, t[1] * rn), t[0] *= Er, t[1] *= Er, t;
    }, e;
  }
  function aWe(n, e, t, i, r, s) {
    if (t) {
      var o = ot(e), a = nt(e), l = i * t;
      r == null ? (r = e + i * Es, s = e - l / 2) : (r = hj(o, r), s = hj(o, s), (i > 0 ? r < s : r > s) && (r += i * Es));
      for (var c, u = r; i > 0 ? u > s : u < s; u -= l)
        c = AI([o, -a * ot(u), -a * nt(u)]), n.point(c[0], c[1]);
    }
  }
  function hj(n, e) {
    e = Tp(e), e[0] -= n, PI(e);
    var t = qK(-e[1]);
    return ((-e[2] < 0 ? -t : t) + Es - qe) % Es;
  }
  function ZK() {
    var n = [], e;
    return {
      point: function(t, i, r) {
        e.push([t, i, r]);
      },
      lineStart: function() {
        n.push(e = []);
      },
      lineEnd: Ni,
      rejoin: function() {
        n.length > 1 && n.push(n.pop().concat(n.shift()));
      },
      result: function() {
        var t = n;
        return n = [], e = null, t;
      }
    };
  }
  function $S(n, e) {
    return Dt(n[0] - e[0]) < qe && Dt(n[1] - e[1]) < qe;
  }
  function jC(n, e, t, i) {
    this.x = n, this.z = e, this.o = t, this.e = i, this.v = !1, this.n = this.p = null;
  }
  function QK(n, e, t, i, r) {
    var s = [], o = [], a, l;
    if (n.forEach(function(g) {
      if (!((p = g.length - 1) <= 0)) {
        var p, m = g[0], v = g[p], y;
        if ($S(m, v)) {
          if (!m[2] && !v[2]) {
            for (r.lineStart(), a = 0; a < p; ++a) r.point((m = g[a])[0], m[1]);
            r.lineEnd();
            return;
          }
          v[0] += 2 * qe;
        }
        s.push(y = new jC(m, g, null, !0)), o.push(y.o = new jC(m, null, y, !1)), s.push(y = new jC(v, g, null, !1)), o.push(y.o = new jC(v, null, y, !0));
      }
    }), !!s.length) {
      for (o.sort(e), dj(s), dj(o), a = 0, l = o.length; a < l; ++a)
        o[a].e = t = !t;
      for (var c = s[0], u, h; ; ) {
        for (var d = c, f = !0; d.v; ) if ((d = d.n) === c) return;
        u = d.z, r.lineStart();
        do {
          if (d.v = d.o.v = !0, d.e) {
            if (f)
              for (a = 0, l = u.length; a < l; ++a) r.point((h = u[a])[0], h[1]);
            else
              i(d.x, d.n.x, 1, r);
            d = d.n;
          } else {
            if (f)
              for (u = d.p.z, a = u.length - 1; a >= 0; --a) r.point((h = u[a])[0], h[1]);
            else
              i(d.x, d.p.x, -1, r);
            d = d.p;
          }
          d = d.o, u = d.z, f = !f;
        } while (!d.v);
        r.lineEnd();
      }
    }
  }
  function dj(n) {
    if (e = n.length) {
      for (var e, t = 0, i = n[0], r; ++t < e; )
        i.n = r = n[t], r.p = i, i = r;
      i.n = r = n[0], r.p = i;
    }
  }
  function JM(n) {
    return Dt(n[0]) <= bt ? n[0] : to(n[0]) * ((Dt(n[0]) + bt) % Es - bt);
  }
  function JK(n, e) {
    var t = JM(e), i = e[1], r = nt(i), s = [nt(t), -ot(t), 0], o = 0, a = 0, l = new Zu();
    r === 1 ? i = Qn + qe : r === -1 && (i = -Qn - qe);
    for (var c = 0, u = n.length; c < u; ++c)
      if (d = (h = n[c]).length)
        for (var h, d, f = h[d - 1], g = JM(f), p = f[1] / 2 + rj, m = nt(p), v = ot(p), y = 0; y < d; ++y, g = R, m = C, v = T, f = w) {
          var w = h[y], R = JM(w), E = w[1] / 2 + rj, C = nt(E), T = ot(E), P = R - g, x = P >= 0 ? 1 : -1, A = x * P, D = A > bt, B = m * C;
          if (l.add(ll(B * x * nt(A), v * T + B * ot(A))), o += D ? P + x * Es : P, D ^ g >= t ^ R >= t) {
            var F = CR(Tp(f), Tp(w));
            PI(F);
            var W = CR(s, F);
            PI(W);
            var N = (D ^ P >= 0 ? -1 : 1) * co(W[2]);
            (i > N || i === N && (F[0] || F[1])) && (a += D ^ P >= 0 ? 1 : -1);
          }
        }
    return (o < -qe || o < qe && l < -aH) ^ a & 1;
  }
  function eq(n, e, t, i) {
    return function(r) {
      var s = e(r), o = ZK(), a = e(o), l = !1, c, u, h, d = {
        point: f,
        lineStart: p,
        lineEnd: m,
        polygonStart: function() {
          d.point = v, d.lineStart = y, d.lineEnd = w, u = [], c = [];
        },
        polygonEnd: function() {
          d.point = f, d.lineStart = p, d.lineEnd = m, u = YK(u);
          var R = JK(c, i);
          u.length ? (l || (r.polygonStart(), l = !0), QK(u, cWe, R, t, r)) : R && (l || (r.polygonStart(), l = !0), r.lineStart(), t(null, null, 1, r), r.lineEnd()), l && (r.polygonEnd(), l = !1), u = c = null;
        },
        sphere: function() {
          r.polygonStart(), r.lineStart(), t(null, null, 1, r), r.lineEnd(), r.polygonEnd();
        }
      };
      function f(R, E) {
        n(R, E) && r.point(R, E);
      }
      function g(R, E) {
        s.point(R, E);
      }
      function p() {
        d.point = g, s.lineStart();
      }
      function m() {
        d.point = f, s.lineEnd();
      }
      function v(R, E) {
        h.push([R, E]), a.point(R, E);
      }
      function y() {
        a.lineStart(), h = [];
      }
      function w() {
        v(h[0][0], h[0][1]), a.lineEnd();
        var R = a.clean(), E = o.result(), C, T = E.length, P, x, A;
        if (h.pop(), c.push(h), h = null, !!T) {
          if (R & 1) {
            if (x = E[0], (P = x.length - 1) > 0) {
              for (l || (r.polygonStart(), l = !0), r.lineStart(), C = 0; C < P; ++C) r.point((A = x[C])[0], A[1]);
              r.lineEnd();
            }
            return;
          }
          T > 1 && R & 2 && E.push(E.pop().concat(E.shift())), u.push(E.filter(lWe));
        }
      }
      return d;
    };
  }
  function lWe(n) {
    return n.length > 1;
  }
  function cWe(n, e) {
    return ((n = n.x)[0] < 0 ? n[1] - Qn - qe : Qn - n[1]) - ((e = e.x)[0] < 0 ? e[1] - Qn - qe : Qn - e[1]);
  }
  const fj = eq(function() {
    return !0;
  }, uWe, dWe, [-bt, -Qn]);
  function uWe(n) {
    var e = NaN, t = NaN, i = NaN, r;
    return {
      lineStart: function() {
        n.lineStart(), r = 1;
      },
      point: function(s, o) {
        var a = s > 0 ? bt : -bt, l = Dt(s - e);
        Dt(l - bt) < qe ? (n.point(e, t = (t + o) / 2 > 0 ? Qn : -Qn), n.point(i, t), n.lineEnd(), n.lineStart(), n.point(a, t), n.point(s, t), r = 0) : i !== a && l >= bt && (Dt(e - i) < qe && (e -= i * qe), Dt(s - a) < qe && (s -= a * qe), t = hWe(e, t, s, o), n.point(i, t), n.lineEnd(), n.lineStart(), n.point(a, t), r = 0), n.point(e = s, t = o), i = a;
      },
      lineEnd: function() {
        n.lineEnd(), e = t = NaN;
      },
      clean: function() {
        return 2 - r;
      }
    };
  }
  function hWe(n, e, t, i) {
    var r, s, o = nt(n - t);
    return Dt(o) > qe ? im((nt(e) * (s = ot(i)) * nt(t) - nt(i) * (r = ot(e)) * nt(n)) / (r * s * o)) : (e + i) / 2;
  }
  function dWe(n, e, t, i) {
    var r;
    if (n == null)
      r = t * Qn, i.point(-bt, r), i.point(0, r), i.point(bt, r), i.point(bt, 0), i.point(bt, -r), i.point(0, -r), i.point(-bt, -r), i.point(-bt, 0), i.point(-bt, r);
    else if (Dt(n[0] - e[0]) > qe) {
      var s = n[0] < e[0] ? bt : -bt;
      r = t * s / 2, i.point(-s, r), i.point(0, r), i.point(s, r);
    } else
      i.point(e[0], e[1]);
  }
  function fWe(n) {
    var e = ot(n), t = 2 * rn, i = e > 0, r = Dt(e) > qe;
    function s(u, h, d, f) {
      aWe(f, n, t, d, u, h);
    }
    function o(u, h) {
      return ot(u) * ot(h) > e;
    }
    function a(u) {
      var h, d, f, g, p;
      return {
        lineStart: function() {
          g = f = !1, p = 1;
        },
        point: function(m, v) {
          var y = [m, v], w, R = o(m, v), E = i ? R ? 0 : c(m, v) : R ? c(m + (m < 0 ? bt : -bt), v) : 0;
          if (!h && (g = f = R) && u.lineStart(), R !== f && (w = l(h, y), (!w || $S(h, w) || $S(y, w)) && (y[2] = 1)), R !== f)
            p = 0, R ? (u.lineStart(), w = l(y, h), u.point(w[0], w[1])) : (w = l(h, y), u.point(w[0], w[1], 2), u.lineEnd()), h = w;
          else if (r && h && i ^ R) {
            var C;
            !(E & d) && (C = l(y, h, !0)) && (p = 0, i ? (u.lineStart(), u.point(C[0][0], C[0][1]), u.point(C[1][0], C[1][1]), u.lineEnd()) : (u.point(C[1][0], C[1][1]), u.lineEnd(), u.lineStart(), u.point(C[0][0], C[0][1], 3)));
          }
          R && (!h || !$S(h, y)) && u.point(y[0], y[1]), h = y, f = R, d = E;
        },
        lineEnd: function() {
          f && u.lineEnd(), h = null;
        },
        // Rejoin first and last segments if there were intersections and the first
        // and last points were visible.
        clean: function() {
          return p | (g && f) << 1;
        }
      };
    }
    function l(u, h, d) {
      var f = Tp(u), g = Tp(h), p = [1, 0, 0], m = CR(f, g), v = VC(m, m), y = m[0], w = v - y * y;
      if (!w) return !d && u;
      var R = e * v / w, E = -e * y / w, C = CR(p, m), T = WC(p, R), P = WC(m, E);
      QM(T, P);
      var x = C, A = VC(T, x), D = VC(x, x), B = A * A - D * (VC(T, T) - 1);
      if (!(B < 0)) {
        var F = Dr(B), W = WC(x, (-A - F) / D);
        if (QM(W, T), W = AI(W), !d) return W;
        var N = u[0], O = h[0], V = u[1], G = h[1], U;
        O < N && (U = N, N = O, O = U);
        var se = O - N, b = Dt(se - bt) < qe, S = b || se < qe;
        if (!b && G < V && (U = V, V = G, G = U), S ? b ? V + G > 0 ^ W[1] < (Dt(W[0] - N) < qe ? V : G) : V <= W[1] && W[1] <= G : se > bt ^ (N <= W[0] && W[0] <= O)) {
          var _ = WC(x, (-A + F) / D);
          return QM(_, T), [W, AI(_)];
        }
      }
    }
    function c(u, h) {
      var d = i ? n : bt - n, f = 0;
      return u < -d ? f |= 1 : u > d && (f |= 2), h < -d ? f |= 4 : h > d && (f |= 8), f;
    }
    return eq(o, a, s, i ? [0, -n] : [-bt, n - bt]);
  }
  function gWe(n, e, t, i, r, s) {
    var o = n[0], a = n[1], l = e[0], c = e[1], u = 0, h = 1, d = l - o, f = c - a, g;
    if (g = t - o, !(!d && g > 0)) {
      if (g /= d, d < 0) {
        if (g < u) return;
        g < h && (h = g);
      } else if (d > 0) {
        if (g > h) return;
        g > u && (u = g);
      }
      if (g = r - o, !(!d && g < 0)) {
        if (g /= d, d < 0) {
          if (g > h) return;
          g > u && (u = g);
        } else if (d > 0) {
          if (g < u) return;
          g < h && (h = g);
        }
        if (g = i - a, !(!f && g > 0)) {
          if (g /= f, f < 0) {
            if (g < u) return;
            g < h && (h = g);
          } else if (f > 0) {
            if (g > h) return;
            g > u && (u = g);
          }
          if (g = s - a, !(!f && g < 0)) {
            if (g /= f, f < 0) {
              if (g > h) return;
              g > u && (u = g);
            } else if (f > 0) {
              if (g < u) return;
              g < h && (h = g);
            }
            return u > 0 && (n[0] = o + u * d, n[1] = a + u * f), h < 1 && (e[0] = o + h * d, e[1] = a + h * f), !0;
          }
        }
      }
    }
  }
  var zb = 1e9, zC = -zb;
  function pWe(n, e, t, i) {
    function r(c, u) {
      return n <= c && c <= t && e <= u && u <= i;
    }
    function s(c, u, h, d) {
      var f = 0, g = 0;
      if (c == null || (f = o(c, h)) !== (g = o(u, h)) || l(c, u) < 0 ^ h > 0)
        do
          d.point(f === 0 || f === 3 ? n : t, f > 1 ? i : e);
        while ((f = (f + h + 4) % 4) !== g);
      else
        d.point(u[0], u[1]);
    }
    function o(c, u) {
      return Dt(c[0] - n) < qe ? u > 0 ? 0 : 3 : Dt(c[0] - t) < qe ? u > 0 ? 2 : 1 : Dt(c[1] - e) < qe ? u > 0 ? 1 : 0 : u > 0 ? 3 : 2;
    }
    function a(c, u) {
      return l(c.x, u.x);
    }
    function l(c, u) {
      var h = o(c, 1), d = o(u, 1);
      return h !== d ? h - d : h === 0 ? u[1] - c[1] : h === 1 ? c[0] - u[0] : h === 2 ? c[1] - u[1] : u[0] - c[0];
    }
    return function(c) {
      var u = c, h = ZK(), d, f, g, p, m, v, y, w, R, E, C, T = {
        point: P,
        lineStart: B,
        lineEnd: F,
        polygonStart: A,
        polygonEnd: D
      };
      function P(N, O) {
        r(N, O) && u.point(N, O);
      }
      function x() {
        for (var N = 0, O = 0, V = f.length; O < V; ++O)
          for (var G = f[O], U = 1, se = G.length, b = G[0], S, _, I = b[0], H = b[1]; U < se; ++U)
            S = I, _ = H, b = G[U], I = b[0], H = b[1], _ <= i ? H > i && (I - S) * (i - _) > (H - _) * (n - S) && ++N : H <= i && (I - S) * (i - _) < (H - _) * (n - S) && --N;
        return N;
      }
      function A() {
        u = h, d = [], f = [], C = !0;
      }
      function D() {
        var N = x(), O = C && N, V = (d = YK(d)).length;
        (O || V) && (c.polygonStart(), O && (c.lineStart(), s(null, null, 1, c), c.lineEnd()), V && QK(d, a, N, s, c), c.polygonEnd()), u = c, d = f = g = null;
      }
      function B() {
        T.point = W, f && f.push(g = []), E = !0, R = !1, y = w = NaN;
      }
      function F() {
        d && (W(p, m), v && R && h.rejoin(), d.push(h.result())), T.point = P, R && u.lineEnd();
      }
      function W(N, O) {
        var V = r(N, O);
        if (f && g.push([N, O]), E)
          p = N, m = O, v = V, E = !1, V && (u.lineStart(), u.point(N, O));
        else if (V && R) u.point(N, O);
        else {
          var G = [y = Math.max(zC, Math.min(zb, y)), w = Math.max(zC, Math.min(zb, w))], U = [N = Math.max(zC, Math.min(zb, N)), O = Math.max(zC, Math.min(zb, O))];
          gWe(G, U, n, e, t, i) ? (R || (u.lineStart(), u.point(G[0], G[1])), u.point(U[0], U[1]), V || u.lineEnd(), C = !1) : V && (u.lineStart(), u.point(N, O), C = !1);
        }
        y = N, w = O, R = V;
      }
      return T;
    };
  }
  var kI, DI, FS, BS, Mp = {
    sphere: Ni,
    point: Ni,
    lineStart: mWe,
    lineEnd: Ni,
    polygonStart: Ni,
    polygonEnd: Ni
  };
  function mWe() {
    Mp.point = vWe, Mp.lineEnd = bWe;
  }
  function bWe() {
    Mp.point = Mp.lineEnd = Ni;
  }
  function vWe(n, e) {
    n *= rn, e *= rn, DI = n, FS = nt(e), BS = ot(e), Mp.point = wWe;
  }
  function wWe(n, e) {
    n *= rn, e *= rn;
    var t = nt(e), i = ot(e), r = Dt(n - DI), s = ot(r), o = nt(r), a = i * o, l = BS * t - FS * i * s, c = FS * t + BS * i * s;
    kI.add(ll(Dr(a * a + l * l), c)), DI = n, FS = t, BS = i;
  }
  function yWe(n) {
    return kI = new Zu(), wd(n, Mp), +kI;
  }
  var NI = [null, null], CWe = {
    type: "LineString",
    coordinates: NI
  };
  function LI(n, e) {
    return NI[0] = n, NI[1] = e, yWe(CWe);
  }
  var gj = {
    Feature: function(n, e) {
      return SR(n.geometry, e);
    },
    FeatureCollection: function(n, e) {
      for (var t = n.features, i = -1, r = t.length; ++i < r; ) if (SR(t[i].geometry, e)) return !0;
      return !1;
    }
  }, pj = {
    Sphere: function() {
      return !0;
    },
    Point: function(n, e) {
      return mj(n.coordinates, e);
    },
    MultiPoint: function(n, e) {
      for (var t = n.coordinates, i = -1, r = t.length; ++i < r; ) if (mj(t[i], e)) return !0;
      return !1;
    },
    LineString: function(n, e) {
      return bj(n.coordinates, e);
    },
    MultiLineString: function(n, e) {
      for (var t = n.coordinates, i = -1, r = t.length; ++i < r; ) if (bj(t[i], e)) return !0;
      return !1;
    },
    Polygon: function(n, e) {
      return vj(n.coordinates, e);
    },
    MultiPolygon: function(n, e) {
      for (var t = n.coordinates, i = -1, r = t.length; ++i < r; ) if (vj(t[i], e)) return !0;
      return !1;
    },
    GeometryCollection: function(n, e) {
      for (var t = n.geometries, i = -1, r = t.length; ++i < r; ) if (SR(t[i], e)) return !0;
      return !1;
    }
  };
  function SR(n, e) {
    return n && pj.hasOwnProperty(n.type) ? pj[n.type](n, e) : !1;
  }
  function mj(n, e) {
    return LI(n, e) === 0;
  }
  function bj(n, e) {
    for (var t, i, r, s = 0, o = n.length; s < o; s++) {
      if (i = LI(n[s], e), i === 0 || s > 0 && (r = LI(n[s], n[s - 1]), r > 0 && t <= r && i <= r && (t + i - r) * (1 - Math.pow((t - i) / r, 2)) < aH * r))
        return !0;
      t = i;
    }
    return !1;
  }
  function vj(n, e) {
    return !!JK(n.map(SWe), tq(e));
  }
  function SWe(n) {
    return n = n.map(tq), n.pop(), n;
  }
  function tq(n) {
    return [n[0] * rn, n[1] * rn];
  }
  function _We(n, e) {
    return (n && gj.hasOwnProperty(n.type) ? gj[n.type] : SR)(n, e);
  }
  function wj(n, e, t) {
    var i = qg(n, e - qe, t).concat(e);
    return function(r) {
      return i.map(function(s) {
        return [r, s];
      });
    };
  }
  function yj(n, e, t) {
    var i = qg(n, e - qe, t).concat(e);
    return function(r) {
      return i.map(function(s) {
        return [s, r];
      });
    };
  }
  function nq() {
    var n, e, t, i, r, s, o, a, l = 10, c = l, u = 90, h = 360, d, f, g, p, m = 2.5;
    function v() {
      return {
        type: "MultiLineString",
        coordinates: y()
      };
    }
    function y() {
      return qg(BC(i / u) * u, t, u).map(g).concat(qg(BC(a / h) * h, o, h).map(p)).concat(qg(BC(e / l) * l, n, l).filter(function(w) {
        return Dt(w % u) > qe;
      }).map(d)).concat(qg(BC(s / c) * c, r, c).filter(function(w) {
        return Dt(w % h) > qe;
      }).map(f));
    }
    return v.lines = function() {
      return y().map(function(w) {
        return {
          type: "LineString",
          coordinates: w
        };
      });
    }, v.outline = function() {
      return {
        type: "Polygon",
        coordinates: [g(i).concat(p(o).slice(1), g(t).reverse().slice(1), p(a).reverse().slice(1))]
      };
    }, v.extent = function(w) {
      return arguments.length ? v.extentMajor(w).extentMinor(w) : v.extentMinor();
    }, v.extentMajor = function(w) {
      return arguments.length ? (i = +w[0][0], t = +w[1][0], a = +w[0][1], o = +w[1][1], i > t && (w = i, i = t, t = w), a > o && (w = a, a = o, o = w), v.precision(m)) : [[i, a], [t, o]];
    }, v.extentMinor = function(w) {
      return arguments.length ? (e = +w[0][0], n = +w[1][0], s = +w[0][1], r = +w[1][1], e > n && (w = e, e = n, n = w), s > r && (w = s, s = r, r = w), v.precision(m)) : [[e, s], [n, r]];
    }, v.step = function(w) {
      return arguments.length ? v.stepMajor(w).stepMinor(w) : v.stepMinor();
    }, v.stepMajor = function(w) {
      return arguments.length ? (u = +w[0], h = +w[1], v) : [u, h];
    }, v.stepMinor = function(w) {
      return arguments.length ? (l = +w[0], c = +w[1], v) : [l, c];
    }, v.precision = function(w) {
      return arguments.length ? (m = +w, d = wj(s, r, 90), f = yj(e, n, m), g = wj(a, o, 90), p = yj(i, t, m), v) : m;
    }, v.extentMajor([[-180, -90 + qe], [180, 90 - qe]]).extentMinor([[-180, -80 - qe], [180, 80 + qe]]);
  }
  function RWe() {
    return nq()();
  }
  const HI = (n) => n;
  var eA = new Zu(), $I = new Zu(), iq, rq, FI, BI, ic = {
    point: Ni,
    lineStart: Ni,
    lineEnd: Ni,
    polygonStart: function() {
      ic.lineStart = EWe, ic.lineEnd = TWe;
    },
    polygonEnd: function() {
      ic.lineStart = ic.lineEnd = ic.point = Ni, eA.add(Dt($I)), $I = new Zu();
    },
    result: function() {
      var n = eA / 2;
      return eA = new Zu(), n;
    }
  };
  function EWe() {
    ic.point = xWe;
  }
  function xWe(n, e) {
    ic.point = sq, iq = FI = n, rq = BI = e;
  }
  function sq(n, e) {
    $I.add(BI * n - FI * e), FI = n, BI = e;
  }
  function TWe() {
    sq(iq, rq);
  }
  var Ap = 1 / 0, _R = Ap, Mw = -Ap, RR = Mw, ER = {
    point: MWe,
    lineStart: Ni,
    lineEnd: Ni,
    polygonStart: Ni,
    polygonEnd: Ni,
    result: function() {
      var n = [[Ap, _R], [Mw, RR]];
      return Mw = RR = -(_R = Ap = 1 / 0), n;
    }
  };
  function MWe(n, e) {
    n < Ap && (Ap = n), n > Mw && (Mw = n), e < _R && (_R = e), e > RR && (RR = e);
  }
  var VI = 0, WI = 0, Ub = 0, xR = 0, TR = 0, Xg = 0, jI = 0, zI = 0, Gb = 0, oq, aq, Ua, Ga, Qs = {
    point: uf,
    lineStart: Cj,
    lineEnd: Sj,
    polygonStart: function() {
      Qs.lineStart = IWe, Qs.lineEnd = OWe;
    },
    polygonEnd: function() {
      Qs.point = uf, Qs.lineStart = Cj, Qs.lineEnd = Sj;
    },
    result: function() {
      var n = Gb ? [jI / Gb, zI / Gb] : Xg ? [xR / Xg, TR / Xg] : Ub ? [VI / Ub, WI / Ub] : [NaN, NaN];
      return VI = WI = Ub = xR = TR = Xg = jI = zI = Gb = 0, n;
    }
  };
  function uf(n, e) {
    VI += n, WI += e, ++Ub;
  }
  function Cj() {
    Qs.point = AWe;
  }
  function AWe(n, e) {
    Qs.point = PWe, uf(Ua = n, Ga = e);
  }
  function PWe(n, e) {
    var t = n - Ua, i = e - Ga, r = Dr(t * t + i * i);
    xR += r * (Ua + n) / 2, TR += r * (Ga + e) / 2, Xg += r, uf(Ua = n, Ga = e);
  }
  function Sj() {
    Qs.point = uf;
  }
  function IWe() {
    Qs.point = kWe;
  }
  function OWe() {
    lq(oq, aq);
  }
  function kWe(n, e) {
    Qs.point = lq, uf(oq = Ua = n, aq = Ga = e);
  }
  function lq(n, e) {
    var t = n - Ua, i = e - Ga, r = Dr(t * t + i * i);
    xR += r * (Ua + n) / 2, TR += r * (Ga + e) / 2, Xg += r, r = Ga * n - Ua * e, jI += r * (Ua + n), zI += r * (Ga + e), Gb += r * 3, uf(Ua = n, Ga = e);
  }
  function cq(n) {
    this._context = n;
  }
  cq.prototype = {
    _radius: 4.5,
    pointRadius: function(n) {
      return this._radius = n, this;
    },
    polygonStart: function() {
      this._line = 0;
    },
    polygonEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._point = 0;
    },
    lineEnd: function() {
      this._line === 0 && this._context.closePath(), this._point = NaN;
    },
    point: function(n, e) {
      switch (this._point) {
        case 0: {
          this._context.moveTo(n, e), this._point = 1;
          break;
        }
        case 1: {
          this._context.lineTo(n, e);
          break;
        }
        default: {
          this._context.moveTo(n + this._radius, e), this._context.arc(n, e, this._radius, 0, Es);
          break;
        }
      }
    },
    result: Ni
  };
  var UI = new Zu(), tA, uq, hq, Yb, Kb, Aw = {
    point: Ni,
    lineStart: function() {
      Aw.point = DWe;
    },
    lineEnd: function() {
      tA && dq(uq, hq), Aw.point = Ni;
    },
    polygonStart: function() {
      tA = !0;
    },
    polygonEnd: function() {
      tA = null;
    },
    result: function() {
      var n = +UI;
      return UI = new Zu(), n;
    }
  };
  function DWe(n, e) {
    Aw.point = dq, uq = Yb = n, hq = Kb = e;
  }
  function dq(n, e) {
    Yb -= n, Kb -= e, UI.add(Dr(Yb * Yb + Kb * Kb)), Yb = n, Kb = e;
  }
  let _j, MR, Rj, Ej;
  class xj {
    constructor(e) {
      this._append = e == null ? fq : NWe(e), this._radius = 4.5, this._ = "";
    }
    pointRadius(e) {
      return this._radius = +e, this;
    }
    polygonStart() {
      this._line = 0;
    }
    polygonEnd() {
      this._line = NaN;
    }
    lineStart() {
      this._point = 0;
    }
    lineEnd() {
      this._line === 0 && (this._ += "Z"), this._point = NaN;
    }
    point(e, t) {
      switch (this._point) {
        case 0: {
          this._append`M${e},${t}`, this._point = 1;
          break;
        }
        case 1: {
          this._append`L${e},${t}`;
          break;
        }
        default: {
          if (this._append`M${e},${t}`, this._radius !== Rj || this._append !== MR) {
            const i = this._radius, r = this._;
            this._ = "", this._append`m0,${i}a${i},${i} 0 1,1 0,${-2 * i}a${i},${i} 0 1,1 0,${2 * i}z`, Rj = i, MR = this._append, Ej = this._, this._ = r;
          }
          this._ += Ej;
          break;
        }
      }
    }
    result() {
      const e = this._;
      return this._ = "", e.length ? e : null;
    }
  }
  function fq(n) {
    let e = 1;
    this._ += n[0];
    for (const t = n.length; e < t; ++e)
      this._ += arguments[e] + n[e];
  }
  function NWe(n) {
    const e = Math.floor(n);
    if (!(e >= 0)) throw new RangeError(`invalid digits: ${n}`);
    if (e > 15) return fq;
    if (e !== _j) {
      const t = 10 ** e;
      _j = e, MR = function(r) {
        let s = 1;
        this._ += r[0];
        for (const o = r.length; s < o; ++s)
          this._ += Math.round(arguments[s] * t) / t + r[s];
      };
    }
    return MR;
  }
  function Tj(n, e) {
    let t = 3, i = 4.5, r, s;
    function o(a) {
      return a && (typeof i == "function" && s.pointRadius(+i.apply(this, arguments)), wd(a, r(s))), s.result();
    }
    return o.area = function(a) {
      return wd(a, r(ic)), ic.result();
    }, o.measure = function(a) {
      return wd(a, r(Aw)), Aw.result();
    }, o.bounds = function(a) {
      return wd(a, r(ER)), ER.result();
    }, o.centroid = function(a) {
      return wd(a, r(Qs)), Qs.result();
    }, o.projection = function(a) {
      return arguments.length ? (r = a == null ? (n = null, HI) : (n = a).stream, o) : n;
    }, o.context = function(a) {
      return arguments.length ? (s = a == null ? (e = null, new xj(t)) : new cq(e = a), typeof i != "function" && s.pointRadius(i), o) : e;
    }, o.pointRadius = function(a) {
      return arguments.length ? (i = typeof a == "function" ? a : (s.pointRadius(+a), +a), o) : i;
    }, o.digits = function(a) {
      if (!arguments.length) return t;
      if (a == null) t = null;
      else {
        const l = Math.floor(a);
        if (!(l >= 0)) throw new RangeError(`invalid digits: ${a}`);
        t = l;
      }
      return e === null && (s = new xj(t)), o;
    }, o.projection(n).digits(t).context(e);
  }
  function cH(n) {
    return function(e) {
      var t = new GI();
      for (var i in n) t[i] = n[i];
      return t.stream = e, t;
    };
  }
  function GI() {
  }
  GI.prototype = {
    constructor: GI,
    point: function(n, e) {
      this.stream.point(n, e);
    },
    sphere: function() {
      this.stream.sphere();
    },
    lineStart: function() {
      this.stream.lineStart();
    },
    lineEnd: function() {
      this.stream.lineEnd();
    },
    polygonStart: function() {
      this.stream.polygonStart();
    },
    polygonEnd: function() {
      this.stream.polygonEnd();
    }
  };
  function uH(n, e, t) {
    var i = n.clipExtent && n.clipExtent();
    return n.scale(150).translate([0, 0]), i != null && n.clipExtent(null), wd(t, n.stream(ER)), e(ER.result()), i != null && n.clipExtent(i), n;
  }
  function hH(n, e, t) {
    return uH(n, function(i) {
      var r = e[1][0] - e[0][0], s = e[1][1] - e[0][1], o = Math.min(r / (i[1][0] - i[0][0]), s / (i[1][1] - i[0][1])), a = +e[0][0] + (r - o * (i[1][0] + i[0][0])) / 2, l = +e[0][1] + (s - o * (i[1][1] + i[0][1])) / 2;
      n.scale(150 * o).translate([a, l]);
    }, t);
  }
  function gq(n, e, t) {
    return hH(n, [[0, 0], e], t);
  }
  function pq(n, e, t) {
    return uH(n, function(i) {
      var r = +e, s = r / (i[1][0] - i[0][0]), o = (r - s * (i[1][0] + i[0][0])) / 2, a = -s * i[0][1];
      n.scale(150 * s).translate([o, a]);
    }, t);
  }
  function mq(n, e, t) {
    return uH(n, function(i) {
      var r = +e, s = r / (i[1][1] - i[0][1]), o = -s * i[0][0], a = (r - s * (i[1][1] + i[0][1])) / 2;
      n.scale(150 * s).translate([o, a]);
    }, t);
  }
  var Mj = 16, LWe = ot(30 * rn);
  function Aj(n, e) {
    return +e ? $We(n, e) : HWe(n);
  }
  function HWe(n) {
    return cH({
      point: function(e, t) {
        e = n(e, t), this.stream.point(e[0], e[1]);
      }
    });
  }
  function $We(n, e) {
    function t(i, r, s, o, a, l, c, u, h, d, f, g, p, m) {
      var v = c - i, y = u - r, w = v * v + y * y;
      if (w > 4 * e && p--) {
        var R = o + d, E = a + f, C = l + g, T = Dr(R * R + E * E + C * C), P = co(C /= T), x = Dt(Dt(C) - 1) < qe || Dt(s - h) < qe ? (s + h) / 2 : ll(E, R), A = n(x, P), D = A[0], B = A[1], F = D - i, W = B - r, N = y * F - v * W;
        (N * N / w > e || Dt((v * F + y * W) / w - 0.5) > 0.3 || o * d + a * f + l * g < LWe) && (t(i, r, s, o, a, l, D, B, x, R /= T, E /= T, C, p, m), m.point(D, B), t(D, B, x, R, E, C, c, u, h, d, f, g, p, m));
      }
    }
    return function(i) {
      var r, s, o, a, l, c, u, h, d, f, g, p, m = {
        point: v,
        lineStart: y,
        lineEnd: R,
        polygonStart: function() {
          i.polygonStart(), m.lineStart = E;
        },
        polygonEnd: function() {
          i.polygonEnd(), m.lineStart = y;
        }
      };
      function v(P, x) {
        P = n(P, x), i.point(P[0], P[1]);
      }
      function y() {
        h = NaN, m.point = w, i.lineStart();
      }
      function w(P, x) {
        var A = Tp([P, x]), D = n(P, x);
        t(h, d, u, f, g, p, h = D[0], d = D[1], u = P, f = A[0], g = A[1], p = A[2], Mj, i), i.point(h, d);
      }
      function R() {
        m.point = v, i.lineEnd();
      }
      function E() {
        y(), m.point = C, m.lineEnd = T;
      }
      function C(P, x) {
        w(r = P, x), s = h, o = d, a = f, l = g, c = p, m.point = w;
      }
      function T() {
        t(h, d, u, f, g, p, s, o, r, a, l, c, Mj, i), m.lineEnd = R, R();
      }
      return m;
    };
  }
  var FWe = cH({
    point: function(n, e) {
      this.stream.point(n * rn, e * rn);
    }
  });
  function BWe(n) {
    return cH({
      point: function(e, t) {
        var i = n(e, t);
        return this.stream.point(i[0], i[1]);
      }
    });
  }
  function VWe(n, e, t, i, r) {
    function s(o, a) {
      return o *= i, a *= r, [e + n * o, t - n * a];
    }
    return s.invert = function(o, a) {
      return [(o - e) / n * i, (t - a) / n * r];
    }, s;
  }
  function Pj(n, e, t, i, r, s) {
    if (!s) return VWe(n, e, t, i, r);
    var o = ot(s), a = nt(s), l = o * n, c = a * n, u = o / n, h = a / n, d = (a * t - o * e) / n, f = (a * e + o * t) / n;
    function g(p, m) {
      return p *= i, m *= r, [l * p - c * m + e, t - c * p - l * m];
    }
    return g.invert = function(p, m) {
      return [i * (u * p - h * m + d), r * (f - h * p - u * m)];
    }, g;
  }
  function jc(n) {
    return bq(function() {
      return n;
    })();
  }
  function bq(n) {
    var e, t = 150, i = 480, r = 250, s = 0, o = 0, a = 0, l = 0, c = 0, u, h = 0, d = 1, f = 1, g = null, p = fj, m = null, v, y, w, R = HI, E = 0.5, C, T, P, x, A;
    function D(N) {
      return P(N[0] * rn, N[1] * rn);
    }
    function B(N) {
      return N = P.invert(N[0], N[1]), N && [N[0] * Er, N[1] * Er];
    }
    D.stream = function(N) {
      return x && A === N ? x : x = FWe(BWe(u)(p(C(R(A = N)))));
    }, D.preclip = function(N) {
      return arguments.length ? (p = N, g = void 0, W()) : p;
    }, D.postclip = function(N) {
      return arguments.length ? (R = N, m = v = y = w = null, W()) : R;
    }, D.clipAngle = function(N) {
      return arguments.length ? (p = +N ? fWe(g = N * rn) : (g = null, fj), W()) : g * Er;
    }, D.clipExtent = function(N) {
      return arguments.length ? (R = N == null ? (m = v = y = w = null, HI) : pWe(m = +N[0][0], v = +N[0][1], y = +N[1][0], w = +N[1][1]), W()) : m == null ? null : [[m, v], [y, w]];
    }, D.scale = function(N) {
      return arguments.length ? (t = +N, F()) : t;
    }, D.translate = function(N) {
      return arguments.length ? (i = +N[0], r = +N[1], F()) : [i, r];
    }, D.center = function(N) {
      return arguments.length ? (s = N[0] % 360 * rn, o = N[1] % 360 * rn, F()) : [s * Er, o * Er];
    }, D.rotate = function(N) {
      return arguments.length ? (a = N[0] % 360 * rn, l = N[1] % 360 * rn, c = N.length > 2 ? N[2] % 360 * rn : 0, F()) : [a * Er, l * Er, c * Er];
    }, D.angle = function(N) {
      return arguments.length ? (h = N % 360 * rn, F()) : h * Er;
    }, D.reflectX = function(N) {
      return arguments.length ? (d = N ? -1 : 1, F()) : d < 0;
    }, D.reflectY = function(N) {
      return arguments.length ? (f = N ? -1 : 1, F()) : f < 0;
    }, D.precision = function(N) {
      return arguments.length ? (C = Aj(T, E = N * N), W()) : Dr(E);
    }, D.fitExtent = function(N, O) {
      return hH(D, N, O);
    }, D.fitSize = function(N, O) {
      return gq(D, N, O);
    }, D.fitWidth = function(N, O) {
      return pq(D, N, O);
    }, D.fitHeight = function(N, O) {
      return mq(D, N, O);
    };
    function F() {
      var N = Pj(t, 0, 0, d, f, h).apply(null, e(s, o)), O = Pj(t, i - N[0], r - N[1], d, f, h);
      return u = XK(a, l, c), T = II(e, O), P = II(u, T), C = Aj(T, E), W();
    }
    function W() {
      return x = A = null, D;
    }
    return function() {
      return e = n.apply(this, arguments), D.invert = e.invert && B, F();
    };
  }
  function dH(n) {
    var e = 0, t = bt / 3, i = bq(n), r = i(e, t);
    return r.parallels = function(s) {
      return arguments.length ? i(e = s[0] * rn, t = s[1] * rn) : [e * Er, t * Er];
    }, r;
  }
  function WWe(n) {
    var e = ot(n);
    function t(i, r) {
      return [i * e, nt(r) / e];
    }
    return t.invert = function(i, r) {
      return [i / e, co(r * e)];
    }, t;
  }
  function jWe(n, e) {
    var t = nt(n), i = (t + nt(e)) / 2;
    if (Dt(i) < qe) return WWe(n);
    var r = 1 + t * (2 * i - t), s = Dr(r) / i;
    function o(a, l) {
      var c = Dr(r - 2 * i * nt(l)) / i;
      return [c * nt(a *= i), s - c * ot(a)];
    }
    return o.invert = function(a, l) {
      var c = s - l, u = ll(a, Dt(c)) * to(c);
      return c * i < 0 && (u -= bt * to(a) * to(c)), [u / i, co((r - (a * a + c * c) * i * i) / (2 * i))];
    }, o;
  }
  function AR() {
    return dH(jWe).scale(155.424).center([0, 33.6442]);
  }
  function vq() {
    return AR().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-0.6, 38.7]);
  }
  function zWe(n) {
    var e = n.length;
    return {
      point: function(t, i) {
        for (var r = -1; ++r < e; ) n[r].point(t, i);
      },
      sphere: function() {
        for (var t = -1; ++t < e; ) n[t].sphere();
      },
      lineStart: function() {
        for (var t = -1; ++t < e; ) n[t].lineStart();
      },
      lineEnd: function() {
        for (var t = -1; ++t < e; ) n[t].lineEnd();
      },
      polygonStart: function() {
        for (var t = -1; ++t < e; ) n[t].polygonStart();
      },
      polygonEnd: function() {
        for (var t = -1; ++t < e; ) n[t].polygonEnd();
      }
    };
  }
  function UWe() {
    var n, e, t = vq(), i, r = AR().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), s, o = AR().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), a, l, c = {
      point: function(d, f) {
        l = [d, f];
      }
    };
    function u(d) {
      var f = d[0], g = d[1];
      return l = null, i.point(f, g), l || (s.point(f, g), l) || (a.point(f, g), l);
    }
    u.invert = function(d) {
      var f = t.scale(), g = t.translate(), p = (d[0] - g[0]) / f, m = (d[1] - g[1]) / f;
      return (m >= 0.12 && m < 0.234 && p >= -0.425 && p < -0.214 ? r : m >= 0.166 && m < 0.234 && p >= -0.214 && p < -0.115 ? o : t).invert(d);
    }, u.stream = function(d) {
      return n && e === d ? n : n = zWe([t.stream(e = d), r.stream(d), o.stream(d)]);
    }, u.precision = function(d) {
      return arguments.length ? (t.precision(d), r.precision(d), o.precision(d), h()) : t.precision();
    }, u.scale = function(d) {
      return arguments.length ? (t.scale(d), r.scale(d * 0.35), o.scale(d), u.translate(t.translate())) : t.scale();
    }, u.translate = function(d) {
      if (!arguments.length) return t.translate();
      var f = t.scale(), g = +d[0], p = +d[1];
      return i = t.translate(d).clipExtent([[g - 0.455 * f, p - 0.238 * f], [g + 0.455 * f, p + 0.238 * f]]).stream(c), s = r.translate([g - 0.307 * f, p + 0.201 * f]).clipExtent([[g - 0.425 * f + qe, p + 0.12 * f + qe], [g - 0.214 * f - qe, p + 0.234 * f - qe]]).stream(c), a = o.translate([g - 0.205 * f, p + 0.212 * f]).clipExtent([[g - 0.214 * f + qe, p + 0.166 * f + qe], [g - 0.115 * f - qe, p + 0.234 * f - qe]]).stream(c), h();
    }, u.fitExtent = function(d, f) {
      return hH(u, d, f);
    }, u.fitSize = function(d, f) {
      return gq(u, d, f);
    }, u.fitWidth = function(d, f) {
      return pq(u, d, f);
    }, u.fitHeight = function(d, f) {
      return mq(u, d, f);
    };
    function h() {
      return n = e = null, u;
    }
    return u.scale(1070);
  }
  function wq(n) {
    return function(e, t) {
      var i = ot(e), r = ot(t), s = n(i * r);
      return s === 1 / 0 ? [2, 0] : [s * r * nt(e), s * nt(t)];
    };
  }
  function Ey(n) {
    return function(e, t) {
      var i = Dr(e * e + t * t), r = n(i), s = nt(r), o = ot(r);
      return [ll(e * s, i * o), co(i && t * s / i)];
    };
  }
  var yq = wq(function(n) {
    return Dr(2 / (1 + n));
  });
  yq.invert = Ey(function(n) {
    return 2 * co(n / 2);
  });
  function GWe() {
    return jc(yq).scale(124.75).clipAngle(180 - 1e-3);
  }
  var Cq = wq(function(n) {
    return (n = qK(n)) && n / nt(n);
  });
  Cq.invert = Ey(function(n) {
    return n;
  });
  function YWe() {
    return jc(Cq).scale(79.4188).clipAngle(180 - 1e-3);
  }
  function mE(n, e) {
    return [n, wR(lH((Qn + e) / 2))];
  }
  mE.invert = function(n, e) {
    return [n, 2 * im(KK(e)) - Qn];
  };
  function KWe() {
    return Sq(mE).scale(961 / Es);
  }
  function Sq(n) {
    var e = jc(n), t = e.center, i = e.scale, r = e.translate, s = e.clipExtent, o = null, a, l, c;
    e.scale = function(h) {
      return arguments.length ? (i(h), u()) : i();
    }, e.translate = function(h) {
      return arguments.length ? (r(h), u()) : r();
    }, e.center = function(h) {
      return arguments.length ? (t(h), u()) : t();
    }, e.clipExtent = function(h) {
      return arguments.length ? (h == null ? o = a = l = c = null : (o = +h[0][0], a = +h[0][1], l = +h[1][0], c = +h[1][1]), u()) : o == null ? null : [[o, a], [l, c]];
    };
    function u() {
      var h = bt * i(), d = e(oWe(e.rotate()).invert([0, 0]));
      return s(o == null ? [[d[0] - h, d[1] - h], [d[0] + h, d[1] + h]] : n === mE ? [[Math.max(d[0] - h, o), a], [Math.min(d[0] + h, l), c]] : [[o, Math.max(d[1] - h, a)], [l, Math.min(d[1] + h, c)]]);
    }
    return u();
  }
  function UC(n) {
    return lH((Qn + n) / 2);
  }
  function qWe(n, e) {
    var t = ot(n), i = n === e ? nt(n) : wR(t / ot(e)) / wR(UC(e) / UC(n)), r = t * ZM(UC(n), i) / i;
    if (!i) return mE;
    function s(o, a) {
      r > 0 ? a < -Qn + qe && (a = -Qn + qe) : a > Qn - qe && (a = Qn - qe);
      var l = r / ZM(UC(a), i);
      return [l * nt(i * o), r - l * ot(i * o)];
    }
    return s.invert = function(o, a) {
      var l = r - a, c = to(i) * Dr(o * o + l * l), u = ll(o, Dt(l)) * to(l);
      return l * i < 0 && (u -= bt * to(o) * to(l)), [u / i, 2 * im(ZM(r / c, 1 / i)) - Qn];
    }, s;
  }
  function XWe() {
    return dH(qWe).scale(109.5).parallels([30, 30]);
  }
  function PR(n, e) {
    return [n, e];
  }
  PR.invert = PR;
  function ZWe() {
    return jc(PR).scale(152.63);
  }
  function QWe(n, e) {
    var t = ot(n), i = n === e ? nt(n) : (t - ot(e)) / (e - n), r = t / i + n;
    if (Dt(i) < qe) return PR;
    function s(o, a) {
      var l = r - a, c = i * o;
      return [l * nt(c), r - l * ot(c)];
    }
    return s.invert = function(o, a) {
      var l = r - a, c = ll(o, Dt(l)) * to(l);
      return l * i < 0 && (c -= bt * to(o) * to(l)), [c / i, r - to(i) * Dr(o * o + l * l)];
    }, s;
  }
  function JWe() {
    return dH(QWe).scale(131.154).center([0, 13.9389]);
  }
  var Vv = 1.340264, Wv = -0.081106, jv = 893e-6, zv = 3796e-6, IR = Dr(3) / 2, eje = 12;
  function _q(n, e) {
    var t = co(IR * nt(e)), i = t * t, r = i * i * i;
    return [n * ot(t) / (IR * (Vv + 3 * Wv * i + r * (7 * jv + 9 * zv * i))), t * (Vv + Wv * i + r * (jv + zv * i))];
  }
  _q.invert = function(n, e) {
    for (var t = e, i = t * t, r = i * i * i, s = 0, o, a, l; s < eje && (a = t * (Vv + Wv * i + r * (jv + zv * i)) - e, l = Vv + 3 * Wv * i + r * (7 * jv + 9 * zv * i), t -= o = a / l, i = t * t, r = i * i * i, !(Dt(o) < aH)); ++s)
      ;
    return [IR * n * (Vv + 3 * Wv * i + r * (7 * jv + 9 * zv * i)) / ot(t), co(nt(t) / IR)];
  };
  function tje() {
    return jc(_q).scale(177.158);
  }
  function Rq(n, e) {
    var t = ot(e), i = ot(n) * t;
    return [t * nt(n) / i, nt(e) / i];
  }
  Rq.invert = Ey(im);
  function nje() {
    return jc(Rq).scale(144.049).clipAngle(60);
  }
  function Eq(n, e) {
    var t = e * e, i = t * t;
    return [n * (0.8707 - 0.131979 * t + i * (-0.013791 + i * (3971e-6 * t - 1529e-6 * i))), e * (1.007226 + t * (0.015085 + i * (-0.044475 + 0.028874 * t - 5916e-6 * i)))];
  }
  Eq.invert = function(n, e) {
    var t = e, i = 25, r;
    do {
      var s = t * t, o = s * s;
      t -= r = (t * (1.007226 + s * (0.015085 + o * (-0.044475 + 0.028874 * s - 5916e-6 * o))) - e) / (1.007226 + s * (0.015085 * 3 + o * (-0.044475 * 7 + 0.028874 * 9 * s - 5916e-6 * 11 * o)));
    } while (Dt(r) > qe && --i > 0);
    return [n / (0.8707 + (s = t * t) * (-0.131979 + s * (-0.013791 + s * s * s * (3971e-6 - 1529e-6 * s)))), t];
  };
  function ije() {
    return jc(Eq).scale(175.295);
  }
  function xq(n, e) {
    return [ot(e) * nt(n), nt(e)];
  }
  xq.invert = Ey(co);
  function YI() {
    return jc(xq).scale(249.5).clipAngle(90 + qe);
  }
  function Tq(n, e) {
    var t = ot(e), i = 1 + ot(n) * t;
    return [t * nt(n) / i, nt(e) / i];
  }
  Tq.invert = Ey(function(n) {
    return 2 * im(n);
  });
  function rje() {
    return jc(Tq).scale(250).clipAngle(142);
  }
  function Mq(n, e) {
    return [wR(lH((Qn + e) / 2)), -n];
  }
  Mq.invert = function(n, e) {
    return [-e, 2 * im(KK(n)) - Qn];
  };
  function sje() {
    var n = Sq(Mq), e = n.center, t = n.rotate;
    return n.center = function(i) {
      return arguments.length ? e([-i[1], i[0]]) : (i = e(), [i[1], -i[0]]);
    }, n.rotate = function(i) {
      return arguments.length ? t([i[0], i[1], i.length > 2 ? i[2] + 90 : 90]) : (i = t(), [i[0], i[1], i[2] - 90]);
    }, t([0, 0, 90]).scale(159.155);
  }
  function zt(n) {
    for (var e = n.length / 6 | 0, t = new Array(e), i = 0; i < e; ) t[i] = "#" + n.slice(i * 6, ++i * 6);
    return t;
  }
  function bE(n, e, t) {
    n.prototype = e.prototype = t, t.constructor = n;
  }
  function fH(n, e) {
    var t = Object.create(n.prototype);
    for (var i in e) t[i] = e[i];
    return t;
  }
  function rm() {
  }
  var hf = 0.7, Pp = 1 / hf, up = "\\s*([+-]?\\d+)\\s*", Pw = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*", el = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*", oje = /^#([0-9a-f]{3,8})$/, aje = new RegExp(`^rgb\\(${up},${up},${up}\\)$`), lje = new RegExp(`^rgb\\(${el},${el},${el}\\)$`), cje = new RegExp(`^rgba\\(${up},${up},${up},${Pw}\\)$`), uje = new RegExp(`^rgba\\(${el},${el},${el},${Pw}\\)$`), hje = new RegExp(`^hsl\\(${Pw},${el},${el}\\)$`), dje = new RegExp(`^hsla\\(${Pw},${el},${el},${Pw}\\)$`), Ij = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  };
  bE(rm, gH, {
    copy(n) {
      return Object.assign(new this.constructor(), this, n);
    },
    displayable() {
      return this.rgb().displayable();
    },
    hex: Oj,
    // Deprecated! Use color.formatHex.
    formatHex: Oj,
    formatHex8: fje,
    formatHsl: gje,
    formatRgb: kj,
    toString: kj
  });
  function Oj() {
    return this.rgb().formatHex();
  }
  function fje() {
    return this.rgb().formatHex8();
  }
  function gje() {
    return Pq(this).formatHsl();
  }
  function kj() {
    return this.rgb().formatRgb();
  }
  function gH(n) {
    var e, t;
    return n = (n + "").trim().toLowerCase(), (e = oje.exec(n)) ? (t = e[1].length, e = parseInt(e[1], 16), t === 6 ? Dj(e) : t === 3 ? new cr(e >> 8 & 15 | e >> 4 & 240, e >> 4 & 15 | e & 240, (e & 15) << 4 | e & 15, 1) : t === 8 ? GC(e >> 24 & 255, e >> 16 & 255, e >> 8 & 255, (e & 255) / 255) : t === 4 ? GC(e >> 12 & 15 | e >> 8 & 240, e >> 8 & 15 | e >> 4 & 240, e >> 4 & 15 | e & 240, ((e & 15) << 4 | e & 15) / 255) : null) : (e = aje.exec(n)) ? new cr(e[1], e[2], e[3], 1) : (e = lje.exec(n)) ? new cr(e[1] * 255 / 100, e[2] * 255 / 100, e[3] * 255 / 100, 1) : (e = cje.exec(n)) ? GC(e[1], e[2], e[3], e[4]) : (e = uje.exec(n)) ? GC(e[1] * 255 / 100, e[2] * 255 / 100, e[3] * 255 / 100, e[4]) : (e = hje.exec(n)) ? Hj(e[1], e[2] / 100, e[3] / 100, 1) : (e = dje.exec(n)) ? Hj(e[1], e[2] / 100, e[3] / 100, e[4]) : Ij.hasOwnProperty(n) ? Dj(Ij[n]) : n === "transparent" ? new cr(NaN, NaN, NaN, 0) : null;
  }
  function Dj(n) {
    return new cr(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
  }
  function GC(n, e, t, i) {
    return i <= 0 && (n = e = t = NaN), new cr(n, e, t, i);
  }
  function Aq(n) {
    return n instanceof rm || (n = gH(n)), n ? (n = n.rgb(), new cr(n.r, n.g, n.b, n.opacity)) : new cr();
  }
  function Iw(n, e, t, i) {
    return arguments.length === 1 ? Aq(n) : new cr(n, e, t, i ?? 1);
  }
  function cr(n, e, t, i) {
    this.r = +n, this.g = +e, this.b = +t, this.opacity = +i;
  }
  bE(cr, Iw, fH(rm, {
    brighter(n) {
      return n = n == null ? Pp : Math.pow(Pp, n), new cr(this.r * n, this.g * n, this.b * n, this.opacity);
    },
    darker(n) {
      return n = n == null ? hf : Math.pow(hf, n), new cr(this.r * n, this.g * n, this.b * n, this.opacity);
    },
    rgb() {
      return this;
    },
    clamp() {
      return new cr(Fd(this.r), Fd(this.g), Fd(this.b), OR(this.opacity));
    },
    displayable() {
      return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
    },
    hex: Nj,
    // Deprecated! Use color.formatHex.
    formatHex: Nj,
    formatHex8: pje,
    formatRgb: Lj,
    toString: Lj
  }));
  function Nj() {
    return `#${Pd(this.r)}${Pd(this.g)}${Pd(this.b)}`;
  }
  function pje() {
    return `#${Pd(this.r)}${Pd(this.g)}${Pd(this.b)}${Pd((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
  }
  function Lj() {
    const n = OR(this.opacity);
    return `${n === 1 ? "rgb(" : "rgba("}${Fd(this.r)}, ${Fd(this.g)}, ${Fd(this.b)}${n === 1 ? ")" : `, ${n})`}`;
  }
  function OR(n) {
    return isNaN(n) ? 1 : Math.max(0, Math.min(1, n));
  }
  function Fd(n) {
    return Math.max(0, Math.min(255, Math.round(n) || 0));
  }
  function Pd(n) {
    return n = Fd(n), (n < 16 ? "0" : "") + n.toString(16);
  }
  function Hj(n, e, t, i) {
    return i <= 0 ? n = e = t = NaN : t <= 0 || t >= 1 ? n = e = NaN : e <= 0 && (n = NaN), new Go(n, e, t, i);
  }
  function Pq(n) {
    if (n instanceof Go) return new Go(n.h, n.s, n.l, n.opacity);
    if (n instanceof rm || (n = gH(n)), !n) return new Go();
    if (n instanceof Go) return n;
    n = n.rgb();
    var e = n.r / 255, t = n.g / 255, i = n.b / 255, r = Math.min(e, t, i), s = Math.max(e, t, i), o = NaN, a = s - r, l = (s + r) / 2;
    return a ? (e === s ? o = (t - i) / a + (t < i) * 6 : t === s ? o = (i - e) / a + 2 : o = (e - t) / a + 4, a /= l < 0.5 ? s + r : 2 - s - r, o *= 60) : a = l > 0 && l < 1 ? 0 : o, new Go(o, a, l, n.opacity);
  }
  function mje(n, e, t, i) {
    return arguments.length === 1 ? Pq(n) : new Go(n, e, t, i ?? 1);
  }
  function Go(n, e, t, i) {
    this.h = +n, this.s = +e, this.l = +t, this.opacity = +i;
  }
  bE(Go, mje, fH(rm, {
    brighter(n) {
      return n = n == null ? Pp : Math.pow(Pp, n), new Go(this.h, this.s, this.l * n, this.opacity);
    },
    darker(n) {
      return n = n == null ? hf : Math.pow(hf, n), new Go(this.h, this.s, this.l * n, this.opacity);
    },
    rgb() {
      var n = this.h % 360 + (this.h < 0) * 360, e = isNaN(n) || isNaN(this.s) ? 0 : this.s, t = this.l, i = t + (t < 0.5 ? t : 1 - t) * e, r = 2 * t - i;
      return new cr(nA(n >= 240 ? n - 240 : n + 120, r, i), nA(n, r, i), nA(n < 120 ? n + 240 : n - 120, r, i), this.opacity);
    },
    clamp() {
      return new Go($j(this.h), YC(this.s), YC(this.l), OR(this.opacity));
    },
    displayable() {
      return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
    },
    formatHsl() {
      const n = OR(this.opacity);
      return `${n === 1 ? "hsl(" : "hsla("}${$j(this.h)}, ${YC(this.s) * 100}%, ${YC(this.l) * 100}%${n === 1 ? ")" : `, ${n})`}`;
    }
  }));
  function $j(n) {
    return n = (n || 0) % 360, n < 0 ? n + 360 : n;
  }
  function YC(n) {
    return Math.max(0, Math.min(1, n || 0));
  }
  function nA(n, e, t) {
    return (n < 60 ? e + (t - e) * n / 60 : n < 180 ? t : n < 240 ? e + (t - e) * (240 - n) / 60 : e) * 255;
  }
  const bje = Math.PI / 180, vje = 180 / Math.PI;
  var Iq = -0.14861, pH = 1.78277, mH = -0.29227, vE = -0.90649, Ow = 1.97294, Fj = Ow * vE, Bj = Ow * pH, Vj = pH * mH - vE * Iq;
  function wje(n) {
    if (n instanceof Bd) return new Bd(n.h, n.s, n.l, n.opacity);
    n instanceof cr || (n = Aq(n));
    var e = n.r / 255, t = n.g / 255, i = n.b / 255, r = (Vj * i + Fj * e - Bj * t) / (Vj + Fj - Bj), s = i - r, o = (Ow * (t - r) - mH * s) / vE, a = Math.sqrt(o * o + s * s) / (Ow * r * (1 - r)), l = a ? Math.atan2(o, s) * vje - 120 : NaN;
    return new Bd(l < 0 ? l + 360 : l, a, r, n.opacity);
  }
  function cl(n, e, t, i) {
    return arguments.length === 1 ? wje(n) : new Bd(n, e, t, i ?? 1);
  }
  function Bd(n, e, t, i) {
    this.h = +n, this.s = +e, this.l = +t, this.opacity = +i;
  }
  bE(Bd, cl, fH(rm, {
    brighter(n) {
      return n = n == null ? Pp : Math.pow(Pp, n), new Bd(this.h, this.s, this.l * n, this.opacity);
    },
    darker(n) {
      return n = n == null ? hf : Math.pow(hf, n), new Bd(this.h, this.s, this.l * n, this.opacity);
    },
    rgb() {
      var n = isNaN(this.h) ? 0 : (this.h + 120) * bje, e = +this.l, t = isNaN(this.s) ? 0 : this.s * e * (1 - e), i = Math.cos(n), r = Math.sin(n);
      return new cr(255 * (e + t * (Iq * i + pH * r)), 255 * (e + t * (mH * i + vE * r)), 255 * (e + t * (Ow * i)), this.opacity);
    }
  }));
  function yje(n, e, t, i, r) {
    var s = n * n, o = s * n;
    return ((1 - 3 * n + 3 * s - o) * e + (4 - 6 * s + 3 * o) * t + (1 + 3 * n + 3 * s - 3 * o) * i + o * r) / 6;
  }
  function Cje(n) {
    var e = n.length - 1;
    return function(t) {
      var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, e - 1) : Math.floor(t * e), r = n[i], s = n[i + 1], o = i > 0 ? n[i - 1] : 2 * r - s, a = i < e - 1 ? n[i + 2] : 2 * s - r;
      return yje((t - i / e) * e, o, r, s, a);
    };
  }
  const bH = (n) => () => n;
  function Oq(n, e) {
    return function(t) {
      return n + t * e;
    };
  }
  function Sje(n, e, t) {
    return n = Math.pow(n, t), e = Math.pow(e, t) - n, t = 1 / t, function(i) {
      return Math.pow(n + i * e, t);
    };
  }
  function _je(n, e) {
    var t = e - n;
    return t ? Oq(n, t > 180 || t < -180 ? t - 360 * Math.round(t / 360) : t) : bH(isNaN(n) ? e : n);
  }
  function Rje(n) {
    return (n = +n) == 1 ? hp : function(e, t) {
      return t - e ? Sje(e, t, n) : bH(isNaN(e) ? t : e);
    };
  }
  function hp(n, e) {
    var t = e - n;
    return t ? Oq(n, t) : bH(isNaN(n) ? e : n);
  }
  (function n(e) {
    var t = Rje(e);
    function i(r, s) {
      var o = t((r = Iw(r)).r, (s = Iw(s)).r), a = t(r.g, s.g), l = t(r.b, s.b), c = hp(r.opacity, s.opacity);
      return function(u) {
        return r.r = o(u), r.g = a(u), r.b = l(u), r.opacity = c(u), r + "";
      };
    }
    return i.gamma = n, i;
  })(1);
  function Eje(n) {
    return function(e) {
      var t = e.length, i = new Array(t), r = new Array(t), s = new Array(t), o, a;
      for (o = 0; o < t; ++o)
        a = Iw(e[o]), i[o] = a.r || 0, r[o] = a.g || 0, s[o] = a.b || 0;
      return i = n(i), r = n(r), s = n(s), a.opacity = 1, function(l) {
        return a.r = i(l), a.g = r(l), a.b = s(l), a + "";
      };
    };
  }
  var xje = Eje(Cje);
  function kq(n) {
    return function e(t) {
      t = +t;
      function i(r, s) {
        var o = n((r = cl(r)).h, (s = cl(s)).h), a = hp(r.s, s.s), l = hp(r.l, s.l), c = hp(r.opacity, s.opacity);
        return function(u) {
          return r.h = o(u), r.s = a(u), r.l = l(Math.pow(u, t)), r.opacity = c(u), r + "";
        };
      }
      return i.gamma = e, i;
    }(1);
  }
  kq(_je);
  var vH = kq(hp);
  const pn = (n) => xje(n[n.length - 1]);
  var Tje = new Array(3).concat("d8b365f5f5f55ab4ac", "a6611adfc27d80cdc1018571", "a6611adfc27df5f5f580cdc1018571", "8c510ad8b365f6e8c3c7eae55ab4ac01665e", "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e", "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e", "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e", "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30", "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(zt);
  const Mje = pn(Tje);
  var Aje = new Array(3).concat("af8dc3f7f7f77fbf7b", "7b3294c2a5cfa6dba0008837", "7b3294c2a5cff7f7f7a6dba0008837", "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837", "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837", "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837", "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837", "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b", "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(zt);
  const Pje = pn(Aje);
  var Ije = new Array(3).concat("e9a3c9f7f7f7a1d76a", "d01c8bf1b6dab8e1864dac26", "d01c8bf1b6daf7f7f7b8e1864dac26", "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221", "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221", "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221", "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221", "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419", "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(zt);
  const Oje = pn(Ije);
  var kje = new Array(3).concat("998ec3f7f7f7f1a340", "5e3c99b2abd2fdb863e66101", "5e3c99b2abd2f7f7f7fdb863e66101", "542788998ec3d8daebfee0b6f1a340b35806", "542788998ec3d8daebf7f7f7fee0b6f1a340b35806", "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806", "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806", "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08", "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(zt);
  const Dje = pn(kje);
  var Nje = new Array(3).concat("ef8a62f7f7f767a9cf", "ca0020f4a58292c5de0571b0", "ca0020f4a582f7f7f792c5de0571b0", "b2182bef8a62fddbc7d1e5f067a9cf2166ac", "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac", "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac", "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac", "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061", "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(zt);
  const Lje = pn(Nje);
  var Hje = new Array(3).concat("ef8a62ffffff999999", "ca0020f4a582bababa404040", "ca0020f4a582ffffffbababa404040", "b2182bef8a62fddbc7e0e0e09999994d4d4d", "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d", "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d", "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d", "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a", "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(zt);
  const $je = pn(Hje);
  var Fje = new Array(3).concat("fc8d59ffffbf91bfdb", "d7191cfdae61abd9e92c7bb6", "d7191cfdae61ffffbfabd9e92c7bb6", "d73027fc8d59fee090e0f3f891bfdb4575b4", "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4", "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4", "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4", "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695", "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(zt);
  const Bje = pn(Fje);
  var Vje = new Array(3).concat("fc8d59ffffbf91cf60", "d7191cfdae61a6d96a1a9641", "d7191cfdae61ffffbfa6d96a1a9641", "d73027fc8d59fee08bd9ef8b91cf601a9850", "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850", "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850", "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850", "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837", "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(zt);
  const Wje = pn(Vje);
  var jje = new Array(3).concat("fc8d59ffffbf99d594", "d7191cfdae61abdda42b83ba", "d7191cfdae61ffffbfabdda42b83ba", "d53e4ffc8d59fee08be6f59899d5943288bd", "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd", "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd", "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd", "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2", "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(zt);
  const zje = pn(jje);
  var Uje = new Array(3).concat("e5f5f999d8c92ca25f", "edf8fbb2e2e266c2a4238b45", "edf8fbb2e2e266c2a42ca25f006d2c", "edf8fbccece699d8c966c2a42ca25f006d2c", "edf8fbccece699d8c966c2a441ae76238b45005824", "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824", "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(zt);
  const Gje = pn(Uje);
  var Yje = new Array(3).concat("e0ecf49ebcda8856a7", "edf8fbb3cde38c96c688419d", "edf8fbb3cde38c96c68856a7810f7c", "edf8fbbfd3e69ebcda8c96c68856a7810f7c", "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b", "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b", "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(zt);
  const Kje = pn(Yje);
  var qje = new Array(3).concat("e0f3dba8ddb543a2ca", "f0f9e8bae4bc7bccc42b8cbe", "f0f9e8bae4bc7bccc443a2ca0868ac", "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac", "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e", "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e", "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(zt);
  const Xje = pn(qje);
  var Zje = new Array(3).concat("fee8c8fdbb84e34a33", "fef0d9fdcc8afc8d59d7301f", "fef0d9fdcc8afc8d59e34a33b30000", "fef0d9fdd49efdbb84fc8d59e34a33b30000", "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000", "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000", "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(zt);
  const Qje = pn(Zje);
  var Jje = new Array(3).concat("ece2f0a6bddb1c9099", "f6eff7bdc9e167a9cf02818a", "f6eff7bdc9e167a9cf1c9099016c59", "f6eff7d0d1e6a6bddb67a9cf1c9099016c59", "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450", "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450", "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(zt);
  const e6e = pn(Jje);
  var t6e = new Array(3).concat("ece7f2a6bddb2b8cbe", "f1eef6bdc9e174a9cf0570b0", "f1eef6bdc9e174a9cf2b8cbe045a8d", "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d", "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b", "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b", "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(zt);
  const n6e = pn(t6e);
  var i6e = new Array(3).concat("e7e1efc994c7dd1c77", "f1eef6d7b5d8df65b0ce1256", "f1eef6d7b5d8df65b0dd1c77980043", "f1eef6d4b9dac994c7df65b0dd1c77980043", "f1eef6d4b9dac994c7df65b0e7298ace125691003f", "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f", "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(zt);
  const r6e = pn(i6e);
  var s6e = new Array(3).concat("fde0ddfa9fb5c51b8a", "feebe2fbb4b9f768a1ae017e", "feebe2fbb4b9f768a1c51b8a7a0177", "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177", "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177", "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177", "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(zt);
  const o6e = pn(s6e);
  var a6e = new Array(3).concat("edf8b17fcdbb2c7fb8", "ffffcca1dab441b6c4225ea8", "ffffcca1dab441b6c42c7fb8253494", "ffffccc7e9b47fcdbb41b6c42c7fb8253494", "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84", "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84", "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(zt);
  const l6e = pn(a6e);
  var c6e = new Array(3).concat("f7fcb9addd8e31a354", "ffffccc2e69978c679238443", "ffffccc2e69978c67931a354006837", "ffffccd9f0a3addd8e78c67931a354006837", "ffffccd9f0a3addd8e78c67941ab5d238443005a32", "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32", "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(zt);
  const u6e = pn(c6e);
  var h6e = new Array(3).concat("fff7bcfec44fd95f0e", "ffffd4fed98efe9929cc4c02", "ffffd4fed98efe9929d95f0e993404", "ffffd4fee391fec44ffe9929d95f0e993404", "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04", "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04", "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(zt);
  const d6e = pn(h6e);
  var f6e = new Array(3).concat("ffeda0feb24cf03b20", "ffffb2fecc5cfd8d3ce31a1c", "ffffb2fecc5cfd8d3cf03b20bd0026", "ffffb2fed976feb24cfd8d3cf03b20bd0026", "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026", "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026", "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(zt);
  const g6e = pn(f6e);
  var p6e = new Array(3).concat("deebf79ecae13182bd", "eff3ffbdd7e76baed62171b5", "eff3ffbdd7e76baed63182bd08519c", "eff3ffc6dbef9ecae16baed63182bd08519c", "eff3ffc6dbef9ecae16baed64292c62171b5084594", "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594", "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(zt);
  const m6e = pn(p6e);
  var b6e = new Array(3).concat("e5f5e0a1d99b31a354", "edf8e9bae4b374c476238b45", "edf8e9bae4b374c47631a354006d2c", "edf8e9c7e9c0a1d99b74c47631a354006d2c", "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32", "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32", "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(zt);
  const v6e = pn(b6e);
  var w6e = new Array(3).concat("f0f0f0bdbdbd636363", "f7f7f7cccccc969696525252", "f7f7f7cccccc969696636363252525", "f7f7f7d9d9d9bdbdbd969696636363252525", "f7f7f7d9d9d9bdbdbd969696737373525252252525", "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525", "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(zt);
  const y6e = pn(w6e);
  var C6e = new Array(3).concat("efedf5bcbddc756bb1", "f2f0f7cbc9e29e9ac86a51a3", "f2f0f7cbc9e29e9ac8756bb154278f", "f2f0f7dadaebbcbddc9e9ac8756bb154278f", "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486", "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486", "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(zt);
  const S6e = pn(C6e);
  var _6e = new Array(3).concat("fee0d2fc9272de2d26", "fee5d9fcae91fb6a4acb181d", "fee5d9fcae91fb6a4ade2d26a50f15", "fee5d9fcbba1fc9272fb6a4ade2d26a50f15", "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d", "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d", "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(zt);
  const R6e = pn(_6e);
  var E6e = new Array(3).concat("fee6cefdae6be6550d", "feeddefdbe85fd8d3cd94701", "feeddefdbe85fd8d3ce6550da63603", "feeddefdd0a2fdae6bfd8d3ce6550da63603", "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04", "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04", "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(zt);
  const x6e = pn(E6e);
  function T6e(n) {
    return n = Math.max(0, Math.min(1, n)), "rgb(" + Math.max(0, Math.min(255, Math.round(-4.54 - n * (35.34 - n * (2381.73 - n * (6402.7 - n * (7024.72 - n * 2710.57))))))) + ", " + Math.max(0, Math.min(255, Math.round(32.49 + n * (170.73 + n * (52.82 - n * (131.46 - n * (176.58 - n * 67.37))))))) + ", " + Math.max(0, Math.min(255, Math.round(81.24 + n * (442.36 - n * (2482.43 - n * (6167.24 - n * (6614.94 - n * 2475.67))))))) + ")";
  }
  const M6e = vH(cl(300, 0.5, 0), cl(-240, 0.5, 1));
  var A6e = vH(cl(-100, 0.75, 0.35), cl(80, 1.5, 0.8)), P6e = vH(cl(260, 0.75, 0.35), cl(80, 1.5, 0.8)), KC = cl();
  function I6e(n) {
    (n < 0 || n > 1) && (n -= Math.floor(n));
    var e = Math.abs(n - 0.5);
    return KC.h = 360 * n - 100, KC.s = 1.5 - 1.5 * e, KC.l = 0.8 - 0.9 * e, KC + "";
  }
  var qC = Iw(), O6e = Math.PI / 3, k6e = Math.PI * 2 / 3;
  function D6e(n) {
    var e;
    return n = (0.5 - n) * Math.PI, qC.r = 255 * (e = Math.sin(n)) * e, qC.g = 255 * (e = Math.sin(n + O6e)) * e, qC.b = 255 * (e = Math.sin(n + k6e)) * e, qC + "";
  }
  function N6e(n) {
    return n = Math.max(0, Math.min(1, n)), "rgb(" + Math.max(0, Math.min(255, Math.round(34.61 + n * (1172.33 - n * (10793.56 - n * (33300.12 - n * (38394.49 - n * 14825.05))))))) + ", " + Math.max(0, Math.min(255, Math.round(23.31 + n * (557.33 + n * (1225.33 - n * (3574.96 - n * (1073.77 + n * 707.56))))))) + ", " + Math.max(0, Math.min(255, Math.round(27.2 + n * (3211.1 - n * (15327.97 - n * (27814 - n * (22569.18 - n * 6838.66))))))) + ")";
  }
  function wE(n) {
    var e = n.length;
    return function(t) {
      return n[Math.max(0, Math.min(e - 1, Math.floor(t * e)))];
    };
  }
  const L6e = wE(zt("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
  var H6e = wE(zt("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")), $6e = wE(zt("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")), F6e = wE(zt("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));
  function B6e(n) {
    return n;
  }
  function V6e(n) {
    if (n == null) return B6e;
    var e, t, i = n.scale[0], r = n.scale[1], s = n.translate[0], o = n.translate[1];
    return function(a, l) {
      l || (e = t = 0);
      var c = 2, u = a.length, h = new Array(u);
      for (h[0] = (e += a[0]) * i + s, h[1] = (t += a[1]) * r + o; c < u; ) h[c] = a[c], ++c;
      return h;
    };
  }
  function W6e(n, e) {
    for (var t, i = n.length, r = i - e; r < --i; ) t = n[r], n[r++] = n[i], n[i] = t;
  }
  function j6e(n, e) {
    return typeof e == "string" && (e = n.objects[e]), e.type === "GeometryCollection" ? {
      type: "FeatureCollection",
      features: e.geometries.map(function(t) {
        return Wj(n, t);
      })
    } : Wj(n, e);
  }
  function Wj(n, e) {
    var t = e.id, i = e.bbox, r = e.properties == null ? {} : e.properties, s = z6e(n, e);
    return t == null && i == null ? {
      type: "Feature",
      properties: r,
      geometry: s
    } : i == null ? {
      type: "Feature",
      id: t,
      properties: r,
      geometry: s
    } : {
      type: "Feature",
      id: t,
      bbox: i,
      properties: r,
      geometry: s
    };
  }
  function z6e(n, e) {
    var t = V6e(n.transform), i = n.arcs;
    function r(u, h) {
      h.length && h.pop();
      for (var d = i[u < 0 ? ~u : u], f = 0, g = d.length; f < g; ++f)
        h.push(t(d[f], f));
      u < 0 && W6e(h, g);
    }
    function s(u) {
      return t(u);
    }
    function o(u) {
      for (var h = [], d = 0, f = u.length; d < f; ++d) r(u[d], h);
      return h.length < 2 && h.push(h[0]), h;
    }
    function a(u) {
      for (var h = o(u); h.length < 4; ) h.push(h[0]);
      return h;
    }
    function l(u) {
      return u.map(a);
    }
    function c(u) {
      var h = u.type, d;
      switch (h) {
        case "GeometryCollection":
          return {
            type: h,
            geometries: u.geometries.map(c)
          };
        case "Point":
          d = s(u.coordinates);
          break;
        case "MultiPoint":
          d = u.coordinates.map(s);
          break;
        case "LineString":
          d = o(u.arcs);
          break;
        case "MultiLineString":
          d = u.arcs.map(o);
          break;
        case "Polygon":
          d = l(u.arcs);
          break;
        case "MultiPolygon":
          d = u.arcs.map(l);
          break;
        default:
          return null;
      }
      return {
        type: h,
        coordinates: d
      };
    }
    return c(e);
  }
  const Uv = {
    geoAzimuthalEqualArea: GWe,
    geoAzimuthalEquidistant: YWe,
    geoGnomonic: nje,
    geoOrthographic: YI,
    geoStereographic: rje,
    geoEqualEarth: tje,
    geoAlbers: vq,
    geoAlbersUsa: UWe,
    geoConicConformal: XWe,
    geoConicEqualArea: AR,
    geoConicEquidistant: JWe,
    geoEquirectangular: ZWe,
    geoMercator: KWe,
    geoTransverseMercator: sje,
    geoNaturalEarth1: ije
  };
  Object.keys(Uv).forEach((n) => {
    Uv[`${n.charAt(3).toLowerCase()}${n.slice(4)}`] = Uv[n];
  });
  class If extends oh {
    constructor(e) {
      super(e), this.outlineBounds = null, this.oldChartBounds = null, this.geoPath = Tj();
    }
    init(e) {
      e.position = "chartArea", super.init(e), typeof e.projection == "function" ? this.projection = e.projection : this.projection = (Uv[e.projection] || Uv.albersUsa)(), this.geoPath.projection(this.projection), this.outlineBounds = null, this.oldChartBounds = null;
    }
    computeBounds(e) {
      const t = Tj(this.projection.fitWidth(1e3, e)).bounds(e), i = Math.ceil(t[1][1] - t[0][1]), r = Math.ceil(t[1][0] - t[0][0]), s = this.projection.translate();
      this.outlineBounds = {
        width: r,
        height: i,
        aspectRatio: r / i,
        refScale: this.projection.scale(),
        refX: s[0],
        refY: s[1]
      };
    }
    updateBounds() {
      const e = this.chart.chartArea, t = this.outlineBounds;
      if (!t)
        return !1;
      const i = this.options.padding, r = typeof i == "number" ? i : i.top, s = typeof i == "number" ? i : i.left, o = typeof i == "number" ? i : i.bottom, a = typeof i == "number" ? i : i.right, l = e.right - e.left - s - a, c = e.bottom - e.top - r - o, u = this.oldChartBounds;
      this.oldChartBounds = {
        chartWidth: l,
        chartHeight: c
      };
      const h = Math.min(l / t.width, c / t.height), d = t.width * h, f = t.height * h, g = (l - d) * 0.5 + e.left + s, p = (c - f) * 0.5 + e.top + r, m = this.options;
      return this.projection.scale(t.refScale * h * m.projectionScale).translate([h * t.refX + g + m.projectionOffset[0], h * t.refY + p + m.projectionOffset[1]]), !u || u.chartWidth !== this.oldChartBounds.chartWidth || u.chartHeight !== this.oldChartBounds.chartHeight;
    }
  }
  If.id = "projection";
  If.defaults = {
    projection: "albersUsa",
    projectionScale: 1,
    projectionOffset: [0, 0],
    padding: 0
  };
  If.descriptors = {
    _scriptable: (n) => n !== "projection",
    _indexable: (n) => n !== "projectionOffset"
  };
  const yE = {
    position: "chartArea",
    property: "value",
    grid: {
      z: 1,
      drawOnChartArea: !1
    },
    ticks: {
      z: 1
    },
    legend: {
      align: "right",
      position: "bottom-right",
      length: 100,
      width: 50,
      margin: 8,
      indicatorWidth: 10
    }
  };
  function U6e(n) {
    const {
      indicatorWidth: e,
      align: t,
      margin: i
    } = n, r = (typeof i == "number" ? i : i.left) + (t === "right" ? e : 0), s = (typeof i == "number" ? i : i.top) + (t === "bottom" ? e : 0), o = (typeof i == "number" ? i : i.right) + (t === "left" ? e : 0), a = (typeof i == "number" ? i : i.bottom) + (t === "top" ? e : 0);
    return {
      left: r,
      top: s,
      right: o,
      bottom: a
    };
  }
  function G6e(n, e, t, i, r) {
    const {
      indicatorWidth: s,
      align: o,
      position: a
    } = e, l = o === "top" || o === "bottom", c = (o === "left" ? r.w : t) + (l ? s : 0), u = (o === "top" ? r.h : i) + (l ? 0 : s), h = U6e(e);
    if (typeof a == "string")
      switch (a) {
        case "top-left":
          return [h.left, h.top];
        case "top":
          return [(n.right - c) / 2, h.top];
        case "left":
          return [h.left, (n.bottom - u) / 2];
        case "top-right":
          return [n.right - c - h.right, h.top];
        case "bottom-right":
          return [n.right - c - h.right, n.bottom - u - h.bottom];
        case "bottom":
          return [(n.right - c) / 2, n.bottom - u - h.bottom];
        case "bottom-left":
          return [h.left, n.bottom - u - h.bottom];
        default:
          return [n.right - c - h.right, (n.bottom - u) / 2];
      }
    return [a.x, a.y];
  }
  class Zg extends Wp {
    constructor() {
      super(...arguments), this.legendSize = {
        w: 0,
        h: 0
      };
    }
    init(e) {
      e.position = "chartArea", super.init(e), this.axis = "r";
    }
    parse(e, t) {
      return e && typeof e[this.options.property] == "number" ? e[this.options.property] : super.parse(e, t);
    }
    isHorizontal() {
      return this.options.legend.align === "top" || this.options.legend.align === "bottom";
    }
    _getNormalizedValue(e) {
      return e == null || Number.isNaN(e) ? null : (e - this._startValue) / this._valueRange;
    }
    update(e, t, i) {
      const r = Math.min(t, this.bottom == null ? Number.POSITIVE_INFINITY : this.bottom), s = Math.min(e, this.right == null ? Number.POSITIVE_INFINITY : this.right), o = this.options.legend, a = this.isHorizontal(), l = (f, g) => f < 1 ? g * f : f, c = Math.min(s, l(a ? o.length : o.width, s)) - (a ? 0 : o.indicatorWidth), u = Math.min(r, l(a ? o.width : o.length, r)) - (a ? o.indicatorWidth : 0);
      this.legendSize = {
        w: c,
        h: u
      }, this.bottom = u, this.height = u, this.right = c, this.width = c;
      const h = this.options.position;
      this.options.position = this.options.legend.align;
      const d = super.update(c, u, i);
      return this.options.position = h, this.height = Math.min(u, this.height), this.width = Math.min(c, this.width), d;
    }
    _computeLabelArea() {
    }
    draw(e) {
      if (!this._isVisible())
        return;
      const t = G6e(e, this.options.legend, this.width, this.height, this.legendSize), {
        ctx: i
      } = this;
      i.save(), i.translate(t[0], t[1]);
      const r = this.options.position;
      this.options.position = this.options.legend.align, super.draw({
        ...e,
        bottom: this.height + 10,
        right: this.width
      }), this.options.position = r;
      const {
        indicatorWidth: s
      } = this.options.legend;
      switch (this.options.legend.align) {
        case "left":
          i.translate(this.legendSize.w, 0);
          break;
        case "top":
          i.translate(0, this.legendSize.h);
          break;
        case "bottom":
          i.translate(0, -s);
          break;
        default:
          i.translate(-s, 0);
          break;
      }
      this._drawIndicator(), i.restore();
    }
    _drawIndicator() {
    }
  }
  class Dq extends jp {
    constructor() {
      super(...arguments), this.legendSize = {
        w: 0,
        h: 0
      };
    }
    init(e) {
      Zg.prototype.init.call(this, e);
    }
    parse(e, t) {
      return Zg.prototype.parse.call(this, e, t);
    }
    isHorizontal() {
      return this.options.legend.align === "top" || this.options.legend.align === "bottom";
    }
    _getNormalizedValue(e) {
      return e == null || Number.isNaN(e) ? null : (Math.log10(e) - this._startValue) / this._valueRange;
    }
    update(e, t, i) {
      return Zg.prototype.update.call(this, e, t, i);
    }
    _computeLabelArea() {
    }
    draw(e) {
      return Zg.prototype.draw.call(this, e);
    }
    _drawIndicator() {
    }
  }
  const rc = {
    interpolateBlues: m6e,
    interpolateBrBG: Mje,
    interpolateBuGn: Gje,
    interpolateBuPu: Kje,
    interpolateCividis: T6e,
    interpolateCool: P6e,
    interpolateCubehelixDefault: M6e,
    interpolateGnBu: Xje,
    interpolateGreens: v6e,
    interpolateGreys: y6e,
    interpolateInferno: $6e,
    interpolateMagma: H6e,
    interpolateOrRd: Qje,
    interpolateOranges: x6e,
    interpolatePRGn: Pje,
    interpolatePiYG: Oje,
    interpolatePlasma: F6e,
    interpolatePuBu: n6e,
    interpolatePuBuGn: e6e,
    interpolatePuOr: Dje,
    interpolatePuRd: r6e,
    interpolatePurples: S6e,
    interpolateRainbow: I6e,
    interpolateRdBu: Lje,
    interpolateRdGy: $je,
    interpolateRdPu: o6e,
    interpolateRdYlBu: Bje,
    interpolateRdYlGn: Wje,
    interpolateReds: R6e,
    interpolateSinebow: D6e,
    interpolateSpectral: zje,
    interpolateTurbo: N6e,
    interpolateViridis: L6e,
    interpolateWarm: A6e,
    interpolateYlGn: u6e,
    interpolateYlGnBu: l6e,
    interpolateYlOrBr: d6e,
    interpolateYlOrRd: g6e
  };
  Object.keys(rc).forEach((n) => {
    rc[`${n.charAt(11).toLowerCase()}${n.slice(12)}`] = rc[n], rc[n.slice(11)] = rc[n];
  });
  function Nq(n, e) {
    const t = 1 / e;
    if (n <= t)
      return 0;
    if (n >= 1 - t)
      return 1;
    for (let i = 0; i < 1; i += t)
      if (n < i)
        return i - t / 2;
    return n;
  }
  const Lq = {
    interpolate: "blues",
    missing: "transparent",
    quantize: 0
  };
  class Qu extends Zg {
    get interpolate() {
      const e = this.options;
      return e ? typeof e.interpolate == "function" ? e.interpolate : rc[e.interpolate] || rc.blues : (t) => `rgb(${t},${t},${t})`;
    }
    getColorForValue(e) {
      const t = this._getNormalizedValue(e);
      return t == null || Number.isNaN(t) ? this.options.missing : this.getColor(t);
    }
    getColor(e) {
      let t = e;
      return this.options.quantize > 0 && (t = Nq(t, this.options.quantize)), this.interpolate(t);
    }
    _drawIndicator() {
      const {
        indicatorWidth: e
      } = this.options.legend, t = this._reversePixels;
      if (this.isHorizontal()) {
        const i = this.width;
        if (this.options.quantize > 0) {
          const r = i / this.options.quantize, s = t ? (o) => i - r - o : (o) => o;
          for (let o = 0; o < i; o += r) {
            const a = (o + r / 2) / i;
            this.ctx.fillStyle = this.getColor(a), this.ctx.fillRect(s(o), 0, r, e);
          }
        } else {
          const r = t ? (s) => i - 1 - s : (s) => s;
          for (let s = 0; s < i; s += 1)
            this.ctx.fillStyle = this.getColor((s + 0.5) / i), this.ctx.fillRect(r(s), 0, 1, e);
        }
      } else {
        const i = this.height;
        if (this.options.quantize > 0) {
          const r = i / this.options.quantize, s = t ? (o) => i - r - o : (o) => o;
          for (let o = 0; o < i; o += r) {
            const a = (o + r / 2) / i;
            this.ctx.fillStyle = this.getColor(a), this.ctx.fillRect(0, s(o), e, r);
          }
        } else {
          const r = t ? (s) => i - 1 - s : (s) => s;
          for (let s = 0; s < i; s += 1)
            this.ctx.fillStyle = this.getColor((s + 0.5) / i), this.ctx.fillRect(0, r(s), e, 1);
        }
      }
    }
  }
  Qu.id = "color";
  Qu.defaults = _s({}, [Wp.defaults, yE, Lq]);
  Qu.descriptors = {
    _scriptable: (n) => n !== "interpolate",
    _indexable: !1
  };
  class wH extends Dq {
    constructor() {
      super(...arguments), this.interpolate = (e) => `rgb(${e},${e},${e})`;
    }
    init(e) {
      super.init(e), typeof e.interpolate == "function" ? this.interpolate = e.interpolate : this.interpolate = rc[e.interpolate] || rc.blues;
    }
    getColorForValue(e) {
      return Qu.prototype.getColorForValue.call(this, e);
    }
    getColor(e) {
      let t = e;
      return this.options.quantize > 0 && (t = Nq(t, this.options.quantize)), this.interpolate(t);
    }
    _drawIndicator() {
      return Qu.prototype._drawIndicator.call(this);
    }
  }
  wH.id = "colorLogarithmic";
  wH.defaults = _s({}, [jp.defaults, yE, Lq]);
  wH.descriptors = {
    _scriptable: (n) => n !== "interpolate",
    _indexable: !1
  };
  const Hq = {
    missing: 1,
    mode: "area",
    range: [2, 20],
    legend: {
      align: "bottom",
      length: 90,
      width: 70,
      indicatorWidth: 42
    }
  };
  class df extends Zg {
    constructor() {
      super(...arguments), this._model = null;
    }
    getSizeForValue(e) {
      const t = this._getNormalizedValue(e);
      return t == null || Number.isNaN(t) ? this.options.missing : this.getSizeImpl(t);
    }
    getSizeImpl(e) {
      const [t, i] = this.options.range;
      if (this.options.mode === "area") {
        const s = i * i * Math.PI, o = t * t * Math.PI, a = s - o, l = e * a + o;
        return Math.sqrt(l / Math.PI);
      }
      const r = i - t;
      return e * r + t;
    }
    _drawIndicator() {
      const {
        ctx: e
      } = this, t = this.options.legend.indicatorWidth / 2, i = this.isHorizontal(), r = this.ticks, s = this.getLabelItems(), o = s ? s.map((a) => ({
        [i ? "x" : "y"]: a.options.translation[i ? 0 : 1]
      })) : r.map((a, l) => ({
        [i ? "x" : "y"]: this.getPixelForTick(l)
      }));
      if ((this._gridLineItems || []).forEach((a) => {
        if (e.save(), e.strokeStyle = a.color, e.lineWidth = a.width, e.setLineDash && (e.setLineDash(a.borderDash), e.lineDashOffset = a.borderDashOffset), e.beginPath(), this.options.grid.drawTicks)
          switch (this.options.legend.align) {
            case "left":
              e.moveTo(0, a.ty1), e.lineTo(t, a.ty2);
              break;
            case "top":
              e.moveTo(a.tx1, 0), e.lineTo(a.tx2, t);
              break;
            case "bottom":
              e.moveTo(a.tx1, t), e.lineTo(a.tx2, t * 2);
              break;
            default:
              e.moveTo(t, a.ty1), e.lineTo(t * 2, a.ty2);
              break;
          }
        e.stroke(), e.restore();
      }), this._model) {
        const a = this._model;
        e.strokeStyle = a.borderColor, e.lineWidth = a.borderWidth || 0, e.fillStyle = a.backgroundColor;
      } else
        e.fillStyle = "blue";
      r.forEach((a, l) => {
        const c = o[l], u = this.getSizeForValue(a.value), h = i ? c.x : t, d = i ? t : c.y, f = {
          pointStyle: "circle",
          borderWidth: 0,
          ...this._model || {},
          radius: u
        };
        d_(e, f, h, d);
      });
    }
  }
  df.id = "size";
  df.defaults = _s({}, [Wp.defaults, yE, Hq]);
  df.descriptors = {
    _scriptable: !0,
    _indexable: (n) => n !== "range"
  };
  class $q extends Dq {
    constructor() {
      super(...arguments), this._model = null;
    }
    getSizeForValue(e) {
      const t = this._getNormalizedValue(e);
      return t == null || Number.isNaN(t) ? this.options.missing : this.getSizeImpl(t);
    }
    getSizeImpl(e) {
      return df.prototype.getSizeImpl.call(this, e);
    }
    _drawIndicator() {
      df.prototype._drawIndicator.call(this);
    }
  }
  $q.id = "sizeLogarithmic";
  $q.defaults = _s({}, [jp.defaults, yE, Hq]);
  function Y6e(n, e) {
    return [[n[0][0] - e, n[0][1] - e], [n[1][0] + e, n[1][1] + e]];
  }
  class Ac extends go {
    constructor() {
      super(...arguments), this.cache = void 0;
    }
    inRange(e, t) {
      const i = this.getBounds(), r = (Number.isNaN(e) || e >= i.x && e <= i.x2) && (Number.isNaN(t) || t >= i.y && t <= i.y2), s = this.projectionScale.geoPath.projection();
      if (r && !Number.isNaN(e) && !Number.isNaN(t) && typeof s.invert == "function") {
        const o = s.invert([e, t]);
        return o != null && _We(this.feature, o);
      }
      return r;
    }
    inXRange(e) {
      return this.inRange(e, Number.NaN);
    }
    inYRange(e) {
      return this.inRange(Number.NaN, e);
    }
    getCenterPoint() {
      if (this.cache && this.cache.center)
        return this.cache.center;
      let e;
      if (this.center) {
        const t = this.projectionScale.projection([this.center.longitude, this.center.latitude]);
        e = {
          x: t[0],
          y: t[1]
        };
      } else {
        const t = this.projectionScale.geoPath.centroid(this.feature);
        e = {
          x: t[0],
          y: t[1]
        };
      }
      return this.cache = {
        ...this.cache || {},
        center: e
      }, e;
    }
    getBounds() {
      if (this.cache && this.cache.bounds)
        return this.cache.bounds;
      const e = Y6e(this.projectionScale.geoPath.bounds(this.feature), this.options.borderWidth / 2), t = {
        x: e[0][0],
        x2: e[1][0],
        y: e[0][1],
        y2: e[1][1],
        width: e[1][0] - e[0][0],
        height: e[1][1] - e[0][1]
      };
      return this.cache = {
        ...this.cache || {},
        bounds: t
      }, t;
    }
    _drawInCache(e) {
      const t = this.getBounds();
      if (!Number.isFinite(t.x))
        return;
      const i = this.cache && this.cache.canvas ? this.cache.canvas : e.createElement("canvas"), r = Math.floor(t.x), s = Math.floor(t.y), o = Math.ceil(t.x + t.width), a = Math.ceil(t.y + t.height), l = this.pixelRatio || 1, c = Math.ceil(Math.max(o - r, 1) * l), u = Math.ceil(Math.max(a - s, 1) * l);
      if (c <= 0 || u <= 0)
        return;
      i.width = c, i.height = u;
      const h = i.getContext("2d");
      h && (h.clearRect(0, 0, i.width, i.height), h.save(), h.scale(l, l), h.translate(-r, -s), this._drawImpl(h), h.restore(), this.cache = {
        ...this.cache || {},
        canvas: i,
        canvasKey: this._optionsToKey()
      });
    }
    _optionsToKey() {
      const {
        options: e
      } = this;
      return `${e.backgroundColor};${e.borderColor};${e.borderWidth};${this.pixelRatio}`;
    }
    _drawImpl(e) {
      const {
        feature: t
      } = this, {
        options: i
      } = this;
      e.beginPath(), this.projectionScale.geoPath.context(e)(t), i.backgroundColor && (e.fillStyle = i.backgroundColor, e.fill()), i.borderColor && (e.strokeStyle = i.borderColor, e.lineWidth = i.borderWidth, e.stroke());
    }
    draw(e) {
      const {
        feature: t
      } = this;
      if (!t)
        return;
      (!this.cache || this.cache.canvasKey !== this._optionsToKey()) && e.canvas.ownerDocument != null && this._drawInCache(e.canvas.ownerDocument);
      const i = this.getBounds();
      if (this.cache && this.cache.canvas && this.cache.canvas.width > 0 && this.cache.canvas.height > 0) {
        const r = Math.floor(i.x), s = Math.floor(i.y), o = Math.ceil(i.x + i.width), a = Math.ceil(i.y + i.height), l = o - r, c = a - s;
        l > 0 && c > 0 && e.drawImage(this.cache.canvas, r, s, o - r, a - s);
      } else Number.isFinite(i.x) && (e.save(), this._drawImpl(e), e.restore());
    }
  }
  Ac.id = "geoFeature";
  Ac.defaults = {
    ...Vp.defaults,
    outlineBackgroundColor: null,
    outlineBorderWidth: 0,
    graticuleBorderColor: "#CCCCCC",
    graticuleBorderWidth: 0
  };
  Ac.defaultRoutes = {
    outlineBorderColor: "borderColor",
    ...Vp.defaultRoutes || {}
  };
  const Fq = {
    showOutline: !1,
    showGraticule: !1,
    clipMap: !0
  }, Bq = {
    scales: {
      projection: {
        axis: "x",
        type: If.id,
        position: "chartArea",
        display: !1
      }
    }
  };
  function jj(n) {
    const e = {
      ...n
    };
    return Object.keys(n).forEach((t) => {
      let i = t;
      if (t.startsWith("outline")) {
        const r = t.slice(7);
        i = r[0].toLowerCase() + r.slice(1);
      } else if (t.startsWith("hoverOutline"))
        i = `hover${t.slice(12)}`;
      else
        return;
      delete e[t], e[i] = n[t];
    }), e;
  }
  class Vq extends fo {
    getGeoDataset() {
      return super.getDataset();
    }
    getGeoOptions() {
      return this.chart.options;
    }
    getProjectionScale() {
      return this.getScaleForId("projection");
    }
    linkScales() {
      const e = this.getGeoDataset(), t = this.getMeta();
      t.xAxisID = "projection", e.xAxisID = "projection", t.yAxisID = "projection", e.yAxisID = "projection", t.xScale = this.getScaleForId("projection"), t.yScale = this.getScaleForId("projection"), this.getProjectionScale().computeBounds(this.resolveOutline());
    }
    showOutline() {
      return tt(this.getGeoDataset().showOutline, this.getGeoOptions().showOutline);
    }
    clipMap() {
      return tt(this.getGeoDataset().clipMap, this.getGeoOptions().clipMap);
    }
    getGraticule() {
      return tt(this.getGeoDataset().showGraticule, this.getGeoOptions().showGraticule);
    }
    update(e) {
      super.update(e);
      const t = this.getMeta(), i = this.getProjectionScale(), r = i.updateBounds();
      if (this.showOutline()) {
        const s = t.dataset;
        if (r && delete s.cache, s.projectionScale = i, s.pixelRatio = this.chart.currentDevicePixelRatio, e !== "resize") {
          const o = jj(this.resolveDatasetElementOptions(e)), a = {
            feature: this.resolveOutline(),
            options: o
          };
          this.updateElement(s, void 0, a, e), this.getGraticule() && (t.graticule = o);
        }
      } else this.getGraticule() && e !== "resize" && (t.graticule = jj(this.resolveDatasetElementOptions(e)));
      this.updateElements(t.data, 0, t.data.length, e), r && t.data.forEach((s) => delete s.cache);
    }
    resolveOutline() {
      const t = this.getGeoDataset().outline || {
        type: "Sphere"
      };
      return Array.isArray(t) ? {
        type: "FeatureCollection",
        features: t
      } : t;
    }
    showGraticule() {
      const e = this.getGraticule(), t = this.getMeta().graticule;
      if (!e || !t)
        return;
      const {
        ctx: i
      } = this.chart, s = this.getProjectionScale().geoPath.context(i);
      if (i.save(), i.beginPath(), typeof e == "boolean")
        e && s(RWe());
      else {
        const o = nq();
        e.stepMajor && o.stepMajor(e.stepMajor), e.stepMinor && o.stepMinor(e.stepMinor), s(o());
      }
      i.strokeStyle = t.graticuleBorderColor, i.lineWidth = t.graticuleBorderWidth, i.stroke(), i.restore();
    }
    draw() {
      const {
        chart: e
      } = this, t = this.clipMap();
      let i = !1;
      (t === !0 || t === "outline" || t === "outline+graticule") && (i = !0, Dd(e.ctx, e.chartArea)), this.showOutline() && this.getMeta().dataset && this.getMeta().dataset.draw.call(this.getMeta().dataset, e.ctx, e.chartArea), t === !0 || t === "graticule" || t === "outline+graticule" ? i || Dd(e.ctx, e.chartArea) : i && (i = !1, Nd(e.ctx)), this.showGraticule(), t === !0 || t === "items" ? i || Dd(e.ctx, e.chartArea) : i && (i = !1, Nd(e.ctx)), this.getMeta().data.forEach((r) => r.draw.call(r, e.ctx, e.chartArea)), i && (i = !1, Nd(e.ctx));
    }
  }
  function Wq(n, e, t, i = [], r = []) {
    xr.addControllers(t), Array.isArray(i) ? xr.addElements(...i) : xr.addElements(i), Array.isArray(r) ? xr.addScales(...r) : xr.addScales(r);
    const s = e;
    return s.type = n, s;
  }
  class sm extends Vq {
    initialize() {
      super.initialize(), this.enableOptionSharing = !0;
    }
    linkScales() {
      super.linkScales();
      const e = this.getGeoDataset(), t = this.getMeta();
      t.vAxisID = "color", t.rAxisID = "color", e.vAxisID = "color", e.rAxisID = "color", t.rScale = this.getScaleForId("color"), t.vScale = t.rScale, t.iScale = t.xScale, t.iAxisID = t.xAxisID, e.iAxisID = t.xAxisID;
    }
    _getOtherScale(e) {
      return e;
    }
    parse(e, t) {
      const i = this.getMeta().rScale, {
        data: r
      } = this.getDataset(), s = this._cachedMeta;
      for (let o = e; o < e + t; o += 1)
        s._parsed[o] = {
          [i.axis]: i.parse(r[o], o)
        };
    }
    updateElements(e, t, i, r) {
      const s = this.resolveDataElementOptions(t, r), o = this.getSharedOptions(s), a = this.includeOptions(r, o), l = this.getProjectionScale();
      this.updateSharedOptions(o, r, s);
      for (let c = t; c < t + i; c += 1) {
        const u = e[c];
        u.projectionScale = l, u.feature = this._data[c].feature, u.center = this._data[c].center, u.pixelRatio = this.chart.currentDevicePixelRatio;
        const h = u.getCenterPoint(), d = {
          x: h.x,
          y: h.y
        };
        a && (d.options = o || this.resolveDataElementOptions(c, r)), this.updateElement(u, c, d, r);
      }
    }
    indexToColor(e) {
      const t = this.getMeta().rScale;
      return t.getColorForValue(this.getParsed(e)[t.axis]);
    }
  }
  sm.id = "choropleth";
  sm.defaults = _s({}, [Fq, {
    datasetElementType: Ac.id,
    dataElementType: Ac.id
  }]);
  sm.overrides = _s({}, [Bq, {
    plugins: {
      tooltip: {
        callbacks: {
          title() {
            return "";
          },
          label(n) {
            var e, t, i, r;
            return n.formattedValue == null ? (t = (e = n.chart.data) === null || e === void 0 ? void 0 : e.labels) === null || t === void 0 ? void 0 : t[n.dataIndex] : `${(r = (i = n.chart.data) === null || i === void 0 ? void 0 : i.labels) === null || r === void 0 ? void 0 : r[n.dataIndex]}: ${n.formattedValue}`;
          }
        }
      },
      colors: {
        enabled: !1
      }
    },
    scales: {
      color: {
        type: Qu.id,
        axis: "x"
      }
    },
    elements: {
      geoFeature: {
        backgroundColor(n) {
          return n.dataIndex == null ? null : n.chart.getDatasetMeta(n.datasetIndex).controller.indexToColor(n.dataIndex);
        }
      }
    }
  }]);
  class K6e extends Rs {
    constructor(e, t) {
      super(e, Wq("choropleth", t, sm, Ac, [Qu, If]));
    }
  }
  K6e.id = sm.id;
  class xy extends Vq {
    initialize() {
      super.initialize(), this.enableOptionSharing = !0;
    }
    linkScales() {
      super.linkScales();
      const e = this.getGeoDataset(), t = this.getMeta();
      t.vAxisID = "size", t.rAxisID = "size", e.vAxisID = "size", e.rAxisID = "size", t.rScale = this.getScaleForId("size"), t.vScale = t.rScale, t.iScale = t.xScale, t.iAxisID = t.xAxisID, e.iAxisID = t.xAxisID;
    }
    _getOtherScale(e) {
      return e;
    }
    parse(e, t) {
      const i = this.getMeta().rScale, r = this.getDataset().data, s = this._cachedMeta;
      for (let o = e; o < e + t; o += 1) {
        const a = r[o];
        s._parsed[o] = {
          x: a.longitude == null ? a.x : a.longitude,
          y: a.latitude == null ? a.y : a.latitude,
          [i.axis]: i.parse(a, o)
        };
      }
    }
    updateElements(e, t, i, r) {
      const s = r === "reset", o = this.resolveDataElementOptions(t, r), a = this.getSharedOptions(o), l = this.includeOptions(r, a), c = this.getProjectionScale();
      this.getMeta().rScale._model = o, this.updateSharedOptions(a, r, o);
      for (let u = t; u < t + i; u += 1) {
        const h = e[u], d = this.getParsed(u), f = c.projection([d.x, d.y]), g = {
          x: f ? f[0] : 0,
          y: f ? f[1] : 0,
          skip: Number.isNaN(d.x) || Number.isNaN(d.y)
        };
        l && (g.options = a || this.resolveDataElementOptions(u, r), s && (g.options.radius = 0)), this.updateElement(h, u, g, r);
      }
    }
    indexToRadius(e) {
      const t = this.getMeta().rScale;
      return t.getSizeForValue(this.getParsed(e)[t.axis]);
    }
  }
  xy.id = "bubbleMap";
  xy.defaults = _s({}, [Fq, {
    dataElementType: Uw.id,
    datasetElementType: Ac.id,
    showOutline: !0,
    clipMap: "outline+graticule"
  }]);
  xy.overrides = _s({}, [Bq, {
    plugins: {
      tooltip: {
        callbacks: {
          title() {
            return "";
          },
          label(n) {
            var e, t, i, r;
            return n.formattedValue == null ? (t = (e = n.chart.data) === null || e === void 0 ? void 0 : e.labels) === null || t === void 0 ? void 0 : t[n.dataIndex] : `${(r = (i = n.chart.data) === null || i === void 0 ? void 0 : i.labels) === null || r === void 0 ? void 0 : r[n.dataIndex]}: ${n.formattedValue}`;
          }
        }
      }
    },
    scales: {
      size: {
        axis: "x",
        type: df.id
      }
    },
    elements: {
      point: {
        radius(n) {
          return n.dataIndex == null ? null : n.chart.getDatasetMeta(n.datasetIndex).controller.indexToRadius(n.dataIndex);
        },
        hoverRadius(n) {
          return n.dataIndex == null ? null : n.chart.getDatasetMeta(n.datasetIndex).controller.indexToRadius(n.dataIndex) + 1;
        }
      }
    }
  }]);
  class q6e extends Rs {
    constructor(e, t) {
      super(e, Wq("bubbleMap", t, xy, Ac, [df, If]));
    }
  }
  q6e.id = xy.id;
  var KI = {}, yH = {};
  Object.defineProperty(yH, "__esModule", {
    value: !0
  });
  const X6e = [{
    country: "Afghanistan",
    alpha2: "AF",
    alpha3: "AFG",
    numeric: "004"
  }, {
    country: "Åland Islands",
    alpha2: "AX",
    alpha3: "ALA",
    numeric: "248"
  }, {
    country: "Albania",
    alpha2: "AL",
    alpha3: "ALB",
    numeric: "008"
  }, {
    country: "Algeria",
    alpha2: "DZ",
    alpha3: "DZA",
    numeric: "012"
  }, {
    country: "American Samoa",
    alpha2: "AS",
    alpha3: "ASM",
    numeric: "016"
  }, {
    country: "Andorra",
    alpha2: "AD",
    alpha3: "AND",
    numeric: "020"
  }, {
    country: "Angola",
    alpha2: "AO",
    alpha3: "AGO",
    numeric: "024"
  }, {
    country: "Anguilla",
    alpha2: "AI",
    alpha3: "AIA",
    numeric: "660"
  }, {
    country: "Antarctica",
    alpha2: "AQ",
    alpha3: "ATA",
    numeric: "010"
  }, {
    country: "Antigua and Barbuda",
    alpha2: "AG",
    alpha3: "ATG",
    numeric: "028"
  }, {
    country: "Argentina",
    alpha2: "AR",
    alpha3: "ARG",
    numeric: "032"
  }, {
    country: "Armenia",
    alpha2: "AM",
    alpha3: "ARM",
    numeric: "051"
  }, {
    country: "Aruba",
    alpha2: "AW",
    alpha3: "ABW",
    numeric: "533"
  }, {
    country: "Australia",
    alpha2: "AU",
    alpha3: "AUS",
    numeric: "036"
  }, {
    country: "Austria",
    alpha2: "AT",
    alpha3: "AUT",
    numeric: "040"
  }, {
    country: "Azerbaijan",
    alpha2: "AZ",
    alpha3: "AZE",
    numeric: "031"
  }, {
    country: "Bahamas",
    alpha2: "BS",
    alpha3: "BHS",
    numeric: "044"
  }, {
    country: "Bahrain",
    alpha2: "BH",
    alpha3: "BHR",
    numeric: "048"
  }, {
    country: "Bangladesh",
    alpha2: "BD",
    alpha3: "BGD",
    numeric: "050"
  }, {
    country: "Barbados",
    alpha2: "BB",
    alpha3: "BRB",
    numeric: "052"
  }, {
    country: "Belarus",
    alpha2: "BY",
    alpha3: "BLR",
    numeric: "112"
  }, {
    country: "Belgium",
    alpha2: "BE",
    alpha3: "BEL",
    numeric: "056"
  }, {
    country: "Belize",
    alpha2: "BZ",
    alpha3: "BLZ",
    numeric: "084"
  }, {
    country: "Benin",
    alpha2: "BJ",
    alpha3: "BEN",
    numeric: "204"
  }, {
    country: "Bermuda",
    alpha2: "BM",
    alpha3: "BMU",
    numeric: "060"
  }, {
    country: "Bhutan",
    alpha2: "BT",
    alpha3: "BTN",
    numeric: "064"
  }, {
    country: "Bolivia",
    alpha2: "BO",
    alpha3: "BOL",
    numeric: "068"
  }, {
    country: "Bonaire, Sint Eustatius and Saba",
    alpha2: "BQ",
    alpha3: "BES",
    numeric: "535"
  }, {
    country: "Bosnia and Herzegovina",
    alpha2: "BA",
    alpha3: "BIH",
    numeric: "070"
  }, {
    country: "Botswana",
    alpha2: "BW",
    alpha3: "BWA",
    numeric: "072"
  }, {
    country: "Bouvet Island",
    alpha2: "BV",
    alpha3: "BVT",
    numeric: "074"
  }, {
    country: "Brazil",
    alpha2: "BR",
    alpha3: "BRA",
    numeric: "076"
  }, {
    country: "British Indian Ocean Territory",
    alpha2: "IO",
    alpha3: "IOT",
    numeric: "086"
  }, {
    country: "Brunei Darussalam",
    alpha2: "BN",
    alpha3: "BRN",
    numeric: "096"
  }, {
    country: "Bulgaria",
    alpha2: "BG",
    alpha3: "BGR",
    numeric: "100"
  }, {
    country: "Burkina Faso",
    alpha2: "BF",
    alpha3: "BFA",
    numeric: "854"
  }, {
    country: "Burundi",
    alpha2: "BI",
    alpha3: "BDI",
    numeric: "108"
  }, {
    country: "Cabo Verde",
    alpha2: "CV",
    alpha3: "CPV",
    numeric: "132"
  }, {
    country: "Cambodia",
    alpha2: "KH",
    alpha3: "KHM",
    numeric: "116"
  }, {
    country: "Cameroon",
    alpha2: "CM",
    alpha3: "CMR",
    numeric: "120"
  }, {
    country: "Canada",
    alpha2: "CA",
    alpha3: "CAN",
    numeric: "124"
  }, {
    country: "Cayman Islands",
    alpha2: "KY",
    alpha3: "CYM",
    numeric: "136"
  }, {
    country: "Central African Republic",
    alpha2: "CF",
    alpha3: "CAF",
    numeric: "140"
  }, {
    country: "Chad",
    alpha2: "TD",
    alpha3: "TCD",
    numeric: "148"
  }, {
    country: "Chile",
    alpha2: "CL",
    alpha3: "CHL",
    numeric: "152"
  }, {
    country: "China",
    alpha2: "CN",
    alpha3: "CHN",
    numeric: "156"
  }, {
    country: "Christmas Island",
    alpha2: "CX",
    alpha3: "CXR",
    numeric: "162"
  }, {
    country: "Cocos Islands",
    alpha2: "CC",
    alpha3: "CCK",
    numeric: "166"
  }, {
    country: "Colombia",
    alpha2: "CO",
    alpha3: "COL",
    numeric: "170"
  }, {
    country: "Comoros",
    alpha2: "KM",
    alpha3: "COM",
    numeric: "174"
  }, {
    country: "Congo",
    alpha2: "CG",
    alpha3: "COG",
    numeric: "178"
  }, {
    country: "Congo",
    alpha2: "CD",
    alpha3: "COD",
    numeric: "180"
  }, {
    country: "Cook Islands",
    alpha2: "CK",
    alpha3: "COK",
    numeric: "184"
  }, {
    country: "Costa Rica",
    alpha2: "CR",
    alpha3: "CRI",
    numeric: "188"
  }, {
    country: "Côte d'Ivoire",
    alpha2: "CI",
    alpha3: "CIV",
    numeric: "384"
  }, {
    country: "Croatia",
    alpha2: "HR",
    alpha3: "HRV",
    numeric: "191"
  }, {
    country: "Cuba",
    alpha2: "CU",
    alpha3: "CUB",
    numeric: "192"
  }, {
    country: "Curaçao",
    alpha2: "CW",
    alpha3: "CUW",
    numeric: "531"
  }, {
    country: "Cyprus",
    alpha2: "CY",
    alpha3: "CYP",
    numeric: "196"
  }, {
    country: "Czech Republic",
    alpha2: "CZ",
    alpha3: "CZE",
    numeric: "203"
  }, {
    country: "Denmark",
    alpha2: "DK",
    alpha3: "DNK",
    numeric: "208"
  }, {
    country: "Djibouti",
    alpha2: "DJ",
    alpha3: "DJI",
    numeric: "262"
  }, {
    country: "Dominica",
    alpha2: "DM",
    alpha3: "DMA",
    numeric: "212"
  }, {
    country: "Dominican Republic",
    alpha2: "DO",
    alpha3: "DOM",
    numeric: "214"
  }, {
    country: "Ecuador",
    alpha2: "EC",
    alpha3: "ECU",
    numeric: "218"
  }, {
    country: "Egypt",
    alpha2: "EG",
    alpha3: "EGY",
    numeric: "818"
  }, {
    country: "El Salvador",
    alpha2: "SV",
    alpha3: "SLV",
    numeric: "222"
  }, {
    country: "Equatorial Guinea",
    alpha2: "GQ",
    alpha3: "GNQ",
    numeric: "226"
  }, {
    country: "Eritrea",
    alpha2: "ER",
    alpha3: "ERI",
    numeric: "232"
  }, {
    country: "Estonia",
    alpha2: "EE",
    alpha3: "EST",
    numeric: "233"
  }, {
    country: "Ethiopia",
    alpha2: "ET",
    alpha3: "ETH",
    numeric: "231"
  }, {
    country: "Falkland Islands",
    alpha2: "FK",
    alpha3: "FLK",
    numeric: "238"
  }, {
    country: "Faroe Islands",
    alpha2: "FO",
    alpha3: "FRO",
    numeric: "234"
  }, {
    country: "Fiji",
    alpha2: "FJ",
    alpha3: "FJI",
    numeric: "242"
  }, {
    country: "Finland",
    alpha2: "FI",
    alpha3: "FIN",
    numeric: "246"
  }, {
    country: "France",
    alpha2: "FR",
    alpha3: "FRA",
    numeric: "250"
  }, {
    country: "French Guiana",
    alpha2: "GF",
    alpha3: "GUF",
    numeric: "254"
  }, {
    country: "French Polynesia",
    alpha2: "PF",
    alpha3: "PYF",
    numeric: "258"
  }, {
    country: "French Southern Territories",
    alpha2: "TF",
    alpha3: "ATF",
    numeric: "260"
  }, {
    country: "Gabon",
    alpha2: "GA",
    alpha3: "GAB",
    numeric: "266"
  }, {
    country: "Gambia",
    alpha2: "GM",
    alpha3: "GMB",
    numeric: "270"
  }, {
    country: "Georgia",
    alpha2: "GE",
    alpha3: "GEO",
    numeric: "268"
  }, {
    country: "Germany",
    alpha2: "DE",
    alpha3: "DEU",
    numeric: "276"
  }, {
    country: "Ghana",
    alpha2: "GH",
    alpha3: "GHA",
    numeric: "288"
  }, {
    country: "Gibraltar",
    alpha2: "GI",
    alpha3: "GIB",
    numeric: "292"
  }, {
    country: "Greece",
    alpha2: "GR",
    alpha3: "GRC",
    numeric: "300"
  }, {
    country: "Greenland",
    alpha2: "GL",
    alpha3: "GRL",
    numeric: "304"
  }, {
    country: "Grenada",
    alpha2: "GD",
    alpha3: "GRD",
    numeric: "308"
  }, {
    country: "Guadeloupe",
    alpha2: "GP",
    alpha3: "GLP",
    numeric: "312"
  }, {
    country: "Guam",
    alpha2: "GU",
    alpha3: "GUM",
    numeric: "316"
  }, {
    country: "Guatemala",
    alpha2: "GT",
    alpha3: "GTM",
    numeric: "320"
  }, {
    country: "Guernsey",
    alpha2: "GG",
    alpha3: "GGY",
    numeric: "831"
  }, {
    country: "Guinea",
    alpha2: "GN",
    alpha3: "GIN",
    numeric: "324"
  }, {
    country: "Guinea-Bissau",
    alpha2: "GW",
    alpha3: "GNB",
    numeric: "624"
  }, {
    country: "Guyana",
    alpha2: "GY",
    alpha3: "GUY",
    numeric: "328"
  }, {
    country: "Haiti",
    alpha2: "HT",
    alpha3: "HTI",
    numeric: "332"
  }, {
    country: "Heard Island and McDonald Islands",
    alpha2: "HM",
    alpha3: "HMD",
    numeric: "334"
  }, {
    country: "Holy See",
    alpha2: "VA",
    alpha3: "VAT",
    numeric: "336"
  }, {
    country: "Honduras",
    alpha2: "HN",
    alpha3: "HND",
    numeric: "340"
  }, {
    country: "Hong Kong",
    alpha2: "HK",
    alpha3: "HKG",
    numeric: "344"
  }, {
    country: "Hungary",
    alpha2: "HU",
    alpha3: "HUN",
    numeric: "348"
  }, {
    country: "Iceland",
    alpha2: "IS",
    alpha3: "ISL",
    numeric: "352"
  }, {
    country: "India",
    alpha2: "IN",
    alpha3: "IND",
    numeric: "356"
  }, {
    country: "Indonesia",
    alpha2: "ID",
    alpha3: "IDN",
    numeric: "360"
  }, {
    country: "Islamic Republic of Iran",
    alpha2: "IR",
    alpha3: "IRN",
    numeric: "364"
  }, {
    country: "Iraq",
    alpha2: "IQ",
    alpha3: "IRQ",
    numeric: "368"
  }, {
    country: "Ireland",
    alpha2: "IE",
    alpha3: "IRL",
    numeric: "372"
  }, {
    country: "Isle of Man",
    alpha2: "IM",
    alpha3: "IMN",
    numeric: "833"
  }, {
    country: "Israel",
    alpha2: "IL",
    alpha3: "ISR",
    numeric: "376"
  }, {
    country: "Italy",
    alpha2: "IT",
    alpha3: "ITA",
    numeric: "380"
  }, {
    country: "Jamaica",
    alpha2: "JM",
    alpha3: "JAM",
    numeric: "388"
  }, {
    country: "Japan",
    alpha2: "JP",
    alpha3: "JPN",
    numeric: "392"
  }, {
    country: "Jersey",
    alpha2: "JE",
    alpha3: "JEY",
    numeric: "832"
  }, {
    country: "Jordan",
    alpha2: "JO",
    alpha3: "JOR",
    numeric: "400"
  }, {
    country: "Kazakhstan",
    alpha2: "KZ",
    alpha3: "KAZ",
    numeric: "398"
  }, {
    country: "Kenya",
    alpha2: "KE",
    alpha3: "KEN",
    numeric: "404"
  }, {
    country: "Kiribati",
    alpha2: "KI",
    alpha3: "KIR",
    numeric: "296"
  }, {
    country: "Democratic People's Republic of Korea",
    alpha2: "KP",
    alpha3: "PRK",
    numeric: "408"
  }, {
    country: "Republic of Korea",
    alpha2: "KR",
    alpha3: "KOR",
    numeric: "410"
  }, {
    country: "Kuwait",
    alpha2: "KW",
    alpha3: "KWT",
    numeric: "414"
  }, {
    country: "Kyrgyzstan",
    alpha2: "KG",
    alpha3: "KGZ",
    numeric: "417"
  }, {
    country: "Lao People's Democratic Republic",
    alpha2: "LA",
    alpha3: "LAO",
    numeric: "418"
  }, {
    country: "Latvia",
    alpha2: "LV",
    alpha3: "LVA",
    numeric: "428"
  }, {
    country: "Lebanon",
    alpha2: "LB",
    alpha3: "LBN",
    numeric: "422"
  }, {
    country: "Lesotho",
    alpha2: "LS",
    alpha3: "LSO",
    numeric: "426"
  }, {
    country: "Liberia",
    alpha2: "LR",
    alpha3: "LBR",
    numeric: "430"
  }, {
    country: "Libya",
    alpha2: "LY",
    alpha3: "LBY",
    numeric: "434"
  }, {
    country: "Liechtenstein",
    alpha2: "LI",
    alpha3: "LIE",
    numeric: "438"
  }, {
    country: "Lithuania",
    alpha2: "LT",
    alpha3: "LTU",
    numeric: "440"
  }, {
    country: "Luxembourg",
    alpha2: "LU",
    alpha3: "LUX",
    numeric: "442"
  }, {
    country: "Macao",
    alpha2: "MO",
    alpha3: "MAC",
    numeric: "446"
  }, {
    country: "Macedonia",
    alpha2: "MK",
    alpha3: "MKD",
    numeric: "807"
  }, {
    country: "Madagascar",
    alpha2: "MG",
    alpha3: "MDG",
    numeric: "450"
  }, {
    country: "Malawi",
    alpha2: "MW",
    alpha3: "MWI",
    numeric: "454"
  }, {
    country: "Malaysia",
    alpha2: "MY",
    alpha3: "MYS",
    numeric: "458"
  }, {
    country: "Maldives",
    alpha2: "MV",
    alpha3: "MDV",
    numeric: "462"
  }, {
    country: "Mali",
    alpha2: "ML",
    alpha3: "MLI",
    numeric: "466"
  }, {
    country: "Malta",
    alpha2: "MT",
    alpha3: "MLT",
    numeric: "470"
  }, {
    country: "Marshall Islands",
    alpha2: "MH",
    alpha3: "MHL",
    numeric: "584"
  }, {
    country: "Martinique",
    alpha2: "MQ",
    alpha3: "MTQ",
    numeric: "474"
  }, {
    country: "Mauritania",
    alpha2: "MR",
    alpha3: "MRT",
    numeric: "478"
  }, {
    country: "Mauritius",
    alpha2: "MU",
    alpha3: "MUS",
    numeric: "480"
  }, {
    country: "Mayotte",
    alpha2: "YT",
    alpha3: "MYT",
    numeric: "175"
  }, {
    country: "Mexico",
    alpha2: "MX",
    alpha3: "MEX",
    numeric: "484"
  }, {
    country: "Federated States of Micronesia",
    alpha2: "FM",
    alpha3: "FSM",
    numeric: "583"
  }, {
    country: "Republic of Moldova",
    alpha2: "MD",
    alpha3: "MDA",
    numeric: "498"
  }, {
    country: "Monaco",
    alpha2: "MC",
    alpha3: "MCO",
    numeric: "492"
  }, {
    country: "Mongolia",
    alpha2: "MN",
    alpha3: "MNG",
    numeric: "496"
  }, {
    country: "Montenegro",
    alpha2: "ME",
    alpha3: "MNE",
    numeric: "499"
  }, {
    country: "Montserrat",
    alpha2: "MS",
    alpha3: "MSR",
    numeric: "500"
  }, {
    country: "Morocco",
    alpha2: "MA",
    alpha3: "MAR",
    numeric: "504"
  }, {
    country: "Mozambique",
    alpha2: "MZ",
    alpha3: "MOZ",
    numeric: "508"
  }, {
    country: "Myanmar",
    alpha2: "MM",
    alpha3: "MMR",
    numeric: "104"
  }, {
    country: "Namibia",
    alpha2: "NA",
    alpha3: "NAM",
    numeric: "516"
  }, {
    country: "Nauru",
    alpha2: "NR",
    alpha3: "NRU",
    numeric: "520"
  }, {
    country: "Nepal",
    alpha2: "NP",
    alpha3: "NPL",
    numeric: "524"
  }, {
    country: "Netherlands",
    alpha2: "NL",
    alpha3: "NLD",
    numeric: "528"
  }, {
    country: "New Caledonia",
    alpha2: "NC",
    alpha3: "NCL",
    numeric: "540"
  }, {
    country: "New Zealand",
    alpha2: "NZ",
    alpha3: "NZL",
    numeric: "554"
  }, {
    country: "Nicaragua",
    alpha2: "NI",
    alpha3: "NIC",
    numeric: "558"
  }, {
    country: "Niger",
    alpha2: "NE",
    alpha3: "NER",
    numeric: "562"
  }, {
    country: "Nigeria",
    alpha2: "NG",
    alpha3: "NGA",
    numeric: "566"
  }, {
    country: "Niue",
    alpha2: "NU",
    alpha3: "NIU",
    numeric: "570"
  }, {
    country: "Norfolk Island",
    alpha2: "NF",
    alpha3: "NFK",
    numeric: "574"
  }, {
    country: "Northern Mariana Islands",
    alpha2: "MP",
    alpha3: "MNP",
    numeric: "580"
  }, {
    country: "Norway",
    alpha2: "NO",
    alpha3: "NOR",
    numeric: "578"
  }, {
    country: "Oman",
    alpha2: "OM",
    alpha3: "OMN",
    numeric: "512"
  }, {
    country: "Pakistan",
    alpha2: "PK",
    alpha3: "PAK",
    numeric: "586"
  }, {
    country: "Palau",
    alpha2: "PW",
    alpha3: "PLW",
    numeric: "585"
  }, {
    country: "State of Palestine",
    alpha2: "PS",
    alpha3: "PSE",
    numeric: "275"
  }, {
    country: "Panama",
    alpha2: "PA",
    alpha3: "PAN",
    numeric: "591"
  }, {
    country: "Papua New Guinea",
    alpha2: "PG",
    alpha3: "PNG",
    numeric: "598"
  }, {
    country: "Paraguay",
    alpha2: "PY",
    alpha3: "PRY",
    numeric: "600"
  }, {
    country: "Peru",
    alpha2: "PE",
    alpha3: "PER",
    numeric: "604"
  }, {
    country: "Philippines",
    alpha2: "PH",
    alpha3: "PHL",
    numeric: "608"
  }, {
    country: "Pitcairn",
    alpha2: "PN",
    alpha3: "PCN",
    numeric: "612"
  }, {
    country: "Poland",
    alpha2: "PL",
    alpha3: "POL",
    numeric: "616"
  }, {
    country: "Portugal",
    alpha2: "PT",
    alpha3: "PRT",
    numeric: "620"
  }, {
    country: "Puerto Rico",
    alpha2: "PR",
    alpha3: "PRI",
    numeric: "630"
  }, {
    country: "Qatar",
    alpha2: "QA",
    alpha3: "QAT",
    numeric: "634"
  }, {
    country: "Réunion",
    alpha2: "RE",
    alpha3: "REU",
    numeric: "638"
  }, {
    country: "Romania",
    alpha2: "RO",
    alpha3: "ROU",
    numeric: "642"
  }, {
    country: "Russian Federation",
    alpha2: "RU",
    alpha3: "RUS",
    numeric: "643"
  }, {
    country: "Rwanda",
    alpha2: "RW",
    alpha3: "RWA",
    numeric: "646"
  }, {
    country: "Saint Barthélemy",
    alpha2: "BL",
    alpha3: "BLM",
    numeric: "652"
  }, {
    country: "Saint Helena, Ascension and Tristan da Cunha",
    alpha2: "SH",
    alpha3: "SHN",
    numeric: "654"
  }, {
    country: "Saint Kitts and Nevis",
    alpha2: "KN",
    alpha3: "KNA",
    numeric: "659"
  }, {
    country: "Saint Lucia",
    alpha2: "LC",
    alpha3: "LCA",
    numeric: "662"
  }, {
    country: "Saint Martin",
    alpha2: "MF",
    alpha3: "MAF",
    numeric: "663"
  }, {
    country: "Saint Pierre and Miquelon",
    alpha2: "PM",
    alpha3: "SPM",
    numeric: "666"
  }, {
    country: "Saint Vincent and the Grenadines",
    alpha2: "VC",
    alpha3: "VCT",
    numeric: "670"
  }, {
    country: "Samoa",
    alpha2: "WS",
    alpha3: "WSM",
    numeric: "882"
  }, {
    country: "San Marino",
    alpha2: "SM",
    alpha3: "SMR",
    numeric: "674"
  }, {
    country: "Sao Tome and Principe",
    alpha2: "ST",
    alpha3: "STP",
    numeric: "678"
  }, {
    country: "Saudi Arabia",
    alpha2: "SA",
    alpha3: "SAU",
    numeric: "682"
  }, {
    country: "Senegal",
    alpha2: "SN",
    alpha3: "SEN",
    numeric: "686"
  }, {
    country: "Serbia",
    alpha2: "RS",
    alpha3: "SRB",
    numeric: "688"
  }, {
    country: "Seychelles",
    alpha2: "SC",
    alpha3: "SYC",
    numeric: "690"
  }, {
    country: "Sierra Leone",
    alpha2: "SL",
    alpha3: "SLE",
    numeric: "694"
  }, {
    country: "Singapore",
    alpha2: "SG",
    alpha3: "SGP",
    numeric: "702"
  }, {
    country: "Sint Maarten",
    alpha2: "SX",
    alpha3: "SXM",
    numeric: "534"
  }, {
    country: "Slovakia",
    alpha2: "SK",
    alpha3: "SVK",
    numeric: "703"
  }, {
    country: "Slovenia",
    alpha2: "SI",
    alpha3: "SVN",
    numeric: "705"
  }, {
    country: "Solomon Islands",
    alpha2: "SB",
    alpha3: "SLB",
    numeric: "090"
  }, {
    country: "Somalia",
    alpha2: "SO",
    alpha3: "SOM",
    numeric: "706"
  }, {
    country: "South Africa",
    alpha2: "ZA",
    alpha3: "ZAF",
    numeric: "710"
  }, {
    country: "South Georgia and the South Sandwich Islands",
    alpha2: "GS",
    alpha3: "SGS",
    numeric: "239"
  }, {
    country: "South Sudan",
    alpha2: "SS",
    alpha3: "SSD",
    numeric: "728"
  }, {
    country: "Spain",
    alpha2: "ES",
    alpha3: "ESP",
    numeric: "724"
  }, {
    country: "Sri Lanka",
    alpha2: "LK",
    alpha3: "LKA",
    numeric: "144"
  }, {
    country: "Sudan",
    alpha2: "SD",
    alpha3: "SDN",
    numeric: "729"
  }, {
    country: "Suriname",
    alpha2: "SR",
    alpha3: "SUR",
    numeric: "740"
  }, {
    country: "Svalbard and Jan Mayen",
    alpha2: "SJ",
    alpha3: "SJM",
    numeric: "744"
  }, {
    country: "Swaziland",
    alpha2: "SZ",
    alpha3: "SWZ",
    numeric: "748"
  }, {
    country: "Sweden",
    alpha2: "SE",
    alpha3: "SWE",
    numeric: "752"
  }, {
    country: "Switzerland",
    alpha2: "CH",
    alpha3: "CHE",
    numeric: "756"
  }, {
    country: "Syrian Arab Republic",
    alpha2: "SY",
    alpha3: "SYR",
    numeric: "760"
  }, {
    country: "Taiwan, Province of China",
    alpha2: "TW",
    alpha3: "TWN",
    numeric: "158"
  }, {
    country: "Tajikistan",
    alpha2: "TJ",
    alpha3: "TJK",
    numeric: "762"
  }, {
    country: "United Republic of Tanzania",
    alpha2: "TZ",
    alpha3: "TZA",
    numeric: "834"
  }, {
    country: "Thailand",
    alpha2: "TH",
    alpha3: "THA",
    numeric: "764"
  }, {
    country: "Timor-Leste",
    alpha2: "TL",
    alpha3: "TLS",
    numeric: "626"
  }, {
    country: "Togo",
    alpha2: "TG",
    alpha3: "TGO",
    numeric: "768"
  }, {
    country: "Tokelau",
    alpha2: "TK",
    alpha3: "TKL",
    numeric: "772"
  }, {
    country: "Tonga",
    alpha2: "TO",
    alpha3: "TON",
    numeric: "776"
  }, {
    country: "Trinidad and Tobago",
    alpha2: "TT",
    alpha3: "TTO",
    numeric: "780"
  }, {
    country: "Tunisia",
    alpha2: "TN",
    alpha3: "TUN",
    numeric: "788"
  }, {
    country: "Turkey",
    alpha2: "TR",
    alpha3: "TUR",
    numeric: "792"
  }, {
    country: "Turkmenistan",
    alpha2: "TM",
    alpha3: "TKM",
    numeric: "795"
  }, {
    country: "Turks and Caicos Islands",
    alpha2: "TC",
    alpha3: "TCA",
    numeric: "796"
  }, {
    country: "Tuvalu",
    alpha2: "TV",
    alpha3: "TUV",
    numeric: "798"
  }, {
    country: "Uganda",
    alpha2: "UG",
    alpha3: "UGA",
    numeric: "800"
  }, {
    country: "Ukraine",
    alpha2: "UA",
    alpha3: "UKR",
    numeric: "804"
  }, {
    country: "United Arab Emirates",
    alpha2: "AE",
    alpha3: "ARE",
    numeric: "784"
  }, {
    country: "United Kingdom of Great Britain and Northern Ireland",
    alpha2: "GB",
    alpha3: "GBR",
    numeric: "826"
  }, {
    country: "United States of America",
    alpha2: "US",
    alpha3: "USA",
    numeric: "840"
  }, {
    country: "United States Minor Outlying Islands",
    alpha2: "UM",
    alpha3: "UMI",
    numeric: "581"
  }, {
    country: "Uruguay",
    alpha2: "UY",
    alpha3: "URY",
    numeric: "858"
  }, {
    country: "Uzbekistan",
    alpha2: "UZ",
    alpha3: "UZB",
    numeric: "860"
  }, {
    country: "Vanuatu",
    alpha2: "VU",
    alpha3: "VUT",
    numeric: "548"
  }, {
    country: "Venezuela (Bolivarian Republic of)",
    alpha2: "VE",
    alpha3: "VEN",
    numeric: "862"
  }, {
    country: "Viet Nam",
    alpha2: "VN",
    alpha3: "VNM",
    numeric: "704"
  }, {
    country: "Virgin Islands",
    alpha2: "VG",
    alpha3: "VGB",
    numeric: "092"
  }, {
    country: "Virgin Islands of the United States",
    alpha2: "VI",
    alpha3: "VIR",
    numeric: "850"
  }, {
    country: "Wallis and Futuna",
    alpha2: "WF",
    alpha3: "WLF",
    numeric: "876"
  }, {
    country: "Western Sahara",
    alpha2: "EH",
    alpha3: "ESH",
    numeric: "732"
  }, {
    country: "Yemen",
    alpha2: "YE",
    alpha3: "YEM",
    numeric: "887"
  }, {
    country: "Zambia",
    alpha2: "ZM",
    alpha3: "ZMB",
    numeric: "894"
  }, {
    country: "Zimbabwe",
    alpha2: "ZW",
    alpha3: "ZWE",
    numeric: "716"
  }];
  yH.default = X6e;
  (function(n) {
    var e = Wg && Wg.__importDefault || function(i) {
      return i && i.__esModule ? i : {
        default: i
      };
    };
    Object.defineProperty(n, "__esModule", {
      value: !0
    }), n.all = n.whereNumeric = n.whereAlpha3 = n.whereAlpha2 = n.whereCountry = void 0;
    const t = e(yH);
    n.whereCountry = (i) => t.default.find((r) => r.country.toUpperCase() === i.toUpperCase()), n.whereAlpha2 = (i) => t.default.find((r) => r.alpha2 === i.toUpperCase()), n.whereAlpha3 = (i) => t.default.find((r) => r.alpha3 === i.toUpperCase()), n.whereNumeric = (i) => t.default.find((r) => r.numeric === String(i)), n.all = () => t.default, n.default = {
      all: n.all,
      whereCountry: n.whereCountry,
      whereAlpha2: n.whereAlpha2,
      whereAlpha3: n.whereAlpha3,
      whereNumeric: n.whereNumeric
    };
  })(KI);
  var jq;
  let zq, Uq, Gq, Yq, Kq, qq, Xq, Zq, Qq;
  function Z6e(n, e, t, i, r, s) {
    var o, a, l, c, u, h, d, f = Symbol.metadata || Symbol.for("Symbol.metadata"), g = Object.defineProperty, p = Object.create, m = [p(null), p(null)], v = e.length;
    function y(C, T, P) {
      return function(x, A) {
        T && (A = x, x = n);
        for (var D = 0; D < C.length; D++) A = C[D].apply(x, P ? [A] : []);
        return P ? A : x;
      };
    }
    function w(C, T, P, x) {
      if (typeof C != "function" && (x || C !== void 0)) throw new TypeError(T + " must " + (P || "be") + " a function" + (x ? "" : " or undefined"));
      return C;
    }
    function R(C, T, P, x, A, D, B, F, W, N, O) {
      function V(ee) {
        if (!O(ee)) throw new TypeError("Attempted to access private element on non-instance");
      }
      var G = [].concat(T[0]), U = T[3], se = !B, b = A === 1, S = A === 3, _ = A === 4, I = A === 2;
      function H(ee, ae, Ne) {
        return function(fe, ye) {
          return ae && (ye = fe, fe = C), Ne && Ne(fe), M[ee].call(fe, ye);
        };
      }
      if (!se) {
        var M = {}, $ = [], Y = S ? "get" : _ || b ? "set" : "value";
        if (W ? (N || b ? M = { get: zj(function() {
          return U(this);
        }, x, "get"), set: function(ee) {
          T[4](this, ee);
        } } : M[Y] = U, N || zj(M[Y], x, I ? "" : Y)) : N || (M = Object.getOwnPropertyDescriptor(C, x)), !N && !W) {
          if ((a = m[+F][x]) && (a ^ A) != 7) throw Error("Decorating two elements with the same name (" + M[Y].name + ") is not supported yet");
          m[+F][x] = A < 3 ? 1 : A;
        }
      }
      for (var K = C, ce = G.length - 1; ce >= 0; ce -= P ? 2 : 1) {
        var le = w(G[ce], "A decorator", "be", !0), _e = P ? G[ce - 1] : void 0, be = {}, Z = { kind: ["field", "accessor", "method", "getter", "setter", "class"][A], name: x, metadata: o, addInitializer: (function(ee, ae) {
          if (ee.v) throw new TypeError("attempted to call addInitializer after decoration was finished");
          w(ae, "An initializer", "be", !0), D.push(ae);
        }).bind(null, be) };
        if (se) a = le.call(_e, K, Z), be.v = 1, w(a, "class decorators", "return") && (K = a);
        else if (Z.static = F, Z.private = W, a = Z.access = { has: W ? O.bind() : function(ee) {
          return x in ee;
        } }, _ || (a.get = W ? I ? function(ee) {
          return V(ee), M.value;
        } : H("get", 0, V) : function(ee) {
          return ee[x];
        }), I || S || (a.set = W ? H("set", 0, V) : function(ee, ae) {
          ee[x] = ae;
        }), K = le.call(_e, b ? { get: M.get, set: M.set } : M[Y], Z), be.v = 1, b) {
          if (typeof K == "object" && K) (a = w(K.get, "accessor.get")) && (M.get = a), (a = w(K.set, "accessor.set")) && (M.set = a), (a = w(K.init, "accessor.init")) && $.unshift(a);
          else if (K !== void 0) throw new TypeError("accessor decorators must return an object with get, set, or init properties or undefined");
        } else w(K, (N ? "field" : "method") + " decorators", "return") && (N ? $.unshift(K) : M[Y] = K);
      }
      return A < 2 && B.push(y($, F, 1), y(D, F, 0)), N || se || (W ? b ? B.splice(-1, 0, H("get", F), H("set", F)) : B.push(I ? M[Y] : w.call.bind(M[Y])) : g(C, x, M)), K;
    }
    function E(C) {
      return g(C, f, { configurable: !0, enumerable: !0, value: o });
    }
    return o = p(o ?? null), u = [], h = function(C) {
      C && u.push(y(C));
    }, d = function(C, T) {
      for (var P = 0; P < t.length; P++) {
        var x = t[P], A = x[1], D = 7 & A;
        if ((8 & A) == C && !D == T) {
          var B = x[2], F = !!x[3], W = 16 & A;
          R(C ? n : n.prototype, x, W, F ? "#" + B : Q6e(B), D, D < 2 ? [] : C ? c = c || [] : l = l || [], u, !!C, F, T, C && F ? function(N) {
            return e5e(N) === n;
          } : r);
        }
      }
    }, d(8, 0), d(0, 0), d(8, 1), d(0, 1), h(l), h(c), a = u, v || E(n), { e: a, get c() {
      var C = [];
      return v && [E(n = R(n, [e], i, n.name, 5, C)), y(C, 1)];
    } };
  }
  function Q6e(n) {
    var e = J6e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function J6e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function zj(n, e, t) {
    typeof e == "symbol" && (e = (e = e.description) ? "[" + e + "]" : "");
    try {
      Object.defineProperty(n, "name", { configurable: !0, value: t ? t + " " + e : e });
    } catch {
    }
    return n;
  }
  function e5e(n) {
    if (Object(n) !== n) throw TypeError("right-hand side of 'in' should be an object, got " + (n !== null ? typeof n : "null"));
    return n;
  }
  const t5e = (n) => n.startsWith("#") ? n.slice(1) : n;
  let Jq;
  class n5e {
    constructor() {
      this.datasrc = Uq(this, "g/National_Initiatives_Figure_Data.csv"), this.countriessrc = (Gq(this), Yq(this, "g/countries-50m.json")), this.continent = (Kq(this), qq(this)), this.geochart = void Xq(this), this.continent = "", this.countryDataDesc = {}, this.projecturls = [], this.projections = ["azimuthalEqualArea", "azimuthalEquidistant", "gnomonic", "orthographic", "stereographic", "equalEarth", "albers", "albersUsa", "conicConformal", "conicEqualArea", "conicEquidistant", "equirectangular", "mercator", "transverseMercator", "naturalEarth1"], this.countryName = Zq(this, ""), this.isAnimating = (Qq(this), !1);
    }
    parseCSV(e) {
      const t = [];
      let i = !1;
      for (let r = 0, s = 0, o = 0; o < e.length; o++) {
        let a = e[o], l = e[o + 1];
        if (t[r] = t[r] || [], t[r][s] = t[r][s] || "", a == '"' && i && l == '"') {
          t[r][s] += a, ++o;
          continue;
        }
        if (a == '"') {
          i = !i;
          continue;
        }
        if (a == "," && !i) {
          ++s;
          continue;
        }
        if (a == "\r" && l == `
` && !i) {
          ++r, s = 0, ++o;
          continue;
        }
        if (a == `
` && !i) {
          ++r, s = 0;
          continue;
        }
        if (a == "\r" && !i) {
          ++r, s = 0;
          continue;
        }
        t[r][s] += a;
      }
      return t;
    }
    showSelected(e) {
      this.countryDataDesc ? (this.selected = this.countryDataDesc[e], this.selected ? (this.countryName = this.selected[0], this.projectName = this.selected[3], this.projectPublication = this.selected[2], this.projectStatus = this.selected[8], this.projectStatusText = this.selected[7], this.selected[4] ? this.projecturls = this.selected[4].split(" / ") : this.projecturls = []) : console.warn("showselected this.selected is null")) : console.warn("showselected countryDataDesc is null");
    }
    bound() {
      if (this.paramshash = window.location.hash, this.params = this.paramshash.split("&"), console.log("bound() params", this.params), this.params.length > 0) {
        const e = this.params.length;
        if (e > 0) {
          const t = t5e(this.params[0]);
          t && (this.datasrc = t);
        }
        e > 1 && (this.continent = this.params[1]), console.log("hash contains url:" + this.datasrc);
      }
    }
    attached() {
      console.log("attached"), Rs.register(sm, Ac, If, Qu, ...T4), Promise.all([
        fetch(this.countriessrc).then((e) => e.json()),
        fetch(this.datasrc).then((e) => e.text())
        // Fetch the CSV file
      ]).then(([e, t]) => {
        let i = this;
        this.countries = j6e(e, e.objects.countries).features;
        const r = this.parseCSV(t);
        let s = {};
        this.countryDataDesc = {};
        for (let o of r)
          try {
            let a = KI.whereAlpha2(o[1]);
            a && (s[a.numeric] = o[8], this.countryDataDesc[a.numeric] = o);
          } catch (a) {
            console.warn(a);
          }
        this.myData = [];
        for (let o of this.countries) {
          let a = 0, l = s[o.id];
          l ? a = parseFloat(l) : console.warn("no data for country with id" + o.id + " name:" + o.properties.name), this.myData.push({
            feature: o,
            value: a
          });
        }
        if (this.worlddata = this.myData, this.worldcountries = this.countries, console.log("geoOrthographic function:", YI), this.chart = new Rs(this.geochart.getContext("2d"), {
          type: "choropleth",
          data: {
            labels: this.countries.map((o) => o.id + ":" + o.properties.name),
            datasets: [{
              label: "Countries",
              //data: countries.map((d) => ({ feature: d, value: Math.random() })),
              data: this.myData,
              outline: this.countries
            }]
          },
          options: {
            showOutline: !1,
            showGraticule: !0,
            plugins: {
              legend: {
                display: !1
              }
            },
            scales: {
              projection: {
                axis: "x",
                projection: "equalEarth"
                //projection: geoOrthographic().rotate([0,0,0]) //'equalEarth', 
              },
              color: {
                axis: "x",
                interpolate: "oranges",
                legend: {
                  position: "bottom-right",
                  align: "right"
                }
              }
            },
            onClick: (o, a) => {
              let l = a.map((c) => c.element.feature.id);
              i.showSelected(l[0]);
            }
          }
        }), this.continent)
          switch (console.log("switching to continent", this.continent), this.continent) {
            case "europe":
              this.switchToEurope();
              break;
            case "asia":
              this.switchToAsia();
              break;
            case "namerica":
              this.switchToNAmerica();
              break;
            case "africa":
              this.switchToAfrica();
              break;
            case "samerica":
              this.switchToSAmerica();
              break;
            case "australia":
              this.switchToAustralia();
              break;
            default:
              console.warn("Unknown continent:", this.continent), this.switchToWorld();
              break;
          }
      });
    }
    detached() {
    }
    switchToEurope() {
      this.currentProjection == "orthographic" && this.chart.scales.projection.projection.rotate([0, 0, 0]);
      let e = 4;
      this.chart.options.scales.projection.projectionScale = e;
      let t = e * (3 / 8 * this.chart.chartArea.height);
      this.chart.options.scales.projection.projectionOffset = [0, t], this.chart.update();
    }
    switchToWorld() {
      this.currentProjection == "orthographic" && this.chart.scales.projection.projection.rotate([0, 0, 0]), this.chart.options.scales.projection.projectionScale = 1, this.chart.options.scales.projection.projectionOffset = [0, 0], this.chart.update();
    }
    switchToAsia() {
      if (this.currentProjection == "orthographic") {
        let e = 1;
        this.chart.options.scales.projection.projectionScale = e, this.chart.options.scales.projection.projectionOffset = [0, 0], this.chart.scales.projection.projection.rotate([-80, 0, 0]);
      } else {
        let e = 2.3, t = -e * (2 / 8 * this.chart.chartArea.width), i = e * (3 / 16 * this.chart.chartArea.height);
        this.chart.options.scales.projection.projectionScale = e, this.chart.options.scales.projection.projectionOffset = [t, i];
      }
      this.chart.update();
    }
    switchToNAmerica() {
      if (this.currentProjection == "orthographic") {
        let e = 1;
        this.chart.options.scales.projection.projectionScale = e, this.chart.options.scales.projection.projectionOffset = [0, 0], this.chart.scales.projection.projection.rotate([90, 0, 0]);
      } else {
        let e = 2.5, t = e * (2 / 8 * this.chart.chartArea.width), i = e * (2 / 8 * this.chart.chartArea.height);
        this.chart.options.scales.projection.projectionScale = e, this.chart.options.scales.projection.projectionOffset = [t, i];
      }
      this.chart.update();
    }
    switchToSAmerica() {
      if (this.currentProjection == "orthographic") {
        let e = 1;
        this.chart.options.scales.projection.projectionScale = e, this.chart.options.scales.projection.projectionOffset = [0, 0], this.chart.scales.projection.projection.rotate([60, 0, 0]);
      } else {
        let e = 2, t = e * (1 / 8 * this.chart.chartArea.width), i = -e * (5 / 32 * this.chart.chartArea.height);
        this.chart.options.scales.projection.projectionScale = e, this.chart.options.scales.projection.projectionOffset = [t, i];
      }
      this.chart.update();
    }
    switchToAfrica() {
      if (this.currentProjection == "orthographic") {
        let e = 1;
        this.chart.options.scales.projection.projectionScale = e, this.chart.options.scales.projection.projectionOffset = [0, 0], this.chart.scales.projection.projection.rotate([0, 0, 0]);
      } else
        this.chart.options.scales.projection.projectionScale = 1.8, this.chart.options.scales.projection.projectionOffset = [0, 0];
      this.chart.update();
    }
    switchToPacific() {
      if (this.currentProjection == "orthographic") {
        let e = 1;
        this.chart.options.scales.projection.projectionScale = e, this.chart.options.scales.projection.projectionOffset = [0, 0], this.chart.scales.projection.projection.rotate([-160, 0, 0]);
      } else {
        let e = 2, t = -e * (5 / 16 * this.chart.chartArea.width), i = -e * (1 / 8 * this.chart.chartArea.height);
        this.chart.options.scales.projection.projectionScale = e, this.chart.options.scales.projection.projectionOffset = [t, i];
      }
      this.chart.update();
    }
    zoomChart(e, t, i) {
      console.log("zoomChart:", e), e.options.scales.xy.projection.center = t, e.options.scales.xy.projection.scale = i, e.update();
    }
    switchToEurope2() {
      this.eucountryids = this.europeanCountryCodes.map((e) => {
        console.log("mapping " + e + " to numeric");
        let t = KI.whereAlpha2(e);
        return console.log("numeric", t), t ? t.numeric : null;
      }), this.eudata = this.worlddata.filter((e) => this.eucountryids.includes(e.feature.id)), this.eucountries = this.worldcountries.filter((e) => this.eucountryids.includes(e.id)), console.log("switching to EU view", this.eudata, this.eucountries), console.log("debug world data", this.worlddata, this.worldcountries), this.chart.data.labels = this.eucountries.map((e) => e.properties.name), this.chart.data.datasets[0].data = this.eudata, this.chart.data.outline = this.eucountries, this.chart.update();
    }
    switchToworld2() {
      this.chart.data.labels = this.worldcountries.map((e) => e.properties.name), this.chart.data.datasets[0].data = this.worlddata, this.chart.data.outline = this.worldcountries, this.chart.update();
    }
    switchProjection(e) {
      console.log("switching projection:", e), this.currentProjection = e, e == "orthographic" ? this.chart.options.scales.projection.projection = YI().rotate([0, 0, 0]) : this.chart.options.scales.projection.projection = e, this.chart.update();
    }
    resetView() {
      this.switchProjection("equalEarth"), this.switchToWorld();
    }
    animate() {
    }
    toggleAnimation() {
      this.currentProjection == "orthographic" && (this.isAnimating ? (cancelAnimationFrame(this.animationFrameId), this.isAnimating = !1, console.log("Animation stopped.")) : (this.isAnimating = !0, console.log("Animation started."), this.performAnimationFrame()));
    }
    performAnimationFrame() {
      this.isAnimating && (this.animate(), this.animationFrameId = requestAnimationFrame(this.performAnimationFrame.bind(this)));
    }
    animate() {
      let e = performance.now() / 1e3;
      this.chart.scales.projection.projection.rotate([e, 0, 0]), this.chart.update();
    }
  }
  jq = n5e;
  ({
    e: [Uq, Gq, Yq, Kq, qq, Xq, Zq, Qq],
    c: [Jq, zq]
  } = Z6e(jq, [Lc({
    ...rWe,
    name: "sv-geochart"
  })], [[Qr, 0, "datasrc"], [Qr, 0, "countriessrc"], [Qr, 0, "continent"], [Dte, 0, "countryName"]]));
  zq();
  const eX = "network", qI = `<div>
    <div class="w3-right w3-above w3-small">    
        <input class="w3-input" ref="searchinput" value.bind="searchValue" placeholder="try searching for a node"/>
        <button class="w3-button w3-grey" click.trigger="layoutOnOff()">layout <span show.bind="animationstarted">on</span><span show.bind="!animationstarted">off</span></button>
        <button class="w3-button w3-grey" click.trigger="resetLayout()">reset layout</button>
    </div>
    <div ref="container" style="height:80vh;width:100%"></div>
</div>`, tX = [], nX = {};
  let iA;
  function i5e(n) {
    iA || (iA = Li.define({ name: eX, template: qI, dependencies: tX, bindables: nX })), n.register(iA);
  }
  const r5e = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    bindables: nX,
    default: qI,
    dependencies: tX,
    name: eX,
    register: i5e,
    template: qI
  }, Symbol.toStringTag, { value: "Module" }));
  var CH = { exports: {} }, dp = typeof Reflect == "object" ? Reflect : null, Uj = dp && typeof dp.apply == "function" ? dp.apply : function(e, t, i) {
    return Function.prototype.apply.call(e, t, i);
  }, VS;
  dp && typeof dp.ownKeys == "function" ? VS = dp.ownKeys : Object.getOwnPropertySymbols ? VS = function(e) {
    return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e));
  } : VS = function(e) {
    return Object.getOwnPropertyNames(e);
  };
  function s5e(n) {
    console && console.warn && console.warn(n);
  }
  var iX = Number.isNaN || function(e) {
    return e !== e;
  };
  function on() {
    on.init.call(this);
  }
  CH.exports = on;
  CH.exports.once = c5e;
  on.EventEmitter = on;
  on.prototype._events = void 0;
  on.prototype._eventsCount = 0;
  on.prototype._maxListeners = void 0;
  var Gj = 10;
  function CE(n) {
    if (typeof n != "function")
      throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof n);
  }
  Object.defineProperty(on, "defaultMaxListeners", {
    enumerable: !0,
    get: function() {
      return Gj;
    },
    set: function(n) {
      if (typeof n != "number" || n < 0 || iX(n))
        throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + n + ".");
      Gj = n;
    }
  });
  on.init = function() {
    (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) && (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
  };
  on.prototype.setMaxListeners = function(e) {
    if (typeof e != "number" || e < 0 || iX(e))
      throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e + ".");
    return this._maxListeners = e, this;
  };
  function rX(n) {
    return n._maxListeners === void 0 ? on.defaultMaxListeners : n._maxListeners;
  }
  on.prototype.getMaxListeners = function() {
    return rX(this);
  };
  on.prototype.emit = function(e) {
    for (var t = [], i = 1; i < arguments.length; i++) t.push(arguments[i]);
    var r = e === "error", s = this._events;
    if (s !== void 0) r = r && s.error === void 0;
    else if (!r) return !1;
    if (r) {
      var o;
      if (t.length > 0 && (o = t[0]), o instanceof Error)
        throw o;
      var a = new Error("Unhandled error." + (o ? " (" + o.message + ")" : ""));
      throw a.context = o, a;
    }
    var l = s[e];
    if (l === void 0) return !1;
    if (typeof l == "function")
      Uj(l, this, t);
    else
      for (var c = l.length, u = cX(l, c), i = 0; i < c; ++i) Uj(u[i], this, t);
    return !0;
  };
  function sX(n, e, t, i) {
    var r, s, o;
    if (CE(t), s = n._events, s === void 0 ? (s = n._events = /* @__PURE__ */ Object.create(null), n._eventsCount = 0) : (s.newListener !== void 0 && (n.emit("newListener", e, t.listener ? t.listener : t), s = n._events), o = s[e]), o === void 0)
      o = s[e] = t, ++n._eventsCount;
    else if (typeof o == "function" ? o = s[e] = i ? [t, o] : [o, t] : i ? o.unshift(t) : o.push(t), r = rX(n), r > 0 && o.length > r && !o.warned) {
      o.warned = !0;
      var a = new Error("Possible EventEmitter memory leak detected. " + o.length + " " + String(e) + " listeners added. Use emitter.setMaxListeners() to increase limit");
      a.name = "MaxListenersExceededWarning", a.emitter = n, a.type = e, a.count = o.length, s5e(a);
    }
    return n;
  }
  on.prototype.addListener = function(e, t) {
    return sX(this, e, t, !1);
  };
  on.prototype.on = on.prototype.addListener;
  on.prototype.prependListener = function(e, t) {
    return sX(this, e, t, !0);
  };
  function o5e() {
    if (!this.fired)
      return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
  }
  function oX(n, e, t) {
    var i = {
      fired: !1,
      wrapFn: void 0,
      target: n,
      type: e,
      listener: t
    }, r = o5e.bind(i);
    return r.listener = t, i.wrapFn = r, r;
  }
  on.prototype.once = function(e, t) {
    return CE(t), this.on(e, oX(this, e, t)), this;
  };
  on.prototype.prependOnceListener = function(e, t) {
    return CE(t), this.prependListener(e, oX(this, e, t)), this;
  };
  on.prototype.removeListener = function(e, t) {
    var i, r, s, o, a;
    if (CE(t), r = this._events, r === void 0) return this;
    if (i = r[e], i === void 0) return this;
    if (i === t || i.listener === t)
      --this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : (delete r[e], r.removeListener && this.emit("removeListener", e, i.listener || t));
    else if (typeof i != "function") {
      for (s = -1, o = i.length - 1; o >= 0; o--)
        if (i[o] === t || i[o].listener === t) {
          a = i[o].listener, s = o;
          break;
        }
      if (s < 0) return this;
      s === 0 ? i.shift() : a5e(i, s), i.length === 1 && (r[e] = i[0]), r.removeListener !== void 0 && this.emit("removeListener", e, a || t);
    }
    return this;
  };
  on.prototype.off = on.prototype.removeListener;
  on.prototype.removeAllListeners = function(e) {
    var t, i, r;
    if (i = this._events, i === void 0) return this;
    if (i.removeListener === void 0)
      return arguments.length === 0 ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : i[e] !== void 0 && (--this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : delete i[e]), this;
    if (arguments.length === 0) {
      var s = Object.keys(i), o;
      for (r = 0; r < s.length; ++r)
        o = s[r], o !== "removeListener" && this.removeAllListeners(o);
      return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
    }
    if (t = i[e], typeof t == "function")
      this.removeListener(e, t);
    else if (t !== void 0)
      for (r = t.length - 1; r >= 0; r--)
        this.removeListener(e, t[r]);
    return this;
  };
  function aX(n, e, t) {
    var i = n._events;
    if (i === void 0) return [];
    var r = i[e];
    return r === void 0 ? [] : typeof r == "function" ? t ? [r.listener || r] : [r] : t ? l5e(r) : cX(r, r.length);
  }
  on.prototype.listeners = function(e) {
    return aX(this, e, !0);
  };
  on.prototype.rawListeners = function(e) {
    return aX(this, e, !1);
  };
  on.listenerCount = function(n, e) {
    return typeof n.listenerCount == "function" ? n.listenerCount(e) : lX.call(n, e);
  };
  on.prototype.listenerCount = lX;
  function lX(n) {
    var e = this._events;
    if (e !== void 0) {
      var t = e[n];
      if (typeof t == "function")
        return 1;
      if (t !== void 0)
        return t.length;
    }
    return 0;
  }
  on.prototype.eventNames = function() {
    return this._eventsCount > 0 ? VS(this._events) : [];
  };
  function cX(n, e) {
    for (var t = new Array(e), i = 0; i < e; ++i) t[i] = n[i];
    return t;
  }
  function a5e(n, e) {
    for (; e + 1 < n.length; e++) n[e] = n[e + 1];
    n.pop();
  }
  function l5e(n) {
    for (var e = new Array(n.length), t = 0; t < e.length; ++t)
      e[t] = n[t].listener || n[t];
    return e;
  }
  function c5e(n, e) {
    return new Promise(function(t, i) {
      function r(o) {
        n.removeListener(e, s), i(o);
      }
      function s() {
        typeof n.removeListener == "function" && n.removeListener("error", r), t([].slice.call(arguments));
      }
      uX(n, e, s, {
        once: !0
      }), e !== "error" && u5e(n, r, {
        once: !0
      });
    });
  }
  function u5e(n, e, t) {
    typeof n.on == "function" && uX(n, "error", e, t);
  }
  function uX(n, e, t, i) {
    if (typeof n.on == "function")
      i.once ? n.once(e, t) : n.on(e, t);
    else if (typeof n.addEventListener == "function")
      n.addEventListener(e, function r(s) {
        i.once && n.removeEventListener(e, r), t(s);
      });
    else
      throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof n);
  }
  var SH = CH.exports;
  function ul(n) {
    if (typeof n != "function") throw new Error("obliterator/iterator: expecting a function!");
    this.next = n;
  }
  typeof Symbol < "u" && (ul.prototype[Symbol.iterator] = function() {
    return this;
  });
  ul.of = function() {
    var n = arguments, e = n.length, t = 0;
    return new ul(function() {
      return t >= e ? {
        done: !0
      } : {
        done: !1,
        value: n[t++]
      };
    });
  };
  ul.empty = function() {
    var n = new ul(function() {
      return {
        done: !0
      };
    });
    return n;
  };
  ul.fromSequence = function(n) {
    var e = 0, t = n.length;
    return new ul(function() {
      return e >= t ? {
        done: !0
      } : {
        done: !1,
        value: n[e++]
      };
    });
  };
  ul.is = function(n) {
    return n instanceof ul ? !0 : typeof n == "object" && n !== null && typeof n.next == "function";
  };
  var _H = ul;
  const uo = /* @__PURE__ */ zp(_H);
  var RH = {};
  RH.ARRAY_BUFFER_SUPPORT = typeof ArrayBuffer < "u";
  RH.SYMBOL_SUPPORT = typeof Symbol < "u";
  var h5e = _H, hX = RH, d5e = hX.ARRAY_BUFFER_SUPPORT, f5e = hX.SYMBOL_SUPPORT;
  function g5e(n) {
    return typeof n == "string" || Array.isArray(n) || d5e && ArrayBuffer.isView(n) ? h5e.fromSequence(n) : typeof n != "object" || n === null ? null : f5e && typeof n[Symbol.iterator] == "function" ? n[Symbol.iterator]() : typeof n.next == "function" ? n : null;
  }
  var dX = function(e) {
    var t = g5e(e);
    if (!t) throw new Error("obliterator: target is not iterable nor a valid iterator.");
    return t;
  }, p5e = dX, m5e = function(e, t) {
    for (var i = arguments.length > 1 ? t : 1 / 0, r = i !== 1 / 0 ? new Array(i) : [], s, o = 0, a = p5e(e); ; ) {
      if (o === i) return r;
      if (s = a.next(), s.done)
        return o !== t && (r.length = o), r;
      r[o++] = s.value;
    }
  };
  const fX = /* @__PURE__ */ zp(m5e);
  var b5e = _H, v5e = dX, w5e = function() {
    var e = arguments, t = null, i = -1;
    return new b5e(function() {
      var s = null;
      do {
        if (t === null) {
          if (i++, i >= e.length) return {
            done: !0
          };
          t = v5e(e[i]);
        }
        if (s = t.next(), s.done === !0) {
          t = null;
          continue;
        }
        break;
      } while (!0);
      return s;
    });
  };
  const Sc = /* @__PURE__ */ zp(w5e);
  function y5e() {
    const n = arguments[0];
    for (let e = 1, t = arguments.length; e < t; e++)
      if (arguments[e])
        for (const i in arguments[e]) n[i] = arguments[e][i];
    return n;
  }
  let Si = y5e;
  typeof Object.assign == "function" && (Si = Object.assign);
  function io(n, e, t, i) {
    const r = n._nodes.get(e);
    let s = null;
    return r && (i === "mixed" ? s = r.out && r.out[t] || r.undirected && r.undirected[t] : i === "directed" ? s = r.out && r.out[t] : s = r.undirected && r.undirected[t]), s;
  }
  function zi(n) {
    return typeof n == "object" && n !== null;
  }
  function gX(n) {
    let e;
    for (e in n) return !1;
    return !0;
  }
  function Bs(n, e, t) {
    Object.defineProperty(n, e, {
      enumerable: !1,
      configurable: !1,
      writable: !0,
      value: t
    });
  }
  function Do(n, e, t) {
    const i = {
      enumerable: !0,
      configurable: !0
    };
    typeof t == "function" ? i.get = t : (i.value = t, i.writable = !1), Object.defineProperty(n, e, i);
  }
  function Yj(n) {
    return !(!zi(n) || n.attributes && !Array.isArray(n.attributes));
  }
  function C5e() {
    let n = Math.floor(Math.random() * 256) & 255;
    return () => n++;
  }
  class EH extends Error {
    constructor(e) {
      super(), this.name = "GraphError", this.message = e;
    }
  }
  class Pe extends EH {
    constructor(e) {
      super(e), this.name = "InvalidArgumentsGraphError", typeof Error.captureStackTrace == "function" && Error.captureStackTrace(this, Pe.prototype.constructor);
    }
  }
  class Ce extends EH {
    constructor(e) {
      super(e), this.name = "NotFoundGraphError", typeof Error.captureStackTrace == "function" && Error.captureStackTrace(this, Ce.prototype.constructor);
    }
  }
  class Ye extends EH {
    constructor(e) {
      super(e), this.name = "UsageGraphError", typeof Error.captureStackTrace == "function" && Error.captureStackTrace(this, Ye.prototype.constructor);
    }
  }
  function pX(n, e) {
    this.key = n, this.attributes = e, this.clear();
  }
  pX.prototype.clear = function() {
    this.inDegree = 0, this.outDegree = 0, this.undirectedDegree = 0, this.undirectedLoops = 0, this.directedLoops = 0, this.in = {}, this.out = {}, this.undirected = {};
  };
  function mX(n, e) {
    this.key = n, this.attributes = e, this.clear();
  }
  mX.prototype.clear = function() {
    this.inDegree = 0, this.outDegree = 0, this.directedLoops = 0, this.in = {}, this.out = {};
  };
  function bX(n, e) {
    this.key = n, this.attributes = e, this.clear();
  }
  bX.prototype.clear = function() {
    this.undirectedDegree = 0, this.undirectedLoops = 0, this.undirected = {};
  };
  function om(n, e, t, i, r) {
    this.key = e, this.attributes = r, this.undirected = n, this.source = t, this.target = i;
  }
  om.prototype.attach = function() {
    let n = "out", e = "in";
    this.undirected && (n = e = "undirected");
    const t = this.source.key, i = this.target.key;
    this.source[n][i] = this, !(this.undirected && t === i) && (this.target[e][t] = this);
  };
  om.prototype.attachMulti = function() {
    let n = "out", e = "in";
    const t = this.source.key, i = this.target.key;
    this.undirected && (n = e = "undirected");
    const r = this.source[n], s = r[i];
    if (typeof s > "u") {
      r[i] = this, this.undirected && t === i || (this.target[e][t] = this);
      return;
    }
    s.previous = this, this.next = s, r[i] = this, this.target[e][t] = this;
  };
  om.prototype.detach = function() {
    const n = this.source.key, e = this.target.key;
    let t = "out", i = "in";
    this.undirected && (t = i = "undirected"), delete this.source[t][e], delete this.target[i][n];
  };
  om.prototype.detachMulti = function() {
    const n = this.source.key, e = this.target.key;
    let t = "out", i = "in";
    this.undirected && (t = i = "undirected"), this.previous === void 0 ? this.next === void 0 ? (delete this.source[t][e], delete this.target[i][n]) : (this.next.previous = void 0, this.source[t][e] = this.next, this.target[i][n] = this.next) : (this.previous.next = this.next, this.next !== void 0 && (this.next.previous = this.previous));
  };
  const vX = 0, wX = 1, S5e = 2, yX = 3;
  function zc(n, e, t, i, r, s, o) {
    let a, l, c, u;
    if (i = "" + i, t === vX) {
      if (a = n._nodes.get(i), !a) throw new Ce(`Graph.${e}: could not find the "${i}" node in the graph.`);
      c = r, u = s;
    } else if (t === yX) {
      if (r = "" + r, l = n._edges.get(r), !l) throw new Ce(`Graph.${e}: could not find the "${r}" edge in the graph.`);
      const h = l.source.key, d = l.target.key;
      if (i === h)
        a = l.target;
      else if (i === d)
        a = l.source;
      else
        throw new Ce(`Graph.${e}: the "${i}" node is not attached to the "${r}" edge (${h}, ${d}).`);
      c = s, u = o;
    } else {
      if (l = n._edges.get(i), !l) throw new Ce(`Graph.${e}: could not find the "${i}" edge in the graph.`);
      t === wX ? a = l.source : a = l.target, c = r, u = s;
    }
    return [a, c, u];
  }
  function _5e(n, e, t) {
    n.prototype[e] = function(i, r, s) {
      const [o, a] = zc(this, e, t, i, r, s);
      return o.attributes[a];
    };
  }
  function R5e(n, e, t) {
    n.prototype[e] = function(i, r) {
      const [s] = zc(this, e, t, i, r);
      return s.attributes;
    };
  }
  function E5e(n, e, t) {
    n.prototype[e] = function(i, r, s) {
      const [o, a] = zc(this, e, t, i, r, s);
      return o.attributes.hasOwnProperty(a);
    };
  }
  function x5e(n, e, t) {
    n.prototype[e] = function(i, r, s, o) {
      const [a, l, c] = zc(this, e, t, i, r, s, o);
      return a.attributes[l] = c, this.emit("nodeAttributesUpdated", {
        key: a.key,
        type: "set",
        attributes: a.attributes,
        name: l
      }), this;
    };
  }
  function T5e(n, e, t) {
    n.prototype[e] = function(i, r, s, o) {
      const [a, l, c] = zc(this, e, t, i, r, s, o);
      if (typeof c != "function") throw new Pe(`Graph.${e}: updater should be a function.`);
      const u = a.attributes, h = c(u[l]);
      return u[l] = h, this.emit("nodeAttributesUpdated", {
        key: a.key,
        type: "set",
        attributes: a.attributes,
        name: l
      }), this;
    };
  }
  function M5e(n, e, t) {
    n.prototype[e] = function(i, r, s) {
      const [o, a] = zc(this, e, t, i, r, s);
      return delete o.attributes[a], this.emit("nodeAttributesUpdated", {
        key: o.key,
        type: "remove",
        attributes: o.attributes,
        name: a
      }), this;
    };
  }
  function A5e(n, e, t) {
    n.prototype[e] = function(i, r, s) {
      const [o, a] = zc(this, e, t, i, r, s);
      if (!zi(a)) throw new Pe(`Graph.${e}: provided attributes are not a plain object.`);
      return o.attributes = a, this.emit("nodeAttributesUpdated", {
        key: o.key,
        type: "replace",
        attributes: o.attributes
      }), this;
    };
  }
  function P5e(n, e, t) {
    n.prototype[e] = function(i, r, s) {
      const [o, a] = zc(this, e, t, i, r, s);
      if (!zi(a)) throw new Pe(`Graph.${e}: provided attributes are not a plain object.`);
      return Si(o.attributes, a), this.emit("nodeAttributesUpdated", {
        key: o.key,
        type: "merge",
        attributes: o.attributes,
        data: a
      }), this;
    };
  }
  function I5e(n, e, t) {
    n.prototype[e] = function(i, r, s) {
      const [o, a] = zc(this, e, t, i, r, s);
      if (typeof a != "function") throw new Pe(`Graph.${e}: provided updater is not a function.`);
      return o.attributes = a(o.attributes), this.emit("nodeAttributesUpdated", {
        key: o.key,
        type: "update",
        attributes: o.attributes
      }), this;
    };
  }
  const O5e = [{
    name: (n) => `get${n}Attribute`,
    attacher: _5e
  }, {
    name: (n) => `get${n}Attributes`,
    attacher: R5e
  }, {
    name: (n) => `has${n}Attribute`,
    attacher: E5e
  }, {
    name: (n) => `set${n}Attribute`,
    attacher: x5e
  }, {
    name: (n) => `update${n}Attribute`,
    attacher: T5e
  }, {
    name: (n) => `remove${n}Attribute`,
    attacher: M5e
  }, {
    name: (n) => `replace${n}Attributes`,
    attacher: A5e
  }, {
    name: (n) => `merge${n}Attributes`,
    attacher: P5e
  }, {
    name: (n) => `update${n}Attributes`,
    attacher: I5e
  }];
  function k5e(n) {
    O5e.forEach(function({
      name: e,
      attacher: t
    }) {
      t(n, e("Node"), vX), t(n, e("Source"), wX), t(n, e("Target"), S5e), t(n, e("Opposite"), yX);
    });
  }
  function D5e(n, e, t) {
    n.prototype[e] = function(i, r) {
      let s;
      if (this.type !== "mixed" && t !== "mixed" && t !== this.type) throw new Ye(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);
      if (arguments.length > 2) {
        if (this.multi) throw new Ye(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);
        const o = "" + i, a = "" + r;
        if (r = arguments[2], s = io(this, o, a, t), !s) throw new Ce(`Graph.${e}: could not find an edge for the given path ("${o}" - "${a}").`);
      } else {
        if (t !== "mixed") throw new Ye(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);
        if (i = "" + i, s = this._edges.get(i), !s) throw new Ce(`Graph.${e}: could not find the "${i}" edge in the graph.`);
      }
      return s.attributes[r];
    };
  }
  function N5e(n, e, t) {
    n.prototype[e] = function(i) {
      let r;
      if (this.type !== "mixed" && t !== "mixed" && t !== this.type) throw new Ye(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);
      if (arguments.length > 1) {
        if (this.multi) throw new Ye(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);
        const s = "" + i, o = "" + arguments[1];
        if (r = io(this, s, o, t), !r) throw new Ce(`Graph.${e}: could not find an edge for the given path ("${s}" - "${o}").`);
      } else {
        if (t !== "mixed") throw new Ye(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);
        if (i = "" + i, r = this._edges.get(i), !r) throw new Ce(`Graph.${e}: could not find the "${i}" edge in the graph.`);
      }
      return r.attributes;
    };
  }
  function L5e(n, e, t) {
    n.prototype[e] = function(i, r) {
      let s;
      if (this.type !== "mixed" && t !== "mixed" && t !== this.type) throw new Ye(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);
      if (arguments.length > 2) {
        if (this.multi) throw new Ye(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);
        const o = "" + i, a = "" + r;
        if (r = arguments[2], s = io(this, o, a, t), !s) throw new Ce(`Graph.${e}: could not find an edge for the given path ("${o}" - "${a}").`);
      } else {
        if (t !== "mixed") throw new Ye(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);
        if (i = "" + i, s = this._edges.get(i), !s) throw new Ce(`Graph.${e}: could not find the "${i}" edge in the graph.`);
      }
      return s.attributes.hasOwnProperty(r);
    };
  }
  function H5e(n, e, t) {
    n.prototype[e] = function(i, r, s) {
      let o;
      if (this.type !== "mixed" && t !== "mixed" && t !== this.type) throw new Ye(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);
      if (arguments.length > 3) {
        if (this.multi) throw new Ye(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);
        const a = "" + i, l = "" + r;
        if (r = arguments[2], s = arguments[3], o = io(this, a, l, t), !o) throw new Ce(`Graph.${e}: could not find an edge for the given path ("${a}" - "${l}").`);
      } else {
        if (t !== "mixed") throw new Ye(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);
        if (i = "" + i, o = this._edges.get(i), !o) throw new Ce(`Graph.${e}: could not find the "${i}" edge in the graph.`);
      }
      return o.attributes[r] = s, this.emit("edgeAttributesUpdated", {
        key: o.key,
        type: "set",
        attributes: o.attributes,
        name: r
      }), this;
    };
  }
  function $5e(n, e, t) {
    n.prototype[e] = function(i, r, s) {
      let o;
      if (this.type !== "mixed" && t !== "mixed" && t !== this.type) throw new Ye(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);
      if (arguments.length > 3) {
        if (this.multi) throw new Ye(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);
        const a = "" + i, l = "" + r;
        if (r = arguments[2], s = arguments[3], o = io(this, a, l, t), !o) throw new Ce(`Graph.${e}: could not find an edge for the given path ("${a}" - "${l}").`);
      } else {
        if (t !== "mixed") throw new Ye(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);
        if (i = "" + i, o = this._edges.get(i), !o) throw new Ce(`Graph.${e}: could not find the "${i}" edge in the graph.`);
      }
      if (typeof s != "function") throw new Pe(`Graph.${e}: updater should be a function.`);
      return o.attributes[r] = s(o.attributes[r]), this.emit("edgeAttributesUpdated", {
        key: o.key,
        type: "set",
        attributes: o.attributes,
        name: r
      }), this;
    };
  }
  function F5e(n, e, t) {
    n.prototype[e] = function(i, r) {
      let s;
      if (this.type !== "mixed" && t !== "mixed" && t !== this.type) throw new Ye(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);
      if (arguments.length > 2) {
        if (this.multi) throw new Ye(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);
        const o = "" + i, a = "" + r;
        if (r = arguments[2], s = io(this, o, a, t), !s) throw new Ce(`Graph.${e}: could not find an edge for the given path ("${o}" - "${a}").`);
      } else {
        if (t !== "mixed") throw new Ye(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);
        if (i = "" + i, s = this._edges.get(i), !s) throw new Ce(`Graph.${e}: could not find the "${i}" edge in the graph.`);
      }
      return delete s.attributes[r], this.emit("edgeAttributesUpdated", {
        key: s.key,
        type: "remove",
        attributes: s.attributes,
        name: r
      }), this;
    };
  }
  function B5e(n, e, t) {
    n.prototype[e] = function(i, r) {
      let s;
      if (this.type !== "mixed" && t !== "mixed" && t !== this.type) throw new Ye(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);
      if (arguments.length > 2) {
        if (this.multi) throw new Ye(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);
        const o = "" + i, a = "" + r;
        if (r = arguments[2], s = io(this, o, a, t), !s) throw new Ce(`Graph.${e}: could not find an edge for the given path ("${o}" - "${a}").`);
      } else {
        if (t !== "mixed") throw new Ye(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);
        if (i = "" + i, s = this._edges.get(i), !s) throw new Ce(`Graph.${e}: could not find the "${i}" edge in the graph.`);
      }
      if (!zi(r)) throw new Pe(`Graph.${e}: provided attributes are not a plain object.`);
      return s.attributes = r, this.emit("edgeAttributesUpdated", {
        key: s.key,
        type: "replace",
        attributes: s.attributes
      }), this;
    };
  }
  function V5e(n, e, t) {
    n.prototype[e] = function(i, r) {
      let s;
      if (this.type !== "mixed" && t !== "mixed" && t !== this.type) throw new Ye(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);
      if (arguments.length > 2) {
        if (this.multi) throw new Ye(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);
        const o = "" + i, a = "" + r;
        if (r = arguments[2], s = io(this, o, a, t), !s) throw new Ce(`Graph.${e}: could not find an edge for the given path ("${o}" - "${a}").`);
      } else {
        if (t !== "mixed") throw new Ye(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);
        if (i = "" + i, s = this._edges.get(i), !s) throw new Ce(`Graph.${e}: could not find the "${i}" edge in the graph.`);
      }
      if (!zi(r)) throw new Pe(`Graph.${e}: provided attributes are not a plain object.`);
      return Si(s.attributes, r), this.emit("edgeAttributesUpdated", {
        key: s.key,
        type: "merge",
        attributes: s.attributes,
        data: r
      }), this;
    };
  }
  function W5e(n, e, t) {
    n.prototype[e] = function(i, r) {
      let s;
      if (this.type !== "mixed" && t !== "mixed" && t !== this.type) throw new Ye(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);
      if (arguments.length > 2) {
        if (this.multi) throw new Ye(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);
        const o = "" + i, a = "" + r;
        if (r = arguments[2], s = io(this, o, a, t), !s) throw new Ce(`Graph.${e}: could not find an edge for the given path ("${o}" - "${a}").`);
      } else {
        if (t !== "mixed") throw new Ye(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);
        if (i = "" + i, s = this._edges.get(i), !s) throw new Ce(`Graph.${e}: could not find the "${i}" edge in the graph.`);
      }
      if (typeof r != "function") throw new Pe(`Graph.${e}: provided updater is not a function.`);
      return s.attributes = r(s.attributes), this.emit("edgeAttributesUpdated", {
        key: s.key,
        type: "update",
        attributes: s.attributes
      }), this;
    };
  }
  const j5e = [{
    name: (n) => `get${n}Attribute`,
    attacher: D5e
  }, {
    name: (n) => `get${n}Attributes`,
    attacher: N5e
  }, {
    name: (n) => `has${n}Attribute`,
    attacher: L5e
  }, {
    name: (n) => `set${n}Attribute`,
    attacher: H5e
  }, {
    name: (n) => `update${n}Attribute`,
    attacher: $5e
  }, {
    name: (n) => `remove${n}Attribute`,
    attacher: F5e
  }, {
    name: (n) => `replace${n}Attributes`,
    attacher: B5e
  }, {
    name: (n) => `merge${n}Attributes`,
    attacher: V5e
  }, {
    name: (n) => `update${n}Attributes`,
    attacher: W5e
  }];
  function z5e(n) {
    j5e.forEach(function({
      name: e,
      attacher: t
    }) {
      t(n, e("Edge"), "mixed"), t(n, e("DirectedEdge"), "directed"), t(n, e("UndirectedEdge"), "undirected");
    });
  }
  const U5e = [{
    name: "edges",
    type: "mixed"
  }, {
    name: "inEdges",
    type: "directed",
    direction: "in"
  }, {
    name: "outEdges",
    type: "directed",
    direction: "out"
  }, {
    name: "inboundEdges",
    type: "mixed",
    direction: "in"
  }, {
    name: "outboundEdges",
    type: "mixed",
    direction: "out"
  }, {
    name: "directedEdges",
    type: "directed"
  }, {
    name: "undirectedEdges",
    type: "undirected"
  }];
  function G5e(n, e, t, i) {
    let r = !1;
    for (const s in e) {
      if (s === i) continue;
      const o = e[s];
      if (r = t(o.key, o.attributes, o.source.key, o.target.key, o.source.attributes, o.target.attributes, o.undirected), n && r) return o.key;
    }
  }
  function Y5e(n, e, t, i) {
    let r, s, o, a = !1;
    for (const l in e)
      if (l !== i) {
        r = e[l];
        do {
          if (s = r.source, o = r.target, a = t(r.key, r.attributes, s.key, o.key, s.attributes, o.attributes, r.undirected), n && a) return r.key;
          r = r.next;
        } while (r !== void 0);
      }
  }
  function rA(n, e) {
    const t = Object.keys(n), i = t.length;
    let r, s = 0;
    return new uo(function() {
      do
        if (r)
          r = r.next;
        else {
          if (s >= i) return {
            done: !0
          };
          const a = t[s++];
          if (a === e) {
            r = void 0;
            continue;
          }
          r = n[a];
        }
      while (!r);
      return {
        done: !1,
        value: {
          edge: r.key,
          attributes: r.attributes,
          source: r.source.key,
          target: r.target.key,
          sourceAttributes: r.source.attributes,
          targetAttributes: r.target.attributes,
          undirected: r.undirected
        }
      };
    });
  }
  function K5e(n, e, t, i) {
    const r = e[t];
    if (!r) return;
    const s = r.source, o = r.target;
    if (i(r.key, r.attributes, s.key, o.key, s.attributes, o.attributes, r.undirected) && n) return r.key;
  }
  function q5e(n, e, t, i) {
    let r = e[t];
    if (!r) return;
    let s = !1;
    do {
      if (s = i(r.key, r.attributes, r.source.key, r.target.key, r.source.attributes, r.target.attributes, r.undirected), n && s) return r.key;
      r = r.next;
    } while (r !== void 0);
  }
  function sA(n, e) {
    let t = n[e];
    return t.next !== void 0 ? new uo(function() {
      if (!t) return {
        done: !0
      };
      const i = {
        edge: t.key,
        attributes: t.attributes,
        source: t.source.key,
        target: t.target.key,
        sourceAttributes: t.source.attributes,
        targetAttributes: t.target.attributes,
        undirected: t.undirected
      };
      return t = t.next, {
        done: !1,
        value: i
      };
    }) : uo.of({
      edge: t.key,
      attributes: t.attributes,
      source: t.source.key,
      target: t.target.key,
      sourceAttributes: t.source.attributes,
      targetAttributes: t.target.attributes,
      undirected: t.undirected
    });
  }
  function X5e(n, e) {
    if (n.size === 0) return [];
    if (e === "mixed" || e === n.type)
      return typeof Array.from == "function" ? Array.from(n._edges.keys()) : fX(n._edges.keys(), n._edges.size);
    const t = e === "undirected" ? n.undirectedSize : n.directedSize, i = new Array(t), r = e === "undirected", s = n._edges.values();
    let o = 0, a, l;
    for (; a = s.next(), a.done !== !0; )
      l = a.value, l.undirected === r && (i[o++] = l.key);
    return i;
  }
  function CX(n, e, t, i) {
    if (e.size === 0) return;
    const r = t !== "mixed" && t !== e.type, s = t === "undirected";
    let o, a, l = !1;
    const c = e._edges.values();
    for (; o = c.next(), o.done !== !0; ) {
      if (a = o.value, r && a.undirected !== s) continue;
      const {
        key: u,
        attributes: h,
        source: d,
        target: f
      } = a;
      if (l = i(u, h, d.key, f.key, d.attributes, f.attributes, a.undirected), n && l) return u;
    }
  }
  function Z5e(n, e) {
    if (n.size === 0) return uo.empty();
    const t = e !== "mixed" && e !== n.type, i = e === "undirected", r = n._edges.values();
    return new uo(function() {
      let o, a;
      for (; ; ) {
        if (o = r.next(), o.done) return o;
        if (a = o.value, !(t && a.undirected !== i))
          break;
      }
      return {
        value: {
          edge: a.key,
          attributes: a.attributes,
          source: a.source.key,
          target: a.target.key,
          sourceAttributes: a.source.attributes,
          targetAttributes: a.target.attributes,
          undirected: a.undirected
        },
        done: !1
      };
    });
  }
  function xH(n, e, t, i, r, s) {
    const o = e ? Y5e : G5e;
    let a;
    if (t !== "undirected" && (i !== "out" && (a = o(n, r.in, s), n && a) || i !== "in" && (a = o(n, r.out, s, i ? void 0 : r.key), n && a)) || t !== "directed" && (a = o(n, r.undirected, s), n && a))
      return a;
  }
  function Q5e(n, e, t, i) {
    const r = [];
    return xH(!1, n, e, t, i, function(s) {
      r.push(s);
    }), r;
  }
  function J5e(n, e, t) {
    let i = uo.empty();
    return n !== "undirected" && (e !== "out" && typeof t.in < "u" && (i = Sc(i, rA(t.in))), e !== "in" && typeof t.out < "u" && (i = Sc(i, rA(t.out, e ? void 0 : t.key)))), n !== "directed" && typeof t.undirected < "u" && (i = Sc(i, rA(t.undirected))), i;
  }
  function TH(n, e, t, i, r, s, o) {
    const a = t ? q5e : K5e;
    let l;
    if (e !== "undirected" && (typeof r.in < "u" && i !== "out" && (l = a(n, r.in, s, o), n && l) || typeof r.out < "u" && i !== "in" && (i || r.key !== s) && (l = a(n, r.out, s, o), n && l)) || e !== "directed" && typeof r.undirected < "u" && (l = a(n, r.undirected, s, o), n && l))
      return l;
  }
  function eze(n, e, t, i, r) {
    const s = [];
    return TH(!1, n, e, t, i, r, function(o) {
      s.push(o);
    }), s;
  }
  function tze(n, e, t, i) {
    let r = uo.empty();
    return n !== "undirected" && (typeof t.in < "u" && e !== "out" && i in t.in && (r = Sc(r, sA(t.in, i))), typeof t.out < "u" && e !== "in" && i in t.out && (e || t.key !== i) && (r = Sc(r, sA(t.out, i)))), n !== "directed" && typeof t.undirected < "u" && i in t.undirected && (r = Sc(r, sA(t.undirected, i))), r;
  }
  function nze(n, e) {
    const {
      name: t,
      type: i,
      direction: r
    } = e;
    n.prototype[t] = function(s, o) {
      if (i !== "mixed" && this.type !== "mixed" && i !== this.type) return [];
      if (!arguments.length) return X5e(this, i);
      if (arguments.length === 1) {
        s = "" + s;
        const a = this._nodes.get(s);
        if (typeof a > "u") throw new Ce(`Graph.${t}: could not find the "${s}" node in the graph.`);
        return Q5e(this.multi, i === "mixed" ? this.type : i, r, a);
      }
      if (arguments.length === 2) {
        s = "" + s, o = "" + o;
        const a = this._nodes.get(s);
        if (!a) throw new Ce(`Graph.${t}:  could not find the "${s}" source node in the graph.`);
        if (!this._nodes.has(o)) throw new Ce(`Graph.${t}:  could not find the "${o}" target node in the graph.`);
        return eze(i, this.multi, r, a, o);
      }
      throw new Pe(`Graph.${t}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`);
    };
  }
  function ize(n, e) {
    const {
      name: t,
      type: i,
      direction: r
    } = e, s = "forEach" + t[0].toUpperCase() + t.slice(1, -1);
    n.prototype[s] = function(c, u, h) {
      if (!(i !== "mixed" && this.type !== "mixed" && i !== this.type)) {
        if (arguments.length === 1)
          return h = c, CX(!1, this, i, h);
        if (arguments.length === 2) {
          c = "" + c, h = u;
          const d = this._nodes.get(c);
          if (typeof d > "u") throw new Ce(`Graph.${s}: could not find the "${c}" node in the graph.`);
          return xH(!1, this.multi, i === "mixed" ? this.type : i, r, d, h);
        }
        if (arguments.length === 3) {
          c = "" + c, u = "" + u;
          const d = this._nodes.get(c);
          if (!d) throw new Ce(`Graph.${s}:  could not find the "${c}" source node in the graph.`);
          if (!this._nodes.has(u)) throw new Ce(`Graph.${s}:  could not find the "${u}" target node in the graph.`);
          return TH(!1, i, this.multi, r, d, u, h);
        }
        throw new Pe(`Graph.${s}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`);
      }
    };
    const o = "map" + t[0].toUpperCase() + t.slice(1);
    n.prototype[o] = function() {
      const c = Array.prototype.slice.call(arguments), u = c.pop();
      let h;
      if (c.length === 0) {
        let d = 0;
        i !== "directed" && (d += this.undirectedSize), i !== "undirected" && (d += this.directedSize), h = new Array(d);
        let f = 0;
        c.push((g, p, m, v, y, w, R) => {
          h[f++] = u(g, p, m, v, y, w, R);
        });
      } else
        h = [], c.push((d, f, g, p, m, v, y) => {
          h.push(u(d, f, g, p, m, v, y));
        });
      return this[s].apply(this, c), h;
    };
    const a = "filter" + t[0].toUpperCase() + t.slice(1);
    n.prototype[a] = function() {
      const c = Array.prototype.slice.call(arguments), u = c.pop(), h = [];
      return c.push((d, f, g, p, m, v, y) => {
        u(d, f, g, p, m, v, y) && h.push(d);
      }), this[s].apply(this, c), h;
    };
    const l = "reduce" + t[0].toUpperCase() + t.slice(1);
    n.prototype[l] = function() {
      let c = Array.prototype.slice.call(arguments);
      if (c.length < 2 || c.length > 4)
        throw new Pe(`Graph.${l}: invalid number of arguments (expecting 2, 3 or 4 and got ${c.length}).`);
      if (typeof c[c.length - 1] == "function" && typeof c[c.length - 2] != "function")
        throw new Pe(`Graph.${l}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`);
      let u, h;
      c.length === 2 ? (u = c[0], h = c[1], c = []) : c.length === 3 ? (u = c[1], h = c[2], c = [c[0]]) : c.length === 4 && (u = c[2], h = c[3], c = [c[0], c[1]]);
      let d = h;
      return c.push((f, g, p, m, v, y, w) => {
        d = u(d, f, g, p, m, v, y, w);
      }), this[s].apply(this, c), d;
    };
  }
  function rze(n, e) {
    const {
      name: t,
      type: i,
      direction: r
    } = e, s = "find" + t[0].toUpperCase() + t.slice(1, -1);
    n.prototype[s] = function(l, c, u) {
      if (i !== "mixed" && this.type !== "mixed" && i !== this.type) return !1;
      if (arguments.length === 1)
        return u = l, CX(!0, this, i, u);
      if (arguments.length === 2) {
        l = "" + l, u = c;
        const h = this._nodes.get(l);
        if (typeof h > "u") throw new Ce(`Graph.${s}: could not find the "${l}" node in the graph.`);
        return xH(!0, this.multi, i === "mixed" ? this.type : i, r, h, u);
      }
      if (arguments.length === 3) {
        l = "" + l, c = "" + c;
        const h = this._nodes.get(l);
        if (!h) throw new Ce(`Graph.${s}:  could not find the "${l}" source node in the graph.`);
        if (!this._nodes.has(c)) throw new Ce(`Graph.${s}:  could not find the "${c}" target node in the graph.`);
        return TH(!0, i, this.multi, r, h, c, u);
      }
      throw new Pe(`Graph.${s}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`);
    };
    const o = "some" + t[0].toUpperCase() + t.slice(1, -1);
    n.prototype[o] = function() {
      const l = Array.prototype.slice.call(arguments), c = l.pop();
      return l.push((h, d, f, g, p, m, v) => c(h, d, f, g, p, m, v)), !!this[s].apply(this, l);
    };
    const a = "every" + t[0].toUpperCase() + t.slice(1, -1);
    n.prototype[a] = function() {
      const l = Array.prototype.slice.call(arguments), c = l.pop();
      return l.push((h, d, f, g, p, m, v) => !c(h, d, f, g, p, m, v)), !this[s].apply(this, l);
    };
  }
  function sze(n, e) {
    const {
      name: t,
      type: i,
      direction: r
    } = e, s = t.slice(0, -1) + "Entries";
    n.prototype[s] = function(o, a) {
      if (i !== "mixed" && this.type !== "mixed" && i !== this.type) return uo.empty();
      if (!arguments.length) return Z5e(this, i);
      if (arguments.length === 1) {
        o = "" + o;
        const l = this._nodes.get(o);
        if (!l) throw new Ce(`Graph.${s}: could not find the "${o}" node in the graph.`);
        return J5e(i, r, l);
      }
      if (arguments.length === 2) {
        o = "" + o, a = "" + a;
        const l = this._nodes.get(o);
        if (!l) throw new Ce(`Graph.${s}:  could not find the "${o}" source node in the graph.`);
        if (!this._nodes.has(a)) throw new Ce(`Graph.${s}:  could not find the "${a}" target node in the graph.`);
        return tze(i, r, l, a);
      }
      throw new Pe(`Graph.${s}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`);
    };
  }
  function oze(n) {
    U5e.forEach((e) => {
      nze(n, e), ize(n, e), rze(n, e), sze(n, e);
    });
  }
  const aze = [{
    name: "neighbors",
    type: "mixed"
  }, {
    name: "inNeighbors",
    type: "directed",
    direction: "in"
  }, {
    name: "outNeighbors",
    type: "directed",
    direction: "out"
  }, {
    name: "inboundNeighbors",
    type: "mixed",
    direction: "in"
  }, {
    name: "outboundNeighbors",
    type: "mixed",
    direction: "out"
  }, {
    name: "directedNeighbors",
    type: "directed"
  }, {
    name: "undirectedNeighbors",
    type: "undirected"
  }];
  function SE() {
    this.A = null, this.B = null;
  }
  SE.prototype.wrap = function(n) {
    this.A === null ? this.A = n : this.B === null && (this.B = n);
  };
  SE.prototype.has = function(n) {
    return this.A !== null && n in this.A || this.B !== null && n in this.B;
  };
  function xb(n, e, t, i, r) {
    for (const s in i) {
      const o = i[s], a = o.source, l = o.target, c = a === t ? l : a;
      if (e && e.has(c.key)) continue;
      const u = r(c.key, c.attributes);
      if (n && u) return c.key;
    }
  }
  function MH(n, e, t, i, r) {
    if (e !== "mixed") {
      if (e === "undirected") return xb(n, null, i, i.undirected, r);
      if (typeof t == "string") return xb(n, null, i, i[t], r);
    }
    const s = new SE();
    let o;
    if (e !== "undirected") {
      if (t !== "out") {
        if (o = xb(n, null, i, i.in, r), n && o) return o;
        s.wrap(i.in);
      }
      if (t !== "in") {
        if (o = xb(n, s, i, i.out, r), n && o) return o;
        s.wrap(i.out);
      }
    }
    if (e !== "directed" && (o = xb(n, s, i, i.undirected, r), n && o))
      return o;
  }
  function lze(n, e, t) {
    if (n !== "mixed") {
      if (n === "undirected") return Object.keys(t.undirected);
      if (typeof e == "string") return Object.keys(t[e]);
    }
    const i = [];
    return MH(!1, n, e, t, function(r) {
      i.push(r);
    }), i;
  }
  function Tb(n, e, t) {
    const i = Object.keys(t), r = i.length;
    let s = 0;
    return new uo(function() {
      let a = null;
      do {
        if (s >= r)
          return n && n.wrap(t), {
            done: !0
          };
        const l = t[i[s++]], c = l.source, u = l.target;
        if (a = c === e ? u : c, n && n.has(a.key)) {
          a = null;
          continue;
        }
      } while (a === null);
      return {
        done: !1,
        value: {
          neighbor: a.key,
          attributes: a.attributes
        }
      };
    });
  }
  function cze(n, e, t) {
    if (n !== "mixed") {
      if (n === "undirected") return Tb(null, t, t.undirected);
      if (typeof e == "string") return Tb(null, t, t[e]);
    }
    let i = uo.empty();
    const r = new SE();
    return n !== "undirected" && (e !== "out" && (i = Sc(i, Tb(r, t, t.in))), e !== "in" && (i = Sc(i, Tb(r, t, t.out)))), n !== "directed" && (i = Sc(i, Tb(r, t, t.undirected))), i;
  }
  function uze(n, e) {
    const {
      name: t,
      type: i,
      direction: r
    } = e;
    n.prototype[t] = function(s) {
      if (i !== "mixed" && this.type !== "mixed" && i !== this.type) return [];
      s = "" + s;
      const o = this._nodes.get(s);
      if (typeof o > "u") throw new Ce(`Graph.${t}: could not find the "${s}" node in the graph.`);
      return lze(i === "mixed" ? this.type : i, r, o);
    };
  }
  function hze(n, e) {
    const {
      name: t,
      type: i,
      direction: r
    } = e, s = "forEach" + t[0].toUpperCase() + t.slice(1, -1);
    n.prototype[s] = function(c, u) {
      if (i !== "mixed" && this.type !== "mixed" && i !== this.type) return;
      c = "" + c;
      const h = this._nodes.get(c);
      if (typeof h > "u") throw new Ce(`Graph.${s}: could not find the "${c}" node in the graph.`);
      MH(!1, i === "mixed" ? this.type : i, r, h, u);
    };
    const o = "map" + t[0].toUpperCase() + t.slice(1);
    n.prototype[o] = function(c, u) {
      const h = [];
      return this[s](c, (d, f) => {
        h.push(u(d, f));
      }), h;
    };
    const a = "filter" + t[0].toUpperCase() + t.slice(1);
    n.prototype[a] = function(c, u) {
      const h = [];
      return this[s](c, (d, f) => {
        u(d, f) && h.push(d);
      }), h;
    };
    const l = "reduce" + t[0].toUpperCase() + t.slice(1);
    n.prototype[l] = function(c, u, h) {
      if (arguments.length < 3) throw new Pe(`Graph.${l}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`);
      let d = h;
      return this[s](c, (f, g) => {
        d = u(d, f, g);
      }), d;
    };
  }
  function dze(n, e) {
    const {
      name: t,
      type: i,
      direction: r
    } = e, s = t[0].toUpperCase() + t.slice(1, -1), o = "find" + s;
    n.prototype[o] = function(c, u) {
      if (i !== "mixed" && this.type !== "mixed" && i !== this.type) return;
      c = "" + c;
      const h = this._nodes.get(c);
      if (typeof h > "u") throw new Ce(`Graph.${o}: could not find the "${c}" node in the graph.`);
      return MH(!0, i === "mixed" ? this.type : i, r, h, u);
    };
    const a = "some" + s;
    n.prototype[a] = function(c, u) {
      return !!this[o](c, u);
    };
    const l = "every" + s;
    n.prototype[l] = function(c, u) {
      return !this[o](c, (d, f) => !u(d, f));
    };
  }
  function fze(n, e) {
    const {
      name: t,
      type: i,
      direction: r
    } = e, s = t.slice(0, -1) + "Entries";
    n.prototype[s] = function(o) {
      if (i !== "mixed" && this.type !== "mixed" && i !== this.type) return uo.empty();
      o = "" + o;
      const a = this._nodes.get(o);
      if (typeof a > "u") throw new Ce(`Graph.${s}: could not find the "${o}" node in the graph.`);
      return cze(i === "mixed" ? this.type : i, r, a);
    };
  }
  function gze(n) {
    aze.forEach((e) => {
      uze(n, e), hze(n, e), dze(n, e), fze(n, e);
    });
  }
  function XC(n, e, t, i, r) {
    const s = i._nodes.values(), o = i.type;
    let a, l, c, u, h, d;
    for (; a = s.next(), a.done !== !0; ) {
      let f = !1;
      if (l = a.value, o !== "undirected") {
        u = l.out;
        for (c in u) {
          h = u[c];
          do
            d = h.target, f = !0, r(l.key, d.key, l.attributes, d.attributes, h.key, h.attributes, h.undirected), h = h.next;
          while (h);
        }
      }
      if (o !== "directed") {
        u = l.undirected;
        for (c in u)
          if (!(e && l.key > c)) {
            h = u[c];
            do
              d = h.target, d.key !== c && (d = h.source), f = !0, r(l.key, d.key, l.attributes, d.attributes, h.key, h.attributes, h.undirected), h = h.next;
            while (h);
          }
      }
      t && !f && r(l.key, null, l.attributes, null, null, null, null);
    }
  }
  function pze(n, e) {
    const t = {
      key: n
    };
    return gX(e.attributes) || (t.attributes = Si({}, e.attributes)), t;
  }
  function mze(n, e, t) {
    const i = {
      key: e,
      source: t.source.key,
      target: t.target.key
    };
    return gX(t.attributes) || (i.attributes = Si({}, t.attributes)), n === "mixed" && t.undirected && (i.undirected = !0), i;
  }
  function bze(n) {
    if (!zi(n)) throw new Pe('Graph.import: invalid serialized node. A serialized node should be a plain object with at least a "key" property.');
    if (!("key" in n)) throw new Pe("Graph.import: serialized node is missing its key.");
    if ("attributes" in n && (!zi(n.attributes) || n.attributes === null)) throw new Pe("Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.");
  }
  function vze(n) {
    if (!zi(n)) throw new Pe('Graph.import: invalid serialized edge. A serialized edge should be a plain object with at least a "source" & "target" property.');
    if (!("source" in n)) throw new Pe("Graph.import: serialized edge is missing its source.");
    if (!("target" in n)) throw new Pe("Graph.import: serialized edge is missing its target.");
    if ("attributes" in n && (!zi(n.attributes) || n.attributes === null)) throw new Pe("Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.");
    if ("undirected" in n && typeof n.undirected != "boolean") throw new Pe("Graph.import: invalid undirectedness information. Undirected should be boolean or omitted.");
  }
  const wze = C5e(), yze = /* @__PURE__ */ new Set(["directed", "undirected", "mixed"]), Kj = /* @__PURE__ */ new Set(["domain", "_events", "_eventsCount", "_maxListeners"]), Cze = [{
    name: (n) => `${n}Edge`,
    generateKey: !0
  }, {
    name: (n) => `${n}DirectedEdge`,
    generateKey: !0,
    type: "directed"
  }, {
    name: (n) => `${n}UndirectedEdge`,
    generateKey: !0,
    type: "undirected"
  }, {
    name: (n) => `${n}EdgeWithKey`
  }, {
    name: (n) => `${n}DirectedEdgeWithKey`,
    type: "directed"
  }, {
    name: (n) => `${n}UndirectedEdgeWithKey`,
    type: "undirected"
  }], Sze = {
    allowSelfLoops: !0,
    multi: !1,
    type: "mixed"
  };
  function _ze(n, e, t) {
    if (t && !zi(t)) throw new Pe(`Graph.addNode: invalid attributes. Expecting an object but got "${t}"`);
    if (e = "" + e, t = t || {}, n._nodes.has(e)) throw new Ye(`Graph.addNode: the "${e}" node already exist in the graph.`);
    const i = new n.NodeDataClass(e, t);
    return n._nodes.set(e, i), n.emit("nodeAdded", {
      key: e,
      attributes: t
    }), i;
  }
  function qj(n, e, t) {
    const i = new n.NodeDataClass(e, t);
    return n._nodes.set(e, i), n.emit("nodeAdded", {
      key: e,
      attributes: t
    }), i;
  }
  function SX(n, e, t, i, r, s, o, a) {
    if (!i && n.type === "undirected") throw new Ye(`Graph.${e}: you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead.`);
    if (i && n.type === "directed") throw new Ye(`Graph.${e}: you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead.`);
    if (a && !zi(a)) throw new Pe(`Graph.${e}: invalid attributes. Expecting an object but got "${a}"`);
    if (s = "" + s, o = "" + o, a = a || {}, !n.allowSelfLoops && s === o) throw new Ye(`Graph.${e}: source & target are the same ("${s}"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`);
    const l = n._nodes.get(s), c = n._nodes.get(o);
    if (!l) throw new Ce(`Graph.${e}: source node "${s}" not found.`);
    if (!c) throw new Ce(`Graph.${e}: target node "${o}" not found.`);
    const u = {
      key: null,
      undirected: i,
      source: s,
      target: o,
      attributes: a
    };
    if (t)
      r = n._edgeKeyGenerator();
    else if (r = "" + r, n._edges.has(r)) throw new Ye(`Graph.${e}: the "${r}" edge already exists in the graph.`);
    if (!n.multi && (i ? typeof l.undirected[o] < "u" : typeof l.out[o] < "u"))
      throw new Ye(`Graph.${e}: an edge linking "${s}" to "${o}" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option.`);
    const h = new om(i, r, l, c, a);
    n._edges.set(r, h);
    const d = s === o;
    return i ? (l.undirectedDegree++, c.undirectedDegree++, d && (l.undirectedLoops++, n._undirectedSelfLoopCount++)) : (l.outDegree++, c.inDegree++, d && (l.directedLoops++, n._directedSelfLoopCount++)), n.multi ? h.attachMulti() : h.attach(), i ? n._undirectedSize++ : n._directedSize++, u.key = r, n.emit("edgeAdded", u), r;
  }
  function Rze(n, e, t, i, r, s, o, a, l) {
    if (!i && n.type === "undirected") throw new Ye(`Graph.${e}: you cannot merge/update a directed edge to an undirected graph. Use the #.mergeEdge/#.updateEdge or #.addUndirectedEdge instead.`);
    if (i && n.type === "directed") throw new Ye(`Graph.${e}: you cannot merge/update an undirected edge to a directed graph. Use the #.mergeEdge/#.updateEdge or #.addDirectedEdge instead.`);
    if (a) {
      if (l) {
        if (typeof a != "function") throw new Pe(`Graph.${e}: invalid updater function. Expecting a function but got "${a}"`);
      } else if (!zi(a)) throw new Pe(`Graph.${e}: invalid attributes. Expecting an object but got "${a}"`);
    }
    s = "" + s, o = "" + o;
    let c;
    if (l && (c = a, a = void 0), !n.allowSelfLoops && s === o) throw new Ye(`Graph.${e}: source & target are the same ("${s}"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`);
    let u = n._nodes.get(s), h = n._nodes.get(o), d, f;
    if (!t && (d = n._edges.get(r), d)) {
      if ((d.source.key !== s || d.target.key !== o) && (!i || d.source.key !== o || d.target.key !== s))
        throw new Ye(`Graph.${e}: inconsistency detected when attempting to merge the "${r}" edge with "${s}" source & "${o}" target vs. ("${d.source.key}", "${d.target.key}").`);
      f = d;
    }
    if (!f && !n.multi && u && (f = i ? u.undirected[o] : u.out[o]), f) {
      const y = [f.key, !1, !1, !1];
      if (l ? !c : !a) return y;
      if (l) {
        const w = f.attributes;
        f.attributes = c(w), n.emit("edgeAttributesUpdated", {
          type: "replace",
          key: f.key,
          attributes: f.attributes
        });
      } else
        Si(f.attributes, a), n.emit("edgeAttributesUpdated", {
          type: "merge",
          key: f.key,
          attributes: f.attributes,
          data: a
        });
      return y;
    }
    a = a || {}, l && c && (a = c(a));
    const g = {
      key: null,
      undirected: i,
      source: s,
      target: o,
      attributes: a
    };
    if (t)
      r = n._edgeKeyGenerator();
    else if (r = "" + r, n._edges.has(r)) throw new Ye(`Graph.${e}: the "${r}" edge already exists in the graph.`);
    let p = !1, m = !1;
    u || (u = qj(n, s, {}), p = !0, s === o && (h = u, m = !0)), h || (h = qj(n, o, {}), m = !0), d = new om(i, r, u, h, a), n._edges.set(r, d);
    const v = s === o;
    return i ? (u.undirectedDegree++, h.undirectedDegree++, v && (u.undirectedLoops++, n._undirectedSelfLoopCount++)) : (u.outDegree++, h.inDegree++, v && (u.directedLoops++, n._directedSelfLoopCount++)), n.multi ? d.attachMulti() : d.attach(), i ? n._undirectedSize++ : n._directedSize++, g.key = r, n.emit("edgeAdded", g), [r, !0, p, m];
  }
  function _g(n, e) {
    n._edges.delete(e.key);
    const {
      source: t,
      target: i,
      attributes: r
    } = e, s = e.undirected, o = t === i;
    s ? (t.undirectedDegree--, i.undirectedDegree--, o && (t.undirectedLoops--, n._undirectedSelfLoopCount--)) : (t.outDegree--, i.inDegree--, o && (t.directedLoops--, n._directedSelfLoopCount--)), n.multi ? e.detachMulti() : e.detach(), s ? n._undirectedSize-- : n._directedSize--, n.emit("edgeDropped", {
      key: e.key,
      attributes: r,
      source: t.key,
      target: i.key,
      undirected: s
    });
  }
  class an extends SH.EventEmitter {
    constructor(e) {
      if (super(), e = Si({}, Sze, e), typeof e.multi != "boolean") throw new Pe(`Graph.constructor: invalid 'multi' option. Expecting a boolean but got "${e.multi}".`);
      if (!yze.has(e.type)) throw new Pe(`Graph.constructor: invalid 'type' option. Should be one of "mixed", "directed" or "undirected" but got "${e.type}".`);
      if (typeof e.allowSelfLoops != "boolean") throw new Pe(`Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got "${e.allowSelfLoops}".`);
      const t = e.type === "mixed" ? pX : e.type === "directed" ? mX : bX;
      Bs(this, "NodeDataClass", t);
      const i = "geid_" + wze() + "_";
      let r = 0;
      const s = () => {
        let o;
        do
          o = i + r++;
        while (this._edges.has(o));
        return o;
      };
      Bs(this, "_attributes", {}), Bs(this, "_nodes", /* @__PURE__ */ new Map()), Bs(this, "_edges", /* @__PURE__ */ new Map()), Bs(this, "_directedSize", 0), Bs(this, "_undirectedSize", 0), Bs(this, "_directedSelfLoopCount", 0), Bs(this, "_undirectedSelfLoopCount", 0), Bs(this, "_edgeKeyGenerator", s), Bs(this, "_options", e), Kj.forEach((o) => Bs(this, o, this[o])), Do(this, "order", () => this._nodes.size), Do(this, "size", () => this._edges.size), Do(this, "directedSize", () => this._directedSize), Do(this, "undirectedSize", () => this._undirectedSize), Do(this, "selfLoopCount", () => this._directedSelfLoopCount + this._undirectedSelfLoopCount), Do(this, "directedSelfLoopCount", () => this._directedSelfLoopCount), Do(this, "undirectedSelfLoopCount", () => this._undirectedSelfLoopCount), Do(this, "multi", this._options.multi), Do(this, "type", this._options.type), Do(this, "allowSelfLoops", this._options.allowSelfLoops), Do(this, "implementation", () => "graphology");
    }
    _resetInstanceCounters() {
      this._directedSize = 0, this._undirectedSize = 0, this._directedSelfLoopCount = 0, this._undirectedSelfLoopCount = 0;
    }
    /**---------------------------------------------------------------------------
     * Read
     **---------------------------------------------------------------------------
     */
    /**
     * Method returning whether the given node is found in the graph.
     *
     * @param  {any}     node - The node.
     * @return {boolean}
     */
    hasNode(e) {
      return this._nodes.has("" + e);
    }
    /**
     * Method returning whether the given directed edge is found in the graph.
     *
     * Arity 1:
     * @param  {any}     edge - The edge's key.
     *
     * Arity 2:
     * @param  {any}     source - The edge's source.
     * @param  {any}     target - The edge's target.
     *
     * @return {boolean}
     *
     * @throws {Error} - Will throw if the arguments are invalid.
     */
    hasDirectedEdge(e, t) {
      if (this.type === "undirected") return !1;
      if (arguments.length === 1) {
        const i = "" + e, r = this._edges.get(i);
        return !!r && !r.undirected;
      } else if (arguments.length === 2) {
        e = "" + e, t = "" + t;
        const i = this._nodes.get(e);
        return i ? i.out.hasOwnProperty(t) : !1;
      }
      throw new Pe(`Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`);
    }
    /**
     * Method returning whether the given undirected edge is found in the graph.
     *
     * Arity 1:
     * @param  {any}     edge - The edge's key.
     *
     * Arity 2:
     * @param  {any}     source - The edge's source.
     * @param  {any}     target - The edge's target.
     *
     * @return {boolean}
     *
     * @throws {Error} - Will throw if the arguments are invalid.
     */
    hasUndirectedEdge(e, t) {
      if (this.type === "directed") return !1;
      if (arguments.length === 1) {
        const i = "" + e, r = this._edges.get(i);
        return !!r && r.undirected;
      } else if (arguments.length === 2) {
        e = "" + e, t = "" + t;
        const i = this._nodes.get(e);
        return i ? i.undirected.hasOwnProperty(t) : !1;
      }
      throw new Pe(`Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`);
    }
    /**
     * Method returning whether the given edge is found in the graph.
     *
     * Arity 1:
     * @param  {any}     edge - The edge's key.
     *
     * Arity 2:
     * @param  {any}     source - The edge's source.
     * @param  {any}     target - The edge's target.
     *
     * @return {boolean}
     *
     * @throws {Error} - Will throw if the arguments are invalid.
     */
    hasEdge(e, t) {
      if (arguments.length === 1) {
        const i = "" + e;
        return this._edges.has(i);
      } else if (arguments.length === 2) {
        e = "" + e, t = "" + t;
        const i = this._nodes.get(e);
        return i ? typeof i.out < "u" && i.out.hasOwnProperty(t) || typeof i.undirected < "u" && i.undirected.hasOwnProperty(t) : !1;
      }
      throw new Pe(`Graph.hasEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`);
    }
    /**
     * Method returning the edge matching source & target in a directed fashion.
     *
     * @param  {any} source - The edge's source.
     * @param  {any} target - The edge's target.
     *
     * @return {any|undefined}
     *
     * @throws {Error} - Will throw if the graph is multi.
     * @throws {Error} - Will throw if source or target doesn't exist.
     */
    directedEdge(e, t) {
      if (this.type === "undirected") return;
      if (e = "" + e, t = "" + t, this.multi) throw new Ye("Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.");
      const i = this._nodes.get(e);
      if (!i) throw new Ce(`Graph.directedEdge: could not find the "${e}" source node in the graph.`);
      if (!this._nodes.has(t)) throw new Ce(`Graph.directedEdge: could not find the "${t}" target node in the graph.`);
      const r = i.out && i.out[t] || void 0;
      if (r) return r.key;
    }
    /**
     * Method returning the edge matching source & target in a undirected fashion.
     *
     * @param  {any} source - The edge's source.
     * @param  {any} target - The edge's target.
     *
     * @return {any|undefined}
     *
     * @throws {Error} - Will throw if the graph is multi.
     * @throws {Error} - Will throw if source or target doesn't exist.
     */
    undirectedEdge(e, t) {
      if (this.type === "directed") return;
      if (e = "" + e, t = "" + t, this.multi) throw new Ye("Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.");
      const i = this._nodes.get(e);
      if (!i) throw new Ce(`Graph.undirectedEdge: could not find the "${e}" source node in the graph.`);
      if (!this._nodes.has(t)) throw new Ce(`Graph.undirectedEdge: could not find the "${t}" target node in the graph.`);
      const r = i.undirected && i.undirected[t] || void 0;
      if (r) return r.key;
    }
    /**
     * Method returning the edge matching source & target in a mixed fashion.
     *
     * @param  {any} source - The edge's source.
     * @param  {any} target - The edge's target.
     *
     * @return {any|undefined}
     *
     * @throws {Error} - Will throw if the graph is multi.
     * @throws {Error} - Will throw if source or target doesn't exist.
     */
    edge(e, t) {
      if (this.multi) throw new Ye("Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.");
      e = "" + e, t = "" + t;
      const i = this._nodes.get(e);
      if (!i) throw new Ce(`Graph.edge: could not find the "${e}" source node in the graph.`);
      if (!this._nodes.has(t)) throw new Ce(`Graph.edge: could not find the "${t}" target node in the graph.`);
      const r = i.out && i.out[t] || i.undirected && i.undirected[t] || void 0;
      if (r) return r.key;
    }
    /**
     * Method returning whether two nodes are directed neighbors.
     *
     * @param  {any}     node     - The node's key.
     * @param  {any}     neighbor - The neighbor's key.
     * @return {boolean}
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    areDirectedNeighbors(e, t) {
      e = "" + e, t = "" + t;
      const i = this._nodes.get(e);
      if (!i) throw new Ce(`Graph.areDirectedNeighbors: could not find the "${e}" node in the graph.`);
      return this.type === "undirected" ? !1 : t in i.in || t in i.out;
    }
    /**
     * Method returning whether two nodes are out neighbors.
     *
     * @param  {any}     node     - The node's key.
     * @param  {any}     neighbor - The neighbor's key.
     * @return {boolean}
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    areOutNeighbors(e, t) {
      e = "" + e, t = "" + t;
      const i = this._nodes.get(e);
      if (!i) throw new Ce(`Graph.areOutNeighbors: could not find the "${e}" node in the graph.`);
      return this.type === "undirected" ? !1 : t in i.out;
    }
    /**
     * Method returning whether two nodes are in neighbors.
     *
     * @param  {any}     node     - The node's key.
     * @param  {any}     neighbor - The neighbor's key.
     * @return {boolean}
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    areInNeighbors(e, t) {
      e = "" + e, t = "" + t;
      const i = this._nodes.get(e);
      if (!i) throw new Ce(`Graph.areInNeighbors: could not find the "${e}" node in the graph.`);
      return this.type === "undirected" ? !1 : t in i.in;
    }
    /**
     * Method returning whether two nodes are undirected neighbors.
     *
     * @param  {any}     node     - The node's key.
     * @param  {any}     neighbor - The neighbor's key.
     * @return {boolean}
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    areUndirectedNeighbors(e, t) {
      e = "" + e, t = "" + t;
      const i = this._nodes.get(e);
      if (!i) throw new Ce(`Graph.areUndirectedNeighbors: could not find the "${e}" node in the graph.`);
      return this.type === "directed" ? !1 : t in i.undirected;
    }
    /**
     * Method returning whether two nodes are neighbors.
     *
     * @param  {any}     node     - The node's key.
     * @param  {any}     neighbor - The neighbor's key.
     * @return {boolean}
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    areNeighbors(e, t) {
      e = "" + e, t = "" + t;
      const i = this._nodes.get(e);
      if (!i) throw new Ce(`Graph.areNeighbors: could not find the "${e}" node in the graph.`);
      return this.type !== "undirected" && (t in i.in || t in i.out) || this.type !== "directed" && t in i.undirected;
    }
    /**
     * Method returning whether two nodes are inbound neighbors.
     *
     * @param  {any}     node     - The node's key.
     * @param  {any}     neighbor - The neighbor's key.
     * @return {boolean}
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    areInboundNeighbors(e, t) {
      e = "" + e, t = "" + t;
      const i = this._nodes.get(e);
      if (!i) throw new Ce(`Graph.areInboundNeighbors: could not find the "${e}" node in the graph.`);
      return this.type !== "undirected" && t in i.in || this.type !== "directed" && t in i.undirected;
    }
    /**
     * Method returning whether two nodes are outbound neighbors.
     *
     * @param  {any}     node     - The node's key.
     * @param  {any}     neighbor - The neighbor's key.
     * @return {boolean}
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    areOutboundNeighbors(e, t) {
      e = "" + e, t = "" + t;
      const i = this._nodes.get(e);
      if (!i) throw new Ce(`Graph.areOutboundNeighbors: could not find the "${e}" node in the graph.`);
      return this.type !== "undirected" && t in i.out || this.type !== "directed" && t in i.undirected;
    }
    /**
     * Method returning the given node's in degree.
     *
     * @param  {any}     node - The node's key.
     * @return {number}       - The node's in degree.
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    inDegree(e) {
      e = "" + e;
      const t = this._nodes.get(e);
      if (!t) throw new Ce(`Graph.inDegree: could not find the "${e}" node in the graph.`);
      return this.type === "undirected" ? 0 : t.inDegree;
    }
    /**
     * Method returning the given node's out degree.
     *
     * @param  {any}     node - The node's key.
     * @return {number}       - The node's in degree.
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    outDegree(e) {
      e = "" + e;
      const t = this._nodes.get(e);
      if (!t) throw new Ce(`Graph.outDegree: could not find the "${e}" node in the graph.`);
      return this.type === "undirected" ? 0 : t.outDegree;
    }
    /**
     * Method returning the given node's directed degree.
     *
     * @param  {any}     node - The node's key.
     * @return {number}       - The node's in degree.
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    directedDegree(e) {
      e = "" + e;
      const t = this._nodes.get(e);
      if (!t) throw new Ce(`Graph.directedDegree: could not find the "${e}" node in the graph.`);
      return this.type === "undirected" ? 0 : t.inDegree + t.outDegree;
    }
    /**
     * Method returning the given node's undirected degree.
     *
     * @param  {any}     node - The node's key.
     * @return {number}       - The node's in degree.
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    undirectedDegree(e) {
      e = "" + e;
      const t = this._nodes.get(e);
      if (!t) throw new Ce(`Graph.undirectedDegree: could not find the "${e}" node in the graph.`);
      return this.type === "directed" ? 0 : t.undirectedDegree;
    }
    /**
     * Method returning the given node's inbound degree.
     *
     * @param  {any}     node - The node's key.
     * @return {number}       - The node's inbound degree.
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    inboundDegree(e) {
      e = "" + e;
      const t = this._nodes.get(e);
      if (!t) throw new Ce(`Graph.inboundDegree: could not find the "${e}" node in the graph.`);
      let i = 0;
      return this.type !== "directed" && (i += t.undirectedDegree), this.type !== "undirected" && (i += t.inDegree), i;
    }
    /**
     * Method returning the given node's outbound degree.
     *
     * @param  {any}     node - The node's key.
     * @return {number}       - The node's outbound degree.
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    outboundDegree(e) {
      e = "" + e;
      const t = this._nodes.get(e);
      if (!t) throw new Ce(`Graph.outboundDegree: could not find the "${e}" node in the graph.`);
      let i = 0;
      return this.type !== "directed" && (i += t.undirectedDegree), this.type !== "undirected" && (i += t.outDegree), i;
    }
    /**
     * Method returning the given node's directed degree.
     *
     * @param  {any}     node - The node's key.
     * @return {number}       - The node's degree.
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    degree(e) {
      e = "" + e;
      const t = this._nodes.get(e);
      if (!t) throw new Ce(`Graph.degree: could not find the "${e}" node in the graph.`);
      let i = 0;
      return this.type !== "directed" && (i += t.undirectedDegree), this.type !== "undirected" && (i += t.inDegree + t.outDegree), i;
    }
    /**
     * Method returning the given node's in degree without considering self loops.
     *
     * @param  {any}     node - The node's key.
     * @return {number}       - The node's in degree.
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    inDegreeWithoutSelfLoops(e) {
      e = "" + e;
      const t = this._nodes.get(e);
      if (!t) throw new Ce(`Graph.inDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);
      return this.type === "undirected" ? 0 : t.inDegree - t.directedLoops;
    }
    /**
     * Method returning the given node's out degree without considering self loops.
     *
     * @param  {any}     node - The node's key.
     * @return {number}       - The node's in degree.
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    outDegreeWithoutSelfLoops(e) {
      e = "" + e;
      const t = this._nodes.get(e);
      if (!t) throw new Ce(`Graph.outDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);
      return this.type === "undirected" ? 0 : t.outDegree - t.directedLoops;
    }
    /**
     * Method returning the given node's directed degree without considering self loops.
     *
     * @param  {any}     node - The node's key.
     * @return {number}       - The node's in degree.
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    directedDegreeWithoutSelfLoops(e) {
      e = "" + e;
      const t = this._nodes.get(e);
      if (!t) throw new Ce(`Graph.directedDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);
      return this.type === "undirected" ? 0 : t.inDegree + t.outDegree - t.directedLoops * 2;
    }
    /**
     * Method returning the given node's undirected degree without considering self loops.
     *
     * @param  {any}     node - The node's key.
     * @return {number}       - The node's in degree.
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    undirectedDegreeWithoutSelfLoops(e) {
      e = "" + e;
      const t = this._nodes.get(e);
      if (!t) throw new Ce(`Graph.undirectedDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);
      return this.type === "directed" ? 0 : t.undirectedDegree - t.undirectedLoops * 2;
    }
    /**
     * Method returning the given node's inbound degree without considering self loops.
     *
     * @param  {any}     node - The node's key.
     * @return {number}       - The node's inbound degree.
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    inboundDegreeWithoutSelfLoops(e) {
      e = "" + e;
      const t = this._nodes.get(e);
      if (!t) throw new Ce(`Graph.inboundDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);
      let i = 0, r = 0;
      return this.type !== "directed" && (i += t.undirectedDegree, r += t.undirectedLoops * 2), this.type !== "undirected" && (i += t.inDegree, r += t.directedLoops), i - r;
    }
    /**
     * Method returning the given node's outbound degree without considering self loops.
     *
     * @param  {any}     node - The node's key.
     * @return {number}       - The node's outbound degree.
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    outboundDegreeWithoutSelfLoops(e) {
      e = "" + e;
      const t = this._nodes.get(e);
      if (!t) throw new Ce(`Graph.outboundDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);
      let i = 0, r = 0;
      return this.type !== "directed" && (i += t.undirectedDegree, r += t.undirectedLoops * 2), this.type !== "undirected" && (i += t.outDegree, r += t.directedLoops), i - r;
    }
    /**
     * Method returning the given node's directed degree without considering self loops.
     *
     * @param  {any}     node - The node's key.
     * @return {number}       - The node's degree.
     *
     * @throws {Error} - Will throw if the node isn't in the graph.
     */
    degreeWithoutSelfLoops(e) {
      e = "" + e;
      const t = this._nodes.get(e);
      if (!t) throw new Ce(`Graph.degreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);
      let i = 0, r = 0;
      return this.type !== "directed" && (i += t.undirectedDegree, r += t.undirectedLoops * 2), this.type !== "undirected" && (i += t.inDegree + t.outDegree, r += t.directedLoops * 2), i - r;
    }
    /**
     * Method returning the given edge's source.
     *
     * @param  {any} edge - The edge's key.
     * @return {any}      - The edge's source.
     *
     * @throws {Error} - Will throw if the edge isn't in the graph.
     */
    source(e) {
      e = "" + e;
      const t = this._edges.get(e);
      if (!t) throw new Ce(`Graph.source: could not find the "${e}" edge in the graph.`);
      return t.source.key;
    }
    /**
     * Method returning the given edge's target.
     *
     * @param  {any} edge - The edge's key.
     * @return {any}      - The edge's target.
     *
     * @throws {Error} - Will throw if the edge isn't in the graph.
     */
    target(e) {
      e = "" + e;
      const t = this._edges.get(e);
      if (!t) throw new Ce(`Graph.target: could not find the "${e}" edge in the graph.`);
      return t.target.key;
    }
    /**
     * Method returning the given edge's extremities.
     *
     * @param  {any}   edge - The edge's key.
     * @return {array}      - The edge's extremities.
     *
     * @throws {Error} - Will throw if the edge isn't in the graph.
     */
    extremities(e) {
      e = "" + e;
      const t = this._edges.get(e);
      if (!t) throw new Ce(`Graph.extremities: could not find the "${e}" edge in the graph.`);
      return [t.source.key, t.target.key];
    }
    /**
     * Given a node & an edge, returns the other extremity of the edge.
     *
     * @param  {any}   node - The node's key.
     * @param  {any}   edge - The edge's key.
     * @return {any}        - The related node.
     *
     * @throws {Error} - Will throw if the edge isn't in the graph or if the
     *                   edge & node are not related.
     */
    opposite(e, t) {
      e = "" + e, t = "" + t;
      const i = this._edges.get(t);
      if (!i) throw new Ce(`Graph.opposite: could not find the "${t}" edge in the graph.`);
      const r = i.source.key, s = i.target.key;
      if (e === r) return s;
      if (e === s) return r;
      throw new Ce(`Graph.opposite: the "${e}" node is not attached to the "${t}" edge (${r}, ${s}).`);
    }
    /**
     * Returns whether the given edge has the given node as extremity.
     *
     * @param  {any}     edge - The edge's key.
     * @param  {any}     node - The node's key.
     * @return {boolean}      - The related node.
     *
     * @throws {Error} - Will throw if either the node or the edge isn't in the graph.
     */
    hasExtremity(e, t) {
      e = "" + e, t = "" + t;
      const i = this._edges.get(e);
      if (!i) throw new Ce(`Graph.hasExtremity: could not find the "${e}" edge in the graph.`);
      return i.source.key === t || i.target.key === t;
    }
    /**
     * Method returning whether the given edge is undirected.
     *
     * @param  {any}     edge - The edge's key.
     * @return {boolean}
     *
     * @throws {Error} - Will throw if the edge isn't in the graph.
     */
    isUndirected(e) {
      e = "" + e;
      const t = this._edges.get(e);
      if (!t) throw new Ce(`Graph.isUndirected: could not find the "${e}" edge in the graph.`);
      return t.undirected;
    }
    /**
     * Method returning whether the given edge is directed.
     *
     * @param  {any}     edge - The edge's key.
     * @return {boolean}
     *
     * @throws {Error} - Will throw if the edge isn't in the graph.
     */
    isDirected(e) {
      e = "" + e;
      const t = this._edges.get(e);
      if (!t) throw new Ce(`Graph.isDirected: could not find the "${e}" edge in the graph.`);
      return !t.undirected;
    }
    /**
     * Method returning whether the given edge is a self loop.
     *
     * @param  {any}     edge - The edge's key.
     * @return {boolean}
     *
     * @throws {Error} - Will throw if the edge isn't in the graph.
     */
    isSelfLoop(e) {
      e = "" + e;
      const t = this._edges.get(e);
      if (!t) throw new Ce(`Graph.isSelfLoop: could not find the "${e}" edge in the graph.`);
      return t.source === t.target;
    }
    /**---------------------------------------------------------------------------
     * Mutation
     **---------------------------------------------------------------------------
     */
    /**
     * Method used to add a node to the graph.
     *
     * @param  {any}    node         - The node.
     * @param  {object} [attributes] - Optional attributes.
     * @return {any}                 - The node.
     *
     * @throws {Error} - Will throw if the given node already exist.
     * @throws {Error} - Will throw if the given attributes are not an object.
     */
    addNode(e, t) {
      return _ze(this, e, t).key;
    }
    /**
     * Method used to merge a node into the graph.
     *
     * @param  {any}    node         - The node.
     * @param  {object} [attributes] - Optional attributes.
     * @return {any}                 - The node.
     */
    mergeNode(e, t) {
      if (t && !zi(t)) throw new Pe(`Graph.mergeNode: invalid attributes. Expecting an object but got "${t}"`);
      e = "" + e, t = t || {};
      let i = this._nodes.get(e);
      return i ? (t && (Si(i.attributes, t), this.emit("nodeAttributesUpdated", {
        type: "merge",
        key: e,
        attributes: i.attributes,
        data: t
      })), [e, !1]) : (i = new this.NodeDataClass(e, t), this._nodes.set(e, i), this.emit("nodeAdded", {
        key: e,
        attributes: t
      }), [e, !0]);
    }
    /**
     * Method used to add a node if it does not exist in the graph or else to
     * update its attributes using a function.
     *
     * @param  {any}      node      - The node.
     * @param  {function} [updater] - Optional updater function.
     * @return {any}                - The node.
     */
    updateNode(e, t) {
      if (t && typeof t != "function") throw new Pe(`Graph.updateNode: invalid updater function. Expecting a function but got "${t}"`);
      e = "" + e;
      let i = this._nodes.get(e);
      if (i) {
        if (t) {
          const s = i.attributes;
          i.attributes = t(s), this.emit("nodeAttributesUpdated", {
            type: "replace",
            key: e,
            attributes: i.attributes
          });
        }
        return [e, !1];
      }
      const r = t ? t({}) : {};
      return i = new this.NodeDataClass(e, r), this._nodes.set(e, i), this.emit("nodeAdded", {
        key: e,
        attributes: r
      }), [e, !0];
    }
    /**
     * Method used to drop a single node & all its attached edges from the graph.
     *
     * @param  {any}    node - The node.
     * @return {Graph}
     *
     * @throws {Error} - Will throw if the node doesn't exist.
     */
    dropNode(e) {
      e = "" + e;
      const t = this._nodes.get(e);
      if (!t) throw new Ce(`Graph.dropNode: could not find the "${e}" node in the graph.`);
      let i;
      if (this.type !== "undirected") {
        for (const r in t.out) {
          i = t.out[r];
          do
            _g(this, i), i = i.next;
          while (i);
        }
        for (const r in t.in) {
          i = t.in[r];
          do
            _g(this, i), i = i.next;
          while (i);
        }
      }
      if (this.type !== "directed")
        for (const r in t.undirected) {
          i = t.undirected[r];
          do
            _g(this, i), i = i.next;
          while (i);
        }
      this._nodes.delete(e), this.emit("nodeDropped", {
        key: e,
        attributes: t.attributes
      });
    }
    /**
     * Method used to drop a single edge from the graph.
     *
     * Arity 1:
     * @param  {any}    edge - The edge.
     *
     * Arity 2:
     * @param  {any}    source - Source node.
     * @param  {any}    target - Target node.
     *
     * @return {Graph}
     *
     * @throws {Error} - Will throw if the edge doesn't exist.
     */
    dropEdge(e) {
      let t;
      if (arguments.length > 1) {
        const i = "" + arguments[0], r = "" + arguments[1];
        if (t = io(this, i, r, this.type), !t) throw new Ce(`Graph.dropEdge: could not find the "${i}" -> "${r}" edge in the graph.`);
      } else if (e = "" + e, t = this._edges.get(e), !t) throw new Ce(`Graph.dropEdge: could not find the "${e}" edge in the graph.`);
      return _g(this, t), this;
    }
    /**
     * Method used to drop a single directed edge from the graph.
     *
     * @param  {any}    source - Source node.
     * @param  {any}    target - Target node.
     *
     * @return {Graph}
     *
     * @throws {Error} - Will throw if the edge doesn't exist.
     */
    dropDirectedEdge(e, t) {
      if (arguments.length < 2) throw new Ye("Graph.dropDirectedEdge: it does not make sense to try and drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.");
      if (this.multi) throw new Ye("Graph.dropDirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.");
      e = "" + e, t = "" + t;
      const i = io(this, e, t, "directed");
      if (!i) throw new Ce(`Graph.dropDirectedEdge: could not find a "${e}" -> "${t}" edge in the graph.`);
      return _g(this, i), this;
    }
    /**
     * Method used to drop a single undirected edge from the graph.
     *
     * @param  {any}    source - Source node.
     * @param  {any}    target - Target node.
     *
     * @return {Graph}
     *
     * @throws {Error} - Will throw if the edge doesn't exist.
     */
    dropUndirectedEdge(e, t) {
      if (arguments.length < 2) throw new Ye("Graph.dropUndirectedEdge: it does not make sense to drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.");
      if (this.multi) throw new Ye("Graph.dropUndirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.");
      const i = io(this, e, t, "undirected");
      if (!i) throw new Ce(`Graph.dropUndirectedEdge: could not find a "${e}" -> "${t}" edge in the graph.`);
      return _g(this, i), this;
    }
    /**
     * Method used to remove every edge & every node from the graph.
     *
     * @return {Graph}
     */
    clear() {
      this._edges.clear(), this._nodes.clear(), this._resetInstanceCounters(), this.emit("cleared");
    }
    /**
     * Method used to remove every edge from the graph.
     *
     * @return {Graph}
     */
    clearEdges() {
      const e = this._nodes.values();
      let t;
      for (; t = e.next(), t.done !== !0; )
        t.value.clear();
      this._edges.clear(), this._resetInstanceCounters(), this.emit("edgesCleared");
    }
    /**---------------------------------------------------------------------------
     * Attributes-related methods
     **---------------------------------------------------------------------------
     */
    /**
     * Method returning the desired graph's attribute.
     *
     * @param  {string} name - Name of the attribute.
     * @return {any}
     */
    getAttribute(e) {
      return this._attributes[e];
    }
    /**
     * Method returning the graph's attributes.
     *
     * @return {object}
     */
    getAttributes() {
      return this._attributes;
    }
    /**
     * Method returning whether the graph has the desired attribute.
     *
     * @param  {string}  name - Name of the attribute.
     * @return {boolean}
     */
    hasAttribute(e) {
      return this._attributes.hasOwnProperty(e);
    }
    /**
     * Method setting a value for the desired graph's attribute.
     *
     * @param  {string}  name  - Name of the attribute.
     * @param  {any}     value - Value for the attribute.
     * @return {Graph}
     */
    setAttribute(e, t) {
      return this._attributes[e] = t, this.emit("attributesUpdated", {
        type: "set",
        attributes: this._attributes,
        name: e
      }), this;
    }
    /**
     * Method using a function to update the desired graph's attribute's value.
     *
     * @param  {string}   name    - Name of the attribute.
     * @param  {function} updater - Function use to update the attribute's value.
     * @return {Graph}
     */
    updateAttribute(e, t) {
      if (typeof t != "function") throw new Pe("Graph.updateAttribute: updater should be a function.");
      const i = this._attributes[e];
      return this._attributes[e] = t(i), this.emit("attributesUpdated", {
        type: "set",
        attributes: this._attributes,
        name: e
      }), this;
    }
    /**
     * Method removing the desired graph's attribute.
     *
     * @param  {string} name  - Name of the attribute.
     * @return {Graph}
     */
    removeAttribute(e) {
      return delete this._attributes[e], this.emit("attributesUpdated", {
        type: "remove",
        attributes: this._attributes,
        name: e
      }), this;
    }
    /**
     * Method replacing the graph's attributes.
     *
     * @param  {object} attributes - New attributes.
     * @return {Graph}
     *
     * @throws {Error} - Will throw if given attributes are not a plain object.
     */
    replaceAttributes(e) {
      if (!zi(e)) throw new Pe("Graph.replaceAttributes: provided attributes are not a plain object.");
      return this._attributes = e, this.emit("attributesUpdated", {
        type: "replace",
        attributes: this._attributes
      }), this;
    }
    /**
     * Method merging the graph's attributes.
     *
     * @param  {object} attributes - Attributes to merge.
     * @return {Graph}
     *
     * @throws {Error} - Will throw if given attributes are not a plain object.
     */
    mergeAttributes(e) {
      if (!zi(e)) throw new Pe("Graph.mergeAttributes: provided attributes are not a plain object.");
      return Si(this._attributes, e), this.emit("attributesUpdated", {
        type: "merge",
        attributes: this._attributes,
        data: e
      }), this;
    }
    /**
     * Method updating the graph's attributes.
     *
     * @param  {function} updater - Function used to update the attributes.
     * @return {Graph}
     *
     * @throws {Error} - Will throw if given updater is not a function.
     */
    updateAttributes(e) {
      if (typeof e != "function") throw new Pe("Graph.updateAttributes: provided updater is not a function.");
      return this._attributes = e(this._attributes), this.emit("attributesUpdated", {
        type: "update",
        attributes: this._attributes
      }), this;
    }
    /**
     * Method used to update each node's attributes using the given function.
     *
     * @param {function}  updater - Updater function to use.
     * @param {object}    [hints] - Optional hints.
     */
    updateEachNodeAttributes(e, t) {
      if (typeof e != "function") throw new Pe("Graph.updateEachNodeAttributes: expecting an updater function.");
      if (t && !Yj(t)) throw new Pe("Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");
      const i = this._nodes.values();
      let r, s;
      for (; r = i.next(), r.done !== !0; )
        s = r.value, s.attributes = e(s.key, s.attributes);
      this.emit("eachNodeAttributesUpdated", {
        hints: t || null
      });
    }
    /**
     * Method used to update each edge's attributes using the given function.
     *
     * @param {function}  updater - Updater function to use.
     * @param {object}    [hints] - Optional hints.
     */
    updateEachEdgeAttributes(e, t) {
      if (typeof e != "function") throw new Pe("Graph.updateEachEdgeAttributes: expecting an updater function.");
      if (t && !Yj(t)) throw new Pe("Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");
      const i = this._edges.values();
      let r, s, o, a;
      for (; r = i.next(), r.done !== !0; )
        s = r.value, o = s.source, a = s.target, s.attributes = e(s.key, s.attributes, o.key, a.key, o.attributes, a.attributes, s.undirected);
      this.emit("eachEdgeAttributesUpdated", {
        hints: t || null
      });
    }
    /**---------------------------------------------------------------------------
     * Iteration-related methods
     **---------------------------------------------------------------------------
     */
    /**
     * Method iterating over the graph's adjacency using the given callback.
     *
     * @param  {function}  callback - Callback to use.
     */
    forEachAdjacencyEntry(e) {
      if (typeof e != "function") throw new Pe("Graph.forEachAdjacencyEntry: expecting a callback.");
      XC(!1, !1, !1, this, e);
    }
    forEachAdjacencyEntryWithOrphans(e) {
      if (typeof e != "function") throw new Pe("Graph.forEachAdjacencyEntryWithOrphans: expecting a callback.");
      XC(!1, !1, !0, this, e);
    }
    /**
     * Method iterating over the graph's assymetric adjacency using the given callback.
     *
     * @param  {function}  callback - Callback to use.
     */
    forEachAssymetricAdjacencyEntry(e) {
      if (typeof e != "function") throw new Pe("Graph.forEachAssymetricAdjacencyEntry: expecting a callback.");
      XC(!1, !0, !1, this, e);
    }
    forEachAssymetricAdjacencyEntryWithOrphans(e) {
      if (typeof e != "function") throw new Pe("Graph.forEachAssymetricAdjacencyEntryWithOrphans: expecting a callback.");
      XC(!1, !0, !0, this, e);
    }
    /**
     * Method returning the list of the graph's nodes.
     *
     * @return {array} - The nodes.
     */
    nodes() {
      return typeof Array.from == "function" ? Array.from(this._nodes.keys()) : fX(this._nodes.keys(), this._nodes.size);
    }
    /**
     * Method iterating over the graph's nodes using the given callback.
     *
     * @param  {function}  callback - Callback (key, attributes, index).
     */
    forEachNode(e) {
      if (typeof e != "function") throw new Pe("Graph.forEachNode: expecting a callback.");
      const t = this._nodes.values();
      let i, r;
      for (; i = t.next(), i.done !== !0; )
        r = i.value, e(r.key, r.attributes);
    }
    /**
     * Method iterating attempting to find a node matching the given predicate
     * function.
     *
     * @param  {function}  callback - Callback (key, attributes).
     */
    findNode(e) {
      if (typeof e != "function") throw new Pe("Graph.findNode: expecting a callback.");
      const t = this._nodes.values();
      let i, r;
      for (; i = t.next(), i.done !== !0; )
        if (r = i.value, e(r.key, r.attributes)) return r.key;
    }
    /**
     * Method mapping nodes.
     *
     * @param  {function}  callback - Callback (key, attributes).
     */
    mapNodes(e) {
      if (typeof e != "function") throw new Pe("Graph.mapNode: expecting a callback.");
      const t = this._nodes.values();
      let i, r;
      const s = new Array(this.order);
      let o = 0;
      for (; i = t.next(), i.done !== !0; )
        r = i.value, s[o++] = e(r.key, r.attributes);
      return s;
    }
    /**
     * Method returning whether some node verify the given predicate.
     *
     * @param  {function}  callback - Callback (key, attributes).
     */
    someNode(e) {
      if (typeof e != "function") throw new Pe("Graph.someNode: expecting a callback.");
      const t = this._nodes.values();
      let i, r;
      for (; i = t.next(), i.done !== !0; )
        if (r = i.value, e(r.key, r.attributes)) return !0;
      return !1;
    }
    /**
     * Method returning whether all node verify the given predicate.
     *
     * @param  {function}  callback - Callback (key, attributes).
     */
    everyNode(e) {
      if (typeof e != "function") throw new Pe("Graph.everyNode: expecting a callback.");
      const t = this._nodes.values();
      let i, r;
      for (; i = t.next(), i.done !== !0; )
        if (r = i.value, !e(r.key, r.attributes)) return !1;
      return !0;
    }
    /**
     * Method filtering nodes.
     *
     * @param  {function}  callback - Callback (key, attributes).
     */
    filterNodes(e) {
      if (typeof e != "function") throw new Pe("Graph.filterNodes: expecting a callback.");
      const t = this._nodes.values();
      let i, r;
      const s = [];
      for (; i = t.next(), i.done !== !0; )
        r = i.value, e(r.key, r.attributes) && s.push(r.key);
      return s;
    }
    /**
     * Method reducing nodes.
     *
     * @param  {function}  callback - Callback (accumulator, key, attributes).
     */
    reduceNodes(e, t) {
      if (typeof e != "function") throw new Pe("Graph.reduceNodes: expecting a callback.");
      if (arguments.length < 2) throw new Pe("Graph.reduceNodes: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.");
      let i = t;
      const r = this._nodes.values();
      let s, o;
      for (; s = r.next(), s.done !== !0; )
        o = s.value, i = e(i, o.key, o.attributes);
      return i;
    }
    /**
     * Method returning an iterator over the graph's node entries.
     *
     * @return {Iterator}
     */
    nodeEntries() {
      const e = this._nodes.values();
      return new uo(() => {
        const t = e.next();
        if (t.done) return t;
        const i = t.value;
        return {
          value: {
            node: i.key,
            attributes: i.attributes
          },
          done: !1
        };
      });
    }
    /**---------------------------------------------------------------------------
     * Serialization
     **---------------------------------------------------------------------------
     */
    /**
     * Method used to export the whole graph.
     *
     * @return {object} - The serialized graph.
     */
    export() {
      const e = new Array(this._nodes.size);
      let t = 0;
      this._nodes.forEach((r, s) => {
        e[t++] = pze(s, r);
      });
      const i = new Array(this._edges.size);
      return t = 0, this._edges.forEach((r, s) => {
        i[t++] = mze(this.type, s, r);
      }), {
        options: {
          type: this.type,
          multi: this.multi,
          allowSelfLoops: this.allowSelfLoops
        },
        attributes: this.getAttributes(),
        nodes: e,
        edges: i
      };
    }
    /**
     * Method used to import a serialized graph.
     *
     * @param  {object|Graph} data  - The serialized graph.
     * @param  {boolean}      merge - Whether to merge data.
     * @return {Graph}              - Returns itself for chaining.
     */
    import(e, t = !1) {
      if (e instanceof an)
        return e.forEachNode((l, c) => {
          t ? this.mergeNode(l, c) : this.addNode(l, c);
        }), e.forEachEdge((l, c, u, h, d, f, g) => {
          t ? g ? this.mergeUndirectedEdgeWithKey(l, u, h, c) : this.mergeDirectedEdgeWithKey(l, u, h, c) : g ? this.addUndirectedEdgeWithKey(l, u, h, c) : this.addDirectedEdgeWithKey(l, u, h, c);
        }), this;
      if (!zi(e)) throw new Pe("Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.");
      if (e.attributes) {
        if (!zi(e.attributes)) throw new Pe("Graph.import: invalid attributes. Expecting a plain object.");
        t ? this.mergeAttributes(e.attributes) : this.replaceAttributes(e.attributes);
      }
      let i, r, s, o, a;
      if (e.nodes) {
        if (s = e.nodes, !Array.isArray(s)) throw new Pe("Graph.import: invalid nodes. Expecting an array.");
        for (i = 0, r = s.length; i < r; i++) {
          o = s[i], bze(o);
          const {
            key: l,
            attributes: c
          } = o;
          t ? this.mergeNode(l, c) : this.addNode(l, c);
        }
      }
      if (e.edges) {
        let l = !1;
        if (this.type === "undirected" && (l = !0), s = e.edges, !Array.isArray(s)) throw new Pe("Graph.import: invalid edges. Expecting an array.");
        for (i = 0, r = s.length; i < r; i++) {
          a = s[i], vze(a);
          const {
            source: c,
            target: u,
            attributes: h,
            undirected: d = l
          } = a;
          let f;
          "key" in a ? (f = t ? d ? this.mergeUndirectedEdgeWithKey : this.mergeDirectedEdgeWithKey : d ? this.addUndirectedEdgeWithKey : this.addDirectedEdgeWithKey, f.call(this, a.key, c, u, h)) : (f = t ? d ? this.mergeUndirectedEdge : this.mergeDirectedEdge : d ? this.addUndirectedEdge : this.addDirectedEdge, f.call(this, c, u, h));
        }
      }
      return this;
    }
    /**---------------------------------------------------------------------------
     * Utils
     **---------------------------------------------------------------------------
     */
    /**
     * Method returning a null copy of the graph, i.e. a graph without nodes
     * & edges but with the exact same options.
     *
     * @param  {object} options - Options to merge with the current ones.
     * @return {Graph}          - The null copy.
     */
    nullCopy(e) {
      const t = new an(Si({}, this._options, e));
      return t.replaceAttributes(Si({}, this.getAttributes())), t;
    }
    /**
     * Method returning an empty copy of the graph, i.e. a graph without edges but
     * with the exact same options.
     *
     * @param  {object} options - Options to merge with the current ones.
     * @return {Graph}          - The empty copy.
     */
    emptyCopy(e) {
      const t = this.nullCopy(e);
      return this._nodes.forEach((i, r) => {
        const s = Si({}, i.attributes);
        i = new t.NodeDataClass(r, s), t._nodes.set(r, i);
      }), t;
    }
    /**
     * Method returning an exact copy of the graph.
     *
     * @param  {object} options - Upgrade options.
     * @return {Graph}          - The copy.
     */
    copy(e) {
      if (e = e || {}, typeof e.type == "string" && e.type !== this.type && e.type !== "mixed") throw new Ye(`Graph.copy: cannot create an incompatible copy from "${this.type}" type to "${e.type}" because this would mean losing information about the current graph.`);
      if (typeof e.multi == "boolean" && e.multi !== this.multi && e.multi !== !0) throw new Ye("Graph.copy: cannot create an incompatible copy by downgrading a multi graph to a simple one because this would mean losing information about the current graph.");
      if (typeof e.allowSelfLoops == "boolean" && e.allowSelfLoops !== this.allowSelfLoops && e.allowSelfLoops !== !0) throw new Ye("Graph.copy: cannot create an incompatible copy from a graph allowing self loops to one that does not because this would mean losing information about the current graph.");
      const t = this.emptyCopy(e), i = this._edges.values();
      let r, s;
      for (; r = i.next(), r.done !== !0; )
        s = r.value, SX(t, "copy", !1, s.undirected, s.key, s.source.key, s.target.key, Si({}, s.attributes));
      return t;
    }
    /**---------------------------------------------------------------------------
     * Known methods
     **---------------------------------------------------------------------------
     */
    /**
     * Method used by JavaScript to perform JSON serialization.
     *
     * @return {object} - The serialized graph.
     */
    toJSON() {
      return this.export();
    }
    /**
     * Method returning [object Graph].
     */
    toString() {
      return "[object Graph]";
    }
    /**
     * Method used internally by node's console to display a custom object.
     *
     * @return {object} - Formatted object representation of the graph.
     */
    inspect() {
      const e = {};
      this._nodes.forEach((s, o) => {
        e[o] = s.attributes;
      });
      const t = {}, i = {};
      this._edges.forEach((s, o) => {
        const a = s.undirected ? "--" : "->";
        let l = "", c = s.source.key, u = s.target.key, h;
        s.undirected && c > u && (h = c, c = u, u = h);
        const d = `(${c})${a}(${u})`;
        o.startsWith("geid_") ? this.multi && (typeof i[d] > "u" ? i[d] = 0 : i[d]++, l += `${i[d]}. `) : l += `[${o}]: `, l += d, t[l] = s.attributes;
      });
      const r = {};
      for (const s in this)
        this.hasOwnProperty(s) && !Kj.has(s) && typeof this[s] != "function" && typeof s != "symbol" && (r[s] = this[s]);
      return r.attributes = this._attributes, r.nodes = e, r.edges = t, Bs(r, "constructor", this.constructor), r;
    }
  }
  typeof Symbol < "u" && (an.prototype[Symbol.for("nodejs.util.inspect.custom")] = an.prototype.inspect);
  Cze.forEach((n) => {
    ["add", "merge", "update"].forEach((e) => {
      const t = n.name(e), i = e === "add" ? SX : Rze;
      n.generateKey ? an.prototype[t] = function(r, s, o) {
        return i(this, t, !0, (n.type || this.type) === "undirected", null, r, s, o, e === "update");
      } : an.prototype[t] = function(r, s, o, a) {
        return i(this, t, !1, (n.type || this.type) === "undirected", r, s, o, a, e === "update");
      };
    });
  });
  k5e(an);
  z5e(an);
  oze(an);
  gze(an);
  class _X extends an {
    constructor(e) {
      const t = Si({
        type: "directed"
      }, e);
      if ("multi" in t && t.multi !== !1) throw new Pe("DirectedGraph.from: inconsistent indication that the graph should be multi in given options!");
      if (t.type !== "directed") throw new Pe('DirectedGraph.from: inconsistent "' + t.type + '" type in given options!');
      super(t);
    }
  }
  class RX extends an {
    constructor(e) {
      const t = Si({
        type: "undirected"
      }, e);
      if ("multi" in t && t.multi !== !1) throw new Pe("UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!");
      if (t.type !== "undirected") throw new Pe('UndirectedGraph.from: inconsistent "' + t.type + '" type in given options!');
      super(t);
    }
  }
  class EX extends an {
    constructor(e) {
      const t = Si({
        multi: !0
      }, e);
      if ("multi" in t && t.multi !== !0) throw new Pe("MultiGraph.from: inconsistent indication that the graph should be simple in given options!");
      super(t);
    }
  }
  class xX extends an {
    constructor(e) {
      const t = Si({
        type: "directed",
        multi: !0
      }, e);
      if ("multi" in t && t.multi !== !0) throw new Pe("MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!");
      if (t.type !== "directed") throw new Pe('MultiDirectedGraph.from: inconsistent "' + t.type + '" type in given options!');
      super(t);
    }
  }
  class TX extends an {
    constructor(e) {
      const t = Si({
        type: "undirected",
        multi: !0
      }, e);
      if ("multi" in t && t.multi !== !0) throw new Pe("MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!");
      if (t.type !== "undirected") throw new Pe('MultiUndirectedGraph.from: inconsistent "' + t.type + '" type in given options!');
      super(t);
    }
  }
  function am(n) {
    n.from = function(e, t) {
      const i = Si({}, e.options, t), r = new n(i);
      return r.import(e), r;
    };
  }
  am(an);
  am(_X);
  am(RX);
  am(EX);
  am(xX);
  am(TX);
  an.Graph = an;
  an.DirectedGraph = _X;
  an.UndirectedGraph = RX;
  an.MultiGraph = EX;
  an.MultiDirectedGraph = xX;
  an.MultiUndirectedGraph = TX;
  an.InvalidArgumentsGraphError = Pe;
  an.NotFoundGraphError = Ce;
  an.UsageGraphError = Ye;
  function Eze(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function Gv(n) {
    var e = Eze(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function br(n, e) {
    if (!(n instanceof e)) throw new TypeError("Cannot call a class as a function");
  }
  function Xj(n, e) {
    for (var t = 0; t < e.length; t++) {
      var i = e[t];
      i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(n, Gv(i.key), i);
    }
  }
  function vr(n, e, t) {
    return e && Xj(n.prototype, e), t && Xj(n, t), Object.defineProperty(n, "prototype", {
      writable: !1
    }), n;
  }
  function Ip(n) {
    return Ip = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(e) {
      return e.__proto__ || Object.getPrototypeOf(e);
    }, Ip(n);
  }
  function MX() {
    try {
      var n = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
    } catch {
    }
    return (MX = function() {
      return !!n;
    })();
  }
  function ve(n) {
    if (n === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return n;
  }
  function xze(n, e) {
    if (e && (typeof e == "object" || typeof e == "function")) return e;
    if (e !== void 0) throw new TypeError("Derived constructors may only return object or undefined");
    return ve(n);
  }
  function vo(n, e, t) {
    return e = Ip(e), xze(n, MX() ? Reflect.construct(e, t || [], Ip(n).constructor) : e.apply(n, t));
  }
  function XI(n, e) {
    return XI = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, i) {
      return t.__proto__ = i, t;
    }, XI(n, e);
  }
  function wo(n, e) {
    if (typeof e != "function" && e !== null) throw new TypeError("Super expression must either be null or a function");
    n.prototype = Object.create(e && e.prototype, {
      constructor: {
        value: n,
        writable: !0,
        configurable: !0
      }
    }), Object.defineProperty(n, "prototype", {
      writable: !1
    }), e && XI(n, e);
  }
  function Tze(n) {
    if (Array.isArray(n)) return n;
  }
  function Mze(n, e) {
    var t = n == null ? null : typeof Symbol < "u" && n[Symbol.iterator] || n["@@iterator"];
    if (t != null) {
      var i, r, s, o, a = [], l = !0, c = !1;
      try {
        if (s = (t = t.call(n)).next, e === 0) {
          if (Object(t) !== t) return;
          l = !1;
        } else for (; !(l = (i = s.call(t)).done) && (a.push(i.value), a.length !== e); l = !0) ;
      } catch (u) {
        c = !0, r = u;
      } finally {
        try {
          if (!l && t.return != null && (o = t.return(), Object(o) !== o)) return;
        } finally {
          if (c) throw r;
        }
      }
      return a;
    }
  }
  function ZI(n, e) {
    (e == null || e > n.length) && (e = n.length);
    for (var t = 0, i = Array(e); t < e; t++) i[t] = n[t];
    return i;
  }
  function AX(n, e) {
    if (n) {
      if (typeof n == "string") return ZI(n, e);
      var t = {}.toString.call(n).slice(8, -1);
      return t === "Object" && n.constructor && (t = n.constructor.name), t === "Map" || t === "Set" ? Array.from(n) : t === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? ZI(n, e) : void 0;
    }
  }
  function Aze() {
    throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function kR(n, e) {
    return Tze(n) || Mze(n, e) || AX(n, e) || Aze();
  }
  var oA = {
    black: "#000000",
    silver: "#C0C0C0",
    gray: "#808080",
    grey: "#808080",
    white: "#FFFFFF",
    maroon: "#800000",
    red: "#FF0000",
    purple: "#800080",
    fuchsia: "#FF00FF",
    green: "#008000",
    lime: "#00FF00",
    olive: "#808000",
    yellow: "#FFFF00",
    navy: "#000080",
    blue: "#0000FF",
    teal: "#008080",
    aqua: "#00FFFF",
    darkblue: "#00008B",
    mediumblue: "#0000CD",
    darkgreen: "#006400",
    darkcyan: "#008B8B",
    deepskyblue: "#00BFFF",
    darkturquoise: "#00CED1",
    mediumspringgreen: "#00FA9A",
    springgreen: "#00FF7F",
    cyan: "#00FFFF",
    midnightblue: "#191970",
    dodgerblue: "#1E90FF",
    lightseagreen: "#20B2AA",
    forestgreen: "#228B22",
    seagreen: "#2E8B57",
    darkslategray: "#2F4F4F",
    darkslategrey: "#2F4F4F",
    limegreen: "#32CD32",
    mediumseagreen: "#3CB371",
    turquoise: "#40E0D0",
    royalblue: "#4169E1",
    steelblue: "#4682B4",
    darkslateblue: "#483D8B",
    mediumturquoise: "#48D1CC",
    indigo: "#4B0082",
    darkolivegreen: "#556B2F",
    cadetblue: "#5F9EA0",
    cornflowerblue: "#6495ED",
    rebeccapurple: "#663399",
    mediumaquamarine: "#66CDAA",
    dimgray: "#696969",
    dimgrey: "#696969",
    slateblue: "#6A5ACD",
    olivedrab: "#6B8E23",
    slategray: "#708090",
    slategrey: "#708090",
    lightslategray: "#778899",
    lightslategrey: "#778899",
    mediumslateblue: "#7B68EE",
    lawngreen: "#7CFC00",
    chartreuse: "#7FFF00",
    aquamarine: "#7FFFD4",
    skyblue: "#87CEEB",
    lightskyblue: "#87CEFA",
    blueviolet: "#8A2BE2",
    darkred: "#8B0000",
    darkmagenta: "#8B008B",
    saddlebrown: "#8B4513",
    darkseagreen: "#8FBC8F",
    lightgreen: "#90EE90",
    mediumpurple: "#9370DB",
    darkviolet: "#9400D3",
    palegreen: "#98FB98",
    darkorchid: "#9932CC",
    yellowgreen: "#9ACD32",
    sienna: "#A0522D",
    brown: "#A52A2A",
    darkgray: "#A9A9A9",
    darkgrey: "#A9A9A9",
    lightblue: "#ADD8E6",
    greenyellow: "#ADFF2F",
    paleturquoise: "#AFEEEE",
    lightsteelblue: "#B0C4DE",
    powderblue: "#B0E0E6",
    firebrick: "#B22222",
    darkgoldenrod: "#B8860B",
    mediumorchid: "#BA55D3",
    rosybrown: "#BC8F8F",
    darkkhaki: "#BDB76B",
    mediumvioletred: "#C71585",
    indianred: "#CD5C5C",
    peru: "#CD853F",
    chocolate: "#D2691E",
    tan: "#D2B48C",
    lightgray: "#D3D3D3",
    lightgrey: "#D3D3D3",
    thistle: "#D8BFD8",
    orchid: "#DA70D6",
    goldenrod: "#DAA520",
    palevioletred: "#DB7093",
    crimson: "#DC143C",
    gainsboro: "#DCDCDC",
    plum: "#DDA0DD",
    burlywood: "#DEB887",
    lightcyan: "#E0FFFF",
    lavender: "#E6E6FA",
    darksalmon: "#E9967A",
    violet: "#EE82EE",
    palegoldenrod: "#EEE8AA",
    lightcoral: "#F08080",
    khaki: "#F0E68C",
    aliceblue: "#F0F8FF",
    honeydew: "#F0FFF0",
    azure: "#F0FFFF",
    sandybrown: "#F4A460",
    wheat: "#F5DEB3",
    beige: "#F5F5DC",
    whitesmoke: "#F5F5F5",
    mintcream: "#F5FFFA",
    ghostwhite: "#F8F8FF",
    salmon: "#FA8072",
    antiquewhite: "#FAEBD7",
    linen: "#FAF0E6",
    lightgoldenrodyellow: "#FAFAD2",
    oldlace: "#FDF5E6",
    magenta: "#FF00FF",
    deeppink: "#FF1493",
    orangered: "#FF4500",
    tomato: "#FF6347",
    hotpink: "#FF69B4",
    coral: "#FF7F50",
    darkorange: "#FF8C00",
    lightsalmon: "#FFA07A",
    orange: "#FFA500",
    lightpink: "#FFB6C1",
    pink: "#FFC0CB",
    gold: "#FFD700",
    peachpuff: "#FFDAB9",
    navajowhite: "#FFDEAD",
    moccasin: "#FFE4B5",
    bisque: "#FFE4C4",
    mistyrose: "#FFE4E1",
    blanchedalmond: "#FFEBCD",
    papayawhip: "#FFEFD5",
    lavenderblush: "#FFF0F5",
    seashell: "#FFF5EE",
    cornsilk: "#FFF8DC",
    lemonchiffon: "#FFFACD",
    floralwhite: "#FFFAF0",
    snow: "#FFFAFA",
    lightyellow: "#FFFFE0",
    ivory: "#FFFFF0"
  }, PX = new Int8Array(4), aA = new Int32Array(PX.buffer, 0, 1), Pze = new Float32Array(PX.buffer, 0, 1), Ize = /^\s*rgba?\s*\(/, Oze = /^\s*rgba?\s*\(\s*([0-9]*)\s*,\s*([0-9]*)\s*,\s*([0-9]*)(?:\s*,\s*(.*)?)?\)\s*$/;
  function kze(n) {
    var e = 0, t = 0, i = 0, r = 1;
    if (n[0] === "#")
      n.length === 4 ? (e = parseInt(n.charAt(1) + n.charAt(1), 16), t = parseInt(n.charAt(2) + n.charAt(2), 16), i = parseInt(n.charAt(3) + n.charAt(3), 16)) : (e = parseInt(n.charAt(1) + n.charAt(2), 16), t = parseInt(n.charAt(3) + n.charAt(4), 16), i = parseInt(n.charAt(5) + n.charAt(6), 16)), n.length === 9 && (r = parseInt(n.charAt(7) + n.charAt(8), 16) / 255);
    else if (Ize.test(n)) {
      var s = n.match(Oze);
      s && (e = +s[1], t = +s[2], i = +s[3], s[4] && (r = +s[4]));
    }
    return {
      r: e,
      g: t,
      b: i,
      a: r
    };
  }
  var fp = {};
  for (var ZC in oA)
    fp[ZC] = lm(oA[ZC]), fp[oA[ZC]] = fp[ZC];
  function IX(n, e, t, i, r) {
    return aA[0] = i << 24 | t << 16 | e << 8 | n, aA[0] = aA[0] & 4278190079, Pze[0];
  }
  function lm(n) {
    if (n = n.toLowerCase(), typeof fp[n] < "u") return fp[n];
    var e = kze(n), t = e.r, i = e.g, r = e.b, s = e.a;
    s = s * 255 | 0;
    var o = IX(t, i, r, s);
    return fp[n] = o, o;
  }
  var lA = {};
  function OX(n) {
    if (typeof lA[n] < "u") return lA[n];
    var e = (n & 16711680) >>> 16, t = (n & 65280) >>> 8, i = n & 255, r = 255, s = IX(e, t, i, r);
    return lA[n] = s, s;
  }
  function Zj(n, e, t, i) {
    return t + (e << 8) + (n << 16);
  }
  function Qj(n, e, t, i, r, s) {
    var o = Math.floor(t / s * r), a = Math.floor(n.drawingBufferHeight / s - i / s * r), l = new Uint8Array(4);
    n.bindFramebuffer(n.FRAMEBUFFER, e), n.readPixels(o, a, 1, 1, n.RGBA, n.UNSIGNED_BYTE, l);
    var c = kR(l, 4), u = c[0], h = c[1], d = c[2], f = c[3];
    return [u, h, d, f];
  }
  function de(n, e, t) {
    return (e = Gv(e)) in n ? Object.defineProperty(n, e, {
      value: t,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : n[e] = t, n;
  }
  function Jj(n, e) {
    var t = Object.keys(n);
    if (Object.getOwnPropertySymbols) {
      var i = Object.getOwnPropertySymbols(n);
      e && (i = i.filter(function(r) {
        return Object.getOwnPropertyDescriptor(n, r).enumerable;
      })), t.push.apply(t, i);
    }
    return t;
  }
  function We(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e] != null ? arguments[e] : {};
      e % 2 ? Jj(Object(t), !0).forEach(function(i) {
        de(n, i, t[i]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(n, Object.getOwnPropertyDescriptors(t)) : Jj(Object(t)).forEach(function(i) {
        Object.defineProperty(n, i, Object.getOwnPropertyDescriptor(t, i));
      });
    }
    return n;
  }
  function Dze(n, e) {
    for (; !{}.hasOwnProperty.call(n, e) && (n = Ip(n)) !== null; ) ;
    return n;
  }
  function QI() {
    return QI = typeof Reflect < "u" && Reflect.get ? Reflect.get.bind() : function(n, e, t) {
      var i = Dze(n, e);
      if (i) {
        var r = Object.getOwnPropertyDescriptor(i, e);
        return r.get ? r.get.call(arguments.length < 3 ? n : t) : r.value;
      }
    }, QI.apply(null, arguments);
  }
  function kX(n, e, t, i) {
    var r = QI(Ip(n.prototype), e, t);
    return typeof r == "function" ? function(s) {
      return r.apply(t, s);
    } : r;
  }
  function Nze(n) {
    return n.normalized ? 1 : n.size;
  }
  function cA(n) {
    var e = 0;
    return n.forEach(function(t) {
      return e += Nze(t);
    }), e;
  }
  function DX(n, e, t) {
    var i = n === "VERTEX" ? e.VERTEX_SHADER : e.FRAGMENT_SHADER, r = e.createShader(i);
    if (r === null)
      throw new Error("loadShader: error while creating the shader");
    e.shaderSource(r, t), e.compileShader(r);
    var s = e.getShaderParameter(r, e.COMPILE_STATUS);
    if (!s) {
      var o = e.getShaderInfoLog(r);
      throw e.deleteShader(r), new Error(`loadShader: error while compiling the shader:
`.concat(o, `
`).concat(t));
    }
    return r;
  }
  function Lze(n, e) {
    return DX("VERTEX", n, e);
  }
  function Hze(n, e) {
    return DX("FRAGMENT", n, e);
  }
  function $ze(n, e) {
    var t = n.createProgram();
    if (t === null)
      throw new Error("loadProgram: error while creating the program.");
    var i, r;
    for (i = 0, r = e.length; i < r; i++) n.attachShader(t, e[i]);
    n.linkProgram(t);
    var s = n.getProgramParameter(t, n.LINK_STATUS);
    if (!s)
      throw n.deleteProgram(t), new Error("loadProgram: error while linking the program.");
    return t;
  }
  function e6(n) {
    var e = n.gl, t = n.buffer, i = n.program, r = n.vertexShader, s = n.fragmentShader;
    e.deleteShader(r), e.deleteShader(s), e.deleteProgram(i), e.deleteBuffer(t);
  }
  var t6 = `#define PICKING_MODE
`, Fze = de(de(de(de(de(de(de(de({}, WebGL2RenderingContext.BOOL, 1), WebGL2RenderingContext.BYTE, 1), WebGL2RenderingContext.UNSIGNED_BYTE, 1), WebGL2RenderingContext.SHORT, 2), WebGL2RenderingContext.UNSIGNED_SHORT, 2), WebGL2RenderingContext.INT, 4), WebGL2RenderingContext.UNSIGNED_INT, 4), WebGL2RenderingContext.FLOAT, 4), NX = /* @__PURE__ */ function() {
    function n(e, t, i) {
      br(this, n), de(this, "array", new Float32Array()), de(this, "constantArray", new Float32Array()), de(this, "capacity", 0), de(this, "verticesCount", 0);
      var r = this.getDefinition();
      if (this.VERTICES = r.VERTICES, this.VERTEX_SHADER_SOURCE = r.VERTEX_SHADER_SOURCE, this.FRAGMENT_SHADER_SOURCE = r.FRAGMENT_SHADER_SOURCE, this.UNIFORMS = r.UNIFORMS, this.ATTRIBUTES = r.ATTRIBUTES, this.METHOD = r.METHOD, this.CONSTANT_ATTRIBUTES = "CONSTANT_ATTRIBUTES" in r ? r.CONSTANT_ATTRIBUTES : [], this.CONSTANT_DATA = "CONSTANT_DATA" in r ? r.CONSTANT_DATA : [], this.isInstanced = "CONSTANT_ATTRIBUTES" in r, this.ATTRIBUTES_ITEMS_COUNT = cA(this.ATTRIBUTES), this.STRIDE = this.VERTICES * this.ATTRIBUTES_ITEMS_COUNT, this.renderer = i, this.normalProgram = this.getProgramInfo("normal", e, r.VERTEX_SHADER_SOURCE, r.FRAGMENT_SHADER_SOURCE, null), this.pickProgram = t ? this.getProgramInfo("pick", e, t6 + r.VERTEX_SHADER_SOURCE, t6 + r.FRAGMENT_SHADER_SOURCE, t) : null, this.isInstanced) {
        var s = cA(this.CONSTANT_ATTRIBUTES);
        if (this.CONSTANT_DATA.length !== this.VERTICES) throw new Error("Program: error while getting constant data (expected ".concat(this.VERTICES, " items, received ").concat(this.CONSTANT_DATA.length, " instead)"));
        this.constantArray = new Float32Array(this.CONSTANT_DATA.length * s);
        for (var o = 0; o < this.CONSTANT_DATA.length; o++) {
          var a = this.CONSTANT_DATA[o];
          if (a.length !== s) throw new Error("Program: error while getting constant data (one vector has ".concat(a.length, " items instead of ").concat(s, ")"));
          for (var l = 0; l < a.length; l++) this.constantArray[o * s + l] = a[l];
        }
        this.STRIDE = this.ATTRIBUTES_ITEMS_COUNT;
      }
    }
    return vr(n, [{
      key: "kill",
      value: function() {
        e6(this.normalProgram), this.pickProgram && (e6(this.pickProgram), this.pickProgram = null);
      }
    }, {
      key: "getProgramInfo",
      value: function(t, i, r, s, o) {
        var a = this.getDefinition(), l = i.createBuffer();
        if (l === null) throw new Error("Program: error while creating the WebGL buffer.");
        var c = Lze(i, r), u = Hze(i, s), h = $ze(i, [c, u]), d = {};
        a.UNIFORMS.forEach(function(p) {
          var m = i.getUniformLocation(h, p);
          m && (d[p] = m);
        });
        var f = {};
        a.ATTRIBUTES.forEach(function(p) {
          f[p.name] = i.getAttribLocation(h, p.name);
        });
        var g;
        if ("CONSTANT_ATTRIBUTES" in a && (a.CONSTANT_ATTRIBUTES.forEach(function(p) {
          f[p.name] = i.getAttribLocation(h, p.name);
        }), g = i.createBuffer(), g === null))
          throw new Error("Program: error while creating the WebGL constant buffer.");
        return {
          name: t,
          program: h,
          gl: i,
          frameBuffer: o,
          buffer: l,
          constantBuffer: g || {},
          uniformLocations: d,
          attributeLocations: f,
          isPicking: t === "pick",
          vertexShader: c,
          fragmentShader: u
        };
      }
    }, {
      key: "bindProgram",
      value: function(t) {
        var i = this, r = 0, s = t.gl, o = t.buffer;
        this.isInstanced ? (s.bindBuffer(s.ARRAY_BUFFER, t.constantBuffer), r = 0, this.CONSTANT_ATTRIBUTES.forEach(function(a) {
          return r += i.bindAttribute(a, t, r, !1);
        }), s.bufferData(s.ARRAY_BUFFER, this.constantArray, s.STATIC_DRAW), s.bindBuffer(s.ARRAY_BUFFER, t.buffer), r = 0, this.ATTRIBUTES.forEach(function(a) {
          return r += i.bindAttribute(a, t, r, !0);
        }), s.bufferData(s.ARRAY_BUFFER, this.array, s.DYNAMIC_DRAW)) : (s.bindBuffer(s.ARRAY_BUFFER, o), r = 0, this.ATTRIBUTES.forEach(function(a) {
          return r += i.bindAttribute(a, t, r);
        }), s.bufferData(s.ARRAY_BUFFER, this.array, s.DYNAMIC_DRAW)), s.bindBuffer(s.ARRAY_BUFFER, null);
      }
    }, {
      key: "unbindProgram",
      value: function(t) {
        var i = this;
        this.isInstanced ? (this.CONSTANT_ATTRIBUTES.forEach(function(r) {
          return i.unbindAttribute(r, t, !1);
        }), this.ATTRIBUTES.forEach(function(r) {
          return i.unbindAttribute(r, t, !0);
        })) : this.ATTRIBUTES.forEach(function(r) {
          return i.unbindAttribute(r, t);
        });
      }
    }, {
      key: "bindAttribute",
      value: function(t, i, r, s) {
        var o = Fze[t.type];
        if (typeof o != "number") throw new Error('Program.bind: yet unsupported attribute type "'.concat(t.type, '"'));
        var a = i.attributeLocations[t.name], l = i.gl;
        if (a !== -1) {
          l.enableVertexAttribArray(a);
          var c = this.isInstanced ? (s ? this.ATTRIBUTES_ITEMS_COUNT : cA(this.CONSTANT_ATTRIBUTES)) * Float32Array.BYTES_PER_ELEMENT : this.ATTRIBUTES_ITEMS_COUNT * Float32Array.BYTES_PER_ELEMENT;
          if (l.vertexAttribPointer(a, t.size, t.type, t.normalized || !1, c, r), this.isInstanced && s)
            if (l instanceof WebGL2RenderingContext)
              l.vertexAttribDivisor(a, 1);
            else {
              var u = l.getExtension("ANGLE_instanced_arrays");
              u && u.vertexAttribDivisorANGLE(a, 1);
            }
        }
        return t.size * o;
      }
    }, {
      key: "unbindAttribute",
      value: function(t, i, r) {
        var s = i.attributeLocations[t.name], o = i.gl;
        if (s !== -1 && (o.disableVertexAttribArray(s), this.isInstanced && r))
          if (o instanceof WebGL2RenderingContext)
            o.vertexAttribDivisor(s, 0);
          else {
            var a = o.getExtension("ANGLE_instanced_arrays");
            a && a.vertexAttribDivisorANGLE(s, 0);
          }
      }
    }, {
      key: "reallocate",
      value: function(t) {
        t !== this.capacity && (this.capacity = t, this.verticesCount = this.VERTICES * t, this.array = new Float32Array(this.isInstanced ? this.capacity * this.ATTRIBUTES_ITEMS_COUNT : this.verticesCount * this.ATTRIBUTES_ITEMS_COUNT));
      }
    }, {
      key: "hasNothingToRender",
      value: function() {
        return this.verticesCount === 0;
      }
    }, {
      key: "renderProgram",
      value: function(t, i) {
        var r = i.gl, s = i.program;
        r.enable(r.BLEND), r.useProgram(s), this.setUniforms(t, i), this.drawWebGL(this.METHOD, i);
      }
    }, {
      key: "render",
      value: function(t) {
        this.hasNothingToRender() || (this.pickProgram && (this.pickProgram.gl.viewport(0, 0, t.width * t.pixelRatio / t.downSizingRatio, t.height * t.pixelRatio / t.downSizingRatio), this.bindProgram(this.pickProgram), this.renderProgram(We(We({}, t), {}, {
          pixelRatio: t.pixelRatio / t.downSizingRatio
        }), this.pickProgram), this.unbindProgram(this.pickProgram)), this.normalProgram.gl.viewport(0, 0, t.width * t.pixelRatio, t.height * t.pixelRatio), this.bindProgram(this.normalProgram), this.renderProgram(t, this.normalProgram), this.unbindProgram(this.normalProgram));
      }
    }, {
      key: "drawWebGL",
      value: function(t, i) {
        var r = i.gl, s = i.frameBuffer;
        if (r.bindFramebuffer(r.FRAMEBUFFER, s), !this.isInstanced)
          r.drawArrays(t, 0, this.verticesCount);
        else if (r instanceof WebGL2RenderingContext)
          r.drawArraysInstanced(t, 0, this.VERTICES, this.capacity);
        else {
          var o = r.getExtension("ANGLE_instanced_arrays");
          o && o.drawArraysInstancedANGLE(t, 0, this.VERTICES, this.capacity);
        }
      }
    }]), n;
  }(), LX = /* @__PURE__ */ function(n) {
    wo(e, n);
    function e() {
      return br(this, e), vo(this, e, arguments);
    }
    return vr(e, [{
      key: "kill",
      value: function() {
        kX(e, "kill", this)([]);
      }
    }, {
      key: "process",
      value: function(i, r, s) {
        var o = r * this.STRIDE;
        if (s.hidden) {
          for (var a = o + this.STRIDE; o < a; o++)
            this.array[o] = 0;
          return;
        }
        return this.processVisibleItem(OX(i), o, s);
      }
    }]), e;
  }(NX), AH = /* @__PURE__ */ function(n) {
    wo(e, n);
    function e() {
      var t;
      br(this, e);
      for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
        r[s] = arguments[s];
      return t = vo(this, e, [].concat(r)), de(ve(t), "drawLabel", void 0), t;
    }
    return vr(e, [{
      key: "kill",
      value: function() {
        kX(e, "kill", this)([]);
      }
    }, {
      key: "process",
      value: function(i, r, s, o, a) {
        var l = r * this.STRIDE;
        if (a.hidden || s.hidden || o.hidden) {
          for (var c = l + this.STRIDE; l < c; l++)
            this.array[l] = 0;
          return;
        }
        return this.processVisibleItem(OX(i), l, s, o, a);
      }
    }]), e;
  }(NX);
  function Bze(n, e) {
    return /* @__PURE__ */ function() {
      function t(i, r, s) {
        br(this, t), de(this, "drawLabel", e), this.programs = n.map(function(o) {
          return new o(i, r, s);
        });
      }
      return vr(t, [{
        key: "reallocate",
        value: function(r) {
          this.programs.forEach(function(s) {
            return s.reallocate(r);
          });
        }
      }, {
        key: "process",
        value: function(r, s, o, a, l) {
          this.programs.forEach(function(c) {
            return c.process(r, s, o, a, l);
          });
        }
      }, {
        key: "render",
        value: function(r) {
          this.programs.forEach(function(s) {
            return s.render(r);
          });
        }
      }, {
        key: "kill",
        value: function() {
          this.programs.forEach(function(r) {
            return r.kill();
          });
        }
      }]), t;
    }();
  }
  function Vze(n, e, t, i, r) {
    var s = r.edgeLabelSize, o = r.edgeLabelFont, a = r.edgeLabelWeight, l = r.edgeLabelColor.attribute ? e[r.edgeLabelColor.attribute] || r.edgeLabelColor.color || "#000" : r.edgeLabelColor.color, c = e.label;
    if (c) {
      n.fillStyle = l, n.font = "".concat(a, " ").concat(s, "px ").concat(o);
      var u = t.size, h = i.size, d = t.x, f = t.y, g = i.x, p = i.y, m = (d + g) / 2, v = (f + p) / 2, y = g - d, w = p - f, R = Math.sqrt(y * y + w * w);
      if (!(R < u + h)) {
        d += y * u / R, f += w * u / R, g -= y * h / R, p -= w * h / R, m = (d + g) / 2, v = (f + p) / 2, y = g - d, w = p - f, R = Math.sqrt(y * y + w * w);
        var E = n.measureText(c).width;
        if (E > R) {
          var C = "…";
          for (c = c + C, E = n.measureText(c).width; E > R && c.length > 1; )
            c = c.slice(0, -2) + C, E = n.measureText(c).width;
          if (c.length < 4) return;
        }
        var T;
        y > 0 ? w > 0 ? T = Math.acos(y / R) : T = Math.asin(w / R) : w > 0 ? T = Math.acos(y / R) + Math.PI : T = Math.asin(y / R) + Math.PI / 2, n.save(), n.translate(m, v), n.rotate(T), n.fillText(c, -E / 2, e.size / 2 + s), n.restore();
      }
    }
  }
  function HX(n, e, t) {
    if (e.label) {
      var i = t.labelSize, r = t.labelFont, s = t.labelWeight, o = t.labelColor.attribute ? e[t.labelColor.attribute] || t.labelColor.color || "#000" : t.labelColor.color;
      n.fillStyle = o, n.font = "".concat(s, " ").concat(i, "px ").concat(r), n.fillText(e.label, e.x + e.size + 3, e.y + i / 3);
    }
  }
  function Wze(n, e, t) {
    var i = t.labelSize, r = t.labelFont, s = t.labelWeight;
    n.font = "".concat(s, " ").concat(i, "px ").concat(r), n.fillStyle = "#FFF", n.shadowOffsetX = 0, n.shadowOffsetY = 0, n.shadowBlur = 8, n.shadowColor = "#000";
    var o = 2;
    if (typeof e.label == "string") {
      var a = n.measureText(e.label).width, l = Math.round(a + 5), c = Math.round(i + 2 * o), u = Math.max(e.size, i / 2) + o, h = Math.asin(c / 2 / u), d = Math.sqrt(Math.abs(Math.pow(u, 2) - Math.pow(c / 2, 2)));
      n.beginPath(), n.moveTo(e.x + d, e.y + c / 2), n.lineTo(e.x + u + l, e.y + c / 2), n.lineTo(e.x + u + l, e.y - c / 2), n.lineTo(e.x + d, e.y - c / 2), n.arc(e.x, e.y, u, h, -h), n.closePath(), n.fill();
    } else
      n.beginPath(), n.arc(e.x, e.y, e.size + o, 0, Math.PI * 2), n.closePath(), n.fill();
    n.shadowOffsetX = 0, n.shadowOffsetY = 0, n.shadowBlur = 0, HX(n, e, t);
  }
  var jze = (
    /*glsl*/
    `
precision highp float;

varying vec4 v_color;
varying vec2 v_diffVector;
varying float v_radius;

uniform float u_correctionRatio;

const vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);

void main(void) {
  float border = u_correctionRatio * 2.0;
  float dist = length(v_diffVector) - v_radius + border;

  // No antialiasing for picking mode:
  #ifdef PICKING_MODE
  if (dist > border)
    gl_FragColor = transparent;
  else
    gl_FragColor = v_color;

  #else
  float t = 0.0;
  if (dist > border)
    t = 1.0;
  else if (dist > 0.0)
    t = dist / border;

  gl_FragColor = mix(v_color, transparent, t);
  #endif
}
`
  ), zze = jze, Uze = (
    /*glsl*/
    `
attribute vec4 a_id;
attribute vec4 a_color;
attribute vec2 a_position;
attribute float a_size;
attribute float a_angle;

uniform mat3 u_matrix;
uniform float u_sizeRatio;
uniform float u_correctionRatio;

varying vec4 v_color;
varying vec2 v_diffVector;
varying float v_radius;
varying float v_border;

const float bias = 255.0 / 254.0;

void main() {
  float size = a_size * u_correctionRatio / u_sizeRatio * 4.0;
  vec2 diffVector = size * vec2(cos(a_angle), sin(a_angle));
  vec2 position = a_position + diffVector;
  gl_Position = vec4(
    (u_matrix * vec3(position, 1)).xy,
    0,
    1
  );

  v_diffVector = diffVector;
  v_radius = size / 2.0;

  #ifdef PICKING_MODE
  // For picking mode, we use the ID as the color:
  v_color = a_id;
  #else
  // For normal mode, we use the color:
  v_color = a_color;
  #endif

  v_color.a *= bias;
}
`
  ), Gze = Uze, $X = WebGLRenderingContext, n6 = $X.UNSIGNED_BYTE, uA = $X.FLOAT, Yze = ["u_sizeRatio", "u_correctionRatio", "u_matrix"], _E = /* @__PURE__ */ function(n) {
    wo(e, n);
    function e() {
      return br(this, e), vo(this, e, arguments);
    }
    return vr(e, [{
      key: "getDefinition",
      value: function() {
        return {
          VERTICES: 3,
          VERTEX_SHADER_SOURCE: Gze,
          FRAGMENT_SHADER_SOURCE: zze,
          METHOD: WebGLRenderingContext.TRIANGLES,
          UNIFORMS: Yze,
          ATTRIBUTES: [{
            name: "a_position",
            size: 2,
            type: uA
          }, {
            name: "a_size",
            size: 1,
            type: uA
          }, {
            name: "a_color",
            size: 4,
            type: n6,
            normalized: !0
          }, {
            name: "a_id",
            size: 4,
            type: n6,
            normalized: !0
          }],
          CONSTANT_ATTRIBUTES: [{
            name: "a_angle",
            size: 1,
            type: uA
          }],
          CONSTANT_DATA: [[e.ANGLE_1], [e.ANGLE_2], [e.ANGLE_3]]
        };
      }
    }, {
      key: "processVisibleItem",
      value: function(i, r, s) {
        var o = this.array, a = lm(s.color);
        o[r++] = s.x, o[r++] = s.y, o[r++] = s.size, o[r++] = a, o[r++] = i;
      }
    }, {
      key: "setUniforms",
      value: function(i, r) {
        var s = r.gl, o = r.uniformLocations, a = o.u_sizeRatio, l = o.u_correctionRatio, c = o.u_matrix;
        s.uniform1f(l, i.correctionRatio), s.uniform1f(a, i.sizeRatio), s.uniformMatrix3fv(c, !1, i.matrix);
      }
    }]), e;
  }(LX);
  de(_E, "ANGLE_1", 0);
  de(_E, "ANGLE_2", 2 * Math.PI / 3);
  de(_E, "ANGLE_3", 4 * Math.PI / 3);
  var Kze = (
    /*glsl*/
    `
precision mediump float;

varying vec4 v_color;

void main(void) {
  gl_FragColor = v_color;
}
`
  ), qze = Kze, Xze = (
    /*glsl*/
    `
attribute vec2 a_position;
attribute vec2 a_normal;
attribute float a_radius;
attribute vec3 a_barycentric;

#ifdef PICKING_MODE
attribute vec4 a_id;
#else
attribute vec4 a_color;
#endif

uniform mat3 u_matrix;
uniform float u_sizeRatio;
uniform float u_correctionRatio;
uniform float u_minEdgeThickness;
uniform float u_lengthToThicknessRatio;
uniform float u_widenessToThicknessRatio;

varying vec4 v_color;

const float bias = 255.0 / 254.0;

void main() {
  float minThickness = u_minEdgeThickness;

  float normalLength = length(a_normal);
  vec2 unitNormal = a_normal / normalLength;

  // These first computations are taken from edge.vert.glsl and
  // edge.clamped.vert.glsl. Please read it to get better comments on what's
  // happening:
  float pixelsThickness = max(normalLength / u_sizeRatio, minThickness);
  float webGLThickness = pixelsThickness * u_correctionRatio;
  float webGLNodeRadius = a_radius * 2.0 * u_correctionRatio / u_sizeRatio;
  float webGLArrowHeadLength = webGLThickness * u_lengthToThicknessRatio * 2.0;
  float webGLArrowHeadThickness = webGLThickness * u_widenessToThicknessRatio;

  float da = a_barycentric.x;
  float db = a_barycentric.y;
  float dc = a_barycentric.z;

  vec2 delta = vec2(
      da * (webGLNodeRadius * unitNormal.y)
    + db * ((webGLNodeRadius + webGLArrowHeadLength) * unitNormal.y + webGLArrowHeadThickness * unitNormal.x)
    + dc * ((webGLNodeRadius + webGLArrowHeadLength) * unitNormal.y - webGLArrowHeadThickness * unitNormal.x),

      da * (-webGLNodeRadius * unitNormal.x)
    + db * (-(webGLNodeRadius + webGLArrowHeadLength) * unitNormal.x + webGLArrowHeadThickness * unitNormal.y)
    + dc * (-(webGLNodeRadius + webGLArrowHeadLength) * unitNormal.x - webGLArrowHeadThickness * unitNormal.y)
  );

  vec2 position = (u_matrix * vec3(a_position + delta, 1)).xy;

  gl_Position = vec4(position, 0, 1);

  #ifdef PICKING_MODE
  // For picking mode, we use the ID as the color:
  v_color = a_id;
  #else
  // For normal mode, we use the color:
  v_color = a_color;
  #endif

  v_color.a *= bias;
}
`
  ), Zze = Xze, FX = WebGLRenderingContext, i6 = FX.UNSIGNED_BYTE, QC = FX.FLOAT, Qze = ["u_matrix", "u_sizeRatio", "u_correctionRatio", "u_minEdgeThickness", "u_lengthToThicknessRatio", "u_widenessToThicknessRatio"], BX = {
    lengthToThicknessRatio: 2.5,
    widenessToThicknessRatio: 2
  };
  function VX(n) {
    var e = We(We({}, BX), {});
    return /* @__PURE__ */ function(t) {
      wo(i, t);
      function i() {
        return br(this, i), vo(this, i, arguments);
      }
      return vr(i, [{
        key: "getDefinition",
        value: function() {
          return {
            VERTICES: 3,
            VERTEX_SHADER_SOURCE: Zze,
            FRAGMENT_SHADER_SOURCE: qze,
            METHOD: WebGLRenderingContext.TRIANGLES,
            UNIFORMS: Qze,
            ATTRIBUTES: [{
              name: "a_position",
              size: 2,
              type: QC
            }, {
              name: "a_normal",
              size: 2,
              type: QC
            }, {
              name: "a_radius",
              size: 1,
              type: QC
            }, {
              name: "a_color",
              size: 4,
              type: i6,
              normalized: !0
            }, {
              name: "a_id",
              size: 4,
              type: i6,
              normalized: !0
            }],
            CONSTANT_ATTRIBUTES: [{
              name: "a_barycentric",
              size: 3,
              type: QC
            }],
            CONSTANT_DATA: [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
          };
        }
      }, {
        key: "processVisibleItem",
        value: function(s, o, a, l, c) {
          var u = c.size || 1, h = l.size || 1, d = a.x, f = a.y, g = l.x, p = l.y, m = lm(c.color), v = g - d, y = p - f, w = v * v + y * y, R = 0, E = 0;
          w && (w = 1 / Math.sqrt(w), R = -y * w * u, E = v * w * u);
          var C = this.array;
          C[o++] = g, C[o++] = p, C[o++] = -R, C[o++] = -E, C[o++] = h, C[o++] = m, C[o++] = s;
        }
      }, {
        key: "setUniforms",
        value: function(s, o) {
          var a = o.gl, l = o.uniformLocations, c = l.u_matrix, u = l.u_sizeRatio, h = l.u_correctionRatio, d = l.u_minEdgeThickness, f = l.u_lengthToThicknessRatio, g = l.u_widenessToThicknessRatio;
          a.uniformMatrix3fv(c, !1, s.matrix), a.uniform1f(u, s.sizeRatio), a.uniform1f(h, s.correctionRatio), a.uniform1f(d, s.minEdgeThickness), a.uniform1f(f, e.lengthToThicknessRatio), a.uniform1f(g, e.widenessToThicknessRatio);
        }
      }]), i;
    }(AH);
  }
  VX();
  var Jze = (
    /*glsl*/
    `
precision mediump float;

varying vec4 v_color;
varying vec2 v_normal;
varying float v_thickness;
varying float v_feather;

const vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);

void main(void) {
  // We only handle antialiasing for normal mode:
  #ifdef PICKING_MODE
  gl_FragColor = v_color;
  #else
  float dist = length(v_normal) * v_thickness;

  float t = smoothstep(
    v_thickness - v_feather,
    v_thickness,
    dist
  );

  gl_FragColor = mix(v_color, transparent, t);
  #endif
}
`
  ), WX = Jze, e8e = (
    /*glsl*/
    `
attribute vec4 a_id;
attribute vec4 a_color;
attribute vec2 a_normal;
attribute float a_normalCoef;
attribute vec2 a_positionStart;
attribute vec2 a_positionEnd;
attribute float a_positionCoef;
attribute float a_radius;
attribute float a_radiusCoef;

uniform mat3 u_matrix;
uniform float u_zoomRatio;
uniform float u_sizeRatio;
uniform float u_pixelRatio;
uniform float u_correctionRatio;
uniform float u_minEdgeThickness;
uniform float u_lengthToThicknessRatio;
uniform float u_feather;

varying vec4 v_color;
varying vec2 v_normal;
varying float v_thickness;
varying float v_feather;

const float bias = 255.0 / 254.0;

void main() {
  float minThickness = u_minEdgeThickness;

  float radius = a_radius * a_radiusCoef;
  vec2 normal = a_normal * a_normalCoef;
  vec2 position = a_positionStart * (1.0 - a_positionCoef) + a_positionEnd * a_positionCoef;

  float normalLength = length(normal);
  vec2 unitNormal = normal / normalLength;

  // These first computations are taken from edge.vert.glsl. Please read it to
  // get better comments on what's happening:
  float pixelsThickness = max(normalLength, minThickness * u_sizeRatio);
  float webGLThickness = pixelsThickness * u_correctionRatio / u_sizeRatio;

  // Here, we move the point to leave space for the arrow head:
  float direction = sign(radius);
  float webGLNodeRadius = direction * radius * 2.0 * u_correctionRatio / u_sizeRatio;
  float webGLArrowHeadLength = webGLThickness * u_lengthToThicknessRatio * 2.0;

  vec2 compensationVector = vec2(-direction * unitNormal.y, direction * unitNormal.x) * (webGLNodeRadius + webGLArrowHeadLength);

  // Here is the proper position of the vertex
  gl_Position = vec4((u_matrix * vec3(position + unitNormal * webGLThickness + compensationVector, 1)).xy, 0, 1);

  v_thickness = webGLThickness / u_zoomRatio;

  v_normal = unitNormal;

  v_feather = u_feather * u_correctionRatio / u_zoomRatio / u_pixelRatio * 2.0;

  #ifdef PICKING_MODE
  // For picking mode, we use the ID as the color:
  v_color = a_id;
  #else
  // For normal mode, we use the color:
  v_color = a_color;
  #endif

  v_color.a *= bias;
}
`
  ), t8e = e8e, jX = WebGLRenderingContext, r6 = jX.UNSIGNED_BYTE, rd = jX.FLOAT, n8e = ["u_matrix", "u_zoomRatio", "u_sizeRatio", "u_correctionRatio", "u_pixelRatio", "u_feather", "u_minEdgeThickness", "u_lengthToThicknessRatio"], i8e = {
    lengthToThicknessRatio: BX.lengthToThicknessRatio
  };
  function zX(n) {
    var e = We(We({}, i8e), {});
    return /* @__PURE__ */ function(t) {
      wo(i, t);
      function i() {
        return br(this, i), vo(this, i, arguments);
      }
      return vr(i, [{
        key: "getDefinition",
        value: function() {
          return {
            VERTICES: 6,
            VERTEX_SHADER_SOURCE: t8e,
            FRAGMENT_SHADER_SOURCE: WX,
            METHOD: WebGLRenderingContext.TRIANGLES,
            UNIFORMS: n8e,
            ATTRIBUTES: [{
              name: "a_positionStart",
              size: 2,
              type: rd
            }, {
              name: "a_positionEnd",
              size: 2,
              type: rd
            }, {
              name: "a_normal",
              size: 2,
              type: rd
            }, {
              name: "a_color",
              size: 4,
              type: r6,
              normalized: !0
            }, {
              name: "a_id",
              size: 4,
              type: r6,
              normalized: !0
            }, {
              name: "a_radius",
              size: 1,
              type: rd
            }],
            CONSTANT_ATTRIBUTES: [
              // If 0, then position will be a_positionStart
              // If 1, then position will be a_positionEnd
              {
                name: "a_positionCoef",
                size: 1,
                type: rd
              },
              {
                name: "a_normalCoef",
                size: 1,
                type: rd
              },
              {
                name: "a_radiusCoef",
                size: 1,
                type: rd
              }
            ],
            CONSTANT_DATA: [[0, 1, 0], [0, -1, 0], [1, 1, 1], [1, 1, 1], [0, -1, 0], [1, -1, -1]]
          };
        }
      }, {
        key: "processVisibleItem",
        value: function(s, o, a, l, c) {
          var u = c.size || 1, h = a.x, d = a.y, f = l.x, g = l.y, p = lm(c.color), m = f - h, v = g - d, y = l.size || 1, w = m * m + v * v, R = 0, E = 0;
          w && (w = 1 / Math.sqrt(w), R = -v * w * u, E = m * w * u);
          var C = this.array;
          C[o++] = h, C[o++] = d, C[o++] = f, C[o++] = g, C[o++] = R, C[o++] = E, C[o++] = p, C[o++] = s, C[o++] = y;
        }
      }, {
        key: "setUniforms",
        value: function(s, o) {
          var a = o.gl, l = o.uniformLocations, c = l.u_matrix, u = l.u_zoomRatio, h = l.u_feather, d = l.u_pixelRatio, f = l.u_correctionRatio, g = l.u_sizeRatio, p = l.u_minEdgeThickness, m = l.u_lengthToThicknessRatio;
          a.uniformMatrix3fv(c, !1, s.matrix), a.uniform1f(u, s.zoomRatio), a.uniform1f(g, s.sizeRatio), a.uniform1f(f, s.correctionRatio), a.uniform1f(d, s.pixelRatio), a.uniform1f(h, s.antiAliasingFeather), a.uniform1f(p, s.minEdgeThickness), a.uniform1f(m, e.lengthToThicknessRatio);
        }
      }]), i;
    }(AH);
  }
  zX();
  function r8e(n) {
    return Bze([zX(), VX()]);
  }
  var s8e = r8e(), o8e = s8e, a8e = (
    /*glsl*/
    `
attribute vec4 a_id;
attribute vec4 a_color;
attribute vec2 a_normal;
attribute float a_normalCoef;
attribute vec2 a_positionStart;
attribute vec2 a_positionEnd;
attribute float a_positionCoef;

uniform mat3 u_matrix;
uniform float u_sizeRatio;
uniform float u_zoomRatio;
uniform float u_pixelRatio;
uniform float u_correctionRatio;
uniform float u_minEdgeThickness;
uniform float u_feather;

varying vec4 v_color;
varying vec2 v_normal;
varying float v_thickness;
varying float v_feather;

const float bias = 255.0 / 254.0;

void main() {
  float minThickness = u_minEdgeThickness;

  vec2 normal = a_normal * a_normalCoef;
  vec2 position = a_positionStart * (1.0 - a_positionCoef) + a_positionEnd * a_positionCoef;

  float normalLength = length(normal);
  vec2 unitNormal = normal / normalLength;

  // We require edges to be at least "minThickness" pixels thick *on screen*
  // (so we need to compensate the size ratio):
  float pixelsThickness = max(normalLength, minThickness * u_sizeRatio);

  // Then, we need to retrieve the normalized thickness of the edge in the WebGL
  // referential (in a ([0, 1], [0, 1]) space), using our "magic" correction
  // ratio:
  float webGLThickness = pixelsThickness * u_correctionRatio / u_sizeRatio;

  // Here is the proper position of the vertex
  gl_Position = vec4((u_matrix * vec3(position + unitNormal * webGLThickness, 1)).xy, 0, 1);

  // For the fragment shader though, we need a thickness that takes the "magic"
  // correction ratio into account (as in webGLThickness), but so that the
  // antialiasing effect does not depend on the zoom level. So here's yet
  // another thickness version:
  v_thickness = webGLThickness / u_zoomRatio;

  v_normal = unitNormal;

  v_feather = u_feather * u_correctionRatio / u_zoomRatio / u_pixelRatio * 2.0;

  #ifdef PICKING_MODE
  // For picking mode, we use the ID as the color:
  v_color = a_id;
  #else
  // For normal mode, we use the color:
  v_color = a_color;
  #endif

  v_color.a *= bias;
}
`
  ), l8e = a8e, UX = WebGLRenderingContext, s6 = UX.UNSIGNED_BYTE, Mb = UX.FLOAT, c8e = ["u_matrix", "u_zoomRatio", "u_sizeRatio", "u_correctionRatio", "u_pixelRatio", "u_feather", "u_minEdgeThickness"], u8e = /* @__PURE__ */ function(n) {
    wo(e, n);
    function e() {
      return br(this, e), vo(this, e, arguments);
    }
    return vr(e, [{
      key: "getDefinition",
      value: function() {
        return {
          VERTICES: 6,
          VERTEX_SHADER_SOURCE: l8e,
          FRAGMENT_SHADER_SOURCE: WX,
          METHOD: WebGLRenderingContext.TRIANGLES,
          UNIFORMS: c8e,
          ATTRIBUTES: [{
            name: "a_positionStart",
            size: 2,
            type: Mb
          }, {
            name: "a_positionEnd",
            size: 2,
            type: Mb
          }, {
            name: "a_normal",
            size: 2,
            type: Mb
          }, {
            name: "a_color",
            size: 4,
            type: s6,
            normalized: !0
          }, {
            name: "a_id",
            size: 4,
            type: s6,
            normalized: !0
          }],
          CONSTANT_ATTRIBUTES: [
            // If 0, then position will be a_positionStart
            // If 2, then position will be a_positionEnd
            {
              name: "a_positionCoef",
              size: 1,
              type: Mb
            },
            {
              name: "a_normalCoef",
              size: 1,
              type: Mb
            }
          ],
          CONSTANT_DATA: [[0, 1], [0, -1], [1, 1], [1, 1], [0, -1], [1, -1]]
        };
      }
    }, {
      key: "processVisibleItem",
      value: function(i, r, s, o, a) {
        var l = a.size || 1, c = s.x, u = s.y, h = o.x, d = o.y, f = lm(a.color), g = h - c, p = d - u, m = g * g + p * p, v = 0, y = 0;
        m && (m = 1 / Math.sqrt(m), v = -p * m * l, y = g * m * l);
        var w = this.array;
        w[r++] = c, w[r++] = u, w[r++] = h, w[r++] = d, w[r++] = v, w[r++] = y, w[r++] = f, w[r++] = i;
      }
    }, {
      key: "setUniforms",
      value: function(i, r) {
        var s = r.gl, o = r.uniformLocations, a = o.u_matrix, l = o.u_zoomRatio, c = o.u_feather, u = o.u_pixelRatio, h = o.u_correctionRatio, d = o.u_sizeRatio, f = o.u_minEdgeThickness;
        s.uniformMatrix3fv(a, !1, i.matrix), s.uniform1f(l, i.zoomRatio), s.uniform1f(d, i.sizeRatio), s.uniform1f(h, i.correctionRatio), s.uniform1f(u, i.pixelRatio), s.uniform1f(c, i.antiAliasingFeather), s.uniform1f(f, i.minEdgeThickness);
      }
    }]), e;
  }(AH), PH = /* @__PURE__ */ function(n) {
    wo(e, n);
    function e() {
      var t;
      return br(this, e), t = vo(this, e), t.rawEmitter = ve(t), t;
    }
    return vr(e);
  }(SH.EventEmitter), GX = function(e) {
    return e !== null && typeof e == "object" && typeof e.addUndirectedEdgeWithKey == "function" && typeof e.dropNode == "function" && typeof e.multi == "boolean";
  };
  const h8e = /* @__PURE__ */ zp(GX);
  var d8e = function(e) {
    return e;
  }, f8e = function(e) {
    return e * e;
  }, g8e = function(e) {
    return e * (2 - e);
  }, p8e = function(e) {
    return (e *= 2) < 1 ? 0.5 * e * e : -0.5 * (--e * (e - 2) - 1);
  }, m8e = function(e) {
    return e * e * e;
  }, b8e = function(e) {
    return --e * e * e + 1;
  }, v8e = function(e) {
    return (e *= 2) < 1 ? 0.5 * e * e * e : 0.5 * ((e -= 2) * e * e + 2);
  }, w8e = {
    linear: d8e,
    quadraticIn: f8e,
    quadraticOut: g8e,
    quadraticInOut: p8e,
    cubicIn: m8e,
    cubicOut: b8e,
    cubicInOut: v8e
  }, y8e = {
    easing: "quadraticInOut",
    duration: 150
  };
  function Vo() {
    return Float32Array.of(1, 0, 0, 0, 1, 0, 0, 0, 1);
  }
  function JC(n, e, t) {
    return n[0] = e, n[4] = typeof t == "number" ? t : e, n;
  }
  function o6(n, e) {
    var t = Math.sin(e), i = Math.cos(e);
    return n[0] = i, n[1] = t, n[3] = -t, n[4] = i, n;
  }
  function a6(n, e, t) {
    return n[6] = e, n[7] = t, n;
  }
  function au(n, e) {
    var t = n[0], i = n[1], r = n[2], s = n[3], o = n[4], a = n[5], l = n[6], c = n[7], u = n[8], h = e[0], d = e[1], f = e[2], g = e[3], p = e[4], m = e[5], v = e[6], y = e[7], w = e[8];
    return n[0] = h * t + d * s + f * l, n[1] = h * i + d * o + f * c, n[2] = h * r + d * a + f * u, n[3] = g * t + p * s + m * l, n[4] = g * i + p * o + m * c, n[5] = g * r + p * a + m * u, n[6] = v * t + y * s + w * l, n[7] = v * i + y * o + w * c, n[8] = v * r + y * a + w * u, n;
  }
  function JI(n, e) {
    var t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, i = n[0], r = n[1], s = n[3], o = n[4], a = n[6], l = n[7], c = e.x, u = e.y;
    return {
      x: c * i + u * s + a * t,
      y: c * r + u * o + l * t
    };
  }
  function C8e(n, e) {
    var t = n.height / n.width, i = e.height / e.width;
    return t < 1 && i > 1 || t > 1 && i < 1 ? 1 : Math.min(Math.max(i, 1 / i), Math.max(1 / t, t));
  }
  function Ab(n, e, t, i, r) {
    var s = n.angle, o = n.ratio, a = n.x, l = n.y, c = e.width, u = e.height, h = Vo(), d = Math.min(c, u) - 2 * i, f = C8e(e, t);
    return r ? (au(h, a6(Vo(), a, l)), au(h, JC(Vo(), o)), au(h, o6(Vo(), s)), au(h, JC(Vo(), c / d / 2 / f, u / d / 2 / f))) : (au(h, JC(Vo(), 2 * (d / c) * f, 2 * (d / u) * f)), au(h, o6(Vo(), -s)), au(h, JC(Vo(), 1 / o)), au(h, a6(Vo(), -a, -l))), h;
  }
  function S8e(n, e, t) {
    var i = JI(n, {
      x: Math.cos(e.angle),
      y: Math.sin(e.angle)
    }, 0), r = i.x, s = i.y;
    return 1 / Math.sqrt(Math.pow(r, 2) + Math.pow(s, 2)) / t.width;
  }
  function _8e(n) {
    if (!n.order) return {
      x: [0, 1],
      y: [0, 1]
    };
    var e = 1 / 0, t = -1 / 0, i = 1 / 0, r = -1 / 0;
    return n.forEachNode(function(s, o) {
      var a = o.x, l = o.y;
      a < e && (e = a), a > t && (t = a), l < i && (i = l), l > r && (r = l);
    }), {
      x: [e, t],
      y: [i, r]
    };
  }
  function R8e(n) {
    if (!h8e(n)) throw new Error("Sigma: invalid graph instance.");
    n.forEachNode(function(e, t) {
      if (!Number.isFinite(t.x) || !Number.isFinite(t.y))
        throw new Error("Sigma: Coordinates of node ".concat(e, " are invalid. A node must have a numeric 'x' and 'y' attribute."));
    });
  }
  function E8e(n, e, t) {
    var i = document.createElement(n);
    if (e)
      for (var r in e)
        i.style[r] = e[r];
    if (t)
      for (var s in t)
        i.setAttribute(s, t[s]);
    return i;
  }
  function l6() {
    return typeof window.devicePixelRatio < "u" ? window.devicePixelRatio : 1;
  }
  function c6(n, e, t) {
    return t.sort(function(i, r) {
      var s = e(i) || 0, o = e(r) || 0;
      return s < o ? -1 : s > o ? 1 : 0;
    });
  }
  function u6(n) {
    var e = kR(n.x, 2), t = e[0], i = e[1], r = kR(n.y, 2), s = r[0], o = r[1], a = Math.max(i - t, o - s), l = (i + t) / 2, c = (o + s) / 2;
    (a === 0 || Math.abs(a) === 1 / 0 || isNaN(a)) && (a = 1), isNaN(l) && (l = 0), isNaN(c) && (c = 0);
    var u = function(d) {
      return {
        x: 0.5 + (d.x - l) / a,
        y: 0.5 + (d.y - c) / a
      };
    };
    return u.applyTo = function(h) {
      h.x = 0.5 + (h.x - l) / a, h.y = 0.5 + (h.y - c) / a;
    }, u.inverse = function(h) {
      return {
        x: l + a * (h.x - 0.5),
        y: c + a * (h.y - 0.5)
      };
    }, u.ratio = a, u;
  }
  function h6(n, e) {
    var t = e.size;
    if (t !== 0) {
      var i = n.length;
      n.length += t;
      var r = 0;
      e.forEach(function(s) {
        n[i + r] = s, r++;
      });
    }
  }
  function hA(n) {
    n = n || {};
    for (var e = 0, t = arguments.length <= 1 ? 0 : arguments.length - 1; e < t; e++) {
      var i = e + 1 < 1 || arguments.length <= e + 1 ? void 0 : arguments[e + 1];
      i && Object.assign(n, i);
    }
    return n;
  }
  var IH = {
    // Performance
    hideEdgesOnMove: !1,
    hideLabelsOnMove: !1,
    renderLabels: !0,
    renderEdgeLabels: !1,
    enableEdgeEvents: !1,
    // Component rendering
    defaultNodeColor: "#999",
    defaultNodeType: "circle",
    defaultEdgeColor: "#ccc",
    defaultEdgeType: "line",
    labelFont: "Arial",
    labelSize: 14,
    labelWeight: "normal",
    labelColor: {
      color: "#000"
    },
    edgeLabelFont: "Arial",
    edgeLabelSize: 14,
    edgeLabelWeight: "normal",
    edgeLabelColor: {
      attribute: "color"
    },
    stagePadding: 30,
    defaultDrawEdgeLabel: Vze,
    defaultDrawNodeLabel: HX,
    defaultDrawNodeHover: Wze,
    minEdgeThickness: 1.7,
    antiAliasingFeather: 1,
    // Mouse and touch settings
    dragTimeout: 100,
    draggedEventsTolerance: 3,
    inertiaDuration: 200,
    inertiaRatio: 3,
    zoomDuration: 250,
    zoomingRatio: 1.7,
    doubleClickTimeout: 300,
    doubleClickZoomingRatio: 2.2,
    doubleClickZoomingDuration: 200,
    tapMoveTolerance: 10,
    // Size and scaling
    zoomToSizeRatioFunction: Math.sqrt,
    itemSizesReference: "screen",
    autoRescale: !0,
    autoCenter: !0,
    // Labels
    labelDensity: 1,
    labelGridCellSize: 100,
    labelRenderedSizeThreshold: 6,
    // Reducers
    nodeReducer: null,
    edgeReducer: null,
    // Features
    zIndex: !1,
    minCameraRatio: null,
    maxCameraRatio: null,
    enableCameraRotation: !0,
    // Lifecycle
    allowInvalidContainer: !1,
    // Program classes
    nodeProgramClasses: {},
    nodeHoverProgramClasses: {},
    edgeProgramClasses: {}
  }, x8e = {
    circle: _E
  }, T8e = {
    arrow: o8e,
    line: u8e
  };
  function d6(n) {
    if (typeof n.labelDensity != "number" || n.labelDensity < 0)
      throw new Error("Settings: invalid `labelDensity`. Expecting a positive number.");
    var e = n.minCameraRatio, t = n.maxCameraRatio;
    if (typeof e == "number" && typeof t == "number" && t < e)
      throw new Error("Settings: invalid camera ratio boundaries. Expecting `maxCameraRatio` to be greater than `minCameraRatio`.");
  }
  function M8e(n) {
    var e = hA({}, IH, n);
    return e.nodeProgramClasses = hA({}, x8e, e.nodeProgramClasses), e.edgeProgramClasses = hA({}, T8e, e.edgeProgramClasses), e;
  }
  var eS = 1.5, f6 = /* @__PURE__ */ function(n) {
    wo(e, n);
    function e() {
      var t;
      return br(this, e), t = vo(this, e), de(ve(t), "x", 0.5), de(ve(t), "y", 0.5), de(ve(t), "angle", 0), de(ve(t), "ratio", 1), de(ve(t), "minRatio", null), de(ve(t), "maxRatio", null), de(ve(t), "enabledRotation", !0), de(ve(t), "nextFrame", null), de(ve(t), "previousState", null), de(ve(t), "enabled", !0), t.previousState = t.getState(), t;
    }
    return vr(e, [{
      key: "enable",
      value: (
        /**
         * Method used to enable the camera.
         */
        function() {
          return this.enabled = !0, this;
        }
      )
      /**
       * Method used to disable the camera.
       */
    }, {
      key: "disable",
      value: function() {
        return this.enabled = !1, this;
      }
      /**
       * Method used to retrieve the camera's current state.
       */
    }, {
      key: "getState",
      value: function() {
        return {
          x: this.x,
          y: this.y,
          angle: this.angle,
          ratio: this.ratio
        };
      }
      /**
       * Method used to check whether the camera has the given state.
       */
    }, {
      key: "hasState",
      value: function(i) {
        return this.x === i.x && this.y === i.y && this.ratio === i.ratio && this.angle === i.angle;
      }
      /**
       * Method used to retrieve the camera's previous state.
       */
    }, {
      key: "getPreviousState",
      value: function() {
        var i = this.previousState;
        return i ? {
          x: i.x,
          y: i.y,
          angle: i.angle,
          ratio: i.ratio
        } : null;
      }
      /**
       * Method used to check minRatio and maxRatio values.
       */
    }, {
      key: "getBoundedRatio",
      value: function(i) {
        var r = i;
        return typeof this.minRatio == "number" && (r = Math.max(r, this.minRatio)), typeof this.maxRatio == "number" && (r = Math.min(r, this.maxRatio)), r;
      }
      /**
       * Method used to check various things to return a legit state candidate.
       */
    }, {
      key: "validateState",
      value: function(i) {
        var r = {};
        return typeof i.x == "number" && (r.x = i.x), typeof i.y == "number" && (r.y = i.y), this.enabledRotation && typeof i.angle == "number" && (r.angle = i.angle), typeof i.ratio == "number" && (r.ratio = this.getBoundedRatio(i.ratio)), r;
      }
      /**
       * Method used to check whether the camera is currently being animated.
       */
    }, {
      key: "isAnimated",
      value: function() {
        return !!this.nextFrame;
      }
      /**
       * Method used to set the camera's state.
       */
    }, {
      key: "setState",
      value: function(i) {
        if (!this.enabled) return this;
        this.previousState = this.getState();
        var r = this.validateState(i);
        return typeof r.x == "number" && (this.x = r.x), typeof r.y == "number" && (this.y = r.y), this.enabledRotation && typeof r.angle == "number" && (this.angle = r.angle), typeof r.ratio == "number" && (this.ratio = r.ratio), this.hasState(this.previousState) || this.emit("updated", this.getState()), this;
      }
      /**
       * Method used to update the camera's state using a function.
       */
    }, {
      key: "updateState",
      value: function(i) {
        return this.setState(i(this.getState())), this;
      }
      /**
       * Method used to animate the camera.
       */
    }, {
      key: "animate",
      value: function(i) {
        var r = this, s = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, o = arguments.length > 2 ? arguments[2] : void 0;
        if (!o) return new Promise(function(f) {
          return r.animate(i, s, f);
        });
        if (this.enabled) {
          var a = We(We({}, y8e), s), l = this.validateState(i), c = typeof a.easing == "function" ? a.easing : w8e[a.easing], u = Date.now(), h = this.getState(), d = function f() {
            var g = (Date.now() - u) / a.duration;
            if (g >= 1) {
              r.nextFrame = null, r.setState(l), r.animationCallback && (r.animationCallback.call(null), r.animationCallback = void 0);
              return;
            }
            var p = c(g), m = {};
            typeof l.x == "number" && (m.x = h.x + (l.x - h.x) * p), typeof l.y == "number" && (m.y = h.y + (l.y - h.y) * p), r.enabledRotation && typeof l.angle == "number" && (m.angle = h.angle + (l.angle - h.angle) * p), typeof l.ratio == "number" && (m.ratio = h.ratio + (l.ratio - h.ratio) * p), r.setState(m), r.nextFrame = requestAnimationFrame(f);
          };
          this.nextFrame ? (cancelAnimationFrame(this.nextFrame), this.animationCallback && this.animationCallback.call(null), this.nextFrame = requestAnimationFrame(d)) : d(), this.animationCallback = o;
        }
      }
      /**
       * Method used to zoom the camera.
       */
    }, {
      key: "animatedZoom",
      value: function(i) {
        return i ? typeof i == "number" ? this.animate({
          ratio: this.ratio / i
        }) : this.animate({
          ratio: this.ratio / (i.factor || eS)
        }, i) : this.animate({
          ratio: this.ratio / eS
        });
      }
      /**
       * Method used to unzoom the camera.
       */
    }, {
      key: "animatedUnzoom",
      value: function(i) {
        return i ? typeof i == "number" ? this.animate({
          ratio: this.ratio * i
        }) : this.animate({
          ratio: this.ratio * (i.factor || eS)
        }, i) : this.animate({
          ratio: this.ratio * eS
        });
      }
      /**
       * Method used to reset the camera.
       */
    }, {
      key: "animatedReset",
      value: function(i) {
        return this.animate({
          x: 0.5,
          y: 0.5,
          ratio: 1,
          angle: 0
        }, i);
      }
      /**
       * Returns a new Camera instance, with the same state as the current camera.
       */
    }, {
      key: "copy",
      value: function() {
        return e.from(this.getState());
      }
    }], [{
      key: "from",
      value: function(i) {
        var r = new e();
        return r.setState(i);
      }
    }]), e;
  }(PH);
  function Yo(n, e) {
    var t = e.getBoundingClientRect();
    return {
      x: n.clientX - t.left,
      y: n.clientY - t.top
    };
  }
  function Yl(n, e) {
    var t = We(We({}, Yo(n, e)), {}, {
      sigmaDefaultPrevented: !1,
      preventSigmaDefault: function() {
        t.sigmaDefaultPrevented = !0;
      },
      original: n
    });
    return t;
  }
  function Pb(n) {
    var e = "x" in n ? n : We(We({}, n.touches[0] || n.previousTouches[0]), {}, {
      original: n.original,
      sigmaDefaultPrevented: n.sigmaDefaultPrevented,
      preventSigmaDefault: function() {
        n.sigmaDefaultPrevented = !0, e.sigmaDefaultPrevented = !0;
      }
    });
    return e;
  }
  function A8e(n, e) {
    return We(We({}, Yl(n, e)), {}, {
      delta: YX(n)
    });
  }
  var P8e = 2;
  function WS(n) {
    for (var e = [], t = 0, i = Math.min(n.length, P8e); t < i; t++) e.push(n[t]);
    return e;
  }
  function Ib(n, e, t) {
    var i = {
      touches: WS(n.touches).map(function(r) {
        return Yo(r, t);
      }),
      previousTouches: e.map(function(r) {
        return Yo(r, t);
      }),
      sigmaDefaultPrevented: !1,
      preventSigmaDefault: function() {
        i.sigmaDefaultPrevented = !0;
      },
      original: n
    };
    return i;
  }
  function YX(n) {
    if (typeof n.deltaY < "u") return n.deltaY * -3 / 360;
    if (typeof n.detail < "u") return n.detail / -9;
    throw new Error("Captor: could not extract delta from event.");
  }
  var KX = /* @__PURE__ */ function(n) {
    wo(e, n);
    function e(t, i) {
      var r;
      return br(this, e), r = vo(this, e), r.container = t, r.renderer = i, r;
    }
    return vr(e);
  }(PH), I8e = ["doubleClickTimeout", "doubleClickZoomingDuration", "doubleClickZoomingRatio", "dragTimeout", "draggedEventsTolerance", "inertiaDuration", "inertiaRatio", "zoomDuration", "zoomingRatio"], O8e = I8e.reduce(function(n, e) {
    return We(We({}, n), {}, de({}, e, IH[e]));
  }, {}), k8e = /* @__PURE__ */ function(n) {
    wo(e, n);
    function e(t, i) {
      var r;
      return br(this, e), r = vo(this, e, [t, i]), de(ve(r), "enabled", !0), de(ve(r), "draggedEvents", 0), de(ve(r), "downStartTime", null), de(ve(r), "lastMouseX", null), de(ve(r), "lastMouseY", null), de(ve(r), "isMouseDown", !1), de(ve(r), "isMoving", !1), de(ve(r), "movingTimeout", null), de(ve(r), "startCameraState", null), de(ve(r), "clicks", 0), de(ve(r), "doubleClickTimeout", null), de(ve(r), "currentWheelDirection", 0), de(ve(r), "settings", O8e), r.handleClick = r.handleClick.bind(ve(r)), r.handleRightClick = r.handleRightClick.bind(ve(r)), r.handleDown = r.handleDown.bind(ve(r)), r.handleUp = r.handleUp.bind(ve(r)), r.handleMove = r.handleMove.bind(ve(r)), r.handleWheel = r.handleWheel.bind(ve(r)), r.handleLeave = r.handleLeave.bind(ve(r)), r.handleEnter = r.handleEnter.bind(ve(r)), t.addEventListener("click", r.handleClick, {
        capture: !1
      }), t.addEventListener("contextmenu", r.handleRightClick, {
        capture: !1
      }), t.addEventListener("mousedown", r.handleDown, {
        capture: !1
      }), t.addEventListener("wheel", r.handleWheel, {
        capture: !1
      }), t.addEventListener("mouseleave", r.handleLeave, {
        capture: !1
      }), t.addEventListener("mouseenter", r.handleEnter, {
        capture: !1
      }), document.addEventListener("mousemove", r.handleMove, {
        capture: !1
      }), document.addEventListener("mouseup", r.handleUp, {
        capture: !1
      }), r;
    }
    return vr(e, [{
      key: "kill",
      value: function() {
        var i = this.container;
        i.removeEventListener("click", this.handleClick), i.removeEventListener("contextmenu", this.handleRightClick), i.removeEventListener("mousedown", this.handleDown), i.removeEventListener("wheel", this.handleWheel), i.removeEventListener("mouseleave", this.handleLeave), i.removeEventListener("mouseenter", this.handleEnter), document.removeEventListener("mousemove", this.handleMove), document.removeEventListener("mouseup", this.handleUp);
      }
    }, {
      key: "handleClick",
      value: function(i) {
        var r = this;
        if (this.enabled) {
          if (this.clicks++, this.clicks === 2)
            return this.clicks = 0, typeof this.doubleClickTimeout == "number" && (clearTimeout(this.doubleClickTimeout), this.doubleClickTimeout = null), this.handleDoubleClick(i);
          setTimeout(function() {
            r.clicks = 0, r.doubleClickTimeout = null;
          }, this.settings.doubleClickTimeout), this.draggedEvents < this.settings.draggedEventsTolerance && this.emit("click", Yl(i, this.container));
        }
      }
    }, {
      key: "handleRightClick",
      value: function(i) {
        this.enabled && this.emit("rightClick", Yl(i, this.container));
      }
    }, {
      key: "handleDoubleClick",
      value: function(i) {
        if (this.enabled) {
          i.preventDefault(), i.stopPropagation();
          var r = Yl(i, this.container);
          if (this.emit("doubleClick", r), !r.sigmaDefaultPrevented) {
            var s = this.renderer.getCamera(), o = s.getBoundedRatio(s.getState().ratio / this.settings.doubleClickZoomingRatio);
            s.animate(this.renderer.getViewportZoomedState(Yo(i, this.container), o), {
              easing: "quadraticInOut",
              duration: this.settings.doubleClickZoomingDuration
            });
          }
        }
      }
    }, {
      key: "handleDown",
      value: function(i) {
        if (this.enabled) {
          if (i.button === 0) {
            this.startCameraState = this.renderer.getCamera().getState();
            var r = Yo(i, this.container), s = r.x, o = r.y;
            this.lastMouseX = s, this.lastMouseY = o, this.draggedEvents = 0, this.downStartTime = Date.now(), this.isMouseDown = !0;
          }
          this.emit("mousedown", Yl(i, this.container));
        }
      }
    }, {
      key: "handleUp",
      value: function(i) {
        var r = this;
        if (!(!this.enabled || !this.isMouseDown)) {
          var s = this.renderer.getCamera();
          this.isMouseDown = !1, typeof this.movingTimeout == "number" && (clearTimeout(this.movingTimeout), this.movingTimeout = null);
          var o = Yo(i, this.container), a = o.x, l = o.y, c = s.getState(), u = s.getPreviousState() || {
            x: 0,
            y: 0
          };
          this.isMoving ? s.animate({
            x: c.x + this.settings.inertiaRatio * (c.x - u.x),
            y: c.y + this.settings.inertiaRatio * (c.y - u.y)
          }, {
            duration: this.settings.inertiaDuration,
            easing: "quadraticOut"
          }) : (this.lastMouseX !== a || this.lastMouseY !== l) && s.setState({
            x: c.x,
            y: c.y
          }), this.isMoving = !1, setTimeout(function() {
            var h = r.draggedEvents > 0;
            r.draggedEvents = 0, h && r.renderer.refresh();
          }, 0), this.emit("mouseup", Yl(i, this.container));
        }
      }
    }, {
      key: "handleMove",
      value: function(i) {
        var r = this;
        if (this.enabled) {
          var s = Yl(i, this.container);
          if (this.emit("mousemovebody", s), (i.target === this.container || i.composedPath()[0] === this.container) && this.emit("mousemove", s), !s.sigmaDefaultPrevented && this.isMouseDown) {
            this.isMoving = !0, this.draggedEvents++, typeof this.movingTimeout == "number" && clearTimeout(this.movingTimeout), this.movingTimeout = window.setTimeout(function() {
              r.movingTimeout = null, r.isMoving = !1;
            }, this.settings.dragTimeout);
            var o = this.renderer.getCamera(), a = Yo(i, this.container), l = a.x, c = a.y, u = this.renderer.viewportToFramedGraph({
              x: this.lastMouseX,
              y: this.lastMouseY
            }), h = this.renderer.viewportToFramedGraph({
              x: l,
              y: c
            }), d = u.x - h.x, f = u.y - h.y, g = o.getState(), p = g.x + d, m = g.y + f;
            o.setState({
              x: p,
              y: m
            }), this.lastMouseX = l, this.lastMouseY = c, i.preventDefault(), i.stopPropagation();
          }
        }
      }
    }, {
      key: "handleLeave",
      value: function(i) {
        this.emit("mouseleave", Yl(i, this.container));
      }
    }, {
      key: "handleEnter",
      value: function(i) {
        this.emit("mouseenter", Yl(i, this.container));
      }
    }, {
      key: "handleWheel",
      value: function(i) {
        var r = this;
        if (this.enabled) {
          i.preventDefault(), i.stopPropagation();
          var s = YX(i);
          if (s) {
            var o = A8e(i, this.container);
            if (this.emit("wheel", o), !o.sigmaDefaultPrevented) {
              var a = s > 0 ? 1 / this.settings.zoomingRatio : this.settings.zoomingRatio, l = this.renderer.getCamera(), c = l.getBoundedRatio(l.getState().ratio * a), u = s > 0 ? 1 : -1, h = Date.now();
              this.currentWheelDirection === u && this.lastWheelTriggerTime && h - this.lastWheelTriggerTime < this.settings.zoomDuration / 5 || (l.animate(this.renderer.getViewportZoomedState(Yo(i, this.container), c), {
                easing: "quadraticOut",
                duration: this.settings.zoomDuration
              }, function() {
                r.currentWheelDirection = 0;
              }), this.currentWheelDirection = u, this.lastWheelTriggerTime = h);
            }
          }
        }
      }
    }, {
      key: "setSettings",
      value: function(i) {
        this.settings = i;
      }
    }]), e;
  }(KX), D8e = ["dragTimeout", "inertiaDuration", "inertiaRatio", "doubleClickTimeout", "doubleClickZoomingRatio", "doubleClickZoomingDuration", "tapMoveTolerance"], N8e = D8e.reduce(function(n, e) {
    return We(We({}, n), {}, de({}, e, IH[e]));
  }, {}), L8e = /* @__PURE__ */ function(n) {
    wo(e, n);
    function e(t, i) {
      var r;
      return br(this, e), r = vo(this, e, [t, i]), de(ve(r), "enabled", !0), de(ve(r), "isMoving", !1), de(ve(r), "hasMoved", !1), de(ve(r), "touchMode", 0), de(ve(r), "startTouchesPositions", []), de(ve(r), "lastTouches", []), de(ve(r), "lastTap", null), de(ve(r), "settings", N8e), r.handleStart = r.handleStart.bind(ve(r)), r.handleLeave = r.handleLeave.bind(ve(r)), r.handleMove = r.handleMove.bind(ve(r)), t.addEventListener("touchstart", r.handleStart, {
        capture: !1
      }), t.addEventListener("touchcancel", r.handleLeave, {
        capture: !1
      }), document.addEventListener("touchend", r.handleLeave, {
        capture: !1,
        passive: !1
      }), document.addEventListener("touchmove", r.handleMove, {
        capture: !1,
        passive: !1
      }), r;
    }
    return vr(e, [{
      key: "kill",
      value: function() {
        var i = this.container;
        i.removeEventListener("touchstart", this.handleStart), i.removeEventListener("touchcancel", this.handleLeave), document.removeEventListener("touchend", this.handleLeave), document.removeEventListener("touchmove", this.handleMove);
      }
    }, {
      key: "getDimensions",
      value: function() {
        return {
          width: this.container.offsetWidth,
          height: this.container.offsetHeight
        };
      }
    }, {
      key: "handleStart",
      value: function(i) {
        var r = this;
        if (this.enabled) {
          i.preventDefault();
          var s = WS(i.touches);
          if (this.touchMode = s.length, this.startCameraState = this.renderer.getCamera().getState(), this.startTouchesPositions = s.map(function(f) {
            return Yo(f, r.container);
          }), this.touchMode === 2) {
            var o = kR(this.startTouchesPositions, 2), a = o[0], l = a.x, c = a.y, u = o[1], h = u.x, d = u.y;
            this.startTouchesAngle = Math.atan2(d - c, h - l), this.startTouchesDistance = Math.sqrt(Math.pow(h - l, 2) + Math.pow(d - c, 2));
          }
          this.emit("touchdown", Ib(i, this.lastTouches, this.container)), this.lastTouches = s, this.lastTouchesPositions = this.startTouchesPositions;
        }
      }
    }, {
      key: "handleLeave",
      value: function(i) {
        if (!(!this.enabled || !this.startTouchesPositions.length)) {
          switch (i.cancelable && i.preventDefault(), this.movingTimeout && (this.isMoving = !1, clearTimeout(this.movingTimeout)), this.touchMode) {
            case 2:
              if (i.touches.length === 1) {
                this.handleStart(i), i.preventDefault();
                break;
              }
            case 1:
              if (this.isMoving) {
                var r = this.renderer.getCamera(), s = r.getState(), o = r.getPreviousState() || {
                  x: 0,
                  y: 0
                };
                r.animate({
                  x: s.x + this.settings.inertiaRatio * (s.x - o.x),
                  y: s.y + this.settings.inertiaRatio * (s.y - o.y)
                }, {
                  duration: this.settings.inertiaDuration,
                  easing: "quadraticOut"
                });
              }
              this.hasMoved = !1, this.isMoving = !1, this.touchMode = 0;
              break;
          }
          if (this.emit("touchup", Ib(i, this.lastTouches, this.container)), !i.touches.length) {
            var a = Yo(this.lastTouches[0], this.container), l = this.startTouchesPositions[0], c = Math.pow(a.x - l.x, 2) + Math.pow(a.y - l.y, 2);
            if (!i.touches.length && c < Math.pow(this.settings.tapMoveTolerance, 2))
              if (this.lastTap && Date.now() - this.lastTap.time < this.settings.doubleClickTimeout) {
                var u = Ib(i, this.lastTouches, this.container);
                if (this.emit("doubletap", u), this.lastTap = null, !u.sigmaDefaultPrevented) {
                  var h = this.renderer.getCamera(), d = h.getBoundedRatio(h.getState().ratio / this.settings.doubleClickZoomingRatio);
                  h.animate(this.renderer.getViewportZoomedState(a, d), {
                    easing: "quadraticInOut",
                    duration: this.settings.doubleClickZoomingDuration
                  });
                }
              } else {
                var f = Ib(i, this.lastTouches, this.container);
                this.emit("tap", f), this.lastTap = {
                  time: Date.now(),
                  position: f.touches[0] || f.previousTouches[0]
                };
              }
          }
          this.lastTouches = WS(i.touches), this.startTouchesPositions = [];
        }
      }
    }, {
      key: "handleMove",
      value: function(i) {
        var r = this;
        if (!(!this.enabled || !this.startTouchesPositions.length)) {
          i.preventDefault();
          var s = WS(i.touches), o = s.map(function(b) {
            return Yo(b, r.container);
          }), a = this.lastTouches;
          this.lastTouches = s, this.lastTouchesPositions = o;
          var l = Ib(i, a, this.container);
          if (this.emit("touchmove", l), !l.sigmaDefaultPrevented && (this.hasMoved || (this.hasMoved = o.some(function(b, S) {
            var _ = r.startTouchesPositions[S];
            return _ && (b.x !== _.x || b.y !== _.y);
          })), !!this.hasMoved)) {
            this.isMoving = !0, this.movingTimeout && clearTimeout(this.movingTimeout), this.movingTimeout = window.setTimeout(function() {
              r.isMoving = !1;
            }, this.settings.dragTimeout);
            var c = this.renderer.getCamera(), u = this.startCameraState, h = this.renderer.getSetting("stagePadding");
            switch (this.touchMode) {
              case 1: {
                var d = this.renderer.viewportToFramedGraph((this.startTouchesPositions || [])[0]), f = d.x, g = d.y, p = this.renderer.viewportToFramedGraph(o[0]), m = p.x, v = p.y;
                c.setState({
                  x: u.x + f - m,
                  y: u.y + g - v
                });
                break;
              }
              case 2: {
                var y = {
                  x: 0.5,
                  y: 0.5,
                  angle: 0,
                  ratio: 1
                }, w = o[0], R = w.x, E = w.y, C = o[1], T = C.x, P = C.y, x = Math.atan2(P - E, T - R) - this.startTouchesAngle, A = Math.hypot(P - E, T - R) / this.startTouchesDistance, D = c.getBoundedRatio(u.ratio / A);
                y.ratio = D, y.angle = u.angle + x;
                var B = this.getDimensions(), F = this.renderer.viewportToFramedGraph((this.startTouchesPositions || [])[0], {
                  cameraState: u
                }), W = Math.min(B.width, B.height) - 2 * h, N = W / B.width, O = W / B.height, V = D / W, G = R - W / 2 / N, U = E - W / 2 / O, se = [G * Math.cos(-y.angle) - U * Math.sin(-y.angle), U * Math.cos(-y.angle) + G * Math.sin(-y.angle)];
                G = se[0], U = se[1], y.x = F.x - G * V, y.y = F.y + U * V, c.setState(y);
                break;
              }
            }
          }
        }
      }
    }, {
      key: "setSettings",
      value: function(i) {
        this.settings = i;
      }
    }]), e;
  }(KX);
  function H8e(n) {
    if (Array.isArray(n)) return ZI(n);
  }
  function $8e(n) {
    if (typeof Symbol < "u" && n[Symbol.iterator] != null || n["@@iterator"] != null) return Array.from(n);
  }
  function F8e() {
    throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function g6(n) {
    return H8e(n) || $8e(n) || AX(n) || F8e();
  }
  function B8e(n, e) {
    if (n == null) return {};
    var t = {};
    for (var i in n) if ({}.hasOwnProperty.call(n, i)) {
      if (e.includes(i)) continue;
      t[i] = n[i];
    }
    return t;
  }
  function dA(n, e) {
    if (n == null) return {};
    var t, i, r = B8e(n, e);
    if (Object.getOwnPropertySymbols) {
      var s = Object.getOwnPropertySymbols(n);
      for (i = 0; i < s.length; i++) t = s[i], e.includes(t) || {}.propertyIsEnumerable.call(n, t) && (r[t] = n[t]);
    }
    return r;
  }
  var p6 = /* @__PURE__ */ function() {
    function n(e, t) {
      br(this, n), this.key = e, this.size = t;
    }
    return vr(n, null, [{
      key: "compare",
      value: function(t, i) {
        return t.size > i.size ? -1 : t.size < i.size || t.key > i.key ? 1 : -1;
      }
    }]), n;
  }(), m6 = /* @__PURE__ */ function() {
    function n() {
      br(this, n), de(this, "width", 0), de(this, "height", 0), de(this, "cellSize", 0), de(this, "columns", 0), de(this, "rows", 0), de(this, "cells", {});
    }
    return vr(n, [{
      key: "resizeAndClear",
      value: function(t, i) {
        this.width = t.width, this.height = t.height, this.cellSize = i, this.columns = Math.ceil(t.width / i), this.rows = Math.ceil(t.height / i), this.cells = {};
      }
    }, {
      key: "getIndex",
      value: function(t) {
        var i = Math.floor(t.x / this.cellSize), r = Math.floor(t.y / this.cellSize);
        return r * this.columns + i;
      }
    }, {
      key: "add",
      value: function(t, i, r) {
        var s = new p6(t, i), o = this.getIndex(r), a = this.cells[o];
        a || (a = [], this.cells[o] = a), a.push(s);
      }
    }, {
      key: "organize",
      value: function() {
        for (var t in this.cells) {
          var i = this.cells[t];
          i.sort(p6.compare);
        }
      }
    }, {
      key: "getLabelsToDisplay",
      value: function(t, i) {
        var r = this.cellSize * this.cellSize, s = r / t / t, o = s * i / r, a = Math.ceil(o), l = [];
        for (var c in this.cells)
          for (var u = this.cells[c], h = 0; h < Math.min(a, u.length); h++)
            l.push(u[h].key);
        return l;
      }
    }]), n;
  }();
  function V8e(n) {
    var e = n.graph, t = n.hoveredNode, i = n.highlightedNodes, r = n.displayedNodeLabels, s = [];
    return e.forEachEdge(function(o, a, l, c) {
      (l === t || c === t || i.has(l) || i.has(c) || r.has(l) && r.has(c)) && s.push(o);
    }), s;
  }
  var b6 = 150, v6 = 50, sc = Object.prototype.hasOwnProperty;
  function W8e(n, e, t) {
    if (!sc.call(t, "x") || !sc.call(t, "y")) throw new Error('Sigma: could not find a valid position (x, y) for node "'.concat(e, '". All your nodes must have a number "x" and "y". Maybe your forgot to apply a layout or your "nodeReducer" is not returning the correct data?'));
    return t.color || (t.color = n.defaultNodeColor), !t.label && t.label !== "" && (t.label = null), t.label !== void 0 && t.label !== null ? t.label = "" + t.label : t.label = null, t.size || (t.size = 2), sc.call(t, "hidden") || (t.hidden = !1), sc.call(t, "highlighted") || (t.highlighted = !1), sc.call(t, "forceLabel") || (t.forceLabel = !1), (!t.type || t.type === "") && (t.type = n.defaultNodeType), t.zIndex || (t.zIndex = 0), t;
  }
  function j8e(n, e, t) {
    return t.color || (t.color = n.defaultEdgeColor), t.label || (t.label = ""), t.size || (t.size = 0.5), sc.call(t, "hidden") || (t.hidden = !1), sc.call(t, "forceLabel") || (t.forceLabel = !1), (!t.type || t.type === "") && (t.type = n.defaultEdgeType), t.zIndex || (t.zIndex = 0), t;
  }
  var w6 = /* @__PURE__ */ function(n) {
    wo(e, n);
    function e(t, i) {
      var r, s = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      if (br(this, e), r = vo(this, e), de(ve(r), "elements", {}), de(ve(r), "canvasContexts", {}), de(ve(r), "webGLContexts", {}), de(ve(r), "pickingLayers", /* @__PURE__ */ new Set()), de(ve(r), "textures", {}), de(ve(r), "frameBuffers", {}), de(ve(r), "activeListeners", {}), de(ve(r), "labelGrid", new m6()), de(ve(r), "nodeDataCache", {}), de(ve(r), "edgeDataCache", {}), de(ve(r), "nodeProgramIndex", {}), de(ve(r), "edgeProgramIndex", {}), de(ve(r), "nodesWithForcedLabels", /* @__PURE__ */ new Set()), de(ve(r), "edgesWithForcedLabels", /* @__PURE__ */ new Set()), de(ve(r), "nodeExtent", {
        x: [0, 1],
        y: [0, 1]
      }), de(ve(r), "nodeZExtent", [1 / 0, -1 / 0]), de(ve(r), "edgeZExtent", [1 / 0, -1 / 0]), de(ve(r), "matrix", Vo()), de(ve(r), "invMatrix", Vo()), de(ve(r), "correctionRatio", 1), de(ve(r), "customBBox", null), de(ve(r), "normalizationFunction", u6({
        x: [0, 1],
        y: [0, 1]
      })), de(ve(r), "graphToViewportRatio", 1), de(ve(r), "itemIDsIndex", {}), de(ve(r), "nodeIndices", {}), de(ve(r), "edgeIndices", {}), de(ve(r), "width", 0), de(ve(r), "height", 0), de(ve(r), "pixelRatio", l6()), de(ve(r), "pickingDownSizingRatio", 2 * r.pixelRatio), de(ve(r), "displayedNodeLabels", /* @__PURE__ */ new Set()), de(ve(r), "displayedEdgeLabels", /* @__PURE__ */ new Set()), de(ve(r), "highlightedNodes", /* @__PURE__ */ new Set()), de(ve(r), "hoveredNode", null), de(ve(r), "hoveredEdge", null), de(ve(r), "renderFrame", null), de(ve(r), "renderHighlightedNodesFrame", null), de(ve(r), "needToProcess", !1), de(ve(r), "checkEdgesEventsFrame", null), de(ve(r), "nodePrograms", {}), de(ve(r), "nodeHoverPrograms", {}), de(ve(r), "edgePrograms", {}), r.settings = M8e(s), d6(r.settings), R8e(t), !(i instanceof HTMLElement)) throw new Error("Sigma: container should be an html element.");
      r.graph = t, r.container = i, r.createWebGLContext("edges", {
        picking: s.enableEdgeEvents
      }), r.createCanvasContext("edgeLabels"), r.createWebGLContext("nodes", {
        picking: !0
      }), r.createCanvasContext("labels"), r.createCanvasContext("hovers"), r.createWebGLContext("hoverNodes"), r.createCanvasContext("mouse", {
        style: {
          touchAction: "none",
          userSelect: "none"
        }
      }), r.resize();
      for (var o in r.settings.nodeProgramClasses)
        r.registerNodeProgram(o, r.settings.nodeProgramClasses[o], r.settings.nodeHoverProgramClasses[o]);
      for (var a in r.settings.edgeProgramClasses)
        r.registerEdgeProgram(a, r.settings.edgeProgramClasses[a]);
      return r.camera = new f6(), r.bindCameraHandlers(), r.mouseCaptor = new k8e(r.elements.mouse, ve(r)), r.mouseCaptor.setSettings(r.settings), r.touchCaptor = new L8e(r.elements.mouse, ve(r)), r.touchCaptor.setSettings(r.settings), r.bindEventHandlers(), r.bindGraphHandlers(), r.handleSettingsUpdate(), r.refresh(), r;
    }
    return vr(e, [{
      key: "registerNodeProgram",
      value: function(i, r, s) {
        return this.nodePrograms[i] && this.nodePrograms[i].kill(), this.nodeHoverPrograms[i] && this.nodeHoverPrograms[i].kill(), this.nodePrograms[i] = new r(this.webGLContexts.nodes, this.frameBuffers.nodes, this), this.nodeHoverPrograms[i] = new (s || r)(this.webGLContexts.hoverNodes, null, this), this;
      }
      /**
       * Internal function used to register an edge program
       *
       * @param  {string}          key              - The program's key, matching the related edges "type" values.
       * @param  {EdgeProgramType} EdgeProgramClass - An edges program class.
       * @return {Sigma}
       */
    }, {
      key: "registerEdgeProgram",
      value: function(i, r) {
        return this.edgePrograms[i] && this.edgePrograms[i].kill(), this.edgePrograms[i] = new r(this.webGLContexts.edges, this.frameBuffers.edges, this), this;
      }
      /**
       * Internal function used to unregister a node program
       *
       * @param  {string} key - The program's key, matching the related nodes "type" values.
       * @return {Sigma}
       */
    }, {
      key: "unregisterNodeProgram",
      value: function(i) {
        if (this.nodePrograms[i]) {
          var r = this.nodePrograms, s = r[i], o = dA(r, [i].map(Gv));
          s.kill(), this.nodePrograms = o;
        }
        if (this.nodeHoverPrograms[i]) {
          var a = this.nodeHoverPrograms, l = a[i], c = dA(a, [i].map(Gv));
          l.kill(), this.nodePrograms = c;
        }
        return this;
      }
      /**
       * Internal function used to unregister an edge program
       *
       * @param  {string} key - The program's key, matching the related edges "type" values.
       * @return {Sigma}
       */
    }, {
      key: "unregisterEdgeProgram",
      value: function(i) {
        if (this.edgePrograms[i]) {
          var r = this.edgePrograms, s = r[i], o = dA(r, [i].map(Gv));
          s.kill(), this.edgePrograms = o;
        }
        return this;
      }
      /**
       * Method (re)binding WebGL texture (for picking).
       *
       * @return {Sigma}
       */
    }, {
      key: "resetWebGLTexture",
      value: function(i) {
        var r = this.webGLContexts[i], s = this.frameBuffers[i], o = this.textures[i];
        o && r.deleteTexture(o);
        var a = r.createTexture();
        return r.bindFramebuffer(r.FRAMEBUFFER, s), r.bindTexture(r.TEXTURE_2D, a), r.texImage2D(r.TEXTURE_2D, 0, r.RGBA, this.width, this.height, 0, r.RGBA, r.UNSIGNED_BYTE, null), r.framebufferTexture2D(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, a, 0), this.textures[i] = a, this;
      }
      /**
       * Method binding camera handlers.
       *
       * @return {Sigma}
       */
    }, {
      key: "bindCameraHandlers",
      value: function() {
        var i = this;
        return this.activeListeners.camera = function() {
          i.scheduleRender();
        }, this.camera.on("updated", this.activeListeners.camera), this;
      }
      /**
       * Method unbinding camera handlers.
       *
       * @return {Sigma}
       */
    }, {
      key: "unbindCameraHandlers",
      value: function() {
        return this.camera.removeListener("updated", this.activeListeners.camera), this;
      }
      /**
       * Method that returns the closest node to a given position.
       */
    }, {
      key: "getNodeAtPosition",
      value: function(i) {
        var r = i.x, s = i.y, o = Qj(this.webGLContexts.nodes, this.frameBuffers.nodes, r, s, this.pixelRatio, this.pickingDownSizingRatio), a = Zj.apply(void 0, g6(o)), l = this.itemIDsIndex[a];
        return l && l.type === "node" ? l.id : null;
      }
      /**
       * Method binding event handlers.
       *
       * @return {Sigma}
       */
    }, {
      key: "bindEventHandlers",
      value: function() {
        var i = this;
        this.activeListeners.handleResize = function() {
          i.scheduleRefresh();
        }, window.addEventListener("resize", this.activeListeners.handleResize), this.activeListeners.handleMove = function(s) {
          var o = Pb(s), a = {
            event: o,
            preventSigmaDefault: function() {
              o.preventSigmaDefault();
            }
          }, l = i.getNodeAtPosition(o);
          if (l && i.hoveredNode !== l && !i.nodeDataCache[l].hidden) {
            i.hoveredNode && i.emit("leaveNode", We(We({}, a), {}, {
              node: i.hoveredNode
            })), i.hoveredNode = l, i.emit("enterNode", We(We({}, a), {}, {
              node: l
            })), i.scheduleHighlightedNodesRender();
            return;
          }
          if (i.hoveredNode && i.getNodeAtPosition(o) !== i.hoveredNode) {
            var c = i.hoveredNode;
            i.hoveredNode = null, i.emit("leaveNode", We(We({}, a), {}, {
              node: c
            })), i.scheduleHighlightedNodesRender();
            return;
          }
          if (i.settings.enableEdgeEvents) {
            var u = i.hoveredNode ? null : i.getEdgeAtPoint(a.event.x, a.event.y);
            u !== i.hoveredEdge && (i.hoveredEdge && i.emit("leaveEdge", We(We({}, a), {}, {
              edge: i.hoveredEdge
            })), u && i.emit("enterEdge", We(We({}, a), {}, {
              edge: u
            })), i.hoveredEdge = u);
          }
        }, this.activeListeners.handleMoveBody = function(s) {
          var o = Pb(s);
          i.emit("moveBody", {
            event: o,
            preventSigmaDefault: function() {
              o.preventSigmaDefault();
            }
          });
        }, this.activeListeners.handleLeave = function(s) {
          var o = Pb(s), a = {
            event: o,
            preventSigmaDefault: function() {
              o.preventSigmaDefault();
            }
          };
          i.hoveredNode && (i.emit("leaveNode", We(We({}, a), {}, {
            node: i.hoveredNode
          })), i.scheduleHighlightedNodesRender()), i.settings.enableEdgeEvents && i.hoveredEdge && (i.emit("leaveEdge", We(We({}, a), {}, {
            edge: i.hoveredEdge
          })), i.scheduleHighlightedNodesRender()), i.emit("leaveStage", We({}, a));
        }, this.activeListeners.handleEnter = function(s) {
          var o = Pb(s), a = {
            event: o,
            preventSigmaDefault: function() {
              o.preventSigmaDefault();
            }
          };
          i.emit("enterStage", We({}, a));
        };
        var r = function(o) {
          return function(a) {
            var l = Pb(a), c = {
              event: l,
              preventSigmaDefault: function() {
                l.preventSigmaDefault();
              }
            }, u = i.getNodeAtPosition(l);
            if (u) return i.emit("".concat(o, "Node"), We(We({}, c), {}, {
              node: u
            }));
            if (i.settings.enableEdgeEvents) {
              var h = i.getEdgeAtPoint(l.x, l.y);
              if (h) return i.emit("".concat(o, "Edge"), We(We({}, c), {}, {
                edge: h
              }));
            }
            return i.emit("".concat(o, "Stage"), c);
          };
        };
        return this.activeListeners.handleClick = r("click"), this.activeListeners.handleRightClick = r("rightClick"), this.activeListeners.handleDoubleClick = r("doubleClick"), this.activeListeners.handleWheel = r("wheel"), this.activeListeners.handleDown = r("down"), this.activeListeners.handleUp = r("up"), this.mouseCaptor.on("mousemove", this.activeListeners.handleMove), this.mouseCaptor.on("mousemovebody", this.activeListeners.handleMoveBody), this.mouseCaptor.on("click", this.activeListeners.handleClick), this.mouseCaptor.on("rightClick", this.activeListeners.handleRightClick), this.mouseCaptor.on("doubleClick", this.activeListeners.handleDoubleClick), this.mouseCaptor.on("wheel", this.activeListeners.handleWheel), this.mouseCaptor.on("mousedown", this.activeListeners.handleDown), this.mouseCaptor.on("mouseup", this.activeListeners.handleUp), this.mouseCaptor.on("mouseleave", this.activeListeners.handleLeave), this.mouseCaptor.on("mouseenter", this.activeListeners.handleEnter), this.touchCaptor.on("touchdown", this.activeListeners.handleDown), this.touchCaptor.on("touchdown", this.activeListeners.handleMove), this.touchCaptor.on("touchup", this.activeListeners.handleUp), this.touchCaptor.on("touchmove", this.activeListeners.handleMove), this.touchCaptor.on("tap", this.activeListeners.handleClick), this.touchCaptor.on("doubletap", this.activeListeners.handleDoubleClick), this.touchCaptor.on("touchmove", this.activeListeners.handleMoveBody), this;
      }
      /**
       * Method binding graph handlers
       *
       * @return {Sigma}
       */
    }, {
      key: "bindGraphHandlers",
      value: function() {
        var i = this, r = this.graph, s = /* @__PURE__ */ new Set(["x", "y", "zIndex", "type"]);
        return this.activeListeners.eachNodeAttributesUpdatedGraphUpdate = function(o) {
          var a, l = (a = o.hints) === null || a === void 0 ? void 0 : a.attributes;
          i.graph.forEachNode(function(u) {
            return i.updateNode(u);
          });
          var c = !l || l.some(function(u) {
            return s.has(u);
          });
          i.refresh({
            partialGraph: {
              nodes: r.nodes()
            },
            skipIndexation: !c,
            schedule: !0
          });
        }, this.activeListeners.eachEdgeAttributesUpdatedGraphUpdate = function(o) {
          var a, l = (a = o.hints) === null || a === void 0 ? void 0 : a.attributes;
          i.graph.forEachEdge(function(u) {
            return i.updateEdge(u);
          });
          var c = l && ["zIndex", "type"].some(function(u) {
            return l == null ? void 0 : l.includes(u);
          });
          i.refresh({
            partialGraph: {
              edges: r.edges()
            },
            skipIndexation: !c,
            schedule: !0
          });
        }, this.activeListeners.addNodeGraphUpdate = function(o) {
          var a = o.key;
          i.addNode(a), i.refresh({
            partialGraph: {
              nodes: [a]
            },
            skipIndexation: !1,
            schedule: !0
          });
        }, this.activeListeners.updateNodeGraphUpdate = function(o) {
          var a = o.key;
          i.refresh({
            partialGraph: {
              nodes: [a]
            },
            skipIndexation: !1,
            schedule: !0
          });
        }, this.activeListeners.dropNodeGraphUpdate = function(o) {
          var a = o.key;
          i.removeNode(a), i.refresh({
            schedule: !0
          });
        }, this.activeListeners.addEdgeGraphUpdate = function(o) {
          var a = o.key;
          i.addEdge(a), i.refresh({
            partialGraph: {
              edges: [a]
            },
            schedule: !0
          });
        }, this.activeListeners.updateEdgeGraphUpdate = function(o) {
          var a = o.key;
          i.refresh({
            partialGraph: {
              edges: [a]
            },
            skipIndexation: !1,
            schedule: !0
          });
        }, this.activeListeners.dropEdgeGraphUpdate = function(o) {
          var a = o.key;
          i.removeEdge(a), i.refresh({
            schedule: !0
          });
        }, this.activeListeners.clearEdgesGraphUpdate = function() {
          i.clearEdgeState(), i.clearEdgeIndices(), i.refresh({
            schedule: !0
          });
        }, this.activeListeners.clearGraphUpdate = function() {
          i.clearEdgeState(), i.clearNodeState(), i.clearEdgeIndices(), i.clearNodeIndices(), i.refresh({
            schedule: !0
          });
        }, r.on("nodeAdded", this.activeListeners.addNodeGraphUpdate), r.on("nodeDropped", this.activeListeners.dropNodeGraphUpdate), r.on("nodeAttributesUpdated", this.activeListeners.updateNodeGraphUpdate), r.on("eachNodeAttributesUpdated", this.activeListeners.eachNodeAttributesUpdatedGraphUpdate), r.on("edgeAdded", this.activeListeners.addEdgeGraphUpdate), r.on("edgeDropped", this.activeListeners.dropEdgeGraphUpdate), r.on("edgeAttributesUpdated", this.activeListeners.updateEdgeGraphUpdate), r.on("eachEdgeAttributesUpdated", this.activeListeners.eachEdgeAttributesUpdatedGraphUpdate), r.on("edgesCleared", this.activeListeners.clearEdgesGraphUpdate), r.on("cleared", this.activeListeners.clearGraphUpdate), this;
      }
      /**
       * Method used to unbind handlers from the graph.
       *
       * @return {undefined}
       */
    }, {
      key: "unbindGraphHandlers",
      value: function() {
        var i = this.graph;
        i.removeListener("nodeAdded", this.activeListeners.addNodeGraphUpdate), i.removeListener("nodeDropped", this.activeListeners.dropNodeGraphUpdate), i.removeListener("nodeAttributesUpdated", this.activeListeners.updateNodeGraphUpdate), i.removeListener("eachNodeAttributesUpdated", this.activeListeners.eachNodeAttributesUpdatedGraphUpdate), i.removeListener("edgeAdded", this.activeListeners.addEdgeGraphUpdate), i.removeListener("edgeDropped", this.activeListeners.dropEdgeGraphUpdate), i.removeListener("edgeAttributesUpdated", this.activeListeners.updateEdgeGraphUpdate), i.removeListener("eachEdgeAttributesUpdated", this.activeListeners.eachEdgeAttributesUpdatedGraphUpdate), i.removeListener("edgesCleared", this.activeListeners.clearEdgesGraphUpdate), i.removeListener("cleared", this.activeListeners.clearGraphUpdate);
      }
      /**
       * Method looking for an edge colliding with a given point at (x, y). Returns
       * the key of the edge if any, or null else.
       */
    }, {
      key: "getEdgeAtPoint",
      value: function(i, r) {
        var s = Qj(this.webGLContexts.edges, this.frameBuffers.edges, i, r, this.pixelRatio, this.pickingDownSizingRatio), o = Zj.apply(void 0, g6(s)), a = this.itemIDsIndex[o];
        return a && a.type === "edge" ? a.id : null;
      }
      /**
       * Method used to process the whole graph's data.
       *  - extent
       *  - normalizationFunction
       *  - compute node's coordinate
       *  - labelgrid
       *  - program data allocation
       * @return {Sigma}
       */
    }, {
      key: "process",
      value: function() {
        var i = this;
        this.emit("beforeProcess");
        var r = this.graph, s = this.settings, o = this.getDimensions();
        if (this.nodeExtent = _8e(this.graph), !this.settings.autoRescale) {
          var a = o.width, l = o.height, c = this.nodeExtent, u = c.x, h = c.y;
          this.nodeExtent = {
            x: [(u[0] + u[1]) / 2 - a / 2, (u[0] + u[1]) / 2 + a / 2],
            y: [(h[0] + h[1]) / 2 - l / 2, (h[0] + h[1]) / 2 + l / 2]
          };
        }
        this.normalizationFunction = u6(this.customBBox || this.nodeExtent);
        var d = new f6(), f = Ab(d.getState(), o, this.getGraphDimensions(), this.getStagePadding());
        this.labelGrid.resizeAndClear(o, s.labelGridCellSize);
        for (var g = {}, p = {}, m = {}, v = {}, y = 1, w = r.nodes(), R = 0, E = w.length; R < E; R++) {
          var C = w[R], T = this.nodeDataCache[C], P = r.getNodeAttributes(C);
          T.x = P.x, T.y = P.y, this.normalizationFunction.applyTo(T), typeof T.label == "string" && !T.hidden && this.labelGrid.add(C, T.size, this.framedGraphToViewport(T, {
            matrix: f
          })), g[T.type] = (g[T.type] || 0) + 1;
        }
        this.labelGrid.organize();
        for (var x in this.nodePrograms) {
          if (!sc.call(this.nodePrograms, x))
            throw new Error('Sigma: could not find a suitable program for node type "'.concat(x, '"!'));
          this.nodePrograms[x].reallocate(g[x] || 0), g[x] = 0;
        }
        this.settings.zIndex && this.nodeZExtent[0] !== this.nodeZExtent[1] && (w = c6(this.nodeZExtent, function(H) {
          return i.nodeDataCache[H].zIndex;
        }, w));
        for (var A = 0, D = w.length; A < D; A++) {
          var B = w[A];
          p[B] = y, v[p[B]] = {
            type: "node",
            id: B
          }, y++;
          var F = this.nodeDataCache[B];
          this.addNodeToProgram(B, p[B], g[F.type]++);
        }
        for (var W = {}, N = r.edges(), O = 0, V = N.length; O < V; O++) {
          var G = N[O], U = this.edgeDataCache[G];
          W[U.type] = (W[U.type] || 0) + 1;
        }
        this.settings.zIndex && this.edgeZExtent[0] !== this.edgeZExtent[1] && (N = c6(this.edgeZExtent, function(H) {
          return i.edgeDataCache[H].zIndex;
        }, N));
        for (var se in this.edgePrograms) {
          if (!sc.call(this.edgePrograms, se))
            throw new Error('Sigma: could not find a suitable program for edge type "'.concat(se, '"!'));
          this.edgePrograms[se].reallocate(W[se] || 0), W[se] = 0;
        }
        for (var b = 0, S = N.length; b < S; b++) {
          var _ = N[b];
          m[_] = y, v[m[_]] = {
            type: "edge",
            id: _
          }, y++;
          var I = this.edgeDataCache[_];
          this.addEdgeToProgram(_, m[_], W[I.type]++);
        }
        return this.itemIDsIndex = v, this.nodeIndices = p, this.edgeIndices = m, this.emit("afterProcess"), this;
      }
      /**
       * Method that backports potential settings updates where it's needed.
       * @private
       */
    }, {
      key: "handleSettingsUpdate",
      value: function(i) {
        var r = this.settings;
        if (this.camera.minRatio = r.minCameraRatio, this.camera.maxRatio = r.maxCameraRatio, this.camera.enabledRotation = r.enableCameraRotation, this.camera.setState(this.camera.validateState(this.camera.getState())), i) {
          if (i.edgeProgramClasses !== r.edgeProgramClasses) {
            for (var s in r.edgeProgramClasses)
              r.edgeProgramClasses[s] !== i.edgeProgramClasses[s] && this.registerEdgeProgram(s, r.edgeProgramClasses[s]);
            for (var o in i.edgeProgramClasses)
              r.edgeProgramClasses[o] || this.unregisterEdgeProgram(o);
          }
          if (i.nodeProgramClasses !== r.nodeProgramClasses || i.nodeHoverProgramClasses !== r.nodeHoverProgramClasses) {
            for (var a in r.nodeProgramClasses)
              (r.nodeProgramClasses[a] !== i.nodeProgramClasses[a] || r.nodeHoverProgramClasses[a] !== i.nodeHoverProgramClasses[a]) && this.registerNodeProgram(a, r.nodeProgramClasses[a], r.nodeHoverProgramClasses[a]);
            for (var l in i.nodeProgramClasses)
              r.nodeProgramClasses[l] || this.unregisterNodeProgram(l);
          }
        }
        return this.mouseCaptor.setSettings(this.settings), this.touchCaptor.setSettings(this.settings), this;
      }
      /**
       * Method used to render labels.
       *
       * @return {Sigma}
       */
    }, {
      key: "renderLabels",
      value: function() {
        if (!this.settings.renderLabels) return this;
        var i = this.camera.getState(), r = this.labelGrid.getLabelsToDisplay(i.ratio, this.settings.labelDensity);
        h6(r, this.nodesWithForcedLabels), this.displayedNodeLabels = /* @__PURE__ */ new Set();
        for (var s = this.canvasContexts.labels, o = 0, a = r.length; o < a; o++) {
          var l = r[o], c = this.nodeDataCache[l];
          if (!this.displayedNodeLabels.has(l) && !c.hidden) {
            var u = this.framedGraphToViewport(c), h = u.x, d = u.y, f = this.scaleSize(c.size);
            if (!(!c.forceLabel && f < this.settings.labelRenderedSizeThreshold) && !(h < -b6 || h > this.width + b6 || d < -v6 || d > this.height + v6)) {
              this.displayedNodeLabels.add(l);
              var g = this.settings.defaultDrawNodeLabel, p = this.nodePrograms[c.type], m = (p == null ? void 0 : p.drawLabel) || g;
              m(s, We(We({
                key: l
              }, c), {}, {
                size: f,
                x: h,
                y: d
              }), this.settings);
            }
          }
        }
        return this;
      }
      /**
       * Method used to render edge labels, based on which node labels were
       * rendered.
       *
       * @return {Sigma}
       */
    }, {
      key: "renderEdgeLabels",
      value: function() {
        if (!this.settings.renderEdgeLabels) return this;
        var i = this.canvasContexts.edgeLabels;
        i.clearRect(0, 0, this.width, this.height);
        var r = V8e({
          graph: this.graph,
          hoveredNode: this.hoveredNode,
          displayedNodeLabels: this.displayedNodeLabels,
          highlightedNodes: this.highlightedNodes
        });
        h6(r, this.edgesWithForcedLabels);
        for (var s = /* @__PURE__ */ new Set(), o = 0, a = r.length; o < a; o++) {
          var l = r[o], c = this.graph.extremities(l), u = this.nodeDataCache[c[0]], h = this.nodeDataCache[c[1]], d = this.edgeDataCache[l];
          if (!s.has(l) && !(d.hidden || u.hidden || h.hidden)) {
            var f = this.settings.defaultDrawEdgeLabel, g = this.edgePrograms[d.type], p = (g == null ? void 0 : g.drawLabel) || f;
            p(i, We(We({
              key: l
            }, d), {}, {
              size: this.scaleSize(d.size)
            }), We(We(We({
              key: c[0]
            }, u), this.framedGraphToViewport(u)), {}, {
              size: this.scaleSize(u.size)
            }), We(We(We({
              key: c[1]
            }, h), this.framedGraphToViewport(h)), {}, {
              size: this.scaleSize(h.size)
            }), this.settings), s.add(l);
          }
        }
        return this.displayedEdgeLabels = s, this;
      }
      /**
       * Method used to render the highlighted nodes.
       *
       * @return {Sigma}
       */
    }, {
      key: "renderHighlightedNodes",
      value: function() {
        var i = this, r = this.canvasContexts.hovers;
        r.clearRect(0, 0, this.width, this.height);
        var s = function(f) {
          var g = i.nodeDataCache[f], p = i.framedGraphToViewport(g), m = p.x, v = p.y, y = i.scaleSize(g.size), w = i.settings.defaultDrawNodeHover, R = i.nodePrograms[g.type], E = (R == null ? void 0 : R.drawHover) || w;
          E(r, We(We({
            key: f
          }, g), {}, {
            size: y,
            x: m,
            y: v
          }), i.settings);
        }, o = [];
        this.hoveredNode && !this.nodeDataCache[this.hoveredNode].hidden && o.push(this.hoveredNode), this.highlightedNodes.forEach(function(d) {
          d !== i.hoveredNode && o.push(d);
        }), o.forEach(function(d) {
          return s(d);
        });
        var a = {};
        o.forEach(function(d) {
          var f = i.nodeDataCache[d].type;
          a[f] = (a[f] || 0) + 1;
        });
        for (var l in this.nodeHoverPrograms)
          this.nodeHoverPrograms[l].reallocate(a[l] || 0), a[l] = 0;
        o.forEach(function(d) {
          var f = i.nodeDataCache[d];
          i.nodeHoverPrograms[f.type].process(0, a[f.type]++, f);
        }), this.webGLContexts.hoverNodes.clear(this.webGLContexts.hoverNodes.COLOR_BUFFER_BIT);
        var c = this.getRenderParams();
        for (var u in this.nodeHoverPrograms) {
          var h = this.nodeHoverPrograms[u];
          h.render(c);
        }
      }
      /**
       * Method used to schedule a hover render.
       *
       */
    }, {
      key: "scheduleHighlightedNodesRender",
      value: function() {
        var i = this;
        this.renderHighlightedNodesFrame || this.renderFrame || (this.renderHighlightedNodesFrame = requestAnimationFrame(function() {
          i.renderHighlightedNodesFrame = null, i.renderHighlightedNodes(), i.renderEdgeLabels();
        }));
      }
      /**
       * Method used to render.
       *
       * @return {Sigma}
       */
    }, {
      key: "render",
      value: function() {
        var i = this;
        this.emit("beforeRender");
        var r = function() {
          return i.emit("afterRender"), i;
        };
        if (this.renderFrame && (cancelAnimationFrame(this.renderFrame), this.renderFrame = null), this.resize(), this.needToProcess && this.process(), this.needToProcess = !1, this.clear(), this.pickingLayers.forEach(function(m) {
          return i.resetWebGLTexture(m);
        }), !this.graph.order) return r();
        var s = this.mouseCaptor, o = this.camera.isAnimated() || s.isMoving || s.draggedEvents || s.currentWheelDirection, a = this.camera.getState(), l = this.getDimensions(), c = this.getGraphDimensions(), u = this.getStagePadding();
        this.matrix = Ab(a, l, c, u), this.invMatrix = Ab(a, l, c, u, !0), this.correctionRatio = S8e(this.matrix, a, l), this.graphToViewportRatio = this.getGraphToViewportRatio();
        var h = this.getRenderParams();
        for (var d in this.nodePrograms) {
          var f = this.nodePrograms[d];
          f.render(h);
        }
        if (!this.settings.hideEdgesOnMove || !o)
          for (var g in this.edgePrograms) {
            var p = this.edgePrograms[g];
            p.render(h);
          }
        return this.settings.hideLabelsOnMove && o || (this.renderLabels(), this.renderEdgeLabels(), this.renderHighlightedNodes()), r();
      }
      /**
       * Add a node in the internal data structures.
       * @private
       * @param key The node's graphology ID
       */
    }, {
      key: "addNode",
      value: function(i) {
        var r = Object.assign({}, this.graph.getNodeAttributes(i));
        this.settings.nodeReducer && (r = this.settings.nodeReducer(i, r));
        var s = W8e(this.settings, i, r);
        this.nodeDataCache[i] = s, this.nodesWithForcedLabels.delete(i), s.forceLabel && !s.hidden && this.nodesWithForcedLabels.add(i), this.highlightedNodes.delete(i), s.highlighted && !s.hidden && this.highlightedNodes.add(i), this.settings.zIndex && (s.zIndex < this.nodeZExtent[0] && (this.nodeZExtent[0] = s.zIndex), s.zIndex > this.nodeZExtent[1] && (this.nodeZExtent[1] = s.zIndex));
      }
      /**
       * Update a node the internal data structures.
       * @private
       * @param key The node's graphology ID
       */
    }, {
      key: "updateNode",
      value: function(i) {
        this.addNode(i);
        var r = this.nodeDataCache[i];
        this.normalizationFunction.applyTo(r);
      }
      /**
       * Remove a node from the internal data structures.
       * @private
       * @param key The node's graphology ID
       */
    }, {
      key: "removeNode",
      value: function(i) {
        delete this.nodeDataCache[i], delete this.nodeProgramIndex[i], this.highlightedNodes.delete(i), this.hoveredNode === i && (this.hoveredNode = null), this.nodesWithForcedLabels.delete(i);
      }
      /**
       * Add an edge into the internal data structures.
       * @private
       * @param key The edge's graphology ID
       */
    }, {
      key: "addEdge",
      value: function(i) {
        var r = Object.assign({}, this.graph.getEdgeAttributes(i));
        this.settings.edgeReducer && (r = this.settings.edgeReducer(i, r));
        var s = j8e(this.settings, i, r);
        this.edgeDataCache[i] = s, this.edgesWithForcedLabels.delete(i), s.forceLabel && !s.hidden && this.edgesWithForcedLabels.add(i), this.settings.zIndex && (s.zIndex < this.edgeZExtent[0] && (this.edgeZExtent[0] = s.zIndex), s.zIndex > this.edgeZExtent[1] && (this.edgeZExtent[1] = s.zIndex));
      }
      /**
       * Update an edge in the internal data structures.
       * @private
       * @param key The edge's graphology ID
       */
    }, {
      key: "updateEdge",
      value: function(i) {
        this.addEdge(i);
      }
      /**
       * Remove an edge from the internal data structures.
       * @private
       * @param key The edge's graphology ID
       */
    }, {
      key: "removeEdge",
      value: function(i) {
        delete this.edgeDataCache[i], delete this.edgeProgramIndex[i], this.hoveredEdge === i && (this.hoveredEdge = null), this.edgesWithForcedLabels.delete(i);
      }
      /**
       * Clear all indices related to nodes.
       * @private
       */
    }, {
      key: "clearNodeIndices",
      value: function() {
        this.labelGrid = new m6(), this.nodeExtent = {
          x: [0, 1],
          y: [0, 1]
        }, this.nodeDataCache = {}, this.edgeProgramIndex = {}, this.nodesWithForcedLabels = /* @__PURE__ */ new Set(), this.nodeZExtent = [1 / 0, -1 / 0];
      }
      /**
       * Clear all indices related to edges.
       * @private
       */
    }, {
      key: "clearEdgeIndices",
      value: function() {
        this.edgeDataCache = {}, this.edgeProgramIndex = {}, this.edgesWithForcedLabels = /* @__PURE__ */ new Set(), this.edgeZExtent = [1 / 0, -1 / 0];
      }
      /**
       * Clear all indices.
       * @private
       */
    }, {
      key: "clearIndices",
      value: function() {
        this.clearEdgeIndices(), this.clearNodeIndices();
      }
      /**
       * Clear all graph state related to nodes.
       * @private
       */
    }, {
      key: "clearNodeState",
      value: function() {
        this.displayedNodeLabels = /* @__PURE__ */ new Set(), this.highlightedNodes = /* @__PURE__ */ new Set(), this.hoveredNode = null;
      }
      /**
       * Clear all graph state related to edges.
       * @private
       */
    }, {
      key: "clearEdgeState",
      value: function() {
        this.displayedEdgeLabels = /* @__PURE__ */ new Set(), this.highlightedNodes = /* @__PURE__ */ new Set(), this.hoveredEdge = null;
      }
      /**
       * Clear all graph state.
       * @private
       */
    }, {
      key: "clearState",
      value: function() {
        this.clearEdgeState(), this.clearNodeState();
      }
      /**
       * Add the node data to its program.
       * @private
       * @param node The node's graphology ID
       * @param fingerprint A fingerprint used to identity the node with picking
       * @param position The index where to place the node in the program
       */
    }, {
      key: "addNodeToProgram",
      value: function(i, r, s) {
        var o = this.nodeDataCache[i], a = this.nodePrograms[o.type];
        if (!a) throw new Error('Sigma: could not find a suitable program for node type "'.concat(o.type, '"!'));
        a.process(r, s, o), this.nodeProgramIndex[i] = s;
      }
      /**
       * Add the edge data to its program.
       * @private
       * @param edge The edge's graphology ID
       * @param fingerprint A fingerprint used to identity the edge with picking
       * @param position The index where to place the edge in the program
       */
    }, {
      key: "addEdgeToProgram",
      value: function(i, r, s) {
        var o = this.edgeDataCache[i], a = this.edgePrograms[o.type];
        if (!a) throw new Error('Sigma: could not find a suitable program for edge type "'.concat(o.type, '"!'));
        var l = this.graph.extremities(i), c = this.nodeDataCache[l[0]], u = this.nodeDataCache[l[1]];
        a.process(r, s, c, u, o), this.edgeProgramIndex[i] = s;
      }
      /**---------------------------------------------------------------------------
       * Public API.
       **---------------------------------------------------------------------------
       */
      /**
       * Function used to get the render params.
       *
       * @return {RenderParams}
       */
    }, {
      key: "getRenderParams",
      value: function() {
        return {
          matrix: this.matrix,
          invMatrix: this.invMatrix,
          width: this.width,
          height: this.height,
          pixelRatio: this.pixelRatio,
          zoomRatio: this.camera.ratio,
          cameraAngle: this.camera.angle,
          sizeRatio: 1 / this.scaleSize(),
          correctionRatio: this.correctionRatio,
          downSizingRatio: this.pickingDownSizingRatio,
          minEdgeThickness: this.settings.minEdgeThickness,
          antiAliasingFeather: this.settings.antiAliasingFeather
        };
      }
      /**
       * Function used to retrieve the actual stage padding value.
       *
       * @return {number}
       */
    }, {
      key: "getStagePadding",
      value: function() {
        var i = this.settings, r = i.stagePadding, s = i.autoRescale;
        return s && r || 0;
      }
      /**
       * Function used to create a layer element.
       *
       * @param {string} id - Context's id.
       * @param {string} tag - The HTML tag to use.
       * @param options
       * @return {Sigma}
       */
    }, {
      key: "createLayer",
      value: function(i, r) {
        var s = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        if (this.elements[i]) throw new Error('Sigma: a layer named "'.concat(i, '" already exists'));
        var o = E8e(r, {
          position: "absolute"
        }, {
          class: "sigma-".concat(i)
        });
        return s.style && Object.assign(o.style, s.style), this.elements[i] = o, "beforeLayer" in s && s.beforeLayer ? this.elements[s.beforeLayer].before(o) : "afterLayer" in s && s.afterLayer ? this.elements[s.afterLayer].after(o) : this.container.appendChild(o), o;
      }
      /**
       * Function used to create a canvas element.
       *
       * @param {string} id - Context's id.
       * @param options
       * @return {Sigma}
       */
    }, {
      key: "createCanvas",
      value: function(i) {
        var r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        return this.createLayer(i, "canvas", r);
      }
      /**
       * Function used to create a canvas context and add the relevant DOM elements.
       *
       * @param  {string} id - Context's id.
       * @return {Sigma}
       */
    }, {
      key: "createCanvasContext",
      value: function(i) {
        var r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, s = this.createCanvas(i, r), o = {
          preserveDrawingBuffer: !1,
          antialias: !1
        };
        return this.canvasContexts[i] = s.getContext("2d", o), this;
      }
      /**
       * Function used to create a WebGL context and add the relevant DOM
       * elements.
       *
       * @param  {string}  id      - Context's id.
       * @param  {object?} options - #getContext params to override (optional)
       * @return {WebGLRenderingContext}
       */
    }, {
      key: "createWebGLContext",
      value: function(i) {
        var r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, s = (r == null ? void 0 : r.canvas) || this.createCanvas(i, r);
        r.hidden && s.remove();
        var o = We({
          preserveDrawingBuffer: !1,
          antialias: !1
        }, r), a;
        a = s.getContext("webgl2", o), a || (a = s.getContext("webgl", o)), a || (a = s.getContext("experimental-webgl", o));
        var l = a;
        if (this.webGLContexts[i] = l, l.blendFunc(l.ONE, l.ONE_MINUS_SRC_ALPHA), r.picking) {
          this.pickingLayers.add(i);
          var c = l.createFramebuffer();
          if (!c) throw new Error("Sigma: cannot create a new frame buffer for layer ".concat(i));
          this.frameBuffers[i] = c;
        }
        return l;
      }
      /**
       * Function used to properly kill a layer.
       *
       * @param  {string} id - Layer id.
       * @return {Sigma}
       */
    }, {
      key: "killLayer",
      value: function(i) {
        var r = this.elements[i];
        if (!r) throw new Error("Sigma: cannot kill layer ".concat(i, ", which does not exist"));
        if (this.webGLContexts[i]) {
          var s, o = this.webGLContexts[i];
          (s = o.getExtension("WEBGL_lose_context")) === null || s === void 0 || s.loseContext(), delete this.webGLContexts[i];
        } else this.canvasContexts[i] && delete this.canvasContexts[i];
        return r.remove(), delete this.elements[i], this;
      }
      /**
       * Method returning the renderer's camera.
       *
       * @return {Camera}
       */
    }, {
      key: "getCamera",
      value: function() {
        return this.camera;
      }
      /**
       * Method setting the renderer's camera.
       *
       * @param  {Camera} camera - New camera.
       * @return {Sigma}
       */
    }, {
      key: "setCamera",
      value: function(i) {
        this.unbindCameraHandlers(), this.camera = i, this.bindCameraHandlers();
      }
      /**
       * Method returning the container DOM element.
       *
       * @return {HTMLElement}
       */
    }, {
      key: "getContainer",
      value: function() {
        return this.container;
      }
      /**
       * Method returning the renderer's graph.
       *
       * @return {Graph}
       */
    }, {
      key: "getGraph",
      value: function() {
        return this.graph;
      }
      /**
       * Method used to set the renderer's graph.
       *
       * @return {Graph}
       */
    }, {
      key: "setGraph",
      value: function(i) {
        i !== this.graph && (this.unbindGraphHandlers(), this.checkEdgesEventsFrame !== null && (cancelAnimationFrame(this.checkEdgesEventsFrame), this.checkEdgesEventsFrame = null), this.graph = i, this.bindGraphHandlers(), this.refresh());
      }
      /**
       * Method returning the mouse captor.
       *
       * @return {MouseCaptor}
       */
    }, {
      key: "getMouseCaptor",
      value: function() {
        return this.mouseCaptor;
      }
      /**
       * Method returning the touch captor.
       *
       * @return {TouchCaptor}
       */
    }, {
      key: "getTouchCaptor",
      value: function() {
        return this.touchCaptor;
      }
      /**
       * Method returning the current renderer's dimensions.
       *
       * @return {Dimensions}
       */
    }, {
      key: "getDimensions",
      value: function() {
        return {
          width: this.width,
          height: this.height
        };
      }
      /**
       * Method returning the current graph's dimensions.
       *
       * @return {Dimensions}
       */
    }, {
      key: "getGraphDimensions",
      value: function() {
        var i = this.customBBox || this.nodeExtent;
        return {
          width: i.x[1] - i.x[0] || 1,
          height: i.y[1] - i.y[0] || 1
        };
      }
      /**
       * Method used to get all the sigma node attributes.
       * It's useful for example to get the position of a node
       * and to get values that are set by the nodeReducer
       *
       * @param  {string} key - The node's key.
       * @return {NodeDisplayData | undefined} A copy of the desired node's attribute or undefined if not found
       */
    }, {
      key: "getNodeDisplayData",
      value: function(i) {
        var r = this.nodeDataCache[i];
        return r ? Object.assign({}, r) : void 0;
      }
      /**
       * Method used to get all the sigma edge attributes.
       * It's useful for example to get values that are set by the edgeReducer.
       *
       * @param  {string} key - The edge's key.
       * @return {EdgeDisplayData | undefined} A copy of the desired edge's attribute or undefined if not found
       */
    }, {
      key: "getEdgeDisplayData",
      value: function(i) {
        var r = this.edgeDataCache[i];
        return r ? Object.assign({}, r) : void 0;
      }
      /**
       * Method used to get the set of currently displayed node labels.
       *
       * @return {Set<string>} A set of node keys whose label is displayed.
       */
    }, {
      key: "getNodeDisplayedLabels",
      value: function() {
        return new Set(this.displayedNodeLabels);
      }
      /**
       * Method used to get the set of currently displayed edge labels.
       *
       * @return {Set<string>} A set of edge keys whose label is displayed.
       */
    }, {
      key: "getEdgeDisplayedLabels",
      value: function() {
        return new Set(this.displayedEdgeLabels);
      }
      /**
       * Method returning a copy of the settings collection.
       *
       * @return {Settings} A copy of the settings collection.
       */
    }, {
      key: "getSettings",
      value: function() {
        return We({}, this.settings);
      }
      /**
       * Method returning the current value for a given setting key.
       *
       * @param  {string} key - The setting key to get.
       * @return {any} The value attached to this setting key or undefined if not found
       */
    }, {
      key: "getSetting",
      value: function(i) {
        return this.settings[i];
      }
      /**
       * Method setting the value of a given setting key. Note that this will schedule
       * a new render next frame.
       *
       * @param  {string} key - The setting key to set.
       * @param  {any}    value - The value to set.
       * @return {Sigma}
       */
    }, {
      key: "setSetting",
      value: function(i, r) {
        var s = We({}, this.settings);
        return this.settings[i] = r, d6(this.settings), this.handleSettingsUpdate(s), this.scheduleRefresh(), this;
      }
      /**
       * Method updating the value of a given setting key using the provided function.
       * Note that this will schedule a new render next frame.
       *
       * @param  {string}   key     - The setting key to set.
       * @param  {function} updater - The update function.
       * @return {Sigma}
       */
    }, {
      key: "updateSetting",
      value: function(i, r) {
        return this.setSetting(i, r(this.settings[i])), this;
      }
      /**
       * Method used to resize the renderer.
       *
       * @param  {boolean} force - If true, then resize is processed even if size is unchanged (optional).
       * @return {Sigma}
       */
    }, {
      key: "resize",
      value: function(i) {
        var r = this.width, s = this.height;
        if (this.width = this.container.offsetWidth, this.height = this.container.offsetHeight, this.pixelRatio = l6(), this.width === 0)
          if (this.settings.allowInvalidContainer) this.width = 1;
          else throw new Error("Sigma: Container has no width. You can set the allowInvalidContainer setting to true to stop seeing this error.");
        if (this.height === 0)
          if (this.settings.allowInvalidContainer) this.height = 1;
          else throw new Error("Sigma: Container has no height. You can set the allowInvalidContainer setting to true to stop seeing this error.");
        if (!i && r === this.width && s === this.height) return this;
        for (var o in this.elements) {
          var a = this.elements[o];
          a.style.width = this.width + "px", a.style.height = this.height + "px";
        }
        for (var l in this.canvasContexts)
          this.elements[l].setAttribute("width", this.width * this.pixelRatio + "px"), this.elements[l].setAttribute("height", this.height * this.pixelRatio + "px"), this.pixelRatio !== 1 && this.canvasContexts[l].scale(this.pixelRatio, this.pixelRatio);
        for (var c in this.webGLContexts) {
          this.elements[c].setAttribute("width", this.width * this.pixelRatio + "px"), this.elements[c].setAttribute("height", this.height * this.pixelRatio + "px");
          var u = this.webGLContexts[c];
          if (u.viewport(0, 0, this.width * this.pixelRatio, this.height * this.pixelRatio), this.pickingLayers.has(c)) {
            var h = this.textures[c];
            h && u.deleteTexture(h);
          }
        }
        return this.emit("resize"), this;
      }
      /**
       * Method used to clear all the canvases.
       *
       * @return {Sigma}
       */
    }, {
      key: "clear",
      value: function() {
        return this.emit("beforeClear"), this.webGLContexts.nodes.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, null), this.webGLContexts.nodes.clear(WebGLRenderingContext.COLOR_BUFFER_BIT), this.webGLContexts.edges.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, null), this.webGLContexts.edges.clear(WebGLRenderingContext.COLOR_BUFFER_BIT), this.webGLContexts.hoverNodes.clear(WebGLRenderingContext.COLOR_BUFFER_BIT), this.canvasContexts.labels.clearRect(0, 0, this.width, this.height), this.canvasContexts.hovers.clearRect(0, 0, this.width, this.height), this.canvasContexts.edgeLabels.clearRect(0, 0, this.width, this.height), this.emit("afterClear"), this;
      }
      /**
       * Method used to refresh, i.e. force the renderer to reprocess graph
       * data and render, but keep the state.
       * - if a partialGraph is provided, we only reprocess those nodes & edges.
       * - if schedule is TRUE, we schedule a render instead of sync render
       * - if skipIndexation is TRUE, then labelGrid & program indexation are skipped (can be used if you haven't modify x, y, zIndex & size)
       *
       * @return {Sigma}
       */
    }, {
      key: "refresh",
      value: function(i) {
        var r = this, s = (i == null ? void 0 : i.skipIndexation) !== void 0 ? i == null ? void 0 : i.skipIndexation : !1, o = (i == null ? void 0 : i.schedule) !== void 0 ? i.schedule : !1, a = !i || !i.partialGraph;
        if (a)
          this.clearEdgeIndices(), this.clearNodeIndices(), this.graph.forEachNode(function(R) {
            return r.addNode(R);
          }), this.graph.forEachEdge(function(R) {
            return r.addEdge(R);
          });
        else {
          for (var l, c, u = ((l = i.partialGraph) === null || l === void 0 ? void 0 : l.nodes) || [], h = 0, d = (u == null ? void 0 : u.length) || 0; h < d; h++) {
            var f = u[h];
            if (this.updateNode(f), s) {
              var g = this.nodeProgramIndex[f];
              if (g === void 0) throw new Error('Sigma: node "'.concat(f, `" can't be repaint`));
              this.addNodeToProgram(f, this.nodeIndices[f], g);
            }
          }
          for (var p = (i == null || (c = i.partialGraph) === null || c === void 0 ? void 0 : c.edges) || [], m = 0, v = p.length; m < v; m++) {
            var y = p[m];
            if (this.updateEdge(y), s) {
              var w = this.edgeProgramIndex[y];
              if (w === void 0) throw new Error('Sigma: edge "'.concat(y, `" can't be repaint`));
              this.addEdgeToProgram(y, this.edgeIndices[y], w);
            }
          }
        }
        return (a || !s) && (this.needToProcess = !0), o ? this.scheduleRender() : this.render(), this;
      }
      /**
       * Method used to schedule a render at the next available frame.
       * This method can be safely called on a same frame because it basically
       * debounces refresh to the next frame.
       *
       * @return {Sigma}
       */
    }, {
      key: "scheduleRender",
      value: function() {
        var i = this;
        return this.renderFrame || (this.renderFrame = requestAnimationFrame(function() {
          i.render();
        })), this;
      }
      /**
       * Method used to schedule a refresh (i.e. fully reprocess graph data and render)
       * at the next available frame.
       * This method can be safely called on a same frame because it basically
       * debounces refresh to the next frame.
       *
       * @return {Sigma}
       */
    }, {
      key: "scheduleRefresh",
      value: function(i) {
        return this.refresh(We(We({}, i), {}, {
          schedule: !0
        }));
      }
      /**
       * Method used to (un)zoom, while preserving the position of a viewport point.
       * Used for instance to zoom "on the mouse cursor".
       *
       * @param viewportTarget
       * @param newRatio
       * @return {CameraState}
       */
    }, {
      key: "getViewportZoomedState",
      value: function(i, r) {
        var s = this.camera.getState(), o = s.ratio, a = s.angle, l = s.x, c = s.y, u = this.settings, h = u.minCameraRatio, d = u.maxCameraRatio;
        typeof d == "number" && (r = Math.min(r, d)), typeof h == "number" && (r = Math.max(r, h));
        var f = r / o, g = {
          x: this.width / 2,
          y: this.height / 2
        }, p = this.viewportToFramedGraph(i), m = this.viewportToFramedGraph(g);
        return {
          angle: a,
          x: (p.x - m.x) * (1 - f) + l,
          y: (p.y - m.y) * (1 - f) + c,
          ratio: r
        };
      }
      /**
       * Method returning the abstract rectangle containing the graph according
       * to the camera's state.
       *
       * @return {object} - The view's rectangle.
       */
    }, {
      key: "viewRectangle",
      value: function() {
        var i = this.viewportToFramedGraph({
          x: 0,
          y: 0
        }), r = this.viewportToFramedGraph({
          x: this.width,
          y: 0
        }), s = this.viewportToFramedGraph({
          x: 0,
          y: this.height
        });
        return {
          x1: i.x,
          y1: i.y,
          x2: r.x,
          y2: r.y,
          height: r.y - s.y
        };
      }
      /**
       * Method returning the coordinates of a point from the framed graph system to the viewport system. It allows
       * overriding anything that is used to get the translation matrix, or even the matrix itself.
       *
       * Be careful if overriding dimensions, padding or cameraState, as the computation of the matrix is not the lightest
       * of computations.
       */
    }, {
      key: "framedGraphToViewport",
      value: function(i) {
        var r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, s = !!r.cameraState || !!r.viewportDimensions || !!r.graphDimensions, o = r.matrix ? r.matrix : s ? Ab(r.cameraState || this.camera.getState(), r.viewportDimensions || this.getDimensions(), r.graphDimensions || this.getGraphDimensions(), r.padding || this.getStagePadding()) : this.matrix, a = JI(o, i);
        return {
          x: (1 + a.x) * this.width / 2,
          y: (1 - a.y) * this.height / 2
        };
      }
      /**
       * Method returning the coordinates of a point from the viewport system to the framed graph system. It allows
       * overriding anything that is used to get the translation matrix, or even the matrix itself.
       *
       * Be careful if overriding dimensions, padding or cameraState, as the computation of the matrix is not the lightest
       * of computations.
       */
    }, {
      key: "viewportToFramedGraph",
      value: function(i) {
        var r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, s = !!r.cameraState || !!r.viewportDimensions || !r.graphDimensions, o = r.matrix ? r.matrix : s ? Ab(r.cameraState || this.camera.getState(), r.viewportDimensions || this.getDimensions(), r.graphDimensions || this.getGraphDimensions(), r.padding || this.getStagePadding(), !0) : this.invMatrix, a = JI(o, {
          x: i.x / this.width * 2 - 1,
          y: 1 - i.y / this.height * 2
        });
        return isNaN(a.x) && (a.x = 0), isNaN(a.y) && (a.y = 0), a;
      }
      /**
       * Method used to translate a point's coordinates from the viewport system (pixel distance from the top-left of the
       * stage) to the graph system (the reference system of data as they are in the given graph instance).
       *
       * This method accepts an optional camera which can be useful if you need to translate coordinates
       * based on a different view than the one being currently being displayed on screen.
       *
       * @param {Coordinates}                  viewportPoint
       * @param {CoordinateConversionOverride} override
       */
    }, {
      key: "viewportToGraph",
      value: function(i) {
        var r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        return this.normalizationFunction.inverse(this.viewportToFramedGraph(i, r));
      }
      /**
       * Method used to translate a point's coordinates from the graph system (the reference system of data as they are in
       * the given graph instance) to the viewport system (pixel distance from the top-left of the stage).
       *
       * This method accepts an optional camera which can be useful if you need to translate coordinates
       * based on a different view than the one being currently being displayed on screen.
       *
       * @param {Coordinates}                  graphPoint
       * @param {CoordinateConversionOverride} override
       */
    }, {
      key: "graphToViewport",
      value: function(i) {
        var r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        return this.framedGraphToViewport(this.normalizationFunction(i), r);
      }
      /**
       * Method returning the distance multiplier between the graph system and the
       * viewport system.
       */
    }, {
      key: "getGraphToViewportRatio",
      value: function() {
        var i = {
          x: 0,
          y: 0
        }, r = {
          x: 1,
          y: 1
        }, s = Math.sqrt(Math.pow(i.x - r.x, 2) + Math.pow(i.y - r.y, 2)), o = this.graphToViewport(i), a = this.graphToViewport(r), l = Math.sqrt(Math.pow(o.x - a.x, 2) + Math.pow(o.y - a.y, 2));
        return l / s;
      }
      /**
       * Method returning the graph's bounding box.
       *
       * @return {{ x: Extent, y: Extent }}
       */
    }, {
      key: "getBBox",
      value: function() {
        return this.nodeExtent;
      }
      /**
       * Method returning the graph's custom bounding box, if any.
       *
       * @return {{ x: Extent, y: Extent } | null}
       */
    }, {
      key: "getCustomBBox",
      value: function() {
        return this.customBBox;
      }
      /**
       * Method used to override the graph's bounding box with a custom one. Give `null` as the argument to stop overriding.
       *
       * @return {Sigma}
       */
    }, {
      key: "setCustomBBox",
      value: function(i) {
        return this.customBBox = i, this.scheduleRender(), this;
      }
      /**
       * Method used to shut the container & release event listeners.
       *
       * @return {undefined}
       */
    }, {
      key: "kill",
      value: function() {
        this.emit("kill"), this.removeAllListeners(), this.unbindCameraHandlers(), window.removeEventListener("resize", this.activeListeners.handleResize), this.mouseCaptor.kill(), this.touchCaptor.kill(), this.unbindGraphHandlers(), this.clearIndices(), this.clearState(), this.nodeDataCache = {}, this.edgeDataCache = {}, this.highlightedNodes.clear(), this.renderFrame && (cancelAnimationFrame(this.renderFrame), this.renderFrame = null), this.renderHighlightedNodesFrame && (cancelAnimationFrame(this.renderHighlightedNodesFrame), this.renderHighlightedNodesFrame = null);
        for (var i = this.container; i.firstChild; ) i.removeChild(i.firstChild);
        this.canvasContexts = {}, this.webGLContexts = {}, this.elements = {};
        for (var r in this.nodePrograms)
          this.nodePrograms[r].kill();
        for (var s in this.nodeHoverPrograms)
          this.nodeHoverPrograms[s].kill();
        for (var o in this.edgePrograms)
          this.edgePrograms[o].kill();
        this.nodePrograms = {}, this.nodeHoverPrograms = {}, this.edgePrograms = {};
        for (var a in this.elements)
          this.killLayer(a);
      }
      /**
       * Method used to scale the given size according to the camera's ratio, i.e.
       * zooming state.
       *
       * @param  {number?} size -        The size to scale (node size, edge thickness etc.).
       * @param  {number?} cameraRatio - A camera ratio (defaults to the actual camera ratio).
       * @return {number}              - The scaled size.
       */
    }, {
      key: "scaleSize",
      value: function() {
        var i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.camera.ratio;
        return i / this.settings.zoomToSizeRatioFunction(r) * (this.getSetting("itemSizesReference") === "positions" ? r * this.graphToViewportRatio : 1);
      }
      /**
       * Method that returns the collection of all used canvases.
       * At the moment, the instantiated canvases are the following, and in the
       * following order in the DOM:
       * - `edges`
       * - `nodes`
       * - `edgeLabels`
       * - `labels`
       * - `hovers`
       * - `hoverNodes`
       * - `mouse`
       *
       * @return {PlainObject<HTMLCanvasElement>} - The collection of canvases.
       */
    }, {
      key: "getCanvases",
      value: function() {
        var i = {};
        for (var r in this.elements) this.elements[r] instanceof HTMLCanvasElement && (i[r] = this.elements[r]);
        return i;
      }
    }]), e;
  }(PH);
  function z8e(n) {
    return !n || typeof n != "object" || typeof n == "function" || Array.isArray(n) || n instanceof Set || n instanceof Map || n instanceof RegExp || n instanceof Date;
  }
  function qX(n, e) {
    n = n || {};
    var t = {};
    for (var i in e) {
      var r = n[i], s = e[i];
      if (!z8e(s)) {
        t[i] = qX(r, s);
        continue;
      }
      r === void 0 ? t[i] = s : t[i] = r;
    }
    return t;
  }
  var U8e = qX, RE = {};
  function G8e(n) {
    return typeof n != "number" || isNaN(n) ? 1 : n;
  }
  function Y8e(n, e) {
    var t = {}, i = function(o) {
      return typeof o > "u" ? e : o;
    };
    typeof e == "function" && (i = e);
    var r = function(o) {
      return i(o[n]);
    }, s = function() {
      return i(void 0);
    };
    return typeof n == "string" ? (t.fromAttributes = r, t.fromGraph = function(o, a) {
      return r(o.getNodeAttributes(a));
    }, t.fromEntry = function(o, a) {
      return r(a);
    }) : typeof n == "function" ? (t.fromAttributes = function() {
      throw new Error("graphology-utils/getters/createNodeValueGetter: irrelevant usage.");
    }, t.fromGraph = function(o, a) {
      return i(n(a, o.getNodeAttributes(a)));
    }, t.fromEntry = function(o, a) {
      return i(n(o, a));
    }) : (t.fromAttributes = s, t.fromGraph = s, t.fromEntry = s), t;
  }
  function XX(n, e) {
    var t = {}, i = function(o) {
      return typeof o > "u" ? e : o;
    };
    typeof e == "function" && (i = e);
    var r = function(o) {
      return i(o[n]);
    }, s = function() {
      return i(void 0);
    };
    return typeof n == "string" ? (t.fromAttributes = r, t.fromGraph = function(o, a) {
      return r(o.getEdgeAttributes(a));
    }, t.fromEntry = function(o, a) {
      return r(a);
    }, t.fromPartialEntry = t.fromEntry, t.fromMinimalEntry = t.fromEntry) : typeof n == "function" ? (t.fromAttributes = function() {
      throw new Error("graphology-utils/getters/createEdgeValueGetter: irrelevant usage.");
    }, t.fromGraph = function(o, a) {
      var l = o.extremities(a);
      return i(n(a, o.getEdgeAttributes(a), l[0], l[1], o.getNodeAttributes(l[0]), o.getNodeAttributes(l[1]), o.isUndirected(a)));
    }, t.fromEntry = function(o, a, l, c, u, h, d) {
      return i(n(o, a, l, c, u, h, d));
    }, t.fromPartialEntry = function(o, a, l, c) {
      return i(n(o, a, l, c));
    }, t.fromMinimalEntry = function(o, a) {
      return i(n(o, a));
    }) : (t.fromAttributes = s, t.fromGraph = s, t.fromEntry = s, t.fromMinimalEntry = s), t;
  }
  RE.createNodeValueGetter = Y8e;
  RE.createEdgeValueGetter = XX;
  RE.createEdgeWeightGetter = function(n) {
    return XX(n, G8e);
  };
  const {
    createNodeValueGetter: y6,
    createEdgeValueGetter: K8e
  } = RE;
  var q8e = function(e, t, i) {
    const {
      nodeXAttribute: r,
      nodeYAttribute: s
    } = i, {
      attraction: o,
      repulsion: a,
      gravity: l,
      inertia: c,
      maxMove: u
    } = i.settings;
    let {
      shouldSkipNode: h,
      shouldSkipEdge: d,
      isNodeFixed: f
    } = i;
    f = y6(f), h = y6(h, !1), d = K8e(d, !1);
    const g = e.filterNodes((v, y) => !h.fromEntry(v, y)), p = g.length;
    for (let v = 0; v < p; v++) {
      const y = g[v], w = e.getNodeAttributes(y), R = t[y];
      R ? t[y] = {
        dx: R.dx * c,
        dy: R.dy * c,
        x: w[r] || 0,
        y: w[s] || 0
      } : t[y] = {
        dx: 0,
        dy: 0,
        x: w[r] || 0,
        y: w[s] || 0
      };
    }
    if (a) for (let v = 0; v < p; v++) {
      const y = g[v], w = t[y];
      for (let R = v + 1; R < p; R++) {
        const E = g[R], C = t[E], T = C.x - w.x, P = C.y - w.y, x = Math.sqrt(T * T + P * P) || 1, A = a / x * T, D = a / x * P;
        w.dx -= A, w.dy -= D, C.dx += A, C.dy += D;
      }
    }
    if (o && e.forEachEdge((v, y, w, R, E, C, T) => {
      if (w === R || h.fromEntry(w, E) || h.fromEntry(R, C) || d.fromEntry(v, y, w, R, E, C, T)) return;
      const P = t[w], x = t[R], A = x.x - P.x, D = x.y - P.y, B = Math.sqrt(A * A + D * D) || 1, F = o * B * A, W = o * B * D;
      P.dx += F, P.dy += W, x.dx -= F, x.dy -= W;
    }), l) for (let v = 0; v < p; v++) {
      const y = g[v], w = t[y], {
        x: R,
        y: E
      } = w, C = Math.sqrt(R * R + E * E) || 1;
      t[y].dx -= R * l * C, t[y].dy -= E * l * C;
    }
    const m = !1;
    for (let v = 0; v < p; v++) {
      const y = g[v], w = t[y], R = Math.sqrt(w.dx * w.dx + w.dy * w.dy);
      R > u && (w.dx *= u / R, w.dy *= u / R), f.fromGraph(e, y) ? w.fixed = !0 : (w.x += w.dx, w.y += w.dy, w.fixed = !1);
    }
    return {
      converged: m
    };
  }, OH = {};
  OH.assignLayoutChanges = function(n, e, t) {
    const {
      nodeXAttribute: i,
      nodeYAttribute: r
    } = t;
    n.updateEachNodeAttributes((s, o) => {
      const a = e[s];
      return !a || a.fixed || (o[i] = a.x, o[r] = a.y), o;
    }, {
      attributes: ["x", "y"]
    });
  };
  OH.collectLayoutChanges = function(n) {
    const e = {};
    for (const t in n) {
      const i = n[t];
      e[t] = {
        x: i.x,
        y: i.y
      };
    }
    return e;
  };
  var X8e = {
    nodeXAttribute: "x",
    nodeYAttribute: "y",
    isNodeFixed: "fixed",
    shouldSkipNode: null,
    shouldSkipEdge: null,
    settings: {
      attraction: 5e-4,
      repulsion: 0.1,
      gravity: 1e-4,
      inertia: 0.6,
      maxMove: 200
    }
  };
  const Z8e = GX, Q8e = U8e, J8e = q8e, e4e = OH, t4e = X8e;
  function cm(n, e) {
    if (!Z8e(n)) throw new Error("graphology-layout-force/worker: the given graph is not a valid graphology instance.");
    e = Q8e(e, t4e), this.callbacks = {}, e.onConverged && (this.callbacks.onConverged = e.onConverged), this.graph = n, this.params = e, this.nodeStates = {}, this.frameID = null, this.running = !1, this.killed = !1;
  }
  cm.prototype.isRunning = function() {
    return this.running;
  };
  cm.prototype.runFrame = function() {
    let {
      converged: n
    } = J8e(this.graph, this.nodeStates, this.params);
    e4e.assignLayoutChanges(this.graph, this.nodeStates, this.params), n = !1, n ? (this.callbacks.onConverged && this.callbacks.onConverged(), this.stop()) : this.frameID = window.requestAnimationFrame(() => this.runFrame());
  };
  cm.prototype.stop = function() {
    return this.running = !1, this.frameID !== null && (window.cancelAnimationFrame(this.frameID), this.frameID = null), this;
  };
  cm.prototype.start = function() {
    if (this.killed) throw new Error("graphology-layout-force/worker.start: layout was killed.");
    this.running || (this.running = !0, this.runFrame());
  };
  cm.prototype.kill = function() {
    this.stop(), delete this.nodeStates, this.killed = !0;
  };
  var n4e = cm;
  const C6 = /* @__PURE__ */ zp(n4e);
  function eO(n, e) {
    (e == null || e > n.length) && (e = n.length);
    for (var t = 0, i = Array(e); t < e; t++) i[t] = n[t];
    return i;
  }
  function i4e(n) {
    if (Array.isArray(n)) return eO(n);
  }
  function r4e(n) {
    if (typeof Symbol < "u" && n[Symbol.iterator] != null || n["@@iterator"] != null) return Array.from(n);
  }
  function s4e(n, e) {
    if (n) {
      if (typeof n == "string") return eO(n, e);
      var t = {}.toString.call(n).slice(8, -1);
      return t === "Object" && n.constructor && (t = n.constructor.name), t === "Map" || t === "Set" ? Array.from(n) : t === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? eO(n, e) : void 0;
    }
  }
  function o4e() {
    throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function kH(n) {
    return i4e(n) || r4e(n) || s4e(n) || o4e();
  }
  function DH(n, e) {
    if (!(n instanceof e)) throw new TypeError("Cannot call a class as a function");
  }
  function a4e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function ZX(n) {
    var e = a4e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function l4e(n, e) {
    for (var t = 0; t < e.length; t++) {
      var i = e[t];
      i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(n, ZX(i.key), i);
    }
  }
  function NH(n, e, t) {
    return e && l4e(n.prototype, e), Object.defineProperty(n, "prototype", {
      writable: !1
    }), n;
  }
  function Op(n) {
    return Op = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(e) {
      return e.__proto__ || Object.getPrototypeOf(e);
    }, Op(n);
  }
  function QX() {
    try {
      var n = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
    } catch {
    }
    return (QX = function() {
      return !!n;
    })();
  }
  function jo(n) {
    if (n === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return n;
  }
  function c4e(n, e) {
    if (e && (typeof e == "object" || typeof e == "function")) return e;
    if (e !== void 0) throw new TypeError("Derived constructors may only return object or undefined");
    return jo(n);
  }
  function JX(n, e, t) {
    return e = Op(e), c4e(n, QX() ? Reflect.construct(e, t || [], Op(n).constructor) : e.apply(n, t));
  }
  function u4e(n, e) {
    for (; !{}.hasOwnProperty.call(n, e) && (n = Op(n)) !== null; ) ;
    return n;
  }
  function tO() {
    return tO = typeof Reflect < "u" && Reflect.get ? Reflect.get.bind() : function(n, e, t) {
      var i = u4e(n, e);
      if (i) {
        var r = Object.getOwnPropertyDescriptor(i, e);
        return r.get ? r.get.call(arguments.length < 3 ? n : t) : r.value;
      }
    }, tO.apply(null, arguments);
  }
  function S6(n, e, t, i) {
    var r = tO(Op(n.prototype), e, t);
    return typeof r == "function" ? function(s) {
      return r.apply(t, s);
    } : r;
  }
  function nO(n, e) {
    return nO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, i) {
      return t.__proto__ = i, t;
    }, nO(n, e);
  }
  function eZ(n, e) {
    if (typeof e != "function" && e !== null) throw new TypeError("Super expression must either be null or a function");
    n.prototype = Object.create(e && e.prototype, {
      constructor: {
        value: n,
        writable: !0,
        configurable: !0
      }
    }), Object.defineProperty(n, "prototype", {
      writable: !1
    }), e && nO(n, e);
  }
  function rr(n, e, t) {
    return (e = ZX(e)) in n ? Object.defineProperty(n, e, {
      value: t,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : n[e] = t, n;
  }
  function h4e(n, e) {
    if (n == null) return {};
    var t = {};
    for (var i in n) if ({}.hasOwnProperty.call(n, i)) {
      if (e.includes(i)) continue;
      t[i] = n[i];
    }
    return t;
  }
  function d4e(n, e) {
    if (n == null) return {};
    var t, i, r = h4e(n, e);
    if (Object.getOwnPropertySymbols) {
      var s = Object.getOwnPropertySymbols(n);
      for (i = 0; i < s.length; i++) t = s[i], e.includes(t) || {}.propertyIsEnumerable.call(n, t) && (r[t] = n[t]);
    }
    return r;
  }
  function _6(n, e) {
    var t = Object.keys(n);
    if (Object.getOwnPropertySymbols) {
      var i = Object.getOwnPropertySymbols(n);
      e && (i = i.filter(function(r) {
        return Object.getOwnPropertyDescriptor(n, r).enumerable;
      })), t.push.apply(t, i);
    }
    return t;
  }
  function ws(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e] != null ? arguments[e] : {};
      e % 2 ? _6(Object(t), !0).forEach(function(i) {
        rr(n, i, t[i]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(n, Object.getOwnPropertyDescriptors(t)) : _6(Object(t)).forEach(function(i) {
        Object.defineProperty(n, i, Object.getOwnPropertyDescriptor(t, i));
      });
    }
    return n;
  }
  function f4e(n) {
    var e = n.texturesCount, t = (
      /*glsl*/
      `
precision highp float;

varying vec4 v_color;
varying vec2 v_diffVector;
varying float v_radius;
varying vec4 v_texture;
varying float v_textureIndex;

uniform sampler2D u_atlas[`.concat(e, `];
uniform float u_correctionRatio;
uniform float u_cameraAngle;
uniform float u_percentagePadding;
uniform bool u_colorizeImages;
uniform bool u_keepWithinCircle;

const vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);

const float radius = 0.5;

void main(void) {
  float border = 2.0 * u_correctionRatio;
  float dist = length(v_diffVector);
  vec4 color = gl_FragColor;

  float c = cos(-u_cameraAngle);
  float s = sin(-u_cameraAngle);
  vec2 diffVector = mat2(c, s, -s, c) * (v_diffVector);

  // No antialiasing for picking mode:
  #ifdef PICKING_MODE
  border = 0.0;
  color = v_color;

  #else
  // First case: No image to display
  if (v_texture.w <= 0.0) {
    if (!u_colorizeImages) {
      color = v_color;
    }
  }

  // Second case: Image loaded into the texture
  else {
    float paddingRatio = 1.0 + 2.0 * u_percentagePadding;
    float coef = u_keepWithinCircle ? 1.0 : `).concat(Math.SQRT2, `;
    vec2 coordinateInTexture = diffVector * vec2(paddingRatio, -paddingRatio) / v_radius / 2.0 * coef + vec2(0.5, 0.5);
    int index = int(v_textureIndex + 0.5); // +0.5 avoid rounding errors

    bool noTextureFound = false;
    vec4 texel;

    `).concat(kH(new Array(e)).map(function(i, r) {
        return "if (index == ".concat(r, ") texel = texture2D(u_atlas[").concat(r, "], (v_texture.xy + coordinateInTexture * v_texture.zw), -1.0);");
      }).join(`
    else `) + `else {
      texel = texture2D(u_atlas[0], (v_texture.xy + coordinateInTexture * v_texture.zw), -1.0);
      noTextureFound = true;
    }`, `

    if (noTextureFound) {
      color = v_color;
    } else {
      // Colorize all visible image pixels:
      if (u_colorizeImages) {
        color = mix(gl_FragColor, v_color, texel.a);
      }

      // Colorize background pixels, keep image pixel colors:
      else {
        color = vec4(mix(v_color, texel, texel.a).rgb, max(texel.a, v_color.a));
      }

      // Erase pixels "in the padding":
      if (abs(diffVector.x) > v_radius / paddingRatio || abs(diffVector.y) > v_radius / paddingRatio) {
        color = u_colorizeImages ? gl_FragColor : v_color;
      }
    }
  }
  #endif

  // Crop in a circle when u_keepWithinCircle is truthy:
  if (u_keepWithinCircle) {
    if (dist < v_radius - border) {
      gl_FragColor = color;
    } else if (dist < v_radius) {
      gl_FragColor = mix(transparent, color, (v_radius - dist) / border);
    }
  }

  // Crop in a square else:
  else {
    float squareHalfSize = v_radius * `).concat(Math.SQRT1_2 * Math.cos(Math.PI / 12), `;
    if (abs(diffVector.x) > squareHalfSize || abs(diffVector.y) > squareHalfSize) {
      gl_FragColor = transparent;
    } else {
      gl_FragColor = color;
    }
  }
}
`)
    );
    return t;
  }
  var g4e = (
    /*glsl*/
    `
attribute vec4 a_id;
attribute vec4 a_color;
attribute vec2 a_position;
attribute float a_size;
attribute float a_angle;
attribute vec4 a_texture;
attribute float a_textureIndex;

uniform mat3 u_matrix;
uniform float u_sizeRatio;
uniform float u_correctionRatio;

varying vec4 v_color;
varying vec2 v_diffVector;
varying float v_radius;
varying vec4 v_texture;
varying float v_textureIndex;

const float bias = 255.0 / 254.0;
const float marginRatio = 1.05;

void main() {
  float size = a_size * u_correctionRatio / u_sizeRatio * 4.0;
  vec2 diffVector = size * vec2(cos(a_angle), sin(a_angle));
  vec2 position = a_position + diffVector * marginRatio;
  gl_Position = vec4(
    (u_matrix * vec3(position, 1)).xy,
    0,
    1
  );

  v_diffVector = diffVector;
  v_radius = size / 2.0 / marginRatio;

  #ifdef PICKING_MODE
  // For picking mode, we use the ID as the color:
  v_color = a_id;
  #else
  // For normal mode, we use the color:
  v_color = a_color;

  // Pass the texture coordinates:
  v_textureIndex = a_textureIndex;
  v_texture = a_texture;
  #endif

  v_color.a *= bias;
}
`
  ), p4e = g4e;
  function ff() {
    ff = function() {
      return e;
    };
    var n, e = {}, t = Object.prototype, i = t.hasOwnProperty, r = Object.defineProperty || function(O, V, G) {
      O[V] = G.value;
    }, s = typeof Symbol == "function" ? Symbol : {}, o = s.iterator || "@@iterator", a = s.asyncIterator || "@@asyncIterator", l = s.toStringTag || "@@toStringTag";
    function c(O, V, G) {
      return Object.defineProperty(O, V, {
        value: G,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }), O[V];
    }
    try {
      c({}, "");
    } catch {
      c = function(V, G, U) {
        return V[G] = U;
      };
    }
    function u(O, V, G, U) {
      var se = V && V.prototype instanceof v ? V : v, b = Object.create(se.prototype), S = new W(U || []);
      return r(b, "_invoke", {
        value: A(O, G, S)
      }), b;
    }
    function h(O, V, G) {
      try {
        return {
          type: "normal",
          arg: O.call(V, G)
        };
      } catch (U) {
        return {
          type: "throw",
          arg: U
        };
      }
    }
    e.wrap = u;
    var d = "suspendedStart", f = "suspendedYield", g = "executing", p = "completed", m = {};
    function v() {
    }
    function y() {
    }
    function w() {
    }
    var R = {};
    c(R, o, function() {
      return this;
    });
    var E = Object.getPrototypeOf, C = E && E(E(N([])));
    C && C !== t && i.call(C, o) && (R = C);
    var T = w.prototype = v.prototype = Object.create(R);
    function P(O) {
      ["next", "throw", "return"].forEach(function(V) {
        c(O, V, function(G) {
          return this._invoke(V, G);
        });
      });
    }
    function x(O, V) {
      function G(se, b, S, _) {
        var I = h(O[se], O, b);
        if (I.type !== "throw") {
          var H = I.arg, M = H.value;
          return M && typeof M == "object" && i.call(M, "__await") ? V.resolve(M.__await).then(function($) {
            G("next", $, S, _);
          }, function($) {
            G("throw", $, S, _);
          }) : V.resolve(M).then(function($) {
            H.value = $, S(H);
          }, function($) {
            return G("throw", $, S, _);
          });
        }
        _(I.arg);
      }
      var U;
      r(this, "_invoke", {
        value: function(se, b) {
          function S() {
            return new V(function(_, I) {
              G(se, b, _, I);
            });
          }
          return U = U ? U.then(S, S) : S();
        }
      });
    }
    function A(O, V, G) {
      var U = d;
      return function(se, b) {
        if (U === g) throw Error("Generator is already running");
        if (U === p) {
          if (se === "throw") throw b;
          return {
            value: n,
            done: !0
          };
        }
        for (G.method = se, G.arg = b; ; ) {
          var S = G.delegate;
          if (S) {
            var _ = D(S, G);
            if (_) {
              if (_ === m) continue;
              return _;
            }
          }
          if (G.method === "next") G.sent = G._sent = G.arg;
          else if (G.method === "throw") {
            if (U === d) throw U = p, G.arg;
            G.dispatchException(G.arg);
          } else G.method === "return" && G.abrupt("return", G.arg);
          U = g;
          var I = h(O, V, G);
          if (I.type === "normal") {
            if (U = G.done ? p : f, I.arg === m) continue;
            return {
              value: I.arg,
              done: G.done
            };
          }
          I.type === "throw" && (U = p, G.method = "throw", G.arg = I.arg);
        }
      };
    }
    function D(O, V) {
      var G = V.method, U = O.iterator[G];
      if (U === n) return V.delegate = null, G === "throw" && O.iterator.return && (V.method = "return", V.arg = n, D(O, V), V.method === "throw") || G !== "return" && (V.method = "throw", V.arg = new TypeError("The iterator does not provide a '" + G + "' method")), m;
      var se = h(U, O.iterator, V.arg);
      if (se.type === "throw") return V.method = "throw", V.arg = se.arg, V.delegate = null, m;
      var b = se.arg;
      return b ? b.done ? (V[O.resultName] = b.value, V.next = O.nextLoc, V.method !== "return" && (V.method = "next", V.arg = n), V.delegate = null, m) : b : (V.method = "throw", V.arg = new TypeError("iterator result is not an object"), V.delegate = null, m);
    }
    function B(O) {
      var V = {
        tryLoc: O[0]
      };
      1 in O && (V.catchLoc = O[1]), 2 in O && (V.finallyLoc = O[2], V.afterLoc = O[3]), this.tryEntries.push(V);
    }
    function F(O) {
      var V = O.completion || {};
      V.type = "normal", delete V.arg, O.completion = V;
    }
    function W(O) {
      this.tryEntries = [{
        tryLoc: "root"
      }], O.forEach(B, this), this.reset(!0);
    }
    function N(O) {
      if (O || O === "") {
        var V = O[o];
        if (V) return V.call(O);
        if (typeof O.next == "function") return O;
        if (!isNaN(O.length)) {
          var G = -1, U = function se() {
            for (; ++G < O.length; ) if (i.call(O, G)) return se.value = O[G], se.done = !1, se;
            return se.value = n, se.done = !0, se;
          };
          return U.next = U;
        }
      }
      throw new TypeError(typeof O + " is not iterable");
    }
    return y.prototype = w, r(T, "constructor", {
      value: w,
      configurable: !0
    }), r(w, "constructor", {
      value: y,
      configurable: !0
    }), y.displayName = c(w, l, "GeneratorFunction"), e.isGeneratorFunction = function(O) {
      var V = typeof O == "function" && O.constructor;
      return !!V && (V === y || (V.displayName || V.name) === "GeneratorFunction");
    }, e.mark = function(O) {
      return Object.setPrototypeOf ? Object.setPrototypeOf(O, w) : (O.__proto__ = w, c(O, l, "GeneratorFunction")), O.prototype = Object.create(T), O;
    }, e.awrap = function(O) {
      return {
        __await: O
      };
    }, P(x.prototype), c(x.prototype, a, function() {
      return this;
    }), e.AsyncIterator = x, e.async = function(O, V, G, U, se) {
      se === void 0 && (se = Promise);
      var b = new x(u(O, V, G, U), se);
      return e.isGeneratorFunction(V) ? b : b.next().then(function(S) {
        return S.done ? S.value : b.next();
      });
    }, P(T), c(T, l, "Generator"), c(T, o, function() {
      return this;
    }), c(T, "toString", function() {
      return "[object Generator]";
    }), e.keys = function(O) {
      var V = Object(O), G = [];
      for (var U in V) G.push(U);
      return G.reverse(), function se() {
        for (; G.length; ) {
          var b = G.pop();
          if (b in V) return se.value = b, se.done = !1, se;
        }
        return se.done = !0, se;
      };
    }, e.values = N, W.prototype = {
      constructor: W,
      reset: function(O) {
        if (this.prev = 0, this.next = 0, this.sent = this._sent = n, this.done = !1, this.delegate = null, this.method = "next", this.arg = n, this.tryEntries.forEach(F), !O) for (var V in this) V.charAt(0) === "t" && i.call(this, V) && !isNaN(+V.slice(1)) && (this[V] = n);
      },
      stop: function() {
        this.done = !0;
        var O = this.tryEntries[0].completion;
        if (O.type === "throw") throw O.arg;
        return this.rval;
      },
      dispatchException: function(O) {
        if (this.done) throw O;
        var V = this;
        function G(I, H) {
          return b.type = "throw", b.arg = O, V.next = I, H && (V.method = "next", V.arg = n), !!H;
        }
        for (var U = this.tryEntries.length - 1; U >= 0; --U) {
          var se = this.tryEntries[U], b = se.completion;
          if (se.tryLoc === "root") return G("end");
          if (se.tryLoc <= this.prev) {
            var S = i.call(se, "catchLoc"), _ = i.call(se, "finallyLoc");
            if (S && _) {
              if (this.prev < se.catchLoc) return G(se.catchLoc, !0);
              if (this.prev < se.finallyLoc) return G(se.finallyLoc);
            } else if (S) {
              if (this.prev < se.catchLoc) return G(se.catchLoc, !0);
            } else {
              if (!_) throw Error("try statement without catch or finally");
              if (this.prev < se.finallyLoc) return G(se.finallyLoc);
            }
          }
        }
      },
      abrupt: function(O, V) {
        for (var G = this.tryEntries.length - 1; G >= 0; --G) {
          var U = this.tryEntries[G];
          if (U.tryLoc <= this.prev && i.call(U, "finallyLoc") && this.prev < U.finallyLoc) {
            var se = U;
            break;
          }
        }
        se && (O === "break" || O === "continue") && se.tryLoc <= V && V <= se.finallyLoc && (se = null);
        var b = se ? se.completion : {};
        return b.type = O, b.arg = V, se ? (this.method = "next", this.next = se.finallyLoc, m) : this.complete(b);
      },
      complete: function(O, V) {
        if (O.type === "throw") throw O.arg;
        return O.type === "break" || O.type === "continue" ? this.next = O.arg : O.type === "return" ? (this.rval = this.arg = O.arg, this.method = "return", this.next = "end") : O.type === "normal" && V && (this.next = V), m;
      },
      finish: function(O) {
        for (var V = this.tryEntries.length - 1; V >= 0; --V) {
          var G = this.tryEntries[V];
          if (G.finallyLoc === O) return this.complete(G.completion, G.afterLoc), F(G), m;
        }
      },
      catch: function(O) {
        for (var V = this.tryEntries.length - 1; V >= 0; --V) {
          var G = this.tryEntries[V];
          if (G.tryLoc === O) {
            var U = G.completion;
            if (U.type === "throw") {
              var se = U.arg;
              F(G);
            }
            return se;
          }
        }
        throw Error("illegal catch attempt");
      },
      delegateYield: function(O, V, G) {
        return this.delegate = {
          iterator: N(O),
          resultName: V,
          nextLoc: G
        }, this.method === "next" && (this.arg = n), m;
      }
    }, e;
  }
  function R6(n, e, t, i, r, s, o) {
    try {
      var a = n[s](o), l = a.value;
    } catch (c) {
      return void t(c);
    }
    a.done ? e(l) : Promise.resolve(l).then(i, r);
  }
  function LH(n) {
    return function() {
      var e = this, t = arguments;
      return new Promise(function(i, r) {
        var s = n.apply(e, t);
        function o(l) {
          R6(s, i, r, o, a, "next", l);
        }
        function a(l) {
          R6(s, i, r, o, a, "throw", l);
        }
        o(void 0);
      });
    };
  }
  var HH = {
    size: {
      mode: "max",
      value: 512
    },
    objectFit: "cover",
    correctCentering: !1,
    maxTextureSize: 4096,
    debounceTimeout: 500,
    crossOrigin: "anonymous"
  }, m4e = 1;
  function iO(n) {
    var e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, t = e.crossOrigin;
    return new Promise(function(i, r) {
      var s = new Image();
      s.addEventListener("load", function() {
        i(s);
      }, {
        once: !0
      }), s.addEventListener("error", function(o) {
        r(o.error);
      }, {
        once: !0
      }), t && s.setAttribute("crossOrigin", t), s.src = n;
    });
  }
  function b4e(n) {
    return rO.apply(this, arguments);
  }
  function rO() {
    return rO = LH(/* @__PURE__ */ ff().mark(function n(e) {
      var t, i, r, s, o, a, l, c, u, h, d, f, g, p = arguments;
      return ff().wrap(function(v) {
        for (; ; ) switch (v.prev = v.next) {
          case 0:
            if (t = p.length > 1 && p[1] !== void 0 ? p[1] : {}, i = t.size, r = t.crossOrigin, r !== "use-credentials") {
              v.next = 7;
              break;
            }
            return v.next = 4, fetch(e, {
              credentials: "include"
            });
          case 4:
            s = v.sent, v.next = 10;
            break;
          case 7:
            return v.next = 9, fetch(e);
          case 9:
            s = v.sent;
          case 10:
            return v.next = 12, s.text();
          case 12:
            if (o = v.sent, a = new DOMParser().parseFromString(o, "image/svg+xml"), l = a.documentElement, c = l.getAttribute("width"), u = l.getAttribute("height"), !(!c || !u)) {
              v.next = 19;
              break;
            }
            throw new Error("loadSVGImage: cannot use `size` if target SVG has no definite dimensions.");
          case 19:
            return typeof i == "number" && (l.setAttribute("width", "" + i), l.setAttribute("height", "" + i)), h = new XMLSerializer().serializeToString(a), d = new Blob([h], {
              type: "image/svg+xml"
            }), f = URL.createObjectURL(d), g = iO(f), g.finally(function() {
              return URL.revokeObjectURL(f);
            }), v.abrupt("return", g);
          case 26:
          case "end":
            return v.stop();
        }
      }, n);
    })), rO.apply(this, arguments);
  }
  function v4e(n) {
    return sO.apply(this, arguments);
  }
  function sO() {
    return sO = LH(/* @__PURE__ */ ff().mark(function n(e) {
      var t, i, r, s, o, a, l = arguments;
      return ff().wrap(function(u) {
        for (; ; ) switch (u.prev = u.next) {
          case 0:
            if (i = l.length > 1 && l[1] !== void 0 ? l[1] : {}, r = i.size, s = i.crossOrigin, o = ((t = e.split(/[#?]/)[0].split(".").pop()) === null || t === void 0 ? void 0 : t.trim().toLowerCase()) === "svg", !(o && r)) {
              u.next = 16;
              break;
            }
            return u.prev = 3, u.next = 6, b4e(e, {
              size: r,
              crossOrigin: s
            });
          case 6:
            a = u.sent, u.next = 14;
            break;
          case 9:
            return u.prev = 9, u.t0 = u.catch(3), u.next = 13, iO(e, {
              crossOrigin: s
            });
          case 13:
            a = u.sent;
          case 14:
            u.next = 19;
            break;
          case 16:
            return u.next = 18, iO(e, {
              crossOrigin: s
            });
          case 18:
            a = u.sent;
          case 19:
            return u.abrupt("return", a);
          case 20:
          case "end":
            return u.stop();
        }
      }, n, null, [[3, 9]]);
    })), sO.apply(this, arguments);
  }
  function w4e(n, e, t) {
    var i = t.objectFit, r = t.size, s = t.correctCentering, o = i === "contain" ? Math.max(n.width, n.height) : Math.min(n.width, n.height), a = r.mode === "auto" ? o : r.mode === "force" ? r.value : Math.min(r.value, o), l = (n.width - o) / 2, c = (n.height - o) / 2;
    if (s) {
      var u = e.getCorrectionOffset(n, o);
      l = u.x, c = u.y;
    }
    return {
      sourceX: l,
      sourceY: c,
      sourceSize: o,
      destinationSize: a
    };
  }
  function y4e(n, e, t) {
    for (var i = e.canvas, r = i.width, s = i.height, o = [], a = t.x, l = t.y, c = t.rowHeight, u = t.maxRowWidth, h = {}, d = 0, f = n.length; d < f; d++) {
      var g = n[d], p = g.key, m = g.image, v = g.sourceSize, y = g.sourceX, w = g.sourceY, R = g.destinationSize, E = R + m4e;
      l + E > s || a + E > r && l + E + c > s || (a + E > r && (u = Math.max(u, a), a = 0, l += c, c = E), o.push({
        key: p,
        image: m,
        sourceX: y,
        sourceY: w,
        sourceSize: v,
        destinationX: a,
        destinationY: l,
        destinationSize: R
      }), h[p] = {
        x: a,
        y: l,
        size: R
      }, a += E, c = Math.max(c, E));
    }
    u = Math.max(u, a);
    for (var C = u, T = l + c, P = 0, x = o.length; P < x; P++) {
      var A = o[P], D = A.image, B = A.sourceSize, F = A.sourceX, W = A.sourceY, N = A.destinationSize, O = A.destinationX, V = A.destinationY;
      e.drawImage(D, F, W, B, B, O, V, N, N);
    }
    return {
      atlas: h,
      texture: e.getImageData(0, 0, C, T),
      cursor: {
        x: a,
        y: l,
        rowHeight: c,
        maxRowWidth: u
      }
    };
  }
  function C4e(n, e, t) {
    var i = n.atlas, r = n.textures, s = n.cursor, o = {
      atlas: ws({}, i),
      textures: kH(r.slice(0, -1)),
      cursor: ws({}, s)
    }, a = [];
    for (var l in e) {
      var c, u = e[l];
      if (u.status === "ready") {
        var h = (c = i[l]) === null || c === void 0 ? void 0 : c.textureIndex;
        typeof h != "number" && a.push(ws({
          key: l
        }, u));
      }
    }
    for (var d = function() {
      var g = y4e(a, t, o.cursor), p = g.atlas, m = g.texture, v = g.cursor;
      o.cursor = v;
      var y = [];
      a.forEach(function(w) {
        p[w.key] ? o.atlas[w.key] = ws(ws({}, p[w.key]), {}, {
          textureIndex: o.textures.length
        }) : y.push(w);
      }), o.textures.push(m), a = y, a.length && (o.cursor = {
        x: 0,
        y: 0,
        rowHeight: 0,
        maxRowWidth: 0
      }, t.clearRect(0, 0, t.canvas.width, t.canvas.height));
    }; a.length; )
      d();
    return o;
  }
  var S4e = /* @__PURE__ */ function() {
    function n() {
      DH(this, n), this.canvas = document.createElement("canvas"), this.context = this.canvas.getContext("2d", {
        willReadFrequently: !0
      });
    }
    return NH(n, [{
      key: "getCorrectionOffset",
      value: function(t, i) {
        this.canvas.width = i, this.canvas.height = i, this.context.clearRect(0, 0, i, i), this.context.drawImage(t, 0, 0, i, i);
        for (var r = this.context.getImageData(0, 0, i, i).data, s = new Uint8ClampedArray(r.length / 4), o = 0; o < r.length; o++)
          s[o] = r[o * 4 + 3];
        for (var a = 0, l = 0, c = 0, u = 0; u < i; u++)
          for (var h = 0; h < i; h++) {
            var d = s[u * i + h];
            c += d, a += d * h, l += d * u;
          }
        var f = a / c, g = l / c;
        return {
          x: f - i / 2,
          y: g - i / 2
        };
      }
    }]), n;
  }(), jS = /* @__PURE__ */ function(n) {
    eZ(e, n);
    function e() {
      var t, i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      return DH(this, e), t = JX(this, e), rr(jo(t), "canvas", document.createElement("canvas")), rr(jo(t), "ctx", t.canvas.getContext("2d", {
        willReadFrequently: !0
      })), rr(jo(t), "corrector", new S4e()), rr(jo(t), "imageStates", {}), rr(jo(t), "textures", [t.ctx.getImageData(0, 0, 1, 1)]), rr(jo(t), "lastTextureCursor", {
        x: 0,
        y: 0,
        rowHeight: 0,
        maxRowWidth: 0
      }), rr(jo(t), "atlas", {}), t.options = ws(ws({}, HH), i), t.canvas.width = t.options.maxTextureSize, t.canvas.height = t.options.maxTextureSize, t;
    }
    return NH(e, [{
      key: "scheduleGenerateTexture",
      value: function() {
        var i = this;
        typeof this.frameId != "number" && (typeof this.options.debounceTimeout == "number" ? this.frameId = window.setTimeout(function() {
          i.generateTextures(), i.frameId = void 0;
        }, this.options.debounceTimeout) : this.generateTextures());
      }
    }, {
      key: "generateTextures",
      value: function() {
        var i = C4e({
          atlas: this.atlas,
          textures: this.textures,
          cursor: this.lastTextureCursor
        }, this.imageStates, this.ctx), r = i.atlas, s = i.textures, o = i.cursor;
        this.atlas = r, this.textures = s, this.lastTextureCursor = o, this.emit(e.NEW_TEXTURE_EVENT, {
          atlas: r,
          textures: s
        });
      }
      // PUBLIC API:
    }, {
      key: "registerImage",
      value: function() {
        var t = LH(/* @__PURE__ */ ff().mark(function r(s) {
          var o, a;
          return ff().wrap(function(c) {
            for (; ; ) switch (c.prev = c.next) {
              case 0:
                if (!this.imageStates[s]) {
                  c.next = 2;
                  break;
                }
                return c.abrupt("return");
              case 2:
                return this.imageStates[s] = {
                  status: "loading"
                }, c.prev = 3, o = this.options.size, c.next = 7, v4e(s, {
                  size: o.mode === "force" ? o.value : void 0,
                  crossOrigin: this.options.crossOrigin || void 0
                });
              case 7:
                a = c.sent, this.imageStates[s] = ws({
                  status: "ready",
                  image: a
                }, w4e(a, this.corrector, this.options)), this.scheduleGenerateTexture(), c.next = 15;
                break;
              case 12:
                c.prev = 12, c.t0 = c.catch(3), this.imageStates[s] = {
                  status: "error"
                };
              case 15:
              case "end":
                return c.stop();
            }
          }, r, this, [[3, 12]]);
        }));
        function i(r) {
          return t.apply(this, arguments);
        }
        return i;
      }()
    }, {
      key: "getAtlas",
      value: function() {
        return this.atlas;
      }
    }, {
      key: "getTextures",
      value: function() {
        return this.textures;
      }
    }]), e;
  }(SH.EventEmitter);
  rr(jS, "NEW_TEXTURE_EVENT", "newTexture");
  var _4e = ["drawHover", "drawLabel", "drawingMode", "keepWithinCircle", "padding", "colorAttribute", "imageAttribute"], tZ = WebGLRenderingContext, E6 = tZ.UNSIGNED_BYTE, Ob = tZ.FLOAT, R4e = ws(ws({}, HH), {}, {
    drawingMode: "background",
    keepWithinCircle: !0,
    drawLabel: void 0,
    drawHover: void 0,
    padding: 0,
    colorAttribute: "color",
    imageAttribute: "image"
  }), E4e = ["u_sizeRatio", "u_correctionRatio", "u_cameraAngle", "u_percentagePadding", "u_matrix", "u_colorizeImages", "u_keepWithinCircle", "u_atlas"];
  function DR(n) {
    var e, t = document.createElement("canvas").getContext("webgl"), i = Math.min(t.getParameter(t.MAX_TEXTURE_SIZE), HH.maxTextureSize);
    t.canvas.remove();
    var r = ws(ws(ws({}, R4e), {
      maxTextureSize: i
    }), n || {}), s = r.drawHover, o = r.drawLabel, a = r.drawingMode, l = r.keepWithinCircle, c = r.padding, u = r.colorAttribute, h = r.imageAttribute, d = d4e(r, _4e), f = new jS(d);
    return e = /* @__PURE__ */ function(g) {
      eZ(p, g);
      function p(m, v, y) {
        var w;
        return DH(this, p), w = JX(this, p, [m, v, y]), rr(jo(w), "drawLabel", o), rr(jo(w), "drawHover", s), rr(jo(w), "textureManagerCallback", null), w.textureManagerCallback = function(R) {
          var E = R.atlas, C = R.textures, T = C.length !== w.textures.length;
          w.atlas = E, w.textureImages = C, T && w.upgradeShaders(), w.bindTextures(), w.latestRenderParams && w.render(w.latestRenderParams), w.renderer && w.renderer.refresh && w.renderer.refresh();
        }, f.on(jS.NEW_TEXTURE_EVENT, w.textureManagerCallback), w.atlas = f.getAtlas(), w.textureImages = f.getTextures(), w.textures = w.textureImages.map(function() {
          return m.createTexture();
        }), w.bindTextures(), w;
      }
      return NH(p, [{
        key: "getDefinition",
        value: function() {
          return {
            VERTICES: 3,
            VERTEX_SHADER_SOURCE: p4e,
            FRAGMENT_SHADER_SOURCE: f4e({
              texturesCount: f.getTextures().length
            }),
            METHOD: WebGLRenderingContext.TRIANGLES,
            UNIFORMS: E4e,
            ATTRIBUTES: [{
              name: "a_position",
              size: 2,
              type: Ob
            }, {
              name: "a_size",
              size: 1,
              type: Ob
            }, {
              name: "a_color",
              size: 4,
              type: E6,
              normalized: !0
            }, {
              name: "a_id",
              size: 4,
              type: E6,
              normalized: !0
            }, {
              name: "a_texture",
              size: 4,
              type: Ob
            }, {
              name: "a_textureIndex",
              size: 1,
              type: Ob
            }],
            CONSTANT_ATTRIBUTES: [{
              name: "a_angle",
              size: 1,
              type: Ob
            }],
            CONSTANT_DATA: [[p.ANGLE_1], [p.ANGLE_2], [p.ANGLE_3]]
          };
        }
      }, {
        key: "upgradeShaders",
        value: function() {
          var v = this.getDefinition(), y = this.normalProgram, w = y.program, R = y.buffer, E = y.vertexShader, C = y.fragmentShader, T = y.gl;
          T.deleteProgram(w), T.deleteBuffer(R), T.deleteShader(E), T.deleteShader(C), this.normalProgram = this.getProgramInfo("normal", T, v.VERTEX_SHADER_SOURCE, v.FRAGMENT_SHADER_SOURCE, null);
        }
      }, {
        key: "kill",
        value: function() {
          var v, y = (v = this.normalProgram) === null || v === void 0 ? void 0 : v.gl;
          if (y)
            for (var w = 0; w < this.textures.length; w++)
              y.deleteTexture(this.textures[w]);
          this.textureManagerCallback && (f.off(jS.NEW_TEXTURE_EVENT, this.textureManagerCallback), this.textureManagerCallback = null), S6(p, "kill", this)([]);
        }
      }, {
        key: "bindTextures",
        value: function() {
          for (var v = this.normalProgram.gl, y = 0; y < this.textureImages.length; y++) {
            if (y >= this.textures.length) {
              var w = v.createTexture();
              w && this.textures.push(w);
            }
            v.activeTexture(v.TEXTURE0 + y), v.bindTexture(v.TEXTURE_2D, this.textures[y]), v.texImage2D(v.TEXTURE_2D, 0, v.RGBA, v.RGBA, v.UNSIGNED_BYTE, this.textureImages[y]), v.generateMipmap(v.TEXTURE_2D);
          }
        }
      }, {
        key: "renderProgram",
        value: function(v, y) {
          if (!y.isPicking)
            for (var w = y.gl, R = 0; R < this.textureImages.length; R++)
              w.activeTexture(w.TEXTURE0 + R), w.bindTexture(w.TEXTURE_2D, this.textures[R]);
          S6(p, "renderProgram", this)([v, y]);
        }
      }, {
        key: "processVisibleItem",
        value: function(v, y, w) {
          var R = this.array, E = lm(w[u]), C = w[h], T = C ? this.atlas[C] : void 0;
          if (typeof C == "string" && !T && f.registerImage(C), R[y++] = w.x, R[y++] = w.y, R[y++] = w.size, R[y++] = E, R[y++] = v, T && typeof T.textureIndex == "number") {
            var P = this.textureImages[T.textureIndex], x = P.width, A = P.height;
            R[y++] = T.x / x, R[y++] = T.y / A, R[y++] = T.size / x, R[y++] = T.size / A, R[y++] = T.textureIndex;
          } else
            R[y++] = 0, R[y++] = 0, R[y++] = 0, R[y++] = 0, R[y++] = 0;
        }
      }, {
        key: "setUniforms",
        value: function(v, y) {
          var w = y.gl, R = y.uniformLocations, E = R.u_sizeRatio, C = R.u_correctionRatio, T = R.u_matrix, P = R.u_atlas, x = R.u_colorizeImages, A = R.u_keepWithinCircle, D = R.u_cameraAngle, B = R.u_percentagePadding;
          this.latestRenderParams = v, w.uniform1f(C, v.correctionRatio), w.uniform1f(E, l ? v.sizeRatio : v.sizeRatio / Math.SQRT2), w.uniform1f(D, v.cameraAngle), w.uniform1f(B, c), w.uniformMatrix3fv(T, !1, v.matrix), w.uniform1iv(P, kH(new Array(this.textureImages.length)).map(function(F, W) {
            return W;
          })), w.uniform1i(x, a === "color" ? 1 : 0), w.uniform1i(A, l ? 1 : 0);
        }
      }]), p;
    }(LX), rr(e, "ANGLE_1", 0), rr(e, "ANGLE_2", 2 * Math.PI / 3), rr(e, "ANGLE_3", 4 * Math.PI / 3), rr(e, "textureManager", f), e;
  }
  DR();
  DR({
    keepWithinCircle: !1,
    size: {
      mode: "force",
      value: 256
    },
    drawingMode: "color",
    correctCentering: !0
  });
  const x6 = "#000000";
  class x4e {
    constructor() {
      this.typeColorMap = {}, this.currentIndex = 0;
    }
    /**
     * Generates a dynamic color based on the input number using the Golden Angle.
     * @param {number} number - The input number to generate color.
     * @returns {string} - The generated color in HSL format.
     */
    getDynamicColor(e) {
      const i = e * 137.508 % 360;
      return this.hslToRgb(i, 70, 50);
    }
    /**
     * Returns a color for the given string. If the string is already mapped, returns the existing color.
     * Otherwise, generates a new color, maps it to the string, and returns the new color.
     * @param {string} str - The input string to get the color for.
     * @returns {string} - The color associated with the input string.
     */
    getColor(e) {
      if (this.typeColorMap.hasOwnProperty(e))
        return this.typeColorMap[e];
      {
        const t = this.getDynamicColor(this.currentIndex);
        return this.typeColorMap[e] = t, this.currentIndex++, t;
      }
    }
    /**
     * Converts HSL color values to RGB hexadecimal format.
     *
     * @param {number} h - Hue value in degrees [0, 360).
     * @param {number} s - Saturation percentage [0, 100].
     * @param {number} l - Lightness percentage [0, 100].
     * @returns {string} - RGB color in hexadecimal format (e.g., "#FF00FF").
     */
    hslToRgb(e, t, i) {
      t /= 100, i /= 100;
      const r = (1 - Math.abs(2 * i - 1)) * t, s = r * (1 - Math.abs(e / 60 % 2 - 1)), o = i - r / 2;
      let a, l, c;
      e >= 0 && e < 60 ? (a = r, l = s, c = 0) : e >= 60 && e < 120 ? (a = s, l = r, c = 0) : e >= 120 && e < 180 ? (a = 0, l = r, c = s) : e >= 180 && e < 240 ? (a = 0, l = s, c = r) : e >= 240 && e < 300 ? (a = s, l = 0, c = r) : (a = r, l = 0, c = s);
      const u = Math.round((a + o) * 255), h = Math.round((l + o) * 255), d = Math.round((c + o) * 255), f = (g) => {
        const p = g.toString(16);
        return p.length === 1 ? "0" + p : p;
      };
      return `#${f(u)}${f(h)}${f(d)}`.toUpperCase();
    }
    /**
     * Parses an HSL string and converts it to RGB hexadecimal format.
     *
     * @param {string} hslString - HSL color string (e.g., "hsl(300, 70%, 50%)").
     * @returns {string} - RGB color in hexadecimal format (e.g., "#FF00FF").
     */
    hslStringToHex(e) {
      const i = /hsl\(\s*(\d+),\s*(\d+)%,\s*(\d+)%\s*\)/i.exec(e);
      if (!i)
        throw new Error("Invalid HSL string format. Expected format: 'hsl(h, s%, l%)'");
      const r = parseInt(i[1], 10), s = parseInt(i[2], 10), o = parseInt(i[3], 10);
      return this.hslToRgb(r, s, o);
    }
    /**
     * Returns a color based on the relationship value.
     * -1 -> Pastel Blue (#ADD8E6)
     *  0 -> Gray (#808080)
     *  1 -> Pastel Red (#FFB6C1)
     * Smoothly transitions between these colors for values between -1 and 1.
     *
     * @param {string} relationship - The relationship value as a string.
     * @returns {string} - The corresponding color in hexadecimal format.
     */
    getRelationshipColor(e) {
      const t = parseFloat(e);
      if (isNaN(t) || t < -1 || t > 1)
        return "#808080";
      let i, r, s;
      if (t < 0) {
        const o = Math.abs(t);
        i = 200 - 200 * o, r = 100 - 100 * o, s = 80 - 30 * o;
      } else if (t > 0) {
        const o = t;
        i = 0, r = 0 + 100 * o, s = 50 + 30 * o;
      } else
        return "#808080";
      return this.hslToRgb(i, r, s);
    }
  }
  function T4e(n, e, t, i, r, s) {
    n.beginPath(), n.moveTo(e + s, t), n.lineTo(e + i - s, t), n.quadraticCurveTo(e + i, t, e + i, t + s), n.lineTo(e + i, t + r - s), n.quadraticCurveTo(e + i, t + r, e + i - s, t + r), n.lineTo(e + s, t + r), n.quadraticCurveTo(e, t + r, e, t + r - s), n.lineTo(e, t + s), n.quadraticCurveTo(e, t, e + s, t), n.closePath();
  }
  function fA(n, e) {
    const t = parseFloat(n);
    return !isNaN(t) && t >= -1 && t <= 1 ? Math.abs(t) * e : e;
  }
  var nZ;
  let iZ, rZ, sZ, oZ, aZ, lZ, cZ;
  function M4e(n, e, t, i, r, s) {
    var o, a, l, c, u, h, d, f = Symbol.metadata || Symbol.for("Symbol.metadata"), g = Object.defineProperty, p = Object.create, m = [p(null), p(null)], v = e.length;
    function y(C, T, P) {
      return function(x, A) {
        T && (A = x, x = n);
        for (var D = 0; D < C.length; D++) A = C[D].apply(x, P ? [A] : []);
        return P ? A : x;
      };
    }
    function w(C, T, P, x) {
      if (typeof C != "function" && (x || C !== void 0)) throw new TypeError(T + " must " + (P || "be") + " a function" + (x ? "" : " or undefined"));
      return C;
    }
    function R(C, T, P, x, A, D, B, F, W, N, O) {
      function V(ee) {
        if (!O(ee)) throw new TypeError("Attempted to access private element on non-instance");
      }
      var G = [].concat(T[0]), U = T[3], se = !B, b = A === 1, S = A === 3, _ = A === 4, I = A === 2;
      function H(ee, ae, Ne) {
        return function(fe, ye) {
          return ae && (ye = fe, fe = C), Ne && Ne(fe), M[ee].call(fe, ye);
        };
      }
      if (!se) {
        var M = {}, $ = [], Y = S ? "get" : _ || b ? "set" : "value";
        if (W ? (N || b ? M = { get: T6(function() {
          return U(this);
        }, x, "get"), set: function(ee) {
          T[4](this, ee);
        } } : M[Y] = U, N || T6(M[Y], x, I ? "" : Y)) : N || (M = Object.getOwnPropertyDescriptor(C, x)), !N && !W) {
          if ((a = m[+F][x]) && (a ^ A) != 7) throw Error("Decorating two elements with the same name (" + M[Y].name + ") is not supported yet");
          m[+F][x] = A < 3 ? 1 : A;
        }
      }
      for (var K = C, ce = G.length - 1; ce >= 0; ce -= P ? 2 : 1) {
        var le = w(G[ce], "A decorator", "be", !0), _e = P ? G[ce - 1] : void 0, be = {}, Z = { kind: ["field", "accessor", "method", "getter", "setter", "class"][A], name: x, metadata: o, addInitializer: (function(ee, ae) {
          if (ee.v) throw new TypeError("attempted to call addInitializer after decoration was finished");
          w(ae, "An initializer", "be", !0), D.push(ae);
        }).bind(null, be) };
        if (se) a = le.call(_e, K, Z), be.v = 1, w(a, "class decorators", "return") && (K = a);
        else if (Z.static = F, Z.private = W, a = Z.access = { has: W ? O.bind() : function(ee) {
          return x in ee;
        } }, _ || (a.get = W ? I ? function(ee) {
          return V(ee), M.value;
        } : H("get", 0, V) : function(ee) {
          return ee[x];
        }), I || S || (a.set = W ? H("set", 0, V) : function(ee, ae) {
          ee[x] = ae;
        }), K = le.call(_e, b ? { get: M.get, set: M.set } : M[Y], Z), be.v = 1, b) {
          if (typeof K == "object" && K) (a = w(K.get, "accessor.get")) && (M.get = a), (a = w(K.set, "accessor.set")) && (M.set = a), (a = w(K.init, "accessor.init")) && $.unshift(a);
          else if (K !== void 0) throw new TypeError("accessor decorators must return an object with get, set, or init properties or undefined");
        } else w(K, (N ? "field" : "method") + " decorators", "return") && (N ? $.unshift(K) : M[Y] = K);
      }
      return A < 2 && B.push(y($, F, 1), y(D, F, 0)), N || se || (W ? b ? B.splice(-1, 0, H("get", F), H("set", F)) : B.push(I ? M[Y] : w.call.bind(M[Y])) : g(C, x, M)), K;
    }
    function E(C) {
      return g(C, f, { configurable: !0, enumerable: !0, value: o });
    }
    return o = p(o ?? null), u = [], h = function(C) {
      C && u.push(y(C));
    }, d = function(C, T) {
      for (var P = 0; P < t.length; P++) {
        var x = t[P], A = x[1], D = 7 & A;
        if ((8 & A) == C && !D == T) {
          var B = x[2], F = !!x[3], W = 16 & A;
          R(C ? n : n.prototype, x, W, F ? "#" + B : A4e(B), D, D < 2 ? [] : C ? c = c || [] : l = l || [], u, !!C, F, T, C && F ? function(N) {
            return I4e(N) === n;
          } : r);
        }
      }
    }, d(8, 0), d(0, 0), d(8, 1), d(0, 1), h(l), h(c), a = u, v || E(n), { e: a, get c() {
      var C = [];
      return v && [E(n = R(n, [e], i, n.name, 5, C)), y(C, 1)];
    } };
  }
  function A4e(n) {
    var e = P4e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function P4e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function T6(n, e, t) {
    typeof e == "symbol" && (e = (e = e.description) ? "[" + e + "]" : "");
    try {
      Object.defineProperty(n, "name", { configurable: !0, value: t ? t + " " + e : e });
    } catch {
    }
    return n;
  }
  function I4e(n) {
    if (Object(n) !== n) throw TypeError("right-hand side of 'in' should be an object, got " + (n !== null ? typeof n : "null"));
    return n;
  }
  let uZ;
  class O4e {
    constructor() {
      this.ea = ge(dO), this.container = void 0, this.searchinput = void 0, this.animationstarted = !0, this.tabid = rZ(this), this.datachannel = (sZ(this), oZ(this)), this.searchValue = (aZ(this), lZ(this)), this.state = (cZ(this), {
        searchQuery: ""
      });
    }
    searchValueChanged(e, t) {
      console.log("searchValue changed", e, t), this.setSearchQuery(e);
    }
    attached() {
      this.typeColorMap = new x4e(), this.ea.subscribe("showtab", (e) => {
        this.tabid === this.showtabid && (this.layout ? this.startAnimate() : (console.warn("empty layout"), this.renderer = new w6(this.graph, this.container, {
          // We don't have to declare edgeProgramClasses here, because we only use the default ones ("line" and "arrow")
          nodeProgramClasses: {
            image: DR()
            //gradient: NodeGradientProgram,
          },
          renderEdgeLabels: !0,
          allowInvalidContainer: !0
        }), this.layout = new C6(this.graph), this.startAnimate()));
      }), this.datachannel ? this.ea.subscribe(this.datachannel, (e) => {
        console.log("network received data:", e), Array.isArray(e) ? this.transformDataToGraph(e) : (this.layout && this.stopAnimate(), e.type == "changeNode" ? (console.log("network changeNode"), this.renameNode(e.old, e.value)) : e.type == "changeType" ? (console.log("network changeType"), this.changeNodeType(e.node, e.value)) : e.type == "changeEdge" ? (console.log("network changeEdge"), this.updateEdge(e.subject, e.object, e.value)) : console.warn("not recognized change", e), this.layout && this.startAnimate());
      }) : console.warn("datachannel empty"), this.data = [], this.transformDataToGraph(this.data);
    }
    // Actions:
    setSearchQuery(e) {
      if (this.state.searchQuery = e, this.searchValue !== e && (this.searchValue = e), e) {
        const t = e.toLowerCase(), i = this.graph.nodes().map((r) => ({
          id: r,
          label: this.graph.getNodeAttribute(r, "label")
        })).filter(({
          label: r
        }) => r.toLowerCase().includes(t));
        if (i.length === 1 && i[0].label === e) {
          this.state.selectedNode = i[0].id, this.state.suggestions = void 0;
          const r = this.renderer.getNodeDisplayData(state.selectedNode);
          this.renderer.getCamera().animate(r, {
            duration: 500
          });
        } else
          this.state.selectedNode = void 0, this.state.suggestions = new Set(i.map(({
            id: r
          }) => r));
      } else
        this.state.selectedNode = void 0, this.state.suggestions = void 0;
      this.renderer.refresh({
        skipIndexation: !0
      });
    }
    setHoveredNode(e) {
      e && (this.state.hoveredNode = e, this.state.hoveredNeighbors = new Set(this.graph.neighbors(e))), e || (this.state.hoveredNode = void 0, this.state.hoveredNeighbors = void 0), this.renderer.refresh({
        // We don't touch the graph data so we can skip its reindexation
        skipIndexation: !0
      });
    }
    changeNodeType(e, t) {
      const i = this.typeColorMap.getColor(t);
      if (!this.graph.hasNode(e)) {
        console.log(`Node "${e}" does not exist. Creating.`);
        const r = this.graph.order * 2 * Math.PI / this.graph.order;
        this.graph.addNode(e, {
          label: e,
          size: 15,
          color: i,
          // Default color for objects without a type
          // type: 'object' // Optional: Define type as 'object'
          x: 100 * Math.cos(r),
          y: 100 * Math.sin(r)
        });
      }
      this.graph.setNodeAttribute(e, "color", i), this.graph.setNodeAttribute(e, "subjectType", t);
    }
    renameNode(e, t) {
      if (!e) {
        console.log("oldname is null create Node"), this.changeNodeType(t, "default");
        return;
      }
      if (!this.graph.hasNode(e)) {
        console.error(`Node "${e}" does not exist.`);
        return;
      }
      if (this.graph.hasNode(t)) {
        console.error(`Node "${t}" already exists.`);
        return;
      }
      const i = this.graph.getNodeAttributes(e);
      i.label = t, this.graph.addNode(t, i), this.graph.forEachEdge(e, (r, s, o, a) => {
        const l = o === e ? a : o;
        this.graph.addEdge(t, l, s);
      }), this.graph.dropNode(e);
    }
    /**
     * Updates or removes an edge based on the provided value.
     *
     * @param {string} subject - The source node identifier.
     * @param {string} object - The target node identifier.
     * @param {string|number} value - The value to determine the action.
     */
    updateEdge(e, t, i) {
      if (!i || i == 0) {
        this.graph.hasEdge(e, t) && this.graph.dropEdge(e, t), console.log(`Edge between "${e}" and "${t}" has been removed.`);
        return;
      }
      this.graph.hasEdge(e, t) ? (this.graph.setEdgeAttribute(e, t, "label", i), this.graph.setEdgeAttribute(e, t, "size", 1 + fA(i, 5)), console.log(`Edge between "${e}" and "${t}" updated with label: "${i}".`)) : i !== "" && i !== 0 ? (this.graph.addEdge(e, t, {
        relationship: "related",
        type: "line",
        label: i,
        size: 1 + fA(i, 5)
      }), console.log(`Edge between "${e}" and "${t}" has been added with label: "${i}".`)) : console.warn(`Edge between "${e}" and "${t}" does not exist and no action was taken.`);
    }
    showgraph() {
      console.log("showgraph()"), this.renderer = new w6(this.graph, this.container, {
        // We don't have to declare edgeProgramClasses here, because we only use the default ones ("line" and "arrow")
        nodeProgramClasses: {
          image: DR()
          //gradient: NodeGradientProgram,
        },
        renderEdgeLabels: !0,
        allowInvalidContainer: !0
      }), this.renderer.on("enterNode", ({
        node: e
      }) => {
        this.setHoveredNode(e);
      }), this.renderer.on("leaveNode", () => {
        this.setHoveredNode(void 0);
      }), this.renderer.setSetting("defaultDrawNodeHover", (e, t, i) => {
        const r = i.labelSize, s = i.labelFont, o = i.labelWeight, a = r - 2, l = t.label, c = t.clusterLabel, u = t.tag !== "unknown" ? t.tag : "";
        e.beginPath(), e.fillStyle = "#fff", e.shadowOffsetX = 0, e.shadowOffsetY = 2, e.shadowBlur = 8, e.shadowColor = "#000", e.font = `${o} ${r}px ${s}`;
        const h = e.measureText(l).width;
        e.font = `${o} ${a}px ${s}`;
        const d = c ? e.measureText(c).width : 0;
        e.font = `${o} ${a}px ${s}`;
        const f = u ? e.measureText(u).width : 0, g = Math.max(h, d, f), p = Math.round(t.x), m = Math.round(t.y), v = Math.round(g + r / 2 + t.size + 3), y = Math.round(r / 2 + 4), w = c ? Math.round(a / 2 + 9) : 0, R = Math.round(a / 2 + 9);
        T4e(e, p, m - w - 12, v, R + y + w + 12, 5), e.closePath(), e.fill(), e.shadowOffsetX = 0, e.shadowOffsetY = 0, e.shadowBlur = 0, e.fillStyle = x6, e.font = `${o} ${r}px ${s}`, e.fillText(l, t.x + t.size + 3, t.y + r / 3), c && (e.fillStyle = x6, e.font = `${o} ${a}px ${s}`, e.fillText(c, t.x + t.size + 3, t.y - 2 * r / 3 - 2)), e.fillStyle = t.color, e.font = `${o} ${a}px ${s}`, e.fillText(u, t.x + t.size + 3, t.y + r / 3 + 3 + a);
      }), this.renderer.setSetting("nodeReducer", (e, t) => {
        const i = {
          ...t
        };
        return this.state.hoveredNeighbors && !this.state.hoveredNeighbors.has(e) && this.state.hoveredNode !== e && (i.label = "", i.color = "#f6f6f6"), this.state.selectedNode === e ? i.highlighted = !0 : this.state.suggestions && (this.state.suggestions.has(e) ? i.forceLabel = !0 : (i.label = "", i.color = "#f6f6f6")), i;
      }), this.renderer.setSetting("edgeReducer", (e, t) => {
        const i = {
          ...t
        };
        return this.state.hoveredNode && !this.graph.extremities(e).every((r) => r === this.state.hoveredNode || this.graph.areNeighbors(r, this.state.hoveredNode)) && (i.hidden = !0), this.state.suggestions && (!this.state.suggestions.has(this.graph.source(e)) || !this.state.suggestions.has(this.graph.target(e))) && (i.hidden = !0), i;
      }), this.layout = new C6(this.graph, {
        maxIterations: 50,
        settings: {
          gravity: 6e-4,
          // ?number 0.0001: importance of the gravity force, that attracts all nodes to the center.
          attraction: 5e-4,
          //?number 0.0005: importance of the attraction force, that attracts each pair of connected nodes like elastics.
          repulsion: 0.1,
          //0.1 importance of the repulsion force, that attracts each pair of nodes like magnets.
          inertia: 0.4,
          // ?number 0.6: percentage of a node vector displacement that is preserved at each step. 0 means no inertia, 1 means no friction.
          maxMove: 5
          //200 ?number 200: Maximum length a node can travel at each step, in pixel.
        }
      }), this.startAnimate();
    }
    /**
    * Transforms a data array into a Graphology graph.
    * @returns {Graph} - The resulting Graphology graph.
    */
    transformDataToGraph(e) {
      this.graph ? this.graph.clearEdges() : this.graph = new an({
        type: "undirected"
      }), this.layout && this.stopAnimate(), e.length == 0 && (e = [["Gene", "Type", "CEA", "CA19_9", "Tumor Size", "Metabolic Activity", "ctDNA", "CRP", "Bowel MovementPatterns", "Ki-67", "Cascpase-3", "MMP-1", "Cell Proliferation"], ["APC", "Tumor suppressor gene", 0.8, 0.3, 0.9, 0.7, 0.6, 0.2, 0.1, 0.9, -0.6, -0.7, 0.9], ["KRAS", "Kirsten Rat Sarcoma Viral Oncogene Homolog", 0.7, 0.4, 0.8, 0.6, 0.5, 0.3, 0, 0.8, -0.5, 0.2, 0.8], ["TP53", "Tumor Protein 53", 0.6, 0.2, 0.7, 0.5, 0.4, 0.4, 0.1, 0.7, 0.9, -0.4, 0.7], ["MLH1", "Mismatch Repair gene", 0.5, 0.3, 0.6, 0.4, 0.7, 0.5, 0.2, 0.6, 0.7, -0.3, 0.6], ["MSH2", "Mismatch Repair gene", 0.5, 0.3, 0.6, 0.4, 0.7, 0.5, 0.2, 0.6, 0.7, -0.3, 0.6], ["BRAF", "Oncogene MAPK/ERK signaling pathway", 0.4, 0.5, 0.5, 0.8, 0.3, 0.3, 0, 0.5, -0.2, 0.5, 0.5], ["SMAD4", "Tumor suppressor gene", 0.3, 0.2, 0.4, 0.3, 0.2, 0.4, 0.1, 0.4, 0.6, -0.5, 0.4], ["PIK3CA", "Oncogene", 0.6, 0.4, 0.7, 0.6, 0.5, 0.3, 0, 0.7, -0.4, 0.3, 0.7], ["NRAS", "Oncogene", 0.4, 0.3, 0.5, 0.5, 0.4, 0.2, 0.1, 0.5, -0.3, 0.2, 0.5], ["CTNNB1", "Cell adhesion signaling pathway", 0.3, 0.2, 0.4, 0.3, 0.3, 0.1, 0, 0.4, -0.2, -0.1, 0.4], ["FBXW7", "Tumor suppressor gene", 0.2, 0.1, 0.3, 0.2, 0.2, 0.3, 0.1, 0.3, 0.5, -0.4, 0.3]]);
      const t = e[0], i = t.slice(2);
      for (let r = 0; r < i.length; r++) {
        const s = i[r];
        if (!this.graph.hasNode(s)) {
          let o = r * 2 * Math.PI / (e.length + i.length);
          this.graph.addNode(s, {
            label: s,
            tag: "object",
            clusterLabel: "feature",
            size: 15,
            color: "orange",
            // Default color for objects without a type
            // type: 'object' // Optional: Define type as 'object'
            x: 100 * Math.cos(o),
            y: 100 * Math.sin(o)
          });
        }
      }
      for (let r = 1; r < e.length; r++) {
        const s = e[r], o = s[0], a = s[1], l = this.typeColorMap.getColor(a);
        let c = (r + i.length) * 2 * Math.PI / (e.length + i.length);
        this.graph.hasNode(o) || this.graph.addNode(o, {
          label: o,
          tag: a,
          clusterLabel: "gene",
          size: 7,
          color: l,
          subjectType: a,
          x: 100 * Math.cos(c),
          y: 100 * Math.sin(c)
        });
        for (let u = 2; u < t.length; u++) {
          const h = t[u], d = s[u];
          if (d && d != 0) {
            const f = `${o}-${h}`;
            this.graph.hasEdge(f) || this.graph.addEdge(o, h, {
              relationship: "related",
              // You can customize this as needed
              type: "line",
              label: d,
              size: 1 + fA(d, 5),
              color: "lightgrey"
              //this.typeColorMap.getRelationshipColor(relationship)
            });
          }
        }
      }
      this.layout ? (console.log("layout detected, stop(), start()"), this.startAnimate()) : (console.log("no layout showgraph()"), this.showgraph());
    }
    layoutOnOff() {
      this.animationstarted = !this.animationstarted, this.animationstarted ? this.layout.start() : this.layout.stop();
    }
    stopAnimate() {
      this.layout.stop();
    }
    startAnimate() {
      this.animationstarted && this.layout.start();
    }
    //set x,y points to circle
    resetLayout() {
      const e = this.graph.nodes(), t = e.length;
      e.forEach((i, r) => {
        const s = r * 2 * Math.PI / t;
        this.graph.setNodeAttribute(i, "x", 100 * Math.cos(s)), this.graph.setNodeAttribute(i, "y", 100 * Math.sin(s));
      });
    }
  }
  nZ = O4e;
  ({
    e: [rZ, sZ, oZ, aZ, lZ, cZ],
    c: [uZ, iZ]
  } = M4e(nZ, [Lc({
    ...r5e,
    name: "sv-network"
  })], [[Qr, 0, "tabid"], [Qr, 0, "datachannel"], [Qr, 0, "searchValue"]]));
  iZ();
  const hZ = "table-network", oO = `<sv-tabs idlist="view,source,nodes,edges,noedtable" titlelist="View,Source,Nodes,Edges,N&E"
    style="position:relative;z-index:1;width:50%;display:block"></sv-tabs>
<sv-network tabid="visual" datachannel="data" style="width:100vw;height:100vh;position:fixed;top:0;left:0"></sv-network>    
<div id="view" style="position:absolute;opacity:80%;z-index:1;background-color: white;">
    <au-slot></au-slot>
</div>
<div id="source" style="position:absolute;height:90vh;opacity:90%;z-index:1">    
   <sv-pdf-uploader></sv-pdf-uploader>   
</div>
<div id="nodes" style="position:absolute;height:90vh;opacity:90%;z-index:1">
    <sv-table component.ref="svNodes" datachannel="data" datatype="nodes" tabid="nodes"></sv-table>
</div>
<div id="edges" style="position:absolute;height:90vh;opacity:90%;z-index:1">
    <sv-table-filtered component.ref="svEdges" datachannel="data" datatype="edges" tabid="edges"></sv-table-filtered>
</div>
<div id="noedtable" style="position:absolute;height:90vh;opacity:90%;z-index:1">
    <sv-table component.ref="svTable" datachannel="data" tabid="noedtable"></sv-table>
</div>

<!--style="width:100vw;height:100vh;position:fixed;top:0;left:0"-->
`, dZ = [], fZ = {};
  let gA;
  function k4e(n) {
    gA || (gA = Li.define({ name: hZ, template: oO, dependencies: dZ, bindables: fZ })), n.register(gA);
  }
  const D4e = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    bindables: fZ,
    default: oO,
    dependencies: dZ,
    name: hZ,
    register: k4e,
    template: oO
  }, Symbol.toStringTag, { value: "Module" }));
  var gZ;
  let pZ;
  function N4e(n, e, t, i, r, s) {
    var o, a, l, c, u, h, d, f = Symbol.metadata || Symbol.for("Symbol.metadata"), g = Object.defineProperty, p = Object.create, m = [p(null), p(null)], v = e.length;
    function y(C, T, P) {
      return function(x, A) {
        T && (A = x, x = n);
        for (var D = 0; D < C.length; D++) A = C[D].apply(x, P ? [A] : []);
        return P ? A : x;
      };
    }
    function w(C, T, P, x) {
      if (typeof C != "function" && (x || C !== void 0)) throw new TypeError(T + " must " + (P || "be") + " a function" + (x ? "" : " or undefined"));
      return C;
    }
    function R(C, T, P, x, A, D, B, F, W, N, O) {
      function V(ee) {
        if (!O(ee)) throw new TypeError("Attempted to access private element on non-instance");
      }
      var G = [].concat(T[0]), U = T[3], se = !B, b = A === 1, S = A === 3, _ = A === 4, I = A === 2;
      function H(ee, ae, Ne) {
        return function(fe, ye) {
          return ae && (ye = fe, fe = C), Ne && Ne(fe), M[ee].call(fe, ye);
        };
      }
      if (!se) {
        var M = {}, $ = [], Y = S ? "get" : _ || b ? "set" : "value";
        if (W ? (N || b ? M = { get: M6(function() {
          return U(this);
        }, x, "get"), set: function(ee) {
          T[4](this, ee);
        } } : M[Y] = U, N || M6(M[Y], x, I ? "" : Y)) : N || (M = Object.getOwnPropertyDescriptor(C, x)), !N && !W) {
          if ((a = m[+F][x]) && (a ^ A) != 7) throw Error("Decorating two elements with the same name (" + M[Y].name + ") is not supported yet");
          m[+F][x] = A < 3 ? 1 : A;
        }
      }
      for (var K = C, ce = G.length - 1; ce >= 0; ce -= P ? 2 : 1) {
        var le = w(G[ce], "A decorator", "be", !0), _e = P ? G[ce - 1] : void 0, be = {}, Z = { kind: ["field", "accessor", "method", "getter", "setter", "class"][A], name: x, metadata: o, addInitializer: (function(ee, ae) {
          if (ee.v) throw new TypeError("attempted to call addInitializer after decoration was finished");
          w(ae, "An initializer", "be", !0), D.push(ae);
        }).bind(null, be) };
        if (se) a = le.call(_e, K, Z), be.v = 1, w(a, "class decorators", "return") && (K = a);
        else if (Z.static = F, Z.private = W, a = Z.access = { has: W ? O.bind() : function(ee) {
          return x in ee;
        } }, _ || (a.get = W ? I ? function(ee) {
          return V(ee), M.value;
        } : H("get", 0, V) : function(ee) {
          return ee[x];
        }), I || S || (a.set = W ? H("set", 0, V) : function(ee, ae) {
          ee[x] = ae;
        }), K = le.call(_e, b ? { get: M.get, set: M.set } : M[Y], Z), be.v = 1, b) {
          if (typeof K == "object" && K) (a = w(K.get, "accessor.get")) && (M.get = a), (a = w(K.set, "accessor.set")) && (M.set = a), (a = w(K.init, "accessor.init")) && $.unshift(a);
          else if (K !== void 0) throw new TypeError("accessor decorators must return an object with get, set, or init properties or undefined");
        } else w(K, (N ? "field" : "method") + " decorators", "return") && (N ? $.unshift(K) : M[Y] = K);
      }
      return A < 2 && B.push(y($, F, 1), y(D, F, 0)), N || se || (W ? b ? B.splice(-1, 0, H("get", F), H("set", F)) : B.push(I ? M[Y] : w.call.bind(M[Y])) : g(C, x, M)), K;
    }
    function E(C) {
      return g(C, f, { configurable: !0, enumerable: !0, value: o });
    }
    return o = p(o ?? null), u = [], h = function(C) {
      C && u.push(y(C));
    }, d = function(C, T) {
      for (var P = 0; P < t.length; P++) {
        var x = t[P], A = x[1], D = 7 & A;
        if ((8 & A) == C && !D == T) {
          var B = x[2], F = !!x[3], W = 16 & A;
          R(C ? n : n.prototype, x, W, F ? "#" + B : L4e(B), D, D < 2 ? [] : C ? c = c || [] : l = l || [], u, !!C, F, T, C && F ? function(N) {
            return $4e(N) === n;
          } : r);
        }
      }
    }, d(8, 0), d(0, 0), d(8, 1), d(0, 1), h(l), h(c), a = u, v || E(n), { e: a, get c() {
      var C = [];
      return v && [E(n = R(n, [e], i, n.name, 5, C)), y(C, 1)];
    } };
  }
  function L4e(n) {
    var e = H4e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function H4e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function M6(n, e, t) {
    typeof e == "symbol" && (e = (e = e.description) ? "[" + e + "]" : "");
    try {
      Object.defineProperty(n, "name", { configurable: !0, value: t ? t + " " + e : e });
    } catch {
    }
    return n;
  }
  function $4e(n) {
    if (Object(n) !== n) throw TypeError("right-hand side of 'in' should be an object, got " + (n !== null ? typeof n : "null"));
    return n;
  }
  let mZ;
  class F4e {
    constructor() {
      this.hidetable = !1, this.svTable = void 0, this.svEdges = void 0, this.svNodes = void 0;
    }
    attached() {
      console.log("table-network attached()");
    }
    showHide() {
    }
    showHideTable() {
      this.hidetable = !this.hidetable;
    }
    /**
     * Method triggered by the button to add a row.
     * Delegates the call to the sv-table component's addRow() method.
     */
    addRow() {
      this.svTable && typeof this.svTable.addRow == "function" ? this.svTable.addRow() : console.warn("svTable reference is not available or addRow method is undefined.", this.svTable);
    }
    addColumn() {
      this.svTable && typeof this.svTable.addColumn == "function" ? this.svTable.addColumn() : console.warn("svTable reference is not available or addColumn method is undefined.", this.svTable);
    }
  }
  gZ = F4e;
  [mZ, pZ] = N4e(gZ, [Lc({
    ...D4e,
    name: "sv-table-network"
  })], []).c;
  pZ();
  const bZ = "tabs", aO = `    <div class="w3-bar" if.bind="!vertical">
        <button class.bind="inactiveclass" style="width:145px">&nbsp;</button>
        <button repeat.for="id of ids" class.bind="id.cls" click.trigger="open(id)">\${id.title}</button>
    </div>
    <nav class="w3-bar-block" style="width:50px;float:left" if.bind="vertical">
        <button repeat.for="id of ids" class.bind="id.cls" click.trigger="open(id)">\${id.title}</button>
    </nav>
`, vZ = [], wZ = {};
  let pA;
  function B4e(n) {
    pA || (pA = Li.define({ name: bZ, template: aO, dependencies: vZ, bindables: wZ })), n.register(pA);
  }
  const V4e = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    bindables: wZ,
    default: aO,
    dependencies: vZ,
    name: bZ,
    register: B4e,
    template: aO
  }, Symbol.toStringTag, { value: "Module" }));
  var yZ;
  let CZ, SZ, _Z, RZ, EZ, xZ, TZ, MZ, AZ, PZ, IZ;
  function W4e(n, e, t, i, r, s) {
    var o, a, l, c, u, h, d, f = Symbol.metadata || Symbol.for("Symbol.metadata"), g = Object.defineProperty, p = Object.create, m = [p(null), p(null)], v = e.length;
    function y(C, T, P) {
      return function(x, A) {
        T && (A = x, x = n);
        for (var D = 0; D < C.length; D++) A = C[D].apply(x, P ? [A] : []);
        return P ? A : x;
      };
    }
    function w(C, T, P, x) {
      if (typeof C != "function" && (x || C !== void 0)) throw new TypeError(T + " must " + (P || "be") + " a function" + (x ? "" : " or undefined"));
      return C;
    }
    function R(C, T, P, x, A, D, B, F, W, N, O) {
      function V(ee) {
        if (!O(ee)) throw new TypeError("Attempted to access private element on non-instance");
      }
      var G = [].concat(T[0]), U = T[3], se = !B, b = A === 1, S = A === 3, _ = A === 4, I = A === 2;
      function H(ee, ae, Ne) {
        return function(fe, ye) {
          return ae && (ye = fe, fe = C), Ne && Ne(fe), M[ee].call(fe, ye);
        };
      }
      if (!se) {
        var M = {}, $ = [], Y = S ? "get" : _ || b ? "set" : "value";
        if (W ? (N || b ? M = { get: A6(function() {
          return U(this);
        }, x, "get"), set: function(ee) {
          T[4](this, ee);
        } } : M[Y] = U, N || A6(M[Y], x, I ? "" : Y)) : N || (M = Object.getOwnPropertyDescriptor(C, x)), !N && !W) {
          if ((a = m[+F][x]) && (a ^ A) != 7) throw Error("Decorating two elements with the same name (" + M[Y].name + ") is not supported yet");
          m[+F][x] = A < 3 ? 1 : A;
        }
      }
      for (var K = C, ce = G.length - 1; ce >= 0; ce -= P ? 2 : 1) {
        var le = w(G[ce], "A decorator", "be", !0), _e = P ? G[ce - 1] : void 0, be = {}, Z = { kind: ["field", "accessor", "method", "getter", "setter", "class"][A], name: x, metadata: o, addInitializer: (function(ee, ae) {
          if (ee.v) throw new TypeError("attempted to call addInitializer after decoration was finished");
          w(ae, "An initializer", "be", !0), D.push(ae);
        }).bind(null, be) };
        if (se) a = le.call(_e, K, Z), be.v = 1, w(a, "class decorators", "return") && (K = a);
        else if (Z.static = F, Z.private = W, a = Z.access = { has: W ? O.bind() : function(ee) {
          return x in ee;
        } }, _ || (a.get = W ? I ? function(ee) {
          return V(ee), M.value;
        } : H("get", 0, V) : function(ee) {
          return ee[x];
        }), I || S || (a.set = W ? H("set", 0, V) : function(ee, ae) {
          ee[x] = ae;
        }), K = le.call(_e, b ? { get: M.get, set: M.set } : M[Y], Z), be.v = 1, b) {
          if (typeof K == "object" && K) (a = w(K.get, "accessor.get")) && (M.get = a), (a = w(K.set, "accessor.set")) && (M.set = a), (a = w(K.init, "accessor.init")) && $.unshift(a);
          else if (K !== void 0) throw new TypeError("accessor decorators must return an object with get, set, or init properties or undefined");
        } else w(K, (N ? "field" : "method") + " decorators", "return") && (N ? $.unshift(K) : M[Y] = K);
      }
      return A < 2 && B.push(y($, F, 1), y(D, F, 0)), N || se || (W ? b ? B.splice(-1, 0, H("get", F), H("set", F)) : B.push(I ? M[Y] : w.call.bind(M[Y])) : g(C, x, M)), K;
    }
    function E(C) {
      return g(C, f, { configurable: !0, enumerable: !0, value: o });
    }
    return o = p(o ?? null), u = [], h = function(C) {
      C && u.push(y(C));
    }, d = function(C, T) {
      for (var P = 0; P < t.length; P++) {
        var x = t[P], A = x[1], D = 7 & A;
        if ((8 & A) == C && !D == T) {
          var B = x[2], F = !!x[3], W = 16 & A;
          R(C ? n : n.prototype, x, W, F ? "#" + B : j4e(B), D, D < 2 ? [] : C ? c = c || [] : l = l || [], u, !!C, F, T, C && F ? function(N) {
            return U4e(N) === n;
          } : r);
        }
      }
    }, d(8, 0), d(0, 0), d(8, 1), d(0, 1), h(l), h(c), a = u, v || E(n), { e: a, get c() {
      var C = [];
      return v && [E(n = R(n, [e], i, n.name, 5, C)), y(C, 1)];
    } };
  }
  function j4e(n) {
    var e = z4e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function z4e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function A6(n, e, t) {
    typeof e == "symbol" && (e = (e = e.description) ? "[" + e + "]" : "");
    try {
      Object.defineProperty(n, "name", { configurable: !0, value: t ? t + " " + e : e });
    } catch {
    }
    return n;
  }
  function U4e(n) {
    if (Object(n) !== n) throw TypeError("right-hand side of 'in' should be an object, got " + (n !== null ? typeof n : "null"));
    return n;
  }
  let OZ;
  class G4e {
    constructor() {
      this.ea = ge(dO), this.idlist = SZ(this), this.titlelist = (_Z(this), RZ(this)), this.ids = (EZ(this), []), this.w3class = xZ(this, "w3-bar-item"), this.vertical = (TZ(this), MZ(this, !1)), this.listen = (AZ(this), PZ(this)), this.activeclasstemplate = (IZ(this), "w3-button w3-white w3-border-top w3-border-left w3-border-right"), this.inactiveclasstemplate = "w3-button w3-border-bottom w3-theme-l5", this.activeclasstemplatevertical = "w3-bar-item w3-button w3-white w3-border-top w3-border-left w3-border-bottom", this.inactiveclasstemplatevertical = "w3-bar-item w3-button w3-border-right w3-theme-l5", this.handleChange = (e) => {
        if (e.detail && e.detail.id) {
          let t = this.ids.find((i) => i.name === e.detail.id);
          t && this.open(t);
        }
      };
    }
    bound() {
      if (typeof this.vertical == "string" && (this.vertical = this.vertical === "true"), this.w3class ? (this.activeclass = this.w3class + " " + (this.vertical ? this.activeclasstemplatevertical : this.activeclasstemplate), this.inactiveclass = this.w3class + " " + (this.vertical ? this.inactiveclasstemplatevertical : this.inactiveclasstemplate)) : (this.activeclass = this.vertical ? this.activeclasstemplatevertical : this.activeclasstemplate, this.inactiveclass = this.vertical ? this.activeclasstemplatevertical : this.activeclasstemplate), this.idlist && (this.ids = this.idlist.split(",").map((e) => ({
        name: e,
        title: e,
        cls: this.inactiveclass
      })), this.titlelist)) {
        let e = this.titlelist.split(",");
        for (let t = 0; t < e.length; t++)
          this.ids[t] && (this.ids[t].title = e[t]);
      }
      this.subscription1 = this.ea.subscribe("quizshow", (e) => {
        const t = this.check(e);
        t && this.open(t);
      });
    }
    attached() {
      console.log("tabs component", this), this.open(this.ids[0]), this.listen && (console.log("tabs component listening custom event with name:", this.listen), document.addEventListener(this.listen, this.handleChange));
    }
    check(e) {
      if (e.includes(";")) {
        const t = e.split(";");
        return this.ids.find((i) => i.name === t[1]);
      } else return null;
    }
    unbinding() {
      this.subscription1.dispose();
    }
    open(e) {
      if (this.active)
        this.setinactive(this.active), this.setactive(e), this.active = e;
      else {
        for (let t of this.ids)
          t !== this.active && this.setinactive(t);
        this.setactive(e), this.active = e;
      }
    }
    setactive(e) {
      let t = document.getElementById(e.name);
      t && (t.style.display = "block", e.cls = this.activeclass, this.ea.publish("showtab", e.name));
    }
    setinactive(e) {
      let t = document.getElementById(e.name);
      t && (t.style.display = "none", e.cls = this.inactiveclass, this.ea.publish("hidetab", e.name));
    }
  }
  yZ = G4e;
  ({
    e: [SZ, _Z, RZ, EZ, xZ, TZ, MZ, AZ, PZ, IZ],
    c: [OZ, CZ]
  } = W4e(yZ, [Lc({
    ...V4e,
    name: "sv-tabs"
  })], [[Qr, 0, "idlist"], [Qr, 0, "titlelist"], [Qr, 0, "w3class"], [Qr, 0, "vertical"], [Qr, 0, "listen"]]));
  CZ();
  const kZ = "table-filtered", lO = `<div class="w3-row">
        <div class="w3-col" style="width:80px">
                <ul class="w3-ul w3-hoverable w3-small">
                        <li title="all" click.trigger="all()">all</li>
                        <li repeat.for="subject of subjects" click.trigger="filter(subject)" class="w3-padding-small" title.bind="subject">\${subject}
                        </li>
                </ul>
        </div>
        <div class="w3-col" style="width: calc(100% - 100px)">
                <div ref="mytable" show.bind="showtable"></div>
        </div>
</div>`, DZ = [], NZ = {};
  let mA;
  function Y4e(n) {
    mA || (mA = Li.define({ name: kZ, template: lO, dependencies: DZ, bindables: NZ })), n.register(mA);
  }
  const K4e = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    bindables: NZ,
    default: lO,
    dependencies: DZ,
    name: kZ,
    register: Y4e,
    template: lO
  }, Symbol.toStringTag, { value: "Module" }));
  var LZ;
  let HZ;
  function q4e(n, e, t, i, r, s) {
    var o, a, l, c, u, h, d, f = Symbol.metadata || Symbol.for("Symbol.metadata"), g = Object.defineProperty, p = Object.create, m = [p(null), p(null)], v = e.length;
    function y(C, T, P) {
      return function(x, A) {
        T && (A = x, x = n);
        for (var D = 0; D < C.length; D++) A = C[D].apply(x, P ? [A] : []);
        return P ? A : x;
      };
    }
    function w(C, T, P, x) {
      if (typeof C != "function" && (x || C !== void 0)) throw new TypeError(T + " must " + (P || "be") + " a function" + (x ? "" : " or undefined"));
      return C;
    }
    function R(C, T, P, x, A, D, B, F, W, N, O) {
      function V(ee) {
        if (!O(ee)) throw new TypeError("Attempted to access private element on non-instance");
      }
      var G = [].concat(T[0]), U = T[3], se = !B, b = A === 1, S = A === 3, _ = A === 4, I = A === 2;
      function H(ee, ae, Ne) {
        return function(fe, ye) {
          return ae && (ye = fe, fe = C), Ne && Ne(fe), M[ee].call(fe, ye);
        };
      }
      if (!se) {
        var M = {}, $ = [], Y = S ? "get" : _ || b ? "set" : "value";
        if (W ? (N || b ? M = { get: P6(function() {
          return U(this);
        }, x, "get"), set: function(ee) {
          T[4](this, ee);
        } } : M[Y] = U, N || P6(M[Y], x, I ? "" : Y)) : N || (M = Object.getOwnPropertyDescriptor(C, x)), !N && !W) {
          if ((a = m[+F][x]) && (a ^ A) != 7) throw Error("Decorating two elements with the same name (" + M[Y].name + ") is not supported yet");
          m[+F][x] = A < 3 ? 1 : A;
        }
      }
      for (var K = C, ce = G.length - 1; ce >= 0; ce -= P ? 2 : 1) {
        var le = w(G[ce], "A decorator", "be", !0), _e = P ? G[ce - 1] : void 0, be = {}, Z = { kind: ["field", "accessor", "method", "getter", "setter", "class"][A], name: x, metadata: o, addInitializer: (function(ee, ae) {
          if (ee.v) throw new TypeError("attempted to call addInitializer after decoration was finished");
          w(ae, "An initializer", "be", !0), D.push(ae);
        }).bind(null, be) };
        if (se) a = le.call(_e, K, Z), be.v = 1, w(a, "class decorators", "return") && (K = a);
        else if (Z.static = F, Z.private = W, a = Z.access = { has: W ? O.bind() : function(ee) {
          return x in ee;
        } }, _ || (a.get = W ? I ? function(ee) {
          return V(ee), M.value;
        } : H("get", 0, V) : function(ee) {
          return ee[x];
        }), I || S || (a.set = W ? H("set", 0, V) : function(ee, ae) {
          ee[x] = ae;
        }), K = le.call(_e, b ? { get: M.get, set: M.set } : M[Y], Z), be.v = 1, b) {
          if (typeof K == "object" && K) (a = w(K.get, "accessor.get")) && (M.get = a), (a = w(K.set, "accessor.set")) && (M.set = a), (a = w(K.init, "accessor.init")) && $.unshift(a);
          else if (K !== void 0) throw new TypeError("accessor decorators must return an object with get, set, or init properties or undefined");
        } else w(K, (N ? "field" : "method") + " decorators", "return") && (N ? $.unshift(K) : M[Y] = K);
      }
      return A < 2 && B.push(y($, F, 1), y(D, F, 0)), N || se || (W ? b ? B.splice(-1, 0, H("get", F), H("set", F)) : B.push(I ? M[Y] : w.call.bind(M[Y])) : g(C, x, M)), K;
    }
    function E(C) {
      return g(C, f, { configurable: !0, enumerable: !0, value: o });
    }
    return s !== void 0 && (o = s[f]), o = p(o ?? null), u = [], h = function(C) {
      C && u.push(y(C));
    }, d = function(C, T) {
      for (var P = 0; P < t.length; P++) {
        var x = t[P], A = x[1], D = 7 & A;
        if ((8 & A) == C && !D == T) {
          var B = x[2], F = !!x[3], W = 16 & A;
          R(C ? n : n.prototype, x, W, F ? "#" + B : X4e(B), D, D < 2 ? [] : C ? c = c || [] : l = l || [], u, !!C, F, T, C && F ? function(N) {
            return Q4e(N) === n;
          } : r);
        }
      }
    }, d(8, 0), d(0, 0), d(8, 1), d(0, 1), h(l), h(c), a = u, v || E(n), { e: a, get c() {
      var C = [];
      return v && [E(n = R(n, [e], i, n.name, 5, C)), y(C, 1)];
    } };
  }
  function X4e(n) {
    var e = Z4e(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function Z4e(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function P6(n, e, t) {
    typeof e == "symbol" && (e = (e = e.description) ? "[" + e + "]" : "");
    try {
      Object.defineProperty(n, "name", { configurable: !0, value: t ? t + " " + e : e });
    } catch {
    }
    return n;
  }
  function Q4e(n) {
    if (Object(n) !== n) throw TypeError("right-hand side of 'in' should be an object, got " + (n !== null ? typeof n : "null"));
    return n;
  }
  let $Z;
  class J4e extends pE {
    constructor(...e) {
      super(...e), this.subjects = ["all", "APC", "NRAS", "PIK3CA"];
    }
    attached() {
      super.attached(), this.subjects = [...new Set(this.data.map((e) => e[0]))];
    }
    all() {
      this.hot.loadData(this.data);
    }
    filter(e) {
      console.log("filtering", e);
      const t = this.data.filter((i) => i[0] === e);
      this.hot.loadData(t);
    }
  }
  LZ = J4e;
  [$Z, HZ] = q4e(LZ, [Lc({
    ...K4e,
    name: "sv-table-filtered"
  })], [], 0, void 0, pE).c;
  HZ();
  const FZ = "pdf-uploader", cO = `<div  class="w3-card w3-margin w3-padding">
    <form>
      <input type="file" accept="*/*" change.trigger="handleFileChange($event)" />
      <button type="button" click.trigger="uploadFile()">Extract knowledge</button>
    </form>
    <div class="w3-small">extract knowledge API:<input type="text"/></div>
</div>`, BZ = [], VZ = {};
  let bA;
  function eUe(n) {
    bA || (bA = Li.define({ name: FZ, template: cO, dependencies: BZ, bindables: VZ })), n.register(bA);
  }
  const tUe = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    bindables: VZ,
    default: cO,
    dependencies: BZ,
    name: FZ,
    register: eUe,
    template: cO
  }, Symbol.toStringTag, { value: "Module" }));
  var WZ;
  let jZ;
  function nUe(n, e, t, i, r, s) {
    var o, a, l, c, u, h, d, f = Symbol.metadata || Symbol.for("Symbol.metadata"), g = Object.defineProperty, p = Object.create, m = [p(null), p(null)], v = e.length;
    function y(C, T, P) {
      return function(x, A) {
        T && (A = x, x = n);
        for (var D = 0; D < C.length; D++) A = C[D].apply(x, P ? [A] : []);
        return P ? A : x;
      };
    }
    function w(C, T, P, x) {
      if (typeof C != "function" && (x || C !== void 0)) throw new TypeError(T + " must " + (P || "be") + " a function" + (x ? "" : " or undefined"));
      return C;
    }
    function R(C, T, P, x, A, D, B, F, W, N, O) {
      function V(ee) {
        if (!O(ee)) throw new TypeError("Attempted to access private element on non-instance");
      }
      var G = [].concat(T[0]), U = T[3], se = !B, b = A === 1, S = A === 3, _ = A === 4, I = A === 2;
      function H(ee, ae, Ne) {
        return function(fe, ye) {
          return ae && (ye = fe, fe = C), Ne && Ne(fe), M[ee].call(fe, ye);
        };
      }
      if (!se) {
        var M = {}, $ = [], Y = S ? "get" : _ || b ? "set" : "value";
        if (W ? (N || b ? M = { get: I6(function() {
          return U(this);
        }, x, "get"), set: function(ee) {
          T[4](this, ee);
        } } : M[Y] = U, N || I6(M[Y], x, I ? "" : Y)) : N || (M = Object.getOwnPropertyDescriptor(C, x)), !N && !W) {
          if ((a = m[+F][x]) && (a ^ A) != 7) throw Error("Decorating two elements with the same name (" + M[Y].name + ") is not supported yet");
          m[+F][x] = A < 3 ? 1 : A;
        }
      }
      for (var K = C, ce = G.length - 1; ce >= 0; ce -= P ? 2 : 1) {
        var le = w(G[ce], "A decorator", "be", !0), _e = P ? G[ce - 1] : void 0, be = {}, Z = { kind: ["field", "accessor", "method", "getter", "setter", "class"][A], name: x, metadata: o, addInitializer: (function(ee, ae) {
          if (ee.v) throw new TypeError("attempted to call addInitializer after decoration was finished");
          w(ae, "An initializer", "be", !0), D.push(ae);
        }).bind(null, be) };
        if (se) a = le.call(_e, K, Z), be.v = 1, w(a, "class decorators", "return") && (K = a);
        else if (Z.static = F, Z.private = W, a = Z.access = { has: W ? O.bind() : function(ee) {
          return x in ee;
        } }, _ || (a.get = W ? I ? function(ee) {
          return V(ee), M.value;
        } : H("get", 0, V) : function(ee) {
          return ee[x];
        }), I || S || (a.set = W ? H("set", 0, V) : function(ee, ae) {
          ee[x] = ae;
        }), K = le.call(_e, b ? { get: M.get, set: M.set } : M[Y], Z), be.v = 1, b) {
          if (typeof K == "object" && K) (a = w(K.get, "accessor.get")) && (M.get = a), (a = w(K.set, "accessor.set")) && (M.set = a), (a = w(K.init, "accessor.init")) && $.unshift(a);
          else if (K !== void 0) throw new TypeError("accessor decorators must return an object with get, set, or init properties or undefined");
        } else w(K, (N ? "field" : "method") + " decorators", "return") && (N ? $.unshift(K) : M[Y] = K);
      }
      return A < 2 && B.push(y($, F, 1), y(D, F, 0)), N || se || (W ? b ? B.splice(-1, 0, H("get", F), H("set", F)) : B.push(I ? M[Y] : w.call.bind(M[Y])) : g(C, x, M)), K;
    }
    function E(C) {
      return g(C, f, { configurable: !0, enumerable: !0, value: o });
    }
    return o = p(o ?? null), u = [], h = function(C) {
      C && u.push(y(C));
    }, d = function(C, T) {
      for (var P = 0; P < t.length; P++) {
        var x = t[P], A = x[1], D = 7 & A;
        if ((8 & A) == C && !D == T) {
          var B = x[2], F = !!x[3], W = 16 & A;
          R(C ? n : n.prototype, x, W, F ? "#" + B : iUe(B), D, D < 2 ? [] : C ? c = c || [] : l = l || [], u, !!C, F, T, C && F ? function(N) {
            return sUe(N) === n;
          } : r);
        }
      }
    }, d(8, 0), d(0, 0), d(8, 1), d(0, 1), h(l), h(c), a = u, v || E(n), { e: a, get c() {
      var C = [];
      return v && [E(n = R(n, [e], i, n.name, 5, C)), y(C, 1)];
    } };
  }
  function iUe(n) {
    var e = rUe(n, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function rUe(n, e) {
    if (typeof n != "object" || !n) return n;
    var t = n[Symbol.toPrimitive];
    if (t !== void 0) {
      var i = t.call(n, e || "default");
      if (typeof i != "object") return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(n);
  }
  function I6(n, e, t) {
    typeof e == "symbol" && (e = (e = e.description) ? "[" + e + "]" : "");
    try {
      Object.defineProperty(n, "name", { configurable: !0, value: t ? t + " " + e : e });
    } catch {
    }
    return n;
  }
  function sUe(n) {
    if (Object(n) !== n) throw TypeError("right-hand side of 'in' should be an object, got " + (n !== null ? typeof n : "null"));
    return n;
  }
  let zZ;
  class oUe {
    constructor() {
      this.file = null, this.url = "http://localhost:5000/upload";
    }
    handleFileChange(e) {
      this.file = e.target.files[0];
    }
    async uploadFile() {
      if (!this.file) {
        alert("Please select a file to upload.");
        return;
      }
      const e = new FormData();
      e.append("file", this.file);
      try {
        const t = await fetch(this.url, {
          method: "POST",
          body: e
        });
        t.ok ? alert("File uploaded successfully!") : alert(`Failed to upload file: ${t.statusText}`);
      } catch (t) {
        alert(`Error uploading file: ${t.message}`);
      }
    }
  }
  WZ = oUe;
  [zZ, jZ] = nUe(WZ, [Lc({
    ...tUe,
    name: "sv-pdf-uploader"
  })], []).c;
  jZ();
  const $H = pf.createContainer();
  $H.register(Vd.instance(ho, _u.getOrCreate(globalThis)));
  $H.register(Xie);
  const Uc = $H.get(Zie);
  Uc.define("sv-chartjs", a1);
  Uc.define("sv-chartjs-scatter", L4);
  Uc.define("sv-table", pE);
  Uc.define("sv-geochart", Jq);
  Uc.define("sv-table-filtered", $Z);
  Uc.define("sv-network", uZ);
  Uc.define("sv-table-network", mZ);
  Uc.define("sv-tabs", OZ);
  Uc.define("sv-pdf-uploader", zZ);
});
export default aUe();
